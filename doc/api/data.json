{
    "project": {},
    "files": {
        "parsley.js": {
            "name": "parsley.js",
            "modules": {},
            "classes": {
                "Validator": 1,
                "ParsleyField": 1,
                "ParsleyFieldMultiple": 1,
                "ParsleyForm": 1,
                "Parsley": 1
            },
            "fors": {},
            "namespaces": {}
        }
    },
    "modules": {},
    "classes": {
        "Validator": {
            "name": "Validator",
            "shortname": "Validator",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "parsley.js",
            "line": 11,
            "description": "Validator class stores all constraints functions and associated messages.\nProvides public interface to add, remove or modify them",
            "is_constructor": 1
        },
        "ParsleyField": {
            "name": "ParsleyField",
            "shortname": "ParsleyField",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "parsley.js",
            "line": 227,
            "description": "ParsleyField class manage each form field inside a validated Parsley form.\nReturns if field valid or not depending on its value and constraints\nManage field error display and behavior, event triggers and more",
            "is_constructor": 1
        },
        "ParsleyFieldMultiple": {
            "name": "ParsleyFieldMultiple",
            "shortname": "ParsleyFieldMultiple",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "parsley.js",
            "line": 532,
            "description": "ParsleyFieldMultiple override ParsleyField for checkbox and radio inputs\nPseudo-heritance to manage divergent behavior from ParsleyItem in dedicated methods",
            "is_constructor": 1
        },
        "ParsleyForm": {
            "name": "ParsleyForm",
            "shortname": "ParsleyForm",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "parsley.js",
            "line": 628,
            "description": "ParsleyForm class manage Parsley validated form.\nManage its fields and global validation",
            "is_constructor": 1
        },
        "Parsley": {
            "name": "Parsley",
            "shortname": "Parsley",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "parsley.js",
            "line": 720,
            "description": "Parsley plugin definition\nProvides an interface to access public Validator, ParsleyForm and ParsleyField functions",
            "is_constructor": 1,
            "params": [
                {
                    "name": "Options.",
                    "description": "{Object} to configure Parsley or {String} method name to call a public class method",
                    "type": "Mixed"
                },
                {
                    "name": "Callback",
                    "description": "function",
                    "type": "Function"
                }
            ],
            "return": {
                "description": "public class method return",
                "type": "Mixed"
            }
        }
    },
    "classitems": [
        {
            "file": "parsley.js",
            "line": 26,
            "description": "Error messages",
            "itemtype": "property",
            "name": "messages",
            "type": "{Object}",
            "class": "Validator"
        },
        {
            "file": "parsley.js",
            "line": 55,
            "description": "Validator list. Built-in validators functions",
            "itemtype": "property",
            "name": "validators",
            "type": "{Object}",
            "class": "Validator"
        },
        {
            "file": "parsley.js",
            "line": 70,
            "description": "Works on all inputs. val is object for checkboxes",
            "class": "Validator"
        },
        {
            "file": "parsley.js",
            "line": 146,
            "description": "Aliases for checkboxes constraints",
            "class": "Validator"
        },
        {
            "file": "parsley.js",
            "line": 178,
            "description": "Replace %s placeholders by values",
            "itemtype": "method",
            "name": "formatMesssage",
            "params": [
                {
                    "name": "message",
                    "description": "Message key",
                    "type": "String"
                },
                {
                    "name": "args",
                    "description": "Args passed by validators functions. Could be string, number or object",
                    "type": "Mixed"
                }
            ],
            "return": {
                "description": "Formatted string",
                "type": "String"
            },
            "class": "Validator"
        },
        {
            "file": "parsley.js",
            "line": 199,
            "description": "Add / override a validator in validators list",
            "itemtype": "method",
            "name": "addValidator",
            "params": [
                {
                    "name": "name",
                    "description": "Validator name. Will automatically bindable through data-name=\"\"",
                    "type": "String"
                },
                {
                    "name": "fn",
                    "description": "Validator function. Must return {Boolean}",
                    "type": "Function"
                }
            ],
            "class": "Validator"
        },
        {
            "file": "parsley.js",
            "line": 210,
            "description": "Add / override error message",
            "itemtype": "method",
            "name": "addMessage",
            "params": [
                {
                    "name": "name",
                    "description": "Message name. Will automatically be binded to validator with same name",
                    "type": "String"
                },
                {
                    "name": "message",
                    "description": "Message",
                    "type": "String"
                }
            ],
            "class": "Validator"
        },
        {
            "file": "parsley.js",
            "line": 248,
            "description": "Set some properties, bind constraint validators and validation events",
            "itemtype": "method",
            "name": "init",
            "params": [
                {
                    "name": "element",
                    "description": "",
                    "type": "Object"
                },
                {
                    "name": "options",
                    "description": "",
                    "type": "Object"
                }
            ],
            "class": "ParsleyField"
        },
        {
            "file": "parsley.js",
            "line": 282,
            "description": "Attach field validators functions passed through data-api",
            "itemtype": "method",
            "name": "addConstraints",
            "class": "ParsleyField"
        },
        {
            "file": "parsley.js",
            "line": 298,
            "description": "Bind validation events on a field",
            "itemtype": "method",
            "name": "bindValidationEvents",
            "class": "ParsleyField"
        },
        {
            "file": "parsley.js",
            "line": 315,
            "description": "Hash management. Used for ul error",
            "itemtype": "method",
            "name": "generateHash",
            "return": {
                "description": "5 letters unique hash",
                "type": "String"
            },
            "class": "ParsleyField"
        },
        {
            "file": "parsley.js",
            "line": 332,
            "description": "Public getHash accessor",
            "itemtype": "method",
            "name": "generateHash",
            "return": {
                "description": "hash",
                "type": "String"
            },
            "class": "ParsleyField"
        },
        {
            "file": "parsley.js",
            "line": 342,
            "description": "Returns field val needed for validation\nSpecial treatment for radio & checkboxes",
            "itemtype": "method",
            "name": "getVal",
            "return": {
                "description": "val",
                "type": "String"
            },
            "class": "ParsleyField"
        },
        {
            "file": "parsley.js",
            "line": 353,
            "description": "Called when validation is triggered by an event\nDo nothing if val.length < this.options.validationMinlength",
            "itemtype": "method",
            "name": "eventValidation",
            "params": [
                {
                    "name": "event",
                    "description": "jQuery event",
                    "type": "Object"
                }
            ],
            "class": "ParsleyField"
        },
        {
            "file": "parsley.js",
            "line": 381,
            "description": "Validate a field & display errors",
            "itemtype": "method",
            "name": "validate",
            "params": [
                {
                    "name": "doNotShowErrors",
                    "description": "set to true if you just want isValid boolean without error bubbling next to fields",
                    "type": "Boolean"
                }
            ],
            "return": {
                "description": "Is field valid or not",
                "type": "Boolean"
            },
            "class": "ParsleyField"
        },
        {
            "file": "parsley.js",
            "line": 405,
            "description": "Loop through every fields validators\nAdds errors after unvalid fields",
            "itemtype": "method",
            "name": "applyValidators",
            "return": {
                "description": "Is field valid or not",
                "type": "Boolean"
            },
            "class": "ParsleyField"
        },
        {
            "file": "parsley.js",
            "line": 430,
            "description": "Fired when all validators have be executed\nReturns true or false if field is valid or not\nDisplay errors messages below faild fields\nAdds parsley-success or parsley-error class on fields",
            "itemtype": "method",
            "name": "manageValidationResult",
            "return": {
                "description": "Is field valid or not",
                "type": "Boolean"
            },
            "class": "ParsleyField"
        },
        {
            "file": "parsley.js",
            "line": 459,
            "description": "Remove li / ul error",
            "itemtype": "method",
            "name": "removeError",
            "params": [
                {
                    "name": "methodName",
                    "description": "Method Name",
                    "type": "String"
                }
            ],
            "class": "ParsleyField"
        },
        {
            "file": "parsley.js",
            "line": 475,
            "description": "Remove all ul / li errors",
            "itemtype": "method",
            "name": "removeErrors",
            "class": "ParsleyField"
        },
        {
            "file": "parsley.js",
            "line": 485,
            "description": "Remove ul errors and parsley error or success classes",
            "itemtype": "method",
            "name": "reset",
            "class": "ParsleyField"
        },
        {
            "file": "parsley.js",
            "line": 496,
            "description": "Add li / ul errors messages",
            "itemtype": "method",
            "name": "addError",
            "params": [
                {
                    "name": "methodName",
                    "description": "Method name",
                    "type": "String"
                },
                {
                    "name": "requirements",
                    "description": "Method requirements if adding an error",
                    "type": "Mixed"
                }
            ],
            "class": "ParsleyField"
        },
        {
            "file": "parsley.js",
            "line": 520,
            "description": "Add custom listeners",
            "params": [
                {
                    "name": "{",
                    "description": "listener: function () {} }, eg { onFormSubmit: function ( isValid, event, focus ) { ... } }",
                    "type": "Object"
                }
            ],
            "class": "ParsleyField"
        },
        {
            "file": "parsley.js",
            "line": 548,
            "description": "Set some specific properties, call some extra methods to manage radio / checkbox",
            "itemtype": "method",
            "name": "init",
            "params": [
                {
                    "name": "element",
                    "description": "",
                    "type": "Object"
                },
                {
                    "name": "options",
                    "description": "",
                    "type": "Object"
                }
            ],
            "class": "ParsleyFieldMultiple"
        },
        {
            "file": "parsley.js",
            "line": 572,
            "description": "Set specific constraints messages, do pseudo-heritance",
            "itemtype": "method",
            "name": "inherit",
            "params": [
                {
                    "name": "element",
                    "description": "",
                    "type": "Object"
                },
                {
                    "name": "options",
                    "description": "",
                    "type": "Object"
                }
            ],
            "class": "ParsleyFieldMultiple"
        },
        {
            "file": "parsley.js",
            "line": 595,
            "description": "Set specific constraints messages, do pseudo-heritance",
            "itemtype": "method",
            "name": "getHash",
            "return": {
                "description": "hash radio / checkbox hash is cleaned \"name\" property",
                "type": "String"
            },
            "class": "ParsleyFieldMultiple"
        },
        {
            "file": "parsley.js",
            "line": 605,
            "description": "Special treatment for radio & checkboxes\nReturns checked radio or checkboxes values",
            "itemtype": "method",
            "name": "getVal",
            "return": {
                "description": "val",
                "type": "String"
            },
            "class": "ParsleyFieldMultiple"
        },
        {
            "file": "parsley.js",
            "line": 659,
            "description": "Add custom listeners",
            "params": [
                {
                    "name": "{",
                    "description": "listener: function () {} }, eg { onFormSubmit: function ( isValid, event, focus ) { ... } }",
                    "type": "Object"
                }
            ],
            "class": "ParsleyForm"
        },
        {
            "file": "parsley.js",
            "line": 676,
            "description": "Process each form field validation\nDisplay errors, call custom onFormSubmit() function",
            "itemtype": "method",
            "name": "validate",
            "params": [
                {
                    "name": "event",
                    "description": "jQuery Event",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "Is form valid or not",
                "type": "Boolean"
            },
            "class": "ParsleyForm"
        },
        {
            "file": "parsley.js",
            "line": 708,
            "description": "Remove all errors ul under invalid fields",
            "itemtype": "method",
            "name": "removeErrors",
            "class": "ParsleyForm"
        },
        {
            "file": "parsley.js",
            "line": 777,
            "description": "Parsley plugin configuration",
            "itemtype": "property",
            "name": "$.fn.parsley.defaults",
            "type": "{Object}",
            "class": "Parsley"
        }
    ],
    "warnings": [
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " parsley.js:315"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " parsley.js:332"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " parsley.js:342"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " parsley.js:595"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " parsley.js:605"
        },
        {
            "message": "Missing item type\nWorks on all inputs. val is object for checkboxes",
            "line": " parsley.js:70"
        },
        {
            "message": "Missing item type\nAliases for checkboxes constraints",
            "line": " parsley.js:146"
        },
        {
            "message": "Missing item type\nAdd custom listeners",
            "line": " parsley.js:520"
        },
        {
            "message": "Missing item type\nAdd custom listeners",
            "line": " parsley.js:659"
        }
    ]
}