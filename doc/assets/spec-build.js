(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
/*!
 * jQuery JavaScript Library v3.3.1
 * https://jquery.com/
 *
 * Includes Sizzle.js
 * https://sizzlejs.com/
 *
 * Copyright JS Foundation and other contributors
 * Released under the MIT license
 * https://jquery.org/license
 *
 * Date: 2018-01-20T17:24Z
 */
( function( global, factory ) {

	"use strict";

	if ( typeof module === "object" && typeof module.exports === "object" ) {

		// For CommonJS and CommonJS-like environments where a proper `window`
		// is present, execute the factory and get jQuery.
		// For environments that do not have a `window` with a `document`
		// (such as Node.js), expose a factory as module.exports.
		// This accentuates the need for the creation of a real `window`.
		// e.g. var jQuery = require("jquery")(window);
		// See ticket #14549 for more info.
		module.exports = global.document ?
			factory( global, true ) :
			function( w ) {
				if ( !w.document ) {
					throw new Error( "jQuery requires a window with a document" );
				}
				return factory( w );
			};
	} else {
		factory( global );
	}

// Pass this if window is not defined yet
} )( typeof window !== "undefined" ? window : this, function( window, noGlobal ) {

// Edge <= 12 - 13+, Firefox <=18 - 45+, IE 10 - 11, Safari 5.1 - 9+, iOS 6 - 9.1
// throw exceptions when non-strict code (e.g., ASP.NET 4.5) accesses strict mode
// arguments.callee.caller (trac-13335). But as of jQuery 3.0 (2016), strict mode should be common
// enough that all such attempts are guarded in a try block.
"use strict";

var arr = [];

var document = window.document;

var getProto = Object.getPrototypeOf;

var slice = arr.slice;

var concat = arr.concat;

var push = arr.push;

var indexOf = arr.indexOf;

var class2type = {};

var toString = class2type.toString;

var hasOwn = class2type.hasOwnProperty;

var fnToString = hasOwn.toString;

var ObjectFunctionString = fnToString.call( Object );

var support = {};

var isFunction = function isFunction( obj ) {

      // Support: Chrome <=57, Firefox <=52
      // In some browsers, typeof returns "function" for HTML <object> elements
      // (i.e., `typeof document.createElement( "object" ) === "function"`).
      // We don't want to classify *any* DOM node as a function.
      return typeof obj === "function" && typeof obj.nodeType !== "number";
  };


var isWindow = function isWindow( obj ) {
		return obj != null && obj === obj.window;
	};




	var preservedScriptAttributes = {
		type: true,
		src: true,
		noModule: true
	};

	function DOMEval( code, doc, node ) {
		doc = doc || document;

		var i,
			script = doc.createElement( "script" );

		script.text = code;
		if ( node ) {
			for ( i in preservedScriptAttributes ) {
				if ( node[ i ] ) {
					script[ i ] = node[ i ];
				}
			}
		}
		doc.head.appendChild( script ).parentNode.removeChild( script );
	}


function toType( obj ) {
	if ( obj == null ) {
		return obj + "";
	}

	// Support: Android <=2.3 only (functionish RegExp)
	return typeof obj === "object" || typeof obj === "function" ?
		class2type[ toString.call( obj ) ] || "object" :
		typeof obj;
}
/* global Symbol */
// Defining this global in .eslintrc.json would create a danger of using the global
// unguarded in another place, it seems safer to define global only for this module



var
	version = "3.3.1",

	// Define a local copy of jQuery
	jQuery = function( selector, context ) {

		// The jQuery object is actually just the init constructor 'enhanced'
		// Need init if jQuery is called (just allow error to be thrown if not included)
		return new jQuery.fn.init( selector, context );
	},

	// Support: Android <=4.0 only
	// Make sure we trim BOM and NBSP
	rtrim = /^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g;

jQuery.fn = jQuery.prototype = {

	// The current version of jQuery being used
	jquery: version,

	constructor: jQuery,

	// The default length of a jQuery object is 0
	length: 0,

	toArray: function() {
		return slice.call( this );
	},

	// Get the Nth element in the matched element set OR
	// Get the whole matched element set as a clean array
	get: function( num ) {

		// Return all the elements in a clean array
		if ( num == null ) {
			return slice.call( this );
		}

		// Return just the one element from the set
		return num < 0 ? this[ num + this.length ] : this[ num ];
	},

	// Take an array of elements and push it onto the stack
	// (returning the new matched element set)
	pushStack: function( elems ) {

		// Build a new jQuery matched element set
		var ret = jQuery.merge( this.constructor(), elems );

		// Add the old object onto the stack (as a reference)
		ret.prevObject = this;

		// Return the newly-formed element set
		return ret;
	},

	// Execute a callback for every element in the matched set.
	each: function( callback ) {
		return jQuery.each( this, callback );
	},

	map: function( callback ) {
		return this.pushStack( jQuery.map( this, function( elem, i ) {
			return callback.call( elem, i, elem );
		} ) );
	},

	slice: function() {
		return this.pushStack( slice.apply( this, arguments ) );
	},

	first: function() {
		return this.eq( 0 );
	},

	last: function() {
		return this.eq( -1 );
	},

	eq: function( i ) {
		var len = this.length,
			j = +i + ( i < 0 ? len : 0 );
		return this.pushStack( j >= 0 && j < len ? [ this[ j ] ] : [] );
	},

	end: function() {
		return this.prevObject || this.constructor();
	},

	// For internal use only.
	// Behaves like an Array's method, not like a jQuery method.
	push: push,
	sort: arr.sort,
	splice: arr.splice
};

jQuery.extend = jQuery.fn.extend = function() {
	var options, name, src, copy, copyIsArray, clone,
		target = arguments[ 0 ] || {},
		i = 1,
		length = arguments.length,
		deep = false;

	// Handle a deep copy situation
	if ( typeof target === "boolean" ) {
		deep = target;

		// Skip the boolean and the target
		target = arguments[ i ] || {};
		i++;
	}

	// Handle case when target is a string or something (possible in deep copy)
	if ( typeof target !== "object" && !isFunction( target ) ) {
		target = {};
	}

	// Extend jQuery itself if only one argument is passed
	if ( i === length ) {
		target = this;
		i--;
	}

	for ( ; i < length; i++ ) {

		// Only deal with non-null/undefined values
		if ( ( options = arguments[ i ] ) != null ) {

			// Extend the base object
			for ( name in options ) {
				src = target[ name ];
				copy = options[ name ];

				// Prevent never-ending loop
				if ( target === copy ) {
					continue;
				}

				// Recurse if we're merging plain objects or arrays
				if ( deep && copy && ( jQuery.isPlainObject( copy ) ||
					( copyIsArray = Array.isArray( copy ) ) ) ) {

					if ( copyIsArray ) {
						copyIsArray = false;
						clone = src && Array.isArray( src ) ? src : [];

					} else {
						clone = src && jQuery.isPlainObject( src ) ? src : {};
					}

					// Never move original objects, clone them
					target[ name ] = jQuery.extend( deep, clone, copy );

				// Don't bring in undefined values
				} else if ( copy !== undefined ) {
					target[ name ] = copy;
				}
			}
		}
	}

	// Return the modified object
	return target;
};

jQuery.extend( {

	// Unique for each copy of jQuery on the page
	expando: "jQuery" + ( version + Math.random() ).replace( /\D/g, "" ),

	// Assume jQuery is ready without the ready module
	isReady: true,

	error: function( msg ) {
		throw new Error( msg );
	},

	noop: function() {},

	isPlainObject: function( obj ) {
		var proto, Ctor;

		// Detect obvious negatives
		// Use toString instead of jQuery.type to catch host objects
		if ( !obj || toString.call( obj ) !== "[object Object]" ) {
			return false;
		}

		proto = getProto( obj );

		// Objects with no prototype (e.g., `Object.create( null )`) are plain
		if ( !proto ) {
			return true;
		}

		// Objects with prototype are plain iff they were constructed by a global Object function
		Ctor = hasOwn.call( proto, "constructor" ) && proto.constructor;
		return typeof Ctor === "function" && fnToString.call( Ctor ) === ObjectFunctionString;
	},

	isEmptyObject: function( obj ) {

		/* eslint-disable no-unused-vars */
		// See https://github.com/eslint/eslint/issues/6125
		var name;

		for ( name in obj ) {
			return false;
		}
		return true;
	},

	// Evaluates a script in a global context
	globalEval: function( code ) {
		DOMEval( code );
	},

	each: function( obj, callback ) {
		var length, i = 0;

		if ( isArrayLike( obj ) ) {
			length = obj.length;
			for ( ; i < length; i++ ) {
				if ( callback.call( obj[ i ], i, obj[ i ] ) === false ) {
					break;
				}
			}
		} else {
			for ( i in obj ) {
				if ( callback.call( obj[ i ], i, obj[ i ] ) === false ) {
					break;
				}
			}
		}

		return obj;
	},

	// Support: Android <=4.0 only
	trim: function( text ) {
		return text == null ?
			"" :
			( text + "" ).replace( rtrim, "" );
	},

	// results is for internal usage only
	makeArray: function( arr, results ) {
		var ret = results || [];

		if ( arr != null ) {
			if ( isArrayLike( Object( arr ) ) ) {
				jQuery.merge( ret,
					typeof arr === "string" ?
					[ arr ] : arr
				);
			} else {
				push.call( ret, arr );
			}
		}

		return ret;
	},

	inArray: function( elem, arr, i ) {
		return arr == null ? -1 : indexOf.call( arr, elem, i );
	},

	// Support: Android <=4.0 only, PhantomJS 1 only
	// push.apply(_, arraylike) throws on ancient WebKit
	merge: function( first, second ) {
		var len = +second.length,
			j = 0,
			i = first.length;

		for ( ; j < len; j++ ) {
			first[ i++ ] = second[ j ];
		}

		first.length = i;

		return first;
	},

	grep: function( elems, callback, invert ) {
		var callbackInverse,
			matches = [],
			i = 0,
			length = elems.length,
			callbackExpect = !invert;

		// Go through the array, only saving the items
		// that pass the validator function
		for ( ; i < length; i++ ) {
			callbackInverse = !callback( elems[ i ], i );
			if ( callbackInverse !== callbackExpect ) {
				matches.push( elems[ i ] );
			}
		}

		return matches;
	},

	// arg is for internal usage only
	map: function( elems, callback, arg ) {
		var length, value,
			i = 0,
			ret = [];

		// Go through the array, translating each of the items to their new values
		if ( isArrayLike( elems ) ) {
			length = elems.length;
			for ( ; i < length; i++ ) {
				value = callback( elems[ i ], i, arg );

				if ( value != null ) {
					ret.push( value );
				}
			}

		// Go through every key on the object,
		} else {
			for ( i in elems ) {
				value = callback( elems[ i ], i, arg );

				if ( value != null ) {
					ret.push( value );
				}
			}
		}

		// Flatten any nested arrays
		return concat.apply( [], ret );
	},

	// A global GUID counter for objects
	guid: 1,

	// jQuery.support is not used in Core but other projects attach their
	// properties to it so it needs to exist.
	support: support
} );

if ( typeof Symbol === "function" ) {
	jQuery.fn[ Symbol.iterator ] = arr[ Symbol.iterator ];
}

// Populate the class2type map
jQuery.each( "Boolean Number String Function Array Date RegExp Object Error Symbol".split( " " ),
function( i, name ) {
	class2type[ "[object " + name + "]" ] = name.toLowerCase();
} );

function isArrayLike( obj ) {

	// Support: real iOS 8.2 only (not reproducible in simulator)
	// `in` check used to prevent JIT error (gh-2145)
	// hasOwn isn't used here due to false negatives
	// regarding Nodelist length in IE
	var length = !!obj && "length" in obj && obj.length,
		type = toType( obj );

	if ( isFunction( obj ) || isWindow( obj ) ) {
		return false;
	}

	return type === "array" || length === 0 ||
		typeof length === "number" && length > 0 && ( length - 1 ) in obj;
}
var Sizzle =
/*!
 * Sizzle CSS Selector Engine v2.3.3
 * https://sizzlejs.com/
 *
 * Copyright jQuery Foundation and other contributors
 * Released under the MIT license
 * http://jquery.org/license
 *
 * Date: 2016-08-08
 */
(function( window ) {

var i,
	support,
	Expr,
	getText,
	isXML,
	tokenize,
	compile,
	select,
	outermostContext,
	sortInput,
	hasDuplicate,

	// Local document vars
	setDocument,
	document,
	docElem,
	documentIsHTML,
	rbuggyQSA,
	rbuggyMatches,
	matches,
	contains,

	// Instance-specific data
	expando = "sizzle" + 1 * new Date(),
	preferredDoc = window.document,
	dirruns = 0,
	done = 0,
	classCache = createCache(),
	tokenCache = createCache(),
	compilerCache = createCache(),
	sortOrder = function( a, b ) {
		if ( a === b ) {
			hasDuplicate = true;
		}
		return 0;
	},

	// Instance methods
	hasOwn = ({}).hasOwnProperty,
	arr = [],
	pop = arr.pop,
	push_native = arr.push,
	push = arr.push,
	slice = arr.slice,
	// Use a stripped-down indexOf as it's faster than native
	// https://jsperf.com/thor-indexof-vs-for/5
	indexOf = function( list, elem ) {
		var i = 0,
			len = list.length;
		for ( ; i < len; i++ ) {
			if ( list[i] === elem ) {
				return i;
			}
		}
		return -1;
	},

	booleans = "checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped",

	// Regular expressions

	// http://www.w3.org/TR/css3-selectors/#whitespace
	whitespace = "[\\x20\\t\\r\\n\\f]",

	// http://www.w3.org/TR/CSS21/syndata.html#value-def-identifier
	identifier = "(?:\\\\.|[\\w-]|[^\0-\\xa0])+",

	// Attribute selectors: http://www.w3.org/TR/selectors/#attribute-selectors
	attributes = "\\[" + whitespace + "*(" + identifier + ")(?:" + whitespace +
		// Operator (capture 2)
		"*([*^$|!~]?=)" + whitespace +
		// "Attribute values must be CSS identifiers [capture 5] or strings [capture 3 or capture 4]"
		"*(?:'((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\"|(" + identifier + "))|)" + whitespace +
		"*\\]",

	pseudos = ":(" + identifier + ")(?:\\((" +
		// To reduce the number of selectors needing tokenize in the preFilter, prefer arguments:
		// 1. quoted (capture 3; capture 4 or capture 5)
		"('((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\")|" +
		// 2. simple (capture 6)
		"((?:\\\\.|[^\\\\()[\\]]|" + attributes + ")*)|" +
		// 3. anything else (capture 2)
		".*" +
		")\\)|)",

	// Leading and non-escaped trailing whitespace, capturing some non-whitespace characters preceding the latter
	rwhitespace = new RegExp( whitespace + "+", "g" ),
	rtrim = new RegExp( "^" + whitespace + "+|((?:^|[^\\\\])(?:\\\\.)*)" + whitespace + "+$", "g" ),

	rcomma = new RegExp( "^" + whitespace + "*," + whitespace + "*" ),
	rcombinators = new RegExp( "^" + whitespace + "*([>+~]|" + whitespace + ")" + whitespace + "*" ),

	rattributeQuotes = new RegExp( "=" + whitespace + "*([^\\]'\"]*?)" + whitespace + "*\\]", "g" ),

	rpseudo = new RegExp( pseudos ),
	ridentifier = new RegExp( "^" + identifier + "$" ),

	matchExpr = {
		"ID": new RegExp( "^#(" + identifier + ")" ),
		"CLASS": new RegExp( "^\\.(" + identifier + ")" ),
		"TAG": new RegExp( "^(" + identifier + "|[*])" ),
		"ATTR": new RegExp( "^" + attributes ),
		"PSEUDO": new RegExp( "^" + pseudos ),
		"CHILD": new RegExp( "^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\(" + whitespace +
			"*(even|odd|(([+-]|)(\\d*)n|)" + whitespace + "*(?:([+-]|)" + whitespace +
			"*(\\d+)|))" + whitespace + "*\\)|)", "i" ),
		"bool": new RegExp( "^(?:" + booleans + ")$", "i" ),
		// For use in libraries implementing .is()
		// We use this for POS matching in `select`
		"needsContext": new RegExp( "^" + whitespace + "*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\(" +
			whitespace + "*((?:-\\d)?\\d*)" + whitespace + "*\\)|)(?=[^-]|$)", "i" )
	},

	rinputs = /^(?:input|select|textarea|button)$/i,
	rheader = /^h\d$/i,

	rnative = /^[^{]+\{\s*\[native \w/,

	// Easily-parseable/retrievable ID or TAG or CLASS selectors
	rquickExpr = /^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/,

	rsibling = /[+~]/,

	// CSS escapes
	// http://www.w3.org/TR/CSS21/syndata.html#escaped-characters
	runescape = new RegExp( "\\\\([\\da-f]{1,6}" + whitespace + "?|(" + whitespace + ")|.)", "ig" ),
	funescape = function( _, escaped, escapedWhitespace ) {
		var high = "0x" + escaped - 0x10000;
		// NaN means non-codepoint
		// Support: Firefox<24
		// Workaround erroneous numeric interpretation of +"0x"
		return high !== high || escapedWhitespace ?
			escaped :
			high < 0 ?
				// BMP codepoint
				String.fromCharCode( high + 0x10000 ) :
				// Supplemental Plane codepoint (surrogate pair)
				String.fromCharCode( high >> 10 | 0xD800, high & 0x3FF | 0xDC00 );
	},

	// CSS string/identifier serialization
	// https://drafts.csswg.org/cssom/#common-serializing-idioms
	rcssescape = /([\0-\x1f\x7f]|^-?\d)|^-$|[^\0-\x1f\x7f-\uFFFF\w-]/g,
	fcssescape = function( ch, asCodePoint ) {
		if ( asCodePoint ) {

			// U+0000 NULL becomes U+FFFD REPLACEMENT CHARACTER
			if ( ch === "\0" ) {
				return "\uFFFD";
			}

			// Control characters and (dependent upon position) numbers get escaped as code points
			return ch.slice( 0, -1 ) + "\\" + ch.charCodeAt( ch.length - 1 ).toString( 16 ) + " ";
		}

		// Other potentially-special ASCII characters get backslash-escaped
		return "\\" + ch;
	},

	// Used for iframes
	// See setDocument()
	// Removing the function wrapper causes a "Permission Denied"
	// error in IE
	unloadHandler = function() {
		setDocument();
	},

	disabledAncestor = addCombinator(
		function( elem ) {
			return elem.disabled === true && ("form" in elem || "label" in elem);
		},
		{ dir: "parentNode", next: "legend" }
	);

// Optimize for push.apply( _, NodeList )
try {
	push.apply(
		(arr = slice.call( preferredDoc.childNodes )),
		preferredDoc.childNodes
	);
	// Support: Android<4.0
	// Detect silently failing push.apply
	arr[ preferredDoc.childNodes.length ].nodeType;
} catch ( e ) {
	push = { apply: arr.length ?

		// Leverage slice if possible
		function( target, els ) {
			push_native.apply( target, slice.call(els) );
		} :

		// Support: IE<9
		// Otherwise append directly
		function( target, els ) {
			var j = target.length,
				i = 0;
			// Can't trust NodeList.length
			while ( (target[j++] = els[i++]) ) {}
			target.length = j - 1;
		}
	};
}

function Sizzle( selector, context, results, seed ) {
	var m, i, elem, nid, match, groups, newSelector,
		newContext = context && context.ownerDocument,

		// nodeType defaults to 9, since context defaults to document
		nodeType = context ? context.nodeType : 9;

	results = results || [];

	// Return early from calls with invalid selector or context
	if ( typeof selector !== "string" || !selector ||
		nodeType !== 1 && nodeType !== 9 && nodeType !== 11 ) {

		return results;
	}

	// Try to shortcut find operations (as opposed to filters) in HTML documents
	if ( !seed ) {

		if ( ( context ? context.ownerDocument || context : preferredDoc ) !== document ) {
			setDocument( context );
		}
		context = context || document;

		if ( documentIsHTML ) {

			// If the selector is sufficiently simple, try using a "get*By*" DOM method
			// (excepting DocumentFragment context, where the methods don't exist)
			if ( nodeType !== 11 && (match = rquickExpr.exec( selector )) ) {

				// ID selector
				if ( (m = match[1]) ) {

					// Document context
					if ( nodeType === 9 ) {
						if ( (elem = context.getElementById( m )) ) {

							// Support: IE, Opera, Webkit
							// TODO: identify versions
							// getElementById can match elements by name instead of ID
							if ( elem.id === m ) {
								results.push( elem );
								return results;
							}
						} else {
							return results;
						}

					// Element context
					} else {

						// Support: IE, Opera, Webkit
						// TODO: identify versions
						// getElementById can match elements by name instead of ID
						if ( newContext && (elem = newContext.getElementById( m )) &&
							contains( context, elem ) &&
							elem.id === m ) {

							results.push( elem );
							return results;
						}
					}

				// Type selector
				} else if ( match[2] ) {
					push.apply( results, context.getElementsByTagName( selector ) );
					return results;

				// Class selector
				} else if ( (m = match[3]) && support.getElementsByClassName &&
					context.getElementsByClassName ) {

					push.apply( results, context.getElementsByClassName( m ) );
					return results;
				}
			}

			// Take advantage of querySelectorAll
			if ( support.qsa &&
				!compilerCache[ selector + " " ] &&
				(!rbuggyQSA || !rbuggyQSA.test( selector )) ) {

				if ( nodeType !== 1 ) {
					newContext = context;
					newSelector = selector;

				// qSA looks outside Element context, which is not what we want
				// Thanks to Andrew Dupont for this workaround technique
				// Support: IE <=8
				// Exclude object elements
				} else if ( context.nodeName.toLowerCase() !== "object" ) {

					// Capture the context ID, setting it first if necessary
					if ( (nid = context.getAttribute( "id" )) ) {
						nid = nid.replace( rcssescape, fcssescape );
					} else {
						context.setAttribute( "id", (nid = expando) );
					}

					// Prefix every selector in the list
					groups = tokenize( selector );
					i = groups.length;
					while ( i-- ) {
						groups[i] = "#" + nid + " " + toSelector( groups[i] );
					}
					newSelector = groups.join( "," );

					// Expand context for sibling selectors
					newContext = rsibling.test( selector ) && testContext( context.parentNode ) ||
						context;
				}

				if ( newSelector ) {
					try {
						push.apply( results,
							newContext.querySelectorAll( newSelector )
						);
						return results;
					} catch ( qsaError ) {
					} finally {
						if ( nid === expando ) {
							context.removeAttribute( "id" );
						}
					}
				}
			}
		}
	}

	// All others
	return select( selector.replace( rtrim, "$1" ), context, results, seed );
}

/**
 * Create key-value caches of limited size
 * @returns {function(string, object)} Returns the Object data after storing it on itself with
 *	property name the (space-suffixed) string and (if the cache is larger than Expr.cacheLength)
 *	deleting the oldest entry
 */
function createCache() {
	var keys = [];

	function cache( key, value ) {
		// Use (key + " ") to avoid collision with native prototype properties (see Issue #157)
		if ( keys.push( key + " " ) > Expr.cacheLength ) {
			// Only keep the most recent entries
			delete cache[ keys.shift() ];
		}
		return (cache[ key + " " ] = value);
	}
	return cache;
}

/**
 * Mark a function for special use by Sizzle
 * @param {Function} fn The function to mark
 */
function markFunction( fn ) {
	fn[ expando ] = true;
	return fn;
}

/**
 * Support testing using an element
 * @param {Function} fn Passed the created element and returns a boolean result
 */
function assert( fn ) {
	var el = document.createElement("fieldset");

	try {
		return !!fn( el );
	} catch (e) {
		return false;
	} finally {
		// Remove from its parent by default
		if ( el.parentNode ) {
			el.parentNode.removeChild( el );
		}
		// release memory in IE
		el = null;
	}
}

/**
 * Adds the same handler for all of the specified attrs
 * @param {String} attrs Pipe-separated list of attributes
 * @param {Function} handler The method that will be applied
 */
function addHandle( attrs, handler ) {
	var arr = attrs.split("|"),
		i = arr.length;

	while ( i-- ) {
		Expr.attrHandle[ arr[i] ] = handler;
	}
}

/**
 * Checks document order of two siblings
 * @param {Element} a
 * @param {Element} b
 * @returns {Number} Returns less than 0 if a precedes b, greater than 0 if a follows b
 */
function siblingCheck( a, b ) {
	var cur = b && a,
		diff = cur && a.nodeType === 1 && b.nodeType === 1 &&
			a.sourceIndex - b.sourceIndex;

	// Use IE sourceIndex if available on both nodes
	if ( diff ) {
		return diff;
	}

	// Check if b follows a
	if ( cur ) {
		while ( (cur = cur.nextSibling) ) {
			if ( cur === b ) {
				return -1;
			}
		}
	}

	return a ? 1 : -1;
}

/**
 * Returns a function to use in pseudos for input types
 * @param {String} type
 */
function createInputPseudo( type ) {
	return function( elem ) {
		var name = elem.nodeName.toLowerCase();
		return name === "input" && elem.type === type;
	};
}

/**
 * Returns a function to use in pseudos for buttons
 * @param {String} type
 */
function createButtonPseudo( type ) {
	return function( elem ) {
		var name = elem.nodeName.toLowerCase();
		return (name === "input" || name === "button") && elem.type === type;
	};
}

/**
 * Returns a function to use in pseudos for :enabled/:disabled
 * @param {Boolean} disabled true for :disabled; false for :enabled
 */
function createDisabledPseudo( disabled ) {

	// Known :disabled false positives: fieldset[disabled] > legend:nth-of-type(n+2) :can-disable
	return function( elem ) {

		// Only certain elements can match :enabled or :disabled
		// https://html.spec.whatwg.org/multipage/scripting.html#selector-enabled
		// https://html.spec.whatwg.org/multipage/scripting.html#selector-disabled
		if ( "form" in elem ) {

			// Check for inherited disabledness on relevant non-disabled elements:
			// * listed form-associated elements in a disabled fieldset
			//   https://html.spec.whatwg.org/multipage/forms.html#category-listed
			//   https://html.spec.whatwg.org/multipage/forms.html#concept-fe-disabled
			// * option elements in a disabled optgroup
			//   https://html.spec.whatwg.org/multipage/forms.html#concept-option-disabled
			// All such elements have a "form" property.
			if ( elem.parentNode && elem.disabled === false ) {

				// Option elements defer to a parent optgroup if present
				if ( "label" in elem ) {
					if ( "label" in elem.parentNode ) {
						return elem.parentNode.disabled === disabled;
					} else {
						return elem.disabled === disabled;
					}
				}

				// Support: IE 6 - 11
				// Use the isDisabled shortcut property to check for disabled fieldset ancestors
				return elem.isDisabled === disabled ||

					// Where there is no isDisabled, check manually
					/* jshint -W018 */
					elem.isDisabled !== !disabled &&
						disabledAncestor( elem ) === disabled;
			}

			return elem.disabled === disabled;

		// Try to winnow out elements that can't be disabled before trusting the disabled property.
		// Some victims get caught in our net (label, legend, menu, track), but it shouldn't
		// even exist on them, let alone have a boolean value.
		} else if ( "label" in elem ) {
			return elem.disabled === disabled;
		}

		// Remaining elements are neither :enabled nor :disabled
		return false;
	};
}

/**
 * Returns a function to use in pseudos for positionals
 * @param {Function} fn
 */
function createPositionalPseudo( fn ) {
	return markFunction(function( argument ) {
		argument = +argument;
		return markFunction(function( seed, matches ) {
			var j,
				matchIndexes = fn( [], seed.length, argument ),
				i = matchIndexes.length;

			// Match elements found at the specified indexes
			while ( i-- ) {
				if ( seed[ (j = matchIndexes[i]) ] ) {
					seed[j] = !(matches[j] = seed[j]);
				}
			}
		});
	});
}

/**
 * Checks a node for validity as a Sizzle context
 * @param {Element|Object=} context
 * @returns {Element|Object|Boolean} The input node if acceptable, otherwise a falsy value
 */
function testContext( context ) {
	return context && typeof context.getElementsByTagName !== "undefined" && context;
}

// Expose support vars for convenience
support = Sizzle.support = {};

/**
 * Detects XML nodes
 * @param {Element|Object} elem An element or a document
 * @returns {Boolean} True iff elem is a non-HTML XML node
 */
isXML = Sizzle.isXML = function( elem ) {
	// documentElement is verified for cases where it doesn't yet exist
	// (such as loading iframes in IE - #4833)
	var documentElement = elem && (elem.ownerDocument || elem).documentElement;
	return documentElement ? documentElement.nodeName !== "HTML" : false;
};

/**
 * Sets document-related variables once based on the current document
 * @param {Element|Object} [doc] An element or document object to use to set the document
 * @returns {Object} Returns the current document
 */
setDocument = Sizzle.setDocument = function( node ) {
	var hasCompare, subWindow,
		doc = node ? node.ownerDocument || node : preferredDoc;

	// Return early if doc is invalid or already selected
	if ( doc === document || doc.nodeType !== 9 || !doc.documentElement ) {
		return document;
	}

	// Update global variables
	document = doc;
	docElem = document.documentElement;
	documentIsHTML = !isXML( document );

	// Support: IE 9-11, Edge
	// Accessing iframe documents after unload throws "permission denied" errors (jQuery #13936)
	if ( preferredDoc !== document &&
		(subWindow = document.defaultView) && subWindow.top !== subWindow ) {

		// Support: IE 11, Edge
		if ( subWindow.addEventListener ) {
			subWindow.addEventListener( "unload", unloadHandler, false );

		// Support: IE 9 - 10 only
		} else if ( subWindow.attachEvent ) {
			subWindow.attachEvent( "onunload", unloadHandler );
		}
	}

	/* Attributes
	---------------------------------------------------------------------- */

	// Support: IE<8
	// Verify that getAttribute really returns attributes and not properties
	// (excepting IE8 booleans)
	support.attributes = assert(function( el ) {
		el.className = "i";
		return !el.getAttribute("className");
	});

	/* getElement(s)By*
	---------------------------------------------------------------------- */

	// Check if getElementsByTagName("*") returns only elements
	support.getElementsByTagName = assert(function( el ) {
		el.appendChild( document.createComment("") );
		return !el.getElementsByTagName("*").length;
	});

	// Support: IE<9
	support.getElementsByClassName = rnative.test( document.getElementsByClassName );

	// Support: IE<10
	// Check if getElementById returns elements by name
	// The broken getElementById methods don't pick up programmatically-set names,
	// so use a roundabout getElementsByName test
	support.getById = assert(function( el ) {
		docElem.appendChild( el ).id = expando;
		return !document.getElementsByName || !document.getElementsByName( expando ).length;
	});

	// ID filter and find
	if ( support.getById ) {
		Expr.filter["ID"] = function( id ) {
			var attrId = id.replace( runescape, funescape );
			return function( elem ) {
				return elem.getAttribute("id") === attrId;
			};
		};
		Expr.find["ID"] = function( id, context ) {
			if ( typeof context.getElementById !== "undefined" && documentIsHTML ) {
				var elem = context.getElementById( id );
				return elem ? [ elem ] : [];
			}
		};
	} else {
		Expr.filter["ID"] =  function( id ) {
			var attrId = id.replace( runescape, funescape );
			return function( elem ) {
				var node = typeof elem.getAttributeNode !== "undefined" &&
					elem.getAttributeNode("id");
				return node && node.value === attrId;
			};
		};

		// Support: IE 6 - 7 only
		// getElementById is not reliable as a find shortcut
		Expr.find["ID"] = function( id, context ) {
			if ( typeof context.getElementById !== "undefined" && documentIsHTML ) {
				var node, i, elems,
					elem = context.getElementById( id );

				if ( elem ) {

					// Verify the id attribute
					node = elem.getAttributeNode("id");
					if ( node && node.value === id ) {
						return [ elem ];
					}

					// Fall back on getElementsByName
					elems = context.getElementsByName( id );
					i = 0;
					while ( (elem = elems[i++]) ) {
						node = elem.getAttributeNode("id");
						if ( node && node.value === id ) {
							return [ elem ];
						}
					}
				}

				return [];
			}
		};
	}

	// Tag
	Expr.find["TAG"] = support.getElementsByTagName ?
		function( tag, context ) {
			if ( typeof context.getElementsByTagName !== "undefined" ) {
				return context.getElementsByTagName( tag );

			// DocumentFragment nodes don't have gEBTN
			} else if ( support.qsa ) {
				return context.querySelectorAll( tag );
			}
		} :

		function( tag, context ) {
			var elem,
				tmp = [],
				i = 0,
				// By happy coincidence, a (broken) gEBTN appears on DocumentFragment nodes too
				results = context.getElementsByTagName( tag );

			// Filter out possible comments
			if ( tag === "*" ) {
				while ( (elem = results[i++]) ) {
					if ( elem.nodeType === 1 ) {
						tmp.push( elem );
					}
				}

				return tmp;
			}
			return results;
		};

	// Class
	Expr.find["CLASS"] = support.getElementsByClassName && function( className, context ) {
		if ( typeof context.getElementsByClassName !== "undefined" && documentIsHTML ) {
			return context.getElementsByClassName( className );
		}
	};

	/* QSA/matchesSelector
	---------------------------------------------------------------------- */

	// QSA and matchesSelector support

	// matchesSelector(:active) reports false when true (IE9/Opera 11.5)
	rbuggyMatches = [];

	// qSa(:focus) reports false when true (Chrome 21)
	// We allow this because of a bug in IE8/9 that throws an error
	// whenever `document.activeElement` is accessed on an iframe
	// So, we allow :focus to pass through QSA all the time to avoid the IE error
	// See https://bugs.jquery.com/ticket/13378
	rbuggyQSA = [];

	if ( (support.qsa = rnative.test( document.querySelectorAll )) ) {
		// Build QSA regex
		// Regex strategy adopted from Diego Perini
		assert(function( el ) {
			// Select is set to empty string on purpose
			// This is to test IE's treatment of not explicitly
			// setting a boolean content attribute,
			// since its presence should be enough
			// https://bugs.jquery.com/ticket/12359
			docElem.appendChild( el ).innerHTML = "<a id='" + expando + "'></a>" +
				"<select id='" + expando + "-\r\\' msallowcapture=''>" +
				"<option selected=''></option></select>";

			// Support: IE8, Opera 11-12.16
			// Nothing should be selected when empty strings follow ^= or $= or *=
			// The test attribute must be unknown in Opera but "safe" for WinRT
			// https://msdn.microsoft.com/en-us/library/ie/hh465388.aspx#attribute_section
			if ( el.querySelectorAll("[msallowcapture^='']").length ) {
				rbuggyQSA.push( "[*^$]=" + whitespace + "*(?:''|\"\")" );
			}

			// Support: IE8
			// Boolean attributes and "value" are not treated correctly
			if ( !el.querySelectorAll("[selected]").length ) {
				rbuggyQSA.push( "\\[" + whitespace + "*(?:value|" + booleans + ")" );
			}

			// Support: Chrome<29, Android<4.4, Safari<7.0+, iOS<7.0+, PhantomJS<1.9.8+
			if ( !el.querySelectorAll( "[id~=" + expando + "-]" ).length ) {
				rbuggyQSA.push("~=");
			}

			// Webkit/Opera - :checked should return selected option elements
			// http://www.w3.org/TR/2011/REC-css3-selectors-20110929/#checked
			// IE8 throws error here and will not see later tests
			if ( !el.querySelectorAll(":checked").length ) {
				rbuggyQSA.push(":checked");
			}

			// Support: Safari 8+, iOS 8+
			// https://bugs.webkit.org/show_bug.cgi?id=136851
			// In-page `selector#id sibling-combinator selector` fails
			if ( !el.querySelectorAll( "a#" + expando + "+*" ).length ) {
				rbuggyQSA.push(".#.+[+~]");
			}
		});

		assert(function( el ) {
			el.innerHTML = "<a href='' disabled='disabled'></a>" +
				"<select disabled='disabled'><option/></select>";

			// Support: Windows 8 Native Apps
			// The type and name attributes are restricted during .innerHTML assignment
			var input = document.createElement("input");
			input.setAttribute( "type", "hidden" );
			el.appendChild( input ).setAttribute( "name", "D" );

			// Support: IE8
			// Enforce case-sensitivity of name attribute
			if ( el.querySelectorAll("[name=d]").length ) {
				rbuggyQSA.push( "name" + whitespace + "*[*^$|!~]?=" );
			}

			// FF 3.5 - :enabled/:disabled and hidden elements (hidden elements are still enabled)
			// IE8 throws error here and will not see later tests
			if ( el.querySelectorAll(":enabled").length !== 2 ) {
				rbuggyQSA.push( ":enabled", ":disabled" );
			}

			// Support: IE9-11+
			// IE's :disabled selector does not pick up the children of disabled fieldsets
			docElem.appendChild( el ).disabled = true;
			if ( el.querySelectorAll(":disabled").length !== 2 ) {
				rbuggyQSA.push( ":enabled", ":disabled" );
			}

			// Opera 10-11 does not throw on post-comma invalid pseudos
			el.querySelectorAll("*,:x");
			rbuggyQSA.push(",.*:");
		});
	}

	if ( (support.matchesSelector = rnative.test( (matches = docElem.matches ||
		docElem.webkitMatchesSelector ||
		docElem.mozMatchesSelector ||
		docElem.oMatchesSelector ||
		docElem.msMatchesSelector) )) ) {

		assert(function( el ) {
			// Check to see if it's possible to do matchesSelector
			// on a disconnected node (IE 9)
			support.disconnectedMatch = matches.call( el, "*" );

			// This should fail with an exception
			// Gecko does not error, returns false instead
			matches.call( el, "[s!='']:x" );
			rbuggyMatches.push( "!=", pseudos );
		});
	}

	rbuggyQSA = rbuggyQSA.length && new RegExp( rbuggyQSA.join("|") );
	rbuggyMatches = rbuggyMatches.length && new RegExp( rbuggyMatches.join("|") );

	/* Contains
	---------------------------------------------------------------------- */
	hasCompare = rnative.test( docElem.compareDocumentPosition );

	// Element contains another
	// Purposefully self-exclusive
	// As in, an element does not contain itself
	contains = hasCompare || rnative.test( docElem.contains ) ?
		function( a, b ) {
			var adown = a.nodeType === 9 ? a.documentElement : a,
				bup = b && b.parentNode;
			return a === bup || !!( bup && bup.nodeType === 1 && (
				adown.contains ?
					adown.contains( bup ) :
					a.compareDocumentPosition && a.compareDocumentPosition( bup ) & 16
			));
		} :
		function( a, b ) {
			if ( b ) {
				while ( (b = b.parentNode) ) {
					if ( b === a ) {
						return true;
					}
				}
			}
			return false;
		};

	/* Sorting
	---------------------------------------------------------------------- */

	// Document order sorting
	sortOrder = hasCompare ?
	function( a, b ) {

		// Flag for duplicate removal
		if ( a === b ) {
			hasDuplicate = true;
			return 0;
		}

		// Sort on method existence if only one input has compareDocumentPosition
		var compare = !a.compareDocumentPosition - !b.compareDocumentPosition;
		if ( compare ) {
			return compare;
		}

		// Calculate position if both inputs belong to the same document
		compare = ( a.ownerDocument || a ) === ( b.ownerDocument || b ) ?
			a.compareDocumentPosition( b ) :

			// Otherwise we know they are disconnected
			1;

		// Disconnected nodes
		if ( compare & 1 ||
			(!support.sortDetached && b.compareDocumentPosition( a ) === compare) ) {

			// Choose the first element that is related to our preferred document
			if ( a === document || a.ownerDocument === preferredDoc && contains(preferredDoc, a) ) {
				return -1;
			}
			if ( b === document || b.ownerDocument === preferredDoc && contains(preferredDoc, b) ) {
				return 1;
			}

			// Maintain original order
			return sortInput ?
				( indexOf( sortInput, a ) - indexOf( sortInput, b ) ) :
				0;
		}

		return compare & 4 ? -1 : 1;
	} :
	function( a, b ) {
		// Exit early if the nodes are identical
		if ( a === b ) {
			hasDuplicate = true;
			return 0;
		}

		var cur,
			i = 0,
			aup = a.parentNode,
			bup = b.parentNode,
			ap = [ a ],
			bp = [ b ];

		// Parentless nodes are either documents or disconnected
		if ( !aup || !bup ) {
			return a === document ? -1 :
				b === document ? 1 :
				aup ? -1 :
				bup ? 1 :
				sortInput ?
				( indexOf( sortInput, a ) - indexOf( sortInput, b ) ) :
				0;

		// If the nodes are siblings, we can do a quick check
		} else if ( aup === bup ) {
			return siblingCheck( a, b );
		}

		// Otherwise we need full lists of their ancestors for comparison
		cur = a;
		while ( (cur = cur.parentNode) ) {
			ap.unshift( cur );
		}
		cur = b;
		while ( (cur = cur.parentNode) ) {
			bp.unshift( cur );
		}

		// Walk down the tree looking for a discrepancy
		while ( ap[i] === bp[i] ) {
			i++;
		}

		return i ?
			// Do a sibling check if the nodes have a common ancestor
			siblingCheck( ap[i], bp[i] ) :

			// Otherwise nodes in our document sort first
			ap[i] === preferredDoc ? -1 :
			bp[i] === preferredDoc ? 1 :
			0;
	};

	return document;
};

Sizzle.matches = function( expr, elements ) {
	return Sizzle( expr, null, null, elements );
};

Sizzle.matchesSelector = function( elem, expr ) {
	// Set document vars if needed
	if ( ( elem.ownerDocument || elem ) !== document ) {
		setDocument( elem );
	}

	// Make sure that attribute selectors are quoted
	expr = expr.replace( rattributeQuotes, "='$1']" );

	if ( support.matchesSelector && documentIsHTML &&
		!compilerCache[ expr + " " ] &&
		( !rbuggyMatches || !rbuggyMatches.test( expr ) ) &&
		( !rbuggyQSA     || !rbuggyQSA.test( expr ) ) ) {

		try {
			var ret = matches.call( elem, expr );

			// IE 9's matchesSelector returns false on disconnected nodes
			if ( ret || support.disconnectedMatch ||
					// As well, disconnected nodes are said to be in a document
					// fragment in IE 9
					elem.document && elem.document.nodeType !== 11 ) {
				return ret;
			}
		} catch (e) {}
	}

	return Sizzle( expr, document, null, [ elem ] ).length > 0;
};

Sizzle.contains = function( context, elem ) {
	// Set document vars if needed
	if ( ( context.ownerDocument || context ) !== document ) {
		setDocument( context );
	}
	return contains( context, elem );
};

Sizzle.attr = function( elem, name ) {
	// Set document vars if needed
	if ( ( elem.ownerDocument || elem ) !== document ) {
		setDocument( elem );
	}

	var fn = Expr.attrHandle[ name.toLowerCase() ],
		// Don't get fooled by Object.prototype properties (jQuery #13807)
		val = fn && hasOwn.call( Expr.attrHandle, name.toLowerCase() ) ?
			fn( elem, name, !documentIsHTML ) :
			undefined;

	return val !== undefined ?
		val :
		support.attributes || !documentIsHTML ?
			elem.getAttribute( name ) :
			(val = elem.getAttributeNode(name)) && val.specified ?
				val.value :
				null;
};

Sizzle.escape = function( sel ) {
	return (sel + "").replace( rcssescape, fcssescape );
};

Sizzle.error = function( msg ) {
	throw new Error( "Syntax error, unrecognized expression: " + msg );
};

/**
 * Document sorting and removing duplicates
 * @param {ArrayLike} results
 */
Sizzle.uniqueSort = function( results ) {
	var elem,
		duplicates = [],
		j = 0,
		i = 0;

	// Unless we *know* we can detect duplicates, assume their presence
	hasDuplicate = !support.detectDuplicates;
	sortInput = !support.sortStable && results.slice( 0 );
	results.sort( sortOrder );

	if ( hasDuplicate ) {
		while ( (elem = results[i++]) ) {
			if ( elem === results[ i ] ) {
				j = duplicates.push( i );
			}
		}
		while ( j-- ) {
			results.splice( duplicates[ j ], 1 );
		}
	}

	// Clear input after sorting to release objects
	// See https://github.com/jquery/sizzle/pull/225
	sortInput = null;

	return results;
};

/**
 * Utility function for retrieving the text value of an array of DOM nodes
 * @param {Array|Element} elem
 */
getText = Sizzle.getText = function( elem ) {
	var node,
		ret = "",
		i = 0,
		nodeType = elem.nodeType;

	if ( !nodeType ) {
		// If no nodeType, this is expected to be an array
		while ( (node = elem[i++]) ) {
			// Do not traverse comment nodes
			ret += getText( node );
		}
	} else if ( nodeType === 1 || nodeType === 9 || nodeType === 11 ) {
		// Use textContent for elements
		// innerText usage removed for consistency of new lines (jQuery #11153)
		if ( typeof elem.textContent === "string" ) {
			return elem.textContent;
		} else {
			// Traverse its children
			for ( elem = elem.firstChild; elem; elem = elem.nextSibling ) {
				ret += getText( elem );
			}
		}
	} else if ( nodeType === 3 || nodeType === 4 ) {
		return elem.nodeValue;
	}
	// Do not include comment or processing instruction nodes

	return ret;
};

Expr = Sizzle.selectors = {

	// Can be adjusted by the user
	cacheLength: 50,

	createPseudo: markFunction,

	match: matchExpr,

	attrHandle: {},

	find: {},

	relative: {
		">": { dir: "parentNode", first: true },
		" ": { dir: "parentNode" },
		"+": { dir: "previousSibling", first: true },
		"~": { dir: "previousSibling" }
	},

	preFilter: {
		"ATTR": function( match ) {
			match[1] = match[1].replace( runescape, funescape );

			// Move the given value to match[3] whether quoted or unquoted
			match[3] = ( match[3] || match[4] || match[5] || "" ).replace( runescape, funescape );

			if ( match[2] === "~=" ) {
				match[3] = " " + match[3] + " ";
			}

			return match.slice( 0, 4 );
		},

		"CHILD": function( match ) {
			/* matches from matchExpr["CHILD"]
				1 type (only|nth|...)
				2 what (child|of-type)
				3 argument (even|odd|\d*|\d*n([+-]\d+)?|...)
				4 xn-component of xn+y argument ([+-]?\d*n|)
				5 sign of xn-component
				6 x of xn-component
				7 sign of y-component
				8 y of y-component
			*/
			match[1] = match[1].toLowerCase();

			if ( match[1].slice( 0, 3 ) === "nth" ) {
				// nth-* requires argument
				if ( !match[3] ) {
					Sizzle.error( match[0] );
				}

				// numeric x and y parameters for Expr.filter.CHILD
				// remember that false/true cast respectively to 0/1
				match[4] = +( match[4] ? match[5] + (match[6] || 1) : 2 * ( match[3] === "even" || match[3] === "odd" ) );
				match[5] = +( ( match[7] + match[8] ) || match[3] === "odd" );

			// other types prohibit arguments
			} else if ( match[3] ) {
				Sizzle.error( match[0] );
			}

			return match;
		},

		"PSEUDO": function( match ) {
			var excess,
				unquoted = !match[6] && match[2];

			if ( matchExpr["CHILD"].test( match[0] ) ) {
				return null;
			}

			// Accept quoted arguments as-is
			if ( match[3] ) {
				match[2] = match[4] || match[5] || "";

			// Strip excess characters from unquoted arguments
			} else if ( unquoted && rpseudo.test( unquoted ) &&
				// Get excess from tokenize (recursively)
				(excess = tokenize( unquoted, true )) &&
				// advance to the next closing parenthesis
				(excess = unquoted.indexOf( ")", unquoted.length - excess ) - unquoted.length) ) {

				// excess is a negative index
				match[0] = match[0].slice( 0, excess );
				match[2] = unquoted.slice( 0, excess );
			}

			// Return only captures needed by the pseudo filter method (type and argument)
			return match.slice( 0, 3 );
		}
	},

	filter: {

		"TAG": function( nodeNameSelector ) {
			var nodeName = nodeNameSelector.replace( runescape, funescape ).toLowerCase();
			return nodeNameSelector === "*" ?
				function() { return true; } :
				function( elem ) {
					return elem.nodeName && elem.nodeName.toLowerCase() === nodeName;
				};
		},

		"CLASS": function( className ) {
			var pattern = classCache[ className + " " ];

			return pattern ||
				(pattern = new RegExp( "(^|" + whitespace + ")" + className + "(" + whitespace + "|$)" )) &&
				classCache( className, function( elem ) {
					return pattern.test( typeof elem.className === "string" && elem.className || typeof elem.getAttribute !== "undefined" && elem.getAttribute("class") || "" );
				});
		},

		"ATTR": function( name, operator, check ) {
			return function( elem ) {
				var result = Sizzle.attr( elem, name );

				if ( result == null ) {
					return operator === "!=";
				}
				if ( !operator ) {
					return true;
				}

				result += "";

				return operator === "=" ? result === check :
					operator === "!=" ? result !== check :
					operator === "^=" ? check && result.indexOf( check ) === 0 :
					operator === "*=" ? check && result.indexOf( check ) > -1 :
					operator === "$=" ? check && result.slice( -check.length ) === check :
					operator === "~=" ? ( " " + result.replace( rwhitespace, " " ) + " " ).indexOf( check ) > -1 :
					operator === "|=" ? result === check || result.slice( 0, check.length + 1 ) === check + "-" :
					false;
			};
		},

		"CHILD": function( type, what, argument, first, last ) {
			var simple = type.slice( 0, 3 ) !== "nth",
				forward = type.slice( -4 ) !== "last",
				ofType = what === "of-type";

			return first === 1 && last === 0 ?

				// Shortcut for :nth-*(n)
				function( elem ) {
					return !!elem.parentNode;
				} :

				function( elem, context, xml ) {
					var cache, uniqueCache, outerCache, node, nodeIndex, start,
						dir = simple !== forward ? "nextSibling" : "previousSibling",
						parent = elem.parentNode,
						name = ofType && elem.nodeName.toLowerCase(),
						useCache = !xml && !ofType,
						diff = false;

					if ( parent ) {

						// :(first|last|only)-(child|of-type)
						if ( simple ) {
							while ( dir ) {
								node = elem;
								while ( (node = node[ dir ]) ) {
									if ( ofType ?
										node.nodeName.toLowerCase() === name :
										node.nodeType === 1 ) {

										return false;
									}
								}
								// Reverse direction for :only-* (if we haven't yet done so)
								start = dir = type === "only" && !start && "nextSibling";
							}
							return true;
						}

						start = [ forward ? parent.firstChild : parent.lastChild ];

						// non-xml :nth-child(...) stores cache data on `parent`
						if ( forward && useCache ) {

							// Seek `elem` from a previously-cached index

							// ...in a gzip-friendly way
							node = parent;
							outerCache = node[ expando ] || (node[ expando ] = {});

							// Support: IE <9 only
							// Defend against cloned attroperties (jQuery gh-1709)
							uniqueCache = outerCache[ node.uniqueID ] ||
								(outerCache[ node.uniqueID ] = {});

							cache = uniqueCache[ type ] || [];
							nodeIndex = cache[ 0 ] === dirruns && cache[ 1 ];
							diff = nodeIndex && cache[ 2 ];
							node = nodeIndex && parent.childNodes[ nodeIndex ];

							while ( (node = ++nodeIndex && node && node[ dir ] ||

								// Fallback to seeking `elem` from the start
								(diff = nodeIndex = 0) || start.pop()) ) {

								// When found, cache indexes on `parent` and break
								if ( node.nodeType === 1 && ++diff && node === elem ) {
									uniqueCache[ type ] = [ dirruns, nodeIndex, diff ];
									break;
								}
							}

						} else {
							// Use previously-cached element index if available
							if ( useCache ) {
								// ...in a gzip-friendly way
								node = elem;
								outerCache = node[ expando ] || (node[ expando ] = {});

								// Support: IE <9 only
								// Defend against cloned attroperties (jQuery gh-1709)
								uniqueCache = outerCache[ node.uniqueID ] ||
									(outerCache[ node.uniqueID ] = {});

								cache = uniqueCache[ type ] || [];
								nodeIndex = cache[ 0 ] === dirruns && cache[ 1 ];
								diff = nodeIndex;
							}

							// xml :nth-child(...)
							// or :nth-last-child(...) or :nth(-last)?-of-type(...)
							if ( diff === false ) {
								// Use the same loop as above to seek `elem` from the start
								while ( (node = ++nodeIndex && node && node[ dir ] ||
									(diff = nodeIndex = 0) || start.pop()) ) {

									if ( ( ofType ?
										node.nodeName.toLowerCase() === name :
										node.nodeType === 1 ) &&
										++diff ) {

										// Cache the index of each encountered element
										if ( useCache ) {
											outerCache = node[ expando ] || (node[ expando ] = {});

											// Support: IE <9 only
											// Defend against cloned attroperties (jQuery gh-1709)
											uniqueCache = outerCache[ node.uniqueID ] ||
												(outerCache[ node.uniqueID ] = {});

											uniqueCache[ type ] = [ dirruns, diff ];
										}

										if ( node === elem ) {
											break;
										}
									}
								}
							}
						}

						// Incorporate the offset, then check against cycle size
						diff -= last;
						return diff === first || ( diff % first === 0 && diff / first >= 0 );
					}
				};
		},

		"PSEUDO": function( pseudo, argument ) {
			// pseudo-class names are case-insensitive
			// http://www.w3.org/TR/selectors/#pseudo-classes
			// Prioritize by case sensitivity in case custom pseudos are added with uppercase letters
			// Remember that setFilters inherits from pseudos
			var args,
				fn = Expr.pseudos[ pseudo ] || Expr.setFilters[ pseudo.toLowerCase() ] ||
					Sizzle.error( "unsupported pseudo: " + pseudo );

			// The user may use createPseudo to indicate that
			// arguments are needed to create the filter function
			// just as Sizzle does
			if ( fn[ expando ] ) {
				return fn( argument );
			}

			// But maintain support for old signatures
			if ( fn.length > 1 ) {
				args = [ pseudo, pseudo, "", argument ];
				return Expr.setFilters.hasOwnProperty( pseudo.toLowerCase() ) ?
					markFunction(function( seed, matches ) {
						var idx,
							matched = fn( seed, argument ),
							i = matched.length;
						while ( i-- ) {
							idx = indexOf( seed, matched[i] );
							seed[ idx ] = !( matches[ idx ] = matched[i] );
						}
					}) :
					function( elem ) {
						return fn( elem, 0, args );
					};
			}

			return fn;
		}
	},

	pseudos: {
		// Potentially complex pseudos
		"not": markFunction(function( selector ) {
			// Trim the selector passed to compile
			// to avoid treating leading and trailing
			// spaces as combinators
			var input = [],
				results = [],
				matcher = compile( selector.replace( rtrim, "$1" ) );

			return matcher[ expando ] ?
				markFunction(function( seed, matches, context, xml ) {
					var elem,
						unmatched = matcher( seed, null, xml, [] ),
						i = seed.length;

					// Match elements unmatched by `matcher`
					while ( i-- ) {
						if ( (elem = unmatched[i]) ) {
							seed[i] = !(matches[i] = elem);
						}
					}
				}) :
				function( elem, context, xml ) {
					input[0] = elem;
					matcher( input, null, xml, results );
					// Don't keep the element (issue #299)
					input[0] = null;
					return !results.pop();
				};
		}),

		"has": markFunction(function( selector ) {
			return function( elem ) {
				return Sizzle( selector, elem ).length > 0;
			};
		}),

		"contains": markFunction(function( text ) {
			text = text.replace( runescape, funescape );
			return function( elem ) {
				return ( elem.textContent || elem.innerText || getText( elem ) ).indexOf( text ) > -1;
			};
		}),

		// "Whether an element is represented by a :lang() selector
		// is based solely on the element's language value
		// being equal to the identifier C,
		// or beginning with the identifier C immediately followed by "-".
		// The matching of C against the element's language value is performed case-insensitively.
		// The identifier C does not have to be a valid language name."
		// http://www.w3.org/TR/selectors/#lang-pseudo
		"lang": markFunction( function( lang ) {
			// lang value must be a valid identifier
			if ( !ridentifier.test(lang || "") ) {
				Sizzle.error( "unsupported lang: " + lang );
			}
			lang = lang.replace( runescape, funescape ).toLowerCase();
			return function( elem ) {
				var elemLang;
				do {
					if ( (elemLang = documentIsHTML ?
						elem.lang :
						elem.getAttribute("xml:lang") || elem.getAttribute("lang")) ) {

						elemLang = elemLang.toLowerCase();
						return elemLang === lang || elemLang.indexOf( lang + "-" ) === 0;
					}
				} while ( (elem = elem.parentNode) && elem.nodeType === 1 );
				return false;
			};
		}),

		// Miscellaneous
		"target": function( elem ) {
			var hash = window.location && window.location.hash;
			return hash && hash.slice( 1 ) === elem.id;
		},

		"root": function( elem ) {
			return elem === docElem;
		},

		"focus": function( elem ) {
			return elem === document.activeElement && (!document.hasFocus || document.hasFocus()) && !!(elem.type || elem.href || ~elem.tabIndex);
		},

		// Boolean properties
		"enabled": createDisabledPseudo( false ),
		"disabled": createDisabledPseudo( true ),

		"checked": function( elem ) {
			// In CSS3, :checked should return both checked and selected elements
			// http://www.w3.org/TR/2011/REC-css3-selectors-20110929/#checked
			var nodeName = elem.nodeName.toLowerCase();
			return (nodeName === "input" && !!elem.checked) || (nodeName === "option" && !!elem.selected);
		},

		"selected": function( elem ) {
			// Accessing this property makes selected-by-default
			// options in Safari work properly
			if ( elem.parentNode ) {
				elem.parentNode.selectedIndex;
			}

			return elem.selected === true;
		},

		// Contents
		"empty": function( elem ) {
			// http://www.w3.org/TR/selectors/#empty-pseudo
			// :empty is negated by element (1) or content nodes (text: 3; cdata: 4; entity ref: 5),
			//   but not by others (comment: 8; processing instruction: 7; etc.)
			// nodeType < 6 works because attributes (2) do not appear as children
			for ( elem = elem.firstChild; elem; elem = elem.nextSibling ) {
				if ( elem.nodeType < 6 ) {
					return false;
				}
			}
			return true;
		},

		"parent": function( elem ) {
			return !Expr.pseudos["empty"]( elem );
		},

		// Element/input types
		"header": function( elem ) {
			return rheader.test( elem.nodeName );
		},

		"input": function( elem ) {
			return rinputs.test( elem.nodeName );
		},

		"button": function( elem ) {
			var name = elem.nodeName.toLowerCase();
			return name === "input" && elem.type === "button" || name === "button";
		},

		"text": function( elem ) {
			var attr;
			return elem.nodeName.toLowerCase() === "input" &&
				elem.type === "text" &&

				// Support: IE<8
				// New HTML5 attribute values (e.g., "search") appear with elem.type === "text"
				( (attr = elem.getAttribute("type")) == null || attr.toLowerCase() === "text" );
		},

		// Position-in-collection
		"first": createPositionalPseudo(function() {
			return [ 0 ];
		}),

		"last": createPositionalPseudo(function( matchIndexes, length ) {
			return [ length - 1 ];
		}),

		"eq": createPositionalPseudo(function( matchIndexes, length, argument ) {
			return [ argument < 0 ? argument + length : argument ];
		}),

		"even": createPositionalPseudo(function( matchIndexes, length ) {
			var i = 0;
			for ( ; i < length; i += 2 ) {
				matchIndexes.push( i );
			}
			return matchIndexes;
		}),

		"odd": createPositionalPseudo(function( matchIndexes, length ) {
			var i = 1;
			for ( ; i < length; i += 2 ) {
				matchIndexes.push( i );
			}
			return matchIndexes;
		}),

		"lt": createPositionalPseudo(function( matchIndexes, length, argument ) {
			var i = argument < 0 ? argument + length : argument;
			for ( ; --i >= 0; ) {
				matchIndexes.push( i );
			}
			return matchIndexes;
		}),

		"gt": createPositionalPseudo(function( matchIndexes, length, argument ) {
			var i = argument < 0 ? argument + length : argument;
			for ( ; ++i < length; ) {
				matchIndexes.push( i );
			}
			return matchIndexes;
		})
	}
};

Expr.pseudos["nth"] = Expr.pseudos["eq"];

// Add button/input type pseudos
for ( i in { radio: true, checkbox: true, file: true, password: true, image: true } ) {
	Expr.pseudos[ i ] = createInputPseudo( i );
}
for ( i in { submit: true, reset: true } ) {
	Expr.pseudos[ i ] = createButtonPseudo( i );
}

// Easy API for creating new setFilters
function setFilters() {}
setFilters.prototype = Expr.filters = Expr.pseudos;
Expr.setFilters = new setFilters();

tokenize = Sizzle.tokenize = function( selector, parseOnly ) {
	var matched, match, tokens, type,
		soFar, groups, preFilters,
		cached = tokenCache[ selector + " " ];

	if ( cached ) {
		return parseOnly ? 0 : cached.slice( 0 );
	}

	soFar = selector;
	groups = [];
	preFilters = Expr.preFilter;

	while ( soFar ) {

		// Comma and first run
		if ( !matched || (match = rcomma.exec( soFar )) ) {
			if ( match ) {
				// Don't consume trailing commas as valid
				soFar = soFar.slice( match[0].length ) || soFar;
			}
			groups.push( (tokens = []) );
		}

		matched = false;

		// Combinators
		if ( (match = rcombinators.exec( soFar )) ) {
			matched = match.shift();
			tokens.push({
				value: matched,
				// Cast descendant combinators to space
				type: match[0].replace( rtrim, " " )
			});
			soFar = soFar.slice( matched.length );
		}

		// Filters
		for ( type in Expr.filter ) {
			if ( (match = matchExpr[ type ].exec( soFar )) && (!preFilters[ type ] ||
				(match = preFilters[ type ]( match ))) ) {
				matched = match.shift();
				tokens.push({
					value: matched,
					type: type,
					matches: match
				});
				soFar = soFar.slice( matched.length );
			}
		}

		if ( !matched ) {
			break;
		}
	}

	// Return the length of the invalid excess
	// if we're just parsing
	// Otherwise, throw an error or return tokens
	return parseOnly ?
		soFar.length :
		soFar ?
			Sizzle.error( selector ) :
			// Cache the tokens
			tokenCache( selector, groups ).slice( 0 );
};

function toSelector( tokens ) {
	var i = 0,
		len = tokens.length,
		selector = "";
	for ( ; i < len; i++ ) {
		selector += tokens[i].value;
	}
	return selector;
}

function addCombinator( matcher, combinator, base ) {
	var dir = combinator.dir,
		skip = combinator.next,
		key = skip || dir,
		checkNonElements = base && key === "parentNode",
		doneName = done++;

	return combinator.first ?
		// Check against closest ancestor/preceding element
		function( elem, context, xml ) {
			while ( (elem = elem[ dir ]) ) {
				if ( elem.nodeType === 1 || checkNonElements ) {
					return matcher( elem, context, xml );
				}
			}
			return false;
		} :

		// Check against all ancestor/preceding elements
		function( elem, context, xml ) {
			var oldCache, uniqueCache, outerCache,
				newCache = [ dirruns, doneName ];

			// We can't set arbitrary data on XML nodes, so they don't benefit from combinator caching
			if ( xml ) {
				while ( (elem = elem[ dir ]) ) {
					if ( elem.nodeType === 1 || checkNonElements ) {
						if ( matcher( elem, context, xml ) ) {
							return true;
						}
					}
				}
			} else {
				while ( (elem = elem[ dir ]) ) {
					if ( elem.nodeType === 1 || checkNonElements ) {
						outerCache = elem[ expando ] || (elem[ expando ] = {});

						// Support: IE <9 only
						// Defend against cloned attroperties (jQuery gh-1709)
						uniqueCache = outerCache[ elem.uniqueID ] || (outerCache[ elem.uniqueID ] = {});

						if ( skip && skip === elem.nodeName.toLowerCase() ) {
							elem = elem[ dir ] || elem;
						} else if ( (oldCache = uniqueCache[ key ]) &&
							oldCache[ 0 ] === dirruns && oldCache[ 1 ] === doneName ) {

							// Assign to newCache so results back-propagate to previous elements
							return (newCache[ 2 ] = oldCache[ 2 ]);
						} else {
							// Reuse newcache so results back-propagate to previous elements
							uniqueCache[ key ] = newCache;

							// A match means we're done; a fail means we have to keep checking
							if ( (newCache[ 2 ] = matcher( elem, context, xml )) ) {
								return true;
							}
						}
					}
				}
			}
			return false;
		};
}

function elementMatcher( matchers ) {
	return matchers.length > 1 ?
		function( elem, context, xml ) {
			var i = matchers.length;
			while ( i-- ) {
				if ( !matchers[i]( elem, context, xml ) ) {
					return false;
				}
			}
			return true;
		} :
		matchers[0];
}

function multipleContexts( selector, contexts, results ) {
	var i = 0,
		len = contexts.length;
	for ( ; i < len; i++ ) {
		Sizzle( selector, contexts[i], results );
	}
	return results;
}

function condense( unmatched, map, filter, context, xml ) {
	var elem,
		newUnmatched = [],
		i = 0,
		len = unmatched.length,
		mapped = map != null;

	for ( ; i < len; i++ ) {
		if ( (elem = unmatched[i]) ) {
			if ( !filter || filter( elem, context, xml ) ) {
				newUnmatched.push( elem );
				if ( mapped ) {
					map.push( i );
				}
			}
		}
	}

	return newUnmatched;
}

function setMatcher( preFilter, selector, matcher, postFilter, postFinder, postSelector ) {
	if ( postFilter && !postFilter[ expando ] ) {
		postFilter = setMatcher( postFilter );
	}
	if ( postFinder && !postFinder[ expando ] ) {
		postFinder = setMatcher( postFinder, postSelector );
	}
	return markFunction(function( seed, results, context, xml ) {
		var temp, i, elem,
			preMap = [],
			postMap = [],
			preexisting = results.length,

			// Get initial elements from seed or context
			elems = seed || multipleContexts( selector || "*", context.nodeType ? [ context ] : context, [] ),

			// Prefilter to get matcher input, preserving a map for seed-results synchronization
			matcherIn = preFilter && ( seed || !selector ) ?
				condense( elems, preMap, preFilter, context, xml ) :
				elems,

			matcherOut = matcher ?
				// If we have a postFinder, or filtered seed, or non-seed postFilter or preexisting results,
				postFinder || ( seed ? preFilter : preexisting || postFilter ) ?

					// ...intermediate processing is necessary
					[] :

					// ...otherwise use results directly
					results :
				matcherIn;

		// Find primary matches
		if ( matcher ) {
			matcher( matcherIn, matcherOut, context, xml );
		}

		// Apply postFilter
		if ( postFilter ) {
			temp = condense( matcherOut, postMap );
			postFilter( temp, [], context, xml );

			// Un-match failing elements by moving them back to matcherIn
			i = temp.length;
			while ( i-- ) {
				if ( (elem = temp[i]) ) {
					matcherOut[ postMap[i] ] = !(matcherIn[ postMap[i] ] = elem);
				}
			}
		}

		if ( seed ) {
			if ( postFinder || preFilter ) {
				if ( postFinder ) {
					// Get the final matcherOut by condensing this intermediate into postFinder contexts
					temp = [];
					i = matcherOut.length;
					while ( i-- ) {
						if ( (elem = matcherOut[i]) ) {
							// Restore matcherIn since elem is not yet a final match
							temp.push( (matcherIn[i] = elem) );
						}
					}
					postFinder( null, (matcherOut = []), temp, xml );
				}

				// Move matched elements from seed to results to keep them synchronized
				i = matcherOut.length;
				while ( i-- ) {
					if ( (elem = matcherOut[i]) &&
						(temp = postFinder ? indexOf( seed, elem ) : preMap[i]) > -1 ) {

						seed[temp] = !(results[temp] = elem);
					}
				}
			}

		// Add elements to results, through postFinder if defined
		} else {
			matcherOut = condense(
				matcherOut === results ?
					matcherOut.splice( preexisting, matcherOut.length ) :
					matcherOut
			);
			if ( postFinder ) {
				postFinder( null, results, matcherOut, xml );
			} else {
				push.apply( results, matcherOut );
			}
		}
	});
}

function matcherFromTokens( tokens ) {
	var checkContext, matcher, j,
		len = tokens.length,
		leadingRelative = Expr.relative[ tokens[0].type ],
		implicitRelative = leadingRelative || Expr.relative[" "],
		i = leadingRelative ? 1 : 0,

		// The foundational matcher ensures that elements are reachable from top-level context(s)
		matchContext = addCombinator( function( elem ) {
			return elem === checkContext;
		}, implicitRelative, true ),
		matchAnyContext = addCombinator( function( elem ) {
			return indexOf( checkContext, elem ) > -1;
		}, implicitRelative, true ),
		matchers = [ function( elem, context, xml ) {
			var ret = ( !leadingRelative && ( xml || context !== outermostContext ) ) || (
				(checkContext = context).nodeType ?
					matchContext( elem, context, xml ) :
					matchAnyContext( elem, context, xml ) );
			// Avoid hanging onto element (issue #299)
			checkContext = null;
			return ret;
		} ];

	for ( ; i < len; i++ ) {
		if ( (matcher = Expr.relative[ tokens[i].type ]) ) {
			matchers = [ addCombinator(elementMatcher( matchers ), matcher) ];
		} else {
			matcher = Expr.filter[ tokens[i].type ].apply( null, tokens[i].matches );

			// Return special upon seeing a positional matcher
			if ( matcher[ expando ] ) {
				// Find the next relative operator (if any) for proper handling
				j = ++i;
				for ( ; j < len; j++ ) {
					if ( Expr.relative[ tokens[j].type ] ) {
						break;
					}
				}
				return setMatcher(
					i > 1 && elementMatcher( matchers ),
					i > 1 && toSelector(
						// If the preceding token was a descendant combinator, insert an implicit any-element `*`
						tokens.slice( 0, i - 1 ).concat({ value: tokens[ i - 2 ].type === " " ? "*" : "" })
					).replace( rtrim, "$1" ),
					matcher,
					i < j && matcherFromTokens( tokens.slice( i, j ) ),
					j < len && matcherFromTokens( (tokens = tokens.slice( j )) ),
					j < len && toSelector( tokens )
				);
			}
			matchers.push( matcher );
		}
	}

	return elementMatcher( matchers );
}

function matcherFromGroupMatchers( elementMatchers, setMatchers ) {
	var bySet = setMatchers.length > 0,
		byElement = elementMatchers.length > 0,
		superMatcher = function( seed, context, xml, results, outermost ) {
			var elem, j, matcher,
				matchedCount = 0,
				i = "0",
				unmatched = seed && [],
				setMatched = [],
				contextBackup = outermostContext,
				// We must always have either seed elements or outermost context
				elems = seed || byElement && Expr.find["TAG"]( "*", outermost ),
				// Use integer dirruns iff this is the outermost matcher
				dirrunsUnique = (dirruns += contextBackup == null ? 1 : Math.random() || 0.1),
				len = elems.length;

			if ( outermost ) {
				outermostContext = context === document || context || outermost;
			}

			// Add elements passing elementMatchers directly to results
			// Support: IE<9, Safari
			// Tolerate NodeList properties (IE: "length"; Safari: <number>) matching elements by id
			for ( ; i !== len && (elem = elems[i]) != null; i++ ) {
				if ( byElement && elem ) {
					j = 0;
					if ( !context && elem.ownerDocument !== document ) {
						setDocument( elem );
						xml = !documentIsHTML;
					}
					while ( (matcher = elementMatchers[j++]) ) {
						if ( matcher( elem, context || document, xml) ) {
							results.push( elem );
							break;
						}
					}
					if ( outermost ) {
						dirruns = dirrunsUnique;
					}
				}

				// Track unmatched elements for set filters
				if ( bySet ) {
					// They will have gone through all possible matchers
					if ( (elem = !matcher && elem) ) {
						matchedCount--;
					}

					// Lengthen the array for every element, matched or not
					if ( seed ) {
						unmatched.push( elem );
					}
				}
			}

			// `i` is now the count of elements visited above, and adding it to `matchedCount`
			// makes the latter nonnegative.
			matchedCount += i;

			// Apply set filters to unmatched elements
			// NOTE: This can be skipped if there are no unmatched elements (i.e., `matchedCount`
			// equals `i`), unless we didn't visit _any_ elements in the above loop because we have
			// no element matchers and no seed.
			// Incrementing an initially-string "0" `i` allows `i` to remain a string only in that
			// case, which will result in a "00" `matchedCount` that differs from `i` but is also
			// numerically zero.
			if ( bySet && i !== matchedCount ) {
				j = 0;
				while ( (matcher = setMatchers[j++]) ) {
					matcher( unmatched, setMatched, context, xml );
				}

				if ( seed ) {
					// Reintegrate element matches to eliminate the need for sorting
					if ( matchedCount > 0 ) {
						while ( i-- ) {
							if ( !(unmatched[i] || setMatched[i]) ) {
								setMatched[i] = pop.call( results );
							}
						}
					}

					// Discard index placeholder values to get only actual matches
					setMatched = condense( setMatched );
				}

				// Add matches to results
				push.apply( results, setMatched );

				// Seedless set matches succeeding multiple successful matchers stipulate sorting
				if ( outermost && !seed && setMatched.length > 0 &&
					( matchedCount + setMatchers.length ) > 1 ) {

					Sizzle.uniqueSort( results );
				}
			}

			// Override manipulation of globals by nested matchers
			if ( outermost ) {
				dirruns = dirrunsUnique;
				outermostContext = contextBackup;
			}

			return unmatched;
		};

	return bySet ?
		markFunction( superMatcher ) :
		superMatcher;
}

compile = Sizzle.compile = function( selector, match /* Internal Use Only */ ) {
	var i,
		setMatchers = [],
		elementMatchers = [],
		cached = compilerCache[ selector + " " ];

	if ( !cached ) {
		// Generate a function of recursive functions that can be used to check each element
		if ( !match ) {
			match = tokenize( selector );
		}
		i = match.length;
		while ( i-- ) {
			cached = matcherFromTokens( match[i] );
			if ( cached[ expando ] ) {
				setMatchers.push( cached );
			} else {
				elementMatchers.push( cached );
			}
		}

		// Cache the compiled function
		cached = compilerCache( selector, matcherFromGroupMatchers( elementMatchers, setMatchers ) );

		// Save selector and tokenization
		cached.selector = selector;
	}
	return cached;
};

/**
 * A low-level selection function that works with Sizzle's compiled
 *  selector functions
 * @param {String|Function} selector A selector or a pre-compiled
 *  selector function built with Sizzle.compile
 * @param {Element} context
 * @param {Array} [results]
 * @param {Array} [seed] A set of elements to match against
 */
select = Sizzle.select = function( selector, context, results, seed ) {
	var i, tokens, token, type, find,
		compiled = typeof selector === "function" && selector,
		match = !seed && tokenize( (selector = compiled.selector || selector) );

	results = results || [];

	// Try to minimize operations if there is only one selector in the list and no seed
	// (the latter of which guarantees us context)
	if ( match.length === 1 ) {

		// Reduce context if the leading compound selector is an ID
		tokens = match[0] = match[0].slice( 0 );
		if ( tokens.length > 2 && (token = tokens[0]).type === "ID" &&
				context.nodeType === 9 && documentIsHTML && Expr.relative[ tokens[1].type ] ) {

			context = ( Expr.find["ID"]( token.matches[0].replace(runescape, funescape), context ) || [] )[0];
			if ( !context ) {
				return results;

			// Precompiled matchers will still verify ancestry, so step up a level
			} else if ( compiled ) {
				context = context.parentNode;
			}

			selector = selector.slice( tokens.shift().value.length );
		}

		// Fetch a seed set for right-to-left matching
		i = matchExpr["needsContext"].test( selector ) ? 0 : tokens.length;
		while ( i-- ) {
			token = tokens[i];

			// Abort if we hit a combinator
			if ( Expr.relative[ (type = token.type) ] ) {
				break;
			}
			if ( (find = Expr.find[ type ]) ) {
				// Search, expanding context for leading sibling combinators
				if ( (seed = find(
					token.matches[0].replace( runescape, funescape ),
					rsibling.test( tokens[0].type ) && testContext( context.parentNode ) || context
				)) ) {

					// If seed is empty or no tokens remain, we can return early
					tokens.splice( i, 1 );
					selector = seed.length && toSelector( tokens );
					if ( !selector ) {
						push.apply( results, seed );
						return results;
					}

					break;
				}
			}
		}
	}

	// Compile and execute a filtering function if one is not provided
	// Provide `match` to avoid retokenization if we modified the selector above
	( compiled || compile( selector, match ) )(
		seed,
		context,
		!documentIsHTML,
		results,
		!context || rsibling.test( selector ) && testContext( context.parentNode ) || context
	);
	return results;
};

// One-time assignments

// Sort stability
support.sortStable = expando.split("").sort( sortOrder ).join("") === expando;

// Support: Chrome 14-35+
// Always assume duplicates if they aren't passed to the comparison function
support.detectDuplicates = !!hasDuplicate;

// Initialize against the default document
setDocument();

// Support: Webkit<537.32 - Safari 6.0.3/Chrome 25 (fixed in Chrome 27)
// Detached nodes confoundingly follow *each other*
support.sortDetached = assert(function( el ) {
	// Should return 1, but returns 4 (following)
	return el.compareDocumentPosition( document.createElement("fieldset") ) & 1;
});

// Support: IE<8
// Prevent attribute/property "interpolation"
// https://msdn.microsoft.com/en-us/library/ms536429%28VS.85%29.aspx
if ( !assert(function( el ) {
	el.innerHTML = "<a href='#'></a>";
	return el.firstChild.getAttribute("href") === "#" ;
}) ) {
	addHandle( "type|href|height|width", function( elem, name, isXML ) {
		if ( !isXML ) {
			return elem.getAttribute( name, name.toLowerCase() === "type" ? 1 : 2 );
		}
	});
}

// Support: IE<9
// Use defaultValue in place of getAttribute("value")
if ( !support.attributes || !assert(function( el ) {
	el.innerHTML = "<input/>";
	el.firstChild.setAttribute( "value", "" );
	return el.firstChild.getAttribute( "value" ) === "";
}) ) {
	addHandle( "value", function( elem, name, isXML ) {
		if ( !isXML && elem.nodeName.toLowerCase() === "input" ) {
			return elem.defaultValue;
		}
	});
}

// Support: IE<9
// Use getAttributeNode to fetch booleans when getAttribute lies
if ( !assert(function( el ) {
	return el.getAttribute("disabled") == null;
}) ) {
	addHandle( booleans, function( elem, name, isXML ) {
		var val;
		if ( !isXML ) {
			return elem[ name ] === true ? name.toLowerCase() :
					(val = elem.getAttributeNode( name )) && val.specified ?
					val.value :
				null;
		}
	});
}

return Sizzle;

})( window );



jQuery.find = Sizzle;
jQuery.expr = Sizzle.selectors;

// Deprecated
jQuery.expr[ ":" ] = jQuery.expr.pseudos;
jQuery.uniqueSort = jQuery.unique = Sizzle.uniqueSort;
jQuery.text = Sizzle.getText;
jQuery.isXMLDoc = Sizzle.isXML;
jQuery.contains = Sizzle.contains;
jQuery.escapeSelector = Sizzle.escape;




var dir = function( elem, dir, until ) {
	var matched = [],
		truncate = until !== undefined;

	while ( ( elem = elem[ dir ] ) && elem.nodeType !== 9 ) {
		if ( elem.nodeType === 1 ) {
			if ( truncate && jQuery( elem ).is( until ) ) {
				break;
			}
			matched.push( elem );
		}
	}
	return matched;
};


var siblings = function( n, elem ) {
	var matched = [];

	for ( ; n; n = n.nextSibling ) {
		if ( n.nodeType === 1 && n !== elem ) {
			matched.push( n );
		}
	}

	return matched;
};


var rneedsContext = jQuery.expr.match.needsContext;



function nodeName( elem, name ) {

  return elem.nodeName && elem.nodeName.toLowerCase() === name.toLowerCase();

};
var rsingleTag = ( /^<([a-z][^\/\0>:\x20\t\r\n\f]*)[\x20\t\r\n\f]*\/?>(?:<\/\1>|)$/i );



// Implement the identical functionality for filter and not
function winnow( elements, qualifier, not ) {
	if ( isFunction( qualifier ) ) {
		return jQuery.grep( elements, function( elem, i ) {
			return !!qualifier.call( elem, i, elem ) !== not;
		} );
	}

	// Single element
	if ( qualifier.nodeType ) {
		return jQuery.grep( elements, function( elem ) {
			return ( elem === qualifier ) !== not;
		} );
	}

	// Arraylike of elements (jQuery, arguments, Array)
	if ( typeof qualifier !== "string" ) {
		return jQuery.grep( elements, function( elem ) {
			return ( indexOf.call( qualifier, elem ) > -1 ) !== not;
		} );
	}

	// Filtered directly for both simple and complex selectors
	return jQuery.filter( qualifier, elements, not );
}

jQuery.filter = function( expr, elems, not ) {
	var elem = elems[ 0 ];

	if ( not ) {
		expr = ":not(" + expr + ")";
	}

	if ( elems.length === 1 && elem.nodeType === 1 ) {
		return jQuery.find.matchesSelector( elem, expr ) ? [ elem ] : [];
	}

	return jQuery.find.matches( expr, jQuery.grep( elems, function( elem ) {
		return elem.nodeType === 1;
	} ) );
};

jQuery.fn.extend( {
	find: function( selector ) {
		var i, ret,
			len = this.length,
			self = this;

		if ( typeof selector !== "string" ) {
			return this.pushStack( jQuery( selector ).filter( function() {
				for ( i = 0; i < len; i++ ) {
					if ( jQuery.contains( self[ i ], this ) ) {
						return true;
					}
				}
			} ) );
		}

		ret = this.pushStack( [] );

		for ( i = 0; i < len; i++ ) {
			jQuery.find( selector, self[ i ], ret );
		}

		return len > 1 ? jQuery.uniqueSort( ret ) : ret;
	},
	filter: function( selector ) {
		return this.pushStack( winnow( this, selector || [], false ) );
	},
	not: function( selector ) {
		return this.pushStack( winnow( this, selector || [], true ) );
	},
	is: function( selector ) {
		return !!winnow(
			this,

			// If this is a positional/relative selector, check membership in the returned set
			// so $("p:first").is("p:last") won't return true for a doc with two "p".
			typeof selector === "string" && rneedsContext.test( selector ) ?
				jQuery( selector ) :
				selector || [],
			false
		).length;
	}
} );


// Initialize a jQuery object


// A central reference to the root jQuery(document)
var rootjQuery,

	// A simple way to check for HTML strings
	// Prioritize #id over <tag> to avoid XSS via location.hash (#9521)
	// Strict HTML recognition (#11290: must start with <)
	// Shortcut simple #id case for speed
	rquickExpr = /^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]+))$/,

	init = jQuery.fn.init = function( selector, context, root ) {
		var match, elem;

		// HANDLE: $(""), $(null), $(undefined), $(false)
		if ( !selector ) {
			return this;
		}

		// Method init() accepts an alternate rootjQuery
		// so migrate can support jQuery.sub (gh-2101)
		root = root || rootjQuery;

		// Handle HTML strings
		if ( typeof selector === "string" ) {
			if ( selector[ 0 ] === "<" &&
				selector[ selector.length - 1 ] === ">" &&
				selector.length >= 3 ) {

				// Assume that strings that start and end with <> are HTML and skip the regex check
				match = [ null, selector, null ];

			} else {
				match = rquickExpr.exec( selector );
			}

			// Match html or make sure no context is specified for #id
			if ( match && ( match[ 1 ] || !context ) ) {

				// HANDLE: $(html) -> $(array)
				if ( match[ 1 ] ) {
					context = context instanceof jQuery ? context[ 0 ] : context;

					// Option to run scripts is true for back-compat
					// Intentionally let the error be thrown if parseHTML is not present
					jQuery.merge( this, jQuery.parseHTML(
						match[ 1 ],
						context && context.nodeType ? context.ownerDocument || context : document,
						true
					) );

					// HANDLE: $(html, props)
					if ( rsingleTag.test( match[ 1 ] ) && jQuery.isPlainObject( context ) ) {
						for ( match in context ) {

							// Properties of context are called as methods if possible
							if ( isFunction( this[ match ] ) ) {
								this[ match ]( context[ match ] );

							// ...and otherwise set as attributes
							} else {
								this.attr( match, context[ match ] );
							}
						}
					}

					return this;

				// HANDLE: $(#id)
				} else {
					elem = document.getElementById( match[ 2 ] );

					if ( elem ) {

						// Inject the element directly into the jQuery object
						this[ 0 ] = elem;
						this.length = 1;
					}
					return this;
				}

			// HANDLE: $(expr, $(...))
			} else if ( !context || context.jquery ) {
				return ( context || root ).find( selector );

			// HANDLE: $(expr, context)
			// (which is just equivalent to: $(context).find(expr)
			} else {
				return this.constructor( context ).find( selector );
			}

		// HANDLE: $(DOMElement)
		} else if ( selector.nodeType ) {
			this[ 0 ] = selector;
			this.length = 1;
			return this;

		// HANDLE: $(function)
		// Shortcut for document ready
		} else if ( isFunction( selector ) ) {
			return root.ready !== undefined ?
				root.ready( selector ) :

				// Execute immediately if ready is not present
				selector( jQuery );
		}

		return jQuery.makeArray( selector, this );
	};

// Give the init function the jQuery prototype for later instantiation
init.prototype = jQuery.fn;

// Initialize central reference
rootjQuery = jQuery( document );


var rparentsprev = /^(?:parents|prev(?:Until|All))/,

	// Methods guaranteed to produce a unique set when starting from a unique set
	guaranteedUnique = {
		children: true,
		contents: true,
		next: true,
		prev: true
	};

jQuery.fn.extend( {
	has: function( target ) {
		var targets = jQuery( target, this ),
			l = targets.length;

		return this.filter( function() {
			var i = 0;
			for ( ; i < l; i++ ) {
				if ( jQuery.contains( this, targets[ i ] ) ) {
					return true;
				}
			}
		} );
	},

	closest: function( selectors, context ) {
		var cur,
			i = 0,
			l = this.length,
			matched = [],
			targets = typeof selectors !== "string" && jQuery( selectors );

		// Positional selectors never match, since there's no _selection_ context
		if ( !rneedsContext.test( selectors ) ) {
			for ( ; i < l; i++ ) {
				for ( cur = this[ i ]; cur && cur !== context; cur = cur.parentNode ) {

					// Always skip document fragments
					if ( cur.nodeType < 11 && ( targets ?
						targets.index( cur ) > -1 :

						// Don't pass non-elements to Sizzle
						cur.nodeType === 1 &&
							jQuery.find.matchesSelector( cur, selectors ) ) ) {

						matched.push( cur );
						break;
					}
				}
			}
		}

		return this.pushStack( matched.length > 1 ? jQuery.uniqueSort( matched ) : matched );
	},

	// Determine the position of an element within the set
	index: function( elem ) {

		// No argument, return index in parent
		if ( !elem ) {
			return ( this[ 0 ] && this[ 0 ].parentNode ) ? this.first().prevAll().length : -1;
		}

		// Index in selector
		if ( typeof elem === "string" ) {
			return indexOf.call( jQuery( elem ), this[ 0 ] );
		}

		// Locate the position of the desired element
		return indexOf.call( this,

			// If it receives a jQuery object, the first element is used
			elem.jquery ? elem[ 0 ] : elem
		);
	},

	add: function( selector, context ) {
		return this.pushStack(
			jQuery.uniqueSort(
				jQuery.merge( this.get(), jQuery( selector, context ) )
			)
		);
	},

	addBack: function( selector ) {
		return this.add( selector == null ?
			this.prevObject : this.prevObject.filter( selector )
		);
	}
} );

function sibling( cur, dir ) {
	while ( ( cur = cur[ dir ] ) && cur.nodeType !== 1 ) {}
	return cur;
}

jQuery.each( {
	parent: function( elem ) {
		var parent = elem.parentNode;
		return parent && parent.nodeType !== 11 ? parent : null;
	},
	parents: function( elem ) {
		return dir( elem, "parentNode" );
	},
	parentsUntil: function( elem, i, until ) {
		return dir( elem, "parentNode", until );
	},
	next: function( elem ) {
		return sibling( elem, "nextSibling" );
	},
	prev: function( elem ) {
		return sibling( elem, "previousSibling" );
	},
	nextAll: function( elem ) {
		return dir( elem, "nextSibling" );
	},
	prevAll: function( elem ) {
		return dir( elem, "previousSibling" );
	},
	nextUntil: function( elem, i, until ) {
		return dir( elem, "nextSibling", until );
	},
	prevUntil: function( elem, i, until ) {
		return dir( elem, "previousSibling", until );
	},
	siblings: function( elem ) {
		return siblings( ( elem.parentNode || {} ).firstChild, elem );
	},
	children: function( elem ) {
		return siblings( elem.firstChild );
	},
	contents: function( elem ) {
        if ( nodeName( elem, "iframe" ) ) {
            return elem.contentDocument;
        }

        // Support: IE 9 - 11 only, iOS 7 only, Android Browser <=4.3 only
        // Treat the template element as a regular one in browsers that
        // don't support it.
        if ( nodeName( elem, "template" ) ) {
            elem = elem.content || elem;
        }

        return jQuery.merge( [], elem.childNodes );
	}
}, function( name, fn ) {
	jQuery.fn[ name ] = function( until, selector ) {
		var matched = jQuery.map( this, fn, until );

		if ( name.slice( -5 ) !== "Until" ) {
			selector = until;
		}

		if ( selector && typeof selector === "string" ) {
			matched = jQuery.filter( selector, matched );
		}

		if ( this.length > 1 ) {

			// Remove duplicates
			if ( !guaranteedUnique[ name ] ) {
				jQuery.uniqueSort( matched );
			}

			// Reverse order for parents* and prev-derivatives
			if ( rparentsprev.test( name ) ) {
				matched.reverse();
			}
		}

		return this.pushStack( matched );
	};
} );
var rnothtmlwhite = ( /[^\x20\t\r\n\f]+/g );



// Convert String-formatted options into Object-formatted ones
function createOptions( options ) {
	var object = {};
	jQuery.each( options.match( rnothtmlwhite ) || [], function( _, flag ) {
		object[ flag ] = true;
	} );
	return object;
}

/*
 * Create a callback list using the following parameters:
 *
 *	options: an optional list of space-separated options that will change how
 *			the callback list behaves or a more traditional option object
 *
 * By default a callback list will act like an event callback list and can be
 * "fired" multiple times.
 *
 * Possible options:
 *
 *	once:			will ensure the callback list can only be fired once (like a Deferred)
 *
 *	memory:			will keep track of previous values and will call any callback added
 *					after the list has been fired right away with the latest "memorized"
 *					values (like a Deferred)
 *
 *	unique:			will ensure a callback can only be added once (no duplicate in the list)
 *
 *	stopOnFalse:	interrupt callings when a callback returns false
 *
 */
jQuery.Callbacks = function( options ) {

	// Convert options from String-formatted to Object-formatted if needed
	// (we check in cache first)
	options = typeof options === "string" ?
		createOptions( options ) :
		jQuery.extend( {}, options );

	var // Flag to know if list is currently firing
		firing,

		// Last fire value for non-forgettable lists
		memory,

		// Flag to know if list was already fired
		fired,

		// Flag to prevent firing
		locked,

		// Actual callback list
		list = [],

		// Queue of execution data for repeatable lists
		queue = [],

		// Index of currently firing callback (modified by add/remove as needed)
		firingIndex = -1,

		// Fire callbacks
		fire = function() {

			// Enforce single-firing
			locked = locked || options.once;

			// Execute callbacks for all pending executions,
			// respecting firingIndex overrides and runtime changes
			fired = firing = true;
			for ( ; queue.length; firingIndex = -1 ) {
				memory = queue.shift();
				while ( ++firingIndex < list.length ) {

					// Run callback and check for early termination
					if ( list[ firingIndex ].apply( memory[ 0 ], memory[ 1 ] ) === false &&
						options.stopOnFalse ) {

						// Jump to end and forget the data so .add doesn't re-fire
						firingIndex = list.length;
						memory = false;
					}
				}
			}

			// Forget the data if we're done with it
			if ( !options.memory ) {
				memory = false;
			}

			firing = false;

			// Clean up if we're done firing for good
			if ( locked ) {

				// Keep an empty list if we have data for future add calls
				if ( memory ) {
					list = [];

				// Otherwise, this object is spent
				} else {
					list = "";
				}
			}
		},

		// Actual Callbacks object
		self = {

			// Add a callback or a collection of callbacks to the list
			add: function() {
				if ( list ) {

					// If we have memory from a past run, we should fire after adding
					if ( memory && !firing ) {
						firingIndex = list.length - 1;
						queue.push( memory );
					}

					( function add( args ) {
						jQuery.each( args, function( _, arg ) {
							if ( isFunction( arg ) ) {
								if ( !options.unique || !self.has( arg ) ) {
									list.push( arg );
								}
							} else if ( arg && arg.length && toType( arg ) !== "string" ) {

								// Inspect recursively
								add( arg );
							}
						} );
					} )( arguments );

					if ( memory && !firing ) {
						fire();
					}
				}
				return this;
			},

			// Remove a callback from the list
			remove: function() {
				jQuery.each( arguments, function( _, arg ) {
					var index;
					while ( ( index = jQuery.inArray( arg, list, index ) ) > -1 ) {
						list.splice( index, 1 );

						// Handle firing indexes
						if ( index <= firingIndex ) {
							firingIndex--;
						}
					}
				} );
				return this;
			},

			// Check if a given callback is in the list.
			// If no argument is given, return whether or not list has callbacks attached.
			has: function( fn ) {
				return fn ?
					jQuery.inArray( fn, list ) > -1 :
					list.length > 0;
			},

			// Remove all callbacks from the list
			empty: function() {
				if ( list ) {
					list = [];
				}
				return this;
			},

			// Disable .fire and .add
			// Abort any current/pending executions
			// Clear all callbacks and values
			disable: function() {
				locked = queue = [];
				list = memory = "";
				return this;
			},
			disabled: function() {
				return !list;
			},

			// Disable .fire
			// Also disable .add unless we have memory (since it would have no effect)
			// Abort any pending executions
			lock: function() {
				locked = queue = [];
				if ( !memory && !firing ) {
					list = memory = "";
				}
				return this;
			},
			locked: function() {
				return !!locked;
			},

			// Call all callbacks with the given context and arguments
			fireWith: function( context, args ) {
				if ( !locked ) {
					args = args || [];
					args = [ context, args.slice ? args.slice() : args ];
					queue.push( args );
					if ( !firing ) {
						fire();
					}
				}
				return this;
			},

			// Call all the callbacks with the given arguments
			fire: function() {
				self.fireWith( this, arguments );
				return this;
			},

			// To know if the callbacks have already been called at least once
			fired: function() {
				return !!fired;
			}
		};

	return self;
};


function Identity( v ) {
	return v;
}
function Thrower( ex ) {
	throw ex;
}

function adoptValue( value, resolve, reject, noValue ) {
	var method;

	try {

		// Check for promise aspect first to privilege synchronous behavior
		if ( value && isFunction( ( method = value.promise ) ) ) {
			method.call( value ).done( resolve ).fail( reject );

		// Other thenables
		} else if ( value && isFunction( ( method = value.then ) ) ) {
			method.call( value, resolve, reject );

		// Other non-thenables
		} else {

			// Control `resolve` arguments by letting Array#slice cast boolean `noValue` to integer:
			// * false: [ value ].slice( 0 ) => resolve( value )
			// * true: [ value ].slice( 1 ) => resolve()
			resolve.apply( undefined, [ value ].slice( noValue ) );
		}

	// For Promises/A+, convert exceptions into rejections
	// Since jQuery.when doesn't unwrap thenables, we can skip the extra checks appearing in
	// Deferred#then to conditionally suppress rejection.
	} catch ( value ) {

		// Support: Android 4.0 only
		// Strict mode functions invoked without .call/.apply get global-object context
		reject.apply( undefined, [ value ] );
	}
}

jQuery.extend( {

	Deferred: function( func ) {
		var tuples = [

				// action, add listener, callbacks,
				// ... .then handlers, argument index, [final state]
				[ "notify", "progress", jQuery.Callbacks( "memory" ),
					jQuery.Callbacks( "memory" ), 2 ],
				[ "resolve", "done", jQuery.Callbacks( "once memory" ),
					jQuery.Callbacks( "once memory" ), 0, "resolved" ],
				[ "reject", "fail", jQuery.Callbacks( "once memory" ),
					jQuery.Callbacks( "once memory" ), 1, "rejected" ]
			],
			state = "pending",
			promise = {
				state: function() {
					return state;
				},
				always: function() {
					deferred.done( arguments ).fail( arguments );
					return this;
				},
				"catch": function( fn ) {
					return promise.then( null, fn );
				},

				// Keep pipe for back-compat
				pipe: function( /* fnDone, fnFail, fnProgress */ ) {
					var fns = arguments;

					return jQuery.Deferred( function( newDefer ) {
						jQuery.each( tuples, function( i, tuple ) {

							// Map tuples (progress, done, fail) to arguments (done, fail, progress)
							var fn = isFunction( fns[ tuple[ 4 ] ] ) && fns[ tuple[ 4 ] ];

							// deferred.progress(function() { bind to newDefer or newDefer.notify })
							// deferred.done(function() { bind to newDefer or newDefer.resolve })
							// deferred.fail(function() { bind to newDefer or newDefer.reject })
							deferred[ tuple[ 1 ] ]( function() {
								var returned = fn && fn.apply( this, arguments );
								if ( returned && isFunction( returned.promise ) ) {
									returned.promise()
										.progress( newDefer.notify )
										.done( newDefer.resolve )
										.fail( newDefer.reject );
								} else {
									newDefer[ tuple[ 0 ] + "With" ](
										this,
										fn ? [ returned ] : arguments
									);
								}
							} );
						} );
						fns = null;
					} ).promise();
				},
				then: function( onFulfilled, onRejected, onProgress ) {
					var maxDepth = 0;
					function resolve( depth, deferred, handler, special ) {
						return function() {
							var that = this,
								args = arguments,
								mightThrow = function() {
									var returned, then;

									// Support: Promises/A+ section 2.3.3.3.3
									// https://promisesaplus.com/#point-59
									// Ignore double-resolution attempts
									if ( depth < maxDepth ) {
										return;
									}

									returned = handler.apply( that, args );

									// Support: Promises/A+ section 2.3.1
									// https://promisesaplus.com/#point-48
									if ( returned === deferred.promise() ) {
										throw new TypeError( "Thenable self-resolution" );
									}

									// Support: Promises/A+ sections 2.3.3.1, 3.5
									// https://promisesaplus.com/#point-54
									// https://promisesaplus.com/#point-75
									// Retrieve `then` only once
									then = returned &&

										// Support: Promises/A+ section 2.3.4
										// https://promisesaplus.com/#point-64
										// Only check objects and functions for thenability
										( typeof returned === "object" ||
											typeof returned === "function" ) &&
										returned.then;

									// Handle a returned thenable
									if ( isFunction( then ) ) {

										// Special processors (notify) just wait for resolution
										if ( special ) {
											then.call(
												returned,
												resolve( maxDepth, deferred, Identity, special ),
												resolve( maxDepth, deferred, Thrower, special )
											);

										// Normal processors (resolve) also hook into progress
										} else {

											// ...and disregard older resolution values
											maxDepth++;

											then.call(
												returned,
												resolve( maxDepth, deferred, Identity, special ),
												resolve( maxDepth, deferred, Thrower, special ),
												resolve( maxDepth, deferred, Identity,
													deferred.notifyWith )
											);
										}

									// Handle all other returned values
									} else {

										// Only substitute handlers pass on context
										// and multiple values (non-spec behavior)
										if ( handler !== Identity ) {
											that = undefined;
											args = [ returned ];
										}

										// Process the value(s)
										// Default process is resolve
										( special || deferred.resolveWith )( that, args );
									}
								},

								// Only normal processors (resolve) catch and reject exceptions
								process = special ?
									mightThrow :
									function() {
										try {
											mightThrow();
										} catch ( e ) {

											if ( jQuery.Deferred.exceptionHook ) {
												jQuery.Deferred.exceptionHook( e,
													process.stackTrace );
											}

											// Support: Promises/A+ section 2.3.3.3.4.1
											// https://promisesaplus.com/#point-61
											// Ignore post-resolution exceptions
											if ( depth + 1 >= maxDepth ) {

												// Only substitute handlers pass on context
												// and multiple values (non-spec behavior)
												if ( handler !== Thrower ) {
													that = undefined;
													args = [ e ];
												}

												deferred.rejectWith( that, args );
											}
										}
									};

							// Support: Promises/A+ section 2.3.3.3.1
							// https://promisesaplus.com/#point-57
							// Re-resolve promises immediately to dodge false rejection from
							// subsequent errors
							if ( depth ) {
								process();
							} else {

								// Call an optional hook to record the stack, in case of exception
								// since it's otherwise lost when execution goes async
								if ( jQuery.Deferred.getStackHook ) {
									process.stackTrace = jQuery.Deferred.getStackHook();
								}
								window.setTimeout( process );
							}
						};
					}

					return jQuery.Deferred( function( newDefer ) {

						// progress_handlers.add( ... )
						tuples[ 0 ][ 3 ].add(
							resolve(
								0,
								newDefer,
								isFunction( onProgress ) ?
									onProgress :
									Identity,
								newDefer.notifyWith
							)
						);

						// fulfilled_handlers.add( ... )
						tuples[ 1 ][ 3 ].add(
							resolve(
								0,
								newDefer,
								isFunction( onFulfilled ) ?
									onFulfilled :
									Identity
							)
						);

						// rejected_handlers.add( ... )
						tuples[ 2 ][ 3 ].add(
							resolve(
								0,
								newDefer,
								isFunction( onRejected ) ?
									onRejected :
									Thrower
							)
						);
					} ).promise();
				},

				// Get a promise for this deferred
				// If obj is provided, the promise aspect is added to the object
				promise: function( obj ) {
					return obj != null ? jQuery.extend( obj, promise ) : promise;
				}
			},
			deferred = {};

		// Add list-specific methods
		jQuery.each( tuples, function( i, tuple ) {
			var list = tuple[ 2 ],
				stateString = tuple[ 5 ];

			// promise.progress = list.add
			// promise.done = list.add
			// promise.fail = list.add
			promise[ tuple[ 1 ] ] = list.add;

			// Handle state
			if ( stateString ) {
				list.add(
					function() {

						// state = "resolved" (i.e., fulfilled)
						// state = "rejected"
						state = stateString;
					},

					// rejected_callbacks.disable
					// fulfilled_callbacks.disable
					tuples[ 3 - i ][ 2 ].disable,

					// rejected_handlers.disable
					// fulfilled_handlers.disable
					tuples[ 3 - i ][ 3 ].disable,

					// progress_callbacks.lock
					tuples[ 0 ][ 2 ].lock,

					// progress_handlers.lock
					tuples[ 0 ][ 3 ].lock
				);
			}

			// progress_handlers.fire
			// fulfilled_handlers.fire
			// rejected_handlers.fire
			list.add( tuple[ 3 ].fire );

			// deferred.notify = function() { deferred.notifyWith(...) }
			// deferred.resolve = function() { deferred.resolveWith(...) }
			// deferred.reject = function() { deferred.rejectWith(...) }
			deferred[ tuple[ 0 ] ] = function() {
				deferred[ tuple[ 0 ] + "With" ]( this === deferred ? undefined : this, arguments );
				return this;
			};

			// deferred.notifyWith = list.fireWith
			// deferred.resolveWith = list.fireWith
			// deferred.rejectWith = list.fireWith
			deferred[ tuple[ 0 ] + "With" ] = list.fireWith;
		} );

		// Make the deferred a promise
		promise.promise( deferred );

		// Call given func if any
		if ( func ) {
			func.call( deferred, deferred );
		}

		// All done!
		return deferred;
	},

	// Deferred helper
	when: function( singleValue ) {
		var

			// count of uncompleted subordinates
			remaining = arguments.length,

			// count of unprocessed arguments
			i = remaining,

			// subordinate fulfillment data
			resolveContexts = Array( i ),
			resolveValues = slice.call( arguments ),

			// the master Deferred
			master = jQuery.Deferred(),

			// subordinate callback factory
			updateFunc = function( i ) {
				return function( value ) {
					resolveContexts[ i ] = this;
					resolveValues[ i ] = arguments.length > 1 ? slice.call( arguments ) : value;
					if ( !( --remaining ) ) {
						master.resolveWith( resolveContexts, resolveValues );
					}
				};
			};

		// Single- and empty arguments are adopted like Promise.resolve
		if ( remaining <= 1 ) {
			adoptValue( singleValue, master.done( updateFunc( i ) ).resolve, master.reject,
				!remaining );

			// Use .then() to unwrap secondary thenables (cf. gh-3000)
			if ( master.state() === "pending" ||
				isFunction( resolveValues[ i ] && resolveValues[ i ].then ) ) {

				return master.then();
			}
		}

		// Multiple arguments are aggregated like Promise.all array elements
		while ( i-- ) {
			adoptValue( resolveValues[ i ], updateFunc( i ), master.reject );
		}

		return master.promise();
	}
} );


// These usually indicate a programmer mistake during development,
// warn about them ASAP rather than swallowing them by default.
var rerrorNames = /^(Eval|Internal|Range|Reference|Syntax|Type|URI)Error$/;

jQuery.Deferred.exceptionHook = function( error, stack ) {

	// Support: IE 8 - 9 only
	// Console exists when dev tools are open, which can happen at any time
	if ( window.console && window.console.warn && error && rerrorNames.test( error.name ) ) {
		window.console.warn( "jQuery.Deferred exception: " + error.message, error.stack, stack );
	}
};




jQuery.readyException = function( error ) {
	window.setTimeout( function() {
		throw error;
	} );
};




// The deferred used on DOM ready
var readyList = jQuery.Deferred();

jQuery.fn.ready = function( fn ) {

	readyList
		.then( fn )

		// Wrap jQuery.readyException in a function so that the lookup
		// happens at the time of error handling instead of callback
		// registration.
		.catch( function( error ) {
			jQuery.readyException( error );
		} );

	return this;
};

jQuery.extend( {

	// Is the DOM ready to be used? Set to true once it occurs.
	isReady: false,

	// A counter to track how many items to wait for before
	// the ready event fires. See #6781
	readyWait: 1,

	// Handle when the DOM is ready
	ready: function( wait ) {

		// Abort if there are pending holds or we're already ready
		if ( wait === true ? --jQuery.readyWait : jQuery.isReady ) {
			return;
		}

		// Remember that the DOM is ready
		jQuery.isReady = true;

		// If a normal DOM Ready event fired, decrement, and wait if need be
		if ( wait !== true && --jQuery.readyWait > 0 ) {
			return;
		}

		// If there are functions bound, to execute
		readyList.resolveWith( document, [ jQuery ] );
	}
} );

jQuery.ready.then = readyList.then;

// The ready event handler and self cleanup method
function completed() {
	document.removeEventListener( "DOMContentLoaded", completed );
	window.removeEventListener( "load", completed );
	jQuery.ready();
}

// Catch cases where $(document).ready() is called
// after the browser event has already occurred.
// Support: IE <=9 - 10 only
// Older IE sometimes signals "interactive" too soon
if ( document.readyState === "complete" ||
	( document.readyState !== "loading" && !document.documentElement.doScroll ) ) {

	// Handle it asynchronously to allow scripts the opportunity to delay ready
	window.setTimeout( jQuery.ready );

} else {

	// Use the handy event callback
	document.addEventListener( "DOMContentLoaded", completed );

	// A fallback to window.onload, that will always work
	window.addEventListener( "load", completed );
}




// Multifunctional method to get and set values of a collection
// The value/s can optionally be executed if it's a function
var access = function( elems, fn, key, value, chainable, emptyGet, raw ) {
	var i = 0,
		len = elems.length,
		bulk = key == null;

	// Sets many values
	if ( toType( key ) === "object" ) {
		chainable = true;
		for ( i in key ) {
			access( elems, fn, i, key[ i ], true, emptyGet, raw );
		}

	// Sets one value
	} else if ( value !== undefined ) {
		chainable = true;

		if ( !isFunction( value ) ) {
			raw = true;
		}

		if ( bulk ) {

			// Bulk operations run against the entire set
			if ( raw ) {
				fn.call( elems, value );
				fn = null;

			// ...except when executing function values
			} else {
				bulk = fn;
				fn = function( elem, key, value ) {
					return bulk.call( jQuery( elem ), value );
				};
			}
		}

		if ( fn ) {
			for ( ; i < len; i++ ) {
				fn(
					elems[ i ], key, raw ?
					value :
					value.call( elems[ i ], i, fn( elems[ i ], key ) )
				);
			}
		}
	}

	if ( chainable ) {
		return elems;
	}

	// Gets
	if ( bulk ) {
		return fn.call( elems );
	}

	return len ? fn( elems[ 0 ], key ) : emptyGet;
};


// Matches dashed string for camelizing
var rmsPrefix = /^-ms-/,
	rdashAlpha = /-([a-z])/g;

// Used by camelCase as callback to replace()
function fcamelCase( all, letter ) {
	return letter.toUpperCase();
}

// Convert dashed to camelCase; used by the css and data modules
// Support: IE <=9 - 11, Edge 12 - 15
// Microsoft forgot to hump their vendor prefix (#9572)
function camelCase( string ) {
	return string.replace( rmsPrefix, "ms-" ).replace( rdashAlpha, fcamelCase );
}
var acceptData = function( owner ) {

	// Accepts only:
	//  - Node
	//    - Node.ELEMENT_NODE
	//    - Node.DOCUMENT_NODE
	//  - Object
	//    - Any
	return owner.nodeType === 1 || owner.nodeType === 9 || !( +owner.nodeType );
};




function Data() {
	this.expando = jQuery.expando + Data.uid++;
}

Data.uid = 1;

Data.prototype = {

	cache: function( owner ) {

		// Check if the owner object already has a cache
		var value = owner[ this.expando ];

		// If not, create one
		if ( !value ) {
			value = {};

			// We can accept data for non-element nodes in modern browsers,
			// but we should not, see #8335.
			// Always return an empty object.
			if ( acceptData( owner ) ) {

				// If it is a node unlikely to be stringify-ed or looped over
				// use plain assignment
				if ( owner.nodeType ) {
					owner[ this.expando ] = value;

				// Otherwise secure it in a non-enumerable property
				// configurable must be true to allow the property to be
				// deleted when data is removed
				} else {
					Object.defineProperty( owner, this.expando, {
						value: value,
						configurable: true
					} );
				}
			}
		}

		return value;
	},
	set: function( owner, data, value ) {
		var prop,
			cache = this.cache( owner );

		// Handle: [ owner, key, value ] args
		// Always use camelCase key (gh-2257)
		if ( typeof data === "string" ) {
			cache[ camelCase( data ) ] = value;

		// Handle: [ owner, { properties } ] args
		} else {

			// Copy the properties one-by-one to the cache object
			for ( prop in data ) {
				cache[ camelCase( prop ) ] = data[ prop ];
			}
		}
		return cache;
	},
	get: function( owner, key ) {
		return key === undefined ?
			this.cache( owner ) :

			// Always use camelCase key (gh-2257)
			owner[ this.expando ] && owner[ this.expando ][ camelCase( key ) ];
	},
	access: function( owner, key, value ) {

		// In cases where either:
		//
		//   1. No key was specified
		//   2. A string key was specified, but no value provided
		//
		// Take the "read" path and allow the get method to determine
		// which value to return, respectively either:
		//
		//   1. The entire cache object
		//   2. The data stored at the key
		//
		if ( key === undefined ||
				( ( key && typeof key === "string" ) && value === undefined ) ) {

			return this.get( owner, key );
		}

		// When the key is not a string, or both a key and value
		// are specified, set or extend (existing objects) with either:
		//
		//   1. An object of properties
		//   2. A key and value
		//
		this.set( owner, key, value );

		// Since the "set" path can have two possible entry points
		// return the expected data based on which path was taken[*]
		return value !== undefined ? value : key;
	},
	remove: function( owner, key ) {
		var i,
			cache = owner[ this.expando ];

		if ( cache === undefined ) {
			return;
		}

		if ( key !== undefined ) {

			// Support array or space separated string of keys
			if ( Array.isArray( key ) ) {

				// If key is an array of keys...
				// We always set camelCase keys, so remove that.
				key = key.map( camelCase );
			} else {
				key = camelCase( key );

				// If a key with the spaces exists, use it.
				// Otherwise, create an array by matching non-whitespace
				key = key in cache ?
					[ key ] :
					( key.match( rnothtmlwhite ) || [] );
			}

			i = key.length;

			while ( i-- ) {
				delete cache[ key[ i ] ];
			}
		}

		// Remove the expando if there's no more data
		if ( key === undefined || jQuery.isEmptyObject( cache ) ) {

			// Support: Chrome <=35 - 45
			// Webkit & Blink performance suffers when deleting properties
			// from DOM nodes, so set to undefined instead
			// https://bugs.chromium.org/p/chromium/issues/detail?id=378607 (bug restricted)
			if ( owner.nodeType ) {
				owner[ this.expando ] = undefined;
			} else {
				delete owner[ this.expando ];
			}
		}
	},
	hasData: function( owner ) {
		var cache = owner[ this.expando ];
		return cache !== undefined && !jQuery.isEmptyObject( cache );
	}
};
var dataPriv = new Data();

var dataUser = new Data();



//	Implementation Summary
//
//	1. Enforce API surface and semantic compatibility with 1.9.x branch
//	2. Improve the module's maintainability by reducing the storage
//		paths to a single mechanism.
//	3. Use the same single mechanism to support "private" and "user" data.
//	4. _Never_ expose "private" data to user code (TODO: Drop _data, _removeData)
//	5. Avoid exposing implementation details on user objects (eg. expando properties)
//	6. Provide a clear path for implementation upgrade to WeakMap in 2014

var rbrace = /^(?:\{[\w\W]*\}|\[[\w\W]*\])$/,
	rmultiDash = /[A-Z]/g;

function getData( data ) {
	if ( data === "true" ) {
		return true;
	}

	if ( data === "false" ) {
		return false;
	}

	if ( data === "null" ) {
		return null;
	}

	// Only convert to a number if it doesn't change the string
	if ( data === +data + "" ) {
		return +data;
	}

	if ( rbrace.test( data ) ) {
		return JSON.parse( data );
	}

	return data;
}

function dataAttr( elem, key, data ) {
	var name;

	// If nothing was found internally, try to fetch any
	// data from the HTML5 data-* attribute
	if ( data === undefined && elem.nodeType === 1 ) {
		name = "data-" + key.replace( rmultiDash, "-$&" ).toLowerCase();
		data = elem.getAttribute( name );

		if ( typeof data === "string" ) {
			try {
				data = getData( data );
			} catch ( e ) {}

			// Make sure we set the data so it isn't changed later
			dataUser.set( elem, key, data );
		} else {
			data = undefined;
		}
	}
	return data;
}

jQuery.extend( {
	hasData: function( elem ) {
		return dataUser.hasData( elem ) || dataPriv.hasData( elem );
	},

	data: function( elem, name, data ) {
		return dataUser.access( elem, name, data );
	},

	removeData: function( elem, name ) {
		dataUser.remove( elem, name );
	},

	// TODO: Now that all calls to _data and _removeData have been replaced
	// with direct calls to dataPriv methods, these can be deprecated.
	_data: function( elem, name, data ) {
		return dataPriv.access( elem, name, data );
	},

	_removeData: function( elem, name ) {
		dataPriv.remove( elem, name );
	}
} );

jQuery.fn.extend( {
	data: function( key, value ) {
		var i, name, data,
			elem = this[ 0 ],
			attrs = elem && elem.attributes;

		// Gets all values
		if ( key === undefined ) {
			if ( this.length ) {
				data = dataUser.get( elem );

				if ( elem.nodeType === 1 && !dataPriv.get( elem, "hasDataAttrs" ) ) {
					i = attrs.length;
					while ( i-- ) {

						// Support: IE 11 only
						// The attrs elements can be null (#14894)
						if ( attrs[ i ] ) {
							name = attrs[ i ].name;
							if ( name.indexOf( "data-" ) === 0 ) {
								name = camelCase( name.slice( 5 ) );
								dataAttr( elem, name, data[ name ] );
							}
						}
					}
					dataPriv.set( elem, "hasDataAttrs", true );
				}
			}

			return data;
		}

		// Sets multiple values
		if ( typeof key === "object" ) {
			return this.each( function() {
				dataUser.set( this, key );
			} );
		}

		return access( this, function( value ) {
			var data;

			// The calling jQuery object (element matches) is not empty
			// (and therefore has an element appears at this[ 0 ]) and the
			// `value` parameter was not undefined. An empty jQuery object
			// will result in `undefined` for elem = this[ 0 ] which will
			// throw an exception if an attempt to read a data cache is made.
			if ( elem && value === undefined ) {

				// Attempt to get data from the cache
				// The key will always be camelCased in Data
				data = dataUser.get( elem, key );
				if ( data !== undefined ) {
					return data;
				}

				// Attempt to "discover" the data in
				// HTML5 custom data-* attrs
				data = dataAttr( elem, key );
				if ( data !== undefined ) {
					return data;
				}

				// We tried really hard, but the data doesn't exist.
				return;
			}

			// Set the data...
			this.each( function() {

				// We always store the camelCased key
				dataUser.set( this, key, value );
			} );
		}, null, value, arguments.length > 1, null, true );
	},

	removeData: function( key ) {
		return this.each( function() {
			dataUser.remove( this, key );
		} );
	}
} );


jQuery.extend( {
	queue: function( elem, type, data ) {
		var queue;

		if ( elem ) {
			type = ( type || "fx" ) + "queue";
			queue = dataPriv.get( elem, type );

			// Speed up dequeue by getting out quickly if this is just a lookup
			if ( data ) {
				if ( !queue || Array.isArray( data ) ) {
					queue = dataPriv.access( elem, type, jQuery.makeArray( data ) );
				} else {
					queue.push( data );
				}
			}
			return queue || [];
		}
	},

	dequeue: function( elem, type ) {
		type = type || "fx";

		var queue = jQuery.queue( elem, type ),
			startLength = queue.length,
			fn = queue.shift(),
			hooks = jQuery._queueHooks( elem, type ),
			next = function() {
				jQuery.dequeue( elem, type );
			};

		// If the fx queue is dequeued, always remove the progress sentinel
		if ( fn === "inprogress" ) {
			fn = queue.shift();
			startLength--;
		}

		if ( fn ) {

			// Add a progress sentinel to prevent the fx queue from being
			// automatically dequeued
			if ( type === "fx" ) {
				queue.unshift( "inprogress" );
			}

			// Clear up the last queue stop function
			delete hooks.stop;
			fn.call( elem, next, hooks );
		}

		if ( !startLength && hooks ) {
			hooks.empty.fire();
		}
	},

	// Not public - generate a queueHooks object, or return the current one
	_queueHooks: function( elem, type ) {
		var key = type + "queueHooks";
		return dataPriv.get( elem, key ) || dataPriv.access( elem, key, {
			empty: jQuery.Callbacks( "once memory" ).add( function() {
				dataPriv.remove( elem, [ type + "queue", key ] );
			} )
		} );
	}
} );

jQuery.fn.extend( {
	queue: function( type, data ) {
		var setter = 2;

		if ( typeof type !== "string" ) {
			data = type;
			type = "fx";
			setter--;
		}

		if ( arguments.length < setter ) {
			return jQuery.queue( this[ 0 ], type );
		}

		return data === undefined ?
			this :
			this.each( function() {
				var queue = jQuery.queue( this, type, data );

				// Ensure a hooks for this queue
				jQuery._queueHooks( this, type );

				if ( type === "fx" && queue[ 0 ] !== "inprogress" ) {
					jQuery.dequeue( this, type );
				}
			} );
	},
	dequeue: function( type ) {
		return this.each( function() {
			jQuery.dequeue( this, type );
		} );
	},
	clearQueue: function( type ) {
		return this.queue( type || "fx", [] );
	},

	// Get a promise resolved when queues of a certain type
	// are emptied (fx is the type by default)
	promise: function( type, obj ) {
		var tmp,
			count = 1,
			defer = jQuery.Deferred(),
			elements = this,
			i = this.length,
			resolve = function() {
				if ( !( --count ) ) {
					defer.resolveWith( elements, [ elements ] );
				}
			};

		if ( typeof type !== "string" ) {
			obj = type;
			type = undefined;
		}
		type = type || "fx";

		while ( i-- ) {
			tmp = dataPriv.get( elements[ i ], type + "queueHooks" );
			if ( tmp && tmp.empty ) {
				count++;
				tmp.empty.add( resolve );
			}
		}
		resolve();
		return defer.promise( obj );
	}
} );
var pnum = ( /[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/ ).source;

var rcssNum = new RegExp( "^(?:([+-])=|)(" + pnum + ")([a-z%]*)$", "i" );


var cssExpand = [ "Top", "Right", "Bottom", "Left" ];

var isHiddenWithinTree = function( elem, el ) {

		// isHiddenWithinTree might be called from jQuery#filter function;
		// in that case, element will be second argument
		elem = el || elem;

		// Inline style trumps all
		return elem.style.display === "none" ||
			elem.style.display === "" &&

			// Otherwise, check computed style
			// Support: Firefox <=43 - 45
			// Disconnected elements can have computed display: none, so first confirm that elem is
			// in the document.
			jQuery.contains( elem.ownerDocument, elem ) &&

			jQuery.css( elem, "display" ) === "none";
	};

var swap = function( elem, options, callback, args ) {
	var ret, name,
		old = {};

	// Remember the old values, and insert the new ones
	for ( name in options ) {
		old[ name ] = elem.style[ name ];
		elem.style[ name ] = options[ name ];
	}

	ret = callback.apply( elem, args || [] );

	// Revert the old values
	for ( name in options ) {
		elem.style[ name ] = old[ name ];
	}

	return ret;
};




function adjustCSS( elem, prop, valueParts, tween ) {
	var adjusted, scale,
		maxIterations = 20,
		currentValue = tween ?
			function() {
				return tween.cur();
			} :
			function() {
				return jQuery.css( elem, prop, "" );
			},
		initial = currentValue(),
		unit = valueParts && valueParts[ 3 ] || ( jQuery.cssNumber[ prop ] ? "" : "px" ),

		// Starting value computation is required for potential unit mismatches
		initialInUnit = ( jQuery.cssNumber[ prop ] || unit !== "px" && +initial ) &&
			rcssNum.exec( jQuery.css( elem, prop ) );

	if ( initialInUnit && initialInUnit[ 3 ] !== unit ) {

		// Support: Firefox <=54
		// Halve the iteration target value to prevent interference from CSS upper bounds (gh-2144)
		initial = initial / 2;

		// Trust units reported by jQuery.css
		unit = unit || initialInUnit[ 3 ];

		// Iteratively approximate from a nonzero starting point
		initialInUnit = +initial || 1;

		while ( maxIterations-- ) {

			// Evaluate and update our best guess (doubling guesses that zero out).
			// Finish if the scale equals or crosses 1 (making the old*new product non-positive).
			jQuery.style( elem, prop, initialInUnit + unit );
			if ( ( 1 - scale ) * ( 1 - ( scale = currentValue() / initial || 0.5 ) ) <= 0 ) {
				maxIterations = 0;
			}
			initialInUnit = initialInUnit / scale;

		}

		initialInUnit = initialInUnit * 2;
		jQuery.style( elem, prop, initialInUnit + unit );

		// Make sure we update the tween properties later on
		valueParts = valueParts || [];
	}

	if ( valueParts ) {
		initialInUnit = +initialInUnit || +initial || 0;

		// Apply relative offset (+=/-=) if specified
		adjusted = valueParts[ 1 ] ?
			initialInUnit + ( valueParts[ 1 ] + 1 ) * valueParts[ 2 ] :
			+valueParts[ 2 ];
		if ( tween ) {
			tween.unit = unit;
			tween.start = initialInUnit;
			tween.end = adjusted;
		}
	}
	return adjusted;
}


var defaultDisplayMap = {};

function getDefaultDisplay( elem ) {
	var temp,
		doc = elem.ownerDocument,
		nodeName = elem.nodeName,
		display = defaultDisplayMap[ nodeName ];

	if ( display ) {
		return display;
	}

	temp = doc.body.appendChild( doc.createElement( nodeName ) );
	display = jQuery.css( temp, "display" );

	temp.parentNode.removeChild( temp );

	if ( display === "none" ) {
		display = "block";
	}
	defaultDisplayMap[ nodeName ] = display;

	return display;
}

function showHide( elements, show ) {
	var display, elem,
		values = [],
		index = 0,
		length = elements.length;

	// Determine new display value for elements that need to change
	for ( ; index < length; index++ ) {
		elem = elements[ index ];
		if ( !elem.style ) {
			continue;
		}

		display = elem.style.display;
		if ( show ) {

			// Since we force visibility upon cascade-hidden elements, an immediate (and slow)
			// check is required in this first loop unless we have a nonempty display value (either
			// inline or about-to-be-restored)
			if ( display === "none" ) {
				values[ index ] = dataPriv.get( elem, "display" ) || null;
				if ( !values[ index ] ) {
					elem.style.display = "";
				}
			}
			if ( elem.style.display === "" && isHiddenWithinTree( elem ) ) {
				values[ index ] = getDefaultDisplay( elem );
			}
		} else {
			if ( display !== "none" ) {
				values[ index ] = "none";

				// Remember what we're overwriting
				dataPriv.set( elem, "display", display );
			}
		}
	}

	// Set the display of the elements in a second loop to avoid constant reflow
	for ( index = 0; index < length; index++ ) {
		if ( values[ index ] != null ) {
			elements[ index ].style.display = values[ index ];
		}
	}

	return elements;
}

jQuery.fn.extend( {
	show: function() {
		return showHide( this, true );
	},
	hide: function() {
		return showHide( this );
	},
	toggle: function( state ) {
		if ( typeof state === "boolean" ) {
			return state ? this.show() : this.hide();
		}

		return this.each( function() {
			if ( isHiddenWithinTree( this ) ) {
				jQuery( this ).show();
			} else {
				jQuery( this ).hide();
			}
		} );
	}
} );
var rcheckableType = ( /^(?:checkbox|radio)$/i );

var rtagName = ( /<([a-z][^\/\0>\x20\t\r\n\f]+)/i );

var rscriptType = ( /^$|^module$|\/(?:java|ecma)script/i );



// We have to close these tags to support XHTML (#13200)
var wrapMap = {

	// Support: IE <=9 only
	option: [ 1, "<select multiple='multiple'>", "</select>" ],

	// XHTML parsers do not magically insert elements in the
	// same way that tag soup parsers do. So we cannot shorten
	// this by omitting <tbody> or other required elements.
	thead: [ 1, "<table>", "</table>" ],
	col: [ 2, "<table><colgroup>", "</colgroup></table>" ],
	tr: [ 2, "<table><tbody>", "</tbody></table>" ],
	td: [ 3, "<table><tbody><tr>", "</tr></tbody></table>" ],

	_default: [ 0, "", "" ]
};

// Support: IE <=9 only
wrapMap.optgroup = wrapMap.option;

wrapMap.tbody = wrapMap.tfoot = wrapMap.colgroup = wrapMap.caption = wrapMap.thead;
wrapMap.th = wrapMap.td;


function getAll( context, tag ) {

	// Support: IE <=9 - 11 only
	// Use typeof to avoid zero-argument method invocation on host objects (#15151)
	var ret;

	if ( typeof context.getElementsByTagName !== "undefined" ) {
		ret = context.getElementsByTagName( tag || "*" );

	} else if ( typeof context.querySelectorAll !== "undefined" ) {
		ret = context.querySelectorAll( tag || "*" );

	} else {
		ret = [];
	}

	if ( tag === undefined || tag && nodeName( context, tag ) ) {
		return jQuery.merge( [ context ], ret );
	}

	return ret;
}


// Mark scripts as having already been evaluated
function setGlobalEval( elems, refElements ) {
	var i = 0,
		l = elems.length;

	for ( ; i < l; i++ ) {
		dataPriv.set(
			elems[ i ],
			"globalEval",
			!refElements || dataPriv.get( refElements[ i ], "globalEval" )
		);
	}
}


var rhtml = /<|&#?\w+;/;

function buildFragment( elems, context, scripts, selection, ignored ) {
	var elem, tmp, tag, wrap, contains, j,
		fragment = context.createDocumentFragment(),
		nodes = [],
		i = 0,
		l = elems.length;

	for ( ; i < l; i++ ) {
		elem = elems[ i ];

		if ( elem || elem === 0 ) {

			// Add nodes directly
			if ( toType( elem ) === "object" ) {

				// Support: Android <=4.0 only, PhantomJS 1 only
				// push.apply(_, arraylike) throws on ancient WebKit
				jQuery.merge( nodes, elem.nodeType ? [ elem ] : elem );

			// Convert non-html into a text node
			} else if ( !rhtml.test( elem ) ) {
				nodes.push( context.createTextNode( elem ) );

			// Convert html into DOM nodes
			} else {
				tmp = tmp || fragment.appendChild( context.createElement( "div" ) );

				// Deserialize a standard representation
				tag = ( rtagName.exec( elem ) || [ "", "" ] )[ 1 ].toLowerCase();
				wrap = wrapMap[ tag ] || wrapMap._default;
				tmp.innerHTML = wrap[ 1 ] + jQuery.htmlPrefilter( elem ) + wrap[ 2 ];

				// Descend through wrappers to the right content
				j = wrap[ 0 ];
				while ( j-- ) {
					tmp = tmp.lastChild;
				}

				// Support: Android <=4.0 only, PhantomJS 1 only
				// push.apply(_, arraylike) throws on ancient WebKit
				jQuery.merge( nodes, tmp.childNodes );

				// Remember the top-level container
				tmp = fragment.firstChild;

				// Ensure the created nodes are orphaned (#12392)
				tmp.textContent = "";
			}
		}
	}

	// Remove wrapper from fragment
	fragment.textContent = "";

	i = 0;
	while ( ( elem = nodes[ i++ ] ) ) {

		// Skip elements already in the context collection (trac-4087)
		if ( selection && jQuery.inArray( elem, selection ) > -1 ) {
			if ( ignored ) {
				ignored.push( elem );
			}
			continue;
		}

		contains = jQuery.contains( elem.ownerDocument, elem );

		// Append to fragment
		tmp = getAll( fragment.appendChild( elem ), "script" );

		// Preserve script evaluation history
		if ( contains ) {
			setGlobalEval( tmp );
		}

		// Capture executables
		if ( scripts ) {
			j = 0;
			while ( ( elem = tmp[ j++ ] ) ) {
				if ( rscriptType.test( elem.type || "" ) ) {
					scripts.push( elem );
				}
			}
		}
	}

	return fragment;
}


( function() {
	var fragment = document.createDocumentFragment(),
		div = fragment.appendChild( document.createElement( "div" ) ),
		input = document.createElement( "input" );

	// Support: Android 4.0 - 4.3 only
	// Check state lost if the name is set (#11217)
	// Support: Windows Web Apps (WWA)
	// `name` and `type` must use .setAttribute for WWA (#14901)
	input.setAttribute( "type", "radio" );
	input.setAttribute( "checked", "checked" );
	input.setAttribute( "name", "t" );

	div.appendChild( input );

	// Support: Android <=4.1 only
	// Older WebKit doesn't clone checked state correctly in fragments
	support.checkClone = div.cloneNode( true ).cloneNode( true ).lastChild.checked;

	// Support: IE <=11 only
	// Make sure textarea (and checkbox) defaultValue is properly cloned
	div.innerHTML = "<textarea>x</textarea>";
	support.noCloneChecked = !!div.cloneNode( true ).lastChild.defaultValue;
} )();
var documentElement = document.documentElement;



var
	rkeyEvent = /^key/,
	rmouseEvent = /^(?:mouse|pointer|contextmenu|drag|drop)|click/,
	rtypenamespace = /^([^.]*)(?:\.(.+)|)/;

function returnTrue() {
	return true;
}

function returnFalse() {
	return false;
}

// Support: IE <=9 only
// See #13393 for more info
function safeActiveElement() {
	try {
		return document.activeElement;
	} catch ( err ) { }
}

function on( elem, types, selector, data, fn, one ) {
	var origFn, type;

	// Types can be a map of types/handlers
	if ( typeof types === "object" ) {

		// ( types-Object, selector, data )
		if ( typeof selector !== "string" ) {

			// ( types-Object, data )
			data = data || selector;
			selector = undefined;
		}
		for ( type in types ) {
			on( elem, type, selector, data, types[ type ], one );
		}
		return elem;
	}

	if ( data == null && fn == null ) {

		// ( types, fn )
		fn = selector;
		data = selector = undefined;
	} else if ( fn == null ) {
		if ( typeof selector === "string" ) {

			// ( types, selector, fn )
			fn = data;
			data = undefined;
		} else {

			// ( types, data, fn )
			fn = data;
			data = selector;
			selector = undefined;
		}
	}
	if ( fn === false ) {
		fn = returnFalse;
	} else if ( !fn ) {
		return elem;
	}

	if ( one === 1 ) {
		origFn = fn;
		fn = function( event ) {

			// Can use an empty set, since event contains the info
			jQuery().off( event );
			return origFn.apply( this, arguments );
		};

		// Use same guid so caller can remove using origFn
		fn.guid = origFn.guid || ( origFn.guid = jQuery.guid++ );
	}
	return elem.each( function() {
		jQuery.event.add( this, types, fn, data, selector );
	} );
}

/*
 * Helper functions for managing events -- not part of the public interface.
 * Props to Dean Edwards' addEvent library for many of the ideas.
 */
jQuery.event = {

	global: {},

	add: function( elem, types, handler, data, selector ) {

		var handleObjIn, eventHandle, tmp,
			events, t, handleObj,
			special, handlers, type, namespaces, origType,
			elemData = dataPriv.get( elem );

		// Don't attach events to noData or text/comment nodes (but allow plain objects)
		if ( !elemData ) {
			return;
		}

		// Caller can pass in an object of custom data in lieu of the handler
		if ( handler.handler ) {
			handleObjIn = handler;
			handler = handleObjIn.handler;
			selector = handleObjIn.selector;
		}

		// Ensure that invalid selectors throw exceptions at attach time
		// Evaluate against documentElement in case elem is a non-element node (e.g., document)
		if ( selector ) {
			jQuery.find.matchesSelector( documentElement, selector );
		}

		// Make sure that the handler has a unique ID, used to find/remove it later
		if ( !handler.guid ) {
			handler.guid = jQuery.guid++;
		}

		// Init the element's event structure and main handler, if this is the first
		if ( !( events = elemData.events ) ) {
			events = elemData.events = {};
		}
		if ( !( eventHandle = elemData.handle ) ) {
			eventHandle = elemData.handle = function( e ) {

				// Discard the second event of a jQuery.event.trigger() and
				// when an event is called after a page has unloaded
				return typeof jQuery !== "undefined" && jQuery.event.triggered !== e.type ?
					jQuery.event.dispatch.apply( elem, arguments ) : undefined;
			};
		}

		// Handle multiple events separated by a space
		types = ( types || "" ).match( rnothtmlwhite ) || [ "" ];
		t = types.length;
		while ( t-- ) {
			tmp = rtypenamespace.exec( types[ t ] ) || [];
			type = origType = tmp[ 1 ];
			namespaces = ( tmp[ 2 ] || "" ).split( "." ).sort();

			// There *must* be a type, no attaching namespace-only handlers
			if ( !type ) {
				continue;
			}

			// If event changes its type, use the special event handlers for the changed type
			special = jQuery.event.special[ type ] || {};

			// If selector defined, determine special event api type, otherwise given type
			type = ( selector ? special.delegateType : special.bindType ) || type;

			// Update special based on newly reset type
			special = jQuery.event.special[ type ] || {};

			// handleObj is passed to all event handlers
			handleObj = jQuery.extend( {
				type: type,
				origType: origType,
				data: data,
				handler: handler,
				guid: handler.guid,
				selector: selector,
				needsContext: selector && jQuery.expr.match.needsContext.test( selector ),
				namespace: namespaces.join( "." )
			}, handleObjIn );

			// Init the event handler queue if we're the first
			if ( !( handlers = events[ type ] ) ) {
				handlers = events[ type ] = [];
				handlers.delegateCount = 0;

				// Only use addEventListener if the special events handler returns false
				if ( !special.setup ||
					special.setup.call( elem, data, namespaces, eventHandle ) === false ) {

					if ( elem.addEventListener ) {
						elem.addEventListener( type, eventHandle );
					}
				}
			}

			if ( special.add ) {
				special.add.call( elem, handleObj );

				if ( !handleObj.handler.guid ) {
					handleObj.handler.guid = handler.guid;
				}
			}

			// Add to the element's handler list, delegates in front
			if ( selector ) {
				handlers.splice( handlers.delegateCount++, 0, handleObj );
			} else {
				handlers.push( handleObj );
			}

			// Keep track of which events have ever been used, for event optimization
			jQuery.event.global[ type ] = true;
		}

	},

	// Detach an event or set of events from an element
	remove: function( elem, types, handler, selector, mappedTypes ) {

		var j, origCount, tmp,
			events, t, handleObj,
			special, handlers, type, namespaces, origType,
			elemData = dataPriv.hasData( elem ) && dataPriv.get( elem );

		if ( !elemData || !( events = elemData.events ) ) {
			return;
		}

		// Once for each type.namespace in types; type may be omitted
		types = ( types || "" ).match( rnothtmlwhite ) || [ "" ];
		t = types.length;
		while ( t-- ) {
			tmp = rtypenamespace.exec( types[ t ] ) || [];
			type = origType = tmp[ 1 ];
			namespaces = ( tmp[ 2 ] || "" ).split( "." ).sort();

			// Unbind all events (on this namespace, if provided) for the element
			if ( !type ) {
				for ( type in events ) {
					jQuery.event.remove( elem, type + types[ t ], handler, selector, true );
				}
				continue;
			}

			special = jQuery.event.special[ type ] || {};
			type = ( selector ? special.delegateType : special.bindType ) || type;
			handlers = events[ type ] || [];
			tmp = tmp[ 2 ] &&
				new RegExp( "(^|\\.)" + namespaces.join( "\\.(?:.*\\.|)" ) + "(\\.|$)" );

			// Remove matching events
			origCount = j = handlers.length;
			while ( j-- ) {
				handleObj = handlers[ j ];

				if ( ( mappedTypes || origType === handleObj.origType ) &&
					( !handler || handler.guid === handleObj.guid ) &&
					( !tmp || tmp.test( handleObj.namespace ) ) &&
					( !selector || selector === handleObj.selector ||
						selector === "**" && handleObj.selector ) ) {
					handlers.splice( j, 1 );

					if ( handleObj.selector ) {
						handlers.delegateCount--;
					}
					if ( special.remove ) {
						special.remove.call( elem, handleObj );
					}
				}
			}

			// Remove generic event handler if we removed something and no more handlers exist
			// (avoids potential for endless recursion during removal of special event handlers)
			if ( origCount && !handlers.length ) {
				if ( !special.teardown ||
					special.teardown.call( elem, namespaces, elemData.handle ) === false ) {

					jQuery.removeEvent( elem, type, elemData.handle );
				}

				delete events[ type ];
			}
		}

		// Remove data and the expando if it's no longer used
		if ( jQuery.isEmptyObject( events ) ) {
			dataPriv.remove( elem, "handle events" );
		}
	},

	dispatch: function( nativeEvent ) {

		// Make a writable jQuery.Event from the native event object
		var event = jQuery.event.fix( nativeEvent );

		var i, j, ret, matched, handleObj, handlerQueue,
			args = new Array( arguments.length ),
			handlers = ( dataPriv.get( this, "events" ) || {} )[ event.type ] || [],
			special = jQuery.event.special[ event.type ] || {};

		// Use the fix-ed jQuery.Event rather than the (read-only) native event
		args[ 0 ] = event;

		for ( i = 1; i < arguments.length; i++ ) {
			args[ i ] = arguments[ i ];
		}

		event.delegateTarget = this;

		// Call the preDispatch hook for the mapped type, and let it bail if desired
		if ( special.preDispatch && special.preDispatch.call( this, event ) === false ) {
			return;
		}

		// Determine handlers
		handlerQueue = jQuery.event.handlers.call( this, event, handlers );

		// Run delegates first; they may want to stop propagation beneath us
		i = 0;
		while ( ( matched = handlerQueue[ i++ ] ) && !event.isPropagationStopped() ) {
			event.currentTarget = matched.elem;

			j = 0;
			while ( ( handleObj = matched.handlers[ j++ ] ) &&
				!event.isImmediatePropagationStopped() ) {

				// Triggered event must either 1) have no namespace, or 2) have namespace(s)
				// a subset or equal to those in the bound event (both can have no namespace).
				if ( !event.rnamespace || event.rnamespace.test( handleObj.namespace ) ) {

					event.handleObj = handleObj;
					event.data = handleObj.data;

					ret = ( ( jQuery.event.special[ handleObj.origType ] || {} ).handle ||
						handleObj.handler ).apply( matched.elem, args );

					if ( ret !== undefined ) {
						if ( ( event.result = ret ) === false ) {
							event.preventDefault();
							event.stopPropagation();
						}
					}
				}
			}
		}

		// Call the postDispatch hook for the mapped type
		if ( special.postDispatch ) {
			special.postDispatch.call( this, event );
		}

		return event.result;
	},

	handlers: function( event, handlers ) {
		var i, handleObj, sel, matchedHandlers, matchedSelectors,
			handlerQueue = [],
			delegateCount = handlers.delegateCount,
			cur = event.target;

		// Find delegate handlers
		if ( delegateCount &&

			// Support: IE <=9
			// Black-hole SVG <use> instance trees (trac-13180)
			cur.nodeType &&

			// Support: Firefox <=42
			// Suppress spec-violating clicks indicating a non-primary pointer button (trac-3861)
			// https://www.w3.org/TR/DOM-Level-3-Events/#event-type-click
			// Support: IE 11 only
			// ...but not arrow key "clicks" of radio inputs, which can have `button` -1 (gh-2343)
			!( event.type === "click" && event.button >= 1 ) ) {

			for ( ; cur !== this; cur = cur.parentNode || this ) {

				// Don't check non-elements (#13208)
				// Don't process clicks on disabled elements (#6911, #8165, #11382, #11764)
				if ( cur.nodeType === 1 && !( event.type === "click" && cur.disabled === true ) ) {
					matchedHandlers = [];
					matchedSelectors = {};
					for ( i = 0; i < delegateCount; i++ ) {
						handleObj = handlers[ i ];

						// Don't conflict with Object.prototype properties (#13203)
						sel = handleObj.selector + " ";

						if ( matchedSelectors[ sel ] === undefined ) {
							matchedSelectors[ sel ] = handleObj.needsContext ?
								jQuery( sel, this ).index( cur ) > -1 :
								jQuery.find( sel, this, null, [ cur ] ).length;
						}
						if ( matchedSelectors[ sel ] ) {
							matchedHandlers.push( handleObj );
						}
					}
					if ( matchedHandlers.length ) {
						handlerQueue.push( { elem: cur, handlers: matchedHandlers } );
					}
				}
			}
		}

		// Add the remaining (directly-bound) handlers
		cur = this;
		if ( delegateCount < handlers.length ) {
			handlerQueue.push( { elem: cur, handlers: handlers.slice( delegateCount ) } );
		}

		return handlerQueue;
	},

	addProp: function( name, hook ) {
		Object.defineProperty( jQuery.Event.prototype, name, {
			enumerable: true,
			configurable: true,

			get: isFunction( hook ) ?
				function() {
					if ( this.originalEvent ) {
							return hook( this.originalEvent );
					}
				} :
				function() {
					if ( this.originalEvent ) {
							return this.originalEvent[ name ];
					}
				},

			set: function( value ) {
				Object.defineProperty( this, name, {
					enumerable: true,
					configurable: true,
					writable: true,
					value: value
				} );
			}
		} );
	},

	fix: function( originalEvent ) {
		return originalEvent[ jQuery.expando ] ?
			originalEvent :
			new jQuery.Event( originalEvent );
	},

	special: {
		load: {

			// Prevent triggered image.load events from bubbling to window.load
			noBubble: true
		},
		focus: {

			// Fire native event if possible so blur/focus sequence is correct
			trigger: function() {
				if ( this !== safeActiveElement() && this.focus ) {
					this.focus();
					return false;
				}
			},
			delegateType: "focusin"
		},
		blur: {
			trigger: function() {
				if ( this === safeActiveElement() && this.blur ) {
					this.blur();
					return false;
				}
			},
			delegateType: "focusout"
		},
		click: {

			// For checkbox, fire native event so checked state will be right
			trigger: function() {
				if ( this.type === "checkbox" && this.click && nodeName( this, "input" ) ) {
					this.click();
					return false;
				}
			},

			// For cross-browser consistency, don't fire native .click() on links
			_default: function( event ) {
				return nodeName( event.target, "a" );
			}
		},

		beforeunload: {
			postDispatch: function( event ) {

				// Support: Firefox 20+
				// Firefox doesn't alert if the returnValue field is not set.
				if ( event.result !== undefined && event.originalEvent ) {
					event.originalEvent.returnValue = event.result;
				}
			}
		}
	}
};

jQuery.removeEvent = function( elem, type, handle ) {

	// This "if" is needed for plain objects
	if ( elem.removeEventListener ) {
		elem.removeEventListener( type, handle );
	}
};

jQuery.Event = function( src, props ) {

	// Allow instantiation without the 'new' keyword
	if ( !( this instanceof jQuery.Event ) ) {
		return new jQuery.Event( src, props );
	}

	// Event object
	if ( src && src.type ) {
		this.originalEvent = src;
		this.type = src.type;

		// Events bubbling up the document may have been marked as prevented
		// by a handler lower down the tree; reflect the correct value.
		this.isDefaultPrevented = src.defaultPrevented ||
				src.defaultPrevented === undefined &&

				// Support: Android <=2.3 only
				src.returnValue === false ?
			returnTrue :
			returnFalse;

		// Create target properties
		// Support: Safari <=6 - 7 only
		// Target should not be a text node (#504, #13143)
		this.target = ( src.target && src.target.nodeType === 3 ) ?
			src.target.parentNode :
			src.target;

		this.currentTarget = src.currentTarget;
		this.relatedTarget = src.relatedTarget;

	// Event type
	} else {
		this.type = src;
	}

	// Put explicitly provided properties onto the event object
	if ( props ) {
		jQuery.extend( this, props );
	}

	// Create a timestamp if incoming event doesn't have one
	this.timeStamp = src && src.timeStamp || Date.now();

	// Mark it as fixed
	this[ jQuery.expando ] = true;
};

// jQuery.Event is based on DOM3 Events as specified by the ECMAScript Language Binding
// https://www.w3.org/TR/2003/WD-DOM-Level-3-Events-20030331/ecma-script-binding.html
jQuery.Event.prototype = {
	constructor: jQuery.Event,
	isDefaultPrevented: returnFalse,
	isPropagationStopped: returnFalse,
	isImmediatePropagationStopped: returnFalse,
	isSimulated: false,

	preventDefault: function() {
		var e = this.originalEvent;

		this.isDefaultPrevented = returnTrue;

		if ( e && !this.isSimulated ) {
			e.preventDefault();
		}
	},
	stopPropagation: function() {
		var e = this.originalEvent;

		this.isPropagationStopped = returnTrue;

		if ( e && !this.isSimulated ) {
			e.stopPropagation();
		}
	},
	stopImmediatePropagation: function() {
		var e = this.originalEvent;

		this.isImmediatePropagationStopped = returnTrue;

		if ( e && !this.isSimulated ) {
			e.stopImmediatePropagation();
		}

		this.stopPropagation();
	}
};

// Includes all common event props including KeyEvent and MouseEvent specific props
jQuery.each( {
	altKey: true,
	bubbles: true,
	cancelable: true,
	changedTouches: true,
	ctrlKey: true,
	detail: true,
	eventPhase: true,
	metaKey: true,
	pageX: true,
	pageY: true,
	shiftKey: true,
	view: true,
	"char": true,
	charCode: true,
	key: true,
	keyCode: true,
	button: true,
	buttons: true,
	clientX: true,
	clientY: true,
	offsetX: true,
	offsetY: true,
	pointerId: true,
	pointerType: true,
	screenX: true,
	screenY: true,
	targetTouches: true,
	toElement: true,
	touches: true,

	which: function( event ) {
		var button = event.button;

		// Add which for key events
		if ( event.which == null && rkeyEvent.test( event.type ) ) {
			return event.charCode != null ? event.charCode : event.keyCode;
		}

		// Add which for click: 1 === left; 2 === middle; 3 === right
		if ( !event.which && button !== undefined && rmouseEvent.test( event.type ) ) {
			if ( button & 1 ) {
				return 1;
			}

			if ( button & 2 ) {
				return 3;
			}

			if ( button & 4 ) {
				return 2;
			}

			return 0;
		}

		return event.which;
	}
}, jQuery.event.addProp );

// Create mouseenter/leave events using mouseover/out and event-time checks
// so that event delegation works in jQuery.
// Do the same for pointerenter/pointerleave and pointerover/pointerout
//
// Support: Safari 7 only
// Safari sends mouseenter too often; see:
// https://bugs.chromium.org/p/chromium/issues/detail?id=470258
// for the description of the bug (it existed in older Chrome versions as well).
jQuery.each( {
	mouseenter: "mouseover",
	mouseleave: "mouseout",
	pointerenter: "pointerover",
	pointerleave: "pointerout"
}, function( orig, fix ) {
	jQuery.event.special[ orig ] = {
		delegateType: fix,
		bindType: fix,

		handle: function( event ) {
			var ret,
				target = this,
				related = event.relatedTarget,
				handleObj = event.handleObj;

			// For mouseenter/leave call the handler if related is outside the target.
			// NB: No relatedTarget if the mouse left/entered the browser window
			if ( !related || ( related !== target && !jQuery.contains( target, related ) ) ) {
				event.type = handleObj.origType;
				ret = handleObj.handler.apply( this, arguments );
				event.type = fix;
			}
			return ret;
		}
	};
} );

jQuery.fn.extend( {

	on: function( types, selector, data, fn ) {
		return on( this, types, selector, data, fn );
	},
	one: function( types, selector, data, fn ) {
		return on( this, types, selector, data, fn, 1 );
	},
	off: function( types, selector, fn ) {
		var handleObj, type;
		if ( types && types.preventDefault && types.handleObj ) {

			// ( event )  dispatched jQuery.Event
			handleObj = types.handleObj;
			jQuery( types.delegateTarget ).off(
				handleObj.namespace ?
					handleObj.origType + "." + handleObj.namespace :
					handleObj.origType,
				handleObj.selector,
				handleObj.handler
			);
			return this;
		}
		if ( typeof types === "object" ) {

			// ( types-object [, selector] )
			for ( type in types ) {
				this.off( type, selector, types[ type ] );
			}
			return this;
		}
		if ( selector === false || typeof selector === "function" ) {

			// ( types [, fn] )
			fn = selector;
			selector = undefined;
		}
		if ( fn === false ) {
			fn = returnFalse;
		}
		return this.each( function() {
			jQuery.event.remove( this, types, fn, selector );
		} );
	}
} );


var

	/* eslint-disable max-len */

	// See https://github.com/eslint/eslint/issues/3229
	rxhtmlTag = /<(?!area|br|col|embed|hr|img|input|link|meta|param)(([a-z][^\/\0>\x20\t\r\n\f]*)[^>]*)\/>/gi,

	/* eslint-enable */

	// Support: IE <=10 - 11, Edge 12 - 13 only
	// In IE/Edge using regex groups here causes severe slowdowns.
	// See https://connect.microsoft.com/IE/feedback/details/1736512/
	rnoInnerhtml = /<script|<style|<link/i,

	// checked="checked" or checked
	rchecked = /checked\s*(?:[^=]|=\s*.checked.)/i,
	rcleanScript = /^\s*<!(?:\[CDATA\[|--)|(?:\]\]|--)>\s*$/g;

// Prefer a tbody over its parent table for containing new rows
function manipulationTarget( elem, content ) {
	if ( nodeName( elem, "table" ) &&
		nodeName( content.nodeType !== 11 ? content : content.firstChild, "tr" ) ) {

		return jQuery( elem ).children( "tbody" )[ 0 ] || elem;
	}

	return elem;
}

// Replace/restore the type attribute of script elements for safe DOM manipulation
function disableScript( elem ) {
	elem.type = ( elem.getAttribute( "type" ) !== null ) + "/" + elem.type;
	return elem;
}
function restoreScript( elem ) {
	if ( ( elem.type || "" ).slice( 0, 5 ) === "true/" ) {
		elem.type = elem.type.slice( 5 );
	} else {
		elem.removeAttribute( "type" );
	}

	return elem;
}

function cloneCopyEvent( src, dest ) {
	var i, l, type, pdataOld, pdataCur, udataOld, udataCur, events;

	if ( dest.nodeType !== 1 ) {
		return;
	}

	// 1. Copy private data: events, handlers, etc.
	if ( dataPriv.hasData( src ) ) {
		pdataOld = dataPriv.access( src );
		pdataCur = dataPriv.set( dest, pdataOld );
		events = pdataOld.events;

		if ( events ) {
			delete pdataCur.handle;
			pdataCur.events = {};

			for ( type in events ) {
				for ( i = 0, l = events[ type ].length; i < l; i++ ) {
					jQuery.event.add( dest, type, events[ type ][ i ] );
				}
			}
		}
	}

	// 2. Copy user data
	if ( dataUser.hasData( src ) ) {
		udataOld = dataUser.access( src );
		udataCur = jQuery.extend( {}, udataOld );

		dataUser.set( dest, udataCur );
	}
}

// Fix IE bugs, see support tests
function fixInput( src, dest ) {
	var nodeName = dest.nodeName.toLowerCase();

	// Fails to persist the checked state of a cloned checkbox or radio button.
	if ( nodeName === "input" && rcheckableType.test( src.type ) ) {
		dest.checked = src.checked;

	// Fails to return the selected option to the default selected state when cloning options
	} else if ( nodeName === "input" || nodeName === "textarea" ) {
		dest.defaultValue = src.defaultValue;
	}
}

function domManip( collection, args, callback, ignored ) {

	// Flatten any nested arrays
	args = concat.apply( [], args );

	var fragment, first, scripts, hasScripts, node, doc,
		i = 0,
		l = collection.length,
		iNoClone = l - 1,
		value = args[ 0 ],
		valueIsFunction = isFunction( value );

	// We can't cloneNode fragments that contain checked, in WebKit
	if ( valueIsFunction ||
			( l > 1 && typeof value === "string" &&
				!support.checkClone && rchecked.test( value ) ) ) {
		return collection.each( function( index ) {
			var self = collection.eq( index );
			if ( valueIsFunction ) {
				args[ 0 ] = value.call( this, index, self.html() );
			}
			domManip( self, args, callback, ignored );
		} );
	}

	if ( l ) {
		fragment = buildFragment( args, collection[ 0 ].ownerDocument, false, collection, ignored );
		first = fragment.firstChild;

		if ( fragment.childNodes.length === 1 ) {
			fragment = first;
		}

		// Require either new content or an interest in ignored elements to invoke the callback
		if ( first || ignored ) {
			scripts = jQuery.map( getAll( fragment, "script" ), disableScript );
			hasScripts = scripts.length;

			// Use the original fragment for the last item
			// instead of the first because it can end up
			// being emptied incorrectly in certain situations (#8070).
			for ( ; i < l; i++ ) {
				node = fragment;

				if ( i !== iNoClone ) {
					node = jQuery.clone( node, true, true );

					// Keep references to cloned scripts for later restoration
					if ( hasScripts ) {

						// Support: Android <=4.0 only, PhantomJS 1 only
						// push.apply(_, arraylike) throws on ancient WebKit
						jQuery.merge( scripts, getAll( node, "script" ) );
					}
				}

				callback.call( collection[ i ], node, i );
			}

			if ( hasScripts ) {
				doc = scripts[ scripts.length - 1 ].ownerDocument;

				// Reenable scripts
				jQuery.map( scripts, restoreScript );

				// Evaluate executable scripts on first document insertion
				for ( i = 0; i < hasScripts; i++ ) {
					node = scripts[ i ];
					if ( rscriptType.test( node.type || "" ) &&
						!dataPriv.access( node, "globalEval" ) &&
						jQuery.contains( doc, node ) ) {

						if ( node.src && ( node.type || "" ).toLowerCase()  !== "module" ) {

							// Optional AJAX dependency, but won't run scripts if not present
							if ( jQuery._evalUrl ) {
								jQuery._evalUrl( node.src );
							}
						} else {
							DOMEval( node.textContent.replace( rcleanScript, "" ), doc, node );
						}
					}
				}
			}
		}
	}

	return collection;
}

function remove( elem, selector, keepData ) {
	var node,
		nodes = selector ? jQuery.filter( selector, elem ) : elem,
		i = 0;

	for ( ; ( node = nodes[ i ] ) != null; i++ ) {
		if ( !keepData && node.nodeType === 1 ) {
			jQuery.cleanData( getAll( node ) );
		}

		if ( node.parentNode ) {
			if ( keepData && jQuery.contains( node.ownerDocument, node ) ) {
				setGlobalEval( getAll( node, "script" ) );
			}
			node.parentNode.removeChild( node );
		}
	}

	return elem;
}

jQuery.extend( {
	htmlPrefilter: function( html ) {
		return html.replace( rxhtmlTag, "<$1></$2>" );
	},

	clone: function( elem, dataAndEvents, deepDataAndEvents ) {
		var i, l, srcElements, destElements,
			clone = elem.cloneNode( true ),
			inPage = jQuery.contains( elem.ownerDocument, elem );

		// Fix IE cloning issues
		if ( !support.noCloneChecked && ( elem.nodeType === 1 || elem.nodeType === 11 ) &&
				!jQuery.isXMLDoc( elem ) ) {

			// We eschew Sizzle here for performance reasons: https://jsperf.com/getall-vs-sizzle/2
			destElements = getAll( clone );
			srcElements = getAll( elem );

			for ( i = 0, l = srcElements.length; i < l; i++ ) {
				fixInput( srcElements[ i ], destElements[ i ] );
			}
		}

		// Copy the events from the original to the clone
		if ( dataAndEvents ) {
			if ( deepDataAndEvents ) {
				srcElements = srcElements || getAll( elem );
				destElements = destElements || getAll( clone );

				for ( i = 0, l = srcElements.length; i < l; i++ ) {
					cloneCopyEvent( srcElements[ i ], destElements[ i ] );
				}
			} else {
				cloneCopyEvent( elem, clone );
			}
		}

		// Preserve script evaluation history
		destElements = getAll( clone, "script" );
		if ( destElements.length > 0 ) {
			setGlobalEval( destElements, !inPage && getAll( elem, "script" ) );
		}

		// Return the cloned set
		return clone;
	},

	cleanData: function( elems ) {
		var data, elem, type,
			special = jQuery.event.special,
			i = 0;

		for ( ; ( elem = elems[ i ] ) !== undefined; i++ ) {
			if ( acceptData( elem ) ) {
				if ( ( data = elem[ dataPriv.expando ] ) ) {
					if ( data.events ) {
						for ( type in data.events ) {
							if ( special[ type ] ) {
								jQuery.event.remove( elem, type );

							// This is a shortcut to avoid jQuery.event.remove's overhead
							} else {
								jQuery.removeEvent( elem, type, data.handle );
							}
						}
					}

					// Support: Chrome <=35 - 45+
					// Assign undefined instead of using delete, see Data#remove
					elem[ dataPriv.expando ] = undefined;
				}
				if ( elem[ dataUser.expando ] ) {

					// Support: Chrome <=35 - 45+
					// Assign undefined instead of using delete, see Data#remove
					elem[ dataUser.expando ] = undefined;
				}
			}
		}
	}
} );

jQuery.fn.extend( {
	detach: function( selector ) {
		return remove( this, selector, true );
	},

	remove: function( selector ) {
		return remove( this, selector );
	},

	text: function( value ) {
		return access( this, function( value ) {
			return value === undefined ?
				jQuery.text( this ) :
				this.empty().each( function() {
					if ( this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9 ) {
						this.textContent = value;
					}
				} );
		}, null, value, arguments.length );
	},

	append: function() {
		return domManip( this, arguments, function( elem ) {
			if ( this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9 ) {
				var target = manipulationTarget( this, elem );
				target.appendChild( elem );
			}
		} );
	},

	prepend: function() {
		return domManip( this, arguments, function( elem ) {
			if ( this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9 ) {
				var target = manipulationTarget( this, elem );
				target.insertBefore( elem, target.firstChild );
			}
		} );
	},

	before: function() {
		return domManip( this, arguments, function( elem ) {
			if ( this.parentNode ) {
				this.parentNode.insertBefore( elem, this );
			}
		} );
	},

	after: function() {
		return domManip( this, arguments, function( elem ) {
			if ( this.parentNode ) {
				this.parentNode.insertBefore( elem, this.nextSibling );
			}
		} );
	},

	empty: function() {
		var elem,
			i = 0;

		for ( ; ( elem = this[ i ] ) != null; i++ ) {
			if ( elem.nodeType === 1 ) {

				// Prevent memory leaks
				jQuery.cleanData( getAll( elem, false ) );

				// Remove any remaining nodes
				elem.textContent = "";
			}
		}

		return this;
	},

	clone: function( dataAndEvents, deepDataAndEvents ) {
		dataAndEvents = dataAndEvents == null ? false : dataAndEvents;
		deepDataAndEvents = deepDataAndEvents == null ? dataAndEvents : deepDataAndEvents;

		return this.map( function() {
			return jQuery.clone( this, dataAndEvents, deepDataAndEvents );
		} );
	},

	html: function( value ) {
		return access( this, function( value ) {
			var elem = this[ 0 ] || {},
				i = 0,
				l = this.length;

			if ( value === undefined && elem.nodeType === 1 ) {
				return elem.innerHTML;
			}

			// See if we can take a shortcut and just use innerHTML
			if ( typeof value === "string" && !rnoInnerhtml.test( value ) &&
				!wrapMap[ ( rtagName.exec( value ) || [ "", "" ] )[ 1 ].toLowerCase() ] ) {

				value = jQuery.htmlPrefilter( value );

				try {
					for ( ; i < l; i++ ) {
						elem = this[ i ] || {};

						// Remove element nodes and prevent memory leaks
						if ( elem.nodeType === 1 ) {
							jQuery.cleanData( getAll( elem, false ) );
							elem.innerHTML = value;
						}
					}

					elem = 0;

				// If using innerHTML throws an exception, use the fallback method
				} catch ( e ) {}
			}

			if ( elem ) {
				this.empty().append( value );
			}
		}, null, value, arguments.length );
	},

	replaceWith: function() {
		var ignored = [];

		// Make the changes, replacing each non-ignored context element with the new content
		return domManip( this, arguments, function( elem ) {
			var parent = this.parentNode;

			if ( jQuery.inArray( this, ignored ) < 0 ) {
				jQuery.cleanData( getAll( this ) );
				if ( parent ) {
					parent.replaceChild( elem, this );
				}
			}

		// Force callback invocation
		}, ignored );
	}
} );

jQuery.each( {
	appendTo: "append",
	prependTo: "prepend",
	insertBefore: "before",
	insertAfter: "after",
	replaceAll: "replaceWith"
}, function( name, original ) {
	jQuery.fn[ name ] = function( selector ) {
		var elems,
			ret = [],
			insert = jQuery( selector ),
			last = insert.length - 1,
			i = 0;

		for ( ; i <= last; i++ ) {
			elems = i === last ? this : this.clone( true );
			jQuery( insert[ i ] )[ original ]( elems );

			// Support: Android <=4.0 only, PhantomJS 1 only
			// .get() because push.apply(_, arraylike) throws on ancient WebKit
			push.apply( ret, elems.get() );
		}

		return this.pushStack( ret );
	};
} );
var rnumnonpx = new RegExp( "^(" + pnum + ")(?!px)[a-z%]+$", "i" );

var getStyles = function( elem ) {

		// Support: IE <=11 only, Firefox <=30 (#15098, #14150)
		// IE throws on elements created in popups
		// FF meanwhile throws on frame elements through "defaultView.getComputedStyle"
		var view = elem.ownerDocument.defaultView;

		if ( !view || !view.opener ) {
			view = window;
		}

		return view.getComputedStyle( elem );
	};

var rboxStyle = new RegExp( cssExpand.join( "|" ), "i" );



( function() {

	// Executing both pixelPosition & boxSizingReliable tests require only one layout
	// so they're executed at the same time to save the second computation.
	function computeStyleTests() {

		// This is a singleton, we need to execute it only once
		if ( !div ) {
			return;
		}

		container.style.cssText = "position:absolute;left:-11111px;width:60px;" +
			"margin-top:1px;padding:0;border:0";
		div.style.cssText =
			"position:relative;display:block;box-sizing:border-box;overflow:scroll;" +
			"margin:auto;border:1px;padding:1px;" +
			"width:60%;top:1%";
		documentElement.appendChild( container ).appendChild( div );

		var divStyle = window.getComputedStyle( div );
		pixelPositionVal = divStyle.top !== "1%";

		// Support: Android 4.0 - 4.3 only, Firefox <=3 - 44
		reliableMarginLeftVal = roundPixelMeasures( divStyle.marginLeft ) === 12;

		// Support: Android 4.0 - 4.3 only, Safari <=9.1 - 10.1, iOS <=7.0 - 9.3
		// Some styles come back with percentage values, even though they shouldn't
		div.style.right = "60%";
		pixelBoxStylesVal = roundPixelMeasures( divStyle.right ) === 36;

		// Support: IE 9 - 11 only
		// Detect misreporting of content dimensions for box-sizing:border-box elements
		boxSizingReliableVal = roundPixelMeasures( divStyle.width ) === 36;

		// Support: IE 9 only
		// Detect overflow:scroll screwiness (gh-3699)
		div.style.position = "absolute";
		scrollboxSizeVal = div.offsetWidth === 36 || "absolute";

		documentElement.removeChild( container );

		// Nullify the div so it wouldn't be stored in the memory and
		// it will also be a sign that checks already performed
		div = null;
	}

	function roundPixelMeasures( measure ) {
		return Math.round( parseFloat( measure ) );
	}

	var pixelPositionVal, boxSizingReliableVal, scrollboxSizeVal, pixelBoxStylesVal,
		reliableMarginLeftVal,
		container = document.createElement( "div" ),
		div = document.createElement( "div" );

	// Finish early in limited (non-browser) environments
	if ( !div.style ) {
		return;
	}

	// Support: IE <=9 - 11 only
	// Style of cloned element affects source element cloned (#8908)
	div.style.backgroundClip = "content-box";
	div.cloneNode( true ).style.backgroundClip = "";
	support.clearCloneStyle = div.style.backgroundClip === "content-box";

	jQuery.extend( support, {
		boxSizingReliable: function() {
			computeStyleTests();
			return boxSizingReliableVal;
		},
		pixelBoxStyles: function() {
			computeStyleTests();
			return pixelBoxStylesVal;
		},
		pixelPosition: function() {
			computeStyleTests();
			return pixelPositionVal;
		},
		reliableMarginLeft: function() {
			computeStyleTests();
			return reliableMarginLeftVal;
		},
		scrollboxSize: function() {
			computeStyleTests();
			return scrollboxSizeVal;
		}
	} );
} )();


function curCSS( elem, name, computed ) {
	var width, minWidth, maxWidth, ret,

		// Support: Firefox 51+
		// Retrieving style before computed somehow
		// fixes an issue with getting wrong values
		// on detached elements
		style = elem.style;

	computed = computed || getStyles( elem );

	// getPropertyValue is needed for:
	//   .css('filter') (IE 9 only, #12537)
	//   .css('--customProperty) (#3144)
	if ( computed ) {
		ret = computed.getPropertyValue( name ) || computed[ name ];

		if ( ret === "" && !jQuery.contains( elem.ownerDocument, elem ) ) {
			ret = jQuery.style( elem, name );
		}

		// A tribute to the "awesome hack by Dean Edwards"
		// Android Browser returns percentage for some values,
		// but width seems to be reliably pixels.
		// This is against the CSSOM draft spec:
		// https://drafts.csswg.org/cssom/#resolved-values
		if ( !support.pixelBoxStyles() && rnumnonpx.test( ret ) && rboxStyle.test( name ) ) {

			// Remember the original values
			width = style.width;
			minWidth = style.minWidth;
			maxWidth = style.maxWidth;

			// Put in the new values to get a computed value out
			style.minWidth = style.maxWidth = style.width = ret;
			ret = computed.width;

			// Revert the changed values
			style.width = width;
			style.minWidth = minWidth;
			style.maxWidth = maxWidth;
		}
	}

	return ret !== undefined ?

		// Support: IE <=9 - 11 only
		// IE returns zIndex value as an integer.
		ret + "" :
		ret;
}


function addGetHookIf( conditionFn, hookFn ) {

	// Define the hook, we'll check on the first run if it's really needed.
	return {
		get: function() {
			if ( conditionFn() ) {

				// Hook not needed (or it's not possible to use it due
				// to missing dependency), remove it.
				delete this.get;
				return;
			}

			// Hook needed; redefine it so that the support test is not executed again.
			return ( this.get = hookFn ).apply( this, arguments );
		}
	};
}


var

	// Swappable if display is none or starts with table
	// except "table", "table-cell", or "table-caption"
	// See here for display values: https://developer.mozilla.org/en-US/docs/CSS/display
	rdisplayswap = /^(none|table(?!-c[ea]).+)/,
	rcustomProp = /^--/,
	cssShow = { position: "absolute", visibility: "hidden", display: "block" },
	cssNormalTransform = {
		letterSpacing: "0",
		fontWeight: "400"
	},

	cssPrefixes = [ "Webkit", "Moz", "ms" ],
	emptyStyle = document.createElement( "div" ).style;

// Return a css property mapped to a potentially vendor prefixed property
function vendorPropName( name ) {

	// Shortcut for names that are not vendor prefixed
	if ( name in emptyStyle ) {
		return name;
	}

	// Check for vendor prefixed names
	var capName = name[ 0 ].toUpperCase() + name.slice( 1 ),
		i = cssPrefixes.length;

	while ( i-- ) {
		name = cssPrefixes[ i ] + capName;
		if ( name in emptyStyle ) {
			return name;
		}
	}
}

// Return a property mapped along what jQuery.cssProps suggests or to
// a vendor prefixed property.
function finalPropName( name ) {
	var ret = jQuery.cssProps[ name ];
	if ( !ret ) {
		ret = jQuery.cssProps[ name ] = vendorPropName( name ) || name;
	}
	return ret;
}

function setPositiveNumber( elem, value, subtract ) {

	// Any relative (+/-) values have already been
	// normalized at this point
	var matches = rcssNum.exec( value );
	return matches ?

		// Guard against undefined "subtract", e.g., when used as in cssHooks
		Math.max( 0, matches[ 2 ] - ( subtract || 0 ) ) + ( matches[ 3 ] || "px" ) :
		value;
}

function boxModelAdjustment( elem, dimension, box, isBorderBox, styles, computedVal ) {
	var i = dimension === "width" ? 1 : 0,
		extra = 0,
		delta = 0;

	// Adjustment may not be necessary
	if ( box === ( isBorderBox ? "border" : "content" ) ) {
		return 0;
	}

	for ( ; i < 4; i += 2 ) {

		// Both box models exclude margin
		if ( box === "margin" ) {
			delta += jQuery.css( elem, box + cssExpand[ i ], true, styles );
		}

		// If we get here with a content-box, we're seeking "padding" or "border" or "margin"
		if ( !isBorderBox ) {

			// Add padding
			delta += jQuery.css( elem, "padding" + cssExpand[ i ], true, styles );

			// For "border" or "margin", add border
			if ( box !== "padding" ) {
				delta += jQuery.css( elem, "border" + cssExpand[ i ] + "Width", true, styles );

			// But still keep track of it otherwise
			} else {
				extra += jQuery.css( elem, "border" + cssExpand[ i ] + "Width", true, styles );
			}

		// If we get here with a border-box (content + padding + border), we're seeking "content" or
		// "padding" or "margin"
		} else {

			// For "content", subtract padding
			if ( box === "content" ) {
				delta -= jQuery.css( elem, "padding" + cssExpand[ i ], true, styles );
			}

			// For "content" or "padding", subtract border
			if ( box !== "margin" ) {
				delta -= jQuery.css( elem, "border" + cssExpand[ i ] + "Width", true, styles );
			}
		}
	}

	// Account for positive content-box scroll gutter when requested by providing computedVal
	if ( !isBorderBox && computedVal >= 0 ) {

		// offsetWidth/offsetHeight is a rounded sum of content, padding, scroll gutter, and border
		// Assuming integer scroll gutter, subtract the rest and round down
		delta += Math.max( 0, Math.ceil(
			elem[ "offset" + dimension[ 0 ].toUpperCase() + dimension.slice( 1 ) ] -
			computedVal -
			delta -
			extra -
			0.5
		) );
	}

	return delta;
}

function getWidthOrHeight( elem, dimension, extra ) {

	// Start with computed style
	var styles = getStyles( elem ),
		val = curCSS( elem, dimension, styles ),
		isBorderBox = jQuery.css( elem, "boxSizing", false, styles ) === "border-box",
		valueIsBorderBox = isBorderBox;

	// Support: Firefox <=54
	// Return a confounding non-pixel value or feign ignorance, as appropriate.
	if ( rnumnonpx.test( val ) ) {
		if ( !extra ) {
			return val;
		}
		val = "auto";
	}

	// Check for style in case a browser which returns unreliable values
	// for getComputedStyle silently falls back to the reliable elem.style
	valueIsBorderBox = valueIsBorderBox &&
		( support.boxSizingReliable() || val === elem.style[ dimension ] );

	// Fall back to offsetWidth/offsetHeight when value is "auto"
	// This happens for inline elements with no explicit setting (gh-3571)
	// Support: Android <=4.1 - 4.3 only
	// Also use offsetWidth/offsetHeight for misreported inline dimensions (gh-3602)
	if ( val === "auto" ||
		!parseFloat( val ) && jQuery.css( elem, "display", false, styles ) === "inline" ) {

		val = elem[ "offset" + dimension[ 0 ].toUpperCase() + dimension.slice( 1 ) ];

		// offsetWidth/offsetHeight provide border-box values
		valueIsBorderBox = true;
	}

	// Normalize "" and auto
	val = parseFloat( val ) || 0;

	// Adjust for the element's box model
	return ( val +
		boxModelAdjustment(
			elem,
			dimension,
			extra || ( isBorderBox ? "border" : "content" ),
			valueIsBorderBox,
			styles,

			// Provide the current computed size to request scroll gutter calculation (gh-3589)
			val
		)
	) + "px";
}

jQuery.extend( {

	// Add in style property hooks for overriding the default
	// behavior of getting and setting a style property
	cssHooks: {
		opacity: {
			get: function( elem, computed ) {
				if ( computed ) {

					// We should always get a number back from opacity
					var ret = curCSS( elem, "opacity" );
					return ret === "" ? "1" : ret;
				}
			}
		}
	},

	// Don't automatically add "px" to these possibly-unitless properties
	cssNumber: {
		"animationIterationCount": true,
		"columnCount": true,
		"fillOpacity": true,
		"flexGrow": true,
		"flexShrink": true,
		"fontWeight": true,
		"lineHeight": true,
		"opacity": true,
		"order": true,
		"orphans": true,
		"widows": true,
		"zIndex": true,
		"zoom": true
	},

	// Add in properties whose names you wish to fix before
	// setting or getting the value
	cssProps: {},

	// Get and set the style property on a DOM Node
	style: function( elem, name, value, extra ) {

		// Don't set styles on text and comment nodes
		if ( !elem || elem.nodeType === 3 || elem.nodeType === 8 || !elem.style ) {
			return;
		}

		// Make sure that we're working with the right name
		var ret, type, hooks,
			origName = camelCase( name ),
			isCustomProp = rcustomProp.test( name ),
			style = elem.style;

		// Make sure that we're working with the right name. We don't
		// want to query the value if it is a CSS custom property
		// since they are user-defined.
		if ( !isCustomProp ) {
			name = finalPropName( origName );
		}

		// Gets hook for the prefixed version, then unprefixed version
		hooks = jQuery.cssHooks[ name ] || jQuery.cssHooks[ origName ];

		// Check if we're setting a value
		if ( value !== undefined ) {
			type = typeof value;

			// Convert "+=" or "-=" to relative numbers (#7345)
			if ( type === "string" && ( ret = rcssNum.exec( value ) ) && ret[ 1 ] ) {
				value = adjustCSS( elem, name, ret );

				// Fixes bug #9237
				type = "number";
			}

			// Make sure that null and NaN values aren't set (#7116)
			if ( value == null || value !== value ) {
				return;
			}

			// If a number was passed in, add the unit (except for certain CSS properties)
			if ( type === "number" ) {
				value += ret && ret[ 3 ] || ( jQuery.cssNumber[ origName ] ? "" : "px" );
			}

			// background-* props affect original clone's values
			if ( !support.clearCloneStyle && value === "" && name.indexOf( "background" ) === 0 ) {
				style[ name ] = "inherit";
			}

			// If a hook was provided, use that value, otherwise just set the specified value
			if ( !hooks || !( "set" in hooks ) ||
				( value = hooks.set( elem, value, extra ) ) !== undefined ) {

				if ( isCustomProp ) {
					style.setProperty( name, value );
				} else {
					style[ name ] = value;
				}
			}

		} else {

			// If a hook was provided get the non-computed value from there
			if ( hooks && "get" in hooks &&
				( ret = hooks.get( elem, false, extra ) ) !== undefined ) {

				return ret;
			}

			// Otherwise just get the value from the style object
			return style[ name ];
		}
	},

	css: function( elem, name, extra, styles ) {
		var val, num, hooks,
			origName = camelCase( name ),
			isCustomProp = rcustomProp.test( name );

		// Make sure that we're working with the right name. We don't
		// want to modify the value if it is a CSS custom property
		// since they are user-defined.
		if ( !isCustomProp ) {
			name = finalPropName( origName );
		}

		// Try prefixed name followed by the unprefixed name
		hooks = jQuery.cssHooks[ name ] || jQuery.cssHooks[ origName ];

		// If a hook was provided get the computed value from there
		if ( hooks && "get" in hooks ) {
			val = hooks.get( elem, true, extra );
		}

		// Otherwise, if a way to get the computed value exists, use that
		if ( val === undefined ) {
			val = curCSS( elem, name, styles );
		}

		// Convert "normal" to computed value
		if ( val === "normal" && name in cssNormalTransform ) {
			val = cssNormalTransform[ name ];
		}

		// Make numeric if forced or a qualifier was provided and val looks numeric
		if ( extra === "" || extra ) {
			num = parseFloat( val );
			return extra === true || isFinite( num ) ? num || 0 : val;
		}

		return val;
	}
} );

jQuery.each( [ "height", "width" ], function( i, dimension ) {
	jQuery.cssHooks[ dimension ] = {
		get: function( elem, computed, extra ) {
			if ( computed ) {

				// Certain elements can have dimension info if we invisibly show them
				// but it must have a current display style that would benefit
				return rdisplayswap.test( jQuery.css( elem, "display" ) ) &&

					// Support: Safari 8+
					// Table columns in Safari have non-zero offsetWidth & zero
					// getBoundingClientRect().width unless display is changed.
					// Support: IE <=11 only
					// Running getBoundingClientRect on a disconnected node
					// in IE throws an error.
					( !elem.getClientRects().length || !elem.getBoundingClientRect().width ) ?
						swap( elem, cssShow, function() {
							return getWidthOrHeight( elem, dimension, extra );
						} ) :
						getWidthOrHeight( elem, dimension, extra );
			}
		},

		set: function( elem, value, extra ) {
			var matches,
				styles = getStyles( elem ),
				isBorderBox = jQuery.css( elem, "boxSizing", false, styles ) === "border-box",
				subtract = extra && boxModelAdjustment(
					elem,
					dimension,
					extra,
					isBorderBox,
					styles
				);

			// Account for unreliable border-box dimensions by comparing offset* to computed and
			// faking a content-box to get border and padding (gh-3699)
			if ( isBorderBox && support.scrollboxSize() === styles.position ) {
				subtract -= Math.ceil(
					elem[ "offset" + dimension[ 0 ].toUpperCase() + dimension.slice( 1 ) ] -
					parseFloat( styles[ dimension ] ) -
					boxModelAdjustment( elem, dimension, "border", false, styles ) -
					0.5
				);
			}

			// Convert to pixels if value adjustment is needed
			if ( subtract && ( matches = rcssNum.exec( value ) ) &&
				( matches[ 3 ] || "px" ) !== "px" ) {

				elem.style[ dimension ] = value;
				value = jQuery.css( elem, dimension );
			}

			return setPositiveNumber( elem, value, subtract );
		}
	};
} );

jQuery.cssHooks.marginLeft = addGetHookIf( support.reliableMarginLeft,
	function( elem, computed ) {
		if ( computed ) {
			return ( parseFloat( curCSS( elem, "marginLeft" ) ) ||
				elem.getBoundingClientRect().left -
					swap( elem, { marginLeft: 0 }, function() {
						return elem.getBoundingClientRect().left;
					} )
				) + "px";
		}
	}
);

// These hooks are used by animate to expand properties
jQuery.each( {
	margin: "",
	padding: "",
	border: "Width"
}, function( prefix, suffix ) {
	jQuery.cssHooks[ prefix + suffix ] = {
		expand: function( value ) {
			var i = 0,
				expanded = {},

				// Assumes a single number if not a string
				parts = typeof value === "string" ? value.split( " " ) : [ value ];

			for ( ; i < 4; i++ ) {
				expanded[ prefix + cssExpand[ i ] + suffix ] =
					parts[ i ] || parts[ i - 2 ] || parts[ 0 ];
			}

			return expanded;
		}
	};

	if ( prefix !== "margin" ) {
		jQuery.cssHooks[ prefix + suffix ].set = setPositiveNumber;
	}
} );

jQuery.fn.extend( {
	css: function( name, value ) {
		return access( this, function( elem, name, value ) {
			var styles, len,
				map = {},
				i = 0;

			if ( Array.isArray( name ) ) {
				styles = getStyles( elem );
				len = name.length;

				for ( ; i < len; i++ ) {
					map[ name[ i ] ] = jQuery.css( elem, name[ i ], false, styles );
				}

				return map;
			}

			return value !== undefined ?
				jQuery.style( elem, name, value ) :
				jQuery.css( elem, name );
		}, name, value, arguments.length > 1 );
	}
} );


function Tween( elem, options, prop, end, easing ) {
	return new Tween.prototype.init( elem, options, prop, end, easing );
}
jQuery.Tween = Tween;

Tween.prototype = {
	constructor: Tween,
	init: function( elem, options, prop, end, easing, unit ) {
		this.elem = elem;
		this.prop = prop;
		this.easing = easing || jQuery.easing._default;
		this.options = options;
		this.start = this.now = this.cur();
		this.end = end;
		this.unit = unit || ( jQuery.cssNumber[ prop ] ? "" : "px" );
	},
	cur: function() {
		var hooks = Tween.propHooks[ this.prop ];

		return hooks && hooks.get ?
			hooks.get( this ) :
			Tween.propHooks._default.get( this );
	},
	run: function( percent ) {
		var eased,
			hooks = Tween.propHooks[ this.prop ];

		if ( this.options.duration ) {
			this.pos = eased = jQuery.easing[ this.easing ](
				percent, this.options.duration * percent, 0, 1, this.options.duration
			);
		} else {
			this.pos = eased = percent;
		}
		this.now = ( this.end - this.start ) * eased + this.start;

		if ( this.options.step ) {
			this.options.step.call( this.elem, this.now, this );
		}

		if ( hooks && hooks.set ) {
			hooks.set( this );
		} else {
			Tween.propHooks._default.set( this );
		}
		return this;
	}
};

Tween.prototype.init.prototype = Tween.prototype;

Tween.propHooks = {
	_default: {
		get: function( tween ) {
			var result;

			// Use a property on the element directly when it is not a DOM element,
			// or when there is no matching style property that exists.
			if ( tween.elem.nodeType !== 1 ||
				tween.elem[ tween.prop ] != null && tween.elem.style[ tween.prop ] == null ) {
				return tween.elem[ tween.prop ];
			}

			// Passing an empty string as a 3rd parameter to .css will automatically
			// attempt a parseFloat and fallback to a string if the parse fails.
			// Simple values such as "10px" are parsed to Float;
			// complex values such as "rotate(1rad)" are returned as-is.
			result = jQuery.css( tween.elem, tween.prop, "" );

			// Empty strings, null, undefined and "auto" are converted to 0.
			return !result || result === "auto" ? 0 : result;
		},
		set: function( tween ) {

			// Use step hook for back compat.
			// Use cssHook if its there.
			// Use .style if available and use plain properties where available.
			if ( jQuery.fx.step[ tween.prop ] ) {
				jQuery.fx.step[ tween.prop ]( tween );
			} else if ( tween.elem.nodeType === 1 &&
				( tween.elem.style[ jQuery.cssProps[ tween.prop ] ] != null ||
					jQuery.cssHooks[ tween.prop ] ) ) {
				jQuery.style( tween.elem, tween.prop, tween.now + tween.unit );
			} else {
				tween.elem[ tween.prop ] = tween.now;
			}
		}
	}
};

// Support: IE <=9 only
// Panic based approach to setting things on disconnected nodes
Tween.propHooks.scrollTop = Tween.propHooks.scrollLeft = {
	set: function( tween ) {
		if ( tween.elem.nodeType && tween.elem.parentNode ) {
			tween.elem[ tween.prop ] = tween.now;
		}
	}
};

jQuery.easing = {
	linear: function( p ) {
		return p;
	},
	swing: function( p ) {
		return 0.5 - Math.cos( p * Math.PI ) / 2;
	},
	_default: "swing"
};

jQuery.fx = Tween.prototype.init;

// Back compat <1.8 extension point
jQuery.fx.step = {};




var
	fxNow, inProgress,
	rfxtypes = /^(?:toggle|show|hide)$/,
	rrun = /queueHooks$/;

function schedule() {
	if ( inProgress ) {
		if ( document.hidden === false && window.requestAnimationFrame ) {
			window.requestAnimationFrame( schedule );
		} else {
			window.setTimeout( schedule, jQuery.fx.interval );
		}

		jQuery.fx.tick();
	}
}

// Animations created synchronously will run synchronously
function createFxNow() {
	window.setTimeout( function() {
		fxNow = undefined;
	} );
	return ( fxNow = Date.now() );
}

// Generate parameters to create a standard animation
function genFx( type, includeWidth ) {
	var which,
		i = 0,
		attrs = { height: type };

	// If we include width, step value is 1 to do all cssExpand values,
	// otherwise step value is 2 to skip over Left and Right
	includeWidth = includeWidth ? 1 : 0;
	for ( ; i < 4; i += 2 - includeWidth ) {
		which = cssExpand[ i ];
		attrs[ "margin" + which ] = attrs[ "padding" + which ] = type;
	}

	if ( includeWidth ) {
		attrs.opacity = attrs.width = type;
	}

	return attrs;
}

function createTween( value, prop, animation ) {
	var tween,
		collection = ( Animation.tweeners[ prop ] || [] ).concat( Animation.tweeners[ "*" ] ),
		index = 0,
		length = collection.length;
	for ( ; index < length; index++ ) {
		if ( ( tween = collection[ index ].call( animation, prop, value ) ) ) {

			// We're done with this property
			return tween;
		}
	}
}

function defaultPrefilter( elem, props, opts ) {
	var prop, value, toggle, hooks, oldfire, propTween, restoreDisplay, display,
		isBox = "width" in props || "height" in props,
		anim = this,
		orig = {},
		style = elem.style,
		hidden = elem.nodeType && isHiddenWithinTree( elem ),
		dataShow = dataPriv.get( elem, "fxshow" );

	// Queue-skipping animations hijack the fx hooks
	if ( !opts.queue ) {
		hooks = jQuery._queueHooks( elem, "fx" );
		if ( hooks.unqueued == null ) {
			hooks.unqueued = 0;
			oldfire = hooks.empty.fire;
			hooks.empty.fire = function() {
				if ( !hooks.unqueued ) {
					oldfire();
				}
			};
		}
		hooks.unqueued++;

		anim.always( function() {

			// Ensure the complete handler is called before this completes
			anim.always( function() {
				hooks.unqueued--;
				if ( !jQuery.queue( elem, "fx" ).length ) {
					hooks.empty.fire();
				}
			} );
		} );
	}

	// Detect show/hide animations
	for ( prop in props ) {
		value = props[ prop ];
		if ( rfxtypes.test( value ) ) {
			delete props[ prop ];
			toggle = toggle || value === "toggle";
			if ( value === ( hidden ? "hide" : "show" ) ) {

				// Pretend to be hidden if this is a "show" and
				// there is still data from a stopped show/hide
				if ( value === "show" && dataShow && dataShow[ prop ] !== undefined ) {
					hidden = true;

				// Ignore all other no-op show/hide data
				} else {
					continue;
				}
			}
			orig[ prop ] = dataShow && dataShow[ prop ] || jQuery.style( elem, prop );
		}
	}

	// Bail out if this is a no-op like .hide().hide()
	propTween = !jQuery.isEmptyObject( props );
	if ( !propTween && jQuery.isEmptyObject( orig ) ) {
		return;
	}

	// Restrict "overflow" and "display" styles during box animations
	if ( isBox && elem.nodeType === 1 ) {

		// Support: IE <=9 - 11, Edge 12 - 15
		// Record all 3 overflow attributes because IE does not infer the shorthand
		// from identically-valued overflowX and overflowY and Edge just mirrors
		// the overflowX value there.
		opts.overflow = [ style.overflow, style.overflowX, style.overflowY ];

		// Identify a display type, preferring old show/hide data over the CSS cascade
		restoreDisplay = dataShow && dataShow.display;
		if ( restoreDisplay == null ) {
			restoreDisplay = dataPriv.get( elem, "display" );
		}
		display = jQuery.css( elem, "display" );
		if ( display === "none" ) {
			if ( restoreDisplay ) {
				display = restoreDisplay;
			} else {

				// Get nonempty value(s) by temporarily forcing visibility
				showHide( [ elem ], true );
				restoreDisplay = elem.style.display || restoreDisplay;
				display = jQuery.css( elem, "display" );
				showHide( [ elem ] );
			}
		}

		// Animate inline elements as inline-block
		if ( display === "inline" || display === "inline-block" && restoreDisplay != null ) {
			if ( jQuery.css( elem, "float" ) === "none" ) {

				// Restore the original display value at the end of pure show/hide animations
				if ( !propTween ) {
					anim.done( function() {
						style.display = restoreDisplay;
					} );
					if ( restoreDisplay == null ) {
						display = style.display;
						restoreDisplay = display === "none" ? "" : display;
					}
				}
				style.display = "inline-block";
			}
		}
	}

	if ( opts.overflow ) {
		style.overflow = "hidden";
		anim.always( function() {
			style.overflow = opts.overflow[ 0 ];
			style.overflowX = opts.overflow[ 1 ];
			style.overflowY = opts.overflow[ 2 ];
		} );
	}

	// Implement show/hide animations
	propTween = false;
	for ( prop in orig ) {

		// General show/hide setup for this element animation
		if ( !propTween ) {
			if ( dataShow ) {
				if ( "hidden" in dataShow ) {
					hidden = dataShow.hidden;
				}
			} else {
				dataShow = dataPriv.access( elem, "fxshow", { display: restoreDisplay } );
			}

			// Store hidden/visible for toggle so `.stop().toggle()` "reverses"
			if ( toggle ) {
				dataShow.hidden = !hidden;
			}

			// Show elements before animating them
			if ( hidden ) {
				showHide( [ elem ], true );
			}

			/* eslint-disable no-loop-func */

			anim.done( function() {

			/* eslint-enable no-loop-func */

				// The final step of a "hide" animation is actually hiding the element
				if ( !hidden ) {
					showHide( [ elem ] );
				}
				dataPriv.remove( elem, "fxshow" );
				for ( prop in orig ) {
					jQuery.style( elem, prop, orig[ prop ] );
				}
			} );
		}

		// Per-property setup
		propTween = createTween( hidden ? dataShow[ prop ] : 0, prop, anim );
		if ( !( prop in dataShow ) ) {
			dataShow[ prop ] = propTween.start;
			if ( hidden ) {
				propTween.end = propTween.start;
				propTween.start = 0;
			}
		}
	}
}

function propFilter( props, specialEasing ) {
	var index, name, easing, value, hooks;

	// camelCase, specialEasing and expand cssHook pass
	for ( index in props ) {
		name = camelCase( index );
		easing = specialEasing[ name ];
		value = props[ index ];
		if ( Array.isArray( value ) ) {
			easing = value[ 1 ];
			value = props[ index ] = value[ 0 ];
		}

		if ( index !== name ) {
			props[ name ] = value;
			delete props[ index ];
		}

		hooks = jQuery.cssHooks[ name ];
		if ( hooks && "expand" in hooks ) {
			value = hooks.expand( value );
			delete props[ name ];

			// Not quite $.extend, this won't overwrite existing keys.
			// Reusing 'index' because we have the correct "name"
			for ( index in value ) {
				if ( !( index in props ) ) {
					props[ index ] = value[ index ];
					specialEasing[ index ] = easing;
				}
			}
		} else {
			specialEasing[ name ] = easing;
		}
	}
}

function Animation( elem, properties, options ) {
	var result,
		stopped,
		index = 0,
		length = Animation.prefilters.length,
		deferred = jQuery.Deferred().always( function() {

			// Don't match elem in the :animated selector
			delete tick.elem;
		} ),
		tick = function() {
			if ( stopped ) {
				return false;
			}
			var currentTime = fxNow || createFxNow(),
				remaining = Math.max( 0, animation.startTime + animation.duration - currentTime ),

				// Support: Android 2.3 only
				// Archaic crash bug won't allow us to use `1 - ( 0.5 || 0 )` (#12497)
				temp = remaining / animation.duration || 0,
				percent = 1 - temp,
				index = 0,
				length = animation.tweens.length;

			for ( ; index < length; index++ ) {
				animation.tweens[ index ].run( percent );
			}

			deferred.notifyWith( elem, [ animation, percent, remaining ] );

			// If there's more to do, yield
			if ( percent < 1 && length ) {
				return remaining;
			}

			// If this was an empty animation, synthesize a final progress notification
			if ( !length ) {
				deferred.notifyWith( elem, [ animation, 1, 0 ] );
			}

			// Resolve the animation and report its conclusion
			deferred.resolveWith( elem, [ animation ] );
			return false;
		},
		animation = deferred.promise( {
			elem: elem,
			props: jQuery.extend( {}, properties ),
			opts: jQuery.extend( true, {
				specialEasing: {},
				easing: jQuery.easing._default
			}, options ),
			originalProperties: properties,
			originalOptions: options,
			startTime: fxNow || createFxNow(),
			duration: options.duration,
			tweens: [],
			createTween: function( prop, end ) {
				var tween = jQuery.Tween( elem, animation.opts, prop, end,
						animation.opts.specialEasing[ prop ] || animation.opts.easing );
				animation.tweens.push( tween );
				return tween;
			},
			stop: function( gotoEnd ) {
				var index = 0,

					// If we are going to the end, we want to run all the tweens
					// otherwise we skip this part
					length = gotoEnd ? animation.tweens.length : 0;
				if ( stopped ) {
					return this;
				}
				stopped = true;
				for ( ; index < length; index++ ) {
					animation.tweens[ index ].run( 1 );
				}

				// Resolve when we played the last frame; otherwise, reject
				if ( gotoEnd ) {
					deferred.notifyWith( elem, [ animation, 1, 0 ] );
					deferred.resolveWith( elem, [ animation, gotoEnd ] );
				} else {
					deferred.rejectWith( elem, [ animation, gotoEnd ] );
				}
				return this;
			}
		} ),
		props = animation.props;

	propFilter( props, animation.opts.specialEasing );

	for ( ; index < length; index++ ) {
		result = Animation.prefilters[ index ].call( animation, elem, props, animation.opts );
		if ( result ) {
			if ( isFunction( result.stop ) ) {
				jQuery._queueHooks( animation.elem, animation.opts.queue ).stop =
					result.stop.bind( result );
			}
			return result;
		}
	}

	jQuery.map( props, createTween, animation );

	if ( isFunction( animation.opts.start ) ) {
		animation.opts.start.call( elem, animation );
	}

	// Attach callbacks from options
	animation
		.progress( animation.opts.progress )
		.done( animation.opts.done, animation.opts.complete )
		.fail( animation.opts.fail )
		.always( animation.opts.always );

	jQuery.fx.timer(
		jQuery.extend( tick, {
			elem: elem,
			anim: animation,
			queue: animation.opts.queue
		} )
	);

	return animation;
}

jQuery.Animation = jQuery.extend( Animation, {

	tweeners: {
		"*": [ function( prop, value ) {
			var tween = this.createTween( prop, value );
			adjustCSS( tween.elem, prop, rcssNum.exec( value ), tween );
			return tween;
		} ]
	},

	tweener: function( props, callback ) {
		if ( isFunction( props ) ) {
			callback = props;
			props = [ "*" ];
		} else {
			props = props.match( rnothtmlwhite );
		}

		var prop,
			index = 0,
			length = props.length;

		for ( ; index < length; index++ ) {
			prop = props[ index ];
			Animation.tweeners[ prop ] = Animation.tweeners[ prop ] || [];
			Animation.tweeners[ prop ].unshift( callback );
		}
	},

	prefilters: [ defaultPrefilter ],

	prefilter: function( callback, prepend ) {
		if ( prepend ) {
			Animation.prefilters.unshift( callback );
		} else {
			Animation.prefilters.push( callback );
		}
	}
} );

jQuery.speed = function( speed, easing, fn ) {
	var opt = speed && typeof speed === "object" ? jQuery.extend( {}, speed ) : {
		complete: fn || !fn && easing ||
			isFunction( speed ) && speed,
		duration: speed,
		easing: fn && easing || easing && !isFunction( easing ) && easing
	};

	// Go to the end state if fx are off
	if ( jQuery.fx.off ) {
		opt.duration = 0;

	} else {
		if ( typeof opt.duration !== "number" ) {
			if ( opt.duration in jQuery.fx.speeds ) {
				opt.duration = jQuery.fx.speeds[ opt.duration ];

			} else {
				opt.duration = jQuery.fx.speeds._default;
			}
		}
	}

	// Normalize opt.queue - true/undefined/null -> "fx"
	if ( opt.queue == null || opt.queue === true ) {
		opt.queue = "fx";
	}

	// Queueing
	opt.old = opt.complete;

	opt.complete = function() {
		if ( isFunction( opt.old ) ) {
			opt.old.call( this );
		}

		if ( opt.queue ) {
			jQuery.dequeue( this, opt.queue );
		}
	};

	return opt;
};

jQuery.fn.extend( {
	fadeTo: function( speed, to, easing, callback ) {

		// Show any hidden elements after setting opacity to 0
		return this.filter( isHiddenWithinTree ).css( "opacity", 0 ).show()

			// Animate to the value specified
			.end().animate( { opacity: to }, speed, easing, callback );
	},
	animate: function( prop, speed, easing, callback ) {
		var empty = jQuery.isEmptyObject( prop ),
			optall = jQuery.speed( speed, easing, callback ),
			doAnimation = function() {

				// Operate on a copy of prop so per-property easing won't be lost
				var anim = Animation( this, jQuery.extend( {}, prop ), optall );

				// Empty animations, or finishing resolves immediately
				if ( empty || dataPriv.get( this, "finish" ) ) {
					anim.stop( true );
				}
			};
			doAnimation.finish = doAnimation;

		return empty || optall.queue === false ?
			this.each( doAnimation ) :
			this.queue( optall.queue, doAnimation );
	},
	stop: function( type, clearQueue, gotoEnd ) {
		var stopQueue = function( hooks ) {
			var stop = hooks.stop;
			delete hooks.stop;
			stop( gotoEnd );
		};

		if ( typeof type !== "string" ) {
			gotoEnd = clearQueue;
			clearQueue = type;
			type = undefined;
		}
		if ( clearQueue && type !== false ) {
			this.queue( type || "fx", [] );
		}

		return this.each( function() {
			var dequeue = true,
				index = type != null && type + "queueHooks",
				timers = jQuery.timers,
				data = dataPriv.get( this );

			if ( index ) {
				if ( data[ index ] && data[ index ].stop ) {
					stopQueue( data[ index ] );
				}
			} else {
				for ( index in data ) {
					if ( data[ index ] && data[ index ].stop && rrun.test( index ) ) {
						stopQueue( data[ index ] );
					}
				}
			}

			for ( index = timers.length; index--; ) {
				if ( timers[ index ].elem === this &&
					( type == null || timers[ index ].queue === type ) ) {

					timers[ index ].anim.stop( gotoEnd );
					dequeue = false;
					timers.splice( index, 1 );
				}
			}

			// Start the next in the queue if the last step wasn't forced.
			// Timers currently will call their complete callbacks, which
			// will dequeue but only if they were gotoEnd.
			if ( dequeue || !gotoEnd ) {
				jQuery.dequeue( this, type );
			}
		} );
	},
	finish: function( type ) {
		if ( type !== false ) {
			type = type || "fx";
		}
		return this.each( function() {
			var index,
				data = dataPriv.get( this ),
				queue = data[ type + "queue" ],
				hooks = data[ type + "queueHooks" ],
				timers = jQuery.timers,
				length = queue ? queue.length : 0;

			// Enable finishing flag on private data
			data.finish = true;

			// Empty the queue first
			jQuery.queue( this, type, [] );

			if ( hooks && hooks.stop ) {
				hooks.stop.call( this, true );
			}

			// Look for any active animations, and finish them
			for ( index = timers.length; index--; ) {
				if ( timers[ index ].elem === this && timers[ index ].queue === type ) {
					timers[ index ].anim.stop( true );
					timers.splice( index, 1 );
				}
			}

			// Look for any animations in the old queue and finish them
			for ( index = 0; index < length; index++ ) {
				if ( queue[ index ] && queue[ index ].finish ) {
					queue[ index ].finish.call( this );
				}
			}

			// Turn off finishing flag
			delete data.finish;
		} );
	}
} );

jQuery.each( [ "toggle", "show", "hide" ], function( i, name ) {
	var cssFn = jQuery.fn[ name ];
	jQuery.fn[ name ] = function( speed, easing, callback ) {
		return speed == null || typeof speed === "boolean" ?
			cssFn.apply( this, arguments ) :
			this.animate( genFx( name, true ), speed, easing, callback );
	};
} );

// Generate shortcuts for custom animations
jQuery.each( {
	slideDown: genFx( "show" ),
	slideUp: genFx( "hide" ),
	slideToggle: genFx( "toggle" ),
	fadeIn: { opacity: "show" },
	fadeOut: { opacity: "hide" },
	fadeToggle: { opacity: "toggle" }
}, function( name, props ) {
	jQuery.fn[ name ] = function( speed, easing, callback ) {
		return this.animate( props, speed, easing, callback );
	};
} );

jQuery.timers = [];
jQuery.fx.tick = function() {
	var timer,
		i = 0,
		timers = jQuery.timers;

	fxNow = Date.now();

	for ( ; i < timers.length; i++ ) {
		timer = timers[ i ];

		// Run the timer and safely remove it when done (allowing for external removal)
		if ( !timer() && timers[ i ] === timer ) {
			timers.splice( i--, 1 );
		}
	}

	if ( !timers.length ) {
		jQuery.fx.stop();
	}
	fxNow = undefined;
};

jQuery.fx.timer = function( timer ) {
	jQuery.timers.push( timer );
	jQuery.fx.start();
};

jQuery.fx.interval = 13;
jQuery.fx.start = function() {
	if ( inProgress ) {
		return;
	}

	inProgress = true;
	schedule();
};

jQuery.fx.stop = function() {
	inProgress = null;
};

jQuery.fx.speeds = {
	slow: 600,
	fast: 200,

	// Default speed
	_default: 400
};


// Based off of the plugin by Clint Helfers, with permission.
// https://web.archive.org/web/20100324014747/http://blindsignals.com/index.php/2009/07/jquery-delay/
jQuery.fn.delay = function( time, type ) {
	time = jQuery.fx ? jQuery.fx.speeds[ time ] || time : time;
	type = type || "fx";

	return this.queue( type, function( next, hooks ) {
		var timeout = window.setTimeout( next, time );
		hooks.stop = function() {
			window.clearTimeout( timeout );
		};
	} );
};


( function() {
	var input = document.createElement( "input" ),
		select = document.createElement( "select" ),
		opt = select.appendChild( document.createElement( "option" ) );

	input.type = "checkbox";

	// Support: Android <=4.3 only
	// Default value for a checkbox should be "on"
	support.checkOn = input.value !== "";

	// Support: IE <=11 only
	// Must access selectedIndex to make default options select
	support.optSelected = opt.selected;

	// Support: IE <=11 only
	// An input loses its value after becoming a radio
	input = document.createElement( "input" );
	input.value = "t";
	input.type = "radio";
	support.radioValue = input.value === "t";
} )();


var boolHook,
	attrHandle = jQuery.expr.attrHandle;

jQuery.fn.extend( {
	attr: function( name, value ) {
		return access( this, jQuery.attr, name, value, arguments.length > 1 );
	},

	removeAttr: function( name ) {
		return this.each( function() {
			jQuery.removeAttr( this, name );
		} );
	}
} );

jQuery.extend( {
	attr: function( elem, name, value ) {
		var ret, hooks,
			nType = elem.nodeType;

		// Don't get/set attributes on text, comment and attribute nodes
		if ( nType === 3 || nType === 8 || nType === 2 ) {
			return;
		}

		// Fallback to prop when attributes are not supported
		if ( typeof elem.getAttribute === "undefined" ) {
			return jQuery.prop( elem, name, value );
		}

		// Attribute hooks are determined by the lowercase version
		// Grab necessary hook if one is defined
		if ( nType !== 1 || !jQuery.isXMLDoc( elem ) ) {
			hooks = jQuery.attrHooks[ name.toLowerCase() ] ||
				( jQuery.expr.match.bool.test( name ) ? boolHook : undefined );
		}

		if ( value !== undefined ) {
			if ( value === null ) {
				jQuery.removeAttr( elem, name );
				return;
			}

			if ( hooks && "set" in hooks &&
				( ret = hooks.set( elem, value, name ) ) !== undefined ) {
				return ret;
			}

			elem.setAttribute( name, value + "" );
			return value;
		}

		if ( hooks && "get" in hooks && ( ret = hooks.get( elem, name ) ) !== null ) {
			return ret;
		}

		ret = jQuery.find.attr( elem, name );

		// Non-existent attributes return null, we normalize to undefined
		return ret == null ? undefined : ret;
	},

	attrHooks: {
		type: {
			set: function( elem, value ) {
				if ( !support.radioValue && value === "radio" &&
					nodeName( elem, "input" ) ) {
					var val = elem.value;
					elem.setAttribute( "type", value );
					if ( val ) {
						elem.value = val;
					}
					return value;
				}
			}
		}
	},

	removeAttr: function( elem, value ) {
		var name,
			i = 0,

			// Attribute names can contain non-HTML whitespace characters
			// https://html.spec.whatwg.org/multipage/syntax.html#attributes-2
			attrNames = value && value.match( rnothtmlwhite );

		if ( attrNames && elem.nodeType === 1 ) {
			while ( ( name = attrNames[ i++ ] ) ) {
				elem.removeAttribute( name );
			}
		}
	}
} );

// Hooks for boolean attributes
boolHook = {
	set: function( elem, value, name ) {
		if ( value === false ) {

			// Remove boolean attributes when set to false
			jQuery.removeAttr( elem, name );
		} else {
			elem.setAttribute( name, name );
		}
		return name;
	}
};

jQuery.each( jQuery.expr.match.bool.source.match( /\w+/g ), function( i, name ) {
	var getter = attrHandle[ name ] || jQuery.find.attr;

	attrHandle[ name ] = function( elem, name, isXML ) {
		var ret, handle,
			lowercaseName = name.toLowerCase();

		if ( !isXML ) {

			// Avoid an infinite loop by temporarily removing this function from the getter
			handle = attrHandle[ lowercaseName ];
			attrHandle[ lowercaseName ] = ret;
			ret = getter( elem, name, isXML ) != null ?
				lowercaseName :
				null;
			attrHandle[ lowercaseName ] = handle;
		}
		return ret;
	};
} );




var rfocusable = /^(?:input|select|textarea|button)$/i,
	rclickable = /^(?:a|area)$/i;

jQuery.fn.extend( {
	prop: function( name, value ) {
		return access( this, jQuery.prop, name, value, arguments.length > 1 );
	},

	removeProp: function( name ) {
		return this.each( function() {
			delete this[ jQuery.propFix[ name ] || name ];
		} );
	}
} );

jQuery.extend( {
	prop: function( elem, name, value ) {
		var ret, hooks,
			nType = elem.nodeType;

		// Don't get/set properties on text, comment and attribute nodes
		if ( nType === 3 || nType === 8 || nType === 2 ) {
			return;
		}

		if ( nType !== 1 || !jQuery.isXMLDoc( elem ) ) {

			// Fix name and attach hooks
			name = jQuery.propFix[ name ] || name;
			hooks = jQuery.propHooks[ name ];
		}

		if ( value !== undefined ) {
			if ( hooks && "set" in hooks &&
				( ret = hooks.set( elem, value, name ) ) !== undefined ) {
				return ret;
			}

			return ( elem[ name ] = value );
		}

		if ( hooks && "get" in hooks && ( ret = hooks.get( elem, name ) ) !== null ) {
			return ret;
		}

		return elem[ name ];
	},

	propHooks: {
		tabIndex: {
			get: function( elem ) {

				// Support: IE <=9 - 11 only
				// elem.tabIndex doesn't always return the
				// correct value when it hasn't been explicitly set
				// https://web.archive.org/web/20141116233347/http://fluidproject.org/blog/2008/01/09/getting-setting-and-removing-tabindex-values-with-javascript/
				// Use proper attribute retrieval(#12072)
				var tabindex = jQuery.find.attr( elem, "tabindex" );

				if ( tabindex ) {
					return parseInt( tabindex, 10 );
				}

				if (
					rfocusable.test( elem.nodeName ) ||
					rclickable.test( elem.nodeName ) &&
					elem.href
				) {
					return 0;
				}

				return -1;
			}
		}
	},

	propFix: {
		"for": "htmlFor",
		"class": "className"
	}
} );

// Support: IE <=11 only
// Accessing the selectedIndex property
// forces the browser to respect setting selected
// on the option
// The getter ensures a default option is selected
// when in an optgroup
// eslint rule "no-unused-expressions" is disabled for this code
// since it considers such accessions noop
if ( !support.optSelected ) {
	jQuery.propHooks.selected = {
		get: function( elem ) {

			/* eslint no-unused-expressions: "off" */

			var parent = elem.parentNode;
			if ( parent && parent.parentNode ) {
				parent.parentNode.selectedIndex;
			}
			return null;
		},
		set: function( elem ) {

			/* eslint no-unused-expressions: "off" */

			var parent = elem.parentNode;
			if ( parent ) {
				parent.selectedIndex;

				if ( parent.parentNode ) {
					parent.parentNode.selectedIndex;
				}
			}
		}
	};
}

jQuery.each( [
	"tabIndex",
	"readOnly",
	"maxLength",
	"cellSpacing",
	"cellPadding",
	"rowSpan",
	"colSpan",
	"useMap",
	"frameBorder",
	"contentEditable"
], function() {
	jQuery.propFix[ this.toLowerCase() ] = this;
} );




	// Strip and collapse whitespace according to HTML spec
	// https://infra.spec.whatwg.org/#strip-and-collapse-ascii-whitespace
	function stripAndCollapse( value ) {
		var tokens = value.match( rnothtmlwhite ) || [];
		return tokens.join( " " );
	}


function getClass( elem ) {
	return elem.getAttribute && elem.getAttribute( "class" ) || "";
}

function classesToArray( value ) {
	if ( Array.isArray( value ) ) {
		return value;
	}
	if ( typeof value === "string" ) {
		return value.match( rnothtmlwhite ) || [];
	}
	return [];
}

jQuery.fn.extend( {
	addClass: function( value ) {
		var classes, elem, cur, curValue, clazz, j, finalValue,
			i = 0;

		if ( isFunction( value ) ) {
			return this.each( function( j ) {
				jQuery( this ).addClass( value.call( this, j, getClass( this ) ) );
			} );
		}

		classes = classesToArray( value );

		if ( classes.length ) {
			while ( ( elem = this[ i++ ] ) ) {
				curValue = getClass( elem );
				cur = elem.nodeType === 1 && ( " " + stripAndCollapse( curValue ) + " " );

				if ( cur ) {
					j = 0;
					while ( ( clazz = classes[ j++ ] ) ) {
						if ( cur.indexOf( " " + clazz + " " ) < 0 ) {
							cur += clazz + " ";
						}
					}

					// Only assign if different to avoid unneeded rendering.
					finalValue = stripAndCollapse( cur );
					if ( curValue !== finalValue ) {
						elem.setAttribute( "class", finalValue );
					}
				}
			}
		}

		return this;
	},

	removeClass: function( value ) {
		var classes, elem, cur, curValue, clazz, j, finalValue,
			i = 0;

		if ( isFunction( value ) ) {
			return this.each( function( j ) {
				jQuery( this ).removeClass( value.call( this, j, getClass( this ) ) );
			} );
		}

		if ( !arguments.length ) {
			return this.attr( "class", "" );
		}

		classes = classesToArray( value );

		if ( classes.length ) {
			while ( ( elem = this[ i++ ] ) ) {
				curValue = getClass( elem );

				// This expression is here for better compressibility (see addClass)
				cur = elem.nodeType === 1 && ( " " + stripAndCollapse( curValue ) + " " );

				if ( cur ) {
					j = 0;
					while ( ( clazz = classes[ j++ ] ) ) {

						// Remove *all* instances
						while ( cur.indexOf( " " + clazz + " " ) > -1 ) {
							cur = cur.replace( " " + clazz + " ", " " );
						}
					}

					// Only assign if different to avoid unneeded rendering.
					finalValue = stripAndCollapse( cur );
					if ( curValue !== finalValue ) {
						elem.setAttribute( "class", finalValue );
					}
				}
			}
		}

		return this;
	},

	toggleClass: function( value, stateVal ) {
		var type = typeof value,
			isValidValue = type === "string" || Array.isArray( value );

		if ( typeof stateVal === "boolean" && isValidValue ) {
			return stateVal ? this.addClass( value ) : this.removeClass( value );
		}

		if ( isFunction( value ) ) {
			return this.each( function( i ) {
				jQuery( this ).toggleClass(
					value.call( this, i, getClass( this ), stateVal ),
					stateVal
				);
			} );
		}

		return this.each( function() {
			var className, i, self, classNames;

			if ( isValidValue ) {

				// Toggle individual class names
				i = 0;
				self = jQuery( this );
				classNames = classesToArray( value );

				while ( ( className = classNames[ i++ ] ) ) {

					// Check each className given, space separated list
					if ( self.hasClass( className ) ) {
						self.removeClass( className );
					} else {
						self.addClass( className );
					}
				}

			// Toggle whole class name
			} else if ( value === undefined || type === "boolean" ) {
				className = getClass( this );
				if ( className ) {

					// Store className if set
					dataPriv.set( this, "__className__", className );
				}

				// If the element has a class name or if we're passed `false`,
				// then remove the whole classname (if there was one, the above saved it).
				// Otherwise bring back whatever was previously saved (if anything),
				// falling back to the empty string if nothing was stored.
				if ( this.setAttribute ) {
					this.setAttribute( "class",
						className || value === false ?
						"" :
						dataPriv.get( this, "__className__" ) || ""
					);
				}
			}
		} );
	},

	hasClass: function( selector ) {
		var className, elem,
			i = 0;

		className = " " + selector + " ";
		while ( ( elem = this[ i++ ] ) ) {
			if ( elem.nodeType === 1 &&
				( " " + stripAndCollapse( getClass( elem ) ) + " " ).indexOf( className ) > -1 ) {
					return true;
			}
		}

		return false;
	}
} );




var rreturn = /\r/g;

jQuery.fn.extend( {
	val: function( value ) {
		var hooks, ret, valueIsFunction,
			elem = this[ 0 ];

		if ( !arguments.length ) {
			if ( elem ) {
				hooks = jQuery.valHooks[ elem.type ] ||
					jQuery.valHooks[ elem.nodeName.toLowerCase() ];

				if ( hooks &&
					"get" in hooks &&
					( ret = hooks.get( elem, "value" ) ) !== undefined
				) {
					return ret;
				}

				ret = elem.value;

				// Handle most common string cases
				if ( typeof ret === "string" ) {
					return ret.replace( rreturn, "" );
				}

				// Handle cases where value is null/undef or number
				return ret == null ? "" : ret;
			}

			return;
		}

		valueIsFunction = isFunction( value );

		return this.each( function( i ) {
			var val;

			if ( this.nodeType !== 1 ) {
				return;
			}

			if ( valueIsFunction ) {
				val = value.call( this, i, jQuery( this ).val() );
			} else {
				val = value;
			}

			// Treat null/undefined as ""; convert numbers to string
			if ( val == null ) {
				val = "";

			} else if ( typeof val === "number" ) {
				val += "";

			} else if ( Array.isArray( val ) ) {
				val = jQuery.map( val, function( value ) {
					return value == null ? "" : value + "";
				} );
			}

			hooks = jQuery.valHooks[ this.type ] || jQuery.valHooks[ this.nodeName.toLowerCase() ];

			// If set returns undefined, fall back to normal setting
			if ( !hooks || !( "set" in hooks ) || hooks.set( this, val, "value" ) === undefined ) {
				this.value = val;
			}
		} );
	}
} );

jQuery.extend( {
	valHooks: {
		option: {
			get: function( elem ) {

				var val = jQuery.find.attr( elem, "value" );
				return val != null ?
					val :

					// Support: IE <=10 - 11 only
					// option.text throws exceptions (#14686, #14858)
					// Strip and collapse whitespace
					// https://html.spec.whatwg.org/#strip-and-collapse-whitespace
					stripAndCollapse( jQuery.text( elem ) );
			}
		},
		select: {
			get: function( elem ) {
				var value, option, i,
					options = elem.options,
					index = elem.selectedIndex,
					one = elem.type === "select-one",
					values = one ? null : [],
					max = one ? index + 1 : options.length;

				if ( index < 0 ) {
					i = max;

				} else {
					i = one ? index : 0;
				}

				// Loop through all the selected options
				for ( ; i < max; i++ ) {
					option = options[ i ];

					// Support: IE <=9 only
					// IE8-9 doesn't update selected after form reset (#2551)
					if ( ( option.selected || i === index ) &&

							// Don't return options that are disabled or in a disabled optgroup
							!option.disabled &&
							( !option.parentNode.disabled ||
								!nodeName( option.parentNode, "optgroup" ) ) ) {

						// Get the specific value for the option
						value = jQuery( option ).val();

						// We don't need an array for one selects
						if ( one ) {
							return value;
						}

						// Multi-Selects return an array
						values.push( value );
					}
				}

				return values;
			},

			set: function( elem, value ) {
				var optionSet, option,
					options = elem.options,
					values = jQuery.makeArray( value ),
					i = options.length;

				while ( i-- ) {
					option = options[ i ];

					/* eslint-disable no-cond-assign */

					if ( option.selected =
						jQuery.inArray( jQuery.valHooks.option.get( option ), values ) > -1
					) {
						optionSet = true;
					}

					/* eslint-enable no-cond-assign */
				}

				// Force browsers to behave consistently when non-matching value is set
				if ( !optionSet ) {
					elem.selectedIndex = -1;
				}
				return values;
			}
		}
	}
} );

// Radios and checkboxes getter/setter
jQuery.each( [ "radio", "checkbox" ], function() {
	jQuery.valHooks[ this ] = {
		set: function( elem, value ) {
			if ( Array.isArray( value ) ) {
				return ( elem.checked = jQuery.inArray( jQuery( elem ).val(), value ) > -1 );
			}
		}
	};
	if ( !support.checkOn ) {
		jQuery.valHooks[ this ].get = function( elem ) {
			return elem.getAttribute( "value" ) === null ? "on" : elem.value;
		};
	}
} );




// Return jQuery for attributes-only inclusion


support.focusin = "onfocusin" in window;


var rfocusMorph = /^(?:focusinfocus|focusoutblur)$/,
	stopPropagationCallback = function( e ) {
		e.stopPropagation();
	};

jQuery.extend( jQuery.event, {

	trigger: function( event, data, elem, onlyHandlers ) {

		var i, cur, tmp, bubbleType, ontype, handle, special, lastElement,
			eventPath = [ elem || document ],
			type = hasOwn.call( event, "type" ) ? event.type : event,
			namespaces = hasOwn.call( event, "namespace" ) ? event.namespace.split( "." ) : [];

		cur = lastElement = tmp = elem = elem || document;

		// Don't do events on text and comment nodes
		if ( elem.nodeType === 3 || elem.nodeType === 8 ) {
			return;
		}

		// focus/blur morphs to focusin/out; ensure we're not firing them right now
		if ( rfocusMorph.test( type + jQuery.event.triggered ) ) {
			return;
		}

		if ( type.indexOf( "." ) > -1 ) {

			// Namespaced trigger; create a regexp to match event type in handle()
			namespaces = type.split( "." );
			type = namespaces.shift();
			namespaces.sort();
		}
		ontype = type.indexOf( ":" ) < 0 && "on" + type;

		// Caller can pass in a jQuery.Event object, Object, or just an event type string
		event = event[ jQuery.expando ] ?
			event :
			new jQuery.Event( type, typeof event === "object" && event );

		// Trigger bitmask: & 1 for native handlers; & 2 for jQuery (always true)
		event.isTrigger = onlyHandlers ? 2 : 3;
		event.namespace = namespaces.join( "." );
		event.rnamespace = event.namespace ?
			new RegExp( "(^|\\.)" + namespaces.join( "\\.(?:.*\\.|)" ) + "(\\.|$)" ) :
			null;

		// Clean up the event in case it is being reused
		event.result = undefined;
		if ( !event.target ) {
			event.target = elem;
		}

		// Clone any incoming data and prepend the event, creating the handler arg list
		data = data == null ?
			[ event ] :
			jQuery.makeArray( data, [ event ] );

		// Allow special events to draw outside the lines
		special = jQuery.event.special[ type ] || {};
		if ( !onlyHandlers && special.trigger && special.trigger.apply( elem, data ) === false ) {
			return;
		}

		// Determine event propagation path in advance, per W3C events spec (#9951)
		// Bubble up to document, then to window; watch for a global ownerDocument var (#9724)
		if ( !onlyHandlers && !special.noBubble && !isWindow( elem ) ) {

			bubbleType = special.delegateType || type;
			if ( !rfocusMorph.test( bubbleType + type ) ) {
				cur = cur.parentNode;
			}
			for ( ; cur; cur = cur.parentNode ) {
				eventPath.push( cur );
				tmp = cur;
			}

			// Only add window if we got to document (e.g., not plain obj or detached DOM)
			if ( tmp === ( elem.ownerDocument || document ) ) {
				eventPath.push( tmp.defaultView || tmp.parentWindow || window );
			}
		}

		// Fire handlers on the event path
		i = 0;
		while ( ( cur = eventPath[ i++ ] ) && !event.isPropagationStopped() ) {
			lastElement = cur;
			event.type = i > 1 ?
				bubbleType :
				special.bindType || type;

			// jQuery handler
			handle = ( dataPriv.get( cur, "events" ) || {} )[ event.type ] &&
				dataPriv.get( cur, "handle" );
			if ( handle ) {
				handle.apply( cur, data );
			}

			// Native handler
			handle = ontype && cur[ ontype ];
			if ( handle && handle.apply && acceptData( cur ) ) {
				event.result = handle.apply( cur, data );
				if ( event.result === false ) {
					event.preventDefault();
				}
			}
		}
		event.type = type;

		// If nobody prevented the default action, do it now
		if ( !onlyHandlers && !event.isDefaultPrevented() ) {

			if ( ( !special._default ||
				special._default.apply( eventPath.pop(), data ) === false ) &&
				acceptData( elem ) ) {

				// Call a native DOM method on the target with the same name as the event.
				// Don't do default actions on window, that's where global variables be (#6170)
				if ( ontype && isFunction( elem[ type ] ) && !isWindow( elem ) ) {

					// Don't re-trigger an onFOO event when we call its FOO() method
					tmp = elem[ ontype ];

					if ( tmp ) {
						elem[ ontype ] = null;
					}

					// Prevent re-triggering of the same event, since we already bubbled it above
					jQuery.event.triggered = type;

					if ( event.isPropagationStopped() ) {
						lastElement.addEventListener( type, stopPropagationCallback );
					}

					elem[ type ]();

					if ( event.isPropagationStopped() ) {
						lastElement.removeEventListener( type, stopPropagationCallback );
					}

					jQuery.event.triggered = undefined;

					if ( tmp ) {
						elem[ ontype ] = tmp;
					}
				}
			}
		}

		return event.result;
	},

	// Piggyback on a donor event to simulate a different one
	// Used only for `focus(in | out)` events
	simulate: function( type, elem, event ) {
		var e = jQuery.extend(
			new jQuery.Event(),
			event,
			{
				type: type,
				isSimulated: true
			}
		);

		jQuery.event.trigger( e, null, elem );
	}

} );

jQuery.fn.extend( {

	trigger: function( type, data ) {
		return this.each( function() {
			jQuery.event.trigger( type, data, this );
		} );
	},
	triggerHandler: function( type, data ) {
		var elem = this[ 0 ];
		if ( elem ) {
			return jQuery.event.trigger( type, data, elem, true );
		}
	}
} );


// Support: Firefox <=44
// Firefox doesn't have focus(in | out) events
// Related ticket - https://bugzilla.mozilla.org/show_bug.cgi?id=687787
//
// Support: Chrome <=48 - 49, Safari <=9.0 - 9.1
// focus(in | out) events fire after focus & blur events,
// which is spec violation - http://www.w3.org/TR/DOM-Level-3-Events/#events-focusevent-event-order
// Related ticket - https://bugs.chromium.org/p/chromium/issues/detail?id=449857
if ( !support.focusin ) {
	jQuery.each( { focus: "focusin", blur: "focusout" }, function( orig, fix ) {

		// Attach a single capturing handler on the document while someone wants focusin/focusout
		var handler = function( event ) {
			jQuery.event.simulate( fix, event.target, jQuery.event.fix( event ) );
		};

		jQuery.event.special[ fix ] = {
			setup: function() {
				var doc = this.ownerDocument || this,
					attaches = dataPriv.access( doc, fix );

				if ( !attaches ) {
					doc.addEventListener( orig, handler, true );
				}
				dataPriv.access( doc, fix, ( attaches || 0 ) + 1 );
			},
			teardown: function() {
				var doc = this.ownerDocument || this,
					attaches = dataPriv.access( doc, fix ) - 1;

				if ( !attaches ) {
					doc.removeEventListener( orig, handler, true );
					dataPriv.remove( doc, fix );

				} else {
					dataPriv.access( doc, fix, attaches );
				}
			}
		};
	} );
}
var location = window.location;

var nonce = Date.now();

var rquery = ( /\?/ );



// Cross-browser xml parsing
jQuery.parseXML = function( data ) {
	var xml;
	if ( !data || typeof data !== "string" ) {
		return null;
	}

	// Support: IE 9 - 11 only
	// IE throws on parseFromString with invalid input.
	try {
		xml = ( new window.DOMParser() ).parseFromString( data, "text/xml" );
	} catch ( e ) {
		xml = undefined;
	}

	if ( !xml || xml.getElementsByTagName( "parsererror" ).length ) {
		jQuery.error( "Invalid XML: " + data );
	}
	return xml;
};


var
	rbracket = /\[\]$/,
	rCRLF = /\r?\n/g,
	rsubmitterTypes = /^(?:submit|button|image|reset|file)$/i,
	rsubmittable = /^(?:input|select|textarea|keygen)/i;

function buildParams( prefix, obj, traditional, add ) {
	var name;

	if ( Array.isArray( obj ) ) {

		// Serialize array item.
		jQuery.each( obj, function( i, v ) {
			if ( traditional || rbracket.test( prefix ) ) {

				// Treat each array item as a scalar.
				add( prefix, v );

			} else {

				// Item is non-scalar (array or object), encode its numeric index.
				buildParams(
					prefix + "[" + ( typeof v === "object" && v != null ? i : "" ) + "]",
					v,
					traditional,
					add
				);
			}
		} );

	} else if ( !traditional && toType( obj ) === "object" ) {

		// Serialize object item.
		for ( name in obj ) {
			buildParams( prefix + "[" + name + "]", obj[ name ], traditional, add );
		}

	} else {

		// Serialize scalar item.
		add( prefix, obj );
	}
}

// Serialize an array of form elements or a set of
// key/values into a query string
jQuery.param = function( a, traditional ) {
	var prefix,
		s = [],
		add = function( key, valueOrFunction ) {

			// If value is a function, invoke it and use its return value
			var value = isFunction( valueOrFunction ) ?
				valueOrFunction() :
				valueOrFunction;

			s[ s.length ] = encodeURIComponent( key ) + "=" +
				encodeURIComponent( value == null ? "" : value );
		};

	// If an array was passed in, assume that it is an array of form elements.
	if ( Array.isArray( a ) || ( a.jquery && !jQuery.isPlainObject( a ) ) ) {

		// Serialize the form elements
		jQuery.each( a, function() {
			add( this.name, this.value );
		} );

	} else {

		// If traditional, encode the "old" way (the way 1.3.2 or older
		// did it), otherwise encode params recursively.
		for ( prefix in a ) {
			buildParams( prefix, a[ prefix ], traditional, add );
		}
	}

	// Return the resulting serialization
	return s.join( "&" );
};

jQuery.fn.extend( {
	serialize: function() {
		return jQuery.param( this.serializeArray() );
	},
	serializeArray: function() {
		return this.map( function() {

			// Can add propHook for "elements" to filter or add form elements
			var elements = jQuery.prop( this, "elements" );
			return elements ? jQuery.makeArray( elements ) : this;
		} )
		.filter( function() {
			var type = this.type;

			// Use .is( ":disabled" ) so that fieldset[disabled] works
			return this.name && !jQuery( this ).is( ":disabled" ) &&
				rsubmittable.test( this.nodeName ) && !rsubmitterTypes.test( type ) &&
				( this.checked || !rcheckableType.test( type ) );
		} )
		.map( function( i, elem ) {
			var val = jQuery( this ).val();

			if ( val == null ) {
				return null;
			}

			if ( Array.isArray( val ) ) {
				return jQuery.map( val, function( val ) {
					return { name: elem.name, value: val.replace( rCRLF, "\r\n" ) };
				} );
			}

			return { name: elem.name, value: val.replace( rCRLF, "\r\n" ) };
		} ).get();
	}
} );


var
	r20 = /%20/g,
	rhash = /#.*$/,
	rantiCache = /([?&])_=[^&]*/,
	rheaders = /^(.*?):[ \t]*([^\r\n]*)$/mg,

	// #7653, #8125, #8152: local protocol detection
	rlocalProtocol = /^(?:about|app|app-storage|.+-extension|file|res|widget):$/,
	rnoContent = /^(?:GET|HEAD)$/,
	rprotocol = /^\/\//,

	/* Prefilters
	 * 1) They are useful to introduce custom dataTypes (see ajax/jsonp.js for an example)
	 * 2) These are called:
	 *    - BEFORE asking for a transport
	 *    - AFTER param serialization (s.data is a string if s.processData is true)
	 * 3) key is the dataType
	 * 4) the catchall symbol "*" can be used
	 * 5) execution will start with transport dataType and THEN continue down to "*" if needed
	 */
	prefilters = {},

	/* Transports bindings
	 * 1) key is the dataType
	 * 2) the catchall symbol "*" can be used
	 * 3) selection will start with transport dataType and THEN go to "*" if needed
	 */
	transports = {},

	// Avoid comment-prolog char sequence (#10098); must appease lint and evade compression
	allTypes = "*/".concat( "*" ),

	// Anchor tag for parsing the document origin
	originAnchor = document.createElement( "a" );
	originAnchor.href = location.href;

// Base "constructor" for jQuery.ajaxPrefilter and jQuery.ajaxTransport
function addToPrefiltersOrTransports( structure ) {

	// dataTypeExpression is optional and defaults to "*"
	return function( dataTypeExpression, func ) {

		if ( typeof dataTypeExpression !== "string" ) {
			func = dataTypeExpression;
			dataTypeExpression = "*";
		}

		var dataType,
			i = 0,
			dataTypes = dataTypeExpression.toLowerCase().match( rnothtmlwhite ) || [];

		if ( isFunction( func ) ) {

			// For each dataType in the dataTypeExpression
			while ( ( dataType = dataTypes[ i++ ] ) ) {

				// Prepend if requested
				if ( dataType[ 0 ] === "+" ) {
					dataType = dataType.slice( 1 ) || "*";
					( structure[ dataType ] = structure[ dataType ] || [] ).unshift( func );

				// Otherwise append
				} else {
					( structure[ dataType ] = structure[ dataType ] || [] ).push( func );
				}
			}
		}
	};
}

// Base inspection function for prefilters and transports
function inspectPrefiltersOrTransports( structure, options, originalOptions, jqXHR ) {

	var inspected = {},
		seekingTransport = ( structure === transports );

	function inspect( dataType ) {
		var selected;
		inspected[ dataType ] = true;
		jQuery.each( structure[ dataType ] || [], function( _, prefilterOrFactory ) {
			var dataTypeOrTransport = prefilterOrFactory( options, originalOptions, jqXHR );
			if ( typeof dataTypeOrTransport === "string" &&
				!seekingTransport && !inspected[ dataTypeOrTransport ] ) {

				options.dataTypes.unshift( dataTypeOrTransport );
				inspect( dataTypeOrTransport );
				return false;
			} else if ( seekingTransport ) {
				return !( selected = dataTypeOrTransport );
			}
		} );
		return selected;
	}

	return inspect( options.dataTypes[ 0 ] ) || !inspected[ "*" ] && inspect( "*" );
}

// A special extend for ajax options
// that takes "flat" options (not to be deep extended)
// Fixes #9887
function ajaxExtend( target, src ) {
	var key, deep,
		flatOptions = jQuery.ajaxSettings.flatOptions || {};

	for ( key in src ) {
		if ( src[ key ] !== undefined ) {
			( flatOptions[ key ] ? target : ( deep || ( deep = {} ) ) )[ key ] = src[ key ];
		}
	}
	if ( deep ) {
		jQuery.extend( true, target, deep );
	}

	return target;
}

/* Handles responses to an ajax request:
 * - finds the right dataType (mediates between content-type and expected dataType)
 * - returns the corresponding response
 */
function ajaxHandleResponses( s, jqXHR, responses ) {

	var ct, type, finalDataType, firstDataType,
		contents = s.contents,
		dataTypes = s.dataTypes;

	// Remove auto dataType and get content-type in the process
	while ( dataTypes[ 0 ] === "*" ) {
		dataTypes.shift();
		if ( ct === undefined ) {
			ct = s.mimeType || jqXHR.getResponseHeader( "Content-Type" );
		}
	}

	// Check if we're dealing with a known content-type
	if ( ct ) {
		for ( type in contents ) {
			if ( contents[ type ] && contents[ type ].test( ct ) ) {
				dataTypes.unshift( type );
				break;
			}
		}
	}

	// Check to see if we have a response for the expected dataType
	if ( dataTypes[ 0 ] in responses ) {
		finalDataType = dataTypes[ 0 ];
	} else {

		// Try convertible dataTypes
		for ( type in responses ) {
			if ( !dataTypes[ 0 ] || s.converters[ type + " " + dataTypes[ 0 ] ] ) {
				finalDataType = type;
				break;
			}
			if ( !firstDataType ) {
				firstDataType = type;
			}
		}

		// Or just use first one
		finalDataType = finalDataType || firstDataType;
	}

	// If we found a dataType
	// We add the dataType to the list if needed
	// and return the corresponding response
	if ( finalDataType ) {
		if ( finalDataType !== dataTypes[ 0 ] ) {
			dataTypes.unshift( finalDataType );
		}
		return responses[ finalDataType ];
	}
}

/* Chain conversions given the request and the original response
 * Also sets the responseXXX fields on the jqXHR instance
 */
function ajaxConvert( s, response, jqXHR, isSuccess ) {
	var conv2, current, conv, tmp, prev,
		converters = {},

		// Work with a copy of dataTypes in case we need to modify it for conversion
		dataTypes = s.dataTypes.slice();

	// Create converters map with lowercased keys
	if ( dataTypes[ 1 ] ) {
		for ( conv in s.converters ) {
			converters[ conv.toLowerCase() ] = s.converters[ conv ];
		}
	}

	current = dataTypes.shift();

	// Convert to each sequential dataType
	while ( current ) {

		if ( s.responseFields[ current ] ) {
			jqXHR[ s.responseFields[ current ] ] = response;
		}

		// Apply the dataFilter if provided
		if ( !prev && isSuccess && s.dataFilter ) {
			response = s.dataFilter( response, s.dataType );
		}

		prev = current;
		current = dataTypes.shift();

		if ( current ) {

			// There's only work to do if current dataType is non-auto
			if ( current === "*" ) {

				current = prev;

			// Convert response if prev dataType is non-auto and differs from current
			} else if ( prev !== "*" && prev !== current ) {

				// Seek a direct converter
				conv = converters[ prev + " " + current ] || converters[ "* " + current ];

				// If none found, seek a pair
				if ( !conv ) {
					for ( conv2 in converters ) {

						// If conv2 outputs current
						tmp = conv2.split( " " );
						if ( tmp[ 1 ] === current ) {

							// If prev can be converted to accepted input
							conv = converters[ prev + " " + tmp[ 0 ] ] ||
								converters[ "* " + tmp[ 0 ] ];
							if ( conv ) {

								// Condense equivalence converters
								if ( conv === true ) {
									conv = converters[ conv2 ];

								// Otherwise, insert the intermediate dataType
								} else if ( converters[ conv2 ] !== true ) {
									current = tmp[ 0 ];
									dataTypes.unshift( tmp[ 1 ] );
								}
								break;
							}
						}
					}
				}

				// Apply converter (if not an equivalence)
				if ( conv !== true ) {

					// Unless errors are allowed to bubble, catch and return them
					if ( conv && s.throws ) {
						response = conv( response );
					} else {
						try {
							response = conv( response );
						} catch ( e ) {
							return {
								state: "parsererror",
								error: conv ? e : "No conversion from " + prev + " to " + current
							};
						}
					}
				}
			}
		}
	}

	return { state: "success", data: response };
}

jQuery.extend( {

	// Counter for holding the number of active queries
	active: 0,

	// Last-Modified header cache for next request
	lastModified: {},
	etag: {},

	ajaxSettings: {
		url: location.href,
		type: "GET",
		isLocal: rlocalProtocol.test( location.protocol ),
		global: true,
		processData: true,
		async: true,
		contentType: "application/x-www-form-urlencoded; charset=UTF-8",

		/*
		timeout: 0,
		data: null,
		dataType: null,
		username: null,
		password: null,
		cache: null,
		throws: false,
		traditional: false,
		headers: {},
		*/

		accepts: {
			"*": allTypes,
			text: "text/plain",
			html: "text/html",
			xml: "application/xml, text/xml",
			json: "application/json, text/javascript"
		},

		contents: {
			xml: /\bxml\b/,
			html: /\bhtml/,
			json: /\bjson\b/
		},

		responseFields: {
			xml: "responseXML",
			text: "responseText",
			json: "responseJSON"
		},

		// Data converters
		// Keys separate source (or catchall "*") and destination types with a single space
		converters: {

			// Convert anything to text
			"* text": String,

			// Text to html (true = no transformation)
			"text html": true,

			// Evaluate text as a json expression
			"text json": JSON.parse,

			// Parse text as xml
			"text xml": jQuery.parseXML
		},

		// For options that shouldn't be deep extended:
		// you can add your own custom options here if
		// and when you create one that shouldn't be
		// deep extended (see ajaxExtend)
		flatOptions: {
			url: true,
			context: true
		}
	},

	// Creates a full fledged settings object into target
	// with both ajaxSettings and settings fields.
	// If target is omitted, writes into ajaxSettings.
	ajaxSetup: function( target, settings ) {
		return settings ?

			// Building a settings object
			ajaxExtend( ajaxExtend( target, jQuery.ajaxSettings ), settings ) :

			// Extending ajaxSettings
			ajaxExtend( jQuery.ajaxSettings, target );
	},

	ajaxPrefilter: addToPrefiltersOrTransports( prefilters ),
	ajaxTransport: addToPrefiltersOrTransports( transports ),

	// Main method
	ajax: function( url, options ) {

		// If url is an object, simulate pre-1.5 signature
		if ( typeof url === "object" ) {
			options = url;
			url = undefined;
		}

		// Force options to be an object
		options = options || {};

		var transport,

			// URL without anti-cache param
			cacheURL,

			// Response headers
			responseHeadersString,
			responseHeaders,

			// timeout handle
			timeoutTimer,

			// Url cleanup var
			urlAnchor,

			// Request state (becomes false upon send and true upon completion)
			completed,

			// To know if global events are to be dispatched
			fireGlobals,

			// Loop variable
			i,

			// uncached part of the url
			uncached,

			// Create the final options object
			s = jQuery.ajaxSetup( {}, options ),

			// Callbacks context
			callbackContext = s.context || s,

			// Context for global events is callbackContext if it is a DOM node or jQuery collection
			globalEventContext = s.context &&
				( callbackContext.nodeType || callbackContext.jquery ) ?
					jQuery( callbackContext ) :
					jQuery.event,

			// Deferreds
			deferred = jQuery.Deferred(),
			completeDeferred = jQuery.Callbacks( "once memory" ),

			// Status-dependent callbacks
			statusCode = s.statusCode || {},

			// Headers (they are sent all at once)
			requestHeaders = {},
			requestHeadersNames = {},

			// Default abort message
			strAbort = "canceled",

			// Fake xhr
			jqXHR = {
				readyState: 0,

				// Builds headers hashtable if needed
				getResponseHeader: function( key ) {
					var match;
					if ( completed ) {
						if ( !responseHeaders ) {
							responseHeaders = {};
							while ( ( match = rheaders.exec( responseHeadersString ) ) ) {
								responseHeaders[ match[ 1 ].toLowerCase() ] = match[ 2 ];
							}
						}
						match = responseHeaders[ key.toLowerCase() ];
					}
					return match == null ? null : match;
				},

				// Raw string
				getAllResponseHeaders: function() {
					return completed ? responseHeadersString : null;
				},

				// Caches the header
				setRequestHeader: function( name, value ) {
					if ( completed == null ) {
						name = requestHeadersNames[ name.toLowerCase() ] =
							requestHeadersNames[ name.toLowerCase() ] || name;
						requestHeaders[ name ] = value;
					}
					return this;
				},

				// Overrides response content-type header
				overrideMimeType: function( type ) {
					if ( completed == null ) {
						s.mimeType = type;
					}
					return this;
				},

				// Status-dependent callbacks
				statusCode: function( map ) {
					var code;
					if ( map ) {
						if ( completed ) {

							// Execute the appropriate callbacks
							jqXHR.always( map[ jqXHR.status ] );
						} else {

							// Lazy-add the new callbacks in a way that preserves old ones
							for ( code in map ) {
								statusCode[ code ] = [ statusCode[ code ], map[ code ] ];
							}
						}
					}
					return this;
				},

				// Cancel the request
				abort: function( statusText ) {
					var finalText = statusText || strAbort;
					if ( transport ) {
						transport.abort( finalText );
					}
					done( 0, finalText );
					return this;
				}
			};

		// Attach deferreds
		deferred.promise( jqXHR );

		// Add protocol if not provided (prefilters might expect it)
		// Handle falsy url in the settings object (#10093: consistency with old signature)
		// We also use the url parameter if available
		s.url = ( ( url || s.url || location.href ) + "" )
			.replace( rprotocol, location.protocol + "//" );

		// Alias method option to type as per ticket #12004
		s.type = options.method || options.type || s.method || s.type;

		// Extract dataTypes list
		s.dataTypes = ( s.dataType || "*" ).toLowerCase().match( rnothtmlwhite ) || [ "" ];

		// A cross-domain request is in order when the origin doesn't match the current origin.
		if ( s.crossDomain == null ) {
			urlAnchor = document.createElement( "a" );

			// Support: IE <=8 - 11, Edge 12 - 15
			// IE throws exception on accessing the href property if url is malformed,
			// e.g. http://example.com:80x/
			try {
				urlAnchor.href = s.url;

				// Support: IE <=8 - 11 only
				// Anchor's host property isn't correctly set when s.url is relative
				urlAnchor.href = urlAnchor.href;
				s.crossDomain = originAnchor.protocol + "//" + originAnchor.host !==
					urlAnchor.protocol + "//" + urlAnchor.host;
			} catch ( e ) {

				// If there is an error parsing the URL, assume it is crossDomain,
				// it can be rejected by the transport if it is invalid
				s.crossDomain = true;
			}
		}

		// Convert data if not already a string
		if ( s.data && s.processData && typeof s.data !== "string" ) {
			s.data = jQuery.param( s.data, s.traditional );
		}

		// Apply prefilters
		inspectPrefiltersOrTransports( prefilters, s, options, jqXHR );

		// If request was aborted inside a prefilter, stop there
		if ( completed ) {
			return jqXHR;
		}

		// We can fire global events as of now if asked to
		// Don't fire events if jQuery.event is undefined in an AMD-usage scenario (#15118)
		fireGlobals = jQuery.event && s.global;

		// Watch for a new set of requests
		if ( fireGlobals && jQuery.active++ === 0 ) {
			jQuery.event.trigger( "ajaxStart" );
		}

		// Uppercase the type
		s.type = s.type.toUpperCase();

		// Determine if request has content
		s.hasContent = !rnoContent.test( s.type );

		// Save the URL in case we're toying with the If-Modified-Since
		// and/or If-None-Match header later on
		// Remove hash to simplify url manipulation
		cacheURL = s.url.replace( rhash, "" );

		// More options handling for requests with no content
		if ( !s.hasContent ) {

			// Remember the hash so we can put it back
			uncached = s.url.slice( cacheURL.length );

			// If data is available and should be processed, append data to url
			if ( s.data && ( s.processData || typeof s.data === "string" ) ) {
				cacheURL += ( rquery.test( cacheURL ) ? "&" : "?" ) + s.data;

				// #9682: remove data so that it's not used in an eventual retry
				delete s.data;
			}

			// Add or update anti-cache param if needed
			if ( s.cache === false ) {
				cacheURL = cacheURL.replace( rantiCache, "$1" );
				uncached = ( rquery.test( cacheURL ) ? "&" : "?" ) + "_=" + ( nonce++ ) + uncached;
			}

			// Put hash and anti-cache on the URL that will be requested (gh-1732)
			s.url = cacheURL + uncached;

		// Change '%20' to '+' if this is encoded form body content (gh-2658)
		} else if ( s.data && s.processData &&
			( s.contentType || "" ).indexOf( "application/x-www-form-urlencoded" ) === 0 ) {
			s.data = s.data.replace( r20, "+" );
		}

		// Set the If-Modified-Since and/or If-None-Match header, if in ifModified mode.
		if ( s.ifModified ) {
			if ( jQuery.lastModified[ cacheURL ] ) {
				jqXHR.setRequestHeader( "If-Modified-Since", jQuery.lastModified[ cacheURL ] );
			}
			if ( jQuery.etag[ cacheURL ] ) {
				jqXHR.setRequestHeader( "If-None-Match", jQuery.etag[ cacheURL ] );
			}
		}

		// Set the correct header, if data is being sent
		if ( s.data && s.hasContent && s.contentType !== false || options.contentType ) {
			jqXHR.setRequestHeader( "Content-Type", s.contentType );
		}

		// Set the Accepts header for the server, depending on the dataType
		jqXHR.setRequestHeader(
			"Accept",
			s.dataTypes[ 0 ] && s.accepts[ s.dataTypes[ 0 ] ] ?
				s.accepts[ s.dataTypes[ 0 ] ] +
					( s.dataTypes[ 0 ] !== "*" ? ", " + allTypes + "; q=0.01" : "" ) :
				s.accepts[ "*" ]
		);

		// Check for headers option
		for ( i in s.headers ) {
			jqXHR.setRequestHeader( i, s.headers[ i ] );
		}

		// Allow custom headers/mimetypes and early abort
		if ( s.beforeSend &&
			( s.beforeSend.call( callbackContext, jqXHR, s ) === false || completed ) ) {

			// Abort if not done already and return
			return jqXHR.abort();
		}

		// Aborting is no longer a cancellation
		strAbort = "abort";

		// Install callbacks on deferreds
		completeDeferred.add( s.complete );
		jqXHR.done( s.success );
		jqXHR.fail( s.error );

		// Get transport
		transport = inspectPrefiltersOrTransports( transports, s, options, jqXHR );

		// If no transport, we auto-abort
		if ( !transport ) {
			done( -1, "No Transport" );
		} else {
			jqXHR.readyState = 1;

			// Send global event
			if ( fireGlobals ) {
				globalEventContext.trigger( "ajaxSend", [ jqXHR, s ] );
			}

			// If request was aborted inside ajaxSend, stop there
			if ( completed ) {
				return jqXHR;
			}

			// Timeout
			if ( s.async && s.timeout > 0 ) {
				timeoutTimer = window.setTimeout( function() {
					jqXHR.abort( "timeout" );
				}, s.timeout );
			}

			try {
				completed = false;
				transport.send( requestHeaders, done );
			} catch ( e ) {

				// Rethrow post-completion exceptions
				if ( completed ) {
					throw e;
				}

				// Propagate others as results
				done( -1, e );
			}
		}

		// Callback for when everything is done
		function done( status, nativeStatusText, responses, headers ) {
			var isSuccess, success, error, response, modified,
				statusText = nativeStatusText;

			// Ignore repeat invocations
			if ( completed ) {
				return;
			}

			completed = true;

			// Clear timeout if it exists
			if ( timeoutTimer ) {
				window.clearTimeout( timeoutTimer );
			}

			// Dereference transport for early garbage collection
			// (no matter how long the jqXHR object will be used)
			transport = undefined;

			// Cache response headers
			responseHeadersString = headers || "";

			// Set readyState
			jqXHR.readyState = status > 0 ? 4 : 0;

			// Determine if successful
			isSuccess = status >= 200 && status < 300 || status === 304;

			// Get response data
			if ( responses ) {
				response = ajaxHandleResponses( s, jqXHR, responses );
			}

			// Convert no matter what (that way responseXXX fields are always set)
			response = ajaxConvert( s, response, jqXHR, isSuccess );

			// If successful, handle type chaining
			if ( isSuccess ) {

				// Set the If-Modified-Since and/or If-None-Match header, if in ifModified mode.
				if ( s.ifModified ) {
					modified = jqXHR.getResponseHeader( "Last-Modified" );
					if ( modified ) {
						jQuery.lastModified[ cacheURL ] = modified;
					}
					modified = jqXHR.getResponseHeader( "etag" );
					if ( modified ) {
						jQuery.etag[ cacheURL ] = modified;
					}
				}

				// if no content
				if ( status === 204 || s.type === "HEAD" ) {
					statusText = "nocontent";

				// if not modified
				} else if ( status === 304 ) {
					statusText = "notmodified";

				// If we have data, let's convert it
				} else {
					statusText = response.state;
					success = response.data;
					error = response.error;
					isSuccess = !error;
				}
			} else {

				// Extract error from statusText and normalize for non-aborts
				error = statusText;
				if ( status || !statusText ) {
					statusText = "error";
					if ( status < 0 ) {
						status = 0;
					}
				}
			}

			// Set data for the fake xhr object
			jqXHR.status = status;
			jqXHR.statusText = ( nativeStatusText || statusText ) + "";

			// Success/Error
			if ( isSuccess ) {
				deferred.resolveWith( callbackContext, [ success, statusText, jqXHR ] );
			} else {
				deferred.rejectWith( callbackContext, [ jqXHR, statusText, error ] );
			}

			// Status-dependent callbacks
			jqXHR.statusCode( statusCode );
			statusCode = undefined;

			if ( fireGlobals ) {
				globalEventContext.trigger( isSuccess ? "ajaxSuccess" : "ajaxError",
					[ jqXHR, s, isSuccess ? success : error ] );
			}

			// Complete
			completeDeferred.fireWith( callbackContext, [ jqXHR, statusText ] );

			if ( fireGlobals ) {
				globalEventContext.trigger( "ajaxComplete", [ jqXHR, s ] );

				// Handle the global AJAX counter
				if ( !( --jQuery.active ) ) {
					jQuery.event.trigger( "ajaxStop" );
				}
			}
		}

		return jqXHR;
	},

	getJSON: function( url, data, callback ) {
		return jQuery.get( url, data, callback, "json" );
	},

	getScript: function( url, callback ) {
		return jQuery.get( url, undefined, callback, "script" );
	}
} );

jQuery.each( [ "get", "post" ], function( i, method ) {
	jQuery[ method ] = function( url, data, callback, type ) {

		// Shift arguments if data argument was omitted
		if ( isFunction( data ) ) {
			type = type || callback;
			callback = data;
			data = undefined;
		}

		// The url can be an options object (which then must have .url)
		return jQuery.ajax( jQuery.extend( {
			url: url,
			type: method,
			dataType: type,
			data: data,
			success: callback
		}, jQuery.isPlainObject( url ) && url ) );
	};
} );


jQuery._evalUrl = function( url ) {
	return jQuery.ajax( {
		url: url,

		// Make this explicit, since user can override this through ajaxSetup (#11264)
		type: "GET",
		dataType: "script",
		cache: true,
		async: false,
		global: false,
		"throws": true
	} );
};


jQuery.fn.extend( {
	wrapAll: function( html ) {
		var wrap;

		if ( this[ 0 ] ) {
			if ( isFunction( html ) ) {
				html = html.call( this[ 0 ] );
			}

			// The elements to wrap the target around
			wrap = jQuery( html, this[ 0 ].ownerDocument ).eq( 0 ).clone( true );

			if ( this[ 0 ].parentNode ) {
				wrap.insertBefore( this[ 0 ] );
			}

			wrap.map( function() {
				var elem = this;

				while ( elem.firstElementChild ) {
					elem = elem.firstElementChild;
				}

				return elem;
			} ).append( this );
		}

		return this;
	},

	wrapInner: function( html ) {
		if ( isFunction( html ) ) {
			return this.each( function( i ) {
				jQuery( this ).wrapInner( html.call( this, i ) );
			} );
		}

		return this.each( function() {
			var self = jQuery( this ),
				contents = self.contents();

			if ( contents.length ) {
				contents.wrapAll( html );

			} else {
				self.append( html );
			}
		} );
	},

	wrap: function( html ) {
		var htmlIsFunction = isFunction( html );

		return this.each( function( i ) {
			jQuery( this ).wrapAll( htmlIsFunction ? html.call( this, i ) : html );
		} );
	},

	unwrap: function( selector ) {
		this.parent( selector ).not( "body" ).each( function() {
			jQuery( this ).replaceWith( this.childNodes );
		} );
		return this;
	}
} );


jQuery.expr.pseudos.hidden = function( elem ) {
	return !jQuery.expr.pseudos.visible( elem );
};
jQuery.expr.pseudos.visible = function( elem ) {
	return !!( elem.offsetWidth || elem.offsetHeight || elem.getClientRects().length );
};




jQuery.ajaxSettings.xhr = function() {
	try {
		return new window.XMLHttpRequest();
	} catch ( e ) {}
};

var xhrSuccessStatus = {

		// File protocol always yields status code 0, assume 200
		0: 200,

		// Support: IE <=9 only
		// #1450: sometimes IE returns 1223 when it should be 204
		1223: 204
	},
	xhrSupported = jQuery.ajaxSettings.xhr();

support.cors = !!xhrSupported && ( "withCredentials" in xhrSupported );
support.ajax = xhrSupported = !!xhrSupported;

jQuery.ajaxTransport( function( options ) {
	var callback, errorCallback;

	// Cross domain only allowed if supported through XMLHttpRequest
	if ( support.cors || xhrSupported && !options.crossDomain ) {
		return {
			send: function( headers, complete ) {
				var i,
					xhr = options.xhr();

				xhr.open(
					options.type,
					options.url,
					options.async,
					options.username,
					options.password
				);

				// Apply custom fields if provided
				if ( options.xhrFields ) {
					for ( i in options.xhrFields ) {
						xhr[ i ] = options.xhrFields[ i ];
					}
				}

				// Override mime type if needed
				if ( options.mimeType && xhr.overrideMimeType ) {
					xhr.overrideMimeType( options.mimeType );
				}

				// X-Requested-With header
				// For cross-domain requests, seeing as conditions for a preflight are
				// akin to a jigsaw puzzle, we simply never set it to be sure.
				// (it can always be set on a per-request basis or even using ajaxSetup)
				// For same-domain requests, won't change header if already provided.
				if ( !options.crossDomain && !headers[ "X-Requested-With" ] ) {
					headers[ "X-Requested-With" ] = "XMLHttpRequest";
				}

				// Set headers
				for ( i in headers ) {
					xhr.setRequestHeader( i, headers[ i ] );
				}

				// Callback
				callback = function( type ) {
					return function() {
						if ( callback ) {
							callback = errorCallback = xhr.onload =
								xhr.onerror = xhr.onabort = xhr.ontimeout =
									xhr.onreadystatechange = null;

							if ( type === "abort" ) {
								xhr.abort();
							} else if ( type === "error" ) {

								// Support: IE <=9 only
								// On a manual native abort, IE9 throws
								// errors on any property access that is not readyState
								if ( typeof xhr.status !== "number" ) {
									complete( 0, "error" );
								} else {
									complete(

										// File: protocol always yields status 0; see #8605, #14207
										xhr.status,
										xhr.statusText
									);
								}
							} else {
								complete(
									xhrSuccessStatus[ xhr.status ] || xhr.status,
									xhr.statusText,

									// Support: IE <=9 only
									// IE9 has no XHR2 but throws on binary (trac-11426)
									// For XHR2 non-text, let the caller handle it (gh-2498)
									( xhr.responseType || "text" ) !== "text"  ||
									typeof xhr.responseText !== "string" ?
										{ binary: xhr.response } :
										{ text: xhr.responseText },
									xhr.getAllResponseHeaders()
								);
							}
						}
					};
				};

				// Listen to events
				xhr.onload = callback();
				errorCallback = xhr.onerror = xhr.ontimeout = callback( "error" );

				// Support: IE 9 only
				// Use onreadystatechange to replace onabort
				// to handle uncaught aborts
				if ( xhr.onabort !== undefined ) {
					xhr.onabort = errorCallback;
				} else {
					xhr.onreadystatechange = function() {

						// Check readyState before timeout as it changes
						if ( xhr.readyState === 4 ) {

							// Allow onerror to be called first,
							// but that will not handle a native abort
							// Also, save errorCallback to a variable
							// as xhr.onerror cannot be accessed
							window.setTimeout( function() {
								if ( callback ) {
									errorCallback();
								}
							} );
						}
					};
				}

				// Create the abort callback
				callback = callback( "abort" );

				try {

					// Do send the request (this may raise an exception)
					xhr.send( options.hasContent && options.data || null );
				} catch ( e ) {

					// #14683: Only rethrow if this hasn't been notified as an error yet
					if ( callback ) {
						throw e;
					}
				}
			},

			abort: function() {
				if ( callback ) {
					callback();
				}
			}
		};
	}
} );




// Prevent auto-execution of scripts when no explicit dataType was provided (See gh-2432)
jQuery.ajaxPrefilter( function( s ) {
	if ( s.crossDomain ) {
		s.contents.script = false;
	}
} );

// Install script dataType
jQuery.ajaxSetup( {
	accepts: {
		script: "text/javascript, application/javascript, " +
			"application/ecmascript, application/x-ecmascript"
	},
	contents: {
		script: /\b(?:java|ecma)script\b/
	},
	converters: {
		"text script": function( text ) {
			jQuery.globalEval( text );
			return text;
		}
	}
} );

// Handle cache's special case and crossDomain
jQuery.ajaxPrefilter( "script", function( s ) {
	if ( s.cache === undefined ) {
		s.cache = false;
	}
	if ( s.crossDomain ) {
		s.type = "GET";
	}
} );

// Bind script tag hack transport
jQuery.ajaxTransport( "script", function( s ) {

	// This transport only deals with cross domain requests
	if ( s.crossDomain ) {
		var script, callback;
		return {
			send: function( _, complete ) {
				script = jQuery( "<script>" ).prop( {
					charset: s.scriptCharset,
					src: s.url
				} ).on(
					"load error",
					callback = function( evt ) {
						script.remove();
						callback = null;
						if ( evt ) {
							complete( evt.type === "error" ? 404 : 200, evt.type );
						}
					}
				);

				// Use native DOM manipulation to avoid our domManip AJAX trickery
				document.head.appendChild( script[ 0 ] );
			},
			abort: function() {
				if ( callback ) {
					callback();
				}
			}
		};
	}
} );




var oldCallbacks = [],
	rjsonp = /(=)\?(?=&|$)|\?\?/;

// Default jsonp settings
jQuery.ajaxSetup( {
	jsonp: "callback",
	jsonpCallback: function() {
		var callback = oldCallbacks.pop() || ( jQuery.expando + "_" + ( nonce++ ) );
		this[ callback ] = true;
		return callback;
	}
} );

// Detect, normalize options and install callbacks for jsonp requests
jQuery.ajaxPrefilter( "json jsonp", function( s, originalSettings, jqXHR ) {

	var callbackName, overwritten, responseContainer,
		jsonProp = s.jsonp !== false && ( rjsonp.test( s.url ) ?
			"url" :
			typeof s.data === "string" &&
				( s.contentType || "" )
					.indexOf( "application/x-www-form-urlencoded" ) === 0 &&
				rjsonp.test( s.data ) && "data"
		);

	// Handle iff the expected data type is "jsonp" or we have a parameter to set
	if ( jsonProp || s.dataTypes[ 0 ] === "jsonp" ) {

		// Get callback name, remembering preexisting value associated with it
		callbackName = s.jsonpCallback = isFunction( s.jsonpCallback ) ?
			s.jsonpCallback() :
			s.jsonpCallback;

		// Insert callback into url or form data
		if ( jsonProp ) {
			s[ jsonProp ] = s[ jsonProp ].replace( rjsonp, "$1" + callbackName );
		} else if ( s.jsonp !== false ) {
			s.url += ( rquery.test( s.url ) ? "&" : "?" ) + s.jsonp + "=" + callbackName;
		}

		// Use data converter to retrieve json after script execution
		s.converters[ "script json" ] = function() {
			if ( !responseContainer ) {
				jQuery.error( callbackName + " was not called" );
			}
			return responseContainer[ 0 ];
		};

		// Force json dataType
		s.dataTypes[ 0 ] = "json";

		// Install callback
		overwritten = window[ callbackName ];
		window[ callbackName ] = function() {
			responseContainer = arguments;
		};

		// Clean-up function (fires after converters)
		jqXHR.always( function() {

			// If previous value didn't exist - remove it
			if ( overwritten === undefined ) {
				jQuery( window ).removeProp( callbackName );

			// Otherwise restore preexisting value
			} else {
				window[ callbackName ] = overwritten;
			}

			// Save back as free
			if ( s[ callbackName ] ) {

				// Make sure that re-using the options doesn't screw things around
				s.jsonpCallback = originalSettings.jsonpCallback;

				// Save the callback name for future use
				oldCallbacks.push( callbackName );
			}

			// Call if it was a function and we have a response
			if ( responseContainer && isFunction( overwritten ) ) {
				overwritten( responseContainer[ 0 ] );
			}

			responseContainer = overwritten = undefined;
		} );

		// Delegate to script
		return "script";
	}
} );




// Support: Safari 8 only
// In Safari 8 documents created via document.implementation.createHTMLDocument
// collapse sibling forms: the second one becomes a child of the first one.
// Because of that, this security measure has to be disabled in Safari 8.
// https://bugs.webkit.org/show_bug.cgi?id=137337
support.createHTMLDocument = ( function() {
	var body = document.implementation.createHTMLDocument( "" ).body;
	body.innerHTML = "<form></form><form></form>";
	return body.childNodes.length === 2;
} )();


// Argument "data" should be string of html
// context (optional): If specified, the fragment will be created in this context,
// defaults to document
// keepScripts (optional): If true, will include scripts passed in the html string
jQuery.parseHTML = function( data, context, keepScripts ) {
	if ( typeof data !== "string" ) {
		return [];
	}
	if ( typeof context === "boolean" ) {
		keepScripts = context;
		context = false;
	}

	var base, parsed, scripts;

	if ( !context ) {

		// Stop scripts or inline event handlers from being executed immediately
		// by using document.implementation
		if ( support.createHTMLDocument ) {
			context = document.implementation.createHTMLDocument( "" );

			// Set the base href for the created document
			// so any parsed elements with URLs
			// are based on the document's URL (gh-2965)
			base = context.createElement( "base" );
			base.href = document.location.href;
			context.head.appendChild( base );
		} else {
			context = document;
		}
	}

	parsed = rsingleTag.exec( data );
	scripts = !keepScripts && [];

	// Single tag
	if ( parsed ) {
		return [ context.createElement( parsed[ 1 ] ) ];
	}

	parsed = buildFragment( [ data ], context, scripts );

	if ( scripts && scripts.length ) {
		jQuery( scripts ).remove();
	}

	return jQuery.merge( [], parsed.childNodes );
};


/**
 * Load a url into a page
 */
jQuery.fn.load = function( url, params, callback ) {
	var selector, type, response,
		self = this,
		off = url.indexOf( " " );

	if ( off > -1 ) {
		selector = stripAndCollapse( url.slice( off ) );
		url = url.slice( 0, off );
	}

	// If it's a function
	if ( isFunction( params ) ) {

		// We assume that it's the callback
		callback = params;
		params = undefined;

	// Otherwise, build a param string
	} else if ( params && typeof params === "object" ) {
		type = "POST";
	}

	// If we have elements to modify, make the request
	if ( self.length > 0 ) {
		jQuery.ajax( {
			url: url,

			// If "type" variable is undefined, then "GET" method will be used.
			// Make value of this field explicit since
			// user can override it through ajaxSetup method
			type: type || "GET",
			dataType: "html",
			data: params
		} ).done( function( responseText ) {

			// Save response for use in complete callback
			response = arguments;

			self.html( selector ?

				// If a selector was specified, locate the right elements in a dummy div
				// Exclude scripts to avoid IE 'Permission Denied' errors
				jQuery( "<div>" ).append( jQuery.parseHTML( responseText ) ).find( selector ) :

				// Otherwise use the full result
				responseText );

		// If the request succeeds, this function gets "data", "status", "jqXHR"
		// but they are ignored because response was set above.
		// If it fails, this function gets "jqXHR", "status", "error"
		} ).always( callback && function( jqXHR, status ) {
			self.each( function() {
				callback.apply( this, response || [ jqXHR.responseText, status, jqXHR ] );
			} );
		} );
	}

	return this;
};




// Attach a bunch of functions for handling common AJAX events
jQuery.each( [
	"ajaxStart",
	"ajaxStop",
	"ajaxComplete",
	"ajaxError",
	"ajaxSuccess",
	"ajaxSend"
], function( i, type ) {
	jQuery.fn[ type ] = function( fn ) {
		return this.on( type, fn );
	};
} );




jQuery.expr.pseudos.animated = function( elem ) {
	return jQuery.grep( jQuery.timers, function( fn ) {
		return elem === fn.elem;
	} ).length;
};




jQuery.offset = {
	setOffset: function( elem, options, i ) {
		var curPosition, curLeft, curCSSTop, curTop, curOffset, curCSSLeft, calculatePosition,
			position = jQuery.css( elem, "position" ),
			curElem = jQuery( elem ),
			props = {};

		// Set position first, in-case top/left are set even on static elem
		if ( position === "static" ) {
			elem.style.position = "relative";
		}

		curOffset = curElem.offset();
		curCSSTop = jQuery.css( elem, "top" );
		curCSSLeft = jQuery.css( elem, "left" );
		calculatePosition = ( position === "absolute" || position === "fixed" ) &&
			( curCSSTop + curCSSLeft ).indexOf( "auto" ) > -1;

		// Need to be able to calculate position if either
		// top or left is auto and position is either absolute or fixed
		if ( calculatePosition ) {
			curPosition = curElem.position();
			curTop = curPosition.top;
			curLeft = curPosition.left;

		} else {
			curTop = parseFloat( curCSSTop ) || 0;
			curLeft = parseFloat( curCSSLeft ) || 0;
		}

		if ( isFunction( options ) ) {

			// Use jQuery.extend here to allow modification of coordinates argument (gh-1848)
			options = options.call( elem, i, jQuery.extend( {}, curOffset ) );
		}

		if ( options.top != null ) {
			props.top = ( options.top - curOffset.top ) + curTop;
		}
		if ( options.left != null ) {
			props.left = ( options.left - curOffset.left ) + curLeft;
		}

		if ( "using" in options ) {
			options.using.call( elem, props );

		} else {
			curElem.css( props );
		}
	}
};

jQuery.fn.extend( {

	// offset() relates an element's border box to the document origin
	offset: function( options ) {

		// Preserve chaining for setter
		if ( arguments.length ) {
			return options === undefined ?
				this :
				this.each( function( i ) {
					jQuery.offset.setOffset( this, options, i );
				} );
		}

		var rect, win,
			elem = this[ 0 ];

		if ( !elem ) {
			return;
		}

		// Return zeros for disconnected and hidden (display: none) elements (gh-2310)
		// Support: IE <=11 only
		// Running getBoundingClientRect on a
		// disconnected node in IE throws an error
		if ( !elem.getClientRects().length ) {
			return { top: 0, left: 0 };
		}

		// Get document-relative position by adding viewport scroll to viewport-relative gBCR
		rect = elem.getBoundingClientRect();
		win = elem.ownerDocument.defaultView;
		return {
			top: rect.top + win.pageYOffset,
			left: rect.left + win.pageXOffset
		};
	},

	// position() relates an element's margin box to its offset parent's padding box
	// This corresponds to the behavior of CSS absolute positioning
	position: function() {
		if ( !this[ 0 ] ) {
			return;
		}

		var offsetParent, offset, doc,
			elem = this[ 0 ],
			parentOffset = { top: 0, left: 0 };

		// position:fixed elements are offset from the viewport, which itself always has zero offset
		if ( jQuery.css( elem, "position" ) === "fixed" ) {

			// Assume position:fixed implies availability of getBoundingClientRect
			offset = elem.getBoundingClientRect();

		} else {
			offset = this.offset();

			// Account for the *real* offset parent, which can be the document or its root element
			// when a statically positioned element is identified
			doc = elem.ownerDocument;
			offsetParent = elem.offsetParent || doc.documentElement;
			while ( offsetParent &&
				( offsetParent === doc.body || offsetParent === doc.documentElement ) &&
				jQuery.css( offsetParent, "position" ) === "static" ) {

				offsetParent = offsetParent.parentNode;
			}
			if ( offsetParent && offsetParent !== elem && offsetParent.nodeType === 1 ) {

				// Incorporate borders into its offset, since they are outside its content origin
				parentOffset = jQuery( offsetParent ).offset();
				parentOffset.top += jQuery.css( offsetParent, "borderTopWidth", true );
				parentOffset.left += jQuery.css( offsetParent, "borderLeftWidth", true );
			}
		}

		// Subtract parent offsets and element margins
		return {
			top: offset.top - parentOffset.top - jQuery.css( elem, "marginTop", true ),
			left: offset.left - parentOffset.left - jQuery.css( elem, "marginLeft", true )
		};
	},

	// This method will return documentElement in the following cases:
	// 1) For the element inside the iframe without offsetParent, this method will return
	//    documentElement of the parent window
	// 2) For the hidden or detached element
	// 3) For body or html element, i.e. in case of the html node - it will return itself
	//
	// but those exceptions were never presented as a real life use-cases
	// and might be considered as more preferable results.
	//
	// This logic, however, is not guaranteed and can change at any point in the future
	offsetParent: function() {
		return this.map( function() {
			var offsetParent = this.offsetParent;

			while ( offsetParent && jQuery.css( offsetParent, "position" ) === "static" ) {
				offsetParent = offsetParent.offsetParent;
			}

			return offsetParent || documentElement;
		} );
	}
} );

// Create scrollLeft and scrollTop methods
jQuery.each( { scrollLeft: "pageXOffset", scrollTop: "pageYOffset" }, function( method, prop ) {
	var top = "pageYOffset" === prop;

	jQuery.fn[ method ] = function( val ) {
		return access( this, function( elem, method, val ) {

			// Coalesce documents and windows
			var win;
			if ( isWindow( elem ) ) {
				win = elem;
			} else if ( elem.nodeType === 9 ) {
				win = elem.defaultView;
			}

			if ( val === undefined ) {
				return win ? win[ prop ] : elem[ method ];
			}

			if ( win ) {
				win.scrollTo(
					!top ? val : win.pageXOffset,
					top ? val : win.pageYOffset
				);

			} else {
				elem[ method ] = val;
			}
		}, method, val, arguments.length );
	};
} );

// Support: Safari <=7 - 9.1, Chrome <=37 - 49
// Add the top/left cssHooks using jQuery.fn.position
// Webkit bug: https://bugs.webkit.org/show_bug.cgi?id=29084
// Blink bug: https://bugs.chromium.org/p/chromium/issues/detail?id=589347
// getComputedStyle returns percent when specified for top/left/bottom/right;
// rather than make the css module depend on the offset module, just check for it here
jQuery.each( [ "top", "left" ], function( i, prop ) {
	jQuery.cssHooks[ prop ] = addGetHookIf( support.pixelPosition,
		function( elem, computed ) {
			if ( computed ) {
				computed = curCSS( elem, prop );

				// If curCSS returns percentage, fallback to offset
				return rnumnonpx.test( computed ) ?
					jQuery( elem ).position()[ prop ] + "px" :
					computed;
			}
		}
	);
} );


// Create innerHeight, innerWidth, height, width, outerHeight and outerWidth methods
jQuery.each( { Height: "height", Width: "width" }, function( name, type ) {
	jQuery.each( { padding: "inner" + name, content: type, "": "outer" + name },
		function( defaultExtra, funcName ) {

		// Margin is only for outerHeight, outerWidth
		jQuery.fn[ funcName ] = function( margin, value ) {
			var chainable = arguments.length && ( defaultExtra || typeof margin !== "boolean" ),
				extra = defaultExtra || ( margin === true || value === true ? "margin" : "border" );

			return access( this, function( elem, type, value ) {
				var doc;

				if ( isWindow( elem ) ) {

					// $( window ).outerWidth/Height return w/h including scrollbars (gh-1729)
					return funcName.indexOf( "outer" ) === 0 ?
						elem[ "inner" + name ] :
						elem.document.documentElement[ "client" + name ];
				}

				// Get document width or height
				if ( elem.nodeType === 9 ) {
					doc = elem.documentElement;

					// Either scroll[Width/Height] or offset[Width/Height] or client[Width/Height],
					// whichever is greatest
					return Math.max(
						elem.body[ "scroll" + name ], doc[ "scroll" + name ],
						elem.body[ "offset" + name ], doc[ "offset" + name ],
						doc[ "client" + name ]
					);
				}

				return value === undefined ?

					// Get width or height on the element, requesting but not forcing parseFloat
					jQuery.css( elem, type, extra ) :

					// Set width or height on the element
					jQuery.style( elem, type, value, extra );
			}, type, chainable ? margin : undefined, chainable );
		};
	} );
} );


jQuery.each( ( "blur focus focusin focusout resize scroll click dblclick " +
	"mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave " +
	"change select submit keydown keypress keyup contextmenu" ).split( " " ),
	function( i, name ) {

	// Handle event binding
	jQuery.fn[ name ] = function( data, fn ) {
		return arguments.length > 0 ?
			this.on( name, null, data, fn ) :
			this.trigger( name );
	};
} );

jQuery.fn.extend( {
	hover: function( fnOver, fnOut ) {
		return this.mouseenter( fnOver ).mouseleave( fnOut || fnOver );
	}
} );




jQuery.fn.extend( {

	bind: function( types, data, fn ) {
		return this.on( types, null, data, fn );
	},
	unbind: function( types, fn ) {
		return this.off( types, null, fn );
	},

	delegate: function( selector, types, data, fn ) {
		return this.on( types, selector, data, fn );
	},
	undelegate: function( selector, types, fn ) {

		// ( namespace ) or ( selector, types [, fn] )
		return arguments.length === 1 ?
			this.off( selector, "**" ) :
			this.off( types, selector || "**", fn );
	}
} );

// Bind a function to a context, optionally partially applying any
// arguments.
// jQuery.proxy is deprecated to promote standards (specifically Function#bind)
// However, it is not slated for removal any time soon
jQuery.proxy = function( fn, context ) {
	var tmp, args, proxy;

	if ( typeof context === "string" ) {
		tmp = fn[ context ];
		context = fn;
		fn = tmp;
	}

	// Quick check to determine if target is callable, in the spec
	// this throws a TypeError, but we will just return undefined.
	if ( !isFunction( fn ) ) {
		return undefined;
	}

	// Simulated bind
	args = slice.call( arguments, 2 );
	proxy = function() {
		return fn.apply( context || this, args.concat( slice.call( arguments ) ) );
	};

	// Set the guid of unique handler to the same of original handler, so it can be removed
	proxy.guid = fn.guid = fn.guid || jQuery.guid++;

	return proxy;
};

jQuery.holdReady = function( hold ) {
	if ( hold ) {
		jQuery.readyWait++;
	} else {
		jQuery.ready( true );
	}
};
jQuery.isArray = Array.isArray;
jQuery.parseJSON = JSON.parse;
jQuery.nodeName = nodeName;
jQuery.isFunction = isFunction;
jQuery.isWindow = isWindow;
jQuery.camelCase = camelCase;
jQuery.type = toType;

jQuery.now = Date.now;

jQuery.isNumeric = function( obj ) {

	// As of jQuery 3.0, isNumeric is limited to
	// strings and numbers (primitives or objects)
	// that can be coerced to finite numbers (gh-2662)
	var type = jQuery.type( obj );
	return ( type === "number" || type === "string" ) &&

		// parseFloat NaNs numeric-cast false positives ("")
		// ...but misinterprets leading-number strings, particularly hex literals ("0x...")
		// subtraction forces infinities to NaN
		!isNaN( obj - parseFloat( obj ) );
};




// Register as a named AMD module, since jQuery can be concatenated with other
// files that may use define, but not via a proper concatenation script that
// understands anonymous AMD modules. A named AMD is safest and most robust
// way to register. Lowercase jquery is used because AMD module names are
// derived from file names, and jQuery is normally delivered in a lowercase
// file name. Do this after creating the global so that if an AMD module wants
// to call noConflict to hide this version of jQuery, it will work.

// Note that for maximum portability, libraries that are not jQuery should
// declare themselves as anonymous modules, and avoid setting a global if an
// AMD loader is present. jQuery is a special case. For more information, see
// https://github.com/jrburke/requirejs/wiki/Updating-existing-libraries#wiki-anon

if ( typeof define === "function" && define.amd ) {
	define( "jquery", [], function() {
		return jQuery;
	} );
}




var

	// Map over jQuery in case of overwrite
	_jQuery = window.jQuery,

	// Map over the $ in case of overwrite
	_$ = window.$;

jQuery.noConflict = function( deep ) {
	if ( window.$ === jQuery ) {
		window.$ = _$;
	}

	if ( deep && window.jQuery === jQuery ) {
		window.jQuery = _jQuery;
	}

	return jQuery;
};

// Expose jQuery and $ identifiers, even in AMD
// (#7102#comment:10, https://github.com/jquery/jquery/pull/557)
// and CommonJS for browser emulators (#13566)
if ( !noGlobal ) {
	window.jQuery = window.$ = jQuery;
}




return jQuery;
} );

},{}],2:[function(require,module,exports){
module.exports={
  "name": "parsleyjs",
  "version": "2.8.1",
  "homepage": "http://parsleyjs.org",
  "license": "MIT",
  "description": "Validate your forms, frontend, without writing a single line of javascript!",
  "main": "dist/parsley.js",
  "scripts": {
    "test": "gulp",
    "test-browser": "gulp test-browser",
    "build": "gulp build",
    "coverage": "gulp coverage"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/guillaumepotier/Parsley.js.git"
  },
  "keywords": [
    "parsley",
    "form",
    "validation",
    "html5",
    "polyfill",
    "es6"
  ],
  "author": {
    "name": "Guillaume Potier",
    "email": "guillaume@wisembly.com",
    "url": "http://guillaumepotier.com/"
  },
  "bugs": {
    "url": "https://github.com/guillaumepotier/Parsley.js/issues"
  },
  "dependencies": {
    "jquery": ">=1.8.0"
  },
  "devDependencies": {
    "babel-core": "^6.26.3",
    "babel-eslint": "^4.0.5",
    "babel-plugin-object-assign": "^1.2.1",
    "babel-preset-env": "^1.7.0",
    "babelify": "^8.0.0",
    "browserify": "^11.0.1",
    "expect.js": "*",
    "del": "^1.1.1",
    "esperanto": "^0.7.4",
    "glob": "^5.0.14",
    "gulp": "^3.9.0",
    "docco": "~0.6.3",
    "gulp-babel": "^7.0.1",
    "gulp-eslint": "^1.0.0",
    "gulp-file": "^0.2.0",
    "gulp-filter": "^3.0.0",
    "gulp-header": "*",
    "gulp-istanbul": "^0.10.0",
    "gulp-jscs": "^2.0.0",
    "gulp-livereload": "^3.4.0",
    "gulp-load-plugins": "^0.10.0",
    "gulp-mocha": "^2.0.0",
    "gulp-notify": "^2.1.0",
    "gulp-plumber": "^1.0.1",
    "gulp-rename": "^1.2.0",
    "gulp-replace": "*",
    "gulp-sourcemaps": "^1.3.0",
    "gulp-uglify": "^1.2.0",
    "gulp-git": "^1.7.0",
    "inputevent": "*",
    "isparta": "~3.0.3",
    "mocha": "^2.1.0",
    "moment": "*",
    "run-sequence": "^1.0.2",
    "jsdom": "^9.2",
    "sinon": "^1.12.2",
    "vinyl-buffer": "^1.0.0",
    "vinyl-source-stream": "^1.0.0",
    "watchify": "^3.3.1"
  },
  "babelBoilerplateOptions": {
    "entryFileName": "parsley",
    "mainVarName": "parsley",
    "mochaGlobals": [
      "$",
      "stub",
      "spy",
      "expect",
      "expectWarning"
    ]
  },
  "jspm": {
    "main": "dist/parsley.js",
    "dependencies": {
      "jquery": "npm:jquery"
    }
  }
}

},{}],3:[function(require,module,exports){
'use strict';

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; // This plugin replace Parsley default form behavior that auto bind its fields children
// With this plugin you must register in constructor your form's fields and their constraints
// You have this way a total javascript control over your form validation, and nothing needed in DOM

var _jquery = require('jquery');

var _jquery2 = _interopRequireDefault(_jquery);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// Remove this line in ES3

(function ($) {

  window.ParsleyConfig = $.extend(true, window.ParsleyConfig, { autoBind: false });
  window.ParsleyExtend = window.ParsleyExtend || {};

  window.ParsleyExtend = Object.assign(window.ParsleyExtend, {
    // { '#selector' : { constraintName1: value, constraintName2: value2 }, #selector2: { constraintName: value } }
    // { '#selector' : { constraintName1: { requirements: value, priority: value }, constraintName2: value2 } }
    _bindFields: function _bindFields() {
      window.Parsley.Utils.warnOnce("Parsley's extra/bind is deprecated. Please see https://github.com/guillaumepotier/Parsley.js/issues/1180");
      if ('Form' !== this.__class__) throw new Error('`_bindFields` must be called on a form instance');

      if ('undefined' === typeof this.options.fields) throw new Error('bind.js plugin needs to have Parsley instantiated with fields');

      var field;
      this.fields = [];

      for (var selector in this.options.fields) {
        if (0 === $(selector).length) continue;

        field = $(selector).parsley();

        for (var name in this.options.fields[selector]) {
          if ('object' === _typeof(this.options.fields[selector][name]) && !(this.options.fields[selector][name] instanceof Array)) field.addConstraint(name.toLowerCase(), this.options.fields[selector][name].requirements, this.options.fields[selector][name].priority || 32);else field.addConstraint(name.toLowerCase(), this.options.fields[selector][name]);
        }
      }

      this.fields.push(field);

      return this;
    },

    // Do nothing
    _bindConstraints: function _bindConstraints() {
      return this;
    }
  });
})(_jquery2.default);

},{"jquery":1}],4:[function(require,module,exports){
'use strict';

var _jquery = require('jquery');

var _jquery2 = _interopRequireDefault(_jquery);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// Remove this line in ES3

// gt, gte, lt, lte, notequalto extra validators
var parseRequirement = function parseRequirement(requirement) {
  if (isNaN(+requirement)) return parseFloat((0, _jquery2.default)(requirement).val());else return +requirement;
};

// Greater than validator
// Load this after Parsley for additional comparison validators
// Note: comparing with a reference isn't well supported and not recommended.
window.Parsley.addValidator('gt', {
  validateString: function validateString(value, requirement) {
    return parseFloat(value) > parseRequirement(requirement);
  },
  priority: 32
});

// Greater than or equal to validator
window.Parsley.addValidator('gte', {
  validateString: function validateString(value, requirement) {
    return parseFloat(value) >= parseRequirement(requirement);
  },
  priority: 32
});

// Less than validator
window.Parsley.addValidator('lt', {
  validateString: function validateString(value, requirement) {
    return parseFloat(value) < parseRequirement(requirement);
  },
  priority: 32
});

// Less than or equal to validator
window.Parsley.addValidator('lte', {
  validateString: function validateString(value, requirement) {
    return parseFloat(value) <= parseRequirement(requirement);
  },
  priority: 32
});

},{"jquery":1}],5:[function(require,module,exports){
'use strict';

// Load this after Parsley for additional comparison validators

window.Parsley.addValidator('dateiso', {
  validateString: function validateString(value) {
    return (/^(\d{4})\D?(0[1-9]|1[0-2])\D?([12]\d|0[1-9]|3[01])$/.test(value)
    );
  },
  priority: 256
});

},{}],6:[function(require,module,exports){
"use strict";

(function () {
  // minwords, maxwords, words extra validators
  var countWords = function countWords(string) {
    return string.replace(/(^\s*)|(\s*$)/gi, "").replace(/\s+/gi, " ").split(' ').length;
  };

  window.Parsley.addValidator('minwords', function (value, nbWords) {
    return countWords(value) >= nbWords;
  }, 32).addMessage('en', 'minwords', 'This value needs more words');

  window.Parsley.addValidator('maxwords', function (value, nbWords) {
    return countWords(value) <= nbWords;
  }, 32).addMessage('en', 'maxwords', 'This value needs fewer words');

  window.Parsley.addValidator('words', function (value, arrayRange) {
    var length = countWords(value);
    return length >= arrayRange[0] && length <= arrayRange[1];
  }, 32).addMessage('en', 'words', 'This value has the incorrect number of words');
})();

},{}],7:[function(require,module,exports){
'use strict';

var _main = require('../parsley/main');

var _main2 = _interopRequireDefault(_main);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

_main2.default.addMessages('en', {
  defaultMessage: "This value seems to be invalid.",
  type: {
    email: "This value should be a valid email.",
    url: "This value should be a valid url.",
    number: "This value should be a valid number.",
    integer: "This value should be a valid integer.",
    digits: "This value should be digits.",
    alphanum: "This value should be alphanumeric."
  },
  notblank: "This value should not be blank.",
  required: "This value is required.",
  pattern: "This value seems to be invalid.",
  min: "This value should be greater than or equal to %s.",
  max: "This value should be lower than or equal to %s.",
  range: "This value should be between %s and %s.",
  minlength: "This value is too short. It should have %s characters or more.",
  maxlength: "This value is too long. It should have %s characters or fewer.",
  length: "This value length is invalid. It should be between %s and %s characters long.",
  mincheck: "You must select at least %s choices.",
  maxcheck: "You must select %s choices or fewer.",
  check: "You must select between %s and %s choices.",
  equalto: "This value should be the same."
}); // This is included with the Parsley library itself,
// thus there is no use in adding it to your project.


_main2.default.setLocale('en');

},{"../parsley/main":16}],8:[function(require,module,exports){
'use strict';

var _parsley = require('../parsley');

var _parsley2 = _interopRequireDefault(_parsley);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

_parsley2.default.addMessages('fr', {
  defaultMessage: "Cette valeur semble non valide.",
  type: {
    email: "Cette valeur n'est pas une adresse email valide.",
    url: "Cette valeur n'est pas une URL valide.",
    number: "Cette valeur doit être un nombre.",
    integer: "Cette valeur doit être un entier.",
    digits: "Cette valeur doit être numérique.",
    alphanum: "Cette valeur doit être alphanumérique."
  },
  notblank: "Cette valeur ne peut pas être vide.",
  required: "Ce champ est requis.",
  pattern: "Cette valeur semble non valide.",
  min: "Cette valeur ne doit pas être inférieure à %s.",
  max: "Cette valeur ne doit pas excéder %s.",
  range: "Cette valeur doit être comprise entre %s et %s.",
  minlength: "Cette chaîne est trop courte. Elle doit avoir au minimum %s caractères.",
  maxlength: "Cette chaîne est trop longue. Elle doit avoir au maximum %s caractères.",
  length: "Cette valeur doit contenir entre %s et %s caractères.",
  mincheck: "Vous devez sélectionner au moins %s choix.",
  maxcheck: "Vous devez sélectionner %s choix maximum.",
  check: "Vous devez sélectionner entre %s et %s choix.",
  equalto: "Cette valeur devrait être identique."
}); // Validation errors messages for Parsley


_parsley2.default.setLocale('fr');

},{"../parsley":9}],9:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _jquery = require('jquery');

var _jquery2 = _interopRequireDefault(_jquery);

var _main = require('./parsley/main');

var _main2 = _interopRequireDefault(_main);

require('./parsley/pubsub');

require('./parsley/remote');

require('./i18n/en');

var _inputevent = require('./vendor/inputevent');

var _inputevent2 = _interopRequireDefault(_inputevent);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

_inputevent2.default.install();

exports.default = _main2.default;

},{"./i18n/en":7,"./parsley/main":16,"./parsley/pubsub":18,"./parsley/remote":19,"./vendor/inputevent":24,"jquery":1}],10:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _jquery = require('jquery');

var _jquery2 = _interopRequireDefault(_jquery);

var _utils = require('./utils');

var _utils2 = _interopRequireDefault(_utils);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var Base = function Base() {
  this.__id__ = _utils2.default.generateID();
};

Base.prototype = {
  asyncSupport: true, // Deprecated

  _pipeAccordingToValidationResult: function _pipeAccordingToValidationResult() {
    var _this = this;

    var pipe = function pipe() {
      var r = _jquery2.default.Deferred();
      if (true !== _this.validationResult) r.reject();
      return r.resolve().promise();
    };
    return [pipe, pipe];
  },

  actualizeOptions: function actualizeOptions() {
    _utils2.default.attr(this.element, this.options.namespace, this.domOptions);
    if (this.parent && this.parent.actualizeOptions) this.parent.actualizeOptions();
    return this;
  },

  _resetOptions: function _resetOptions(initOptions) {
    this.domOptions = _utils2.default.objectCreate(this.parent.options);
    this.options = _utils2.default.objectCreate(this.domOptions);
    // Shallow copy of ownProperties of initOptions:
    for (var i in initOptions) {
      if (initOptions.hasOwnProperty(i)) this.options[i] = initOptions[i];
    }
    this.actualizeOptions();
  },

  _listeners: null,

  // Register a callback for the given event name
  // Callback is called with context as the first argument and the `this`
  // The context is the current parsley instance, or window.Parsley if global
  // A return value of `false` will interrupt the calls
  on: function on(name, fn) {
    this._listeners = this._listeners || {};
    var queue = this._listeners[name] = this._listeners[name] || [];
    queue.push(fn);

    return this;
  },

  // Deprecated. Use `on` instead
  subscribe: function subscribe(name, fn) {
    _jquery2.default.listenTo(this, name.toLowerCase(), fn);
  },

  // Unregister a callback (or all if none is given) for the given event name
  off: function off(name, fn) {
    var queue = this._listeners && this._listeners[name];
    if (queue) {
      if (!fn) {
        delete this._listeners[name];
      } else {
        for (var i = queue.length; i--;) {
          if (queue[i] === fn) queue.splice(i, 1);
        }
      }
    }
    return this;
  },

  // Deprecated. Use `off`
  unsubscribe: function unsubscribe(name, fn) {
    _jquery2.default.unsubscribeTo(this, name.toLowerCase());
  },

  // Trigger an event of the given name
  // A return value of `false` interrupts the callback chain
  // Returns false if execution was interrupted
  trigger: function trigger(name, target, extraArg) {
    target = target || this;
    var queue = this._listeners && this._listeners[name];
    var result;
    var parentResult;
    if (queue) {
      for (var i = queue.length; i--;) {
        result = queue[i].call(target, target, extraArg);
        if (result === false) return result;
      }
    }
    if (this.parent) {
      return this.parent.trigger(name, target, extraArg);
    }
    return true;
  },

  asyncIsValid: function asyncIsValid(group, force) {
    _utils2.default.warnOnce("asyncIsValid is deprecated; please use whenValid instead");
    return this.whenValid({ group: group, force: force });
  },

  _findRelated: function _findRelated() {
    return this.options.multiple ? (0, _jquery2.default)(this.parent.element.querySelectorAll('[' + this.options.namespace + 'multiple="' + this.options.multiple + '"]')) : this.$element;
  }
};

exports.default = Base;

},{"./utils":21,"jquery":1}],11:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _utils = require('./utils');

var _utils2 = _interopRequireDefault(_utils);

var _validator2 = require('./validator');

var _validator3 = _interopRequireDefault(_validator2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

var Constraint = function Constraint(parsleyField, name, requirements, priority, isDomConstraint) {
  var validatorSpec = window.Parsley._validatorRegistry.validators[name];
  var validator = new _validator3.default(validatorSpec);
  priority = priority || parsleyField.options[name + 'Priority'] || validator.priority;
  isDomConstraint = true === isDomConstraint;

  Object.assign(this, {
    validator: validator,
    name: name,
    requirements: requirements,
    priority: priority,
    isDomConstraint: isDomConstraint
  });
  this._parseRequirements(parsleyField.options);
};

var capitalize = function capitalize(str) {
  var cap = str[0].toUpperCase();
  return cap + str.slice(1);
};

Constraint.prototype = {
  validate: function validate(value, instance) {
    var _validator;

    return (_validator = this.validator).validate.apply(_validator, [value].concat(_toConsumableArray(this.requirementList), [instance]));
  },

  _parseRequirements: function _parseRequirements(options) {
    var _this = this;

    this.requirementList = this.validator.parseRequirements(this.requirements, function (key) {
      return options[_this.name + capitalize(key)];
    });
  }
};

exports.default = Constraint;

},{"./utils":21,"./validator":22}],12:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
// All these options could be overriden and specified directly in DOM using
// `data-parsley-` default DOM-API
// eg: `inputs` can be set in DOM using `data-parsley-inputs="input, textarea"`
// eg: `data-parsley-stop-on-first-failing-constraint="false"`

var Defaults = {
  // ### General

  // Default data-namespace for DOM API
  namespace: 'data-parsley-',

  // Supported inputs by default
  inputs: 'input, textarea, select',

  // Excluded inputs by default
  excluded: 'input[type=button], input[type=submit], input[type=reset], input[type=hidden]',

  // Stop validating field on highest priority failing constraint
  priorityEnabled: true,

  // ### Field only

  // identifier used to group together inputs (e.g. radio buttons...)
  multiple: null,

  // identifier (or array of identifiers) used to validate only a select group of inputs
  group: null,

  // ### UI
  // Enable\Disable error messages
  uiEnabled: true,

  // Key events threshold before validation
  validationThreshold: 3,

  // Focused field on form validation error. 'first'|'last'|'none'
  focus: 'first',

  // event(s) that will trigger validation before first failure. eg: `input`...
  trigger: false,

  // event(s) that will trigger validation after first failure.
  triggerAfterFailure: 'input',

  // Class that would be added on every failing validation Parsley field
  errorClass: 'parsley-error',

  // Same for success validation
  successClass: 'parsley-success',

  // Return the `$element` that will receive these above success or error classes
  // Could also be (and given directly from DOM) a valid selector like `'#div'`
  classHandler: function classHandler(Field) {},

  // Return the `$element` where errors will be appended
  // Could also be (and given directly from DOM) a valid selector like `'#div'`
  errorsContainer: function errorsContainer(Field) {},

  // ul elem that would receive errors' list
  errorsWrapper: '<ul class="parsley-errors-list"></ul>',

  // li elem that would receive error message
  errorTemplate: '<li></li>'
};

exports.default = Defaults;

},{}],13:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var _jquery = require('jquery');

var _jquery2 = _interopRequireDefault(_jquery);

var _utils = require('./utils');

var _utils2 = _interopRequireDefault(_utils);

var _base = require('./base');

var _base2 = _interopRequireDefault(_base);

var _form = require('./form');

var _form2 = _interopRequireDefault(_form);

var _field = require('./field');

var _field2 = _interopRequireDefault(_field);

var _multiple = require('./multiple');

var _multiple2 = _interopRequireDefault(_multiple);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var Factory = function Factory(element, options, parsleyFormInstance) {
  this.element = element;
  this.$element = (0, _jquery2.default)(element);

  // If the element has already been bound, returns its saved Parsley instance
  var savedparsleyFormInstance = this.$element.data('Parsley');
  if (savedparsleyFormInstance) {

    // If the saved instance has been bound without a Form parent and there is one given in this call, add it
    if ('undefined' !== typeof parsleyFormInstance && savedparsleyFormInstance.parent === window.Parsley) {
      savedparsleyFormInstance.parent = parsleyFormInstance;
      savedparsleyFormInstance._resetOptions(savedparsleyFormInstance.options);
    }

    if ('object' === (typeof options === 'undefined' ? 'undefined' : _typeof(options))) {
      Object.assign(savedparsleyFormInstance.options, options);
    }

    return savedparsleyFormInstance;
  }

  // Parsley must be instantiated with a DOM element or jQuery $element
  if (!this.$element.length) throw new Error('You must bind Parsley on an existing element.');

  if ('undefined' !== typeof parsleyFormInstance && 'Form' !== parsleyFormInstance.__class__) throw new Error('Parent instance must be a Form instance');

  this.parent = parsleyFormInstance || window.Parsley;
  return this.init(options);
};

Factory.prototype = {
  init: function init(options) {
    this.__class__ = 'Parsley';
    this.__version__ = '@@version';
    this.__id__ = _utils2.default.generateID();

    // Pre-compute options
    this._resetOptions(options);

    // A Form instance is obviously a `<form>` element but also every node that is not an input and has the `data-parsley-validate` attribute
    if (this.element.nodeName === 'FORM' || _utils2.default.checkAttr(this.element, this.options.namespace, 'validate') && !this.$element.is(this.options.inputs)) return this.bind('parsleyForm');

    // Every other element is bound as a `Field` or `FieldMultiple`
    return this.isMultiple() ? this.handleMultiple() : this.bind('parsleyField');
  },

  isMultiple: function isMultiple() {
    var type = _utils2.default.getType(this.element);
    return type === 'radio' || type === 'checkbox' || this.element.nodeName === 'SELECT' && null !== this.element.getAttribute('multiple');
  },

  // Multiples fields are a real nightmare :(
  // Maybe some refactoring would be appreciated here...
  handleMultiple: function handleMultiple() {
    var _this = this;

    var name;
    var multiple;
    var parsleyMultipleInstance;

    // Handle multiple name
    this.options.multiple = this.options.multiple || (name = this.element.getAttribute('name')) || this.element.getAttribute('id');

    // Special select multiple input
    if (this.element.nodeName === 'SELECT' && null !== this.element.getAttribute('multiple')) {
      this.options.multiple = this.options.multiple || this.__id__;
      return this.bind('parsleyFieldMultiple');

      // Else for radio / checkboxes, we need a `name` or `data-parsley-multiple` to properly bind it
    } else if (!this.options.multiple) {
      _utils2.default.warn('To be bound by Parsley, a radio, a checkbox and a multiple select input must have either a name or a multiple option.', this.$element);
      return this;
    }

    // Remove special chars
    this.options.multiple = this.options.multiple.replace(/(:|\.|\[|\]|\{|\}|\$)/g, '');

    // Add proper `data-parsley-multiple` to siblings if we have a valid multiple name
    if (name) {
      (0, _jquery2.default)('input[name="' + name + '"]').each(function (i, input) {
        var type = _utils2.default.getType(input);
        if (type === 'radio' || type === 'checkbox') input.setAttribute(_this.options.namespace + 'multiple', _this.options.multiple);
      });
    }

    // Check here if we don't already have a related multiple instance saved
    var $previouslyRelated = this._findRelated();
    for (var i = 0; i < $previouslyRelated.length; i++) {
      parsleyMultipleInstance = (0, _jquery2.default)($previouslyRelated.get(i)).data('Parsley');
      if ('undefined' !== typeof parsleyMultipleInstance) {

        if (!this.$element.data('FieldMultiple')) {
          parsleyMultipleInstance.addElement(this.$element);
        }

        break;
      }
    }

    // Create a secret Field instance for every multiple field. It will be stored in `data('FieldMultiple')`
    // And will be useful later to access classic `Field` stuff while being in a `FieldMultiple` instance
    this.bind('parsleyField', true);

    return parsleyMultipleInstance || this.bind('parsleyFieldMultiple');
  },

  // Return proper `Form`, `Field` or `FieldMultiple`
  bind: function bind(type, doNotStore) {
    var parsleyInstance;

    switch (type) {
      case 'parsleyForm':
        parsleyInstance = _jquery2.default.extend(new _form2.default(this.element, this.domOptions, this.options), new _base2.default(), window.ParsleyExtend)._bindFields();
        break;
      case 'parsleyField':
        parsleyInstance = _jquery2.default.extend(new _field2.default(this.element, this.domOptions, this.options, this.parent), new _base2.default(), window.ParsleyExtend);
        break;
      case 'parsleyFieldMultiple':
        parsleyInstance = _jquery2.default.extend(new _field2.default(this.element, this.domOptions, this.options, this.parent), new _multiple2.default(), new _base2.default(), window.ParsleyExtend)._init();
        break;
      default:
        throw new Error(type + 'is not a supported Parsley type');
    }

    if (this.options.multiple) _utils2.default.setAttr(this.element, this.options.namespace, 'multiple', this.options.multiple);

    if ('undefined' !== typeof doNotStore) {
      this.$element.data('FieldMultiple', parsleyInstance);

      return parsleyInstance;
    }

    // Store the freshly bound instance in a DOM element for later access using jQuery `data()`
    this.$element.data('Parsley', parsleyInstance);

    // Tell the world we have a new Form or Field instance!
    parsleyInstance._actualizeTriggers();
    parsleyInstance._trigger('init');

    return parsleyInstance;
  }
};

exports.default = Factory;

},{"./base":10,"./field":14,"./form":15,"./multiple":17,"./utils":21,"jquery":1}],14:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _jquery = require('jquery');

var _jquery2 = _interopRequireDefault(_jquery);

var _constraint = require('./constraint');

var _constraint2 = _interopRequireDefault(_constraint);

var _ui = require('./ui');

var _ui2 = _interopRequireDefault(_ui);

var _utils = require('./utils');

var _utils2 = _interopRequireDefault(_utils);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

var Field = function Field(field, domOptions, options, parsleyFormInstance) {
  this.__class__ = 'Field';

  this.element = field;
  this.$element = (0, _jquery2.default)(field);

  // Set parent if we have one
  if ('undefined' !== typeof parsleyFormInstance) {
    this.parent = parsleyFormInstance;
  }

  this.options = options;
  this.domOptions = domOptions;

  // Initialize some properties
  this.constraints = [];
  this.constraintsByName = {};
  this.validationResult = true;

  // Bind constraints
  this._bindConstraints();
};

var statusMapping = { pending: null, resolved: true, rejected: false };

Field.prototype = {
  // # Public API
  // Validate field and trigger some events for mainly `UI`
  // @returns `true`, an array of the validators that failed, or
  // `null` if validation is not finished. Prefer using whenValidate
  validate: function validate(options) {
    if (arguments.length >= 1 && !_jquery2.default.isPlainObject(options)) {
      _utils2.default.warnOnce('Calling validate on a parsley field without passing arguments as an object is deprecated.');
      options = { options: options };
    }
    var promise = this.whenValidate(options);
    if (!promise) // If excluded with `group` option
      return true;
    switch (promise.state()) {
      case 'pending':
        return null;
      case 'resolved':
        return true;
      case 'rejected':
        return this.validationResult;
    }
  },

  // Validate field and trigger some events for mainly `UI`
  // @returns a promise that succeeds only when all validations do
  // or `undefined` if field is not in the given `group`.
  whenValidate: function whenValidate() {
    var _whenValid$always$don,
        _this = this;

    var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
        force = _ref.force,
        group = _ref.group;

    // do not validate a field if not the same as given validation group
    this.refresh();
    if (group && !this._isInGroup(group)) return;

    this.value = this.getValue();

    // Field Validate event. `this.value` could be altered for custom needs
    this._trigger('validate');

    return (_whenValid$always$don = this.whenValid({ force: force, value: this.value, _refreshed: true }).always(function () {
      _this._reflowUI();
    }).done(function () {
      _this._trigger('success');
    }).fail(function () {
      _this._trigger('error');
    }).always(function () {
      _this._trigger('validated');
    })).pipe.apply(_whenValid$always$don, _toConsumableArray(this._pipeAccordingToValidationResult()));
  },

  hasConstraints: function hasConstraints() {
    return 0 !== this.constraints.length;
  },

  // An empty optional field does not need validation
  needsValidation: function needsValidation(value) {
    if ('undefined' === typeof value) value = this.getValue();

    // If a field is empty and not required, it is valid
    // Except if `data-parsley-validate-if-empty` explicitely added, useful for some custom validators
    if (!value.length && !this._isRequired() && 'undefined' === typeof this.options.validateIfEmpty) return false;

    return true;
  },

  _isInGroup: function _isInGroup(group) {
    if (Array.isArray(this.options.group)) return -1 !== _jquery2.default.inArray(group, this.options.group);
    return this.options.group === group;
  },

  // Just validate field. Do not trigger any event.
  // Returns `true` iff all constraints pass, `false` if there are failures,
  // or `null` if the result can not be determined yet (depends on a promise)
  // See also `whenValid`.
  isValid: function isValid(options) {
    if (arguments.length >= 1 && !_jquery2.default.isPlainObject(options)) {
      _utils2.default.warnOnce('Calling isValid on a parsley field without passing arguments as an object is deprecated.');

      var _arguments = Array.prototype.slice.call(arguments),
          force = _arguments[0],
          value = _arguments[1];

      options = { force: force, value: value };
    }
    var promise = this.whenValid(options);
    if (!promise) // Excluded via `group`
      return true;
    return statusMapping[promise.state()];
  },

  // Just validate field. Do not trigger any event.
  // @returns a promise that succeeds only when all validations do
  // or `undefined` if the field is not in the given `group`.
  // The argument `force` will force validation of empty fields.
  // If a `value` is given, it will be validated instead of the value of the input.
  whenValid: function whenValid() {
    var _this2 = this;

    var _ref2 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
        _ref2$force = _ref2.force,
        force = _ref2$force === undefined ? false : _ref2$force,
        value = _ref2.value,
        group = _ref2.group,
        _refreshed = _ref2._refreshed;

    // Recompute options and rebind constraints to have latest changes
    if (!_refreshed) this.refresh();
    // do not validate a field if not the same as given validation group
    if (group && !this._isInGroup(group)) return;

    this.validationResult = true;

    // A field without constraint is valid
    if (!this.hasConstraints()) return _jquery2.default.when();

    // Value could be passed as argument, needed to add more power to 'field:validate'
    if ('undefined' === typeof value || null === value) value = this.getValue();

    if (!this.needsValidation(value) && true !== force) return _jquery2.default.when();

    var groupedConstraints = this._getGroupedConstraints();
    var promises = [];
    _jquery2.default.each(groupedConstraints, function (_, constraints) {
      // Process one group of constraints at a time, we validate the constraints
      // and combine the promises together.
      var promise = _utils2.default.all(_jquery2.default.map(constraints, function (constraint) {
        return _this2._validateConstraint(value, constraint);
      }));
      promises.push(promise);
      if (promise.state() === 'rejected') return false; // Interrupt processing if a group has already failed
    });
    return _utils2.default.all(promises);
  },

  // @returns a promise
  _validateConstraint: function _validateConstraint(value, constraint) {
    var _this3 = this;

    var result = constraint.validate(value, this);
    // Map false to a failed promise
    if (false === result) result = _jquery2.default.Deferred().reject();
    // Make sure we return a promise and that we record failures
    return _utils2.default.all([result]).fail(function (errorMessage) {
      if (!(_this3.validationResult instanceof Array)) _this3.validationResult = [];
      _this3.validationResult.push({
        assert: constraint,
        errorMessage: 'string' === typeof errorMessage && errorMessage
      });
    });
  },

  // @returns Parsley field computed value that could be overrided or configured in DOM
  getValue: function getValue() {
    var value;

    // Value could be overriden in DOM or with explicit options
    if ('function' === typeof this.options.value) value = this.options.value(this);else if ('undefined' !== typeof this.options.value) value = this.options.value;else value = this.$element.val();

    // Handle wrong DOM or configurations
    if ('undefined' === typeof value || null === value) return '';

    return this._handleWhitespace(value);
  },

  // Reset UI
  reset: function reset() {
    this._resetUI();
    return this._trigger('reset');
  },

  // Destroy Parsley instance (+ UI)
  destroy: function destroy() {
    // Field case: emit destroy event to clean UI and then destroy stored instance
    this._destroyUI();
    this.$element.removeData('Parsley');
    this.$element.removeData('FieldMultiple');
    this._trigger('destroy');
  },

  // Actualize options and rebind constraints
  refresh: function refresh() {
    this._refreshConstraints();
    return this;
  },

  _refreshConstraints: function _refreshConstraints() {
    return this.actualizeOptions()._bindConstraints();
  },

  refreshConstraints: function refreshConstraints() {
    _utils2.default.warnOnce("Parsley's refreshConstraints is deprecated. Please use refresh");
    return this.refresh();
  },

  /**
  * Add a new constraint to a field
  *
  * @param {String}   name
  * @param {Mixed}    requirements      optional
  * @param {Number}   priority          optional
  * @param {Boolean}  isDomConstraint   optional
  */
  addConstraint: function addConstraint(name, requirements, priority, isDomConstraint) {

    if (window.Parsley._validatorRegistry.validators[name]) {
      var constraint = new _constraint2.default(this, name, requirements, priority, isDomConstraint);

      // if constraint already exist, delete it and push new version
      if ('undefined' !== this.constraintsByName[constraint.name]) this.removeConstraint(constraint.name);

      this.constraints.push(constraint);
      this.constraintsByName[constraint.name] = constraint;
    }

    return this;
  },

  // Remove a constraint
  removeConstraint: function removeConstraint(name) {
    for (var i = 0; i < this.constraints.length; i++) {
      if (name === this.constraints[i].name) {
        this.constraints.splice(i, 1);
        break;
      }
    }delete this.constraintsByName[name];
    return this;
  },

  // Update a constraint (Remove + re-add)
  updateConstraint: function updateConstraint(name, parameters, priority) {
    return this.removeConstraint(name).addConstraint(name, parameters, priority);
  },

  // # Internals

  // Internal only.
  // Bind constraints from config + options + DOM
  _bindConstraints: function _bindConstraints() {
    var constraints = [];
    var constraintsByName = {};

    // clean all existing DOM constraints to only keep javascript user constraints
    for (var i = 0; i < this.constraints.length; i++) {
      if (false === this.constraints[i].isDomConstraint) {
        constraints.push(this.constraints[i]);
        constraintsByName[this.constraints[i].name] = this.constraints[i];
      }
    }this.constraints = constraints;
    this.constraintsByName = constraintsByName;

    // then re-add Parsley DOM-API constraints
    for (var name in this.options) {
      this.addConstraint(name, this.options[name], undefined, true);
    } // finally, bind special HTML5 constraints
    return this._bindHtml5Constraints();
  },

  // Internal only.
  // Bind specific HTML5 constraints to be HTML5 compliant
  _bindHtml5Constraints: function _bindHtml5Constraints() {
    // html5 required
    if (null !== this.element.getAttribute('required')) this.addConstraint('required', true, undefined, true);

    // html5 pattern
    if (null !== this.element.getAttribute('pattern')) this.addConstraint('pattern', this.element.getAttribute('pattern'), undefined, true);

    // range
    var min = this.element.getAttribute('min');
    var max = this.element.getAttribute('max');
    if (null !== min && null !== max) this.addConstraint('range', [min, max], undefined, true);

    // HTML5 min
    else if (null !== min) this.addConstraint('min', min, undefined, true);

      // HTML5 max
      else if (null !== max) this.addConstraint('max', max, undefined, true);

    // length
    if (null !== this.element.getAttribute('minlength') && null !== this.element.getAttribute('maxlength')) this.addConstraint('length', [this.element.getAttribute('minlength'), this.element.getAttribute('maxlength')], undefined, true);

    // HTML5 minlength
    else if (null !== this.element.getAttribute('minlength')) this.addConstraint('minlength', this.element.getAttribute('minlength'), undefined, true);

      // HTML5 maxlength
      else if (null !== this.element.getAttribute('maxlength')) this.addConstraint('maxlength', this.element.getAttribute('maxlength'), undefined, true);

    // html5 types
    var type = _utils2.default.getType(this.element);

    // Small special case here for HTML5 number: integer validator if step attribute is undefined or an integer value, number otherwise
    if ('number' === type) {
      return this.addConstraint('type', ['number', {
        step: this.element.getAttribute('step') || '1',
        base: min || this.element.getAttribute('value')
      }], undefined, true);
      // Regular other HTML5 supported types
    } else if (/^(email|url|range|date)$/i.test(type)) {
      return this.addConstraint('type', type, undefined, true);
    }
    return this;
  },

  // Internal only.
  // Field is required if have required constraint without `false` value
  _isRequired: function _isRequired() {
    if ('undefined' === typeof this.constraintsByName.required) return false;

    return false !== this.constraintsByName.required.requirements;
  },

  // Internal only.
  // Shortcut to trigger an event
  _trigger: function _trigger(eventName) {
    return this.trigger('field:' + eventName);
  },

  // Internal only
  // Handles whitespace in a value
  // Use `data-parsley-whitespace="squish"` to auto squish input value
  // Use `data-parsley-whitespace="trim"` to auto trim input value
  _handleWhitespace: function _handleWhitespace(value) {
    if (true === this.options.trimValue) _utils2.default.warnOnce('data-parsley-trim-value="true" is deprecated, please use data-parsley-whitespace="trim"');

    if ('squish' === this.options.whitespace) value = value.replace(/\s{2,}/g, ' ');

    if ('trim' === this.options.whitespace || 'squish' === this.options.whitespace || true === this.options.trimValue) value = _utils2.default.trimString(value);

    return value;
  },

  _isDateInput: function _isDateInput() {
    var c = this.constraintsByName.type;
    return c && c.requirements === 'date';
  },

  // Internal only.
  // Returns the constraints, grouped by descending priority.
  // The result is thus an array of arrays of constraints.
  _getGroupedConstraints: function _getGroupedConstraints() {
    if (false === this.options.priorityEnabled) return [this.constraints];

    var groupedConstraints = [];
    var index = {};

    // Create array unique of priorities
    for (var i = 0; i < this.constraints.length; i++) {
      var p = this.constraints[i].priority;
      if (!index[p]) groupedConstraints.push(index[p] = []);
      index[p].push(this.constraints[i]);
    }
    // Sort them by priority DESC
    groupedConstraints.sort(function (a, b) {
      return b[0].priority - a[0].priority;
    });

    return groupedConstraints;
  }

};

exports.default = Field;

},{"./constraint":11,"./ui":20,"./utils":21,"jquery":1}],15:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _jquery = require('jquery');

var _jquery2 = _interopRequireDefault(_jquery);

var _base = require('./base');

var _base2 = _interopRequireDefault(_base);

var _utils = require('./utils');

var _utils2 = _interopRequireDefault(_utils);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

var Form = function Form(element, domOptions, options) {
  this.__class__ = 'Form';

  this.element = element;
  this.$element = (0, _jquery2.default)(element);
  this.domOptions = domOptions;
  this.options = options;
  this.parent = window.Parsley;

  this.fields = [];
  this.validationResult = null;
};

var statusMapping = { pending: null, resolved: true, rejected: false };

Form.prototype = {
  onSubmitValidate: function onSubmitValidate(event) {
    var _this = this;

    // This is a Parsley generated submit event, do not validate, do not prevent, simply exit and keep normal behavior
    if (true === event.parsley) return;

    // If we didn't come here through a submit button, use the first one in the form
    var submitSource = this._submitSource || this.$element.find(_utils2.default._SubmitSelector)[0];
    this._submitSource = null;
    this.$element.find('.parsley-synthetic-submit-button').prop('disabled', true);
    if (submitSource && null !== submitSource.getAttribute('formnovalidate')) return;

    window.Parsley._remoteCache = {};

    var promise = this.whenValidate({ event: event });

    if ('resolved' === promise.state() && false !== this._trigger('submit')) {
      // All good, let event go through. We make this distinction because browsers
      // differ in their handling of `submit` being called from inside a submit event [#1047]
    } else {
      // Rejected or pending: cancel this submit
      event.stopImmediatePropagation();
      event.preventDefault();
      if ('pending' === promise.state()) promise.done(function () {
        _this._submit(submitSource);
      });
    }
  },

  onSubmitButton: function onSubmitButton(event) {
    this._submitSource = event.currentTarget;
  },
  // internal
  // _submit submits the form, this time without going through the validations.
  // Care must be taken to "fake" the actual submit button being clicked.
  _submit: function _submit(submitSource) {
    if (false === this._trigger('submit')) return;
    // Add submit button's data
    if (submitSource) {
      var $synthetic = this.$element.find('.parsley-synthetic-submit-button').prop('disabled', false);
      if (0 === $synthetic.length) $synthetic = (0, _jquery2.default)('<input class="parsley-synthetic-submit-button" type="hidden">').appendTo(this.$element);
      $synthetic.attr({
        name: submitSource.getAttribute('name'),
        value: submitSource.getAttribute('value')
      });
    }

    this.$element.trigger(Object.assign(_jquery2.default.Event('submit'), { parsley: true }));
  },

  // Performs validation on fields while triggering events.
  // @returns `true` if all validations succeeds, `false`
  // if a failure is immediately detected, or `null`
  // if dependant on a promise.
  // Consider using `whenValidate` instead.
  validate: function validate(options) {
    if (arguments.length >= 1 && !_jquery2.default.isPlainObject(options)) {
      _utils2.default.warnOnce('Calling validate on a parsley form without passing arguments as an object is deprecated.');

      var _arguments = Array.prototype.slice.call(arguments),
          group = _arguments[0],
          force = _arguments[1],
          event = _arguments[2];

      options = { group: group, force: force, event: event };
    }
    return statusMapping[this.whenValidate(options).state()];
  },

  whenValidate: function whenValidate() {
    var _this2 = this,
        _Utils$all$done$fail$;

    var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
        group = _ref.group,
        force = _ref.force,
        event = _ref.event;

    this.submitEvent = event;
    if (event) {
      this.submitEvent = Object.assign({}, event, { preventDefault: function preventDefault() {
          _utils2.default.warnOnce("Using `this.submitEvent.preventDefault()` is deprecated; instead, call `this.validationResult = false`");
          _this2.validationResult = false;
        } });
    }
    this.validationResult = true;

    // fire validate event to eventually modify things before every validation
    this._trigger('validate');

    // Refresh form DOM options and form's fields that could have changed
    this._refreshFields();

    var promises = this._withoutReactualizingFormOptions(function () {
      return _jquery2.default.map(_this2.fields, function (field) {
        return field.whenValidate({ force: force, group: group });
      });
    });

    return (_Utils$all$done$fail$ = _utils2.default.all(promises).done(function () {
      _this2._trigger('success');
    }).fail(function () {
      _this2.validationResult = false;
      _this2.focus();
      _this2._trigger('error');
    }).always(function () {
      _this2._trigger('validated');
    })).pipe.apply(_Utils$all$done$fail$, _toConsumableArray(this._pipeAccordingToValidationResult()));
  },

  // Iterate over refreshed fields, and stop on first failure.
  // Returns `true` if all fields are valid, `false` if a failure is detected
  // or `null` if the result depends on an unresolved promise.
  // Prefer using `whenValid` instead.
  isValid: function isValid(options) {
    if (arguments.length >= 1 && !_jquery2.default.isPlainObject(options)) {
      _utils2.default.warnOnce('Calling isValid on a parsley form without passing arguments as an object is deprecated.');

      var _arguments2 = Array.prototype.slice.call(arguments),
          group = _arguments2[0],
          force = _arguments2[1];

      options = { group: group, force: force };
    }
    return statusMapping[this.whenValid(options).state()];
  },

  // Iterate over refreshed fields and validate them.
  // Returns a promise.
  // A validation that immediately fails will interrupt the validations.
  whenValid: function whenValid() {
    var _this3 = this;

    var _ref2 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
        group = _ref2.group,
        force = _ref2.force;

    this._refreshFields();

    var promises = this._withoutReactualizingFormOptions(function () {
      return _jquery2.default.map(_this3.fields, function (field) {
        return field.whenValid({ group: group, force: force });
      });
    });
    return _utils2.default.all(promises);
  },

  refresh: function refresh() {
    this._refreshFields();
    return this;
  },

  // Reset UI
  reset: function reset() {
    // Form case: emit a reset event for each field
    for (var i = 0; i < this.fields.length; i++) {
      this.fields[i].reset();
    }this._trigger('reset');
  },

  // Destroy Parsley instance (+ UI)
  destroy: function destroy() {
    // Field case: emit destroy event to clean UI and then destroy stored instance
    this._destroyUI();

    // Form case: destroy all its fields and then destroy stored instance
    for (var i = 0; i < this.fields.length; i++) {
      this.fields[i].destroy();
    }this.$element.removeData('Parsley');
    this._trigger('destroy');
  },

  _refreshFields: function _refreshFields() {
    return this.actualizeOptions()._bindFields();
  },

  _bindFields: function _bindFields() {
    var _this4 = this;

    var oldFields = this.fields;

    this.fields = [];
    this.fieldsMappedById = {};

    this._withoutReactualizingFormOptions(function () {
      _this4.$element.find(_this4.options.inputs).not(_this4.options.excluded).each(function (_, element) {
        var fieldInstance = new window.Parsley.Factory(element, {}, _this4);

        // Only add valid and not excluded `Field` and `FieldMultiple` children
        if (('Field' === fieldInstance.__class__ || 'FieldMultiple' === fieldInstance.__class__) && true !== fieldInstance.options.excluded) {
          var uniqueId = fieldInstance.__class__ + '-' + fieldInstance.__id__;
          if ('undefined' === typeof _this4.fieldsMappedById[uniqueId]) {
            _this4.fieldsMappedById[uniqueId] = fieldInstance;
            _this4.fields.push(fieldInstance);
          }
        }
      });

      _jquery2.default.each(_utils2.default.difference(oldFields, _this4.fields), function (_, field) {
        field.reset();
      });
    });
    return this;
  },

  // Internal only.
  // Looping on a form's fields to do validation or similar
  // will trigger reactualizing options on all of them, which
  // in turn will reactualize the form's options.
  // To avoid calling actualizeOptions so many times on the form
  // for nothing, _withoutReactualizingFormOptions temporarily disables
  // the method actualizeOptions on this form while `fn` is called.
  _withoutReactualizingFormOptions: function _withoutReactualizingFormOptions(fn) {
    var oldActualizeOptions = this.actualizeOptions;
    this.actualizeOptions = function () {
      return this;
    };
    var result = fn();
    this.actualizeOptions = oldActualizeOptions;
    return result;
  },

  // Internal only.
  // Shortcut to trigger an event
  // Returns true iff event is not interrupted and default not prevented.
  _trigger: function _trigger(eventName) {
    return this.trigger('form:' + eventName);
  }

};

exports.default = Form;

},{"./base":10,"./utils":21,"jquery":1}],16:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _jquery = require('jquery');

var _jquery2 = _interopRequireDefault(_jquery);

var _utils = require('./utils');

var _utils2 = _interopRequireDefault(_utils);

var _defaults = require('./defaults');

var _defaults2 = _interopRequireDefault(_defaults);

var _base = require('./base');

var _base2 = _interopRequireDefault(_base);

var _validator_registry = require('./validator_registry');

var _validator_registry2 = _interopRequireDefault(_validator_registry);

var _ui = require('./ui');

var _ui2 = _interopRequireDefault(_ui);

var _form = require('./form');

var _form2 = _interopRequireDefault(_form);

var _field = require('./field');

var _field2 = _interopRequireDefault(_field);

var _multiple = require('./multiple');

var _multiple2 = _interopRequireDefault(_multiple);

var _factory = require('./factory');

var _factory2 = _interopRequireDefault(_factory);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var vernums = _jquery2.default.fn.jquery.split('.');
if (parseInt(vernums[0]) <= 1 && parseInt(vernums[1]) < 8) {
  throw "The loaded version of jQuery is too old. Please upgrade to 1.8.x or better.";
}
if (!vernums.forEach) {
  _utils2.default.warn('Parsley requires ES5 to run properly. Please include https://github.com/es-shims/es5-shim');
}
// Inherit `on`, `off` & `trigger` to Parsley:
var Parsley = Object.assign(new _base2.default(), {
  element: document,
  $element: (0, _jquery2.default)(document),
  actualizeOptions: null,
  _resetOptions: null,
  Factory: _factory2.default,
  version: '@@version'
});

// Supplement Field and Form with Base
// This way, the constructors will have access to those methods
Object.assign(_field2.default.prototype, _ui2.default.Field, _base2.default.prototype);
Object.assign(_form2.default.prototype, _ui2.default.Form, _base2.default.prototype);
// Inherit actualizeOptions and _resetOptions:
Object.assign(_factory2.default.prototype, _base2.default.prototype);

// ### jQuery API
// `$('.elem').parsley(options)` or `$('.elem').psly(options)`
_jquery2.default.fn.parsley = _jquery2.default.fn.psly = function (options) {
  if (this.length > 1) {
    var instances = [];

    this.each(function () {
      instances.push((0, _jquery2.default)(this).parsley(options));
    });

    return instances;
  }

  // Return undefined if applied to non existing DOM element
  if (this.length == 0) {
    return;
  }

  return new _factory2.default(this[0], options);
};

// ### Field and Form extension
// Ensure the extension is now defined if it wasn't previously
if ('undefined' === typeof window.ParsleyExtend) window.ParsleyExtend = {};

// ### Parsley config
// Inherit from ParsleyDefault, and copy over any existing values
Parsley.options = Object.assign(_utils2.default.objectCreate(_defaults2.default), window.ParsleyConfig);
window.ParsleyConfig = Parsley.options; // Old way of accessing global options

// ### Globals
window.Parsley = window.psly = Parsley;
Parsley.Utils = _utils2.default;
window.ParsleyUtils = {};
_jquery2.default.each(_utils2.default, function (key, value) {
  if ('function' === typeof value) {
    window.ParsleyUtils[key] = function () {
      _utils2.default.warnOnce('Accessing `window.ParsleyUtils` is deprecated. Use `window.Parsley.Utils` instead.');
      return _utils2.default[key].apply(_utils2.default, arguments);
    };
  }
});

// ### Define methods that forward to the registry, and deprecate all access except through window.Parsley
var registry = window.Parsley._validatorRegistry = new _validator_registry2.default(window.ParsleyConfig.validators, window.ParsleyConfig.i18n);
window.ParsleyValidator = {};
_jquery2.default.each('setLocale addCatalog addMessage addMessages getErrorMessage formatMessage addValidator updateValidator removeValidator hasValidator'.split(' '), function (i, method) {
  window.Parsley[method] = function () {
    return registry[method].apply(registry, arguments);
  };
  window.ParsleyValidator[method] = function () {
    var _window$Parsley;

    _utils2.default.warnOnce('Accessing the method \'' + method + '\' through Validator is deprecated. Simply call \'window.Parsley.' + method + '(...)\'');
    return (_window$Parsley = window.Parsley)[method].apply(_window$Parsley, arguments);
  };
});

// ### UI
// Deprecated global object
window.Parsley.UI = _ui2.default;
window.ParsleyUI = {
  removeError: function removeError(instance, name, doNotUpdateClass) {
    var updateClass = true !== doNotUpdateClass;
    _utils2.default.warnOnce('Accessing UI is deprecated. Call \'removeError\' on the instance directly. Please comment in issue 1073 as to your need to call this method.');
    return instance.removeError(name, { updateClass: updateClass });
  },
  getErrorsMessages: function getErrorsMessages(instance) {
    _utils2.default.warnOnce('Accessing UI is deprecated. Call \'getErrorsMessages\' on the instance directly.');
    return instance.getErrorsMessages();
  }
};
_jquery2.default.each('addError updateError'.split(' '), function (i, method) {
  window.ParsleyUI[method] = function (instance, name, message, assert, doNotUpdateClass) {
    var updateClass = true !== doNotUpdateClass;
    _utils2.default.warnOnce('Accessing UI is deprecated. Call \'' + method + '\' on the instance directly. Please comment in issue 1073 as to your need to call this method.');
    return instance[method](name, { message: message, assert: assert, updateClass: updateClass });
  };
});

// ### PARSLEY auto-binding
// Prevent it by setting `ParsleyConfig.autoBind` to `false`
if (false !== window.ParsleyConfig.autoBind) {
  (0, _jquery2.default)(function () {
    // Works only on `data-parsley-validate`.
    if ((0, _jquery2.default)('[data-parsley-validate]').length) (0, _jquery2.default)('[data-parsley-validate]').parsley();
  });
}

exports.default = Parsley;

},{"./base":10,"./defaults":12,"./factory":13,"./field":14,"./form":15,"./multiple":17,"./ui":20,"./utils":21,"./validator_registry":23,"jquery":1}],17:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _jquery = require('jquery');

var _jquery2 = _interopRequireDefault(_jquery);

var _utils = require('./utils');

var _utils2 = _interopRequireDefault(_utils);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var Multiple = function Multiple() {
  this.__class__ = 'FieldMultiple';
};

Multiple.prototype = {
  // Add new `$element` sibling for multiple field
  addElement: function addElement($element) {
    this.$elements.push($element);

    return this;
  },

  // See `Field._refreshConstraints()`
  _refreshConstraints: function _refreshConstraints() {
    var fieldConstraints;

    this.constraints = [];

    // Select multiple special treatment
    if (this.element.nodeName === 'SELECT') {
      this.actualizeOptions()._bindConstraints();

      return this;
    }

    // Gather all constraints for each input in the multiple group
    for (var i = 0; i < this.$elements.length; i++) {

      // Check if element have not been dynamically removed since last binding
      if (!(0, _jquery2.default)('html').has(this.$elements[i]).length) {
        this.$elements.splice(i, 1);
        continue;
      }

      fieldConstraints = this.$elements[i].data('FieldMultiple')._refreshConstraints().constraints;

      for (var j = 0; j < fieldConstraints.length; j++) {
        this.addConstraint(fieldConstraints[j].name, fieldConstraints[j].requirements, fieldConstraints[j].priority, fieldConstraints[j].isDomConstraint);
      }
    }

    return this;
  },

  // See `Field.getValue()`
  getValue: function getValue() {
    // Value could be overriden in DOM
    if ('function' === typeof this.options.value) return this.options.value(this);else if ('undefined' !== typeof this.options.value) return this.options.value;

    // Radio input case
    if (this.element.nodeName === 'INPUT') {
      var type = _utils2.default.getType(this.element);
      if (type === 'radio') return this._findRelated().filter(':checked').val() || '';

      // checkbox input case
      if (type === 'checkbox') {
        var values = [];

        this._findRelated().filter(':checked').each(function () {
          values.push((0, _jquery2.default)(this).val());
        });

        return values;
      }
    }

    // Select multiple case
    if (this.element.nodeName === 'SELECT' && null === this.$element.val()) return [];

    // Default case that should never happen
    return this.$element.val();
  },

  _init: function _init() {
    this.$elements = [this.$element];

    return this;
  }
};

exports.default = Multiple;

},{"./utils":21,"jquery":1}],18:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var _jquery = require('jquery');

var _jquery2 = _interopRequireDefault(_jquery);

var _field = require('./field');

var _field2 = _interopRequireDefault(_field);

var _form = require('./form');

var _form2 = _interopRequireDefault(_form);

var _utils = require('./utils');

var _utils2 = _interopRequireDefault(_utils);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

var o = (0, _jquery2.default)({});
var deprecated = function deprecated() {
  _utils2.default.warnOnce("Parsley's pubsub module is deprecated; use the 'on' and 'off' methods on parsley instances or window.Parsley");
};

// Returns an event handler that calls `fn` with the arguments it expects
function adapt(fn, context) {
  // Store to allow unbinding
  if (!fn.parsleyAdaptedCallback) {
    fn.parsleyAdaptedCallback = function () {
      var args = Array.prototype.slice.call(arguments, 0);
      args.unshift(this);
      fn.apply(context || o, args);
    };
  }
  return fn.parsleyAdaptedCallback;
}

var eventPrefix = 'parsley:';
// Converts 'parsley:form:validate' into 'form:validate'
function eventName(name) {
  if (name.lastIndexOf(eventPrefix, 0) === 0) return name.substr(eventPrefix.length);
  return name;
}

// $.listen is deprecated. Use Parsley.on instead.
_jquery2.default.listen = function (name, callback) {
  var context;
  deprecated();
  if ('object' === _typeof(arguments[1]) && 'function' === typeof arguments[2]) {
    context = arguments[1];
    callback = arguments[2];
  }

  if ('function' !== typeof callback) throw new Error('Wrong parameters');

  window.Parsley.on(eventName(name), adapt(callback, context));
};

_jquery2.default.listenTo = function (instance, name, fn) {
  deprecated();
  if (!(instance instanceof _field2.default) && !(instance instanceof _form2.default)) throw new Error('Must give Parsley instance');

  if ('string' !== typeof name || 'function' !== typeof fn) throw new Error('Wrong parameters');

  instance.on(eventName(name), adapt(fn));
};

_jquery2.default.unsubscribe = function (name, fn) {
  deprecated();
  if ('string' !== typeof name || 'function' !== typeof fn) throw new Error('Wrong arguments');
  window.Parsley.off(eventName(name), fn.parsleyAdaptedCallback);
};

_jquery2.default.unsubscribeTo = function (instance, name) {
  deprecated();
  if (!(instance instanceof _field2.default) && !(instance instanceof _form2.default)) throw new Error('Must give Parsley instance');
  instance.off(eventName(name));
};

_jquery2.default.unsubscribeAll = function (name) {
  deprecated();
  window.Parsley.off(eventName(name));
  (0, _jquery2.default)('form,input,textarea,select').each(function () {
    var instance = (0, _jquery2.default)(this).data('Parsley');
    if (instance) {
      instance.off(eventName(name));
    }
  });
};

// $.emit is deprecated. Use jQuery events instead.
_jquery2.default.emit = function (name, instance) {
  var _instance;

  deprecated();
  var instanceGiven = instance instanceof _field2.default || instance instanceof _form2.default;
  var args = Array.prototype.slice.call(arguments, instanceGiven ? 2 : 1);
  args.unshift(eventName(name));
  if (!instanceGiven) {
    instance = window.Parsley;
  }
  (_instance = instance).trigger.apply(_instance, _toConsumableArray(args));
};

exports.default = {};

},{"./field":14,"./form":15,"./utils":21,"jquery":1}],19:[function(require,module,exports){
'use strict';

var _jquery = require('jquery');

var _jquery2 = _interopRequireDefault(_jquery);

var _utils = require('./utils');

var _utils2 = _interopRequireDefault(_utils);

var _base = require('./base');

var _base2 = _interopRequireDefault(_base);

var _main = require('./main');

var _main2 = _interopRequireDefault(_main);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

_jquery2.default.extend(true, _main2.default, {
  asyncValidators: {
    'default': {
      fn: function fn(xhr) {
        // By default, only status 2xx are deemed successful.
        // Note: we use status instead of state() because responses with status 200
        // but invalid messages (e.g. an empty body for content type set to JSON) will
        // result in state() === 'rejected'.
        return xhr.status >= 200 && xhr.status < 300;
      },
      url: false
    },
    reverse: {
      fn: function fn(xhr) {
        // If reverse option is set, a failing ajax request is considered successful
        return xhr.status < 200 || xhr.status >= 300;
      },
      url: false
    }
  },

  addAsyncValidator: function addAsyncValidator(name, fn, url, options) {
    _main2.default.asyncValidators[name] = {
      fn: fn,
      url: url || false,
      options: options || {}
    };

    return this;
  }

});

_main2.default.addValidator('remote', {
  requirementType: {
    '': 'string',
    'validator': 'string',
    'reverse': 'boolean',
    'options': 'object'
  },

  validateString: function validateString(value, url, options, instance) {
    var data = {};
    var ajaxOptions;
    var csr;
    var validator = options.validator || (true === options.reverse ? 'reverse' : 'default');

    if ('undefined' === typeof _main2.default.asyncValidators[validator]) throw new Error('Calling an undefined async validator: `' + validator + '`');

    url = _main2.default.asyncValidators[validator].url || url;

    // Fill current value
    if (url.indexOf('{value}') > -1) {
      url = url.replace('{value}', encodeURIComponent(value));
    } else {
      data[instance.element.getAttribute('name') || instance.element.getAttribute('id')] = value;
    }

    // Merge options passed in from the function with the ones in the attribute
    var remoteOptions = _jquery2.default.extend(true, options.options || {}, _main2.default.asyncValidators[validator].options);

    // All `$.ajax(options)` could be overridden or extended directly from DOM in `data-parsley-remote-options`
    ajaxOptions = _jquery2.default.extend(true, {}, {
      url: url,
      data: data,
      type: 'GET'
    }, remoteOptions);

    // Generate store key based on ajax options
    instance.trigger('field:ajaxoptions', instance, ajaxOptions);

    csr = _jquery2.default.param(ajaxOptions);

    // Initialise querry cache
    if ('undefined' === typeof _main2.default._remoteCache) _main2.default._remoteCache = {};

    // Try to retrieve stored xhr
    var xhr = _main2.default._remoteCache[csr] = _main2.default._remoteCache[csr] || _jquery2.default.ajax(ajaxOptions);

    var handleXhr = function handleXhr() {
      var result = _main2.default.asyncValidators[validator].fn.call(instance, xhr, url, options);
      if (!result) // Map falsy results to rejected promise
        result = _jquery2.default.Deferred().reject();
      return _jquery2.default.when(result);
    };

    return xhr.then(handleXhr, handleXhr);
  },

  priority: -1
});

_main2.default.on('form:submit', function () {
  _main2.default._remoteCache = {};
});

_base2.default.prototype.addAsyncValidator = function () {
  _utils2.default.warnOnce('Accessing the method `addAsyncValidator` through an instance is deprecated. Simply call `Parsley.addAsyncValidator(...)`');
  return _main2.default.addAsyncValidator.apply(_main2.default, arguments);
};

},{"./base":10,"./main":16,"./utils":21,"jquery":1}],20:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var _jquery = require('jquery');

var _jquery2 = _interopRequireDefault(_jquery);

var _utils = require('./utils');

var _utils2 = _interopRequireDefault(_utils);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var UI = {};

var diffResults = function diffResults(newResult, oldResult, deep) {
  var added = [];
  var kept = [];

  for (var i = 0; i < newResult.length; i++) {
    var found = false;

    for (var j = 0; j < oldResult.length; j++) {
      if (newResult[i].assert.name === oldResult[j].assert.name) {
        found = true;
        break;
      }
    }if (found) kept.push(newResult[i]);else added.push(newResult[i]);
  }

  return {
    kept: kept,
    added: added,
    removed: !deep ? diffResults(oldResult, newResult, true).added : []
  };
};

UI.Form = {

  _actualizeTriggers: function _actualizeTriggers() {
    var _this = this;

    this.$element.on('submit.Parsley', function (evt) {
      _this.onSubmitValidate(evt);
    });
    this.$element.on('click.Parsley', _utils2.default._SubmitSelector, function (evt) {
      _this.onSubmitButton(evt);
    });

    // UI could be disabled
    if (false === this.options.uiEnabled) return;

    this.element.setAttribute('novalidate', '');
  },

  focus: function focus() {
    this._focusedField = null;

    if (true === this.validationResult || 'none' === this.options.focus) return null;

    for (var i = 0; i < this.fields.length; i++) {
      var field = this.fields[i];
      if (true !== field.validationResult && field.validationResult.length > 0 && 'undefined' === typeof field.options.noFocus) {
        this._focusedField = field.$element;
        if ('first' === this.options.focus) break;
      }
    }

    if (null === this._focusedField) return null;

    return this._focusedField.focus();
  },

  _destroyUI: function _destroyUI() {
    // Reset all event listeners
    this.$element.off('.Parsley');
  }

};

UI.Field = {

  _reflowUI: function _reflowUI() {
    this._buildUI();

    // If this field doesn't have an active UI don't bother doing something
    if (!this._ui) return;

    // Diff between two validation results
    var diff = diffResults(this.validationResult, this._ui.lastValidationResult);

    // Then store current validation result for next reflow
    this._ui.lastValidationResult = this.validationResult;

    // Handle valid / invalid / none field class
    this._manageStatusClass();

    // Add, remove, updated errors messages
    this._manageErrorsMessages(diff);

    // Triggers impl
    this._actualizeTriggers();

    // If field is not valid for the first time, bind keyup trigger to ease UX and quickly inform user
    if ((diff.kept.length || diff.added.length) && !this._failedOnce) {
      this._failedOnce = true;
      this._actualizeTriggers();
    }
  },

  // Returns an array of field's error message(s)
  getErrorsMessages: function getErrorsMessages() {
    // No error message, field is valid
    if (true === this.validationResult) return [];

    var messages = [];

    for (var i = 0; i < this.validationResult.length; i++) {
      messages.push(this.validationResult[i].errorMessage || this._getErrorMessage(this.validationResult[i].assert));
    }return messages;
  },

  // It's a goal of Parsley that this method is no longer required [#1073]
  addError: function addError(name) {
    var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},
        message = _ref.message,
        assert = _ref.assert,
        _ref$updateClass = _ref.updateClass,
        updateClass = _ref$updateClass === undefined ? true : _ref$updateClass;

    this._buildUI();
    this._addError(name, { message: message, assert: assert });

    if (updateClass) this._errorClass();
  },

  // It's a goal of Parsley that this method is no longer required [#1073]
  updateError: function updateError(name) {
    var _ref2 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},
        message = _ref2.message,
        assert = _ref2.assert,
        _ref2$updateClass = _ref2.updateClass,
        updateClass = _ref2$updateClass === undefined ? true : _ref2$updateClass;

    this._buildUI();
    this._updateError(name, { message: message, assert: assert });

    if (updateClass) this._errorClass();
  },

  // It's a goal of Parsley that this method is no longer required [#1073]
  removeError: function removeError(name) {
    var _ref3 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},
        _ref3$updateClass = _ref3.updateClass,
        updateClass = _ref3$updateClass === undefined ? true : _ref3$updateClass;

    this._buildUI();
    this._removeError(name);

    // edge case possible here: remove a standard Parsley error that is still failing in this.validationResult
    // but highly improbable cuz' manually removing a well Parsley handled error makes no sense.
    if (updateClass) this._manageStatusClass();
  },

  _manageStatusClass: function _manageStatusClass() {
    if (this.hasConstraints() && this.needsValidation() && true === this.validationResult) this._successClass();else if (this.validationResult.length > 0) this._errorClass();else this._resetClass();
  },

  _manageErrorsMessages: function _manageErrorsMessages(diff) {
    if ('undefined' !== typeof this.options.errorsMessagesDisabled) return;

    // Case where we have errorMessage option that configure an unique field error message, regardless failing validators
    if ('undefined' !== typeof this.options.errorMessage) {
      if (diff.added.length || diff.kept.length) {
        this._insertErrorWrapper();

        if (0 === this._ui.$errorsWrapper.find('.parsley-custom-error-message').length) this._ui.$errorsWrapper.append((0, _jquery2.default)(this.options.errorTemplate).addClass('parsley-custom-error-message'));

        return this._ui.$errorsWrapper.addClass('filled').find('.parsley-custom-error-message').html(this.options.errorMessage);
      }

      return this._ui.$errorsWrapper.removeClass('filled').find('.parsley-custom-error-message').remove();
    }

    // Show, hide, update failing constraints messages
    for (var i = 0; i < diff.removed.length; i++) {
      this._removeError(diff.removed[i].assert.name);
    }for (i = 0; i < diff.added.length; i++) {
      this._addError(diff.added[i].assert.name, { message: diff.added[i].errorMessage, assert: diff.added[i].assert });
    }for (i = 0; i < diff.kept.length; i++) {
      this._updateError(diff.kept[i].assert.name, { message: diff.kept[i].errorMessage, assert: diff.kept[i].assert });
    }
  },

  _addError: function _addError(name, _ref4) {
    var message = _ref4.message,
        assert = _ref4.assert;

    this._insertErrorWrapper();
    this._ui.$errorClassHandler.attr('aria-describedby', this._ui.errorsWrapperId);
    this._ui.$errorsWrapper.addClass('filled').append((0, _jquery2.default)(this.options.errorTemplate).addClass('parsley-' + name).html(message || this._getErrorMessage(assert)));
  },

  _updateError: function _updateError(name, _ref5) {
    var message = _ref5.message,
        assert = _ref5.assert;

    this._ui.$errorsWrapper.addClass('filled').find('.parsley-' + name).html(message || this._getErrorMessage(assert));
  },

  _removeError: function _removeError(name) {
    this._ui.$errorClassHandler.removeAttr('aria-describedby');
    this._ui.$errorsWrapper.removeClass('filled').find('.parsley-' + name).remove();
  },

  _getErrorMessage: function _getErrorMessage(constraint) {
    var customConstraintErrorMessage = constraint.name + 'Message';

    if ('undefined' !== typeof this.options[customConstraintErrorMessage]) return window.Parsley.formatMessage(this.options[customConstraintErrorMessage], constraint.requirements);

    return window.Parsley.getErrorMessage(constraint);
  },

  _buildUI: function _buildUI() {
    // UI could be already built or disabled
    if (this._ui || false === this.options.uiEnabled) return;

    var _ui = {};

    // Give field its Parsley id in DOM
    this.element.setAttribute(this.options.namespace + 'id', this.__id__);

    /** Generate important UI elements and store them in this **/
    // $errorClassHandler is the $element that woul have parsley-error and parsley-success classes
    _ui.$errorClassHandler = this._manageClassHandler();

    // $errorsWrapper is a div that would contain the various field errors, it will be appended into $errorsContainer
    _ui.errorsWrapperId = 'parsley-id-' + (this.options.multiple ? 'multiple-' + this.options.multiple : this.__id__);
    _ui.$errorsWrapper = (0, _jquery2.default)(this.options.errorsWrapper).attr('id', _ui.errorsWrapperId);

    // ValidationResult UI storage to detect what have changed bwt two validations, and update DOM accordingly
    _ui.lastValidationResult = [];
    _ui.validationInformationVisible = false;

    // Store it in this for later
    this._ui = _ui;
  },

  // Determine which element will have `parsley-error` and `parsley-success` classes
  _manageClassHandler: function _manageClassHandler() {
    // Class handled could also be determined by function given in Parsley options
    if ('string' === typeof this.options.classHandler && (0, _jquery2.default)(this.options.classHandler).length) return (0, _jquery2.default)(this.options.classHandler);

    // Class handled could also be determined by function given in Parsley options
    var $handlerFunction = this.options.classHandler;

    // It might also be the function name of a global function
    if ('string' === typeof this.options.classHandler && 'function' === typeof window[this.options.classHandler]) $handlerFunction = window[this.options.classHandler];

    if ('function' === typeof $handlerFunction) {
      var $handler = $handlerFunction.call(this, this);

      // If this function returned a valid existing DOM element, go for it
      if ('undefined' !== typeof $handler && $handler.length) return $handler;
    } else if ('object' === (typeof $handlerFunction === 'undefined' ? 'undefined' : _typeof($handlerFunction)) && $handlerFunction instanceof jQuery && $handlerFunction.length) {
      return $handlerFunction;
    } else if ($handlerFunction) {
      _utils2.default.warn('The class handler `' + $handlerFunction + '` does not exist in DOM nor as a global JS function');
    }

    return this._inputHolder();
  },

  _inputHolder: function _inputHolder() {
    // if simple element (input, texatrea, select...) it will perfectly host the classes and precede the error container
    if (!this.options.multiple || this.element.nodeName === 'SELECT') return this.$element;

    // But if multiple element (radio, checkbox), that would be their parent
    return this.$element.parent();
  },

  _insertErrorWrapper: function _insertErrorWrapper() {
    var $errorsContainer = this.options.errorsContainer;

    // Nothing to do if already inserted
    if (0 !== this._ui.$errorsWrapper.parent().length) return this._ui.$errorsWrapper.parent();

    if ('string' === typeof $errorsContainer) {
      if ((0, _jquery2.default)($errorsContainer).length) return (0, _jquery2.default)($errorsContainer).append(this._ui.$errorsWrapper);else if ('function' === typeof window[$errorsContainer]) $errorsContainer = window[$errorsContainer];else _utils2.default.warn('The errors container `' + $errorsContainer + '` does not exist in DOM nor as a global JS function');
    }

    if ('function' === typeof $errorsContainer) $errorsContainer = $errorsContainer.call(this, this);

    if ('object' === (typeof $errorsContainer === 'undefined' ? 'undefined' : _typeof($errorsContainer)) && $errorsContainer.length) return $errorsContainer.append(this._ui.$errorsWrapper);

    return this._inputHolder().after(this._ui.$errorsWrapper);
  },

  _actualizeTriggers: function _actualizeTriggers() {
    var _this2 = this;

    var $toBind = this._findRelated();
    var trigger;

    // Remove Parsley events already bound on this field
    $toBind.off('.Parsley');
    if (this._failedOnce) $toBind.on(_utils2.default.namespaceEvents(this.options.triggerAfterFailure, 'Parsley'), function () {
      _this2._validateIfNeeded();
    });else if (trigger = _utils2.default.namespaceEvents(this.options.trigger, 'Parsley')) {
      $toBind.on(trigger, function (event) {
        _this2._validateIfNeeded(event);
      });
    }
  },

  _validateIfNeeded: function _validateIfNeeded(event) {
    var _this3 = this;

    // For keyup, keypress, keydown, input... events that could be a little bit obstrusive
    // do not validate if val length < min threshold on first validation. Once field have been validated once and info
    // about success or failure have been displayed, always validate with this trigger to reflect every yalidation change.
    if (event && /key|input/.test(event.type)) if (!(this._ui && this._ui.validationInformationVisible) && this.getValue().length <= this.options.validationThreshold) return;

    if (this.options.debounce) {
      window.clearTimeout(this._debounced);
      this._debounced = window.setTimeout(function () {
        return _this3.validate();
      }, this.options.debounce);
    } else this.validate();
  },

  _resetUI: function _resetUI() {
    // Reset all event listeners
    this._failedOnce = false;
    this._actualizeTriggers();

    // Nothing to do if UI never initialized for this field
    if ('undefined' === typeof this._ui) return;

    // Reset all errors' li
    this._ui.$errorsWrapper.removeClass('filled').children().remove();

    // Reset validation class
    this._resetClass();

    // Reset validation flags and last validation result
    this._ui.lastValidationResult = [];
    this._ui.validationInformationVisible = false;
  },

  _destroyUI: function _destroyUI() {
    this._resetUI();

    if ('undefined' !== typeof this._ui) this._ui.$errorsWrapper.remove();

    delete this._ui;
  },

  _successClass: function _successClass() {
    this._ui.validationInformationVisible = true;
    this._ui.$errorClassHandler.removeClass(this.options.errorClass).addClass(this.options.successClass);
  },
  _errorClass: function _errorClass() {
    this._ui.validationInformationVisible = true;
    this._ui.$errorClassHandler.removeClass(this.options.successClass).addClass(this.options.errorClass);
  },
  _resetClass: function _resetClass() {
    this._ui.$errorClassHandler.removeClass(this.options.successClass).removeClass(this.options.errorClass);
  }
};

exports.default = UI;

},{"./utils":21,"jquery":1}],21:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

var _jquery = require('jquery');

var _jquery2 = _interopRequireDefault(_jquery);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

var globalID = 1;
var pastWarnings = {};

var Utils = {
  // Parsley DOM-API
  // returns object from dom attributes and values
  attr: function attr(element, namespace, obj) {
    var i;
    var attribute;
    var attributes;
    var regex = new RegExp('^' + namespace, 'i');

    if ('undefined' === typeof obj) obj = {};else {
      // Clear all own properties. This won't affect prototype's values
      for (i in obj) {
        if (obj.hasOwnProperty(i)) delete obj[i];
      }
    }

    if (!element) return obj;

    attributes = element.attributes;
    for (i = attributes.length; i--;) {
      attribute = attributes[i];

      if (attribute && attribute.specified && regex.test(attribute.name)) {
        obj[this.camelize(attribute.name.slice(namespace.length))] = this.deserializeValue(attribute.value);
      }
    }

    return obj;
  },

  checkAttr: function checkAttr(element, namespace, _checkAttr) {
    return element.hasAttribute(namespace + _checkAttr);
  },

  setAttr: function setAttr(element, namespace, attr, value) {
    element.setAttribute(this.dasherize(namespace + attr), String(value));
  },

  getType: function getType(element) {
    return element.getAttribute('type') || 'text';
  },

  generateID: function generateID() {
    return '' + globalID++;
  },

  /** Third party functions **/
  deserializeValue: function deserializeValue(value) {
    var num;

    try {
      return value ? value == "true" || (value == "false" ? false : value == "null" ? null : !isNaN(num = Number(value)) ? num : /^[\[\{]/.test(value) ? JSON.parse(value) : value) : value;
    } catch (e) {
      return value;
    }
  },

  // Zepto camelize function
  camelize: function camelize(str) {
    return str.replace(/-+(.)?/g, function (match, chr) {
      return chr ? chr.toUpperCase() : '';
    });
  },

  // Zepto dasherize function
  dasherize: function dasherize(str) {
    return str.replace(/::/g, '/').replace(/([A-Z]+)([A-Z][a-z])/g, '$1_$2').replace(/([a-z\d])([A-Z])/g, '$1_$2').replace(/_/g, '-').toLowerCase();
  },

  warn: function warn() {
    var _window$console;

    if (window.console && 'function' === typeof window.console.warn) (_window$console = window.console).warn.apply(_window$console, arguments);
  },

  warnOnce: function warnOnce(msg) {
    if (!pastWarnings[msg]) {
      pastWarnings[msg] = true;
      this.warn.apply(this, arguments);
    }
  },

  _resetWarnings: function _resetWarnings() {
    pastWarnings = {};
  },

  trimString: function trimString(string) {
    return string.replace(/^\s+|\s+$/g, '');
  },

  parse: {
    date: function date(string) {
      var parsed = string.match(/^(\d{4,})-(\d\d)-(\d\d)$/);
      if (!parsed) return null;

      var _parsed$map = parsed.map(function (x) {
        return parseInt(x, 10);
      }),
          _parsed$map2 = _slicedToArray(_parsed$map, 4),
          _ = _parsed$map2[0],
          year = _parsed$map2[1],
          month = _parsed$map2[2],
          day = _parsed$map2[3];

      var date = new Date(year, month - 1, day);
      if (date.getFullYear() !== year || date.getMonth() + 1 !== month || date.getDate() !== day) return null;
      return date;
    },
    string: function string(_string) {
      return _string;
    },
    integer: function integer(string) {
      if (isNaN(string)) return null;
      return parseInt(string, 10);
    },
    number: function number(string) {
      if (isNaN(string)) throw null;
      return parseFloat(string);
    },
    'boolean': function _boolean(string) {
      return !/^\s*false\s*$/i.test(string);
    },
    object: function object(string) {
      return Utils.deserializeValue(string);
    },
    regexp: function regexp(_regexp) {
      var flags = '';

      // Test if RegExp is literal, if not, nothing to be done, otherwise, we need to isolate flags and pattern
      if (/^\/.*\/(?:[gimy]*)$/.test(_regexp)) {
        // Replace the regexp literal string with the first match group: ([gimy]*)
        // If no flag is present, this will be a blank string
        flags = _regexp.replace(/.*\/([gimy]*)$/, '$1');
        // Again, replace the regexp literal string with the first match group:
        // everything excluding the opening and closing slashes and the flags
        _regexp = _regexp.replace(new RegExp('^/(.*?)/' + flags + '$'), '$1');
      } else {
        // Anchor regexp:
        _regexp = '^' + _regexp + '$';
      }
      return new RegExp(_regexp, flags);
    }
  },

  parseRequirement: function parseRequirement(requirementType, string) {
    var converter = this.parse[requirementType || 'string'];
    if (!converter) throw 'Unknown requirement specification: "' + requirementType + '"';
    var converted = converter(string);
    if (converted === null) throw 'Requirement is not a ' + requirementType + ': "' + string + '"';
    return converted;
  },

  namespaceEvents: function namespaceEvents(events, namespace) {
    events = this.trimString(events || '').split(/\s+/);
    if (!events[0]) return '';
    return _jquery2.default.map(events, function (evt) {
      return evt + '.' + namespace;
    }).join(' ');
  },

  difference: function difference(array, remove) {
    // This is O(N^2), should be optimized
    var result = [];
    _jquery2.default.each(array, function (_, elem) {
      if (remove.indexOf(elem) == -1) result.push(elem);
    });
    return result;
  },

  // Alter-ego to native Promise.all, but for jQuery
  all: function all(promises) {
    // jQuery treats $.when() and $.when(singlePromise) differently; let's avoid that and add spurious elements
    return _jquery2.default.when.apply(_jquery2.default, _toConsumableArray(promises).concat([42, 42]));
  },

  // Object.create polyfill, see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/create#Polyfill
  objectCreate: Object.create || function () {
    var Object = function Object() {};
    return function (prototype) {
      if (arguments.length > 1) {
        throw Error('Second argument not supported');
      }
      if ((typeof prototype === 'undefined' ? 'undefined' : _typeof(prototype)) != 'object') {
        throw TypeError('Argument must be an object');
      }
      Object.prototype = prototype;
      var result = new Object();
      Object.prototype = null;
      return result;
    };
  }(),

  _SubmitSelector: 'input[type="submit"], button:submit'
};

exports.default = Utils;

},{"jquery":1}],22:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _jquery = require('jquery');

var _jquery2 = _interopRequireDefault(_jquery);

var _utils = require('./utils');

var _utils2 = _interopRequireDefault(_utils);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var convertArrayRequirement = function convertArrayRequirement(string, length) {
  var m = string.match(/^\s*\[(.*)\]\s*$/);
  if (!m) throw 'Requirement is not an array: "' + string + '"';
  var values = m[1].split(',').map(_utils2.default.trimString);
  if (values.length !== length) throw 'Requirement has ' + values.length + ' values when ' + length + ' are needed';
  return values;
};

var convertExtraOptionRequirement = function convertExtraOptionRequirement(requirementSpec, string, extraOptionReader) {
  var main = null;
  var extra = {};
  for (var key in requirementSpec) {
    if (key) {
      var value = extraOptionReader(key);
      if ('string' === typeof value) value = _utils2.default.parseRequirement(requirementSpec[key], value);
      extra[key] = value;
    } else {
      main = _utils2.default.parseRequirement(requirementSpec[key], string);
    }
  }
  return [main, extra];
};

// A Validator needs to implement the methods `validate` and `parseRequirements`

var Validator = function Validator(spec) {
  _jquery2.default.extend(true, this, spec);
};

Validator.prototype = {
  // Returns `true` iff the given `value` is valid according the given requirements.
  validate: function validate(value, requirementFirstArg) {
    if (this.fn) {
      // Legacy style validator

      if (arguments.length > 3) // If more args then value, requirement, instance...
        requirementFirstArg = [].slice.call(arguments, 1, -1); // Skip first arg (value) and last (instance), combining the rest
      return this.fn(value, requirementFirstArg);
    }

    if (Array.isArray(value)) {
      if (!this.validateMultiple) throw 'Validator `' + this.name + '` does not handle multiple values';
      return this.validateMultiple.apply(this, arguments);
    } else {
      var instance = arguments[arguments.length - 1];
      if (this.validateDate && instance._isDateInput()) {
        arguments[0] = _utils2.default.parse.date(arguments[0]);
        if (arguments[0] === null) return false;
        return this.validateDate.apply(this, arguments);
      }
      if (this.validateNumber) {
        if (isNaN(value)) return false;
        arguments[0] = parseFloat(arguments[0]);
        return this.validateNumber.apply(this, arguments);
      }
      if (this.validateString) {
        return this.validateString.apply(this, arguments);
      }
      throw 'Validator `' + this.name + '` only handles multiple values';
    }
  },

  // Parses `requirements` into an array of arguments,
  // according to `this.requirementType`
  parseRequirements: function parseRequirements(requirements, extraOptionReader) {
    if ('string' !== typeof requirements) {
      // Assume requirement already parsed
      // but make sure we return an array
      return Array.isArray(requirements) ? requirements : [requirements];
    }
    var type = this.requirementType;
    if (Array.isArray(type)) {
      var values = convertArrayRequirement(requirements, type.length);
      for (var i = 0; i < values.length; i++) {
        values[i] = _utils2.default.parseRequirement(type[i], values[i]);
      }return values;
    } else if (_jquery2.default.isPlainObject(type)) {
      return convertExtraOptionRequirement(type, requirements, extraOptionReader);
    } else {
      return [_utils2.default.parseRequirement(type, requirements)];
    }
  },
  // Defaults:
  requirementType: 'string',

  priority: 2

};

exports.default = Validator;

},{"./utils":21,"jquery":1}],23:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var _jquery = require('jquery');

var _jquery2 = _interopRequireDefault(_jquery);

var _utils = require('./utils');

var _utils2 = _interopRequireDefault(_utils);

var _defaults = require('./defaults');

var _defaults2 = _interopRequireDefault(_defaults);

var _validator = require('./validator');

var _validator2 = _interopRequireDefault(_validator);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

var ValidatorRegistry = function ValidatorRegistry(validators, catalog) {
  this.__class__ = 'ValidatorRegistry';

  // Default Parsley locale is en
  this.locale = 'en';

  this.init(validators || {}, catalog || {});
};

var typeTesters = {
  email: /^((([a-zA-Z]|\d|[!#\$%&'\*\+\-\/=\?\^_`{\|}~]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])+(\.([a-zA-Z]|\d|[!#\$%&'\*\+\-\/=\?\^_`{\|}~]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])+)*)|((\x22)((((\x20|\x09)*(\x0d\x0a))?(\x20|\x09)+)?(([\x01-\x08\x0b\x0c\x0e-\x1f\x7f]|\x21|[\x23-\x5b]|[\x5d-\x7e]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(\\([\x01-\x09\x0b\x0c\x0d-\x7f]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF]))))*(((\x20|\x09)*(\x0d\x0a))?(\x20|\x09)+)?(\x22)))@((([a-zA-Z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(([a-zA-Z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])([a-zA-Z]|\d|-|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])*([a-zA-Z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])))\.)+(([a-zA-Z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(([a-zA-Z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])([a-zA-Z]|\d|-|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])*([a-zA-Z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])))$/,

  // Follow https://www.w3.org/TR/html5/infrastructure.html#floating-point-numbers
  number: /^-?(\d*\.)?\d+(e[-+]?\d+)?$/i,

  integer: /^-?\d+$/,

  digits: /^\d+$/,

  alphanum: /^\w+$/i,

  date: {
    test: function test(value) {
      return _utils2.default.parse.date(value) !== null;
    }
  },

  url: new RegExp("^" +
  // protocol identifier
  "(?:(?:https?|ftp)://)?" + // ** mod: make scheme optional
  // user:pass authentication
  "(?:\\S+(?::\\S*)?@)?" + "(?:" +
  // IP address exclusion
  // private & local networks
  // "(?!(?:10|127)(?:\\.\\d{1,3}){3})" +   // ** mod: allow local networks
  // "(?!(?:169\\.254|192\\.168)(?:\\.\\d{1,3}){2})" +  // ** mod: allow local networks
  // "(?!172\\.(?:1[6-9]|2\\d|3[0-1])(?:\\.\\d{1,3}){2})" +  // ** mod: allow local networks
  // IP address dotted notation octets
  // excludes loopback network 0.0.0.0
  // excludes reserved space >= 224.0.0.0
  // excludes network & broacast addresses
  // (first & last IP address of each class)
  "(?:[1-9]\\d?|1\\d\\d|2[01]\\d|22[0-3])" + "(?:\\.(?:1?\\d{1,2}|2[0-4]\\d|25[0-5])){2}" + "(?:\\.(?:[1-9]\\d?|1\\d\\d|2[0-4]\\d|25[0-4]))" + "|" +
  // host name
  '(?:(?:[a-zA-Z\\u00a1-\\uffff0-9]-*)*[a-zA-Z\\u00a1-\\uffff0-9]+)' +
  // domain name
  '(?:\\.(?:[a-zA-Z\\u00a1-\\uffff0-9]-*)*[a-zA-Z\\u00a1-\\uffff0-9]+)*' +
  // TLD identifier
  '(?:\\.(?:[a-zA-Z\\u00a1-\\uffff]{2,}))' + ")" +
  // port number
  "(?::\\d{2,5})?" +
  // resource path
  "(?:/\\S*)?" + "$")
};
typeTesters.range = typeTesters.number;

// See http://stackoverflow.com/a/10454560/8279
var decimalPlaces = function decimalPlaces(num) {
  var match = ('' + num).match(/(?:\.(\d+))?(?:[eE]([+-]?\d+))?$/);
  if (!match) {
    return 0;
  }
  return Math.max(0,
  // Number of digits right of decimal point.
  (match[1] ? match[1].length : 0) - (
  // Adjust for scientific notation.
  match[2] ? +match[2] : 0));
};

// parseArguments('number', ['1', '2']) => [1, 2]
var parseArguments = function parseArguments(type, args) {
  return args.map(_utils2.default.parse[type]);
};
// operatorToValidator returns a validating function for an operator function, applied to the given type
var operatorToValidator = function operatorToValidator(type, operator) {
  return function (value) {
    for (var _len = arguments.length, requirementsAndInput = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
      requirementsAndInput[_key - 1] = arguments[_key];
    }

    requirementsAndInput.pop(); // Get rid of `input` argument
    if (!value) return true; // Builtin validators all accept empty strings, except `required` of course
    return operator.apply(undefined, [value].concat(_toConsumableArray(parseArguments(type, requirementsAndInput))));
  };
};

var comparisonOperator = function comparisonOperator(operator) {
  return {
    validateDate: operatorToValidator('date', operator),
    validateNumber: operatorToValidator('number', operator),
    requirementType: operator.length <= 2 ? 'string' : ['string', 'string'], // Support operators with a 1 or 2 requirement(s)
    priority: 30
  };
};

ValidatorRegistry.prototype = {
  init: function init(validators, catalog) {
    this.catalog = catalog;
    // Copy prototype's validators:
    this.validators = Object.assign({}, this.validators);

    for (var name in validators) {
      this.addValidator(name, validators[name].fn, validators[name].priority);
    }window.Parsley.trigger('parsley:validator:init');
  },

  // Set new messages locale if we have dictionary loaded in ParsleyConfig.i18n
  setLocale: function setLocale(locale) {
    if ('undefined' === typeof this.catalog[locale]) throw new Error(locale + ' is not available in the catalog');

    this.locale = locale;

    return this;
  },

  // Add a new messages catalog for a given locale. Set locale for this catalog if set === `true`
  addCatalog: function addCatalog(locale, messages, set) {
    if ('object' === (typeof messages === 'undefined' ? 'undefined' : _typeof(messages))) this.catalog[locale] = messages;

    if (true === set) return this.setLocale(locale);

    return this;
  },

  // Add a specific message for a given constraint in a given locale
  addMessage: function addMessage(locale, name, message) {
    if ('undefined' === typeof this.catalog[locale]) this.catalog[locale] = {};

    this.catalog[locale][name] = message;

    return this;
  },

  // Add messages for a given locale
  addMessages: function addMessages(locale, nameMessageObject) {
    for (var name in nameMessageObject) {
      this.addMessage(locale, name, nameMessageObject[name]);
    }return this;
  },

  // Add a new validator
  //
  //    addValidator('custom', {
  //        requirementType: ['integer', 'integer'],
  //        validateString: function(value, from, to) {},
  //        priority: 22,
  //        messages: {
  //          en: "Hey, that's no good",
  //          fr: "Aye aye, pas bon du tout",
  //        }
  //    })
  //
  // Old API was addValidator(name, function, priority)
  //
  addValidator: function addValidator(name, arg1, arg2) {
    if (this.validators[name]) _utils2.default.warn('Validator "' + name + '" is already defined.');else if (_defaults2.default.hasOwnProperty(name)) {
      _utils2.default.warn('"' + name + '" is a restricted keyword and is not a valid validator name.');
      return;
    }
    return this._setValidator.apply(this, arguments);
  },

  hasValidator: function hasValidator(name) {
    return !!this.validators[name];
  },

  updateValidator: function updateValidator(name, arg1, arg2) {
    if (!this.validators[name]) {
      _utils2.default.warn('Validator "' + name + '" is not already defined.');
      return this.addValidator.apply(this, arguments);
    }
    return this._setValidator.apply(this, arguments);
  },

  removeValidator: function removeValidator(name) {
    if (!this.validators[name]) _utils2.default.warn('Validator "' + name + '" is not defined.');

    delete this.validators[name];

    return this;
  },

  _setValidator: function _setValidator(name, validator, priority) {
    if ('object' !== (typeof validator === 'undefined' ? 'undefined' : _typeof(validator))) {
      // Old style validator, with `fn` and `priority`
      validator = {
        fn: validator,
        priority: priority
      };
    }
    if (!validator.validate) {
      validator = new _validator2.default(validator);
    }
    this.validators[name] = validator;

    for (var locale in validator.messages || {}) {
      this.addMessage(locale, name, validator.messages[locale]);
    }return this;
  },

  getErrorMessage: function getErrorMessage(constraint) {
    var message;

    // Type constraints are a bit different, we have to match their requirements too to find right error message
    if ('type' === constraint.name) {
      var typeMessages = this.catalog[this.locale][constraint.name] || {};
      message = typeMessages[constraint.requirements];
    } else message = this.formatMessage(this.catalog[this.locale][constraint.name], constraint.requirements);

    return message || this.catalog[this.locale].defaultMessage || this.catalog.en.defaultMessage;
  },

  // Kind of light `sprintf()` implementation
  formatMessage: function formatMessage(string, parameters) {
    if ('object' === (typeof parameters === 'undefined' ? 'undefined' : _typeof(parameters))) {
      for (var i in parameters) {
        string = this.formatMessage(string, parameters[i]);
      }return string;
    }

    return 'string' === typeof string ? string.replace(/%s/i, parameters) : '';
  },

  // Here is the Parsley default validators list.
  // A validator is an object with the following key values:
  //  - priority: an integer
  //  - requirement: 'string' (default), 'integer', 'number', 'regexp' or an Array of these
  //  - validateString, validateMultiple, validateNumber: functions returning `true`, `false` or a promise
  // Alternatively, a validator can be a function that returns such an object
  //
  validators: {
    notblank: {
      validateString: function validateString(value) {
        return (/\S/.test(value)
        );
      },
      priority: 2
    },
    required: {
      validateMultiple: function validateMultiple(values) {
        return values.length > 0;
      },
      validateString: function validateString(value) {
        return (/\S/.test(value)
        );
      },
      priority: 512
    },
    type: {
      validateString: function validateString(value, type) {
        var _ref = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {},
            _ref$step = _ref.step,
            step = _ref$step === undefined ? 'any' : _ref$step,
            _ref$base = _ref.base,
            base = _ref$base === undefined ? 0 : _ref$base;

        var tester = typeTesters[type];
        if (!tester) {
          throw new Error('validator type `' + type + '` is not supported');
        }
        if (!value) return true; // Builtin validators all accept empty strings, except `required` of course
        if (!tester.test(value)) return false;
        if ('number' === type) {
          if (!/^any$/i.test(step || '')) {
            var nb = Number(value);
            var decimals = Math.max(decimalPlaces(step), decimalPlaces(base));
            if (decimalPlaces(nb) > decimals) // Value can't have too many decimals
              return false;
            // Be careful of rounding errors by using integers.
            var toInt = function toInt(f) {
              return Math.round(f * Math.pow(10, decimals));
            };
            if ((toInt(nb) - toInt(base)) % toInt(step) != 0) return false;
          }
        }
        return true;
      },
      requirementType: {
        '': 'string',
        step: 'string',
        base: 'number'
      },
      priority: 256
    },
    pattern: {
      validateString: function validateString(value, regexp) {
        if (!value) return true; // Builtin validators all accept empty strings, except `required` of course
        return regexp.test(value);
      },
      requirementType: 'regexp',
      priority: 64
    },
    minlength: {
      validateString: function validateString(value, requirement) {
        if (!value) return true; // Builtin validators all accept empty strings, except `required` of course
        return value.length >= requirement;
      },
      requirementType: 'integer',
      priority: 30
    },
    maxlength: {
      validateString: function validateString(value, requirement) {
        return value.length <= requirement;
      },
      requirementType: 'integer',
      priority: 30
    },
    length: {
      validateString: function validateString(value, min, max) {
        if (!value) return true; // Builtin validators all accept empty strings, except `required` of course
        return value.length >= min && value.length <= max;
      },
      requirementType: ['integer', 'integer'],
      priority: 30
    },
    mincheck: {
      validateMultiple: function validateMultiple(values, requirement) {
        return values.length >= requirement;
      },
      requirementType: 'integer',
      priority: 30
    },
    maxcheck: {
      validateMultiple: function validateMultiple(values, requirement) {
        return values.length <= requirement;
      },
      requirementType: 'integer',
      priority: 30
    },
    check: {
      validateMultiple: function validateMultiple(values, min, max) {
        return values.length >= min && values.length <= max;
      },
      requirementType: ['integer', 'integer'],
      priority: 30
    },
    min: comparisonOperator(function (value, requirement) {
      return value >= requirement;
    }),
    max: comparisonOperator(function (value, requirement) {
      return value <= requirement;
    }),
    range: comparisonOperator(function (value, min, max) {
      return value >= min && value <= max;
    }),
    equalto: {
      validateString: function validateString(value, refOrValue) {
        if (!value) return true; // Builtin validators all accept empty strings, except `required` of course
        var $reference = (0, _jquery2.default)(refOrValue);
        if ($reference.length) return value === $reference.val();else return value === refOrValue;
      },
      priority: 256
    }
  }
};

exports.default = ValidatorRegistry;

},{"./defaults":12,"./utils":21,"./validator":22,"jquery":1}],24:[function(require,module,exports){
(function (global){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _jquery = require('jquery');

var _jquery2 = _interopRequireDefault(_jquery);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function InputEvent() {
  var _this = this;

  var globals = window || global;

  // Slightly odd way construct our object. This way methods are force bound.
  // Used to test for duplicate library.
  Object.assign(this, {

    // For browsers that do not support isTrusted, assumes event is native.
    isNativeEvent: function isNativeEvent(evt) {
      return evt.originalEvent && evt.originalEvent.isTrusted !== false;
    },

    fakeInputEvent: function fakeInputEvent(evt) {
      if (_this.isNativeEvent(evt)) {
        (0, _jquery2.default)(evt.target).trigger('input');
      }
    },

    misbehaves: function misbehaves(evt) {
      if (_this.isNativeEvent(evt)) {
        _this.behavesOk(evt);
        (0, _jquery2.default)(document).on('change.inputevent', evt.data.selector, _this.fakeInputEvent);
        _this.fakeInputEvent(evt);
      }
    },

    behavesOk: function behavesOk(evt) {
      if (_this.isNativeEvent(evt)) {
        (0, _jquery2.default)(document) // Simply unbinds the testing handler
        .off('input.inputevent', evt.data.selector, _this.behavesOk).off('change.inputevent', evt.data.selector, _this.misbehaves);
      }
    },

    // Bind the testing handlers
    install: function install() {
      if (globals.inputEventPatched) {
        return;
      }
      globals.inputEventPatched = '0.0.3';
      var _arr = ['select', 'input[type="checkbox"]', 'input[type="radio"]', 'input[type="file"]'];
      for (var _i = 0; _i < _arr.length; _i++) {
        var selector = _arr[_i];
        (0, _jquery2.default)(document).on('input.inputevent', selector, { selector: selector }, _this.behavesOk).on('change.inputevent', selector, { selector: selector }, _this.misbehaves);
      }
    },

    uninstall: function uninstall() {
      delete globals.inputEventPatched;
      (0, _jquery2.default)(document).off('.inputevent');
    }

  });
} /**
   * inputevent - Alleviate browser bugs for input events
   * https://github.com/marcandre/inputevent
   * @version v0.0.3 - (built Thu, Apr 14th 2016, 5:58 pm)
   * @author Marc-Andre Lafortune <github@marc-andre.ca>
   * @license MIT
   */

;

exports.default = new InputEvent();

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{"jquery":1}],25:[function(require,module,exports){
(function (global){
'use strict';

var config = require('../../package.json').babelBoilerplateOptions;

global.travis = false;
global.mocha.setup('bdd');
global.onload = function () {
  global.mocha.checkLeaks();
  global.mocha.globals(config.mochaGlobals);
  global.mocha.run();
  require('./setup')();
};

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{"../../package.json":2,"./setup":28}],26:[function(require,module,exports){
'use strict';

var _jquery = require('jquery');

var _jquery2 = _interopRequireDefault(_jquery);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

afterEach(function () {
  expect((0, _jquery2.default)('form input').length).to.be(0);
});

window.$ = _jquery2.default; // Export for testing purposes...

},{"jquery":1}],27:[function(require,module,exports){
(function (global){
'use strict';

module.exports = function () {
  beforeEach(function () {
    sinon.spy(window.console, 'warn');
    window.console.warn.expectedCallCount = 0;
  });
  afterEach(function () {
    expect(window.console.warn.callCount).to.be(window.console.warn.expectedCallCount);
    window.console.warn.restore();
  });

  global.expectWarning = function (fn) {
    var w = window.console.warn;
    expect(w.callCount).to.be(w.expectedCallCount);
    var result = fn.call();
    w.expectedCallCount++;
    expect(w.callCount).to.be(w.expectedCallCount);
    return result;
  };
};

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{}],28:[function(require,module,exports){
(function (global){
'use strict';

module.exports = function () {
  beforeEach(function () {
    this.sandbox = global.sinon.sandbox.create();
    global.stub = this.sandbox.stub.bind(this.sandbox);
    global.spy = this.sandbox.spy.bind(this.sandbox);
  });

  afterEach(function () {
    delete global.stub;
    delete global.spy;
    this.sandbox.restore();
  });

  require('./expect_warning')();
  require('./dom_leak_check');
};

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{"./dom_leak_check":26,"./expect_warning":27}],29:[function(require,module,exports){
'use strict';

var _jquery = require('jquery');

var _jquery2 = _interopRequireDefault(_jquery);

var _parsley = require('../../src/parsley');

var _parsley2 = _interopRequireDefault(_parsley);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

describe('Base', function () {
  it('should provide a actualizeOptions() method', function () {
    (0, _jquery2.default)('body').append('<input type="email" data-parsley-pattern="[A-F][0-9]{5}" data-parsley-required id="element" />');
    var parsleyField = (0, _jquery2.default)('#element').parsley({ foo: 'bar' });
    expect(parsleyField.options.pattern).to.eql('[A-F][0-9]{5}');
    expect(parsleyField.options.required).to.eql('');

    (0, _jquery2.default)('#element').removeAttr('data-parsley-pattern');
    parsleyField.actualizeOptions();

    expect(parsleyField.options.pattern).to.be(undefined);
    expect(parsleyField.options.required).to.eql('');
  });
  it('should use reset() on field', function () {
    (0, _jquery2.default)('body').append('<input type="email" data-parsley-pattern="[A-F][0-9]{5}" data-parsley-required id="element" />');
    var parsleyField = (0, _jquery2.default)('#element').parsley();
    parsleyField.validate();
    expect((0, _jquery2.default)('#parsley-id-' + parsleyField.__id__ + ' li').length).to.be(1);
    parsleyField.reset();
    expect((0, _jquery2.default)('#parsley-id-' + parsleyField.__id__ + ' li').length).to.be(0);
  });
  it('should use reset() on form', function (done) {
    (0, _jquery2.default)('body').append('<form id="element">' + '<input id="field1" type="text" required />' + '<div id="field2"></div>' + '<textarea id="field2"></textarea>' + '</form>');
    var parsleyForm = (0, _jquery2.default)('#element').parsley();
    parsleyForm.validate();
    expect((0, _jquery2.default)('#parsley-id-' + (0, _jquery2.default)('#field1').psly().__id__ + ' li').length).to.be(1);

    (0, _jquery2.default)('#element').parsley().on('form:reset', function () {
      done();
    });
    parsleyForm.reset();

    expect((0, _jquery2.default)('#parsley-id-' + (0, _jquery2.default)('#field1').psly().__id__ + ' li').length).to.be(0);
  });
  it('should use destroy() on field', function (done) {
    (0, _jquery2.default)('body').append('<input type="email" data-parsley-pattern="[A-F][0-9]{5}" data-parsley-required id="element" />');
    var parsleyField = (0, _jquery2.default)('#element').parsley();

    (0, _jquery2.default)('#element').parsley().on('field:destroy', function () {
      done();
    });

    expect((0, _jquery2.default)('#element').data('Parsley')).to.have.key('__class__');
    expect((0, _jquery2.default)('#element').data('Parsley').__class__).to.be('Field');
    parsleyField.destroy();
    expect((0, _jquery2.default)('#element').data('Parsley')).to.be(undefined);
  });
  it('should use destroy() on form', function (done) {
    var triggered = 0;

    (0, _jquery2.default)('body').append('<form id="element">' + '<input id="field1" type="text"/>' + '<div id="field2"></div>' + '<textarea id="field2"></textarea>' + '</form>');
    var parsleyForm = (0, _jquery2.default)('#element').parsley();
    var fieldEventsCount = 0;
    var formEventsCount = 0;

    // Test that a subscribed field event on parent form would be triggered by fields too
    // Here we only have field1 and field2 as valid parsley fields
    (0, _jquery2.default)('#element').parsley().on('field:destroy', function () {
      fieldEventsCount++;
    });

    (0, _jquery2.default)('#element').parsley().on('form:destroy', function () {
      formEventsCount++;
    });

    expect((0, _jquery2.default)('#element').data('Parsley')).to.have.key('__class__');
    expect((0, _jquery2.default)('#element').data('Parsley').__class__).to.be('Form');
    expect((0, _jquery2.default)('#field1').data('Parsley')).to.have.key('__class__');
    expect((0, _jquery2.default)('#field1').data('Parsley').__class__).to.be('Field');

    parsleyForm.destroy();

    expect(fieldEventsCount).to.be(2);
    expect(formEventsCount).to.be(1);

    // we should never enter here since parsley form instance is destroyed
    _parsley2.default.on('form:validate', function () {
      expect(true).to.be(false);
    });

    // test that a submit event does not trigger parsley validation anymore
    (0, _jquery2.default)('#element').on('submit', function (e) {
      e.preventDefault();

      expect((0, _jquery2.default)('#element').data('Parsley')).to.be(undefined);
      expect((0, _jquery2.default)('#field1').data('Parsley')).to.be(undefined);
      _parsley2.default.off('form:validate');
      done();
    });

    (0, _jquery2.default)('#element').submit();
  });
  afterEach(function () {
    (0, _jquery2.default)('#element, .parsley-errors-list').remove();
  });
});

},{"../../src/parsley":9,"jquery":1}],30:[function(require,module,exports){
'use strict';

var _jquery = require('jquery');

var _jquery2 = _interopRequireDefault(_jquery);

var _parsley = require('../../../src/parsley');

var _parsley2 = _interopRequireDefault(_parsley);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

describe('extra/plugin/bind', function () {
  // Hack to load and undo the loading of the plugin:
  before(function () {
    require('../../../src/extra/plugin/bind');
  });
  after(function () {
    window.ParsleyExtend = {}; // Undo the plugin...
  });

  it('should have a bind.js plugin allowing to give pure json validation config to parsley constructor', function () {
    (0, _jquery2.default)('body').append('<form id="element" >' + '<input type="text" name="name" />' + '<input type="text" name="email" id="email" />' + '<input type="checkbox" name="sexe" id="sexe" value="male" />' + '<input type="checkbox" name="sexe" value="female" />' + '</form>');

    var parsleyInstance;
    expectWarning(function () {
      parsleyInstance = (0, _jquery2.default)('#element').parsley({
        fields: {
          '[name="name"]': {
            required: true,
            length: [4, 20]
          },
          '#email': {
            type: 'email'
          },
          '#sexe': {
            required: true
          }
        }
      });
    });
    expect((0, _jquery2.default)('[name="name"]').parsley().constraints.length).to.be(2);
    expect((0, _jquery2.default)('#email').parsley().constraints.length).to.be(1);
    expect((0, _jquery2.default)('#sexe').parsley().constraints.length).to.be(1);
    expect((0, _jquery2.default)('#sexe').parsley().constraints[0].name).to.be('required');
  });

  afterEach(function () {
    (0, _jquery2.default)('#element, .fixture, .parsley-errors-list').remove();
  });
});

},{"../../../src/extra/plugin/bind":3,"../../../src/parsley":9,"jquery":1}],31:[function(require,module,exports){
'use strict';

var _jquery = require('jquery');

var _jquery2 = _interopRequireDefault(_jquery);

var _parsley = require('../../../src/parsley');

var _parsley2 = _interopRequireDefault(_parsley);

var _comparison = require('../../../src/extra/validator/comparison');

var _comparison2 = _interopRequireDefault(_comparison);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

describe('extra/validator/comparison', function () {
  it('should have gt validator', function () {
    var number = 5;

    // Check with a selector
    (0, _jquery2.default)('body').append('<input type="text" id="element" data-parsley-gt="#gt" required /><input type="text" id="gt" value="' + number + '" />');
    expect((0, _jquery2.default)('#element').psly().isValid()).to.be(false);
    (0, _jquery2.default)('#element').val(number + 1);
    expect((0, _jquery2.default)('#element').psly().isValid()).to.be(true);
    (0, _jquery2.default)('#element').val(number);
    expect((0, _jquery2.default)('#element').psly().isValid()).to.be(false);
    (0, _jquery2.default)('#element').val(number - 1);
    expect((0, _jquery2.default)('#element').psly().isValid()).to.be(false);

    // Check with a (different) number
    number = 42;
    (0, _jquery2.default)('#element').attr('data-parsley-gt', number);
    (0, _jquery2.default)('#element').val(number + 1);
    expect((0, _jquery2.default)('#element').psly().isValid()).to.be(true);
    (0, _jquery2.default)('#element').val(number);
    expect((0, _jquery2.default)('#element').psly().isValid()).to.be(false);
    (0, _jquery2.default)('#element').val(number - 1);
    expect((0, _jquery2.default)('#element').psly().isValid()).to.be(false);

    (0, _jquery2.default)('#gt').remove();
  });
  it('should have gte validator', function () {
    var number = 5;

    // Check with a selector
    (0, _jquery2.default)('body').append('<input type="text" id="element" data-parsley-gte="#gte" required /><input type="text" id="gte" value="' + number + '" />');
    expect((0, _jquery2.default)('#element').psly().isValid()).to.be(false);
    (0, _jquery2.default)('#element').val(number + 1);
    expect((0, _jquery2.default)('#element').psly().isValid()).to.be(true);
    (0, _jquery2.default)('#element').val(number);
    expect((0, _jquery2.default)('#element').psly().isValid()).to.be(true);
    (0, _jquery2.default)('#element').val(number - 1);
    expect((0, _jquery2.default)('#element').psly().isValid()).to.be(false);

    // Check with a (different) number
    number = 42;
    (0, _jquery2.default)('#element').attr('data-parsley-gte', number);
    (0, _jquery2.default)('#element').val(number + 1);
    expect((0, _jquery2.default)('#element').psly().isValid()).to.be(true);
    (0, _jquery2.default)('#element').val(number);
    expect((0, _jquery2.default)('#element').psly().isValid()).to.be(true);
    (0, _jquery2.default)('#element').val(number - 1);
    expect((0, _jquery2.default)('#element').psly().isValid()).to.be(false);

    (0, _jquery2.default)('#gte').remove();
  });
  it('should have lt validator', function () {
    var number = 5;

    // Check with a selector
    (0, _jquery2.default)('body').append('<input type="text" id="element" data-parsley-lt="#lt" required /><input type="text" id="lt" value="' + number + '" />');
    expect((0, _jquery2.default)('#element').psly().isValid()).to.be(false);
    (0, _jquery2.default)('#element').val(number + 1);
    expect((0, _jquery2.default)('#element').psly().isValid()).to.be(false);
    (0, _jquery2.default)('#element').val(number);
    expect((0, _jquery2.default)('#element').psly().isValid()).to.be(false);
    (0, _jquery2.default)('#element').val(number - 1);
    expect((0, _jquery2.default)('#element').psly().isValid()).to.be(true);

    // Check with a (different) number
    number = 42;
    (0, _jquery2.default)('#element').attr('data-parsley-lt', number);
    (0, _jquery2.default)('#element').val(number + 1);
    expect((0, _jquery2.default)('#element').psly().isValid()).to.be(false);
    (0, _jquery2.default)('#element').val(number);
    expect((0, _jquery2.default)('#element').psly().isValid()).to.be(false);
    (0, _jquery2.default)('#element').val(number - 1);
    expect((0, _jquery2.default)('#element').psly().isValid()).to.be(true);

    (0, _jquery2.default)('#lt').remove();
  });
  it('should have lte validator', function () {
    var number = 5;

    // Check with a selector
    (0, _jquery2.default)('body').append('<input type="text" id="element" data-parsley-lte="#lte" required /><input type="text" id="lte" value="' + number + '" />');
    expect((0, _jquery2.default)('#element').psly().isValid()).to.be(false);
    (0, _jquery2.default)('#element').val(number + 1);
    expect((0, _jquery2.default)('#element').psly().isValid()).to.be(false);
    (0, _jquery2.default)('#element').val(number);
    expect((0, _jquery2.default)('#element').psly().isValid()).to.be(true);
    (0, _jquery2.default)('#element').val(number - 1);
    expect((0, _jquery2.default)('#element').psly().isValid()).to.be(true);

    // Check with a (different) number
    number = 42;
    (0, _jquery2.default)('#element').attr('data-parsley-lte', number);
    (0, _jquery2.default)('#element').val(number + 1);
    expect((0, _jquery2.default)('#element').psly().isValid()).to.be(false);
    (0, _jquery2.default)('#element').val(number);
    expect((0, _jquery2.default)('#element').psly().isValid()).to.be(true);
    (0, _jquery2.default)('#element').val(number - 1);
    expect((0, _jquery2.default)('#element').psly().isValid()).to.be(true);

    (0, _jquery2.default)('#lte').remove();
  });
  afterEach(function () {
    (0, _jquery2.default)('#element, .fixture, .parsley-errors-list').remove();
  });
});

},{"../../../src/extra/validator/comparison":4,"../../../src/parsley":9,"jquery":1}],32:[function(require,module,exports){
'use strict';

var _jquery = require('jquery');

var _jquery2 = _interopRequireDefault(_jquery);

var _parsley = require('../../../src/parsley');

var _parsley2 = _interopRequireDefault(_parsley);

var _dateiso = require('../../../src/extra/validator/dateiso');

var _dateiso2 = _interopRequireDefault(_dateiso);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

describe('extra/validator/dateiso', function () {

  it('should have dateiso validator', function () {
    var expectValidation = function expectValidation(value, name, requirements) {
      var field = (0, _jquery2.default)('<input>').parsley();
      field.options[name] = requirements;
      return expect(field.isValid({ force: true, value: value }));
    };

    expectValidation('', 'dateiso').not.to.be(true);
    expectValidation('foo', 'dateiso').not.to.be(true);
    expectValidation('1986-30-01', 'dateiso').not.to.be(true);
    expectValidation('1986-12-45', 'dateiso').not.to.be(true);
    expectValidation('1986-12-01', 'dateiso').to.be(true);
  });
});

},{"../../../src/extra/validator/dateiso":5,"../../../src/parsley":9,"jquery":1}],33:[function(require,module,exports){
'use strict';

var _jquery = require('jquery');

var _jquery2 = _interopRequireDefault(_jquery);

var _parsley = require('../../../src/parsley');

var _parsley2 = _interopRequireDefault(_parsley);

var _words = require('../../../src/extra/validator/words');

var _words2 = _interopRequireDefault(_words);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

describe('extra/validator/words', function () {
  it('should have a minwords validator', function () {
    (0, _jquery2.default)('body').append('<input type="text" id="element" data-parsley-minwords="2" required />');
    expect((0, _jquery2.default)('#element').psly().isValid()).to.be(false);
    (0, _jquery2.default)('#element').val('foo');
    expect((0, _jquery2.default)('#element').psly().isValid()).to.be(false);
    (0, _jquery2.default)('#element').val('foo bar');
    expect((0, _jquery2.default)('#element').psly().isValid()).to.be(true);
  });
  it('should have a maxwords validator', function () {
    (0, _jquery2.default)('body').append('<input type="text" id="element" data-parsley-maxwords="2" required />');
    expect((0, _jquery2.default)('#element').psly().isValid()).to.be(false);
    (0, _jquery2.default)('#element').val('foo bar');
    expect((0, _jquery2.default)('#element').psly().isValid()).to.be(true);
    (0, _jquery2.default)('#element').val('foo bar baz');
    expect((0, _jquery2.default)('#element').psly().isValid()).to.be(false);
  });
  it('should have a words validator', function () {
    (0, _jquery2.default)('body').append('<input type="text" id="element" data-parsley-words="[2, 4]" required />');
    expect((0, _jquery2.default)('#element').psly().isValid()).to.be(false);
    (0, _jquery2.default)('#element').val('foo');
    expect((0, _jquery2.default)('#element').psly().isValid()).to.be(false);
    (0, _jquery2.default)('#element').val('foo bar baz');
    expect((0, _jquery2.default)('#element').psly().isValid()).to.be(true);
    (0, _jquery2.default)('#element').val('foo bar baz qux bux');
    expect((0, _jquery2.default)('#element').psly().isValid()).to.be(false);
  });
  afterEach(function () {
    (0, _jquery2.default)('#element, .fixture, .parsley-errors-list').remove();
  });
});

},{"../../../src/extra/validator/words":6,"../../../src/parsley":9,"jquery":1}],34:[function(require,module,exports){
'use strict';

var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

var _jquery = require('jquery');

var _jquery2 = _interopRequireDefault(_jquery);

var _field = require('../../src/parsley/field');

var _field2 = _interopRequireDefault(_field);

var _parsley = require('../../src/parsley');

var _parsley2 = _interopRequireDefault(_parsley);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _toArray(arr) { return Array.isArray(arr) ? arr : Array.from(arr); }

describe('Field', function () {
  it('should be a function', function () {
    expect(_field2.default).to.be.a('function');
  });
  it('should throw an error if no parsleyInstance given', function () {
    expect(_field2.default).to.throwException();
  });
  it('should properly bind DOM constraints', function () {
    (0, _jquery2.default)('body').append('<input type="text" id="element" data-parsley-required />');
    var parsleyField = (0, _jquery2.default)('#element').parsley();
    expect(parsleyField.constraints.length).to.be(1);
    expect(parsleyField.constraints[0].name).to.be('required');
    expect(parsleyField.constraints[0].isDomConstraint).to.be(true);
  });
  it('should properly bind HTML DOM supported constraints', function () {
    (0, _jquery2.default)('body').append('<input type="email" id="element" />');
    var parsleyField = (0, _jquery2.default)('#element').parsley();
    expect(parsleyField.constraints.length).to.be(1);
    expect(parsleyField.constraints[0].name).to.be('type');
    expect(parsleyField.constraints[0].isDomConstraint).to.be(true);
  });
  it('should ignore unknown types', function () {
    (0, _jquery2.default)('body').append('<input type="" id="element" />');
    var parsleyField = (0, _jquery2.default)('#element').parsley();
    expect(parsleyField.constraints.length).to.be(0);
  });
  it('should ignore mistyped types', function () {
    (0, _jquery2.default)('body').append('<input type="    email" id="element" />');
    var parsleyField = (0, _jquery2.default)('#element').parsley();
    expect(parsleyField.constraints.length).to.be(0);
  });
  it('should have a proper addConstraint() javascript method', function () {
    (0, _jquery2.default)('body').append('<input type="text" id="element" />');
    var parsleyField = (0, _jquery2.default)('#element').parsley().addConstraint('required', true);
    expect(parsleyField.constraints.length).to.be(1);
    expect(parsleyField.constraints[0].name).to.be('required');
    expect(parsleyField.constraints[0].requirements).to.be(true);
    expect(parsleyField.constraints[0].priority).to.be(512);
    expect(parsleyField.constraints[0].isDomConstraint).to.be(false);

    // trying to add an existing constraint result in an update
    parsleyField.addConstraint('required', false, 64);
    expect(parsleyField.constraints.length).to.be(1);
    expect(parsleyField.constraints[0].name).to.be('required');
    expect(parsleyField.constraints[0].requirements).to.be(false);
    expect(parsleyField.constraints[0].priority).to.be(64);
  });
  it('should have a proper updateConstraint() javascript method', function () {
    (0, _jquery2.default)('body').append('<input type="text" id="element" />');
    var parsleyField = (0, _jquery2.default)('#element').parsley().addConstraint('required', true);

    // same as above test where addConstraint resulted in an updateConstraint
    parsleyField.updateConstraint('required', false, 64);
    expect(parsleyField.constraints.length).to.be(1);
    expect(parsleyField.constraints[0].name).to.be('required');
    expect(parsleyField.constraints[0].requirements).to.be(false);
    expect(parsleyField.constraints[0].priority).to.be(64);
  });
  it('should have a proper removeConstraint() javascript method', function () {
    (0, _jquery2.default)('body').append('<input type="text" id="element" />');
    var parsleyField = (0, _jquery2.default)('#element').parsley().addConstraint('required', true).addConstraint('notblank', true).removeConstraint('required');
    expect(parsleyField.constraints.length).to.be(1);
    expect(parsleyField.constraints[0].name).to.be('notblank');
    expect(parsleyField._isRequired()).to.be(false);
  });
  it('should return true for fields without constraints', function () {
    (0, _jquery2.default)('body').append('<input type="text" id="element" value="hola" data-parsley-minlength="5" />');
    var parsleyField = (0, _jquery2.default)('#element').parsley();
    // Start with some validation errors:
    expect(parsleyField.isValid()).to.eql(false);
    // The remove constraint and check result:
    (0, _jquery2.default)('#element').removeAttr('data-parsley-minlength');
    expect(parsleyField.isValid()).to.be(true);
  });
  it('should properly bind HTML5 supported constraints', function () {
    (0, _jquery2.default)('body').append('<input type="email" pattern="\\w+" id="element" required min="5" max="100" minlength="1" maxlength="3" />');
    var parsleyField = (0, _jquery2.default)('#element').parsley();
    // 5 validators: type=email, pattern, required, (min+max => range) and (minlength+maxlength => length)
    expect(parsleyField.constraints.length).to.be(5);
    (0, _jquery2.default)('#element').removeAttr('min');
    // still 5 validators, with max instead of range now
    expect(parsleyField.actualizeOptions().constraints.length).to.be(5);
    (0, _jquery2.default)('#element').removeAttr('minlength');
    // still 5 validators, with maxlength instead of length now
    expect(parsleyField.actualizeOptions().constraints.length).to.be(5);
  });

  it('should properly bind HTML5 date inputs', function () {
    // Uses RFC 3339/ISO 8601 format YYYY-MM-DD
    (0, _jquery2.default)('body').append('<input type="date" id="element" max="2000-01-02" min="1999-01-02" value="1998-12-30" />');
    var parsleyField = (0, _jquery2.default)('#element').parsley();
    expect(parsleyField.constraints.length).to.be(2); // Type=Date, Range
    expect(parsleyField.isValid()).to.be(false);
    expect(parsleyField.isValid({ value: '1999-02-03' })).to.be(true);
    (0, _jquery2.default)('#element').removeAttr('min');
    expect(parsleyField.isValid()).to.be(true);
    expect(parsleyField.constraints.length).to.be(2); // Type=Date, Max
    (0, _jquery2.default)('#element').val('2001-03-03');
    expect(parsleyField.isValid()).to.be(false);
    (0, _jquery2.default)('#element').val('2001/01/01').removeAttr('max');
    expect(parsleyField.isValid()).to.be(false); // Still invalid because of format
    expect(parsleyField.constraints.length).to.be(1); // Type=Date
  });

  var itShouldFollowSpecForNumber = function itShouldFollowSpecForNumber(step, min, initial, value, valid) {
    var attrs = [step ? 'step="' + step + '" ' : '', min ? 'min="' + min + '" ' : '', initial ? 'value="' + initial + '" ' : ''].join('');
    it('should follow HTML5 spec to validate "number" type ' + (attrs ? 'with attributes ' + attrs : '') + ('by ' + (valid ? 'accepting' : 'rejecting') + ' "' + value + '"'), function () {
      var $input = (0, _jquery2.default)('<input type="number" ' + attrs + '>');
      expect($input.parsley().isValid({ value: value })).to.be(valid);
    });
  };

  var checks = [
  // step | min | initial | good        | bad values
  //      |     |  value  | values      |
  // ---- | --- | ------- | ----------- | ----------
  "       |     |         | 1, -2, 4.0  | 1.1, 4.       ", "  any  |     |         | -2, 4.3, .1 | 4., hi, ., 1. ", "  AnY  |     |         | .1e+2, -.2  | 4e, 4e-, .e+2 ", "  0.1  |     |         | -2, 4.3     | 4.03          ", "  0.01 |     |         | 1.11        | 1.111         ", // Bug #1056
  "       | 0.3 |         | 4.3         | -2, -2.7, 4.0 ", "       |     |   0.3   | -2.7, 4.3   | -2, -2.3, 4.0 ", "  0.4  | 0.3 |         | 1.1         | -2.9, 1.6, 1.8", "  0.4  |     |   0.3   | -2.9, 1.1   | 1.6, 1.8      ", "  0.4  | 0.3 |   0.5   | 1.1         | -2.9, 1.6, 1.8"];
  _jquery2.default.each(checks, function (_, check) {
    var trim = function trim(val) {
      return val.trim();
    };

    var _check$split$map = check.split('|').map(trim),
        _check$split$map2 = _toArray(_check$split$map),
        step = _check$split$map2[0],
        min = _check$split$map2[1],
        initial = _check$split$map2[2],
        goodAndBad = _check$split$map2.slice(3);

    var xs = goodAndBad.map(function (values) {
      return values.split(',').map(trim);
    });

    var _xs = _slicedToArray(xs, 2),
        good = _xs[0],
        bad = _xs[1];

    _jquery2.default.each(good, function (_, val) {
      itShouldFollowSpecForNumber(step, min, initial, val, true);
      itShouldFollowSpecForNumber(step, min, initial, val.trim() + '0', true);
    });
    _jquery2.default.each(bad, function (_, val) {
      itShouldFollowSpecForNumber(step, min, initial, val, false);
    });
  });
  // 'any' must be exact match
  itShouldFollowSpecForNumber('   any    ', '', '', '4.2', false);
  // min / initial should be auto-trimmed
  itShouldFollowSpecForNumber('0.2', '   0.3    ', '', '0.3', true);
  // scientific notation
  itShouldFollowSpecForNumber('', '0.3', '', '43e-1', true);
  // commas are not accepted in the spec
  itShouldFollowSpecForNumber('any', '', '', '1,000', false);

  var itShouldFollowSpecForNumber = function itShouldFollowSpecForNumber(step, min, initial, value, valid) {
    var attrs = [step ? 'step="' + step + '" ' : '', min ? 'min="' + min + '" ' : '', initial ? 'value="' + initial + '" ' : ''].join('');
    it('should follow HTML5 spec to validate "number" type ' + (attrs ? 'with attributes ' + attrs : '') + ('by ' + (valid ? 'accepting' : 'rejecting') + ' "' + value + '"'), function () {
      var $input = (0, _jquery2.default)('<input type="number" ' + attrs + '>');
      expect($input.parsley().isValid({ value: value })).to.be(valid);
    });
  };

  it('should have a default step of "any" for data-parsley-type="number"', function () {
    var $input = (0, _jquery2.default)('<input data-parsley-type="number" value="4.444">');
    expect($input.parsley().isValid()).to.be(true);
    $input.attr('data-parsley-type-step', '1');
    expect($input.parsley().isValid()).to.be(false);
  });
  it('should valid simple validator', function () {
    (0, _jquery2.default)('body').append('<input type="text" id="element" value="" />');
    var parsleyField = (0, _jquery2.default)('#element').parsley().addConstraint('required', true);
    expect(parsleyField.isValid()).to.be(false);
    (0, _jquery2.default)('#element').val('foo');
    expect(parsleyField.isValid()).to.be(true);
  });
  it('should valid more complex `type` validator', function () {
    (0, _jquery2.default)('body').append('<input type="text" id="element" value="foo" />');
    var parsleyField = (0, _jquery2.default)('#element').parsley().addConstraint('type', 'email');
    expect(parsleyField.isValid()).to.be(false);
    (0, _jquery2.default)('#element').val('foo');
    expect(parsleyField.isValid()).to.be(false);
    (0, _jquery2.default)('#element').val('foo@bar.baz');
    expect(parsleyField.isValid()).to.be(true);
  });
  it('should valid most complex Callback() validator', function () {
    (0, _jquery2.default)('body').append('<input type="text" id="element" value="" />');
    window.Parsley.addValidator('ismultiple', function (value, multiple) {
      if (!isNaN(parseFloat(value)) && isFinite(value)) return !(Number(value) % multiple);

      return false;
    }, 512);

    var parsleyField = (0, _jquery2.default)('#element').parsley().addConstraint('ismultiple', 2);
    expect(parsleyField.isValid()).to.eql(true);
    (0, _jquery2.default)('#element').val('1');
    expect(parsleyField.isValid()).to.be(false);
    (0, _jquery2.default)('#element').val('2');
    expect(parsleyField.isValid()).to.be(true);
    parsleyField.updateConstraint('ismultiple', 3);
    expect(parsleyField.isValid()).to.be(false);
    (0, _jquery2.default)('#element').val('9');
    expect(parsleyField.isValid()).to.be(true);
    window.Parsley.removeValidator('ismultiple');
  });
  it('should properly compute constraints on each validation', function () {
    (0, _jquery2.default)('body').append('<input type="email" data-parsley-required id="element" />');
    window.Parsley.addValidator('foobazer', function (value) {
      return 'foobar' === value;
    }, 2);
    window.Parsley.addValidator('ismultiple', function (value, multiple) {
      if (!isNaN(parseFloat(value)) && isFinite(value)) return !(Number(value) % multiple);

      return false;
    }, 512);

    var parsleyField = (0, _jquery2.default)('#element').parsley().addConstraint('ismultiple', 4).addConstraint('foobazer', true);
    parsleyField.refresh();
    expect(parsleyField.constraints.length).to.be(4);
    (0, _jquery2.default)('#element').removeAttr('data-parsley-required');
    parsleyField.refresh();
    expect(parsleyField.constraints.length).to.be(3);
    parsleyField.removeConstraint('ismultiple').refresh();
    expect(parsleyField.constraints.length).to.be(2);
    window.Parsley.removeValidator('foobazer');
    window.Parsley.removeValidator('ismultiple');
  });
  it('should handle constraints priorities on validation', function () {
    (0, _jquery2.default)('body').append('<input type="email" pattern="[A-F][0-9]{5}" required id="element" />');
    var parsleyField = (0, _jquery2.default)('#element').parsley();
    expect(parsleyField.isValid()).to.be(false);
    expect(parsleyField.validationResult.length).to.be(1);
    expect(parsleyField.validationResult[0].assert.name).to.be('required');
    (0, _jquery2.default)('#element').val('foo');
    expect(parsleyField.isValid()).to.be(false);
    expect(parsleyField.validationResult.length).to.be(1);
    expect(parsleyField.validationResult[0].assert.name).to.be('type');
    (0, _jquery2.default)('#element').val('foo@bar.baz');
    expect(parsleyField.isValid()).to.be(false);
    expect(parsleyField.validationResult.length).to.be(1);
    expect(parsleyField.validationResult[0].assert.name).to.be('pattern');
  });
  it('should handle all violations if `priorityEnabled` is set to false', function () {
    (0, _jquery2.default)('body').append('<input type="email" pattern="[A-F][0-9]{5}" value="x" id="element" />');
    var parsleyField = (0, _jquery2.default)('#element').parsley({ priorityEnabled: false });
    expect(parsleyField.isValid()).to.be(false);
    expect(parsleyField.validationResult.length).to.be(2);
  });
  it('should trigger field:validate event', function (done) {
    (0, _jquery2.default)('body').append('<input type="email" pattern="[A-F][0-9]{5}" required id="element" />');
    (0, _jquery2.default)('#element').psly().on('field:validate', function () {
      // we are before validation!
      expect(this.validationResult).to.be(true);
      done();
    }).validate();
  });
  it('should trigger field:validated event', function (done) {
    (0, _jquery2.default)('body').append('<input type="email" pattern="[A-F][0-9]{5}" required id="element" />');
    (0, _jquery2.default)('#element').psly().on('field:validated', function () {
      // we are after validation!
      expect(this.validationResult.length).to.be(1);
      done();
    }).validate();
  });
  it('should trigger field:error event', function (done) {
    (0, _jquery2.default)('body').append('<input type="email" pattern="[A-F][0-9]{5}" required id="element" />');
    (0, _jquery2.default)('#element').psly().on('field:error', function () {
      expect(this.validationResult.length).to.be(1);
      done();
    }).validate();
  });
  it('should trigger parsley:field:success event', function (done) {
    (0, _jquery2.default)('body').append('<input type="email" required id="element" value="foo@bar.baz" />');
    (0, _jquery2.default)('#element').psly().on('field:success', function () {
      expect(this.validationResult).to.be(true);
      done();
    }).validate();
  });

  it('should have the validationResult be changeable', function () {
    var submitted = false;
    (0, _jquery2.default)('<form id="element"><input/></form>').appendTo('body').parsley().on('field:success', function (field) {
      field.validationResult = false;
    }).on('field:error', function (field) {
      field.validationResult = true;
    }).on('form:submit', function (form) {
      submitted = true;
      return false;
    });
    (0, _jquery2.default)('#element').submit();
    expect(submitted).to.be(false);
    (0, _jquery2.default)('#element input').attr('required', true);
    (0, _jquery2.default)('#element').submit();
    expect(submitted).to.be(true);
  });

  it('should allow `this.value` alteration with field:validate.parsley event', function () {
    (0, _jquery2.default)('body').append('<input type="email" required id="element" value="foo@bar.baz" />');
    expect((0, _jquery2.default)('#element').parsley().validate()).to.be(true);

    (0, _jquery2.default)('#element').parsley().on('field:validate', function () {
      this.value = '';
    });

    expect((0, _jquery2.default)('#element').parsley().validate()).not.to.be(true);
  });
  it('should have validateIfEmpty / force:true to validate empty fields', function () {
    var calls = [];
    window.Parsley.addValidator('checkevenwhenempty', function (value) {
      calls.push(value);
      return 'foo@bar.com' === value;
    }, 2);

    (0, _jquery2.default)('body').append('<input type="email" data-parsley-checkevenwhenempty id="element" />');
    expect((0, _jquery2.default)('#element').psly().isValid()).to.be.eql(true);
    expect(calls).to.be.eql([]);
    expect((0, _jquery2.default)('#element').psly().isValid({ force: true })).to.be.eql(false);
    expect(calls).to.be.eql(['']);
    (0, _jquery2.default)('#element').attr('data-parsley-validate-if-empty', '');
    expect((0, _jquery2.default)('#element').psly().isValid()).to.be.eql(false);
    expect(calls).to.be.eql(['', '']);
    (0, _jquery2.default)('#element').val('foo@bar.com');
    expect((0, _jquery2.default)('#element').psly().isValid()).to.be.eql(true);
    expect(calls).to.be.eql(['', '', 'foo@bar.com']);
    window.Parsley.removeValidator('checkevenwhenempty');
  });
  it('should allow passing a specific value to `isValid` method', function () {
    expect((0, _jquery2.default)('<input type="email" value="foo">').parsley().isValid()).to.be(false);
    expect((0, _jquery2.default)('<input type="email" value="foo">').parsley().isValid({ value: '' })).to.be(true);
    expectWarning(function () {
      expect((0, _jquery2.default)('<input type="email" value="foo">').parsley().isValid(true, '')).to.be(true);
    });
  });
  it('should have a whitespace="squish" option', function () {
    (0, _jquery2.default)('body').append('<input type="text" id="element" value=" foo    bar " />');
    expect((0, _jquery2.default)('#element').parsley().getValue()).to.be(' foo    bar ');
    (0, _jquery2.default)('#element').attr('data-parsley-whitespace', 'squish').parsley().actualizeOptions();
    expect((0, _jquery2.default)('#element').parsley().getValue()).to.be('foo bar');
  });
  it('should have a whitespace="trim" option', function () {
    (0, _jquery2.default)('body').append('<input type="text" id="element" value=" foo " />');
    expect((0, _jquery2.default)('#element').parsley().getValue()).to.be(' foo ');
    (0, _jquery2.default)('#element').attr('data-parsley-whitespace', 'trim').parsley().actualizeOptions();
    expect((0, _jquery2.default)('#element').parsley().getValue()).to.be('foo');
  });
  it('should have a trim-value option', function () {
    (0, _jquery2.default)('body').append('<input type="text" id="element" value=" foo " />');
    expect((0, _jquery2.default)('#element').parsley().getValue()).to.be(' foo ');
    (0, _jquery2.default)('#element').attr('data-parsley-trim-value', true).parsley().actualizeOptions();
    expectWarning(function () {
      expect((0, _jquery2.default)('#element').parsley().getValue()).to.be('foo');
    });
  });

  it('should delay validation if debounce option specified', function (done) {
    // Use a an initially valid input. Any success event will be a sign that validation completed
    // and treated as a failure. We will make the field invalid before delayed validation occurs,
    // so only error event will be a test success.
    (0, _jquery2.default)('body').append('<input data-parsley-debounce="100" value="x" required data-parsley-trigger="validatenow" id="element"/>');
    (0, _jquery2.default)('#element').parsley().on('field:error', function () {
      return done();
    }).on('field:success', function () {
      return expect().fail('validation should not happen yet');
    });

    // Trigger validation immediately
    (0, _jquery2.default)('#element').trigger('validatenow');
    // and a bit later, which should reset the counter
    setTimeout(function () {
      return (0, _jquery2.default)('#element').trigger('validatenow');
    }, 50);
    // Set final condition after a delay longer than our debounce, less than 50+debounce
    setTimeout(function () {
      return (0, _jquery2.default)('#element').val('');
    }, 140);
  });

  it('should inherit options from the form, even if the form is bound after', function () {
    (0, _jquery2.default)('body').append('<form id="element" data-parsley-required>' + '<input type="text"/></form>');
    var psly = (0, _jquery2.default)('#element input').parsley();
    expect(psly.isValid()).not.to.be(false);
    (0, _jquery2.default)('#element').parsley();
    expect(psly.isValid()).to.be(false);
  });
  it('should have options that can be set easily', function () {
    var psly = (0, _jquery2.default)('<input type="text"/>').parsley();
    psly.options.required = true;
    expect(psly.isValid()).to.be(false);
  });
  it('should have a value option', function () {
    (0, _jquery2.default)('body').append('<input type="text" id="element"/>');
    expect((0, _jquery2.default)('#element').parsley({ value: 'foo' }).getValue()).to.be('foo');
  });
  it('should accept a function as value option', function () {
    (0, _jquery2.default)('body').append('<input type="text" id="element"/>');
    var str = 'fo';
    var parsley = (0, _jquery2.default)('#element').parsley({ value: function value() {
        return str = str + 'o';
      } });
    expect(parsley.getValue()).to.be('foo');
    expect(parsley.getValue()).to.be('fooo');
  });
  it('should properly handle null or undefined values', function () {
    (0, _jquery2.default)('body').append('<input type="text" id="element" required value/>');
    expect((0, _jquery2.default)('#element').parsley().isValid()).to.be(false);
  });
  afterEach(function () {
    (0, _jquery2.default)('#element, .parsley-errors-list').remove();
  });
});

},{"../../src/parsley":9,"../../src/parsley/field":14,"jquery":1}],35:[function(require,module,exports){
'use strict';

var _jquery = require('jquery');

var _jquery2 = _interopRequireDefault(_jquery);

var _form = require('../../src/parsley/form');

var _form2 = _interopRequireDefault(_form);

var _parsley = require('../../src/parsley');

var _parsley2 = _interopRequireDefault(_parsley);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

describe('Form', function () {
  it('should be a function', function () {
    expect(_form2.default).to.be.a('function');
  });
  it('should bind parsleyFields children', function () {
    (0, _jquery2.default)('body').append('<form id="element">' + '<input id="field1" type="text"/>' + '<div id="field2"></div>' + '<textarea id="field2"></textarea>' + '</form>');
    var parsleyForm = (0, _jquery2.default)('#element').parsley();
    expect(parsleyForm.fields.length).to.be(2);
  });
  it('should bind parsleyFields children, and not excluded ones', function () {
    (0, _jquery2.default)('body').append('<form id="element">' + '<input id="field1" type="text"/>' + '<div id="field2"></div>' + '<textarea id="field2"></textarea>' + '<div data-parsley-validate></div>' + // Form, not a valid child
    '<input id="field3" disabled />' + // Disabled, excluded by custom options below
    '<input id="field-excluded" data-parsley-excluded="true" />' + // Excluded with 'excluded' option
    '<input type="submit"/>' + // Excluded field, not valid
    '</form>');
    var parsleyForm = (0, _jquery2.default)('#element').parsley({ excluded: '[disabled], input[type=button], input[type=submit], input[type=reset]' });
    expect(parsleyForm.fields.length).to.be(2);
  });
  it('should properly reset excluded', function () {
    (0, _jquery2.default)('body').append('<form id="element">' + '<input id="field" required class="foo"/>' + '</form>');
    var parsleyForm = (0, _jquery2.default)('#element').parsley();
    parsleyForm.validate();
    expect((0, _jquery2.default)('.parsley-error').length).to.be(1);
    parsleyForm.options.excluded = ".foo";
    parsleyForm.validate();
    expect((0, _jquery2.default)('.parsley-error').length).to.be(0);
  });
  it('should properly bind options for form and children fields', function () {
    (0, _jquery2.default)('body').append('<form id="element" data-parsley-trigger="change">' + '<input id="field1" type="text" data-parsley-required="true" />' + '<div id="field2"></div>' + '<textarea id="field3" data-parsley-notblank="true"></textarea>' + '</form>');
    var parsleyForm = (0, _jquery2.default)('#element').parsley();
    expect(parsleyForm.fields.length).to.be(2);
    expect((0, _jquery2.default)('#field1').parsley().options.trigger).to.be('change');
    expect((0, _jquery2.default)('#field1').parsley().options.required).to.eql(true);
    expect((0, _jquery2.default)('#field1').parsley().options.notblank).to.be(undefined);
    expect((0, _jquery2.default)('#field3').parsley().options.notblank).to.eql(true);
    expect((0, _jquery2.default)('#field3').parsley().options.required).to.be(undefined);
  });
  it('should properly store validation state after `validate()`', function () {
    (0, _jquery2.default)('body').append('<form id="element" data-parsley-trigger="change">' + '<input id="field1" type="text" data-parsley-required="true" />' + '<div id="field2"></div>' + '<textarea id="field3" data-parsley-notblank="true"></textarea>' + '</form>');
    var parsleyForm = (0, _jquery2.default)('#element').parsley();
    parsleyForm.validate();
    expect(parsleyForm.validationResult).to.be(false);
    (0, _jquery2.default)('#field1').val('foo');
    (0, _jquery2.default)('#field3').val('foo');
    expect(parsleyForm.validate()).to.be(true);
  });
  it('should handle group validation', function () {
    (0, _jquery2.default)('body').append('<form id="element">' + '<input id="field1" type="text" data-parsley-group="foo" data-parsley-required="true" />' + '<div id="field2"></div>' + '<textarea id="field3" data-parsley-required="true"></textarea>' + '</form>');
    var parsleyForm = (0, _jquery2.default)('#element').parsley();
    expect(parsleyForm.isValid()).to.be(false);
    (0, _jquery2.default)('#field1').val('value');
    expect(parsleyForm.isValid()).to.be(false);
    expect(parsleyForm.isValid({ group: 'foo' })).to.be(true);
    (0, _jquery2.default)('#field3').attr('data-parsley-group', 'bar');
    expectWarning(function () {
      expect(parsleyForm.isValid('bar')).to.be(false);
    });
  });
  it('should handle group validation with controls with multiple group names', function () {
    (0, _jquery2.default)('body').append('<form id="element">' + '<input id="field1" type="text" data-parsley-group=\'["foo", "bar"]\' data-parsley-required="true" />' + '<input id="field2" type="text" data-parsley-group=\'["bar", "baz"]\' data-parsley-required="true" />' + '<textarea id="field3" data-parsley-group=\'["baz", "qux"]\' data-parsley-required="true"></textarea>' + '</form>');
    var parsleyForm = (0, _jquery2.default)('#element').parsley();
    expect(parsleyForm.isValid()).to.be(false);
    (0, _jquery2.default)('#field1').val('value');
    (0, _jquery2.default)('#field2').val('value');
    expect(parsleyForm.isValid()).to.be(false);
    // group name only on one required field, with value
    expect(parsleyForm.isValid('foo')).to.be(true);
    // group name on multiple required fields, all with values
    expect(parsleyForm.isValid('bar')).to.be(true);
    // group name on multiple required fields, one missing a value
    expect(parsleyForm.isValid('baz')).to.be(false);
    // group name on single required field, without value
    expect(parsleyForm.isValid('qux')).to.be(false);
  });
  it('should send submit button values, even for async validations', function () {
    var deferred = null;
    window.Parsley.addValidator('custom', function () {
      deferred = _jquery2.default.Deferred();
      return deferred.promise();
    });

    (0, _jquery2.default)('body').append('<form id="element">' + '<input id="field1" type="text" name="nick" data-parsley-custom data-parsley-required />' + '<div id="field2" name="comment"></div>' + '<input type="submit" name="foo" value="bar" />' + '<input type="submit" name="foo" value="other" />' + '<button name="foo" value="but">ok</button>' + '</form>');
    var parsleyForm = (0, _jquery2.default)('#element').parsley();

    (0, _jquery2.default)('#element input:last').click();
    // Form should not be submitted at this point, coz field is required
    expect(deferred).to.be(null);

    (0, _jquery2.default)('#field1').val('something');
    var values = [];
    (0, _jquery2.default)('#element').on('submit', function (evt) {
      expect(evt.parsley).to.be(true);
      values.push((0, _jquery2.default)('form input[type!=submit][name="foo"]').val());
      evt.preventDefault();
    });

    (0, _jquery2.default)('#element button').click();
    expect(values).to.eql([]);
    deferred.resolve();
    expect(values).to.eql(['but']);

    (0, _jquery2.default)('#element input[value="other"]').click();
    deferred.resolve();
    expect(values).to.eql(['but', 'other']);

    (0, _jquery2.default)('#element').submit(); // Similar to pressing 'enter'
    deferred.resolve();
    expect(values).to.eql(['but', 'other', 'bar']);

    window.Parsley.removeValidator('custom');
  });
  it('should not validate when triggered by a button with formnovalidate', function () {
    var $form = (0, _jquery2.default)('<form id="element"><input type="string" required /><input type="submit" formnovalidate /><form>').appendTo((0, _jquery2.default)('body'));
    $form.on('submit', function (e) {
      e.preventDefault();
    });

    var callbacks = [];
    _jquery2.default.each(['validate', 'error', 'success', 'validated', 'submit'], function (i, cb) {
      $form.parsley().on('form:' + cb, function () {
        callbacks.push(cb);
      });
    });
    $form.parsley();
    $form.find('input[type=submit]').click();
    expect(callbacks.join()).to.be('');
  });

  it('should have a force option for validate and isValid methods', function () {
    (0, _jquery2.default)('body').append('<form id="element">' + '<input id="field1" type="email" />' + '<input id="field3" data-parsley-notblank="true" />' + '</form>');
    expect((0, _jquery2.default)('#element').parsley().isValid()).to.be(true);
    expect((0, _jquery2.default)('#element').parsley().isValid({ force: true })).to.be(false);
    expect((0, _jquery2.default)('#element').parsley().validate()).to.be(true);
    expectWarning(function () {
      expect((0, _jquery2.default)('#element').parsley().validate(undefined, true)).to.be(false);
    });
  });
  it('should properly bind dynamically added fields', function () {
    (0, _jquery2.default)('body').append('<form id="element" data-parsley-trigger="change"></form>');
    (0, _jquery2.default)('#element').append('<input type="email" id="email" required />');
    var fieldInstance = (0, _jquery2.default)('#email').psly();
    expect(fieldInstance.__class__).to.be('Field');
    var formInstance = (0, _jquery2.default)('#element').psly();
    // form corectly have its field, and field have finaly its parent form
    expect(formInstance.fields[0].$element.attr('id')).to.be('email');
    expect(fieldInstance.parent.__class__).to.be('Form');
  });
  it('should fire the right callbacks in the right order', function () {
    var $form = (0, _jquery2.default)('<form id="element"><input type="string" required /><form>').appendTo((0, _jquery2.default)('body'));
    $form.on('submit', function (e) {
      e.preventDefault();
    });

    var callbacks = [];
    _jquery2.default.each(['validate', 'error', 'success', 'validated', 'submit'], function (i, cb) {
      $form.parsley().on('form:' + cb, function () {
        callbacks.push(cb);
      });
    });
    $form.parsley();
    $form.submit();
    $form.find('input').val('Hello');
    $form.submit();
    expect(callbacks.join()).to.be('validate,error,validated,validate,success,validated,submit');
  });
  it('should fire "form:validate.parsley" to give the opportunity for changes before validation occurs', function () {
    var $form = (0, _jquery2.default)('<form id="element"><input type="string" required /><form>').appendTo((0, _jquery2.default)('body'));
    $form.parsley().on('form:validate', function () {
      this.$element.find('input').remove();
    });
    expect($form.parsley().validate()).to.be(true);
  });
  it('should stop event propagation on form submit', function (done) {
    (0, _jquery2.default)('body').append('<form id="element"><input type="text" required/></form>');
    var parsleyInstance = (0, _jquery2.default)('#element').parsley().on('form:validated', function () {
      done();
    });
    (0, _jquery2.default)('#element').on('submit', function () {
      // It sould never pass here!
      expect(true).to.be(false);
    }).submit();
  });

  it('should have the validationResult be changeable', function () {
    var submitted = false;
    (0, _jquery2.default)('<form id="element"></form>').appendTo('body').parsley().on('form:success', function (form) {
      form.validationResult = false;
    }).on('form:error', function (form) {
      form.validationResult = true;
    }).on('form:submit', function (form) {
      submitted = true;
      return false;
    });
    (0, _jquery2.default)('#element').submit();
    expect(submitted).to.be(false);
    (0, _jquery2.default)('#element').append('<input required>').submit();
    expect(submitted).to.be(true);
  });

  it('should fire form:submit.event and be interruptable when validated', function (done) {
    (0, _jquery2.default)('<form id="element"></form>').appendTo('body').parsley().on('form:submit', function () {
      done();
      return false;
    });
    (0, _jquery2.default)('#element').submit();
  });

  it('should deprecate interruptions with submitEvent.preventDefault()', function () {
    expectWarning(function () {
      (0, _jquery2.default)('<form id="element"></form>').appendTo('body').parsley().on('form:validate', function (form) {
        form.submitEvent.preventDefault();
      }).on('form:submit', function (form) {
        throw new Error('Form should not have been submitted');
      });
      (0, _jquery2.default)('#element').submit();
    });
  });

  it('should fire field:reset event if fields are removed or excluded', function () {
    var parsleyInstance;
    var steps = [];
    var step = 'init';
    var parsleyForm = (0, _jquery2.default)('<form id="element"><input type="text" required></form>').appendTo('body').parsley().on('field:reset', function () {
      steps.push('form: ' + step);
      expect(this).to.be(parsleyInstance);
    });
    parsleyInstance = (0, _jquery2.default)('#element input').parsley().on('field:reset', function () {
      steps.push('field: ' + step);
      expect(this).to.be(parsleyInstance);
    });

    parsleyForm.validate();
    parsleyForm.validate();
    parsleyForm.options.excluded = '[required]';
    step = 'excluded';
    parsleyForm.validate();
    parsleyForm.validate();
    parsleyForm.options.excluded = '';
    step = 'not excluded';
    parsleyForm.validate();
    parsleyForm.validate();
    var $i = (0, _jquery2.default)('#element input').detach();
    step = 'detached';
    parsleyForm.validate();
    parsleyForm.validate();
    $i.appendTo('form');
    step = 'reattached';
    parsleyForm.validate();
    parsleyForm.validate();
    $i.remove();
    step = 'removed';
    parsleyForm.validate();
    parsleyForm.validate();
    expect(steps).to.eql(['field: excluded', 'form: excluded', 'field: detached', 'form: detached', 'field: removed', 'form: removed']);
  });

  it('should handle validators returning promises', function (done) {
    var called = 0;
    var shouldSubmit = false;
    var form = (0, _jquery2.default)('<form id="element"><input data-parsley-custom value="x"/></form>').appendTo('body').parsley();
    var deferred;
    window.Parsley.addValidator('custom', function () {
      called++;
      deferred = _jquery2.default.Deferred();
      return deferred.promise();
    });

    (0, _jquery2.default)('#element').on('submit', function (evt) {
      evt.preventDefault();
      expect(evt.parsley).to.be(true); // Sanity check
      expect(shouldSubmit).to.be(true);
      window.Parsley.removeValidator('custom');
      done();
    });
    (0, _jquery2.default)('#element').submit();
    expect(called).to.eql(1);
    deferred.reject();

    var promise = form.whenValidate();
    expect(called).to.eql(2);
    expect(promise.state()).to.eql('pending');
    deferred.reject();
    expect(promise.state()).to.eql('rejected');

    (0, _jquery2.default)('#element').submit();
    expect(called).to.eql(3);
    shouldSubmit = true;
    deferred.resolve();
  });

  it('should handle priority correctly', function () {
    var calls = [];
    var form = (0, _jquery2.default)('<form id="element"><input value="0" data-parsley-custom1 data-parsley-custom2 data-parsley-custom3 data-parsley-custom4/></form>').appendTo('body').parsley().on('form:submit', function (evt) {
      return false;
    });

    var _loop = function _loop(i) {
      window.Parsley.addValidator('custom' + i, {
        priority: i <= 2 ? 100 : 10 - i,
        validateNumber: function validateNumber(value, requirement) {
          calls.push(i);
          return value > i;
        }
      });
    };

    var _arr = [1, 2, 3, 4];
    for (var _i = 0; _i < _arr.length; _i++) {
      var i = _arr[_i];
      _loop(i);
    }(0, _jquery2.default)('#element').submit();
    (0, _jquery2.default)('#element input').val('3');
    (0, _jquery2.default)('#element').submit();
    (0, _jquery2.default)('#element input').val('5');
    (0, _jquery2.default)('#element').submit();
    expect(calls).to.eql([2, 1, 2, 1, 3, 2, 1, 3, 4]);
    var _arr2 = [1, 2, 3, 4];
    for (var _i2 = 0; _i2 < _arr2.length; _i2++) {
      var i = _arr2[_i2];
      window.Parsley.removeValidator('custom' + i);
    }
  });

  it('should refresh', function () {
    (0, _jquery2.default)('body').append('<form id="element">' + '<input required />' + '</form>');
    var parsleyForm = (0, _jquery2.default)('#element').parsley();
    parsleyForm.validate();
    expect((0, _jquery2.default)('.parsley-error').length).to.be(1);
    parsleyForm.options.excluded = "input";
    parsleyForm.refresh();
    expect((0, _jquery2.default)('.parsley-error').length).to.be(0);
  });

  afterEach(function () {
    (0, _jquery2.default)('#element').remove();
  });
});

},{"../../src/parsley":9,"../../src/parsley/form":15,"jquery":1}],36:[function(require,module,exports){
'use strict';

var _jquery = require('jquery');

var _jquery2 = _interopRequireDefault(_jquery);

var _parsley = require('../../src/parsley');

var _parsley2 = _interopRequireDefault(_parsley);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

describe('Multiple', function () {
  it('should not throw errors with multiple items with weird automated generated names', function () {
    (0, _jquery2.default)('body').append('<form id="element">' + '<input type="checkbox" name="hello[]" id="check1" value="1" />' + '<input type="checkbox" name="{{ hello }}" id="check2" value="2" />' + '<input type="checkbox" name="$hello$" id="check3" value="3" />' + '<input type="checkbox" name="hello world[ x ]" id="check4" value="4" />' + '<input type="checkbox" value="foo" />' + '</form>');
    expectWarning(function () {
      (0, _jquery2.default)('#element').parsley();
    });
  });
  it('should return same Multiple instance for each field in same multiple group, and it should count as one field in form', function () {
    (0, _jquery2.default)('body').append('<form id="element" >' + '<input type="checkbox" name="check" id="check1" value="1" />' + '<input type="checkbox" name="check" id="check2" value="2" />' + '<input type="checkbox" name="check" id="check3" value="3" />' + '</form>');
    var parsleyMultipleInstance = (0, _jquery2.default)('#check1').parsley();
    expect((0, _jquery2.default)('#check2').parsley().__id__).to.be(parsleyMultipleInstance.__id__);
    expect((0, _jquery2.default)('#check3').parsley().__id__).to.be(parsleyMultipleInstance.__id__);
    expect(parsleyMultipleInstance.$elements.length).to.be(3);
    expect((0, _jquery2.default)('#element').parsley().fields.length).to.be(1);
  });
  it('should auto add a data-parsley-multiple attribute to each correctly binded multiple input', function () {
    (0, _jquery2.default)('body').append('<form id="element" >' + '<input type="checkbox" name="check" id="check1" value="1" />' + '<input type="checkbox" name="check" id="check2" value="2" />' + '<input type="checkbox" name="check" id="check3" value="3" />' + '<input type="checkbox" value="foo" />' + '</form>');
    expectWarning(function () {
      (0, _jquery2.default)('#element').parsley();
    });
    expect((0, _jquery2.default)('#check1').attr('data-parsley-multiple')).to.be('check');
    expect((0, _jquery2.default)('#check2').attr('data-parsley-multiple')).to.be('check');
    expect((0, _jquery2.default)('#check3').attr('data-parsley-multiple')).to.be('check');
    expect((0, _jquery2.default)('#check4').eq(3).attr('data-parsley-multiple')).to.be(undefined);
  });
  it('should have a specific `getValue` method (checkbox)', function () {
    (0, _jquery2.default)('body').append('<form id="element" >' + '<input type="checkbox" name="check[]" id="check1" value="1" />' + '<input type="checkbox" name="check[]" id="check2" value="2" />' + '</form>');
    expect((0, _jquery2.default)('#check1').parsley().getValue()).to.be.eql([]);
    expect((0, _jquery2.default)('#check2').attr('checked', 'checked').parsley().getValue()).to.be.eql(['2']);
  });
  it('should have a specific `getValue` method (radio)', function () {
    (0, _jquery2.default)('body').append('<form id="element" >' + '<input type="radio" name="radio" id="radio1" value="3" />' + '<input type="radio" name="radio" id="radio2" value="4" />' + '</form>');
    expect((0, _jquery2.default)('#radio1').parsley().getValue()).to.be.eql('');
    expect((0, _jquery2.default)('#radio2').attr('checked', 'checked').parsley().getValue()).to.be.eql('4');
  });
  it('should handle required constraint (checkbox)', function () {
    (0, _jquery2.default)('body').append('<form id="element" >' + '<input type="checkbox" name="check[]" id="check1" value="1" />' + '<input type="checkbox" name="check[]" id="check2" value="2" required />' + '</form>');
    expect((0, _jquery2.default)('#element').parsley().isValid()).to.be(false);
    (0, _jquery2.default)('#check2').attr('checked', 'checked');
    expect((0, _jquery2.default)('#element').parsley().isValid()).to.be(true);
  });
  it('should handle required constraint (radio)', function () {
    (0, _jquery2.default)('body').append('<form id="element" >' + '<input type="radio" name="radio" id="radio1" value="3" required />' + '<input type="radio" name="radio" id="radio2" value="4" />' + '</form>');
    expect((0, _jquery2.default)('#element').parsley().isValid()).to.be(false);
    (0, _jquery2.default)('#radio1').attr('checked', 'checked');
    expect((0, _jquery2.default)('#element').parsley().isValid()).to.be(true);
  });
  it('should handle check constraint', function () {
    (0, _jquery2.default)('body').append('<form id="element" >' + '<input type="checkbox" name="check[]" id="check1" value="1" data-parsley-check="[1, 2]" />' + '<input type="checkbox" name="check[]" id="check2" value="2" />' + '<input type="checkbox" name="check[]" id="check3" value="3" />' + '<input type="checkbox" name="check[]" id="check4" value="4" />' + '</form>');

    // if not required, field is optional and do not fail
    expect((0, _jquery2.default)('#check1').parsley().isValid()).to.be.eql(true);
    expect((0, _jquery2.default)('#element').parsley().isValid()).to.be(true);

    // once required, it fails if not rightly checked
    (0, _jquery2.default)('#check1').attr('required', 'true');
    expect((0, _jquery2.default)('#element').parsley().isValid()).to.be(false);
    (0, _jquery2.default)('#check2').attr('checked', 'checked');
    expect((0, _jquery2.default)('#element').parsley().isValid()).to.be(true);
    (0, _jquery2.default)('#check1').attr('checked', 'checked');
    (0, _jquery2.default)('#check3').attr('checked', 'checked');
    expect((0, _jquery2.default)('#element').parsley().isValid()).to.be(false);
  });
  it('should support select multiple', function () {
    (0, _jquery2.default)('body').append('<select multiple name="foo" id="element" required data-parsley-mincheck="2">' + '<option value="1">1</option>' + '<option value="2">2</option>' + '<option value="3">3</option>' + '</select>');
    var parsleyField = (0, _jquery2.default)('#element').parsley();
    expect(parsleyField.__class__).to.be('FieldMultiple');
    expect(parsleyField.options.multiple).to.be('foo');
    expect(parsleyField.getValue()).to.be.eql([]);
    expect(parsleyField.isValid()).to.be(false);
    (0, _jquery2.default)('#element option[value="1"]').attr('selected', 'selected');
    expect(parsleyField.getValue()).to.be.eql(['1']);
    expect(parsleyField.isValid()).to.be(false);
    (0, _jquery2.default)('#element option[value="2"]').attr('selected', 'selected');
    expect(parsleyField.getValue()).to.be.eql(['1', '2']);
    expect(parsleyField.isValid()).to.be(true);
  });
  it('should support select with default without a value', function () {
    (0, _jquery2.default)('body').append('<select id="element" required>' + '<option selected="selected" value>default</option>' + '<option value="2">2</option>' + '</select>');
    expect((0, _jquery2.default)('#element').parsley().isValid()).to.be(false);
  });
  it('should not bind radio or checkboxes without a name or and id or a multiple option', function () {
    (0, _jquery2.default)('body').append('<input type="radio" value="foo" />');
    var parsleyInstance = expectWarning(function () {
      return (0, _jquery2.default)('input[type=radio]').psly();
    });
    expect(parsleyInstance.__class__).to.be('Parsley');
    (0, _jquery2.default)('input[type=radio]').attr('id', 'element');
    parsleyInstance = (0, _jquery2.default)('#element').parsley();
    expect(parsleyInstance.__class__).to.be('FieldMultiple');
    expect(parsleyInstance.options.multiple).to.be('element');
    (0, _jquery2.default)('#element').attr('name', 'element');
    parsleyInstance = (0, _jquery2.default)('input[name=element]').parsley();
    expect(parsleyInstance.__class__).to.be('FieldMultiple');
    expect(parsleyInstance.options.multiple).to.be('element');
    parsleyInstance.destroy();
    (0, _jquery2.default)('#element').attr('data-parsley-multiple', 'elementfoo');
    parsleyInstance = (0, _jquery2.default)('input[name=element]').parsley();
    expect(parsleyInstance.__class__).to.be('FieldMultiple');
    expect(parsleyInstance.options.multiple).to.be('elementfoo');
  });
  it('should bind select multiple input without a name or a multiple option', function () {
    (0, _jquery2.default)('body').append('<select multiple id="element"></select>');
    expect((0, _jquery2.default)('#element').parsley().__class__).to.be('FieldMultiple');
    expect((0, _jquery2.default)('#element').attr('data-parsley-multiple')).to.be('element');
  });
  it('should remove errors on change, whatever field is changed', function () {
    (0, _jquery2.default)('body').append('<form id="element" >' + '<input type="checkbox" name="check[]" id="check1" value="1" required />' + '<input type="checkbox" name="check[]" id="check2" value="2" />' + '<input type="checkbox" name="check[]" id="check3" value="3" />' + '<input type="checkbox" name="check[]" id="check4" value="4" />' + '</form>');
    (0, _jquery2.default)('#element').parsley().validate();
    expect((0, _jquery2.default)('.parsley-errors-list.filled').length).to.be(1);
    (0, _jquery2.default)('#check2').attr('checked', 'checked').trigger('input');
    expect((0, _jquery2.default)('.parsley-errors-list.filled').length).to.be(0);
  });
  it('should add errors on change if trigger enabled, whatever field is changed', function () {
    (0, _jquery2.default)('body').append('<form id="element" >' + '<input type="checkbox" name="check[]" id="check1" value="1" required data-parsley-mincheck="2" data-parsley-trigger="change" />' + '<input type="checkbox" name="check[]" id="check2" value="2" />' + '<input type="checkbox" name="check[]" id="check3" value="3" />' + '<input type="checkbox" name="check[]" id="check4" value="4" />' + '</form>');
    var parsleyInstance = (0, _jquery2.default)('#check1').parsley();
    expect(parsleyInstance.validationResult).to.be(true);
    (0, _jquery2.default)('#check3').trigger(_jquery2.default.Event('change'));
    expect(parsleyInstance.validationResult.length).to.be(1);
  });
  it('should bind only valid multiple siblings sharing the same name', function () {
    (0, _jquery2.default)('body').append('<form id="element">' + '<input name="foo" type="hidden" value="0"/>' + '<input name="foo" id="check" type="checkbox" value="1"/>' + '<input name="foo" id="check-2" type="checkbox" value="2"/>' + '</form>' + '<form id="element-2">' + '<input name="foo" id="other-check" type="checkbox" value="3"/>' + '</form>');
    (0, _jquery2.default)('#element, #element-2').parsley();
    expect((0, _jquery2.default)('#check').parsley().$elements.length).to.be(2);
  });
  it('should handle form namespace configuration inheritance and click events while multiple binding through Form', function () {
    (0, _jquery2.default)('body').append('<form id="element" >' + '<input type="radio" name="radio" id="radio1" value="3" foo-bar-required />' + '<input type="radio" name="radio" id="radio2" value="4" />' + '</form>');
    // set specific namespace here for form
    var parsleyInstance = (0, _jquery2.default)('#element').parsley({ namespace: 'foo-bar-' });
    parsleyInstance.validate();
    expect((0, _jquery2.default)('ul.parsley-errors-list li').length).to.be(1);
    (0, _jquery2.default)('#radio2').trigger('click').trigger('input');
    expect((0, _jquery2.default)('ul.parsley-errors-list li').length).to.be(0);
  });
  it('should handle dynamic multiple items removal', function () {
    (0, _jquery2.default)('body').append('<form id="element" >' + '<input type="checkbox" name="check[]" id="check1" value="1" data-parsley-check="[1, 2]" />' + '<input type="checkbox" name="check[]" id="check2" value="2" />' + '<input type="checkbox" name="check[]" id="check3" value="3" />' + '<input type="checkbox" name="check[]" id="check4" value="4" />' + '</form>');
    // bind all multiple checkbox inputs. TODO refacto multiple binding
    (0, _jquery2.default)('#element').parsley();
    var parsleyInstance = (0, _jquery2.default)('[type=checkbox]:first').parsley();
    expect(parsleyInstance.$elements.length).to.be(4);
    (0, _jquery2.default)('[type=checkbox]:last').remove();
    // validate form to go through all multiple inputs. TODO refacto multiple binding
    (0, _jquery2.default)('#element').parsley().validate();
    expect(parsleyInstance.$elements.length).to.be(3);
  });
  it('value option can be a function', function () {
    (0, _jquery2.default)('body').append('<form id="element" >' + '<input type="checkbox" name="check[]" id="check1" value="1" required />' + '<input type="checkbox" name="check[]" id="check2" value="2" />' + '<input type="checkbox" name="check[]" id="check3" value="3" />' + '<input type="checkbox" name="check[]" id="check4" value="4" />' + '</form>');
    var called = false;
    var valid = (0, _jquery2.default)('#element').parsley({ value: function value() {
        called = true;return ['x'];
      } }).isValid();
    expect(valid).to.be(true);
    expect(called).to.be(true);
  });
  afterEach(function () {
    (0, _jquery2.default)('#element, #element-2, .parsley-errors-list').remove();
  });
});

},{"../../src/parsley":9,"jquery":1}],37:[function(require,module,exports){
'use strict';

var _jquery = require('jquery');

var _jquery2 = _interopRequireDefault(_jquery);

var _parsley = require('../../src/parsley');

var _parsley2 = _interopRequireDefault(_parsley);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var Factory = _parsley2.default.Factory;

describe('Factory', function () {
  it('should be a function', function () {
    expect(Factory).to.be.a('function');
  });
  it('should register some window globals', function () {
    expect(window.ParsleyUtils).not.to.be(undefined);
    expect(window.ParsleyValidator).not.to.be(undefined);
  });
  it('should throw an error if no element given', function () {
    expect(Factory).to.throwException();
  });
  it('should return Form instance if instantiated on a form', function () {
    (0, _jquery2.default)('body').append('<form id="element"></form>');
    var parsleyInstance = new Factory((0, _jquery2.default)('#element')[0]);
    expect(parsleyInstance).to.be.an('object');
    expect(parsleyInstance.__class__).to.be('Form');
  });
  it('should return Field instance if instantiated on a field', function () {
    (0, _jquery2.default)('body').append('<input id="element" />');
    var parsleyInstance = new Factory((0, _jquery2.default)('#element')[0]);
    expect(parsleyInstance).to.be.an('object');
    expect(parsleyInstance.__class__).to.be('Field');
  });
  it('should return Field even if instantiated on an unsupported element', function () {
    (0, _jquery2.default)('body').append('<div id="element"></div>');
    var parsleyInstance = new Factory((0, _jquery2.default)('#element')[0]);
    expect(parsleyInstance).to.be.an('object');
    expect(parsleyInstance.__class__).to.be('Field');
  });
  it('should return Field instance even if instantiated on an excluded field type, and do not have an errors container', function () {
    (0, _jquery2.default)('body').append('<input type="submit" id="element" />');
    var parsleyInstance = new Factory((0, _jquery2.default)('#element')[0]);
    expect(parsleyInstance).to.be.an('object');
    expect(parsleyInstance.__class__).to.be('Field');
  });
  it('should have excluded fields by default', function () {
    (0, _jquery2.default)('body').append('<form id="element" >' + '<input type="submit" />' + '<input type="reset" />' + '<input type="hidden" />' + '<input type="button" />' + '</form>');
    var parsleyInstance = (0, _jquery2.default)('#element').parsley();
    expect(parsleyInstance.fields.length).to.be(0);
  });
  it('should return Form if instantiated on an unsupported element with data-parsley-validate attribute', function () {
    (0, _jquery2.default)('body').append('<div id="element" data-parsley-validate></div>');
    var parsleyInstance = new Factory((0, _jquery2.default)('#element')[0]);
    expect(parsleyInstance).to.be.an('object');
    expect(parsleyInstance.__class__).to.be('Form');
  });
  it('should handle namespace configuration', function () {
    (0, _jquery2.default)('body').append('<div id="element"></div>');

    // default ParsleyOptions.namespace
    expect(new Factory((0, _jquery2.default)('#element')[0]).options.namespace).to.be('data-parsley-');

    // global JS config
    (0, _jquery2.default)('#element').parsley().destroy();
    window.ParsleyConfig.namespace = 'data-foo-';
    expect(new Factory((0, _jquery2.default)('#element')[0]).options.namespace).to.be('data-foo-');

    // option on the go
    (0, _jquery2.default)('#element').parsley().destroy();
    expect(new Factory((0, _jquery2.default)('#element')[0], {
      namespace: 'data-bar-'
    }).options.namespace).to.be('data-bar-');

    // data- DOM-API
    (0, _jquery2.default)('#element').parsley().destroy();
    (0, _jquery2.default)('#element').attr('data-parsley-namespace', 'data-baz-');
    expect(new Factory((0, _jquery2.default)('#element')[0], {
      namespace: 'data-bar-'
    }).options.namespace).to.be('data-bar-');
    delete window.ParsleyConfig.namespace;
  });
  it('should handle proper options management', function () {
    (0, _jquery2.default)('body').append('<form id="element" data-parsley-foo="bar" data-parsley-baz="baz"></form>');
    window.ParsleyConfig = Object.assign(window.ParsleyConfig, { bar: 'baz', baz: 'qux' });
    var parsleyInstance = new Factory((0, _jquery2.default)('#element')[0], { qux: 'bux' });
    expect(parsleyInstance.options.foo).to.be('bar');
    expect(parsleyInstance.options.baz).to.be('baz');
    expect(parsleyInstance.options.bar).to.be('baz');
    expect(parsleyInstance.options.qux).to.be('bux');
    delete window.ParsleyConfig.bar;
    delete window.ParsleyConfig.baz;
  });
  it('should have a jquery plugin API', function () {
    (0, _jquery2.default)('body').append('<input type="text" id="element" data-parsley-namespace="baz-"></div>');
    var parsleyInstance = (0, _jquery2.default)('#element').parsley({ foo: 'bar' });
    expect(parsleyInstance.__class__).to.be('Field');
    expect(parsleyInstance.options.namespace).to.be('baz-');
    expect(parsleyInstance.options.foo).to.be('bar');
  });
  it('should have a jquery API returning undefined if done on a empty set', function () {
    expect((0, _jquery2.default)('#foo').parsley()).to.be(undefined);
  });
  it('should have a jquery API that binds multiple selectors', function () {
    (0, _jquery2.default)('body').append('<div id="element">' + '<input type="text" id="foo" required />' + '<input type="text" id="bar" required />' + '</div>');
    expect((0, _jquery2.default)('input').parsley().length).to.be(2);
  });
  it('should set options with $.fn.parsley', function () {
    (0, _jquery2.default)('body').append('<form id="element" data-parsley-foo="bar"></form>');
    var parsleyInstance = (0, _jquery2.default)('#element').parsley({ foo: 42 });
    expect(parsleyInstance.options.foo).to.be(42);
    (0, _jquery2.default)('#element').parsley({ foo: 'updated' });
    expect(parsleyInstance.options.foo).to.be('updated');
    delete parsleyInstance.options.foo;
    expect(parsleyInstance.options.foo).to.be('bar');
  });

  afterEach(function () {
    (0, _jquery2.default)('#element').remove();
  });
});

},{"../../src/parsley":9,"jquery":1}],38:[function(require,module,exports){
'use strict';

var _jquery = require('jquery');

var _jquery2 = _interopRequireDefault(_jquery);

var _parsley = require('../../src/parsley');

var _parsley2 = _interopRequireDefault(_parsley);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

describe('PubSub', function () {
  it('listen() without context', function (done) {
    expectWarning(function () {
      _jquery2.default.listen('foo', function (instance, arg) {
        expect(arg).to.be('bar');
        done();
      });
    });
    _jquery2.default.emit('foo', 'bar');
  });
  it('listen() with context', function (done) {
    var obj = { foo: function foo(bar) {
        return 'foo' + bar;
      } };
    _jquery2.default.listen('foo', obj, function (instance, arg) {
      expect(this.foo(arg)).to.be('foobar');
      done();
    });
    _jquery2.default.emit('foo', 'bar');
  });
  it('listenTo() Field', function (done) {
    (0, _jquery2.default)('body').append('<input type="text" id="element" />');
    (0, _jquery2.default)('body').append('<input type="text" id="element2" />');

    var instance = (0, _jquery2.default)('#element').psly();

    _jquery2.default.listenTo(instance, 'foo', function (parsleyInstance) {
      expect(parsleyInstance.__id__).to.be(instance.__id__);
      done();
    });

    _jquery2.default.emit('foo', 'bar');
    _jquery2.default.emit('foo', (0, _jquery2.default)('#element2').psly());
    _jquery2.default.emit('foo', instance);
  });
  it('listenTo() Form will listen to Form', function (done) {
    (0, _jquery2.default)('body').append('<form id="element" data-parsley-trigger="change">' + '<input id="field1" type="text" data-parsley-required="true" />' + '<div id="field2"></div>' + '<textarea id="field3" data-parsley-notblank="true"></textarea>' + '</form>');

    _jquery2.default.listenTo((0, _jquery2.default)('#element').psly(), 'foo', function (parsleyInstance) {
      expect((0, _jquery2.default)('#element').psly().__id__ === parsleyInstance.__id__);
      done();
    });

    _jquery2.default.emit('foo', (0, _jquery2.default)('#element').psly());
  });
  it('listenTo() Form will listen to its fields too', function (done) {
    (0, _jquery2.default)('body').append('<form id="element" data-parsley-trigger="change">' + '<input id="field1" type="text" data-parsley-required="true" />' + '<div id="field2"></div>' + '<textarea id="field3" data-parsley-notblank="true"></textarea>' + '</form>');

    _jquery2.default.listenTo((0, _jquery2.default)('#element').psly(), 'foo', function (instance) {
      done();
    });

    _jquery2.default.emit('foo', (0, _jquery2.default)('#field1').psly());
  });
  it('unsubscribeTo()', function (done) {
    (0, _jquery2.default)('body').append('<input type="text" id="element" />');
    _jquery2.default.listen('foo', function () {
      done();
    });
    _jquery2.default.listenTo((0, _jquery2.default)('#element').psly(), 'foo', function () {
      expect(true).to.be(false);
    });
    _jquery2.default.unsubscribeTo((0, _jquery2.default)('#element').psly(), 'foo');
    _jquery2.default.emit('foo', (0, _jquery2.default)('#element').psly());
  });
  it('unsubscribe()', function () {
    var fn = function fn() {
      expect(true).to.be(false);
    };
    _jquery2.default.listen('foo', fn);
    _jquery2.default.unsubscribe('foo', fn);
    _jquery2.default.emit('foo');
  });
  afterEach(function () {
    (0, _jquery2.default)('#element, #element2').remove();

    _jquery2.default.unsubscribeAll('foo');
  });
});

},{"../../src/parsley":9,"jquery":1}],39:[function(require,module,exports){
'use strict';

var _jquery = require('jquery');

var _jquery2 = _interopRequireDefault(_jquery);

var _parsley = require('../../src/parsley');

var _parsley2 = _interopRequireDefault(_parsley);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

describe('ParsleyRemote', function () {
  var stubbed = false;
  var stubAjax = function stubAjax(status) {
    restoreAjax();
    var deferred = _jquery2.default.Deferred();
    var xhr = Object.assign(deferred.promise(), { status: status });
    if (status === 200) {
      deferred.resolve({}, 'success', 'xhr');
    } else {
      deferred.reject(xhr, 'error', 'error');
    }
    sinon.stub(_jquery2.default, 'ajax').returns(xhr);
    stubbed = true;
  };
  var restoreAjax = function restoreAjax() {
    if (stubbed) _jquery2.default.ajax.restore();
    stubbed = false;
  };

  afterEach(restoreAjax);

  beforeEach(function () {
    delete window.Parsley._remoteCache;
  });
  it('should have window.ParsleyExtend defined', function () {
    expect(window.ParsleyExtend).not.to.be(undefined);
  });
  it('should handle properly validation with remote validator', function (done) {
    (0, _jquery2.default)('body').append('<input type="text" data-parsley-remote="http://foo.bar" id="element" required name="element" value="foo" />');
    var parsleyInstance = (0, _jquery2.default)('#element').parsley();

    stubAjax(400);

    parsleyInstance.whenValid().fail(function () {
      stubAjax(200);

      (0, _jquery2.default)('#element').val('bar');
      parsleyInstance.whenValid().done(function () {
        done();
      });
    });
  });
  it('should handle remote reverse option', function (done) {
    (0, _jquery2.default)('body').append('<input type="text" data-parsley-remote="http://foo.bar" id="element" data-parsley-remote-reverse="true" required name="element" value="baz" />');
    var parsleyInstance = (0, _jquery2.default)('#element').parsley();

    stubAjax(200);
    parsleyInstance.whenValid().fail(function () {
      stubAjax(400);

      (0, _jquery2.default)('#element').val('bux');
      parsleyInstance.whenValid().done(function () {
        done();
      });
    });
  });
  it('should handle remote options', function (done) {
    (0, _jquery2.default)('body').append('<input type="text" data-parsley-remote="http://foo.bar" id="element" data-parsley-remote-options=\'{ "type": "POST", "data": {"foo": "bar"} }\' required name="element" value="baz" />');
    var parsleyInstance = (0, _jquery2.default)('#element').parsley();

    stubAjax(200);
    parsleyInstance.whenValid().done(function () {
      expect(_jquery2.default.ajax.calledWithMatch({ type: 'POST' })).to.be(true);
      expect(_jquery2.default.ajax.calledWithMatch({ url: 'http://foo.bar' })).to.be(true);
      expect(_jquery2.default.ajax.calledWithMatch({ data: { foo: 'bar', element: 'baz' } })).to.be(true);
      done();
    });
  });
  it('should save some calls for queries already done', function (done) {
    (0, _jquery2.default)('body').append('<input type="text" data-parsley-remote="http://foo.bar" id="element" required name="element" value="foo" />');
    var parsleyInstance = (0, _jquery2.default)('#element').parsley();

    stubAjax(200);
    parsleyInstance.whenValid().done(function () {
      expect(_jquery2.default.ajax.calledOnce).to.be(true);
      expect(_jquery2.default.ajax.calledWithMatch({ data: { element: 'foo' } })).to.be(true);
      stubAjax(400);

      (0, _jquery2.default)('#element').val('bar');
      parsleyInstance.whenValid().fail(function () {
        expect(_jquery2.default.ajax.calledOnce).to.be(true);
        expect(_jquery2.default.ajax.calledWithMatch({ data: { element: 'bar' } })).to.be(true);

        stubAjax(200);
        (0, _jquery2.default)('#element').val('foo');

        parsleyInstance.whenValid().done(function () {
          expect(_jquery2.default.ajax.callCount).to.be(0);
          expect(_jquery2.default.ajax.calledOnce).to.be(false);
          done();
        });
      });
    });
  });

  it('should handle remote validator option', function (done) {
    window.Parsley.addAsyncValidator('custom', function (xhr) {
      return xhr.status === 404;
    });

    (0, _jquery2.default)('body').append('<input type="text" data-parsley-remote="http://foo.bar" id="element" data-parsley-remote-validator="custom" required name="element" value="foobar" />');
    var parsleyInstance = (0, _jquery2.default)('#element').parsley();

    stubAjax(200);
    parsleyInstance.whenValid().fail(function () {
      stubAjax(400);

      (0, _jquery2.default)('#element').val('foobaz');
      parsleyInstance.whenValid().fail(function () {
        stubAjax(404);

        (0, _jquery2.default)('#element').val('fooquux');
        parsleyInstance.whenValid().done(function () {
          done();
        });
      });
    });
  });
  it('should handle remote validator option with custom url', function (done) {
    (0, _jquery2.default)('body').append('<input type="text" data-parsley-remote id="element" data-parsley-remote-validator="mycustom" required name="element" value="foobar" />');
    var parsleyInstance = (0, _jquery2.default)('#element').parsley();

    window.Parsley.addAsyncValidator('mycustom', function (xhr) {
      return xhr.status === 404;
    }, 'http://foobar.baz');

    stubAjax(200);
    parsleyInstance.whenValid().fail(function () {
      expect(_jquery2.default.ajax.calledWithMatch({ url: 'http://foobar.baz' })).to.be(true);
      done();
    });
  });
  it('should have PluginField as the `this` context of the AJAX callback', function (done) {
    (0, _jquery2.default)('body').append('<input type="text" data-parsley-remote id="element" data-parsley-remote-validator="mycustom" required name="element" value="foobar" />');
    var parsleyInstance = (0, _jquery2.default)('#element').parsley();

    window.Parsley.addAsyncValidator('mycustom', function (xhr) {
      expect(this.__class__).to.be('Field');
    }, 'http://foobar.baz');

    stubAjax(200);
    parsleyInstance.whenValid().fail(function () {
      expect(_jquery2.default.ajax.calledWithMatch({ url: 'http://foobar.baz' })).to.be(true);
      done();
    });
  });

  it('should handle deprecated call to addAsyncValidator using an instance', function () {
    (0, _jquery2.default)('body').append('<input type="text" data-parsley-remote id="element" data-parsley-remote-validator="mycustom" required name="element" value="foobar" />');

    expectWarning(function () {
      (0, _jquery2.default)('input').parsley().addAsyncValidator('instancetest', _jquery2.default.noop, '');
    });
    expect(_parsley2.default.asyncValidators.instancetest).not.to.be(undefined);
  });

  it('should clear the cache before and after submitting a form', function () {
    var parsleyInstance = (0, _jquery2.default)('<form id="element"><input type="text" required></form>').appendTo('body').on('submit', function (evt) {
      evt.preventDefault();
    }).parsley();
    window.Parsley._remoteCache = { dummy: 42 };
    (0, _jquery2.default)('#element').submit();
    expect(window.Parsley._remoteCache.dummy).to.be(undefined);
    window.Parsley._remoteCache = { dummy: 42 };
    (0, _jquery2.default)('#element input').val('hello');
    parsleyInstance.validate();
    expect(window.Parsley._remoteCache.dummy).to.be(42);
    (0, _jquery2.default)('#element').submit();
    expect(window.Parsley._remoteCache.dummy).to.be(undefined);
  });

  it('should allow the change of XHR options', function (done) {
    var parsleyInstance = (0, _jquery2.default)('<input id="element" data-parsley-remote="http://parsleyjs.org" name="element" value="foobar"/>').appendTo('body').parsley().on('field:ajaxoptions', function (field, options) {
      options.url = options.url + '/test/' + options.data.element;
    });

    stubAjax(200);
    parsleyInstance.whenValid().done(function () {
      expect(_jquery2.default.ajax.calledWithMatch({ url: 'http://parsleyjs.org/test/foobar' })).to.be(true);
      expect(_jquery2.default.ajax.calledWithMatch({ data: { element: 'foobar' } })).to.be(true);
      done();
    });
  });

  it('should allow RESTful URLs', function (done) {
    var parsleyInstance = (0, _jquery2.default)('<input id="element" data-parsley-remote="http://parsleyjs.org/thisisrest/{value}" name="element" value="foo bar"/>').appendTo('body').parsley();

    stubAjax(200);
    parsleyInstance.whenValid().done(function () {
      expect(_jquery2.default.ajax.calledWithMatch({ url: 'http://parsleyjs.org/thisisrest/foo%20bar' })).to.be(true);
      expect(_jquery2.default.ajax.calledWithMatch({ data: { element: 'foo bar' } })).to.be(false);
      done();
    });
  });

  it.skip('should abort successives querries and do not handle their return');
  afterEach(function () {
    (0, _jquery2.default)('#element, .parsley-errors-list').remove();
  });
});

},{"../../src/parsley":9,"jquery":1}],40:[function(require,module,exports){
'use strict';

var _jquery = require('jquery');

var _jquery2 = _interopRequireDefault(_jquery);

var _ui = require('../../src/parsley/ui');

var _ui2 = _interopRequireDefault(_ui);

var _parsley = require('../../src/parsley');

var _parsley2 = _interopRequireDefault(_parsley);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

describe('UI', function () {
  before(function () {
    _parsley2.default.setLocale('en');
  });

  it('should create proper errors container when needed', function () {
    (0, _jquery2.default)('body').append('<input type="text" id="element" data-parsley-required />');
    var parsleyField = (0, _jquery2.default)('#element').psly();
    expect((0, _jquery2.default)('ul#parsley-id-' + parsleyField.__id__).length).to.be(0);
    parsleyField.validate();
    expect((0, _jquery2.default)('#element').attr('data-parsley-id')).to.be(parsleyField.__id__);
    expect((0, _jquery2.default)('ul#parsley-id-' + parsleyField.__id__).length).to.be(1);
    expect((0, _jquery2.default)('ul#parsley-id-' + parsleyField.__id__).hasClass('parsley-errors-list')).to.be(true);
  });
  it('should handle errors-container option', function () {
    (0, _jquery2.default)('body').append('<form id="element">' + '<input id="field1" type="text" required data-parsley-errors-container="#container" />' + '<div id="container"></div>' + '<div id="container2"></div>' + '</form>');
    (0, _jquery2.default)('#element').psly().validate();
    expect((0, _jquery2.default)('#container .parsley-errors-list').length).to.be(1);
    (0, _jquery2.default)('#element').psly().destroy();
    (0, _jquery2.default)('#field1').removeAttr('data-parsley-errors-container');
    (0, _jquery2.default)('#element').psly({
      errorsContainer: function errorsContainer(ins) {
        expect(ins).to.be((0, _jquery2.default)('#field1').psly());
        expect(this).to.be((0, _jquery2.default)('#field1').psly());
        return (0, _jquery2.default)('#container2');
      }
    }).validate();
    expect((0, _jquery2.default)('#container2 .parsley-errors-list').length).to.be(1);
  });
  it('should handle errors-container option with function', function () {
    (0, _jquery2.default)('body').append('<form id="element">' + '<input id="field1" type="text" required data-parsley-errors-container="parsleyContainerFunction" />' + '<div id="container"></div>' + '<div id="container2"></div>' + '</form>');
    window.parsleyContainerFunction = function (ins) {
      expect(ins).to.be((0, _jquery2.default)('#field1').psly());
      expect(this).to.be((0, _jquery2.default)('#field1').psly());
      return (0, _jquery2.default)('#container2');
    };
    (0, _jquery2.default)('#element').psly().validate();
    expect((0, _jquery2.default)('#container2 .parsley-errors-list').length).to.be(1);
    delete window.parsleyContainerFunction;
  });
  it('should handle wrong errors-container option', function () {
    (0, _jquery2.default)('body').append('<input type="text" id="element" data-parsley-errors-container="#donotexist" required/>');
    var parsley = (0, _jquery2.default)('#element').psly();
    expectWarning(function () {
      parsley.validate();
    });
  });
  it('should not add success class on a field without constraints', function () {
    (0, _jquery2.default)('body').append('<input type="text" id="element" />');
    var parsleyField = (0, _jquery2.default)('#element').psly();
    parsleyField.validate();
    expect((0, _jquery2.default)('#element').hasClass('parsley-error')).to.be(false);
    expect((0, _jquery2.default)('#element').hasClass('parsley-success')).to.be(false);
  });
  it('should not add success class on an empty optional field', function () {
    (0, _jquery2.default)('body').append('<input type="number" id="element" />');
    var parsleyField = (0, _jquery2.default)('#element').psly();
    parsleyField.validate();
    expect((0, _jquery2.default)('#element').hasClass('parsley-error')).to.be(false);
    expect((0, _jquery2.default)('#element').hasClass('parsley-success')).to.be(false);
  });
  var checkType = function checkType(type, html, fillValue) {
    it('should add proper parsley class on success or failure (' + type + ')', function () {
      (0, _jquery2.default)('body').append('<form id="element"><section>' + html + '</section></form>');
      var form = (0, _jquery2.default)('#element').parsley();
      var $inputHolder = (0, _jquery2.default)('#element section').children().first();
      form.validate();
      expect($inputHolder.attr('class')).to.be('parsley-error');
      expect((0, _jquery2.default)('.parsley-errors-list').parent().prop("tagName")).to.be('SECTION');
      // Fill and revalidate:
      fillValue($inputHolder);
      form.validate();
      expect($inputHolder.attr('class')).to.be('parsley-success');
    });
  };

  var callVal = function callVal($input) {
    return $input.val('foo');
  };
  checkType('text', '<input type="text" required/>', callVal);
  checkType('select', '<select multiple required><option value="foo">foo</option>', callVal);

  var callProp = function callProp($fieldset) {
    return $fieldset.find('input').prop('checked', true);
  };
  checkType('radio', '<fieldset><input type="radio" name="foo" required /></fieldset>', callProp);
  checkType('checkbox', '<fieldset><input type="checkbox" name="foo" required /></fieldset>', callProp);

  it('should handle class-handler option', function () {
    (0, _jquery2.default)('body').append('<form id="element">' + '<input id="field1" type="email" data-parsley-class-handler="#field2" required />' + '<div id="field2"></div>' + '<div id="field3"></div>' + '</form>');
    (0, _jquery2.default)('#element').psly().validate();
    expect((0, _jquery2.default)('#field2').hasClass('parsley-error')).to.be(true);
    (0, _jquery2.default)('#element').psly().destroy();
    (0, _jquery2.default)('#field1').removeAttr('data-parsley-class-handler');
    (0, _jquery2.default)('#element').psly({
      classHandler: function classHandler(ins) {
        expect(ins).to.be((0, _jquery2.default)('#field1').parsley());
        expect(this).to.be((0, _jquery2.default)('#field1').parsley());
        return (0, _jquery2.default)('#field3');
      }
    }).validate();
    expect((0, _jquery2.default)('#field3').hasClass('parsley-error')).to.be(true);
  });
  it('should handle class-handler option with a function', function () {
    (0, _jquery2.default)('body').append('<form id="element">' + '<input id="field1" type="email" data-parsley-class-handler="#field2" required />' + '<div id="field4"></div>' + '</form>');
    (0, _jquery2.default)('#field1').attr('data-parsley-class-handler', 'parsleyClassHandler');
    window.parsleyClassHandler = function (ins) {
      expect(ins).to.be((0, _jquery2.default)('#field1').parsley());
      expect(this).to.be((0, _jquery2.default)('#field1').parsley());
      return (0, _jquery2.default)('#field4');
    };
    (0, _jquery2.default)('#element').psly().validate();
    expect((0, _jquery2.default)('#field4').hasClass('parsley-error')).to.be(true);
    (0, _jquery2.default)('#element').psly().destroy();
    (0, _jquery2.default)('#field1').attr('data-parsley-class-handler', 'someUndefinedFunctionName');
    expectWarning(function () {
      (0, _jquery2.default)('#element').psly().validate();
    });
    expect((0, _jquery2.default)('#field1').hasClass('parsley-error')).to.be(true);
    delete window.parsleyClassHandler;
  });
  it('should show higher priority error message by default', function () {
    (0, _jquery2.default)('body').append('<input type="email" id="element" required />');
    var parsleyField = (0, _jquery2.default)('#element').psly();
    parsleyField.validate();
    expect((0, _jquery2.default)('#element').hasClass('parsley-error')).to.be(true);
    expect((0, _jquery2.default)('ul#parsley-id-' + parsleyField.__id__ + ' li').length).to.be(1);
    expect((0, _jquery2.default)('ul#parsley-id-' + parsleyField.__id__ + ' li').hasClass('parsley-required')).to.be(true);

    (0, _jquery2.default)('#element').val('foo').psly().validate();
    expect((0, _jquery2.default)('ul#parsley-id-' + parsleyField.__id__ + ' li').length).to.be(1);
    expect((0, _jquery2.default)('ul#parsley-id-' + parsleyField.__id__ + ' li').hasClass('parsley-type')).to.be(true);
  });
  it('should show custom error message by validator', function () {
    (0, _jquery2.default)('body').append('<input type="email" id="element" required data-parsley-required-message="foo" data-parsley-type-message="bar"/>');
    var parsleyField = (0, _jquery2.default)('#element').psly();
    parsleyField.validate();
    expect((0, _jquery2.default)('ul#parsley-id-' + parsleyField.__id__ + ' li').text()).to.be('foo');
    (0, _jquery2.default)('#element').val('foo').psly().validate();
    expect((0, _jquery2.default)('ul#parsley-id-' + parsleyField.__id__ + ' li').text()).to.be('bar');
  });
  it('should show custom error message with variabilized parameters', function () {
    (0, _jquery2.default)('body').append('<input type="text" id="element" value="bar" data-parsley-minlength="7" data-parsley-minlength-message="foo %s bar"/>');
    var parsleyField = (0, _jquery2.default)('#element').psly();
    parsleyField.validate();
    expect((0, _jquery2.default)('ul#parsley-id-' + parsleyField.__id__ + ' li').text()).to.be('foo 7 bar');
  });
  it('should show custom error message for whole field', function () {
    (0, _jquery2.default)('body').append('<input type="email" id="element" required data-parsley-error-message="baz"/>');
    var parsleyField = (0, _jquery2.default)('#element').psly();
    parsleyField.validate();
    expect((0, _jquery2.default)('ul#parsley-id-' + parsleyField.__id__ + ' li').text()).to.be('baz');
    (0, _jquery2.default)('#element').val('foo').psly().validate();
    expect((0, _jquery2.default)('ul#parsley-id-' + parsleyField.__id__ + ' li').text()).to.be('baz');
    (0, _jquery2.default)('#element').val('foo@bar.baz').psly().validate();
    expect((0, _jquery2.default)('ul#parsley-id-' + parsleyField.__id__ + ' li').length).to.be(0);
  });
  it('should display no error message if diabled', function () {
    (0, _jquery2.default)('body').append('<input type="email" id="element" required data-parsley-errors-messages-disabled />');
    var parsleyField = (0, _jquery2.default)('#element').psly();
    parsleyField.validate();
    expect((0, _jquery2.default)('ul#parsley-id-' + parsleyField.__id__ + ' li').length).to.be(0);
    expect((0, _jquery2.default)('#element').hasClass('parsley-error')).to.be(true);
  });
  it('should handle simple triggers (change, focus...)', function () {
    (0, _jquery2.default)('body').append('<input type="email" id="element" required data-parsley-trigger="change" />');
    var parsleyField = (0, _jquery2.default)('#element').psly();
    expect((0, _jquery2.default)('ul#parsley-id-' + parsleyField.__id__ + ' li').length).to.be(0);
    (0, _jquery2.default)('#element').trigger(_jquery2.default.Event('change'));
    expect((0, _jquery2.default)('ul#parsley-id-' + parsleyField.__id__ + ' li').length).to.be(1);
  });
  it('should allow customization of triggers after first error', function () {
    (0, _jquery2.default)('body').append('<input type="email" id="element" required data-parsley-trigger-after-failure="focusout" />');
    var parsleyField = (0, _jquery2.default)('#element').psly();
    parsleyField.validate();
    expect((0, _jquery2.default)('ul#parsley-id-' + parsleyField.__id__ + ' li').length).to.be(1);
    (0, _jquery2.default)('#element').val('a@example.com');
    (0, _jquery2.default)('#element').trigger('input');
    expect((0, _jquery2.default)('ul#parsley-id-' + parsleyField.__id__ + ' li').length).to.be(1);
    (0, _jquery2.default)('#element').trigger('focusout');
    expect((0, _jquery2.default)('ul#parsley-id-' + parsleyField.__id__ + ' li').length).to.be(0);
  });
  it('should auto bind error trigger on select field error (input=text)', function () {
    (0, _jquery2.default)('body').append('<input type="email" id="element" required />');
    var parsleyField = (0, _jquery2.default)('#element').psly();
    expect((0, _jquery2.default)('ul#parsley-id-' + parsleyField.__id__ + ' li').length).to.be(0);
    parsleyField.validate();
    expect((0, _jquery2.default)('ul#parsley-id-' + parsleyField.__id__ + ' li').length).to.be(1);
    expect((0, _jquery2.default)('ul#parsley-id-' + parsleyField.__id__ + ' li').hasClass('parsley-required')).to.be(true);
    (0, _jquery2.default)('#element').val('foo').trigger('input');
    expect((0, _jquery2.default)('ul#parsley-id-' + parsleyField.__id__ + ' li').hasClass('parsley-type')).to.be(true);
  });
  it('should auto bind error trigger on select field error (select)', function () {
    (0, _jquery2.default)('body').append('<select id="element" required>' + '<option value="">Choose</option>' + '<option value="foo">foo</option>' + '<option value="bar">bar</option>' + '</select>');
    var parsleyField = (0, _jquery2.default)('#element').psly();
    expect((0, _jquery2.default)('ul#parsley-id-' + parsleyField.__id__ + ' li').length).to.be(0);
    parsleyField.validate();
    expect((0, _jquery2.default)('ul#parsley-id-' + parsleyField.__id__ + ' li').length).to.be(1);
    expect((0, _jquery2.default)('ul#parsley-id-' + parsleyField.__id__ + ' li').hasClass('parsley-required')).to.be(true);
    (0, _jquery2.default)('#element [option="foo"]').attr('selected', 'selected');
    (0, _jquery2.default)('#element').trigger(_jquery2.default.Event('change'));
    expect((0, _jquery2.default)('ul#parsley-id-' + parsleyField.__id__ + ' li').hasClass('parsley-type')).to.be(false);
  });
  it('should handle complex triggers (keyup, keypress...)', function () {
    (0, _jquery2.default)('body').append('<input type="email" id="element" required data-parsley-trigger="keyup" />');
    var parsleyField = (0, _jquery2.default)('#element').psly();
    expect((0, _jquery2.default)('ul#parsley-id-' + parsleyField.__id__ + ' li').length).to.be(0);
    (0, _jquery2.default)('#element').val('foo').trigger(_jquery2.default.Event('keyup'));
    expect((0, _jquery2.default)('ul#parsley-id-' + parsleyField.__id__ + ' li').length).to.be(0);
    (0, _jquery2.default)('#element').val('foob').trigger(_jquery2.default.Event('keyup'));
    expect((0, _jquery2.default)('ul#parsley-id-' + parsleyField.__id__ + ' li').length).to.be(1);
  });
  it('should handle trigger keyup threshold validation', function () {
    (0, _jquery2.default)('body').append('<input type="email" id="element" data-parsley-validation-threshold="7" required data-parsley-trigger="keyup" />');
    var parsleyField = (0, _jquery2.default)('#element').psly();
    expect((0, _jquery2.default)('ul#parsley-id-' + parsleyField.__id__ + ' li').length).to.be(0);
    (0, _jquery2.default)('#element').val('a@b.com').trigger('keyup');
    expect((0, _jquery2.default)('#element').hasClass('success')).to.be(false);
    (0, _jquery2.default)('#element').val('aa@b.com').trigger('keyup');
    expect((0, _jquery2.default)('#element').hasClass('parsley-success')).to.be(true);
    (0, _jquery2.default)('#element').val('@b.com').trigger('keyup');
    expect((0, _jquery2.default)('#element').hasClass('parsley-success')).to.be(false);
  });
  it('should handle UI disabling', function () {
    (0, _jquery2.default)('body').append('<input type="email" id="element" data-parsley-ui-enabled="false" required data-parsley-trigger="keyup" />');
    var parsleyField = (0, _jquery2.default)('#element').psly();
    expect((0, _jquery2.default)('ul#parsley-id-' + parsleyField.__id__).length).to.be(0);
    parsleyField.validate();
    expect((0, _jquery2.default)('ul#parsley-id-' + parsleyField.__id__).length).to.be(0);
  });
  it('should add novalidate on form elem', function () {
    (0, _jquery2.default)('body').append('<form id="element" data-parsley-trigger="change">' + '<input id="field1" type="text" data-parsley-required="true" />' + '<div id="field2"></div>' + '<textarea id="field3" data-parsley-notblank="true"></textarea>' + '</form>');
    var parsleyForm = (0, _jquery2.default)('#element').parsley();
    expect((0, _jquery2.default)('#element').attr('novalidate')).not.to.be(undefined);
  });
  it('should test the no-focus option', function () {
    (0, _jquery2.default)('body').append('<form id="element" data-parsley-focus="first">' + '<input id="field1" type="text" data-parsley-required="true" data-parsley-no-focus />' + '<input id="field2" data-parsley-required />' + '</form>');
    (0, _jquery2.default)('#element').parsley().validate();
    expect((0, _jquery2.default)('#element').parsley()._focusedField.attr('id')).to.be('field2');
    (0, _jquery2.default)('#field2').val('foo');
    (0, _jquery2.default)('#element').psly().validate();
    expect((0, _jquery2.default)('#element').parsley()._focusedField).to.be(null);
    (0, _jquery2.default)('#field1').removeAttr('data-parsley-no-focus');
    (0, _jquery2.default)('#element').psly().validate();
    expect((0, _jquery2.default)('#element').parsley()._focusedField.attr('id')).to.be('field1');
    (0, _jquery2.default)('#element').attr('data-parsley-focus', 'last');
    (0, _jquery2.default)('#element').psly().validate();
    expect((0, _jquery2.default)('#element').parsley()._focusedField.attr('id')).to.be('field1');
    (0, _jquery2.default)('#field2').val('');
    (0, _jquery2.default)('#element').psly().validate();
    expect((0, _jquery2.default)('#element').parsley()._focusedField.attr('id')).to.be('field2');
  });
  it('should test the manual add / update / remove error', function () {
    (0, _jquery2.default)('body').append('<input type="text" id="element" />');
    var parsleyField = (0, _jquery2.default)('#element').parsley();
    parsleyField.removeError('non-existent');
    parsleyField.validate();
    expect((0, _jquery2.default)('ul#parsley-id-' + parsleyField.__id__ + ' li').length).to.be(0);
    expect((0, _jquery2.default)('#element').hasClass('parsley-error')).to.be(false);
    expectWarning(function () {
      window.ParsleyUI.addError(parsleyField, 'foo', 'bar');
    });
    expect((0, _jquery2.default)('ul#parsley-id-' + parsleyField.__id__ + ' li').length).to.be(1);
    expect((0, _jquery2.default)('#element').hasClass('parsley-error')).to.be(true);
    expect((0, _jquery2.default)('li.parsley-foo').length).to.be(1);
    expect((0, _jquery2.default)('li.parsley-foo').text()).to.be('bar');
    expectWarning(function () {
      window.ParsleyUI.updateError(parsleyField, 'foo', 'baz');
    });
    expect((0, _jquery2.default)('li.parsley-foo').text()).to.be('baz');
    expectWarning(function () {
      window.ParsleyUI.removeError(parsleyField, 'foo');
    });
    expect((0, _jquery2.default)('#element').hasClass('parsley-error')).to.be(false);
    expect((0, _jquery2.default)('ul#parsley-id-' + parsleyField.__id__ + ' li').length).to.be(0);
  });
  it('should have a getErrorsMessage() method', function () {
    (0, _jquery2.default)('body').append('<input type="email" id="element" value="foo" data-parsley-minlength="5" />');
    var parsleyInstance = (0, _jquery2.default)('#element').parsley();
    parsleyInstance.validate();
    expectWarning(function () {
      window.ParsleyUI.getErrorsMessages(parsleyInstance);
    });
    expect(window.ParsleyUI.getErrorsMessages(parsleyInstance).length).to.be(1);
    expect(window.ParsleyUI.getErrorsMessages(parsleyInstance)[0]).to.be('This value should be a valid email.');

    (0, _jquery2.default)('#element').attr('data-parsley-priority-enabled', false);
    parsleyInstance.validate();
    expect(window.ParsleyUI.getErrorsMessages(parsleyInstance).length).to.be(2);
    expect(window.ParsleyUI.getErrorsMessages(parsleyInstance)[0]).to.be('This value is too short. It should have 5 characters or more.');
  });
  it('should not have errors ul created for excluded fields', function () {
    (0, _jquery2.default)('body').append('<div id="hidden"><input type="hidden" id="element" value="foo" data-parsley-minlength="5" /></div>');
    var parsleyInstance = (0, _jquery2.default)('#element').parsley();
    expect((0, _jquery2.default)('#hidden ul').length).to.be(0);
    (0, _jquery2.default)('#hidden').remove();
  });
  it('should remove filled class from errors container when reseting', function () {
    (0, _jquery2.default)('body').append('<input type="email" id="element" value="foo" data-parsley-minlength="5" />');
    var parsleyInstance = (0, _jquery2.default)('#element').parsley();
    parsleyInstance.validate();
    parsleyInstance.reset();
    expect((0, _jquery2.default)('ul#parsley-id-' + parsleyInstance.__id__).hasClass('filled')).to.be(false);
  });
  it('should re-bind error triggers after a reset (input=text)', function () {
    (0, _jquery2.default)('body').append('<input type="text" id="element" required />');
    var parsleyInstance = (0, _jquery2.default)('#element').parsley();
    parsleyInstance.validate();
    parsleyInstance.reset();
    parsleyInstance.validate();
    expect((0, _jquery2.default)('ul#parsley-id-' + parsleyInstance.__id__ + ' li').length).to.be(1);
    (0, _jquery2.default)('#element').val('foo').trigger('input');
    expect((0, _jquery2.default)('ul#parsley-id-' + parsleyInstance.__id__ + ' li').length).to.be(0);
  });
  it('should re-bind error triggers after a reset (select)', function () {
    (0, _jquery2.default)('body').append('<select id="element" required>' + '<option value="">Choose</option>' + '<option value="foo">foo</option>' + '<option value="bar">bar</option>' + '</select>');
    var parsleyInstance = (0, _jquery2.default)('#element').parsley();
    parsleyInstance.validate();
    parsleyInstance.reset();
    parsleyInstance.validate();
    expect((0, _jquery2.default)('ul#parsley-id-' + parsleyInstance.__id__ + ' li').length).to.be(1);
    (0, _jquery2.default)('#element option[value="foo"]').prop('selected', true);
    (0, _jquery2.default)('#element').trigger('input');
    expect((0, _jquery2.default)('ul#parsley-id-' + parsleyInstance.__id__ + ' li').length).to.be(0);
  });
  it('should re-bind custom triggers after a reset', function () {
    (0, _jquery2.default)('body').append('<input type="text" id="element" required data-parsley-trigger="focusout" />');
    var parsleyInstance = (0, _jquery2.default)('#element').parsley();
    parsleyInstance.validate();
    parsleyInstance.reset();
    (0, _jquery2.default)('#element').trigger('focusout');
    expect((0, _jquery2.default)('ul#parsley-id-' + parsleyInstance.__id__ + ' li').length).to.be(1);
  });
  it('should handle custom error message for validators with compound names', function () {
    (0, _jquery2.default)('body').append('<input type="text" value="1" id="element" data-parsley-custom-validator="2" data-parsley-custom-validator-message="custom-validator error"/>');
    window.Parsley.addValidator('customValidator', function (value, requirement) {
      return requirement === value;
    }, 32);
    var parsleyField = (0, _jquery2.default)('#element').psly();
    parsleyField.validate();
    expect((0, _jquery2.default)('ul#parsley-id-' + parsleyField.__id__ + ' li').text()).to.be('custom-validator error');
    window.Parsley.removeValidator('customValidator');
  });
  it('should handle custom error messages returned from custom validators', function () {
    (0, _jquery2.default)('body').append('<input type="text" value="1" id="element" data-parsley-custom-validator="2" data-parsley-custom-validator-message="custom-validator error"/>');
    window.Parsley.addValidator('customValidator', function (value, requirement) {
      return _jquery2.default.Deferred().reject("Hey, this ain't good at all").promise();
    }, 32);
    var parsleyField = (0, _jquery2.default)('#element').psly();
    parsleyField.validate();
    expect((0, _jquery2.default)('ul#parsley-id-' + parsleyField.__id__ + ' li').text()).to.be("Hey, this ain't good at all");
    window.Parsley.removeValidator('customValidator');
  });
  it('should run before events are fired', function () {
    (0, _jquery2.default)('body').append('<input type="text" id="element" required/>');
    var parsley = (0, _jquery2.default)('#element').parsley().on('field:validated', function () {
      expect((0, _jquery2.default)('.parsley-errors-list')).to.have.length(1);
    });
    parsley.validate();
  });

  afterEach(function () {
    (0, _jquery2.default)('#element, .parsley-errors-list').remove();
  });
});

},{"../../src/parsley":9,"../../src/parsley/ui":20,"jquery":1}],41:[function(require,module,exports){
'use strict';

var _jquery = require('jquery');

var _jquery2 = _interopRequireDefault(_jquery);

var _utils = require('../../src/parsley/utils');

var _utils2 = _interopRequireDefault(_utils);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

describe('Utils', function () {
  it('should warn when using the old global ParsleyUtils', function () {
    expectWarning(function () {
      expect(window.ParsleyUtils.deserializeValue('true')).to.be(true);
    });
  });
  it('should have a proper deserializeValue() function', function () {
    expect(_utils2.default.deserializeValue('true')).to.be(true);
    expect(_utils2.default.deserializeValue('1')).to.be(1);
    expect(_utils2.default.deserializeValue('["foo", "bar"]')).to.be.an('array');
    expect(_utils2.default.deserializeValue('{"foo": "bar"}')).to.be.an('object');
  });
  it('should have a proper camelize() function', function () {
    expect(_utils2.default.camelize('foo-bar')).to.be('fooBar');
    expect(_utils2.default.camelize('foo-bar-baz')).to.be('fooBarBaz');
    expect(_utils2.default.camelize('foo-bAr-baz')).to.be('fooBArBaz');
  });
  it('should have a proper dasherize() function', function () {
    expect(_utils2.default.dasherize('fooBar')).to.be('foo-bar');
    expect(_utils2.default.dasherize('fooBarBaz')).to.be('foo-bar-baz');
    expect(_utils2.default.dasherize('fooBArBaz')).to.be('foo-b-ar-baz');
  });
  it('should have a proper attr() function', function () {
    var element = {
      attributes: [{
        specified: true,
        name: "data-parsley-foo",
        value: "bar"
      }, {
        specified: true,
        name: "parsley-foo",
        value: "baz"
      }, {
        specified: true,
        name: "data-parsley-bar",
        value: "[0, 42]"
      }, {
        specified: false,
        name: "data-parsley-foo",
        value: "bar"
      }, {
        foo: "bar"
      }]
    };
    var attr = _utils2.default.attr(element, 'data-parsley-');

    expect(attr).to.eql({ 'foo': 'bar', 'bar': [0, 42] });
  });
  it('should have a proper attr() function that rewrites a given object', function () {
    var obj = _utils2.default.objectCreate({ foo: 'x', fox: 'trot' });
    obj.deleteMe = 'please';
    var $element = (0, _jquery2.default)('<b data-parsley-foo="a" data-parsley-bar="[0, 42]" parsley-baz="baz">');

    _utils2.default.attr($element[0], 'data-parsley-', obj);

    expect(obj).to.eql({ foo: "a", bar: [0, 42] });
    expect(obj.fox).to.eql('trot');
  });

  it('should have a checkAttr feature', function () {
    var element = (0, _jquery2.default)('<span data-parsley-required-message="foo" data-parsley-validate="true">')[0];
    expect(_utils2.default.checkAttr(element, 'data-parsley-', 'required')).to.be(false);
    expect(_utils2.default.checkAttr(element, 'data-parsley-', 'required-message')).to.be(true);
    expect(_utils2.default.checkAttr(element, 'data-parsley-', 'validate')).to.be(true);
  });

  describe('namespaceEvents', function () {
    var itMaps = function itMaps(what, toWhat) {
      it('maps \'' + what + '\' to \'\'', function () {
        expect(_utils2.default.namespaceEvents(what, 'ns')).to.eql(toWhat);
      });
    };
    itMaps('foo', 'foo.ns');
    var _arr = ['', '  ', false, null, undefined];
    for (var _i = 0; _i < _arr.length; _i++) {
      var evt = _arr[_i];
      itMaps(evt, '');
    }
    itMaps('   foo    bar   ', 'foo.ns bar.ns');
  });

  describe('parse', function () {
    describe('date', function () {
      it('returns null for invalid dates', function () {
        expect(_utils2.default.parse.date('1972-13-02')).to.be.null;
        expect(_utils2.default.parse.date('1973-02-29')).to.be.null;
        expect(_utils2.default.parse.date('72-01-06')).to.be.null;
        expect(_utils2.default.parse.date('1972/01/06')).to.be.null;
        expect(_utils2.default.parse.date('1972-01-6')).to.be.null;
        expect(_utils2.default.parse.date('1972-1-06')).to.be.null;
        expect(_utils2.default.parse.date('  1972-01 -06  ')).to.be.null;
      });
      it('returns a date for strings of form YYYY/MM/DD', function () {
        expect(_utils2.default.parse.date('1972-01-06')).to.eql(new Date('1972/01/06'));
      });
    });
  });
});

},{"../../src/parsley/utils":21,"jquery":1}],42:[function(require,module,exports){
'use strict';

var _validator = require('../../src/parsley/validator');

var _validator2 = _interopRequireDefault(_validator);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

describe('Validator', function () {
  var testParsing = function testParsing(type, input, output, extraOptions) {
    it('parses ' + type + ' requirements', function () {
      var c = new _validator2.default({ requirementType: type });
      expect(c.parseRequirements(input, extraOptions)).to.eql(output);
    });
  };

  testParsing('integer', '42', [42]);
  testParsing('number', '4.2', [4.2]);
  testParsing('string', '42', ['42']);
  testParsing(['number', 'string'], '[4.2, 4.2]', [4.2, '4.2']);
  testParsing({
    '': 'number',
    'foo': 'string',
    'bar': 'string'
  }, '4.2', [4.2, { foo: 'FOO', bar: 'BAR' }], function (value) {
    return value.toUpperCase();
  });
});

},{"../../src/parsley/validator":22}],43:[function(require,module,exports){
'use strict';

var _jquery = require('jquery');

var _jquery2 = _interopRequireDefault(_jquery);

var _validator = require('../../src/parsley/validator');

var _validator2 = _interopRequireDefault(_validator);

var _validator_registry = require('../../src/parsley/validator_registry');

var _validator_registry2 = _interopRequireDefault(_validator_registry);

var _parsley = require('../../src/parsley');

var _parsley2 = _interopRequireDefault(_parsley);

var _fr = require('../../src/i18n/fr');

var _fr2 = _interopRequireDefault(_fr);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

describe('ValidatorRegistry', function () {
  var validatorRegistry = _parsley2.default._validatorRegistry;
  var instance = (0, _jquery2.default)('<input>').parsley();

  var expectValidation = function expectValidation(value, name, requirements) {
    var extra = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};

    var validatorSpec = validatorRegistry.validators[name];
    var validator = new _validator2.default(validatorSpec);
    var argList = validator.parseRequirements(requirements, function (key) {
      return extra[key];
    });
    return expect(validator.validate.apply(validator, [value].concat(_toConsumableArray(argList), [instance])));
  };

  afterEach(function () {
    _parsley2.default.setLocale('en');
  });

  it('should be a function', function () {
    expect(_validator_registry2.default).to.be.a('function');
  });
  it('should bind global config validators if given in constructor', function () {
    _jquery2.default.extend(true, _parsley2.default.options, {
      validators: {
        foo: { fn: function fn() {}, priority: 42 },
        bar: { fn: function fn() {}, priority: 12 }
      }
    });
    var validator = new _validator_registry2.default(_parsley2.default.options.validators);
    expect(validator.validators).to.have.key('foo');
    expect(validator.validators).to.have.key('bar');
    expect(validatorRegistry.validators).not.to.have.key('foo');
    delete _parsley2.default.options.validators.foo;
    delete _parsley2.default.options.validators.bar;
  });
  it('should have a required validator', function () {
    expectValidation('', 'required').not.to.be(true);
    expectValidation('foo', 'required').to.be(true);
  });
  it('should have a notblank validator', function () {
    expectValidation(' ', 'notblank').not.to.be(true);
    expectValidation('foo', 'notblank').to.be(true);
  });
  it('should have a type="email" validator', function () {
    expectValidation('', 'type', 'email').to.be(true);
    expectValidation('foo', 'type', 'email').not.to.be(true);
    expectValidation('foo@bar.baz', 'type', 'email').to.be(true);
    expectValidation('foo+bar@bar.baz', 'type', 'email').to.be(true);
    expectValidation('foo.bar@bar.baz', 'type', 'email').to.be(true);
    expectValidation('foo.bar@bar.com.ext', 'type', 'email').to.be(true);
    expectValidation('foo@bar..tt.com', 'type', 'email').to.be(false);
  });
  it('should have a type="date" validator', function () {
    expectValidation('', 'type', 'date').to.be(true);
    expectValidation('foo', 'type', 'date').not.to.be(true);
    expectValidation('12', 'type', 'date').not.to.be(true);
    expectValidation('2001-01-30', 'type', 'date').to.be(true);
    expectValidation('2001-02-30', 'type', 'date').not.to.be(true);
    expectValidation('2001-30-01', 'type', 'date').not.to.be(true);
  });
  it('should have a min validator', function () {
    expectValidation('', 'min', 6).to.be(true);
    expectValidation('foo', 'min', 6).not.to.be(true);
    expectValidation('1', 'min', 6).not.to.be(true);
    expectValidation('6', 'min', 6).to.be(true);
    expectValidation('10', 'min', 6).to.be(true);
    (0, _jquery2.default)('body').append('<input type="text" id="element" value="7" min="2" />');
    expect((0, _jquery2.default)('#element').parsley().isValid()).to.be(true);
  });
  it('should have a max validator', function () {
    expectValidation('', 'max', 10).to.be(true);
    expectValidation('foo', 'max', 10).not.to.be(true);
    expectValidation('1', 'max', 10).to.be(true);
    expectValidation('1', 'max', '10').to.be(true);
    expectValidation('10', 'max', 10).to.be(true);
    expectValidation('17', 'max', 10).not.to.be(true);
    (0, _jquery2.default)('body').append('<input type="text" id="element" value="7" max="20" />');
    expect((0, _jquery2.default)('#element').parsley().isValid()).to.be(true);
  });
  it('should have a range validator', function () {
    expectValidation('1', 'range', [5, 10]).not.to.be(true);
    expectValidation('7', 'range', [5, 10]).to.be(true);
    expectValidation('17', 'range', [5, 10]).not.to.be(true);
    (0, _jquery2.default)('body').append('<input type="text" id="element" value="7" max="20" min="2" />');
    expect((0, _jquery2.default)('#element').parsley().isValid()).to.be(true);

    (0, _jquery2.default)('#element').remove();
    (0, _jquery2.default)('body').append('<input type="range" id="element" value="7" max="20" min="2" />');
    expect((0, _jquery2.default)('#element').parsley().isValid()).to.be(true);
  });
  it('should have a type="number" validator', function () {
    expectValidation('foo', 'type', 'number').not.to.be(true);
    expectValidation('-', 'type', 'number').not.to.be(true);
    expectValidation('1', 'type', 'number').to.be(true);
    expectValidation('1.5', 'type', 'number', { step: 'any' }).to.be(true);
    expectValidation('-1.5', 'type', 'number', { step: 'any' }).to.be(true);
    expectValidation('1500.642', 'type', 'number', { step: 'any' }).to.be(true);
    expectValidation('0.5', 'type', 'number', { step: 'any' }).to.be(true);
    expectValidation('.5', 'type', 'number', { step: 'any' }).to.be(true);
  });
  it('should have a type="digits" validator', function () {
    expectValidation('foo', 'type', 'digits').not.to.be(true);
    expectValidation('1', 'type', 'digits').to.be(true);
    expectValidation('-1', 'type', 'digits').not.to.be(true);
    expectValidation('1.5', 'type', 'digits').not.to.be(true);
    expectValidation('-1.5', 'type', 'digits').not.to.be(true);
    expectValidation('1,500.642', 'type', 'digits').not.to.be(true);
  });
  it('should have a type="integer" validator', function () {
    expectValidation('foo', 'type', 'integer').not.to.be(true);
    expectValidation('1', 'type', 'integer').to.be(true);
    expectValidation('-1', 'type', 'integer').to.be(true);
    expectValidation('1.5', 'type', 'integer').not.to.be(true);
    expectValidation('-1.5', 'type', 'integer').not.to.be(true);
  });
  it('should have a type="alphanum" validator', function () {
    expectValidation('foo', 'type', 'alphanum').to.be(true);
    expectValidation('foo bar', 'type', 'alphanum').not.to.be(true);
    expectValidation('foo$', 'type', 'alphanum').not.to.be(true);
    (0, _jquery2.default)('body').append('<input data-parsley-type="alphanum" id="element" value="v4kRRyhYvo0P" />');
    expect((0, _jquery2.default)('#element').parsley().isValid()).to.be(true);
  });
  it('should have a type="url" validator', function () {
    expectValidation('foo', 'type', 'url').not.to.be(true);
    expectValidation('foo bar', 'type', 'url').not.to.be(true);
    expectValidation('http://', 'type', 'url').not.to.be(true);
    expectValidation('foo.bar', 'type', 'url').to.be(true);
    expectValidation('www.foo.bar', 'type', 'url').to.be(true);
    expectValidation('http://www.foo.bar', 'type', 'url').to.be(true);
    expectValidation('https://www.foo.bar', 'type', 'url').to.be(true);
    expectValidation('http://192.168.1.1/foo/bar', 'type', 'url').to.be(true);
  });
  it('should have a pattern validator', function () {
    expectValidation('a', 'pattern', '[a-z]+').to.be(true);
    expectValidation('A', 'pattern', '[a-z]+').not.to.be(true);
    expectValidation('a', 'pattern', '/[a-z]+/').to.be(true);
    expectValidation('A', 'pattern', '/[a-z]+/').not.to.be(true);
    expectValidation('a', 'pattern', '/[a-z]+/i').to.be(true);
    expectValidation('A', 'pattern', '/[a-z]+/i').to.be(true);
  });
  it('should have a pattern validator that behaves as the standard when not of the form /pattern/flag', function () {
    expectValidation('aa', 'pattern', '[a-z]{1,2}').to.be(true);
    expectValidation('aaa', 'pattern', '[a-z]{1,2}').not.to.be(true);
    expectValidation('aa', 'pattern', '^[a-z]{2}$').to.be(true);
  });
  it('should have a pattern validator that extends the standard for form /pattern/flag', function () {
    expectValidation('zAz', 'pattern', '/a/i').to.be(true);
  });
  it('should have a length validator', function () {
    expectValidation('foobar', 'length', [3, 9]).to.be(true);
    expectValidation('foo', 'length', [4, 9]).not.to.be(true);
    expectValidation('foobarbaz', 'length', [3, 8]).not.to.be(true);
  });
  it('should have a minlength validator', function () {
    expectValidation('foo', 'minlength', 3).to.be(true);
    expectValidation('fo', 'minlength', 3).not.to.be(true);
    (0, _jquery2.default)('body').append('<input type="text" id="element" value="foo" data-parsley-minlength="2" />');
    expect((0, _jquery2.default)('#element').parsley().isValid()).to.be(true);
  });
  it('should have a maxlength validator', function () {
    expectValidation('foo', 'maxlength', 3).to.be(true);
    expectValidation('foobar', 'maxlength', 3).not.to.be(true);
    (0, _jquery2.default)('body').append('<input type="text" id="element" value="foo" data-parsley-maxlength="10" />');
    expect((0, _jquery2.default)('#element').parsley().isValid()).to.be(true);
  });
  it('should have a check validator', function () {
    expectValidation(['foo', 'bar', 'baz'], 'check', [3, 5]).to.be(true);
    expectValidation(['foo', 'bar', 'baz', 'qux', 'bux'], 'check', [3, 4]).not.to.be(true);
    expectValidation(['foo', 'bar'], 'check', [3, 5]).not.to.be(true);
  });
  it('should have a mincheck validator', function () {
    expectValidation(['foo', 'bar', 'baz'], 'mincheck', 3).to.be(true);
    expectValidation(['foo', 'bar'], 'mincheck', 3).not.to.be(true);
  });
  it('should have a maxcheck validator', function () {
    expectValidation(['foo', 'bar', 'baz'], 'maxcheck', 3).to.be(true);
    expectValidation(['foo', 'bar', 'baz', 'qux'], 'maxcheck', 3).not.to.be(true);
  });
  it('should have an equalto validator', function () {
    expectValidation('', 'equalto', 'foo').to.be(true);
    expectValidation('bar', 'equalto', 'foo').not.to.be(true);
    expectValidation('foo', 'equalto', 'foo').to.be(true);
    (0, _jquery2.default)('body').append('<input type="text" id="element" data-parsley-equalto="#equalto" required /><input type="text" id="equalto" value="foo" />');
    expect((0, _jquery2.default)('#element').psly().isValid()).to.be(false);
    (0, _jquery2.default)('#element').val('fo');
    expect((0, _jquery2.default)('#element').psly().isValid()).to.be(false);
    (0, _jquery2.default)('#element').val('foo');
    expect((0, _jquery2.default)('#element').psly().isValid()).to.be(true);
    (0, _jquery2.default)('#equalto').remove();
  });
  it('should handle proper error message for validators', function () {
    expect(validatorRegistry.getErrorMessage({ name: 'length', requirements: [3, 6] })).to.be('This value length is invalid. It should be between 3 and 6 characters long.');
    expect(validatorRegistry.getErrorMessage({ name: 'notexisting' })).to.be('This value seems to be invalid.');
  });
  it('should handle proper error message for validators in various languages', function () {
    validatorRegistry.setLocale('fr');
    expect(validatorRegistry.getErrorMessage({ name: 'length', requirements: [3, 6] })).to.be('Cette valeur doit contenir entre 3 et 6 caractères.');
    expect(validatorRegistry.getErrorMessage({ name: 'notexisting' })).to.be('Cette valeur semble non valide.');
  });

  it('should not break for an incomplete language', function () {
    validatorRegistry.addCatalog('klingon', {}, true);
    expect(validatorRegistry.getErrorMessage({ name: 'type', requirements: 'email' })).to.be('This value seems to be invalid.');
    expect(validatorRegistry.getErrorMessage({ name: 'length', requirements: [3, 6] })).to.be('This value seems to be invalid.');
  });

  afterEach(function () {
    (0, _jquery2.default)('#element').remove();
  });

  it('should warn if a custom validator has a reserved name', function () {
    _jquery2.default.extend(true, _parsley2.default.options, {
      validators: {
        excluded: { fn: function fn() {}, priority: 42 }
      }
    });

    expectWarning(function () {
      var validatorRegistry = new _validator_registry2.default(_parsley2.default.options.validators);
    });
    delete _parsley2.default.options.validators.excluded;
  });

  it('should warn when adding an already defined validator', function () {
    validatorRegistry.addValidator('foo', _jquery2.default.noop);
    expectWarning(function () {
      validatorRegistry.addValidator('foo', _jquery2.default.noop);
    });
    validatorRegistry.removeValidator('foo');
  });

  it('should warn when updating or deleting a custom validator not already defined', function () {
    expectWarning(function () {
      validatorRegistry.updateValidator('foo', function () {});
    });
    validatorRegistry.removeValidator('foo');
  });

  it('should warn when updating or deleting a custom validator not already defined', function () {
    expectWarning(function () {
      validatorRegistry.removeValidator('foo');
    });
  });

  it('should provide deprecated access through Validator for compatibility', function () {
    window.Parsley.formatMessage('foo', 'bar');
    expectWarning(function () {
      window.ParsleyValidator.formatMessage('foo', 'bar');
    });
  });

  it('should provide two ways to add error messages', function () {
    window.Parsley.addValidator('testMessage', {
      validateString: _jquery2.default.noop,
      messages: {
        en: 'Not good at all',
        fr: 'Très nul'
      }
    });
    window.Parsley.addMessage('es', 'testMessage', 'Muy malo');
    expect(window.Parsley.getErrorMessage({ name: 'testMessage' })).to.eql('Not good at all');
    window.Parsley.setLocale('fr');
    expect(window.Parsley.getErrorMessage({ name: 'testMessage' })).to.eql('Très nul');
    window.Parsley.setLocale('es');
    expect(window.Parsley.getErrorMessage({ name: 'testMessage' })).to.eql('Muy malo');
    window.Parsley.setLocale('en');
  });

  it('can return the existence of a validator', function () {
    expect(window.Parsley.hasValidator('required')).to.be(true);
    expect(window.Parsley.hasValidator('deriuqer')).to.be(false);
  });
});

},{"../../src/i18n/fr":8,"../../src/parsley":9,"../../src/parsley/validator":22,"../../src/parsley/validator_registry":23,"jquery":1}]},{},[25,29,30,31,32,33,34,35,36,37,38,39,40,41,43,42])
//# sourceMappingURL=data:application/json;charset:utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vZGVfbW9kdWxlcy9icm93c2VyLXBhY2svX3ByZWx1ZGUuanMiLCJub2RlX21vZHVsZXMvanF1ZXJ5L2Rpc3QvanF1ZXJ5LmpzIiwicGFja2FnZS5qc29uIiwic3JjL2V4dHJhL3BsdWdpbi9iaW5kLmpzIiwic3JjL2V4dHJhL3ZhbGlkYXRvci9jb21wYXJpc29uLmpzIiwic3JjL2V4dHJhL3ZhbGlkYXRvci9kYXRlaXNvLmpzIiwic3JjL2V4dHJhL3ZhbGlkYXRvci93b3Jkcy5qcyIsInNyYy9pMThuL2VuLmpzIiwic3JjL2kxOG4vZnIuanMiLCJzcmMvcGFyc2xleS5qcyIsInNyYy9wYXJzbGV5L2Jhc2UuanMiLCJzcmMvcGFyc2xleS9jb25zdHJhaW50LmpzIiwic3JjL3BhcnNsZXkvZGVmYXVsdHMuanMiLCJzcmMvcGFyc2xleS9mYWN0b3J5LmpzIiwic3JjL3BhcnNsZXkvZmllbGQuanMiLCJzcmMvcGFyc2xleS9mb3JtLmpzIiwic3JjL3BhcnNsZXkvbWFpbi5qcyIsInNyYy9wYXJzbGV5L211bHRpcGxlLmpzIiwic3JjL3BhcnNsZXkvcHVic3ViLmpzIiwic3JjL3BhcnNsZXkvcmVtb3RlLmpzIiwic3JjL3BhcnNsZXkvdWkuanMiLCJzcmMvcGFyc2xleS91dGlscy5qcyIsInNyYy9wYXJzbGV5L3ZhbGlkYXRvci5qcyIsInNyYy9wYXJzbGV5L3ZhbGlkYXRvcl9yZWdpc3RyeS5qcyIsInNyYy92ZW5kb3IvaW5wdXRldmVudC5qcyIsInRlc3Qvc2V0dXAvYnJvd3NlcmlmeS5qcyIsInRlc3Qvc2V0dXAvZG9tX2xlYWtfY2hlY2suanMiLCJ0ZXN0L3NldHVwL2V4cGVjdF93YXJuaW5nLmpzIiwidGVzdC9zZXR1cC9zZXR1cC5qcyIsInRlc3QvdW5pdC9iYXNlLmpzIiwidGVzdC91bml0L2V4dHJhL2JpbmQuanMiLCJ0ZXN0L3VuaXQvZXh0cmEvY29tcGFyaXNvbi5qcyIsInRlc3QvdW5pdC9leHRyYS9kYXRlaXNvLmpzIiwidGVzdC91bml0L2V4dHJhL3dvcmRzLmpzIiwidGVzdC91bml0L2ZpZWxkLmpzIiwidGVzdC91bml0L2Zvcm0uanMiLCJ0ZXN0L3VuaXQvbXVsdGlwbGUuanMiLCJ0ZXN0L3VuaXQvcGFyc2xleS5qcyIsInRlc3QvdW5pdC9wdWJzdWIuanMiLCJ0ZXN0L3VuaXQvcmVtb3RlLmpzIiwidGVzdC91bml0L3VpLmpzIiwidGVzdC91bml0L3V0aWxzLmpzIiwidGVzdC91bml0L3ZhbGlkYXRvci5qcyIsInRlc3QvdW5pdC92YWxpZGF0b3JfcmVnaXN0cnkuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUNBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDNW5VQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNB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LFVBQTVCLENBQVAsRUFBZ0QsRUFBaEQsQ0FBbUQsRUFBbkQsQ0FBc0QsSUFBdEQ7QUFDQSxXQUFPLE9BQU8sT0FBUCxDQUFlLFlBQWYsQ0FBNEIsVUFBNUIsQ0FBUCxFQUFnRCxFQUFoRCxDQUFtRCxFQUFuRCxDQUFzRCxLQUF0RDtBQUNELEdBSEQ7QUFLRCxDQTlRRCIsImZpbGUiOiJnZW5lcmF0ZWQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlc0NvbnRlbnQiOlsiKGZ1bmN0aW9uIGUodCxuLHIpe2Z1bmN0aW9uIHMobyx1KXtpZighbltvXSl7aWYoIXRbb10pe3ZhciBhPXR5cGVvZiByZXF1aXJlPT1cImZ1bmN0aW9uXCImJnJlcXVpcmU7aWYoIXUmJmEpcmV0dXJuIGEobywhMCk7aWYoaSlyZXR1cm4gaShvLCEwKTt2YXIgZj1uZXcgRXJyb3IoXCJDYW5ub3QgZmluZCBtb2R1bGUgJ1wiK28rXCInXCIpO3Rocm93IGYuY29kZT1cIk1PRFVMRV9OT1RfRk9VTkRcIixmfXZhciBsPW5bb109e2V4cG9ydHM6e319O3Rbb11bMF0uY2FsbChsLmV4cG9ydHMsZnVuY3Rpb24oZSl7dmFyIG49dFtvXVsxXVtlXTtyZXR1cm4gcyhuP246ZSl9LGwsbC5leHBvcnRzLGUsdCxuLHIpfXJldHVybiBuW29dLmV4cG9ydHN9dmFyIGk9dHlwZW9mIHJlcXVpcmU9PVwiZnVuY3Rpb25cIiYmcmVxdWlyZTtmb3IodmFyIG89MDtvPHIubGVuZ3RoO28rKylzKHJbb10pO3JldHVybiBzfSkiLCIvKiFcbiAqIGpRdWVyeSBKYXZhU2NyaXB0IExpYnJhcnkgdjMuMy4xXG4gKiBodHRwczovL2pxdWVyeS5jb20vXG4gKlxuICogSW5jbHVkZXMgU2l6emxlLmpzXG4gKiBodHRwczovL3NpenpsZWpzLmNvbS9cbiAqXG4gKiBDb3B5cmlnaHQgSlMgRm91bmRhdGlvbiBhbmQgb3RoZXIgY29udHJpYnV0b3JzXG4gKiBSZWxlYXNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2VcbiAqIGh0dHBzOi8vanF1ZXJ5Lm9yZy9saWNlbnNlXG4gKlxuICogRGF0ZTogMjAxOC0wMS0yMFQxNzoyNFpcbiAqL1xuKCBmdW5jdGlvbiggZ2xvYmFsLCBmYWN0b3J5ICkge1xuXG5cdFwidXNlIHN0cmljdFwiO1xuXG5cdGlmICggdHlwZW9mIG1vZHVsZSA9PT0gXCJvYmplY3RcIiAmJiB0eXBlb2YgbW9kdWxlLmV4cG9ydHMgPT09IFwib2JqZWN0XCIgKSB7XG5cblx0XHQvLyBGb3IgQ29tbW9uSlMgYW5kIENvbW1vbkpTLWxpa2UgZW52aXJvbm1lbnRzIHdoZXJlIGEgcHJvcGVyIGB3aW5kb3dgXG5cdFx0Ly8gaXMgcHJlc2VudCwgZXhlY3V0ZSB0aGUgZmFjdG9yeSBhbmQgZ2V0IGpRdWVyeS5cblx0XHQvLyBGb3IgZW52aXJvbm1lbnRzIHRoYXQgZG8gbm90IGhhdmUgYSBgd2luZG93YCB3aXRoIGEgYGRvY3VtZW50YFxuXHRcdC8vIChzdWNoIGFzIE5vZGUuanMpLCBleHBvc2UgYSBmYWN0b3J5IGFzIG1vZHVsZS5leHBvcnRzLlxuXHRcdC8vIFRoaXMgYWNjZW50dWF0ZXMgdGhlIG5lZWQgZm9yIHRoZSBjcmVhdGlvbiBvZiBhIHJlYWwgYHdpbmRvd2AuXG5cdFx0Ly8gZS5nLiB2YXIgalF1ZXJ5ID0gcmVxdWlyZShcImpxdWVyeVwiKSh3aW5kb3cpO1xuXHRcdC8vIFNlZSB0aWNrZXQgIzE0NTQ5IGZvciBtb3JlIGluZm8uXG5cdFx0bW9kdWxlLmV4cG9ydHMgPSBnbG9iYWwuZG9jdW1lbnQgP1xuXHRcdFx0ZmFjdG9yeSggZ2xvYmFsLCB0cnVlICkgOlxuXHRcdFx0ZnVuY3Rpb24oIHcgKSB7XG5cdFx0XHRcdGlmICggIXcuZG9jdW1lbnQgKSB7XG5cdFx0XHRcdFx0dGhyb3cgbmV3IEVycm9yKCBcImpRdWVyeSByZXF1aXJlcyBhIHdpbmRvdyB3aXRoIGEgZG9jdW1lbnRcIiApO1xuXHRcdFx0XHR9XG5cdFx0XHRcdHJldHVybiBmYWN0b3J5KCB3ICk7XG5cdFx0XHR9O1xuXHR9IGVsc2Uge1xuXHRcdGZhY3RvcnkoIGdsb2JhbCApO1xuXHR9XG5cbi8vIFBhc3MgdGhpcyBpZiB3aW5kb3cgaXMgbm90IGRlZmluZWQgeWV0XG59ICkoIHR5cGVvZiB3aW5kb3cgIT09IFwidW5kZWZpbmVkXCIgPyB3aW5kb3cgOiB0aGlzLCBmdW5jdGlvbiggd2luZG93LCBub0dsb2JhbCApIHtcblxuLy8gRWRnZSA8PSAxMiAtIDEzKywgRmlyZWZveCA8PTE4IC0gNDUrLCBJRSAxMCAtIDExLCBTYWZhcmkgNS4xIC0gOSssIGlPUyA2IC0gOS4xXG4vLyB0aHJvdyBleGNlcHRpb25zIHdoZW4gbm9uLXN0cmljdCBjb2RlIChlLmcuLCBBU1AuTkVUIDQuNSkgYWNjZXNzZXMgc3RyaWN0IG1vZGVcbi8vIGFyZ3VtZW50cy5jYWxsZWUuY2FsbGVyICh0cmFjLTEzMzM1KS4gQnV0IGFzIG9mIGpRdWVyeSAzLjAgKDIwMTYpLCBzdHJpY3QgbW9kZSBzaG91bGQgYmUgY29tbW9uXG4vLyBlbm91Z2ggdGhhdCBhbGwgc3VjaCBhdHRlbXB0cyBhcmUgZ3VhcmRlZCBpbiBhIHRyeSBibG9jay5cblwidXNlIHN0cmljdFwiO1xuXG52YXIgYXJyID0gW107XG5cbnZhciBkb2N1bWVudCA9IHdpbmRvdy5kb2N1bWVudDtcblxudmFyIGdldFByb3RvID0gT2JqZWN0LmdldFByb3RvdHlwZU9mO1xuXG52YXIgc2xpY2UgPSBhcnIuc2xpY2U7XG5cbnZhciBjb25jYXQgPSBhcnIuY29uY2F0O1xuXG52YXIgcHVzaCA9IGFyci5wdXNoO1xuXG52YXIgaW5kZXhPZiA9IGFyci5pbmRleE9mO1xuXG52YXIgY2xhc3MydHlwZSA9IHt9O1xuXG52YXIgdG9TdHJpbmcgPSBjbGFzczJ0eXBlLnRvU3RyaW5nO1xuXG52YXIgaGFzT3duID0gY2xhc3MydHlwZS5oYXNPd25Qcm9wZXJ0eTtcblxudmFyIGZuVG9TdHJpbmcgPSBoYXNPd24udG9TdHJpbmc7XG5cbnZhciBPYmplY3RGdW5jdGlvblN0cmluZyA9IGZuVG9TdHJpbmcuY2FsbCggT2JqZWN0ICk7XG5cbnZhciBzdXBwb3J0ID0ge307XG5cbnZhciBpc0Z1bmN0aW9uID0gZnVuY3Rpb24gaXNGdW5jdGlvbiggb2JqICkge1xuXG4gICAgICAvLyBTdXBwb3J0OiBDaHJvbWUgPD01NywgRmlyZWZveCA8PTUyXG4gICAgICAvLyBJbiBzb21lIGJyb3dzZXJzLCB0eXBlb2YgcmV0dXJucyBcImZ1bmN0aW9uXCIgZm9yIEhUTUwgPG9iamVjdD4gZWxlbWVudHNcbiAgICAgIC8vIChpLmUuLCBgdHlwZW9mIGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoIFwib2JqZWN0XCIgKSA9PT0gXCJmdW5jdGlvblwiYCkuXG4gICAgICAvLyBXZSBkb24ndCB3YW50IHRvIGNsYXNzaWZ5ICphbnkqIERPTSBub2RlIGFzIGEgZnVuY3Rpb24uXG4gICAgICByZXR1cm4gdHlwZW9mIG9iaiA9PT0gXCJmdW5jdGlvblwiICYmIHR5cGVvZiBvYmoubm9kZVR5cGUgIT09IFwibnVtYmVyXCI7XG4gIH07XG5cblxudmFyIGlzV2luZG93ID0gZnVuY3Rpb24gaXNXaW5kb3coIG9iaiApIHtcblx0XHRyZXR1cm4gb2JqICE9IG51bGwgJiYgb2JqID09PSBvYmoud2luZG93O1xuXHR9O1xuXG5cblxuXG5cdHZhciBwcmVzZXJ2ZWRTY3JpcHRBdHRyaWJ1dGVzID0ge1xuXHRcdHR5cGU6IHRydWUsXG5cdFx0c3JjOiB0cnVlLFxuXHRcdG5vTW9kdWxlOiB0cnVlXG5cdH07XG5cblx0ZnVuY3Rpb24gRE9NRXZhbCggY29kZSwgZG9jLCBub2RlICkge1xuXHRcdGRvYyA9IGRvYyB8fCBkb2N1bWVudDtcblxuXHRcdHZhciBpLFxuXHRcdFx0c2NyaXB0ID0gZG9jLmNyZWF0ZUVsZW1lbnQoIFwic2NyaXB0XCIgKTtcblxuXHRcdHNjcmlwdC50ZXh0ID0gY29kZTtcblx0XHRpZiAoIG5vZGUgKSB7XG5cdFx0XHRmb3IgKCBpIGluIHByZXNlcnZlZFNjcmlwdEF0dHJpYnV0ZXMgKSB7XG5cdFx0XHRcdGlmICggbm9kZVsgaSBdICkge1xuXHRcdFx0XHRcdHNjcmlwdFsgaSBdID0gbm9kZVsgaSBdO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHRcdGRvYy5oZWFkLmFwcGVuZENoaWxkKCBzY3JpcHQgKS5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKCBzY3JpcHQgKTtcblx0fVxuXG5cbmZ1bmN0aW9uIHRvVHlwZSggb2JqICkge1xuXHRpZiAoIG9iaiA9PSBudWxsICkge1xuXHRcdHJldHVybiBvYmogKyBcIlwiO1xuXHR9XG5cblx0Ly8gU3VwcG9ydDogQW5kcm9pZCA8PTIuMyBvbmx5IChmdW5jdGlvbmlzaCBSZWdFeHApXG5cdHJldHVybiB0eXBlb2Ygb2JqID09PSBcIm9iamVjdFwiIHx8IHR5cGVvZiBvYmogPT09IFwiZnVuY3Rpb25cIiA/XG5cdFx0Y2xhc3MydHlwZVsgdG9TdHJpbmcuY2FsbCggb2JqICkgXSB8fCBcIm9iamVjdFwiIDpcblx0XHR0eXBlb2Ygb2JqO1xufVxuLyogZ2xvYmFsIFN5bWJvbCAqL1xuLy8gRGVmaW5pbmcgdGhpcyBnbG9iYWwgaW4gLmVzbGludHJjLmpzb24gd291bGQgY3JlYXRlIGEgZGFuZ2VyIG9mIHVzaW5nIHRoZSBnbG9iYWxcbi8vIHVuZ3VhcmRlZCBpbiBhbm90aGVyIHBsYWNlLCBpdCBzZWVtcyBzYWZlciB0byBkZWZpbmUgZ2xvYmFsIG9ubHkgZm9yIHRoaXMgbW9kdWxlXG5cblxuXG52YXJcblx0dmVyc2lvbiA9IFwiMy4zLjFcIixcblxuXHQvLyBEZWZpbmUgYSBsb2NhbCBjb3B5IG9mIGpRdWVyeVxuXHRqUXVlcnkgPSBmdW5jdGlvbiggc2VsZWN0b3IsIGNvbnRleHQgKSB7XG5cblx0XHQvLyBUaGUgalF1ZXJ5IG9iamVjdCBpcyBhY3R1YWxseSBqdXN0IHRoZSBpbml0IGNvbnN0cnVjdG9yICdlbmhhbmNlZCdcblx0XHQvLyBOZWVkIGluaXQgaWYgalF1ZXJ5IGlzIGNhbGxlZCAoanVzdCBhbGxvdyBlcnJvciB0byBiZSB0aHJvd24gaWYgbm90IGluY2x1ZGVkKVxuXHRcdHJldHVybiBuZXcgalF1ZXJ5LmZuLmluaXQoIHNlbGVjdG9yLCBjb250ZXh0ICk7XG5cdH0sXG5cblx0Ly8gU3VwcG9ydDogQW5kcm9pZCA8PTQuMCBvbmx5XG5cdC8vIE1ha2Ugc3VyZSB3ZSB0cmltIEJPTSBhbmQgTkJTUFxuXHRydHJpbSA9IC9eW1xcc1xcdUZFRkZcXHhBMF0rfFtcXHNcXHVGRUZGXFx4QTBdKyQvZztcblxualF1ZXJ5LmZuID0galF1ZXJ5LnByb3RvdHlwZSA9IHtcblxuXHQvLyBUaGUgY3VycmVudCB2ZXJzaW9uIG9mIGpRdWVyeSBiZWluZyB1c2VkXG5cdGpxdWVyeTogdmVyc2lvbixcblxuXHRjb25zdHJ1Y3RvcjogalF1ZXJ5LFxuXG5cdC8vIFRoZSBkZWZhdWx0IGxlbmd0aCBvZiBhIGpRdWVyeSBvYmplY3QgaXMgMFxuXHRsZW5ndGg6IDAsXG5cblx0dG9BcnJheTogZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIHNsaWNlLmNhbGwoIHRoaXMgKTtcblx0fSxcblxuXHQvLyBHZXQgdGhlIE50aCBlbGVtZW50IGluIHRoZSBtYXRjaGVkIGVsZW1lbnQgc2V0IE9SXG5cdC8vIEdldCB0aGUgd2hvbGUgbWF0Y2hlZCBlbGVtZW50IHNldCBhcyBhIGNsZWFuIGFycmF5XG5cdGdldDogZnVuY3Rpb24oIG51bSApIHtcblxuXHRcdC8vIFJldHVybiBhbGwgdGhlIGVsZW1lbnRzIGluIGEgY2xlYW4gYXJyYXlcblx0XHRpZiAoIG51bSA9PSBudWxsICkge1xuXHRcdFx0cmV0dXJuIHNsaWNlLmNhbGwoIHRoaXMgKTtcblx0XHR9XG5cblx0XHQvLyBSZXR1cm4ganVzdCB0aGUgb25lIGVsZW1lbnQgZnJvbSB0aGUgc2V0XG5cdFx0cmV0dXJuIG51bSA8IDAgPyB0aGlzWyBudW0gKyB0aGlzLmxlbmd0aCBdIDogdGhpc1sgbnVtIF07XG5cdH0sXG5cblx0Ly8gVGFrZSBhbiBhcnJheSBvZiBlbGVtZW50cyBhbmQgcHVzaCBpdCBvbnRvIHRoZSBzdGFja1xuXHQvLyAocmV0dXJuaW5nIHRoZSBuZXcgbWF0Y2hlZCBlbGVtZW50IHNldClcblx0cHVzaFN0YWNrOiBmdW5jdGlvbiggZWxlbXMgKSB7XG5cblx0XHQvLyBCdWlsZCBhIG5ldyBqUXVlcnkgbWF0Y2hlZCBlbGVtZW50IHNldFxuXHRcdHZhciByZXQgPSBqUXVlcnkubWVyZ2UoIHRoaXMuY29uc3RydWN0b3IoKSwgZWxlbXMgKTtcblxuXHRcdC8vIEFkZCB0aGUgb2xkIG9iamVjdCBvbnRvIHRoZSBzdGFjayAoYXMgYSByZWZlcmVuY2UpXG5cdFx0cmV0LnByZXZPYmplY3QgPSB0aGlzO1xuXG5cdFx0Ly8gUmV0dXJuIHRoZSBuZXdseS1mb3JtZWQgZWxlbWVudCBzZXRcblx0XHRyZXR1cm4gcmV0O1xuXHR9LFxuXG5cdC8vIEV4ZWN1dGUgYSBjYWxsYmFjayBmb3IgZXZlcnkgZWxlbWVudCBpbiB0aGUgbWF0Y2hlZCBzZXQuXG5cdGVhY2g6IGZ1bmN0aW9uKCBjYWxsYmFjayApIHtcblx0XHRyZXR1cm4galF1ZXJ5LmVhY2goIHRoaXMsIGNhbGxiYWNrICk7XG5cdH0sXG5cblx0bWFwOiBmdW5jdGlvbiggY2FsbGJhY2sgKSB7XG5cdFx0cmV0dXJuIHRoaXMucHVzaFN0YWNrKCBqUXVlcnkubWFwKCB0aGlzLCBmdW5jdGlvbiggZWxlbSwgaSApIHtcblx0XHRcdHJldHVybiBjYWxsYmFjay5jYWxsKCBlbGVtLCBpLCBlbGVtICk7XG5cdFx0fSApICk7XG5cdH0sXG5cblx0c2xpY2U6IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiB0aGlzLnB1c2hTdGFjayggc2xpY2UuYXBwbHkoIHRoaXMsIGFyZ3VtZW50cyApICk7XG5cdH0sXG5cblx0Zmlyc3Q6IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiB0aGlzLmVxKCAwICk7XG5cdH0sXG5cblx0bGFzdDogZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIHRoaXMuZXEoIC0xICk7XG5cdH0sXG5cblx0ZXE6IGZ1bmN0aW9uKCBpICkge1xuXHRcdHZhciBsZW4gPSB0aGlzLmxlbmd0aCxcblx0XHRcdGogPSAraSArICggaSA8IDAgPyBsZW4gOiAwICk7XG5cdFx0cmV0dXJuIHRoaXMucHVzaFN0YWNrKCBqID49IDAgJiYgaiA8IGxlbiA/IFsgdGhpc1sgaiBdIF0gOiBbXSApO1xuXHR9LFxuXG5cdGVuZDogZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIHRoaXMucHJldk9iamVjdCB8fCB0aGlzLmNvbnN0cnVjdG9yKCk7XG5cdH0sXG5cblx0Ly8gRm9yIGludGVybmFsIHVzZSBvbmx5LlxuXHQvLyBCZWhhdmVzIGxpa2UgYW4gQXJyYXkncyBtZXRob2QsIG5vdCBsaWtlIGEgalF1ZXJ5IG1ldGhvZC5cblx0cHVzaDogcHVzaCxcblx0c29ydDogYXJyLnNvcnQsXG5cdHNwbGljZTogYXJyLnNwbGljZVxufTtcblxualF1ZXJ5LmV4dGVuZCA9IGpRdWVyeS5mbi5leHRlbmQgPSBmdW5jdGlvbigpIHtcblx0dmFyIG9wdGlvbnMsIG5hbWUsIHNyYywgY29weSwgY29weUlzQXJyYXksIGNsb25lLFxuXHRcdHRhcmdldCA9IGFyZ3VtZW50c1sgMCBdIHx8IHt9LFxuXHRcdGkgPSAxLFxuXHRcdGxlbmd0aCA9IGFyZ3VtZW50cy5sZW5ndGgsXG5cdFx0ZGVlcCA9IGZhbHNlO1xuXG5cdC8vIEhhbmRsZSBhIGRlZXAgY29weSBzaXR1YXRpb25cblx0aWYgKCB0eXBlb2YgdGFyZ2V0ID09PSBcImJvb2xlYW5cIiApIHtcblx0XHRkZWVwID0gdGFyZ2V0O1xuXG5cdFx0Ly8gU2tpcCB0aGUgYm9vbGVhbiBhbmQgdGhlIHRhcmdldFxuXHRcdHRhcmdldCA9IGFyZ3VtZW50c1sgaSBdIHx8IHt9O1xuXHRcdGkrKztcblx0fVxuXG5cdC8vIEhhbmRsZSBjYXNlIHdoZW4gdGFyZ2V0IGlzIGEgc3RyaW5nIG9yIHNvbWV0aGluZyAocG9zc2libGUgaW4gZGVlcCBjb3B5KVxuXHRpZiAoIHR5cGVvZiB0YXJnZXQgIT09IFwib2JqZWN0XCIgJiYgIWlzRnVuY3Rpb24oIHRhcmdldCApICkge1xuXHRcdHRhcmdldCA9IHt9O1xuXHR9XG5cblx0Ly8gRXh0ZW5kIGpRdWVyeSBpdHNlbGYgaWYgb25seSBvbmUgYXJndW1lbnQgaXMgcGFzc2VkXG5cdGlmICggaSA9PT0gbGVuZ3RoICkge1xuXHRcdHRhcmdldCA9IHRoaXM7XG5cdFx0aS0tO1xuXHR9XG5cblx0Zm9yICggOyBpIDwgbGVuZ3RoOyBpKysgKSB7XG5cblx0XHQvLyBPbmx5IGRlYWwgd2l0aCBub24tbnVsbC91bmRlZmluZWQgdmFsdWVzXG5cdFx0aWYgKCAoIG9wdGlvbnMgPSBhcmd1bWVudHNbIGkgXSApICE9IG51bGwgKSB7XG5cblx0XHRcdC8vIEV4dGVuZCB0aGUgYmFzZSBvYmplY3Rcblx0XHRcdGZvciAoIG5hbWUgaW4gb3B0aW9ucyApIHtcblx0XHRcdFx0c3JjID0gdGFyZ2V0WyBuYW1lIF07XG5cdFx0XHRcdGNvcHkgPSBvcHRpb25zWyBuYW1lIF07XG5cblx0XHRcdFx0Ly8gUHJldmVudCBuZXZlci1lbmRpbmcgbG9vcFxuXHRcdFx0XHRpZiAoIHRhcmdldCA9PT0gY29weSApIHtcblx0XHRcdFx0XHRjb250aW51ZTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIFJlY3Vyc2UgaWYgd2UncmUgbWVyZ2luZyBwbGFpbiBvYmplY3RzIG9yIGFycmF5c1xuXHRcdFx0XHRpZiAoIGRlZXAgJiYgY29weSAmJiAoIGpRdWVyeS5pc1BsYWluT2JqZWN0KCBjb3B5ICkgfHxcblx0XHRcdFx0XHQoIGNvcHlJc0FycmF5ID0gQXJyYXkuaXNBcnJheSggY29weSApICkgKSApIHtcblxuXHRcdFx0XHRcdGlmICggY29weUlzQXJyYXkgKSB7XG5cdFx0XHRcdFx0XHRjb3B5SXNBcnJheSA9IGZhbHNlO1xuXHRcdFx0XHRcdFx0Y2xvbmUgPSBzcmMgJiYgQXJyYXkuaXNBcnJheSggc3JjICkgPyBzcmMgOiBbXTtcblxuXHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRjbG9uZSA9IHNyYyAmJiBqUXVlcnkuaXNQbGFpbk9iamVjdCggc3JjICkgPyBzcmMgOiB7fTtcblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHQvLyBOZXZlciBtb3ZlIG9yaWdpbmFsIG9iamVjdHMsIGNsb25lIHRoZW1cblx0XHRcdFx0XHR0YXJnZXRbIG5hbWUgXSA9IGpRdWVyeS5leHRlbmQoIGRlZXAsIGNsb25lLCBjb3B5ICk7XG5cblx0XHRcdFx0Ly8gRG9uJ3QgYnJpbmcgaW4gdW5kZWZpbmVkIHZhbHVlc1xuXHRcdFx0XHR9IGVsc2UgaWYgKCBjb3B5ICE9PSB1bmRlZmluZWQgKSB7XG5cdFx0XHRcdFx0dGFyZ2V0WyBuYW1lIF0gPSBjb3B5O1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0Ly8gUmV0dXJuIHRoZSBtb2RpZmllZCBvYmplY3Rcblx0cmV0dXJuIHRhcmdldDtcbn07XG5cbmpRdWVyeS5leHRlbmQoIHtcblxuXHQvLyBVbmlxdWUgZm9yIGVhY2ggY29weSBvZiBqUXVlcnkgb24gdGhlIHBhZ2Vcblx0ZXhwYW5kbzogXCJqUXVlcnlcIiArICggdmVyc2lvbiArIE1hdGgucmFuZG9tKCkgKS5yZXBsYWNlKCAvXFxEL2csIFwiXCIgKSxcblxuXHQvLyBBc3N1bWUgalF1ZXJ5IGlzIHJlYWR5IHdpdGhvdXQgdGhlIHJlYWR5IG1vZHVsZVxuXHRpc1JlYWR5OiB0cnVlLFxuXG5cdGVycm9yOiBmdW5jdGlvbiggbXNnICkge1xuXHRcdHRocm93IG5ldyBFcnJvciggbXNnICk7XG5cdH0sXG5cblx0bm9vcDogZnVuY3Rpb24oKSB7fSxcblxuXHRpc1BsYWluT2JqZWN0OiBmdW5jdGlvbiggb2JqICkge1xuXHRcdHZhciBwcm90bywgQ3RvcjtcblxuXHRcdC8vIERldGVjdCBvYnZpb3VzIG5lZ2F0aXZlc1xuXHRcdC8vIFVzZSB0b1N0cmluZyBpbnN0ZWFkIG9mIGpRdWVyeS50eXBlIHRvIGNhdGNoIGhvc3Qgb2JqZWN0c1xuXHRcdGlmICggIW9iaiB8fCB0b1N0cmluZy5jYWxsKCBvYmogKSAhPT0gXCJbb2JqZWN0IE9iamVjdF1cIiApIHtcblx0XHRcdHJldHVybiBmYWxzZTtcblx0XHR9XG5cblx0XHRwcm90byA9IGdldFByb3RvKCBvYmogKTtcblxuXHRcdC8vIE9iamVjdHMgd2l0aCBubyBwcm90b3R5cGUgKGUuZy4sIGBPYmplY3QuY3JlYXRlKCBudWxsIClgKSBhcmUgcGxhaW5cblx0XHRpZiAoICFwcm90byApIHtcblx0XHRcdHJldHVybiB0cnVlO1xuXHRcdH1cblxuXHRcdC8vIE9iamVjdHMgd2l0aCBwcm90b3R5cGUgYXJlIHBsYWluIGlmZiB0aGV5IHdlcmUgY29uc3RydWN0ZWQgYnkgYSBnbG9iYWwgT2JqZWN0IGZ1bmN0aW9uXG5cdFx0Q3RvciA9IGhhc093bi5jYWxsKCBwcm90bywgXCJjb25zdHJ1Y3RvclwiICkgJiYgcHJvdG8uY29uc3RydWN0b3I7XG5cdFx0cmV0dXJuIHR5cGVvZiBDdG9yID09PSBcImZ1bmN0aW9uXCIgJiYgZm5Ub1N0cmluZy5jYWxsKCBDdG9yICkgPT09IE9iamVjdEZ1bmN0aW9uU3RyaW5nO1xuXHR9LFxuXG5cdGlzRW1wdHlPYmplY3Q6IGZ1bmN0aW9uKCBvYmogKSB7XG5cblx0XHQvKiBlc2xpbnQtZGlzYWJsZSBuby11bnVzZWQtdmFycyAqL1xuXHRcdC8vIFNlZSBodHRwczovL2dpdGh1Yi5jb20vZXNsaW50L2VzbGludC9pc3N1ZXMvNjEyNVxuXHRcdHZhciBuYW1lO1xuXG5cdFx0Zm9yICggbmFtZSBpbiBvYmogKSB7XG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fVxuXHRcdHJldHVybiB0cnVlO1xuXHR9LFxuXG5cdC8vIEV2YWx1YXRlcyBhIHNjcmlwdCBpbiBhIGdsb2JhbCBjb250ZXh0XG5cdGdsb2JhbEV2YWw6IGZ1bmN0aW9uKCBjb2RlICkge1xuXHRcdERPTUV2YWwoIGNvZGUgKTtcblx0fSxcblxuXHRlYWNoOiBmdW5jdGlvbiggb2JqLCBjYWxsYmFjayApIHtcblx0XHR2YXIgbGVuZ3RoLCBpID0gMDtcblxuXHRcdGlmICggaXNBcnJheUxpa2UoIG9iaiApICkge1xuXHRcdFx0bGVuZ3RoID0gb2JqLmxlbmd0aDtcblx0XHRcdGZvciAoIDsgaSA8IGxlbmd0aDsgaSsrICkge1xuXHRcdFx0XHRpZiAoIGNhbGxiYWNrLmNhbGwoIG9ialsgaSBdLCBpLCBvYmpbIGkgXSApID09PSBmYWxzZSApIHtcblx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH0gZWxzZSB7XG5cdFx0XHRmb3IgKCBpIGluIG9iaiApIHtcblx0XHRcdFx0aWYgKCBjYWxsYmFjay5jYWxsKCBvYmpbIGkgXSwgaSwgb2JqWyBpIF0gKSA9PT0gZmFsc2UgKSB7XG5cdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cblx0XHRyZXR1cm4gb2JqO1xuXHR9LFxuXG5cdC8vIFN1cHBvcnQ6IEFuZHJvaWQgPD00LjAgb25seVxuXHR0cmltOiBmdW5jdGlvbiggdGV4dCApIHtcblx0XHRyZXR1cm4gdGV4dCA9PSBudWxsID9cblx0XHRcdFwiXCIgOlxuXHRcdFx0KCB0ZXh0ICsgXCJcIiApLnJlcGxhY2UoIHJ0cmltLCBcIlwiICk7XG5cdH0sXG5cblx0Ly8gcmVzdWx0cyBpcyBmb3IgaW50ZXJuYWwgdXNhZ2Ugb25seVxuXHRtYWtlQXJyYXk6IGZ1bmN0aW9uKCBhcnIsIHJlc3VsdHMgKSB7XG5cdFx0dmFyIHJldCA9IHJlc3VsdHMgfHwgW107XG5cblx0XHRpZiAoIGFyciAhPSBudWxsICkge1xuXHRcdFx0aWYgKCBpc0FycmF5TGlrZSggT2JqZWN0KCBhcnIgKSApICkge1xuXHRcdFx0XHRqUXVlcnkubWVyZ2UoIHJldCxcblx0XHRcdFx0XHR0eXBlb2YgYXJyID09PSBcInN0cmluZ1wiID9cblx0XHRcdFx0XHRbIGFyciBdIDogYXJyXG5cdFx0XHRcdCk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRwdXNoLmNhbGwoIHJldCwgYXJyICk7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHJldDtcblx0fSxcblxuXHRpbkFycmF5OiBmdW5jdGlvbiggZWxlbSwgYXJyLCBpICkge1xuXHRcdHJldHVybiBhcnIgPT0gbnVsbCA/IC0xIDogaW5kZXhPZi5jYWxsKCBhcnIsIGVsZW0sIGkgKTtcblx0fSxcblxuXHQvLyBTdXBwb3J0OiBBbmRyb2lkIDw9NC4wIG9ubHksIFBoYW50b21KUyAxIG9ubHlcblx0Ly8gcHVzaC5hcHBseShfLCBhcnJheWxpa2UpIHRocm93cyBvbiBhbmNpZW50IFdlYktpdFxuXHRtZXJnZTogZnVuY3Rpb24oIGZpcnN0LCBzZWNvbmQgKSB7XG5cdFx0dmFyIGxlbiA9ICtzZWNvbmQubGVuZ3RoLFxuXHRcdFx0aiA9IDAsXG5cdFx0XHRpID0gZmlyc3QubGVuZ3RoO1xuXG5cdFx0Zm9yICggOyBqIDwgbGVuOyBqKysgKSB7XG5cdFx0XHRmaXJzdFsgaSsrIF0gPSBzZWNvbmRbIGogXTtcblx0XHR9XG5cblx0XHRmaXJzdC5sZW5ndGggPSBpO1xuXG5cdFx0cmV0dXJuIGZpcnN0O1xuXHR9LFxuXG5cdGdyZXA6IGZ1bmN0aW9uKCBlbGVtcywgY2FsbGJhY2ssIGludmVydCApIHtcblx0XHR2YXIgY2FsbGJhY2tJbnZlcnNlLFxuXHRcdFx0bWF0Y2hlcyA9IFtdLFxuXHRcdFx0aSA9IDAsXG5cdFx0XHRsZW5ndGggPSBlbGVtcy5sZW5ndGgsXG5cdFx0XHRjYWxsYmFja0V4cGVjdCA9ICFpbnZlcnQ7XG5cblx0XHQvLyBHbyB0aHJvdWdoIHRoZSBhcnJheSwgb25seSBzYXZpbmcgdGhlIGl0ZW1zXG5cdFx0Ly8gdGhhdCBwYXNzIHRoZSB2YWxpZGF0b3IgZnVuY3Rpb25cblx0XHRmb3IgKCA7IGkgPCBsZW5ndGg7IGkrKyApIHtcblx0XHRcdGNhbGxiYWNrSW52ZXJzZSA9ICFjYWxsYmFjayggZWxlbXNbIGkgXSwgaSApO1xuXHRcdFx0aWYgKCBjYWxsYmFja0ludmVyc2UgIT09IGNhbGxiYWNrRXhwZWN0ICkge1xuXHRcdFx0XHRtYXRjaGVzLnB1c2goIGVsZW1zWyBpIF0gKTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHRyZXR1cm4gbWF0Y2hlcztcblx0fSxcblxuXHQvLyBhcmcgaXMgZm9yIGludGVybmFsIHVzYWdlIG9ubHlcblx0bWFwOiBmdW5jdGlvbiggZWxlbXMsIGNhbGxiYWNrLCBhcmcgKSB7XG5cdFx0dmFyIGxlbmd0aCwgdmFsdWUsXG5cdFx0XHRpID0gMCxcblx0XHRcdHJldCA9IFtdO1xuXG5cdFx0Ly8gR28gdGhyb3VnaCB0aGUgYXJyYXksIHRyYW5zbGF0aW5nIGVhY2ggb2YgdGhlIGl0ZW1zIHRvIHRoZWlyIG5ldyB2YWx1ZXNcblx0XHRpZiAoIGlzQXJyYXlMaWtlKCBlbGVtcyApICkge1xuXHRcdFx0bGVuZ3RoID0gZWxlbXMubGVuZ3RoO1xuXHRcdFx0Zm9yICggOyBpIDwgbGVuZ3RoOyBpKysgKSB7XG5cdFx0XHRcdHZhbHVlID0gY2FsbGJhY2soIGVsZW1zWyBpIF0sIGksIGFyZyApO1xuXG5cdFx0XHRcdGlmICggdmFsdWUgIT0gbnVsbCApIHtcblx0XHRcdFx0XHRyZXQucHVzaCggdmFsdWUgKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0Ly8gR28gdGhyb3VnaCBldmVyeSBrZXkgb24gdGhlIG9iamVjdCxcblx0XHR9IGVsc2Uge1xuXHRcdFx0Zm9yICggaSBpbiBlbGVtcyApIHtcblx0XHRcdFx0dmFsdWUgPSBjYWxsYmFjayggZWxlbXNbIGkgXSwgaSwgYXJnICk7XG5cblx0XHRcdFx0aWYgKCB2YWx1ZSAhPSBudWxsICkge1xuXHRcdFx0XHRcdHJldC5wdXNoKCB2YWx1ZSApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Ly8gRmxhdHRlbiBhbnkgbmVzdGVkIGFycmF5c1xuXHRcdHJldHVybiBjb25jYXQuYXBwbHkoIFtdLCByZXQgKTtcblx0fSxcblxuXHQvLyBBIGdsb2JhbCBHVUlEIGNvdW50ZXIgZm9yIG9iamVjdHNcblx0Z3VpZDogMSxcblxuXHQvLyBqUXVlcnkuc3VwcG9ydCBpcyBub3QgdXNlZCBpbiBDb3JlIGJ1dCBvdGhlciBwcm9qZWN0cyBhdHRhY2ggdGhlaXJcblx0Ly8gcHJvcGVydGllcyB0byBpdCBzbyBpdCBuZWVkcyB0byBleGlzdC5cblx0c3VwcG9ydDogc3VwcG9ydFxufSApO1xuXG5pZiAoIHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiApIHtcblx0alF1ZXJ5LmZuWyBTeW1ib2wuaXRlcmF0b3IgXSA9IGFyclsgU3ltYm9sLml0ZXJhdG9yIF07XG59XG5cbi8vIFBvcHVsYXRlIHRoZSBjbGFzczJ0eXBlIG1hcFxualF1ZXJ5LmVhY2goIFwiQm9vbGVhbiBOdW1iZXIgU3RyaW5nIEZ1bmN0aW9uIEFycmF5IERhdGUgUmVnRXhwIE9iamVjdCBFcnJvciBTeW1ib2xcIi5zcGxpdCggXCIgXCIgKSxcbmZ1bmN0aW9uKCBpLCBuYW1lICkge1xuXHRjbGFzczJ0eXBlWyBcIltvYmplY3QgXCIgKyBuYW1lICsgXCJdXCIgXSA9IG5hbWUudG9Mb3dlckNhc2UoKTtcbn0gKTtcblxuZnVuY3Rpb24gaXNBcnJheUxpa2UoIG9iaiApIHtcblxuXHQvLyBTdXBwb3J0OiByZWFsIGlPUyA4LjIgb25seSAobm90IHJlcHJvZHVjaWJsZSBpbiBzaW11bGF0b3IpXG5cdC8vIGBpbmAgY2hlY2sgdXNlZCB0byBwcmV2ZW50IEpJVCBlcnJvciAoZ2gtMjE0NSlcblx0Ly8gaGFzT3duIGlzbid0IHVzZWQgaGVyZSBkdWUgdG8gZmFsc2UgbmVnYXRpdmVzXG5cdC8vIHJlZ2FyZGluZyBOb2RlbGlzdCBsZW5ndGggaW4gSUVcblx0dmFyIGxlbmd0aCA9ICEhb2JqICYmIFwibGVuZ3RoXCIgaW4gb2JqICYmIG9iai5sZW5ndGgsXG5cdFx0dHlwZSA9IHRvVHlwZSggb2JqICk7XG5cblx0aWYgKCBpc0Z1bmN0aW9uKCBvYmogKSB8fCBpc1dpbmRvdyggb2JqICkgKSB7XG5cdFx0cmV0dXJuIGZhbHNlO1xuXHR9XG5cblx0cmV0dXJuIHR5cGUgPT09IFwiYXJyYXlcIiB8fCBsZW5ndGggPT09IDAgfHxcblx0XHR0eXBlb2YgbGVuZ3RoID09PSBcIm51bWJlclwiICYmIGxlbmd0aCA+IDAgJiYgKCBsZW5ndGggLSAxICkgaW4gb2JqO1xufVxudmFyIFNpenpsZSA9XG4vKiFcbiAqIFNpenpsZSBDU1MgU2VsZWN0b3IgRW5naW5lIHYyLjMuM1xuICogaHR0cHM6Ly9zaXp6bGVqcy5jb20vXG4gKlxuICogQ29weXJpZ2h0IGpRdWVyeSBGb3VuZGF0aW9uIGFuZCBvdGhlciBjb250cmlidXRvcnNcbiAqIFJlbGVhc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZVxuICogaHR0cDovL2pxdWVyeS5vcmcvbGljZW5zZVxuICpcbiAqIERhdGU6IDIwMTYtMDgtMDhcbiAqL1xuKGZ1bmN0aW9uKCB3aW5kb3cgKSB7XG5cbnZhciBpLFxuXHRzdXBwb3J0LFxuXHRFeHByLFxuXHRnZXRUZXh0LFxuXHRpc1hNTCxcblx0dG9rZW5pemUsXG5cdGNvbXBpbGUsXG5cdHNlbGVjdCxcblx0b3V0ZXJtb3N0Q29udGV4dCxcblx0c29ydElucHV0LFxuXHRoYXNEdXBsaWNhdGUsXG5cblx0Ly8gTG9jYWwgZG9jdW1lbnQgdmFyc1xuXHRzZXREb2N1bWVudCxcblx0ZG9jdW1lbnQsXG5cdGRvY0VsZW0sXG5cdGRvY3VtZW50SXNIVE1MLFxuXHRyYnVnZ3lRU0EsXG5cdHJidWdneU1hdGNoZXMsXG5cdG1hdGNoZXMsXG5cdGNvbnRhaW5zLFxuXG5cdC8vIEluc3RhbmNlLXNwZWNpZmljIGRhdGFcblx0ZXhwYW5kbyA9IFwic2l6emxlXCIgKyAxICogbmV3IERhdGUoKSxcblx0cHJlZmVycmVkRG9jID0gd2luZG93LmRvY3VtZW50LFxuXHRkaXJydW5zID0gMCxcblx0ZG9uZSA9IDAsXG5cdGNsYXNzQ2FjaGUgPSBjcmVhdGVDYWNoZSgpLFxuXHR0b2tlbkNhY2hlID0gY3JlYXRlQ2FjaGUoKSxcblx0Y29tcGlsZXJDYWNoZSA9IGNyZWF0ZUNhY2hlKCksXG5cdHNvcnRPcmRlciA9IGZ1bmN0aW9uKCBhLCBiICkge1xuXHRcdGlmICggYSA9PT0gYiApIHtcblx0XHRcdGhhc0R1cGxpY2F0ZSA9IHRydWU7XG5cdFx0fVxuXHRcdHJldHVybiAwO1xuXHR9LFxuXG5cdC8vIEluc3RhbmNlIG1ldGhvZHNcblx0aGFzT3duID0gKHt9KS5oYXNPd25Qcm9wZXJ0eSxcblx0YXJyID0gW10sXG5cdHBvcCA9IGFyci5wb3AsXG5cdHB1c2hfbmF0aXZlID0gYXJyLnB1c2gsXG5cdHB1c2ggPSBhcnIucHVzaCxcblx0c2xpY2UgPSBhcnIuc2xpY2UsXG5cdC8vIFVzZSBhIHN0cmlwcGVkLWRvd24gaW5kZXhPZiBhcyBpdCdzIGZhc3RlciB0aGFuIG5hdGl2ZVxuXHQvLyBodHRwczovL2pzcGVyZi5jb20vdGhvci1pbmRleG9mLXZzLWZvci81XG5cdGluZGV4T2YgPSBmdW5jdGlvbiggbGlzdCwgZWxlbSApIHtcblx0XHR2YXIgaSA9IDAsXG5cdFx0XHRsZW4gPSBsaXN0Lmxlbmd0aDtcblx0XHRmb3IgKCA7IGkgPCBsZW47IGkrKyApIHtcblx0XHRcdGlmICggbGlzdFtpXSA9PT0gZWxlbSApIHtcblx0XHRcdFx0cmV0dXJuIGk7XG5cdFx0XHR9XG5cdFx0fVxuXHRcdHJldHVybiAtMTtcblx0fSxcblxuXHRib29sZWFucyA9IFwiY2hlY2tlZHxzZWxlY3RlZHxhc3luY3xhdXRvZm9jdXN8YXV0b3BsYXl8Y29udHJvbHN8ZGVmZXJ8ZGlzYWJsZWR8aGlkZGVufGlzbWFwfGxvb3B8bXVsdGlwbGV8b3BlbnxyZWFkb25seXxyZXF1aXJlZHxzY29wZWRcIixcblxuXHQvLyBSZWd1bGFyIGV4cHJlc3Npb25zXG5cblx0Ly8gaHR0cDovL3d3dy53My5vcmcvVFIvY3NzMy1zZWxlY3RvcnMvI3doaXRlc3BhY2Vcblx0d2hpdGVzcGFjZSA9IFwiW1xcXFx4MjBcXFxcdFxcXFxyXFxcXG5cXFxcZl1cIixcblxuXHQvLyBodHRwOi8vd3d3LnczLm9yZy9UUi9DU1MyMS9zeW5kYXRhLmh0bWwjdmFsdWUtZGVmLWlkZW50aWZpZXJcblx0aWRlbnRpZmllciA9IFwiKD86XFxcXFxcXFwufFtcXFxcdy1dfFteXFwwLVxcXFx4YTBdKStcIixcblxuXHQvLyBBdHRyaWJ1dGUgc2VsZWN0b3JzOiBodHRwOi8vd3d3LnczLm9yZy9UUi9zZWxlY3RvcnMvI2F0dHJpYnV0ZS1zZWxlY3RvcnNcblx0YXR0cmlidXRlcyA9IFwiXFxcXFtcIiArIHdoaXRlc3BhY2UgKyBcIiooXCIgKyBpZGVudGlmaWVyICsgXCIpKD86XCIgKyB3aGl0ZXNwYWNlICtcblx0XHQvLyBPcGVyYXRvciAoY2FwdHVyZSAyKVxuXHRcdFwiKihbKl4kfCF+XT89KVwiICsgd2hpdGVzcGFjZSArXG5cdFx0Ly8gXCJBdHRyaWJ1dGUgdmFsdWVzIG11c3QgYmUgQ1NTIGlkZW50aWZpZXJzIFtjYXB0dXJlIDVdIG9yIHN0cmluZ3MgW2NhcHR1cmUgMyBvciBjYXB0dXJlIDRdXCJcblx0XHRcIiooPzonKCg/OlxcXFxcXFxcLnxbXlxcXFxcXFxcJ10pKiknfFxcXCIoKD86XFxcXFxcXFwufFteXFxcXFxcXFxcXFwiXSkqKVxcXCJ8KFwiICsgaWRlbnRpZmllciArIFwiKSl8KVwiICsgd2hpdGVzcGFjZSArXG5cdFx0XCIqXFxcXF1cIixcblxuXHRwc2V1ZG9zID0gXCI6KFwiICsgaWRlbnRpZmllciArIFwiKSg/OlxcXFwoKFwiICtcblx0XHQvLyBUbyByZWR1Y2UgdGhlIG51bWJlciBvZiBzZWxlY3RvcnMgbmVlZGluZyB0b2tlbml6ZSBpbiB0aGUgcHJlRmlsdGVyLCBwcmVmZXIgYXJndW1lbnRzOlxuXHRcdC8vIDEuIHF1b3RlZCAoY2FwdHVyZSAzOyBjYXB0dXJlIDQgb3IgY2FwdHVyZSA1KVxuXHRcdFwiKCcoKD86XFxcXFxcXFwufFteXFxcXFxcXFwnXSkqKSd8XFxcIigoPzpcXFxcXFxcXC58W15cXFxcXFxcXFxcXCJdKSopXFxcIil8XCIgK1xuXHRcdC8vIDIuIHNpbXBsZSAoY2FwdHVyZSA2KVxuXHRcdFwiKCg/OlxcXFxcXFxcLnxbXlxcXFxcXFxcKClbXFxcXF1dfFwiICsgYXR0cmlidXRlcyArIFwiKSopfFwiICtcblx0XHQvLyAzLiBhbnl0aGluZyBlbHNlIChjYXB0dXJlIDIpXG5cdFx0XCIuKlwiICtcblx0XHRcIilcXFxcKXwpXCIsXG5cblx0Ly8gTGVhZGluZyBhbmQgbm9uLWVzY2FwZWQgdHJhaWxpbmcgd2hpdGVzcGFjZSwgY2FwdHVyaW5nIHNvbWUgbm9uLXdoaXRlc3BhY2UgY2hhcmFjdGVycyBwcmVjZWRpbmcgdGhlIGxhdHRlclxuXHRyd2hpdGVzcGFjZSA9IG5ldyBSZWdFeHAoIHdoaXRlc3BhY2UgKyBcIitcIiwgXCJnXCIgKSxcblx0cnRyaW0gPSBuZXcgUmVnRXhwKCBcIl5cIiArIHdoaXRlc3BhY2UgKyBcIit8KCg/Ol58W15cXFxcXFxcXF0pKD86XFxcXFxcXFwuKSopXCIgKyB3aGl0ZXNwYWNlICsgXCIrJFwiLCBcImdcIiApLFxuXG5cdHJjb21tYSA9IG5ldyBSZWdFeHAoIFwiXlwiICsgd2hpdGVzcGFjZSArIFwiKixcIiArIHdoaXRlc3BhY2UgKyBcIipcIiApLFxuXHRyY29tYmluYXRvcnMgPSBuZXcgUmVnRXhwKCBcIl5cIiArIHdoaXRlc3BhY2UgKyBcIiooWz4rfl18XCIgKyB3aGl0ZXNwYWNlICsgXCIpXCIgKyB3aGl0ZXNwYWNlICsgXCIqXCIgKSxcblxuXHRyYXR0cmlidXRlUXVvdGVzID0gbmV3IFJlZ0V4cCggXCI9XCIgKyB3aGl0ZXNwYWNlICsgXCIqKFteXFxcXF0nXFxcIl0qPylcIiArIHdoaXRlc3BhY2UgKyBcIipcXFxcXVwiLCBcImdcIiApLFxuXG5cdHJwc2V1ZG8gPSBuZXcgUmVnRXhwKCBwc2V1ZG9zICksXG5cdHJpZGVudGlmaWVyID0gbmV3IFJlZ0V4cCggXCJeXCIgKyBpZGVudGlmaWVyICsgXCIkXCIgKSxcblxuXHRtYXRjaEV4cHIgPSB7XG5cdFx0XCJJRFwiOiBuZXcgUmVnRXhwKCBcIl4jKFwiICsgaWRlbnRpZmllciArIFwiKVwiICksXG5cdFx0XCJDTEFTU1wiOiBuZXcgUmVnRXhwKCBcIl5cXFxcLihcIiArIGlkZW50aWZpZXIgKyBcIilcIiApLFxuXHRcdFwiVEFHXCI6IG5ldyBSZWdFeHAoIFwiXihcIiArIGlkZW50aWZpZXIgKyBcInxbKl0pXCIgKSxcblx0XHRcIkFUVFJcIjogbmV3IFJlZ0V4cCggXCJeXCIgKyBhdHRyaWJ1dGVzICksXG5cdFx0XCJQU0VVRE9cIjogbmV3IFJlZ0V4cCggXCJeXCIgKyBwc2V1ZG9zICksXG5cdFx0XCJDSElMRFwiOiBuZXcgUmVnRXhwKCBcIl46KG9ubHl8Zmlyc3R8bGFzdHxudGh8bnRoLWxhc3QpLShjaGlsZHxvZi10eXBlKSg/OlxcXFwoXCIgKyB3aGl0ZXNwYWNlICtcblx0XHRcdFwiKihldmVufG9kZHwoKFsrLV18KShcXFxcZCopbnwpXCIgKyB3aGl0ZXNwYWNlICsgXCIqKD86KFsrLV18KVwiICsgd2hpdGVzcGFjZSArXG5cdFx0XHRcIiooXFxcXGQrKXwpKVwiICsgd2hpdGVzcGFjZSArIFwiKlxcXFwpfClcIiwgXCJpXCIgKSxcblx0XHRcImJvb2xcIjogbmV3IFJlZ0V4cCggXCJeKD86XCIgKyBib29sZWFucyArIFwiKSRcIiwgXCJpXCIgKSxcblx0XHQvLyBGb3IgdXNlIGluIGxpYnJhcmllcyBpbXBsZW1lbnRpbmcgLmlzKClcblx0XHQvLyBXZSB1c2UgdGhpcyBmb3IgUE9TIG1hdGNoaW5nIGluIGBzZWxlY3RgXG5cdFx0XCJuZWVkc0NvbnRleHRcIjogbmV3IFJlZ0V4cCggXCJeXCIgKyB3aGl0ZXNwYWNlICsgXCIqWz4rfl18OihldmVufG9kZHxlcXxndHxsdHxudGh8Zmlyc3R8bGFzdCkoPzpcXFxcKFwiICtcblx0XHRcdHdoaXRlc3BhY2UgKyBcIiooKD86LVxcXFxkKT9cXFxcZCopXCIgKyB3aGl0ZXNwYWNlICsgXCIqXFxcXCl8KSg/PVteLV18JClcIiwgXCJpXCIgKVxuXHR9LFxuXG5cdHJpbnB1dHMgPSAvXig/OmlucHV0fHNlbGVjdHx0ZXh0YXJlYXxidXR0b24pJC9pLFxuXHRyaGVhZGVyID0gL15oXFxkJC9pLFxuXG5cdHJuYXRpdmUgPSAvXltee10rXFx7XFxzKlxcW25hdGl2ZSBcXHcvLFxuXG5cdC8vIEVhc2lseS1wYXJzZWFibGUvcmV0cmlldmFibGUgSUQgb3IgVEFHIG9yIENMQVNTIHNlbGVjdG9yc1xuXHRycXVpY2tFeHByID0gL14oPzojKFtcXHctXSspfChcXHcrKXxcXC4oW1xcdy1dKykpJC8sXG5cblx0cnNpYmxpbmcgPSAvWyt+XS8sXG5cblx0Ly8gQ1NTIGVzY2FwZXNcblx0Ly8gaHR0cDovL3d3dy53My5vcmcvVFIvQ1NTMjEvc3luZGF0YS5odG1sI2VzY2FwZWQtY2hhcmFjdGVyc1xuXHRydW5lc2NhcGUgPSBuZXcgUmVnRXhwKCBcIlxcXFxcXFxcKFtcXFxcZGEtZl17MSw2fVwiICsgd2hpdGVzcGFjZSArIFwiP3woXCIgKyB3aGl0ZXNwYWNlICsgXCIpfC4pXCIsIFwiaWdcIiApLFxuXHRmdW5lc2NhcGUgPSBmdW5jdGlvbiggXywgZXNjYXBlZCwgZXNjYXBlZFdoaXRlc3BhY2UgKSB7XG5cdFx0dmFyIGhpZ2ggPSBcIjB4XCIgKyBlc2NhcGVkIC0gMHgxMDAwMDtcblx0XHQvLyBOYU4gbWVhbnMgbm9uLWNvZGVwb2ludFxuXHRcdC8vIFN1cHBvcnQ6IEZpcmVmb3g8MjRcblx0XHQvLyBXb3JrYXJvdW5kIGVycm9uZW91cyBudW1lcmljIGludGVycHJldGF0aW9uIG9mICtcIjB4XCJcblx0XHRyZXR1cm4gaGlnaCAhPT0gaGlnaCB8fCBlc2NhcGVkV2hpdGVzcGFjZSA/XG5cdFx0XHRlc2NhcGVkIDpcblx0XHRcdGhpZ2ggPCAwID9cblx0XHRcdFx0Ly8gQk1QIGNvZGVwb2ludFxuXHRcdFx0XHRTdHJpbmcuZnJvbUNoYXJDb2RlKCBoaWdoICsgMHgxMDAwMCApIDpcblx0XHRcdFx0Ly8gU3VwcGxlbWVudGFsIFBsYW5lIGNvZGVwb2ludCAoc3Vycm9nYXRlIHBhaXIpXG5cdFx0XHRcdFN0cmluZy5mcm9tQ2hhckNvZGUoIGhpZ2ggPj4gMTAgfCAweEQ4MDAsIGhpZ2ggJiAweDNGRiB8IDB4REMwMCApO1xuXHR9LFxuXG5cdC8vIENTUyBzdHJpbmcvaWRlbnRpZmllciBzZXJpYWxpemF0aW9uXG5cdC8vIGh0dHBzOi8vZHJhZnRzLmNzc3dnLm9yZy9jc3NvbS8jY29tbW9uLXNlcmlhbGl6aW5nLWlkaW9tc1xuXHRyY3NzZXNjYXBlID0gLyhbXFwwLVxceDFmXFx4N2ZdfF4tP1xcZCl8Xi0kfFteXFwwLVxceDFmXFx4N2YtXFx1RkZGRlxcdy1dL2csXG5cdGZjc3Nlc2NhcGUgPSBmdW5jdGlvbiggY2gsIGFzQ29kZVBvaW50ICkge1xuXHRcdGlmICggYXNDb2RlUG9pbnQgKSB7XG5cblx0XHRcdC8vIFUrMDAwMCBOVUxMIGJlY29tZXMgVStGRkZEIFJFUExBQ0VNRU5UIENIQVJBQ1RFUlxuXHRcdFx0aWYgKCBjaCA9PT0gXCJcXDBcIiApIHtcblx0XHRcdFx0cmV0dXJuIFwiXFx1RkZGRFwiO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBDb250cm9sIGNoYXJhY3RlcnMgYW5kIChkZXBlbmRlbnQgdXBvbiBwb3NpdGlvbikgbnVtYmVycyBnZXQgZXNjYXBlZCBhcyBjb2RlIHBvaW50c1xuXHRcdFx0cmV0dXJuIGNoLnNsaWNlKCAwLCAtMSApICsgXCJcXFxcXCIgKyBjaC5jaGFyQ29kZUF0KCBjaC5sZW5ndGggLSAxICkudG9TdHJpbmcoIDE2ICkgKyBcIiBcIjtcblx0XHR9XG5cblx0XHQvLyBPdGhlciBwb3RlbnRpYWxseS1zcGVjaWFsIEFTQ0lJIGNoYXJhY3RlcnMgZ2V0IGJhY2tzbGFzaC1lc2NhcGVkXG5cdFx0cmV0dXJuIFwiXFxcXFwiICsgY2g7XG5cdH0sXG5cblx0Ly8gVXNlZCBmb3IgaWZyYW1lc1xuXHQvLyBTZWUgc2V0RG9jdW1lbnQoKVxuXHQvLyBSZW1vdmluZyB0aGUgZnVuY3Rpb24gd3JhcHBlciBjYXVzZXMgYSBcIlBlcm1pc3Npb24gRGVuaWVkXCJcblx0Ly8gZXJyb3IgaW4gSUVcblx0dW5sb2FkSGFuZGxlciA9IGZ1bmN0aW9uKCkge1xuXHRcdHNldERvY3VtZW50KCk7XG5cdH0sXG5cblx0ZGlzYWJsZWRBbmNlc3RvciA9IGFkZENvbWJpbmF0b3IoXG5cdFx0ZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRyZXR1cm4gZWxlbS5kaXNhYmxlZCA9PT0gdHJ1ZSAmJiAoXCJmb3JtXCIgaW4gZWxlbSB8fCBcImxhYmVsXCIgaW4gZWxlbSk7XG5cdFx0fSxcblx0XHR7IGRpcjogXCJwYXJlbnROb2RlXCIsIG5leHQ6IFwibGVnZW5kXCIgfVxuXHQpO1xuXG4vLyBPcHRpbWl6ZSBmb3IgcHVzaC5hcHBseSggXywgTm9kZUxpc3QgKVxudHJ5IHtcblx0cHVzaC5hcHBseShcblx0XHQoYXJyID0gc2xpY2UuY2FsbCggcHJlZmVycmVkRG9jLmNoaWxkTm9kZXMgKSksXG5cdFx0cHJlZmVycmVkRG9jLmNoaWxkTm9kZXNcblx0KTtcblx0Ly8gU3VwcG9ydDogQW5kcm9pZDw0LjBcblx0Ly8gRGV0ZWN0IHNpbGVudGx5IGZhaWxpbmcgcHVzaC5hcHBseVxuXHRhcnJbIHByZWZlcnJlZERvYy5jaGlsZE5vZGVzLmxlbmd0aCBdLm5vZGVUeXBlO1xufSBjYXRjaCAoIGUgKSB7XG5cdHB1c2ggPSB7IGFwcGx5OiBhcnIubGVuZ3RoID9cblxuXHRcdC8vIExldmVyYWdlIHNsaWNlIGlmIHBvc3NpYmxlXG5cdFx0ZnVuY3Rpb24oIHRhcmdldCwgZWxzICkge1xuXHRcdFx0cHVzaF9uYXRpdmUuYXBwbHkoIHRhcmdldCwgc2xpY2UuY2FsbChlbHMpICk7XG5cdFx0fSA6XG5cblx0XHQvLyBTdXBwb3J0OiBJRTw5XG5cdFx0Ly8gT3RoZXJ3aXNlIGFwcGVuZCBkaXJlY3RseVxuXHRcdGZ1bmN0aW9uKCB0YXJnZXQsIGVscyApIHtcblx0XHRcdHZhciBqID0gdGFyZ2V0Lmxlbmd0aCxcblx0XHRcdFx0aSA9IDA7XG5cdFx0XHQvLyBDYW4ndCB0cnVzdCBOb2RlTGlzdC5sZW5ndGhcblx0XHRcdHdoaWxlICggKHRhcmdldFtqKytdID0gZWxzW2krK10pICkge31cblx0XHRcdHRhcmdldC5sZW5ndGggPSBqIC0gMTtcblx0XHR9XG5cdH07XG59XG5cbmZ1bmN0aW9uIFNpenpsZSggc2VsZWN0b3IsIGNvbnRleHQsIHJlc3VsdHMsIHNlZWQgKSB7XG5cdHZhciBtLCBpLCBlbGVtLCBuaWQsIG1hdGNoLCBncm91cHMsIG5ld1NlbGVjdG9yLFxuXHRcdG5ld0NvbnRleHQgPSBjb250ZXh0ICYmIGNvbnRleHQub3duZXJEb2N1bWVudCxcblxuXHRcdC8vIG5vZGVUeXBlIGRlZmF1bHRzIHRvIDksIHNpbmNlIGNvbnRleHQgZGVmYXVsdHMgdG8gZG9jdW1lbnRcblx0XHRub2RlVHlwZSA9IGNvbnRleHQgPyBjb250ZXh0Lm5vZGVUeXBlIDogOTtcblxuXHRyZXN1bHRzID0gcmVzdWx0cyB8fCBbXTtcblxuXHQvLyBSZXR1cm4gZWFybHkgZnJvbSBjYWxscyB3aXRoIGludmFsaWQgc2VsZWN0b3Igb3IgY29udGV4dFxuXHRpZiAoIHR5cGVvZiBzZWxlY3RvciAhPT0gXCJzdHJpbmdcIiB8fCAhc2VsZWN0b3IgfHxcblx0XHRub2RlVHlwZSAhPT0gMSAmJiBub2RlVHlwZSAhPT0gOSAmJiBub2RlVHlwZSAhPT0gMTEgKSB7XG5cblx0XHRyZXR1cm4gcmVzdWx0cztcblx0fVxuXG5cdC8vIFRyeSB0byBzaG9ydGN1dCBmaW5kIG9wZXJhdGlvbnMgKGFzIG9wcG9zZWQgdG8gZmlsdGVycykgaW4gSFRNTCBkb2N1bWVudHNcblx0aWYgKCAhc2VlZCApIHtcblxuXHRcdGlmICggKCBjb250ZXh0ID8gY29udGV4dC5vd25lckRvY3VtZW50IHx8IGNvbnRleHQgOiBwcmVmZXJyZWREb2MgKSAhPT0gZG9jdW1lbnQgKSB7XG5cdFx0XHRzZXREb2N1bWVudCggY29udGV4dCApO1xuXHRcdH1cblx0XHRjb250ZXh0ID0gY29udGV4dCB8fCBkb2N1bWVudDtcblxuXHRcdGlmICggZG9jdW1lbnRJc0hUTUwgKSB7XG5cblx0XHRcdC8vIElmIHRoZSBzZWxlY3RvciBpcyBzdWZmaWNpZW50bHkgc2ltcGxlLCB0cnkgdXNpbmcgYSBcImdldCpCeSpcIiBET00gbWV0aG9kXG5cdFx0XHQvLyAoZXhjZXB0aW5nIERvY3VtZW50RnJhZ21lbnQgY29udGV4dCwgd2hlcmUgdGhlIG1ldGhvZHMgZG9uJ3QgZXhpc3QpXG5cdFx0XHRpZiAoIG5vZGVUeXBlICE9PSAxMSAmJiAobWF0Y2ggPSBycXVpY2tFeHByLmV4ZWMoIHNlbGVjdG9yICkpICkge1xuXG5cdFx0XHRcdC8vIElEIHNlbGVjdG9yXG5cdFx0XHRcdGlmICggKG0gPSBtYXRjaFsxXSkgKSB7XG5cblx0XHRcdFx0XHQvLyBEb2N1bWVudCBjb250ZXh0XG5cdFx0XHRcdFx0aWYgKCBub2RlVHlwZSA9PT0gOSApIHtcblx0XHRcdFx0XHRcdGlmICggKGVsZW0gPSBjb250ZXh0LmdldEVsZW1lbnRCeUlkKCBtICkpICkge1xuXG5cdFx0XHRcdFx0XHRcdC8vIFN1cHBvcnQ6IElFLCBPcGVyYSwgV2Via2l0XG5cdFx0XHRcdFx0XHRcdC8vIFRPRE86IGlkZW50aWZ5IHZlcnNpb25zXG5cdFx0XHRcdFx0XHRcdC8vIGdldEVsZW1lbnRCeUlkIGNhbiBtYXRjaCBlbGVtZW50cyBieSBuYW1lIGluc3RlYWQgb2YgSURcblx0XHRcdFx0XHRcdFx0aWYgKCBlbGVtLmlkID09PSBtICkge1xuXHRcdFx0XHRcdFx0XHRcdHJlc3VsdHMucHVzaCggZWxlbSApO1xuXHRcdFx0XHRcdFx0XHRcdHJldHVybiByZXN1bHRzO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0XHRyZXR1cm4gcmVzdWx0cztcblx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdC8vIEVsZW1lbnQgY29udGV4dFxuXHRcdFx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0XHRcdC8vIFN1cHBvcnQ6IElFLCBPcGVyYSwgV2Via2l0XG5cdFx0XHRcdFx0XHQvLyBUT0RPOiBpZGVudGlmeSB2ZXJzaW9uc1xuXHRcdFx0XHRcdFx0Ly8gZ2V0RWxlbWVudEJ5SWQgY2FuIG1hdGNoIGVsZW1lbnRzIGJ5IG5hbWUgaW5zdGVhZCBvZiBJRFxuXHRcdFx0XHRcdFx0aWYgKCBuZXdDb250ZXh0ICYmIChlbGVtID0gbmV3Q29udGV4dC5nZXRFbGVtZW50QnlJZCggbSApKSAmJlxuXHRcdFx0XHRcdFx0XHRjb250YWlucyggY29udGV4dCwgZWxlbSApICYmXG5cdFx0XHRcdFx0XHRcdGVsZW0uaWQgPT09IG0gKSB7XG5cblx0XHRcdFx0XHRcdFx0cmVzdWx0cy5wdXNoKCBlbGVtICk7XG5cdFx0XHRcdFx0XHRcdHJldHVybiByZXN1bHRzO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBUeXBlIHNlbGVjdG9yXG5cdFx0XHRcdH0gZWxzZSBpZiAoIG1hdGNoWzJdICkge1xuXHRcdFx0XHRcdHB1c2guYXBwbHkoIHJlc3VsdHMsIGNvbnRleHQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoIHNlbGVjdG9yICkgKTtcblx0XHRcdFx0XHRyZXR1cm4gcmVzdWx0cztcblxuXHRcdFx0XHQvLyBDbGFzcyBzZWxlY3RvclxuXHRcdFx0XHR9IGVsc2UgaWYgKCAobSA9IG1hdGNoWzNdKSAmJiBzdXBwb3J0LmdldEVsZW1lbnRzQnlDbGFzc05hbWUgJiZcblx0XHRcdFx0XHRjb250ZXh0LmdldEVsZW1lbnRzQnlDbGFzc05hbWUgKSB7XG5cblx0XHRcdFx0XHRwdXNoLmFwcGx5KCByZXN1bHRzLCBjb250ZXh0LmdldEVsZW1lbnRzQnlDbGFzc05hbWUoIG0gKSApO1xuXHRcdFx0XHRcdHJldHVybiByZXN1bHRzO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdC8vIFRha2UgYWR2YW50YWdlIG9mIHF1ZXJ5U2VsZWN0b3JBbGxcblx0XHRcdGlmICggc3VwcG9ydC5xc2EgJiZcblx0XHRcdFx0IWNvbXBpbGVyQ2FjaGVbIHNlbGVjdG9yICsgXCIgXCIgXSAmJlxuXHRcdFx0XHQoIXJidWdneVFTQSB8fCAhcmJ1Z2d5UVNBLnRlc3QoIHNlbGVjdG9yICkpICkge1xuXG5cdFx0XHRcdGlmICggbm9kZVR5cGUgIT09IDEgKSB7XG5cdFx0XHRcdFx0bmV3Q29udGV4dCA9IGNvbnRleHQ7XG5cdFx0XHRcdFx0bmV3U2VsZWN0b3IgPSBzZWxlY3RvcjtcblxuXHRcdFx0XHQvLyBxU0EgbG9va3Mgb3V0c2lkZSBFbGVtZW50IGNvbnRleHQsIHdoaWNoIGlzIG5vdCB3aGF0IHdlIHdhbnRcblx0XHRcdFx0Ly8gVGhhbmtzIHRvIEFuZHJldyBEdXBvbnQgZm9yIHRoaXMgd29ya2Fyb3VuZCB0ZWNobmlxdWVcblx0XHRcdFx0Ly8gU3VwcG9ydDogSUUgPD04XG5cdFx0XHRcdC8vIEV4Y2x1ZGUgb2JqZWN0IGVsZW1lbnRzXG5cdFx0XHRcdH0gZWxzZSBpZiAoIGNvbnRleHQubm9kZU5hbWUudG9Mb3dlckNhc2UoKSAhPT0gXCJvYmplY3RcIiApIHtcblxuXHRcdFx0XHRcdC8vIENhcHR1cmUgdGhlIGNvbnRleHQgSUQsIHNldHRpbmcgaXQgZmlyc3QgaWYgbmVjZXNzYXJ5XG5cdFx0XHRcdFx0aWYgKCAobmlkID0gY29udGV4dC5nZXRBdHRyaWJ1dGUoIFwiaWRcIiApKSApIHtcblx0XHRcdFx0XHRcdG5pZCA9IG5pZC5yZXBsYWNlKCByY3NzZXNjYXBlLCBmY3NzZXNjYXBlICk7XG5cdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdGNvbnRleHQuc2V0QXR0cmlidXRlKCBcImlkXCIsIChuaWQgPSBleHBhbmRvKSApO1xuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdC8vIFByZWZpeCBldmVyeSBzZWxlY3RvciBpbiB0aGUgbGlzdFxuXHRcdFx0XHRcdGdyb3VwcyA9IHRva2VuaXplKCBzZWxlY3RvciApO1xuXHRcdFx0XHRcdGkgPSBncm91cHMubGVuZ3RoO1xuXHRcdFx0XHRcdHdoaWxlICggaS0tICkge1xuXHRcdFx0XHRcdFx0Z3JvdXBzW2ldID0gXCIjXCIgKyBuaWQgKyBcIiBcIiArIHRvU2VsZWN0b3IoIGdyb3Vwc1tpXSApO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRuZXdTZWxlY3RvciA9IGdyb3Vwcy5qb2luKCBcIixcIiApO1xuXG5cdFx0XHRcdFx0Ly8gRXhwYW5kIGNvbnRleHQgZm9yIHNpYmxpbmcgc2VsZWN0b3JzXG5cdFx0XHRcdFx0bmV3Q29udGV4dCA9IHJzaWJsaW5nLnRlc3QoIHNlbGVjdG9yICkgJiYgdGVzdENvbnRleHQoIGNvbnRleHQucGFyZW50Tm9kZSApIHx8XG5cdFx0XHRcdFx0XHRjb250ZXh0O1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0aWYgKCBuZXdTZWxlY3RvciApIHtcblx0XHRcdFx0XHR0cnkge1xuXHRcdFx0XHRcdFx0cHVzaC5hcHBseSggcmVzdWx0cyxcblx0XHRcdFx0XHRcdFx0bmV3Q29udGV4dC5xdWVyeVNlbGVjdG9yQWxsKCBuZXdTZWxlY3RvciApXG5cdFx0XHRcdFx0XHQpO1xuXHRcdFx0XHRcdFx0cmV0dXJuIHJlc3VsdHM7XG5cdFx0XHRcdFx0fSBjYXRjaCAoIHFzYUVycm9yICkge1xuXHRcdFx0XHRcdH0gZmluYWxseSB7XG5cdFx0XHRcdFx0XHRpZiAoIG5pZCA9PT0gZXhwYW5kbyApIHtcblx0XHRcdFx0XHRcdFx0Y29udGV4dC5yZW1vdmVBdHRyaWJ1dGUoIFwiaWRcIiApO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdC8vIEFsbCBvdGhlcnNcblx0cmV0dXJuIHNlbGVjdCggc2VsZWN0b3IucmVwbGFjZSggcnRyaW0sIFwiJDFcIiApLCBjb250ZXh0LCByZXN1bHRzLCBzZWVkICk7XG59XG5cbi8qKlxuICogQ3JlYXRlIGtleS12YWx1ZSBjYWNoZXMgb2YgbGltaXRlZCBzaXplXG4gKiBAcmV0dXJucyB7ZnVuY3Rpb24oc3RyaW5nLCBvYmplY3QpfSBSZXR1cm5zIHRoZSBPYmplY3QgZGF0YSBhZnRlciBzdG9yaW5nIGl0IG9uIGl0c2VsZiB3aXRoXG4gKlx0cHJvcGVydHkgbmFtZSB0aGUgKHNwYWNlLXN1ZmZpeGVkKSBzdHJpbmcgYW5kIChpZiB0aGUgY2FjaGUgaXMgbGFyZ2VyIHRoYW4gRXhwci5jYWNoZUxlbmd0aClcbiAqXHRkZWxldGluZyB0aGUgb2xkZXN0IGVudHJ5XG4gKi9cbmZ1bmN0aW9uIGNyZWF0ZUNhY2hlKCkge1xuXHR2YXIga2V5cyA9IFtdO1xuXG5cdGZ1bmN0aW9uIGNhY2hlKCBrZXksIHZhbHVlICkge1xuXHRcdC8vIFVzZSAoa2V5ICsgXCIgXCIpIHRvIGF2b2lkIGNvbGxpc2lvbiB3aXRoIG5hdGl2ZSBwcm90b3R5cGUgcHJvcGVydGllcyAoc2VlIElzc3VlICMxNTcpXG5cdFx0aWYgKCBrZXlzLnB1c2goIGtleSArIFwiIFwiICkgPiBFeHByLmNhY2hlTGVuZ3RoICkge1xuXHRcdFx0Ly8gT25seSBrZWVwIHRoZSBtb3N0IHJlY2VudCBlbnRyaWVzXG5cdFx0XHRkZWxldGUgY2FjaGVbIGtleXMuc2hpZnQoKSBdO1xuXHRcdH1cblx0XHRyZXR1cm4gKGNhY2hlWyBrZXkgKyBcIiBcIiBdID0gdmFsdWUpO1xuXHR9XG5cdHJldHVybiBjYWNoZTtcbn1cblxuLyoqXG4gKiBNYXJrIGEgZnVuY3Rpb24gZm9yIHNwZWNpYWwgdXNlIGJ5IFNpenpsZVxuICogQHBhcmFtIHtGdW5jdGlvbn0gZm4gVGhlIGZ1bmN0aW9uIHRvIG1hcmtcbiAqL1xuZnVuY3Rpb24gbWFya0Z1bmN0aW9uKCBmbiApIHtcblx0Zm5bIGV4cGFuZG8gXSA9IHRydWU7XG5cdHJldHVybiBmbjtcbn1cblxuLyoqXG4gKiBTdXBwb3J0IHRlc3RpbmcgdXNpbmcgYW4gZWxlbWVudFxuICogQHBhcmFtIHtGdW5jdGlvbn0gZm4gUGFzc2VkIHRoZSBjcmVhdGVkIGVsZW1lbnQgYW5kIHJldHVybnMgYSBib29sZWFuIHJlc3VsdFxuICovXG5mdW5jdGlvbiBhc3NlcnQoIGZuICkge1xuXHR2YXIgZWwgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZmllbGRzZXRcIik7XG5cblx0dHJ5IHtcblx0XHRyZXR1cm4gISFmbiggZWwgKTtcblx0fSBjYXRjaCAoZSkge1xuXHRcdHJldHVybiBmYWxzZTtcblx0fSBmaW5hbGx5IHtcblx0XHQvLyBSZW1vdmUgZnJvbSBpdHMgcGFyZW50IGJ5IGRlZmF1bHRcblx0XHRpZiAoIGVsLnBhcmVudE5vZGUgKSB7XG5cdFx0XHRlbC5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKCBlbCApO1xuXHRcdH1cblx0XHQvLyByZWxlYXNlIG1lbW9yeSBpbiBJRVxuXHRcdGVsID0gbnVsbDtcblx0fVxufVxuXG4vKipcbiAqIEFkZHMgdGhlIHNhbWUgaGFuZGxlciBmb3IgYWxsIG9mIHRoZSBzcGVjaWZpZWQgYXR0cnNcbiAqIEBwYXJhbSB7U3RyaW5nfSBhdHRycyBQaXBlLXNlcGFyYXRlZCBsaXN0IG9mIGF0dHJpYnV0ZXNcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGhhbmRsZXIgVGhlIG1ldGhvZCB0aGF0IHdpbGwgYmUgYXBwbGllZFxuICovXG5mdW5jdGlvbiBhZGRIYW5kbGUoIGF0dHJzLCBoYW5kbGVyICkge1xuXHR2YXIgYXJyID0gYXR0cnMuc3BsaXQoXCJ8XCIpLFxuXHRcdGkgPSBhcnIubGVuZ3RoO1xuXG5cdHdoaWxlICggaS0tICkge1xuXHRcdEV4cHIuYXR0ckhhbmRsZVsgYXJyW2ldIF0gPSBoYW5kbGVyO1xuXHR9XG59XG5cbi8qKlxuICogQ2hlY2tzIGRvY3VtZW50IG9yZGVyIG9mIHR3byBzaWJsaW5nc1xuICogQHBhcmFtIHtFbGVtZW50fSBhXG4gKiBAcGFyYW0ge0VsZW1lbnR9IGJcbiAqIEByZXR1cm5zIHtOdW1iZXJ9IFJldHVybnMgbGVzcyB0aGFuIDAgaWYgYSBwcmVjZWRlcyBiLCBncmVhdGVyIHRoYW4gMCBpZiBhIGZvbGxvd3MgYlxuICovXG5mdW5jdGlvbiBzaWJsaW5nQ2hlY2soIGEsIGIgKSB7XG5cdHZhciBjdXIgPSBiICYmIGEsXG5cdFx0ZGlmZiA9IGN1ciAmJiBhLm5vZGVUeXBlID09PSAxICYmIGIubm9kZVR5cGUgPT09IDEgJiZcblx0XHRcdGEuc291cmNlSW5kZXggLSBiLnNvdXJjZUluZGV4O1xuXG5cdC8vIFVzZSBJRSBzb3VyY2VJbmRleCBpZiBhdmFpbGFibGUgb24gYm90aCBub2Rlc1xuXHRpZiAoIGRpZmYgKSB7XG5cdFx0cmV0dXJuIGRpZmY7XG5cdH1cblxuXHQvLyBDaGVjayBpZiBiIGZvbGxvd3MgYVxuXHRpZiAoIGN1ciApIHtcblx0XHR3aGlsZSAoIChjdXIgPSBjdXIubmV4dFNpYmxpbmcpICkge1xuXHRcdFx0aWYgKCBjdXIgPT09IGIgKSB7XG5cdFx0XHRcdHJldHVybiAtMTtcblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHRyZXR1cm4gYSA/IDEgOiAtMTtcbn1cblxuLyoqXG4gKiBSZXR1cm5zIGEgZnVuY3Rpb24gdG8gdXNlIGluIHBzZXVkb3MgZm9yIGlucHV0IHR5cGVzXG4gKiBAcGFyYW0ge1N0cmluZ30gdHlwZVxuICovXG5mdW5jdGlvbiBjcmVhdGVJbnB1dFBzZXVkbyggdHlwZSApIHtcblx0cmV0dXJuIGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdHZhciBuYW1lID0gZWxlbS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpO1xuXHRcdHJldHVybiBuYW1lID09PSBcImlucHV0XCIgJiYgZWxlbS50eXBlID09PSB0eXBlO1xuXHR9O1xufVxuXG4vKipcbiAqIFJldHVybnMgYSBmdW5jdGlvbiB0byB1c2UgaW4gcHNldWRvcyBmb3IgYnV0dG9uc1xuICogQHBhcmFtIHtTdHJpbmd9IHR5cGVcbiAqL1xuZnVuY3Rpb24gY3JlYXRlQnV0dG9uUHNldWRvKCB0eXBlICkge1xuXHRyZXR1cm4gZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0dmFyIG5hbWUgPSBlbGVtLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCk7XG5cdFx0cmV0dXJuIChuYW1lID09PSBcImlucHV0XCIgfHwgbmFtZSA9PT0gXCJidXR0b25cIikgJiYgZWxlbS50eXBlID09PSB0eXBlO1xuXHR9O1xufVxuXG4vKipcbiAqIFJldHVybnMgYSBmdW5jdGlvbiB0byB1c2UgaW4gcHNldWRvcyBmb3IgOmVuYWJsZWQvOmRpc2FibGVkXG4gKiBAcGFyYW0ge0Jvb2xlYW59IGRpc2FibGVkIHRydWUgZm9yIDpkaXNhYmxlZDsgZmFsc2UgZm9yIDplbmFibGVkXG4gKi9cbmZ1bmN0aW9uIGNyZWF0ZURpc2FibGVkUHNldWRvKCBkaXNhYmxlZCApIHtcblxuXHQvLyBLbm93biA6ZGlzYWJsZWQgZmFsc2UgcG9zaXRpdmVzOiBmaWVsZHNldFtkaXNhYmxlZF0gPiBsZWdlbmQ6bnRoLW9mLXR5cGUobisyKSA6Y2FuLWRpc2FibGVcblx0cmV0dXJuIGZ1bmN0aW9uKCBlbGVtICkge1xuXG5cdFx0Ly8gT25seSBjZXJ0YWluIGVsZW1lbnRzIGNhbiBtYXRjaCA6ZW5hYmxlZCBvciA6ZGlzYWJsZWRcblx0XHQvLyBodHRwczovL2h0bWwuc3BlYy53aGF0d2cub3JnL211bHRpcGFnZS9zY3JpcHRpbmcuaHRtbCNzZWxlY3Rvci1lbmFibGVkXG5cdFx0Ly8gaHR0cHM6Ly9odG1sLnNwZWMud2hhdHdnLm9yZy9tdWx0aXBhZ2Uvc2NyaXB0aW5nLmh0bWwjc2VsZWN0b3ItZGlzYWJsZWRcblx0XHRpZiAoIFwiZm9ybVwiIGluIGVsZW0gKSB7XG5cblx0XHRcdC8vIENoZWNrIGZvciBpbmhlcml0ZWQgZGlzYWJsZWRuZXNzIG9uIHJlbGV2YW50IG5vbi1kaXNhYmxlZCBlbGVtZW50czpcblx0XHRcdC8vICogbGlzdGVkIGZvcm0tYXNzb2NpYXRlZCBlbGVtZW50cyBpbiBhIGRpc2FibGVkIGZpZWxkc2V0XG5cdFx0XHQvLyAgIGh0dHBzOi8vaHRtbC5zcGVjLndoYXR3Zy5vcmcvbXVsdGlwYWdlL2Zvcm1zLmh0bWwjY2F0ZWdvcnktbGlzdGVkXG5cdFx0XHQvLyAgIGh0dHBzOi8vaHRtbC5zcGVjLndoYXR3Zy5vcmcvbXVsdGlwYWdlL2Zvcm1zLmh0bWwjY29uY2VwdC1mZS1kaXNhYmxlZFxuXHRcdFx0Ly8gKiBvcHRpb24gZWxlbWVudHMgaW4gYSBkaXNhYmxlZCBvcHRncm91cFxuXHRcdFx0Ly8gICBodHRwczovL2h0bWwuc3BlYy53aGF0d2cub3JnL211bHRpcGFnZS9mb3Jtcy5odG1sI2NvbmNlcHQtb3B0aW9uLWRpc2FibGVkXG5cdFx0XHQvLyBBbGwgc3VjaCBlbGVtZW50cyBoYXZlIGEgXCJmb3JtXCIgcHJvcGVydHkuXG5cdFx0XHRpZiAoIGVsZW0ucGFyZW50Tm9kZSAmJiBlbGVtLmRpc2FibGVkID09PSBmYWxzZSApIHtcblxuXHRcdFx0XHQvLyBPcHRpb24gZWxlbWVudHMgZGVmZXIgdG8gYSBwYXJlbnQgb3B0Z3JvdXAgaWYgcHJlc2VudFxuXHRcdFx0XHRpZiAoIFwibGFiZWxcIiBpbiBlbGVtICkge1xuXHRcdFx0XHRcdGlmICggXCJsYWJlbFwiIGluIGVsZW0ucGFyZW50Tm9kZSApIHtcblx0XHRcdFx0XHRcdHJldHVybiBlbGVtLnBhcmVudE5vZGUuZGlzYWJsZWQgPT09IGRpc2FibGVkO1xuXHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRyZXR1cm4gZWxlbS5kaXNhYmxlZCA9PT0gZGlzYWJsZWQ7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gU3VwcG9ydDogSUUgNiAtIDExXG5cdFx0XHRcdC8vIFVzZSB0aGUgaXNEaXNhYmxlZCBzaG9ydGN1dCBwcm9wZXJ0eSB0byBjaGVjayBmb3IgZGlzYWJsZWQgZmllbGRzZXQgYW5jZXN0b3JzXG5cdFx0XHRcdHJldHVybiBlbGVtLmlzRGlzYWJsZWQgPT09IGRpc2FibGVkIHx8XG5cblx0XHRcdFx0XHQvLyBXaGVyZSB0aGVyZSBpcyBubyBpc0Rpc2FibGVkLCBjaGVjayBtYW51YWxseVxuXHRcdFx0XHRcdC8qIGpzaGludCAtVzAxOCAqL1xuXHRcdFx0XHRcdGVsZW0uaXNEaXNhYmxlZCAhPT0gIWRpc2FibGVkICYmXG5cdFx0XHRcdFx0XHRkaXNhYmxlZEFuY2VzdG9yKCBlbGVtICkgPT09IGRpc2FibGVkO1xuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gZWxlbS5kaXNhYmxlZCA9PT0gZGlzYWJsZWQ7XG5cblx0XHQvLyBUcnkgdG8gd2lubm93IG91dCBlbGVtZW50cyB0aGF0IGNhbid0IGJlIGRpc2FibGVkIGJlZm9yZSB0cnVzdGluZyB0aGUgZGlzYWJsZWQgcHJvcGVydHkuXG5cdFx0Ly8gU29tZSB2aWN0aW1zIGdldCBjYXVnaHQgaW4gb3VyIG5ldCAobGFiZWwsIGxlZ2VuZCwgbWVudSwgdHJhY2spLCBidXQgaXQgc2hvdWxkbid0XG5cdFx0Ly8gZXZlbiBleGlzdCBvbiB0aGVtLCBsZXQgYWxvbmUgaGF2ZSBhIGJvb2xlYW4gdmFsdWUuXG5cdFx0fSBlbHNlIGlmICggXCJsYWJlbFwiIGluIGVsZW0gKSB7XG5cdFx0XHRyZXR1cm4gZWxlbS5kaXNhYmxlZCA9PT0gZGlzYWJsZWQ7XG5cdFx0fVxuXG5cdFx0Ly8gUmVtYWluaW5nIGVsZW1lbnRzIGFyZSBuZWl0aGVyIDplbmFibGVkIG5vciA6ZGlzYWJsZWRcblx0XHRyZXR1cm4gZmFsc2U7XG5cdH07XG59XG5cbi8qKlxuICogUmV0dXJucyBhIGZ1bmN0aW9uIHRvIHVzZSBpbiBwc2V1ZG9zIGZvciBwb3NpdGlvbmFsc1xuICogQHBhcmFtIHtGdW5jdGlvbn0gZm5cbiAqL1xuZnVuY3Rpb24gY3JlYXRlUG9zaXRpb25hbFBzZXVkbyggZm4gKSB7XG5cdHJldHVybiBtYXJrRnVuY3Rpb24oZnVuY3Rpb24oIGFyZ3VtZW50ICkge1xuXHRcdGFyZ3VtZW50ID0gK2FyZ3VtZW50O1xuXHRcdHJldHVybiBtYXJrRnVuY3Rpb24oZnVuY3Rpb24oIHNlZWQsIG1hdGNoZXMgKSB7XG5cdFx0XHR2YXIgaixcblx0XHRcdFx0bWF0Y2hJbmRleGVzID0gZm4oIFtdLCBzZWVkLmxlbmd0aCwgYXJndW1lbnQgKSxcblx0XHRcdFx0aSA9IG1hdGNoSW5kZXhlcy5sZW5ndGg7XG5cblx0XHRcdC8vIE1hdGNoIGVsZW1lbnRzIGZvdW5kIGF0IHRoZSBzcGVjaWZpZWQgaW5kZXhlc1xuXHRcdFx0d2hpbGUgKCBpLS0gKSB7XG5cdFx0XHRcdGlmICggc2VlZFsgKGogPSBtYXRjaEluZGV4ZXNbaV0pIF0gKSB7XG5cdFx0XHRcdFx0c2VlZFtqXSA9ICEobWF0Y2hlc1tqXSA9IHNlZWRbal0pO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fSk7XG5cdH0pO1xufVxuXG4vKipcbiAqIENoZWNrcyBhIG5vZGUgZm9yIHZhbGlkaXR5IGFzIGEgU2l6emxlIGNvbnRleHRcbiAqIEBwYXJhbSB7RWxlbWVudHxPYmplY3Q9fSBjb250ZXh0XG4gKiBAcmV0dXJucyB7RWxlbWVudHxPYmplY3R8Qm9vbGVhbn0gVGhlIGlucHV0IG5vZGUgaWYgYWNjZXB0YWJsZSwgb3RoZXJ3aXNlIGEgZmFsc3kgdmFsdWVcbiAqL1xuZnVuY3Rpb24gdGVzdENvbnRleHQoIGNvbnRleHQgKSB7XG5cdHJldHVybiBjb250ZXh0ICYmIHR5cGVvZiBjb250ZXh0LmdldEVsZW1lbnRzQnlUYWdOYW1lICE9PSBcInVuZGVmaW5lZFwiICYmIGNvbnRleHQ7XG59XG5cbi8vIEV4cG9zZSBzdXBwb3J0IHZhcnMgZm9yIGNvbnZlbmllbmNlXG5zdXBwb3J0ID0gU2l6emxlLnN1cHBvcnQgPSB7fTtcblxuLyoqXG4gKiBEZXRlY3RzIFhNTCBub2Rlc1xuICogQHBhcmFtIHtFbGVtZW50fE9iamVjdH0gZWxlbSBBbiBlbGVtZW50IG9yIGEgZG9jdW1lbnRcbiAqIEByZXR1cm5zIHtCb29sZWFufSBUcnVlIGlmZiBlbGVtIGlzIGEgbm9uLUhUTUwgWE1MIG5vZGVcbiAqL1xuaXNYTUwgPSBTaXp6bGUuaXNYTUwgPSBmdW5jdGlvbiggZWxlbSApIHtcblx0Ly8gZG9jdW1lbnRFbGVtZW50IGlzIHZlcmlmaWVkIGZvciBjYXNlcyB3aGVyZSBpdCBkb2Vzbid0IHlldCBleGlzdFxuXHQvLyAoc3VjaCBhcyBsb2FkaW5nIGlmcmFtZXMgaW4gSUUgLSAjNDgzMylcblx0dmFyIGRvY3VtZW50RWxlbWVudCA9IGVsZW0gJiYgKGVsZW0ub3duZXJEb2N1bWVudCB8fCBlbGVtKS5kb2N1bWVudEVsZW1lbnQ7XG5cdHJldHVybiBkb2N1bWVudEVsZW1lbnQgPyBkb2N1bWVudEVsZW1lbnQubm9kZU5hbWUgIT09IFwiSFRNTFwiIDogZmFsc2U7XG59O1xuXG4vKipcbiAqIFNldHMgZG9jdW1lbnQtcmVsYXRlZCB2YXJpYWJsZXMgb25jZSBiYXNlZCBvbiB0aGUgY3VycmVudCBkb2N1bWVudFxuICogQHBhcmFtIHtFbGVtZW50fE9iamVjdH0gW2RvY10gQW4gZWxlbWVudCBvciBkb2N1bWVudCBvYmplY3QgdG8gdXNlIHRvIHNldCB0aGUgZG9jdW1lbnRcbiAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIGN1cnJlbnQgZG9jdW1lbnRcbiAqL1xuc2V0RG9jdW1lbnQgPSBTaXp6bGUuc2V0RG9jdW1lbnQgPSBmdW5jdGlvbiggbm9kZSApIHtcblx0dmFyIGhhc0NvbXBhcmUsIHN1YldpbmRvdyxcblx0XHRkb2MgPSBub2RlID8gbm9kZS5vd25lckRvY3VtZW50IHx8IG5vZGUgOiBwcmVmZXJyZWREb2M7XG5cblx0Ly8gUmV0dXJuIGVhcmx5IGlmIGRvYyBpcyBpbnZhbGlkIG9yIGFscmVhZHkgc2VsZWN0ZWRcblx0aWYgKCBkb2MgPT09IGRvY3VtZW50IHx8IGRvYy5ub2RlVHlwZSAhPT0gOSB8fCAhZG9jLmRvY3VtZW50RWxlbWVudCApIHtcblx0XHRyZXR1cm4gZG9jdW1lbnQ7XG5cdH1cblxuXHQvLyBVcGRhdGUgZ2xvYmFsIHZhcmlhYmxlc1xuXHRkb2N1bWVudCA9IGRvYztcblx0ZG9jRWxlbSA9IGRvY3VtZW50LmRvY3VtZW50RWxlbWVudDtcblx0ZG9jdW1lbnRJc0hUTUwgPSAhaXNYTUwoIGRvY3VtZW50ICk7XG5cblx0Ly8gU3VwcG9ydDogSUUgOS0xMSwgRWRnZVxuXHQvLyBBY2Nlc3NpbmcgaWZyYW1lIGRvY3VtZW50cyBhZnRlciB1bmxvYWQgdGhyb3dzIFwicGVybWlzc2lvbiBkZW5pZWRcIiBlcnJvcnMgKGpRdWVyeSAjMTM5MzYpXG5cdGlmICggcHJlZmVycmVkRG9jICE9PSBkb2N1bWVudCAmJlxuXHRcdChzdWJXaW5kb3cgPSBkb2N1bWVudC5kZWZhdWx0VmlldykgJiYgc3ViV2luZG93LnRvcCAhPT0gc3ViV2luZG93ICkge1xuXG5cdFx0Ly8gU3VwcG9ydDogSUUgMTEsIEVkZ2Vcblx0XHRpZiAoIHN1YldpbmRvdy5hZGRFdmVudExpc3RlbmVyICkge1xuXHRcdFx0c3ViV2luZG93LmFkZEV2ZW50TGlzdGVuZXIoIFwidW5sb2FkXCIsIHVubG9hZEhhbmRsZXIsIGZhbHNlICk7XG5cblx0XHQvLyBTdXBwb3J0OiBJRSA5IC0gMTAgb25seVxuXHRcdH0gZWxzZSBpZiAoIHN1YldpbmRvdy5hdHRhY2hFdmVudCApIHtcblx0XHRcdHN1YldpbmRvdy5hdHRhY2hFdmVudCggXCJvbnVubG9hZFwiLCB1bmxvYWRIYW5kbGVyICk7XG5cdFx0fVxuXHR9XG5cblx0LyogQXR0cmlidXRlc1xuXHQtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tICovXG5cblx0Ly8gU3VwcG9ydDogSUU8OFxuXHQvLyBWZXJpZnkgdGhhdCBnZXRBdHRyaWJ1dGUgcmVhbGx5IHJldHVybnMgYXR0cmlidXRlcyBhbmQgbm90IHByb3BlcnRpZXNcblx0Ly8gKGV4Y2VwdGluZyBJRTggYm9vbGVhbnMpXG5cdHN1cHBvcnQuYXR0cmlidXRlcyA9IGFzc2VydChmdW5jdGlvbiggZWwgKSB7XG5cdFx0ZWwuY2xhc3NOYW1lID0gXCJpXCI7XG5cdFx0cmV0dXJuICFlbC5nZXRBdHRyaWJ1dGUoXCJjbGFzc05hbWVcIik7XG5cdH0pO1xuXG5cdC8qIGdldEVsZW1lbnQocylCeSpcblx0LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSAqL1xuXG5cdC8vIENoZWNrIGlmIGdldEVsZW1lbnRzQnlUYWdOYW1lKFwiKlwiKSByZXR1cm5zIG9ubHkgZWxlbWVudHNcblx0c3VwcG9ydC5nZXRFbGVtZW50c0J5VGFnTmFtZSA9IGFzc2VydChmdW5jdGlvbiggZWwgKSB7XG5cdFx0ZWwuYXBwZW5kQ2hpbGQoIGRvY3VtZW50LmNyZWF0ZUNvbW1lbnQoXCJcIikgKTtcblx0XHRyZXR1cm4gIWVsLmdldEVsZW1lbnRzQnlUYWdOYW1lKFwiKlwiKS5sZW5ndGg7XG5cdH0pO1xuXG5cdC8vIFN1cHBvcnQ6IElFPDlcblx0c3VwcG9ydC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lID0gcm5hdGl2ZS50ZXN0KCBkb2N1bWVudC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lICk7XG5cblx0Ly8gU3VwcG9ydDogSUU8MTBcblx0Ly8gQ2hlY2sgaWYgZ2V0RWxlbWVudEJ5SWQgcmV0dXJucyBlbGVtZW50cyBieSBuYW1lXG5cdC8vIFRoZSBicm9rZW4gZ2V0RWxlbWVudEJ5SWQgbWV0aG9kcyBkb24ndCBwaWNrIHVwIHByb2dyYW1tYXRpY2FsbHktc2V0IG5hbWVzLFxuXHQvLyBzbyB1c2UgYSByb3VuZGFib3V0IGdldEVsZW1lbnRzQnlOYW1lIHRlc3Rcblx0c3VwcG9ydC5nZXRCeUlkID0gYXNzZXJ0KGZ1bmN0aW9uKCBlbCApIHtcblx0XHRkb2NFbGVtLmFwcGVuZENoaWxkKCBlbCApLmlkID0gZXhwYW5kbztcblx0XHRyZXR1cm4gIWRvY3VtZW50LmdldEVsZW1lbnRzQnlOYW1lIHx8ICFkb2N1bWVudC5nZXRFbGVtZW50c0J5TmFtZSggZXhwYW5kbyApLmxlbmd0aDtcblx0fSk7XG5cblx0Ly8gSUQgZmlsdGVyIGFuZCBmaW5kXG5cdGlmICggc3VwcG9ydC5nZXRCeUlkICkge1xuXHRcdEV4cHIuZmlsdGVyW1wiSURcIl0gPSBmdW5jdGlvbiggaWQgKSB7XG5cdFx0XHR2YXIgYXR0cklkID0gaWQucmVwbGFjZSggcnVuZXNjYXBlLCBmdW5lc2NhcGUgKTtcblx0XHRcdHJldHVybiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdFx0cmV0dXJuIGVsZW0uZ2V0QXR0cmlidXRlKFwiaWRcIikgPT09IGF0dHJJZDtcblx0XHRcdH07XG5cdFx0fTtcblx0XHRFeHByLmZpbmRbXCJJRFwiXSA9IGZ1bmN0aW9uKCBpZCwgY29udGV4dCApIHtcblx0XHRcdGlmICggdHlwZW9mIGNvbnRleHQuZ2V0RWxlbWVudEJ5SWQgIT09IFwidW5kZWZpbmVkXCIgJiYgZG9jdW1lbnRJc0hUTUwgKSB7XG5cdFx0XHRcdHZhciBlbGVtID0gY29udGV4dC5nZXRFbGVtZW50QnlJZCggaWQgKTtcblx0XHRcdFx0cmV0dXJuIGVsZW0gPyBbIGVsZW0gXSA6IFtdO1xuXHRcdFx0fVxuXHRcdH07XG5cdH0gZWxzZSB7XG5cdFx0RXhwci5maWx0ZXJbXCJJRFwiXSA9ICBmdW5jdGlvbiggaWQgKSB7XG5cdFx0XHR2YXIgYXR0cklkID0gaWQucmVwbGFjZSggcnVuZXNjYXBlLCBmdW5lc2NhcGUgKTtcblx0XHRcdHJldHVybiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdFx0dmFyIG5vZGUgPSB0eXBlb2YgZWxlbS5nZXRBdHRyaWJ1dGVOb2RlICE9PSBcInVuZGVmaW5lZFwiICYmXG5cdFx0XHRcdFx0ZWxlbS5nZXRBdHRyaWJ1dGVOb2RlKFwiaWRcIik7XG5cdFx0XHRcdHJldHVybiBub2RlICYmIG5vZGUudmFsdWUgPT09IGF0dHJJZDtcblx0XHRcdH07XG5cdFx0fTtcblxuXHRcdC8vIFN1cHBvcnQ6IElFIDYgLSA3IG9ubHlcblx0XHQvLyBnZXRFbGVtZW50QnlJZCBpcyBub3QgcmVsaWFibGUgYXMgYSBmaW5kIHNob3J0Y3V0XG5cdFx0RXhwci5maW5kW1wiSURcIl0gPSBmdW5jdGlvbiggaWQsIGNvbnRleHQgKSB7XG5cdFx0XHRpZiAoIHR5cGVvZiBjb250ZXh0LmdldEVsZW1lbnRCeUlkICE9PSBcInVuZGVmaW5lZFwiICYmIGRvY3VtZW50SXNIVE1MICkge1xuXHRcdFx0XHR2YXIgbm9kZSwgaSwgZWxlbXMsXG5cdFx0XHRcdFx0ZWxlbSA9IGNvbnRleHQuZ2V0RWxlbWVudEJ5SWQoIGlkICk7XG5cblx0XHRcdFx0aWYgKCBlbGVtICkge1xuXG5cdFx0XHRcdFx0Ly8gVmVyaWZ5IHRoZSBpZCBhdHRyaWJ1dGVcblx0XHRcdFx0XHRub2RlID0gZWxlbS5nZXRBdHRyaWJ1dGVOb2RlKFwiaWRcIik7XG5cdFx0XHRcdFx0aWYgKCBub2RlICYmIG5vZGUudmFsdWUgPT09IGlkICkge1xuXHRcdFx0XHRcdFx0cmV0dXJuIFsgZWxlbSBdO1xuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdC8vIEZhbGwgYmFjayBvbiBnZXRFbGVtZW50c0J5TmFtZVxuXHRcdFx0XHRcdGVsZW1zID0gY29udGV4dC5nZXRFbGVtZW50c0J5TmFtZSggaWQgKTtcblx0XHRcdFx0XHRpID0gMDtcblx0XHRcdFx0XHR3aGlsZSAoIChlbGVtID0gZWxlbXNbaSsrXSkgKSB7XG5cdFx0XHRcdFx0XHRub2RlID0gZWxlbS5nZXRBdHRyaWJ1dGVOb2RlKFwiaWRcIik7XG5cdFx0XHRcdFx0XHRpZiAoIG5vZGUgJiYgbm9kZS52YWx1ZSA9PT0gaWQgKSB7XG5cdFx0XHRcdFx0XHRcdHJldHVybiBbIGVsZW0gXTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRyZXR1cm4gW107XG5cdFx0XHR9XG5cdFx0fTtcblx0fVxuXG5cdC8vIFRhZ1xuXHRFeHByLmZpbmRbXCJUQUdcIl0gPSBzdXBwb3J0LmdldEVsZW1lbnRzQnlUYWdOYW1lID9cblx0XHRmdW5jdGlvbiggdGFnLCBjb250ZXh0ICkge1xuXHRcdFx0aWYgKCB0eXBlb2YgY29udGV4dC5nZXRFbGVtZW50c0J5VGFnTmFtZSAhPT0gXCJ1bmRlZmluZWRcIiApIHtcblx0XHRcdFx0cmV0dXJuIGNvbnRleHQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoIHRhZyApO1xuXG5cdFx0XHQvLyBEb2N1bWVudEZyYWdtZW50IG5vZGVzIGRvbid0IGhhdmUgZ0VCVE5cblx0XHRcdH0gZWxzZSBpZiAoIHN1cHBvcnQucXNhICkge1xuXHRcdFx0XHRyZXR1cm4gY29udGV4dC5xdWVyeVNlbGVjdG9yQWxsKCB0YWcgKTtcblx0XHRcdH1cblx0XHR9IDpcblxuXHRcdGZ1bmN0aW9uKCB0YWcsIGNvbnRleHQgKSB7XG5cdFx0XHR2YXIgZWxlbSxcblx0XHRcdFx0dG1wID0gW10sXG5cdFx0XHRcdGkgPSAwLFxuXHRcdFx0XHQvLyBCeSBoYXBweSBjb2luY2lkZW5jZSwgYSAoYnJva2VuKSBnRUJUTiBhcHBlYXJzIG9uIERvY3VtZW50RnJhZ21lbnQgbm9kZXMgdG9vXG5cdFx0XHRcdHJlc3VsdHMgPSBjb250ZXh0LmdldEVsZW1lbnRzQnlUYWdOYW1lKCB0YWcgKTtcblxuXHRcdFx0Ly8gRmlsdGVyIG91dCBwb3NzaWJsZSBjb21tZW50c1xuXHRcdFx0aWYgKCB0YWcgPT09IFwiKlwiICkge1xuXHRcdFx0XHR3aGlsZSAoIChlbGVtID0gcmVzdWx0c1tpKytdKSApIHtcblx0XHRcdFx0XHRpZiAoIGVsZW0ubm9kZVR5cGUgPT09IDEgKSB7XG5cdFx0XHRcdFx0XHR0bXAucHVzaCggZWxlbSApO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXG5cdFx0XHRcdHJldHVybiB0bXA7XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gcmVzdWx0cztcblx0XHR9O1xuXG5cdC8vIENsYXNzXG5cdEV4cHIuZmluZFtcIkNMQVNTXCJdID0gc3VwcG9ydC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lICYmIGZ1bmN0aW9uKCBjbGFzc05hbWUsIGNvbnRleHQgKSB7XG5cdFx0aWYgKCB0eXBlb2YgY29udGV4dC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lICE9PSBcInVuZGVmaW5lZFwiICYmIGRvY3VtZW50SXNIVE1MICkge1xuXHRcdFx0cmV0dXJuIGNvbnRleHQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSggY2xhc3NOYW1lICk7XG5cdFx0fVxuXHR9O1xuXG5cdC8qIFFTQS9tYXRjaGVzU2VsZWN0b3Jcblx0LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSAqL1xuXG5cdC8vIFFTQSBhbmQgbWF0Y2hlc1NlbGVjdG9yIHN1cHBvcnRcblxuXHQvLyBtYXRjaGVzU2VsZWN0b3IoOmFjdGl2ZSkgcmVwb3J0cyBmYWxzZSB3aGVuIHRydWUgKElFOS9PcGVyYSAxMS41KVxuXHRyYnVnZ3lNYXRjaGVzID0gW107XG5cblx0Ly8gcVNhKDpmb2N1cykgcmVwb3J0cyBmYWxzZSB3aGVuIHRydWUgKENocm9tZSAyMSlcblx0Ly8gV2UgYWxsb3cgdGhpcyBiZWNhdXNlIG9mIGEgYnVnIGluIElFOC85IHRoYXQgdGhyb3dzIGFuIGVycm9yXG5cdC8vIHdoZW5ldmVyIGBkb2N1bWVudC5hY3RpdmVFbGVtZW50YCBpcyBhY2Nlc3NlZCBvbiBhbiBpZnJhbWVcblx0Ly8gU28sIHdlIGFsbG93IDpmb2N1cyB0byBwYXNzIHRocm91Z2ggUVNBIGFsbCB0aGUgdGltZSB0byBhdm9pZCB0aGUgSUUgZXJyb3Jcblx0Ly8gU2VlIGh0dHBzOi8vYnVncy5qcXVlcnkuY29tL3RpY2tldC8xMzM3OFxuXHRyYnVnZ3lRU0EgPSBbXTtcblxuXHRpZiAoIChzdXBwb3J0LnFzYSA9IHJuYXRpdmUudGVzdCggZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCApKSApIHtcblx0XHQvLyBCdWlsZCBRU0EgcmVnZXhcblx0XHQvLyBSZWdleCBzdHJhdGVneSBhZG9wdGVkIGZyb20gRGllZ28gUGVyaW5pXG5cdFx0YXNzZXJ0KGZ1bmN0aW9uKCBlbCApIHtcblx0XHRcdC8vIFNlbGVjdCBpcyBzZXQgdG8gZW1wdHkgc3RyaW5nIG9uIHB1cnBvc2Vcblx0XHRcdC8vIFRoaXMgaXMgdG8gdGVzdCBJRSdzIHRyZWF0bWVudCBvZiBub3QgZXhwbGljaXRseVxuXHRcdFx0Ly8gc2V0dGluZyBhIGJvb2xlYW4gY29udGVudCBhdHRyaWJ1dGUsXG5cdFx0XHQvLyBzaW5jZSBpdHMgcHJlc2VuY2Ugc2hvdWxkIGJlIGVub3VnaFxuXHRcdFx0Ly8gaHR0cHM6Ly9idWdzLmpxdWVyeS5jb20vdGlja2V0LzEyMzU5XG5cdFx0XHRkb2NFbGVtLmFwcGVuZENoaWxkKCBlbCApLmlubmVySFRNTCA9IFwiPGEgaWQ9J1wiICsgZXhwYW5kbyArIFwiJz48L2E+XCIgK1xuXHRcdFx0XHRcIjxzZWxlY3QgaWQ9J1wiICsgZXhwYW5kbyArIFwiLVxcclxcXFwnIG1zYWxsb3djYXB0dXJlPScnPlwiICtcblx0XHRcdFx0XCI8b3B0aW9uIHNlbGVjdGVkPScnPjwvb3B0aW9uPjwvc2VsZWN0PlwiO1xuXG5cdFx0XHQvLyBTdXBwb3J0OiBJRTgsIE9wZXJhIDExLTEyLjE2XG5cdFx0XHQvLyBOb3RoaW5nIHNob3VsZCBiZSBzZWxlY3RlZCB3aGVuIGVtcHR5IHN0cmluZ3MgZm9sbG93IF49IG9yICQ9IG9yICo9XG5cdFx0XHQvLyBUaGUgdGVzdCBhdHRyaWJ1dGUgbXVzdCBiZSB1bmtub3duIGluIE9wZXJhIGJ1dCBcInNhZmVcIiBmb3IgV2luUlRcblx0XHRcdC8vIGh0dHBzOi8vbXNkbi5taWNyb3NvZnQuY29tL2VuLXVzL2xpYnJhcnkvaWUvaGg0NjUzODguYXNweCNhdHRyaWJ1dGVfc2VjdGlvblxuXHRcdFx0aWYgKCBlbC5xdWVyeVNlbGVjdG9yQWxsKFwiW21zYWxsb3djYXB0dXJlXj0nJ11cIikubGVuZ3RoICkge1xuXHRcdFx0XHRyYnVnZ3lRU0EucHVzaCggXCJbKl4kXT1cIiArIHdoaXRlc3BhY2UgKyBcIiooPzonJ3xcXFwiXFxcIilcIiApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBTdXBwb3J0OiBJRThcblx0XHRcdC8vIEJvb2xlYW4gYXR0cmlidXRlcyBhbmQgXCJ2YWx1ZVwiIGFyZSBub3QgdHJlYXRlZCBjb3JyZWN0bHlcblx0XHRcdGlmICggIWVsLnF1ZXJ5U2VsZWN0b3JBbGwoXCJbc2VsZWN0ZWRdXCIpLmxlbmd0aCApIHtcblx0XHRcdFx0cmJ1Z2d5UVNBLnB1c2goIFwiXFxcXFtcIiArIHdoaXRlc3BhY2UgKyBcIiooPzp2YWx1ZXxcIiArIGJvb2xlYW5zICsgXCIpXCIgKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gU3VwcG9ydDogQ2hyb21lPDI5LCBBbmRyb2lkPDQuNCwgU2FmYXJpPDcuMCssIGlPUzw3LjArLCBQaGFudG9tSlM8MS45LjgrXG5cdFx0XHRpZiAoICFlbC5xdWVyeVNlbGVjdG9yQWxsKCBcIltpZH49XCIgKyBleHBhbmRvICsgXCItXVwiICkubGVuZ3RoICkge1xuXHRcdFx0XHRyYnVnZ3lRU0EucHVzaChcIn49XCIpO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBXZWJraXQvT3BlcmEgLSA6Y2hlY2tlZCBzaG91bGQgcmV0dXJuIHNlbGVjdGVkIG9wdGlvbiBlbGVtZW50c1xuXHRcdFx0Ly8gaHR0cDovL3d3dy53My5vcmcvVFIvMjAxMS9SRUMtY3NzMy1zZWxlY3RvcnMtMjAxMTA5MjkvI2NoZWNrZWRcblx0XHRcdC8vIElFOCB0aHJvd3MgZXJyb3IgaGVyZSBhbmQgd2lsbCBub3Qgc2VlIGxhdGVyIHRlc3RzXG5cdFx0XHRpZiAoICFlbC5xdWVyeVNlbGVjdG9yQWxsKFwiOmNoZWNrZWRcIikubGVuZ3RoICkge1xuXHRcdFx0XHRyYnVnZ3lRU0EucHVzaChcIjpjaGVja2VkXCIpO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBTdXBwb3J0OiBTYWZhcmkgOCssIGlPUyA4K1xuXHRcdFx0Ly8gaHR0cHM6Ly9idWdzLndlYmtpdC5vcmcvc2hvd19idWcuY2dpP2lkPTEzNjg1MVxuXHRcdFx0Ly8gSW4tcGFnZSBgc2VsZWN0b3IjaWQgc2libGluZy1jb21iaW5hdG9yIHNlbGVjdG9yYCBmYWlsc1xuXHRcdFx0aWYgKCAhZWwucXVlcnlTZWxlY3RvckFsbCggXCJhI1wiICsgZXhwYW5kbyArIFwiKypcIiApLmxlbmd0aCApIHtcblx0XHRcdFx0cmJ1Z2d5UVNBLnB1c2goXCIuIy4rWyt+XVwiKTtcblx0XHRcdH1cblx0XHR9KTtcblxuXHRcdGFzc2VydChmdW5jdGlvbiggZWwgKSB7XG5cdFx0XHRlbC5pbm5lckhUTUwgPSBcIjxhIGhyZWY9JycgZGlzYWJsZWQ9J2Rpc2FibGVkJz48L2E+XCIgK1xuXHRcdFx0XHRcIjxzZWxlY3QgZGlzYWJsZWQ9J2Rpc2FibGVkJz48b3B0aW9uLz48L3NlbGVjdD5cIjtcblxuXHRcdFx0Ly8gU3VwcG9ydDogV2luZG93cyA4IE5hdGl2ZSBBcHBzXG5cdFx0XHQvLyBUaGUgdHlwZSBhbmQgbmFtZSBhdHRyaWJ1dGVzIGFyZSByZXN0cmljdGVkIGR1cmluZyAuaW5uZXJIVE1MIGFzc2lnbm1lbnRcblx0XHRcdHZhciBpbnB1dCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJpbnB1dFwiKTtcblx0XHRcdGlucHV0LnNldEF0dHJpYnV0ZSggXCJ0eXBlXCIsIFwiaGlkZGVuXCIgKTtcblx0XHRcdGVsLmFwcGVuZENoaWxkKCBpbnB1dCApLnNldEF0dHJpYnV0ZSggXCJuYW1lXCIsIFwiRFwiICk7XG5cblx0XHRcdC8vIFN1cHBvcnQ6IElFOFxuXHRcdFx0Ly8gRW5mb3JjZSBjYXNlLXNlbnNpdGl2aXR5IG9mIG5hbWUgYXR0cmlidXRlXG5cdFx0XHRpZiAoIGVsLnF1ZXJ5U2VsZWN0b3JBbGwoXCJbbmFtZT1kXVwiKS5sZW5ndGggKSB7XG5cdFx0XHRcdHJidWdneVFTQS5wdXNoKCBcIm5hbWVcIiArIHdoaXRlc3BhY2UgKyBcIipbKl4kfCF+XT89XCIgKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gRkYgMy41IC0gOmVuYWJsZWQvOmRpc2FibGVkIGFuZCBoaWRkZW4gZWxlbWVudHMgKGhpZGRlbiBlbGVtZW50cyBhcmUgc3RpbGwgZW5hYmxlZClcblx0XHRcdC8vIElFOCB0aHJvd3MgZXJyb3IgaGVyZSBhbmQgd2lsbCBub3Qgc2VlIGxhdGVyIHRlc3RzXG5cdFx0XHRpZiAoIGVsLnF1ZXJ5U2VsZWN0b3JBbGwoXCI6ZW5hYmxlZFwiKS5sZW5ndGggIT09IDIgKSB7XG5cdFx0XHRcdHJidWdneVFTQS5wdXNoKCBcIjplbmFibGVkXCIsIFwiOmRpc2FibGVkXCIgKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gU3VwcG9ydDogSUU5LTExK1xuXHRcdFx0Ly8gSUUncyA6ZGlzYWJsZWQgc2VsZWN0b3IgZG9lcyBub3QgcGljayB1cCB0aGUgY2hpbGRyZW4gb2YgZGlzYWJsZWQgZmllbGRzZXRzXG5cdFx0XHRkb2NFbGVtLmFwcGVuZENoaWxkKCBlbCApLmRpc2FibGVkID0gdHJ1ZTtcblx0XHRcdGlmICggZWwucXVlcnlTZWxlY3RvckFsbChcIjpkaXNhYmxlZFwiKS5sZW5ndGggIT09IDIgKSB7XG5cdFx0XHRcdHJidWdneVFTQS5wdXNoKCBcIjplbmFibGVkXCIsIFwiOmRpc2FibGVkXCIgKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gT3BlcmEgMTAtMTEgZG9lcyBub3QgdGhyb3cgb24gcG9zdC1jb21tYSBpbnZhbGlkIHBzZXVkb3Ncblx0XHRcdGVsLnF1ZXJ5U2VsZWN0b3JBbGwoXCIqLDp4XCIpO1xuXHRcdFx0cmJ1Z2d5UVNBLnB1c2goXCIsLio6XCIpO1xuXHRcdH0pO1xuXHR9XG5cblx0aWYgKCAoc3VwcG9ydC5tYXRjaGVzU2VsZWN0b3IgPSBybmF0aXZlLnRlc3QoIChtYXRjaGVzID0gZG9jRWxlbS5tYXRjaGVzIHx8XG5cdFx0ZG9jRWxlbS53ZWJraXRNYXRjaGVzU2VsZWN0b3IgfHxcblx0XHRkb2NFbGVtLm1vek1hdGNoZXNTZWxlY3RvciB8fFxuXHRcdGRvY0VsZW0ub01hdGNoZXNTZWxlY3RvciB8fFxuXHRcdGRvY0VsZW0ubXNNYXRjaGVzU2VsZWN0b3IpICkpICkge1xuXG5cdFx0YXNzZXJ0KGZ1bmN0aW9uKCBlbCApIHtcblx0XHRcdC8vIENoZWNrIHRvIHNlZSBpZiBpdCdzIHBvc3NpYmxlIHRvIGRvIG1hdGNoZXNTZWxlY3RvclxuXHRcdFx0Ly8gb24gYSBkaXNjb25uZWN0ZWQgbm9kZSAoSUUgOSlcblx0XHRcdHN1cHBvcnQuZGlzY29ubmVjdGVkTWF0Y2ggPSBtYXRjaGVzLmNhbGwoIGVsLCBcIipcIiApO1xuXG5cdFx0XHQvLyBUaGlzIHNob3VsZCBmYWlsIHdpdGggYW4gZXhjZXB0aW9uXG5cdFx0XHQvLyBHZWNrbyBkb2VzIG5vdCBlcnJvciwgcmV0dXJucyBmYWxzZSBpbnN0ZWFkXG5cdFx0XHRtYXRjaGVzLmNhbGwoIGVsLCBcIltzIT0nJ106eFwiICk7XG5cdFx0XHRyYnVnZ3lNYXRjaGVzLnB1c2goIFwiIT1cIiwgcHNldWRvcyApO1xuXHRcdH0pO1xuXHR9XG5cblx0cmJ1Z2d5UVNBID0gcmJ1Z2d5UVNBLmxlbmd0aCAmJiBuZXcgUmVnRXhwKCByYnVnZ3lRU0Euam9pbihcInxcIikgKTtcblx0cmJ1Z2d5TWF0Y2hlcyA9IHJidWdneU1hdGNoZXMubGVuZ3RoICYmIG5ldyBSZWdFeHAoIHJidWdneU1hdGNoZXMuam9pbihcInxcIikgKTtcblxuXHQvKiBDb250YWluc1xuXHQtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tICovXG5cdGhhc0NvbXBhcmUgPSBybmF0aXZlLnRlc3QoIGRvY0VsZW0uY29tcGFyZURvY3VtZW50UG9zaXRpb24gKTtcblxuXHQvLyBFbGVtZW50IGNvbnRhaW5zIGFub3RoZXJcblx0Ly8gUHVycG9zZWZ1bGx5IHNlbGYtZXhjbHVzaXZlXG5cdC8vIEFzIGluLCBhbiBlbGVtZW50IGRvZXMgbm90IGNvbnRhaW4gaXRzZWxmXG5cdGNvbnRhaW5zID0gaGFzQ29tcGFyZSB8fCBybmF0aXZlLnRlc3QoIGRvY0VsZW0uY29udGFpbnMgKSA/XG5cdFx0ZnVuY3Rpb24oIGEsIGIgKSB7XG5cdFx0XHR2YXIgYWRvd24gPSBhLm5vZGVUeXBlID09PSA5ID8gYS5kb2N1bWVudEVsZW1lbnQgOiBhLFxuXHRcdFx0XHRidXAgPSBiICYmIGIucGFyZW50Tm9kZTtcblx0XHRcdHJldHVybiBhID09PSBidXAgfHwgISEoIGJ1cCAmJiBidXAubm9kZVR5cGUgPT09IDEgJiYgKFxuXHRcdFx0XHRhZG93bi5jb250YWlucyA/XG5cdFx0XHRcdFx0YWRvd24uY29udGFpbnMoIGJ1cCApIDpcblx0XHRcdFx0XHRhLmNvbXBhcmVEb2N1bWVudFBvc2l0aW9uICYmIGEuY29tcGFyZURvY3VtZW50UG9zaXRpb24oIGJ1cCApICYgMTZcblx0XHRcdCkpO1xuXHRcdH0gOlxuXHRcdGZ1bmN0aW9uKCBhLCBiICkge1xuXHRcdFx0aWYgKCBiICkge1xuXHRcdFx0XHR3aGlsZSAoIChiID0gYi5wYXJlbnROb2RlKSApIHtcblx0XHRcdFx0XHRpZiAoIGIgPT09IGEgKSB7XG5cdFx0XHRcdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHRcdHJldHVybiBmYWxzZTtcblx0XHR9O1xuXG5cdC8qIFNvcnRpbmdcblx0LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSAqL1xuXG5cdC8vIERvY3VtZW50IG9yZGVyIHNvcnRpbmdcblx0c29ydE9yZGVyID0gaGFzQ29tcGFyZSA/XG5cdGZ1bmN0aW9uKCBhLCBiICkge1xuXG5cdFx0Ly8gRmxhZyBmb3IgZHVwbGljYXRlIHJlbW92YWxcblx0XHRpZiAoIGEgPT09IGIgKSB7XG5cdFx0XHRoYXNEdXBsaWNhdGUgPSB0cnVlO1xuXHRcdFx0cmV0dXJuIDA7XG5cdFx0fVxuXG5cdFx0Ly8gU29ydCBvbiBtZXRob2QgZXhpc3RlbmNlIGlmIG9ubHkgb25lIGlucHV0IGhhcyBjb21wYXJlRG9jdW1lbnRQb3NpdGlvblxuXHRcdHZhciBjb21wYXJlID0gIWEuY29tcGFyZURvY3VtZW50UG9zaXRpb24gLSAhYi5jb21wYXJlRG9jdW1lbnRQb3NpdGlvbjtcblx0XHRpZiAoIGNvbXBhcmUgKSB7XG5cdFx0XHRyZXR1cm4gY29tcGFyZTtcblx0XHR9XG5cblx0XHQvLyBDYWxjdWxhdGUgcG9zaXRpb24gaWYgYm90aCBpbnB1dHMgYmVsb25nIHRvIHRoZSBzYW1lIGRvY3VtZW50XG5cdFx0Y29tcGFyZSA9ICggYS5vd25lckRvY3VtZW50IHx8IGEgKSA9PT0gKCBiLm93bmVyRG9jdW1lbnQgfHwgYiApID9cblx0XHRcdGEuY29tcGFyZURvY3VtZW50UG9zaXRpb24oIGIgKSA6XG5cblx0XHRcdC8vIE90aGVyd2lzZSB3ZSBrbm93IHRoZXkgYXJlIGRpc2Nvbm5lY3RlZFxuXHRcdFx0MTtcblxuXHRcdC8vIERpc2Nvbm5lY3RlZCBub2Rlc1xuXHRcdGlmICggY29tcGFyZSAmIDEgfHxcblx0XHRcdCghc3VwcG9ydC5zb3J0RGV0YWNoZWQgJiYgYi5jb21wYXJlRG9jdW1lbnRQb3NpdGlvbiggYSApID09PSBjb21wYXJlKSApIHtcblxuXHRcdFx0Ly8gQ2hvb3NlIHRoZSBmaXJzdCBlbGVtZW50IHRoYXQgaXMgcmVsYXRlZCB0byBvdXIgcHJlZmVycmVkIGRvY3VtZW50XG5cdFx0XHRpZiAoIGEgPT09IGRvY3VtZW50IHx8IGEub3duZXJEb2N1bWVudCA9PT0gcHJlZmVycmVkRG9jICYmIGNvbnRhaW5zKHByZWZlcnJlZERvYywgYSkgKSB7XG5cdFx0XHRcdHJldHVybiAtMTtcblx0XHRcdH1cblx0XHRcdGlmICggYiA9PT0gZG9jdW1lbnQgfHwgYi5vd25lckRvY3VtZW50ID09PSBwcmVmZXJyZWREb2MgJiYgY29udGFpbnMocHJlZmVycmVkRG9jLCBiKSApIHtcblx0XHRcdFx0cmV0dXJuIDE7XG5cdFx0XHR9XG5cblx0XHRcdC8vIE1haW50YWluIG9yaWdpbmFsIG9yZGVyXG5cdFx0XHRyZXR1cm4gc29ydElucHV0ID9cblx0XHRcdFx0KCBpbmRleE9mKCBzb3J0SW5wdXQsIGEgKSAtIGluZGV4T2YoIHNvcnRJbnB1dCwgYiApICkgOlxuXHRcdFx0XHQwO1xuXHRcdH1cblxuXHRcdHJldHVybiBjb21wYXJlICYgNCA/IC0xIDogMTtcblx0fSA6XG5cdGZ1bmN0aW9uKCBhLCBiICkge1xuXHRcdC8vIEV4aXQgZWFybHkgaWYgdGhlIG5vZGVzIGFyZSBpZGVudGljYWxcblx0XHRpZiAoIGEgPT09IGIgKSB7XG5cdFx0XHRoYXNEdXBsaWNhdGUgPSB0cnVlO1xuXHRcdFx0cmV0dXJuIDA7XG5cdFx0fVxuXG5cdFx0dmFyIGN1cixcblx0XHRcdGkgPSAwLFxuXHRcdFx0YXVwID0gYS5wYXJlbnROb2RlLFxuXHRcdFx0YnVwID0gYi5wYXJlbnROb2RlLFxuXHRcdFx0YXAgPSBbIGEgXSxcblx0XHRcdGJwID0gWyBiIF07XG5cblx0XHQvLyBQYXJlbnRsZXNzIG5vZGVzIGFyZSBlaXRoZXIgZG9jdW1lbnRzIG9yIGRpc2Nvbm5lY3RlZFxuXHRcdGlmICggIWF1cCB8fCAhYnVwICkge1xuXHRcdFx0cmV0dXJuIGEgPT09IGRvY3VtZW50ID8gLTEgOlxuXHRcdFx0XHRiID09PSBkb2N1bWVudCA/IDEgOlxuXHRcdFx0XHRhdXAgPyAtMSA6XG5cdFx0XHRcdGJ1cCA/IDEgOlxuXHRcdFx0XHRzb3J0SW5wdXQgP1xuXHRcdFx0XHQoIGluZGV4T2YoIHNvcnRJbnB1dCwgYSApIC0gaW5kZXhPZiggc29ydElucHV0LCBiICkgKSA6XG5cdFx0XHRcdDA7XG5cblx0XHQvLyBJZiB0aGUgbm9kZXMgYXJlIHNpYmxpbmdzLCB3ZSBjYW4gZG8gYSBxdWljayBjaGVja1xuXHRcdH0gZWxzZSBpZiAoIGF1cCA9PT0gYnVwICkge1xuXHRcdFx0cmV0dXJuIHNpYmxpbmdDaGVjayggYSwgYiApO1xuXHRcdH1cblxuXHRcdC8vIE90aGVyd2lzZSB3ZSBuZWVkIGZ1bGwgbGlzdHMgb2YgdGhlaXIgYW5jZXN0b3JzIGZvciBjb21wYXJpc29uXG5cdFx0Y3VyID0gYTtcblx0XHR3aGlsZSAoIChjdXIgPSBjdXIucGFyZW50Tm9kZSkgKSB7XG5cdFx0XHRhcC51bnNoaWZ0KCBjdXIgKTtcblx0XHR9XG5cdFx0Y3VyID0gYjtcblx0XHR3aGlsZSAoIChjdXIgPSBjdXIucGFyZW50Tm9kZSkgKSB7XG5cdFx0XHRicC51bnNoaWZ0KCBjdXIgKTtcblx0XHR9XG5cblx0XHQvLyBXYWxrIGRvd24gdGhlIHRyZWUgbG9va2luZyBmb3IgYSBkaXNjcmVwYW5jeVxuXHRcdHdoaWxlICggYXBbaV0gPT09IGJwW2ldICkge1xuXHRcdFx0aSsrO1xuXHRcdH1cblxuXHRcdHJldHVybiBpID9cblx0XHRcdC8vIERvIGEgc2libGluZyBjaGVjayBpZiB0aGUgbm9kZXMgaGF2ZSBhIGNvbW1vbiBhbmNlc3RvclxuXHRcdFx0c2libGluZ0NoZWNrKCBhcFtpXSwgYnBbaV0gKSA6XG5cblx0XHRcdC8vIE90aGVyd2lzZSBub2RlcyBpbiBvdXIgZG9jdW1lbnQgc29ydCBmaXJzdFxuXHRcdFx0YXBbaV0gPT09IHByZWZlcnJlZERvYyA/IC0xIDpcblx0XHRcdGJwW2ldID09PSBwcmVmZXJyZWREb2MgPyAxIDpcblx0XHRcdDA7XG5cdH07XG5cblx0cmV0dXJuIGRvY3VtZW50O1xufTtcblxuU2l6emxlLm1hdGNoZXMgPSBmdW5jdGlvbiggZXhwciwgZWxlbWVudHMgKSB7XG5cdHJldHVybiBTaXp6bGUoIGV4cHIsIG51bGwsIG51bGwsIGVsZW1lbnRzICk7XG59O1xuXG5TaXp6bGUubWF0Y2hlc1NlbGVjdG9yID0gZnVuY3Rpb24oIGVsZW0sIGV4cHIgKSB7XG5cdC8vIFNldCBkb2N1bWVudCB2YXJzIGlmIG5lZWRlZFxuXHRpZiAoICggZWxlbS5vd25lckRvY3VtZW50IHx8IGVsZW0gKSAhPT0gZG9jdW1lbnQgKSB7XG5cdFx0c2V0RG9jdW1lbnQoIGVsZW0gKTtcblx0fVxuXG5cdC8vIE1ha2Ugc3VyZSB0aGF0IGF0dHJpYnV0ZSBzZWxlY3RvcnMgYXJlIHF1b3RlZFxuXHRleHByID0gZXhwci5yZXBsYWNlKCByYXR0cmlidXRlUXVvdGVzLCBcIj0nJDEnXVwiICk7XG5cblx0aWYgKCBzdXBwb3J0Lm1hdGNoZXNTZWxlY3RvciAmJiBkb2N1bWVudElzSFRNTCAmJlxuXHRcdCFjb21waWxlckNhY2hlWyBleHByICsgXCIgXCIgXSAmJlxuXHRcdCggIXJidWdneU1hdGNoZXMgfHwgIXJidWdneU1hdGNoZXMudGVzdCggZXhwciApICkgJiZcblx0XHQoICFyYnVnZ3lRU0EgICAgIHx8ICFyYnVnZ3lRU0EudGVzdCggZXhwciApICkgKSB7XG5cblx0XHR0cnkge1xuXHRcdFx0dmFyIHJldCA9IG1hdGNoZXMuY2FsbCggZWxlbSwgZXhwciApO1xuXG5cdFx0XHQvLyBJRSA5J3MgbWF0Y2hlc1NlbGVjdG9yIHJldHVybnMgZmFsc2Ugb24gZGlzY29ubmVjdGVkIG5vZGVzXG5cdFx0XHRpZiAoIHJldCB8fCBzdXBwb3J0LmRpc2Nvbm5lY3RlZE1hdGNoIHx8XG5cdFx0XHRcdFx0Ly8gQXMgd2VsbCwgZGlzY29ubmVjdGVkIG5vZGVzIGFyZSBzYWlkIHRvIGJlIGluIGEgZG9jdW1lbnRcblx0XHRcdFx0XHQvLyBmcmFnbWVudCBpbiBJRSA5XG5cdFx0XHRcdFx0ZWxlbS5kb2N1bWVudCAmJiBlbGVtLmRvY3VtZW50Lm5vZGVUeXBlICE9PSAxMSApIHtcblx0XHRcdFx0cmV0dXJuIHJldDtcblx0XHRcdH1cblx0XHR9IGNhdGNoIChlKSB7fVxuXHR9XG5cblx0cmV0dXJuIFNpenpsZSggZXhwciwgZG9jdW1lbnQsIG51bGwsIFsgZWxlbSBdICkubGVuZ3RoID4gMDtcbn07XG5cblNpenpsZS5jb250YWlucyA9IGZ1bmN0aW9uKCBjb250ZXh0LCBlbGVtICkge1xuXHQvLyBTZXQgZG9jdW1lbnQgdmFycyBpZiBuZWVkZWRcblx0aWYgKCAoIGNvbnRleHQub3duZXJEb2N1bWVudCB8fCBjb250ZXh0ICkgIT09IGRvY3VtZW50ICkge1xuXHRcdHNldERvY3VtZW50KCBjb250ZXh0ICk7XG5cdH1cblx0cmV0dXJuIGNvbnRhaW5zKCBjb250ZXh0LCBlbGVtICk7XG59O1xuXG5TaXp6bGUuYXR0ciA9IGZ1bmN0aW9uKCBlbGVtLCBuYW1lICkge1xuXHQvLyBTZXQgZG9jdW1lbnQgdmFycyBpZiBuZWVkZWRcblx0aWYgKCAoIGVsZW0ub3duZXJEb2N1bWVudCB8fCBlbGVtICkgIT09IGRvY3VtZW50ICkge1xuXHRcdHNldERvY3VtZW50KCBlbGVtICk7XG5cdH1cblxuXHR2YXIgZm4gPSBFeHByLmF0dHJIYW5kbGVbIG5hbWUudG9Mb3dlckNhc2UoKSBdLFxuXHRcdC8vIERvbid0IGdldCBmb29sZWQgYnkgT2JqZWN0LnByb3RvdHlwZSBwcm9wZXJ0aWVzIChqUXVlcnkgIzEzODA3KVxuXHRcdHZhbCA9IGZuICYmIGhhc093bi5jYWxsKCBFeHByLmF0dHJIYW5kbGUsIG5hbWUudG9Mb3dlckNhc2UoKSApID9cblx0XHRcdGZuKCBlbGVtLCBuYW1lLCAhZG9jdW1lbnRJc0hUTUwgKSA6XG5cdFx0XHR1bmRlZmluZWQ7XG5cblx0cmV0dXJuIHZhbCAhPT0gdW5kZWZpbmVkID9cblx0XHR2YWwgOlxuXHRcdHN1cHBvcnQuYXR0cmlidXRlcyB8fCAhZG9jdW1lbnRJc0hUTUwgP1xuXHRcdFx0ZWxlbS5nZXRBdHRyaWJ1dGUoIG5hbWUgKSA6XG5cdFx0XHQodmFsID0gZWxlbS5nZXRBdHRyaWJ1dGVOb2RlKG5hbWUpKSAmJiB2YWwuc3BlY2lmaWVkID9cblx0XHRcdFx0dmFsLnZhbHVlIDpcblx0XHRcdFx0bnVsbDtcbn07XG5cblNpenpsZS5lc2NhcGUgPSBmdW5jdGlvbiggc2VsICkge1xuXHRyZXR1cm4gKHNlbCArIFwiXCIpLnJlcGxhY2UoIHJjc3Nlc2NhcGUsIGZjc3Nlc2NhcGUgKTtcbn07XG5cblNpenpsZS5lcnJvciA9IGZ1bmN0aW9uKCBtc2cgKSB7XG5cdHRocm93IG5ldyBFcnJvciggXCJTeW50YXggZXJyb3IsIHVucmVjb2duaXplZCBleHByZXNzaW9uOiBcIiArIG1zZyApO1xufTtcblxuLyoqXG4gKiBEb2N1bWVudCBzb3J0aW5nIGFuZCByZW1vdmluZyBkdXBsaWNhdGVzXG4gKiBAcGFyYW0ge0FycmF5TGlrZX0gcmVzdWx0c1xuICovXG5TaXp6bGUudW5pcXVlU29ydCA9IGZ1bmN0aW9uKCByZXN1bHRzICkge1xuXHR2YXIgZWxlbSxcblx0XHRkdXBsaWNhdGVzID0gW10sXG5cdFx0aiA9IDAsXG5cdFx0aSA9IDA7XG5cblx0Ly8gVW5sZXNzIHdlICprbm93KiB3ZSBjYW4gZGV0ZWN0IGR1cGxpY2F0ZXMsIGFzc3VtZSB0aGVpciBwcmVzZW5jZVxuXHRoYXNEdXBsaWNhdGUgPSAhc3VwcG9ydC5kZXRlY3REdXBsaWNhdGVzO1xuXHRzb3J0SW5wdXQgPSAhc3VwcG9ydC5zb3J0U3RhYmxlICYmIHJlc3VsdHMuc2xpY2UoIDAgKTtcblx0cmVzdWx0cy5zb3J0KCBzb3J0T3JkZXIgKTtcblxuXHRpZiAoIGhhc0R1cGxpY2F0ZSApIHtcblx0XHR3aGlsZSAoIChlbGVtID0gcmVzdWx0c1tpKytdKSApIHtcblx0XHRcdGlmICggZWxlbSA9PT0gcmVzdWx0c1sgaSBdICkge1xuXHRcdFx0XHRqID0gZHVwbGljYXRlcy5wdXNoKCBpICk7XG5cdFx0XHR9XG5cdFx0fVxuXHRcdHdoaWxlICggai0tICkge1xuXHRcdFx0cmVzdWx0cy5zcGxpY2UoIGR1cGxpY2F0ZXNbIGogXSwgMSApO1xuXHRcdH1cblx0fVxuXG5cdC8vIENsZWFyIGlucHV0IGFmdGVyIHNvcnRpbmcgdG8gcmVsZWFzZSBvYmplY3RzXG5cdC8vIFNlZSBodHRwczovL2dpdGh1Yi5jb20vanF1ZXJ5L3NpenpsZS9wdWxsLzIyNVxuXHRzb3J0SW5wdXQgPSBudWxsO1xuXG5cdHJldHVybiByZXN1bHRzO1xufTtcblxuLyoqXG4gKiBVdGlsaXR5IGZ1bmN0aW9uIGZvciByZXRyaWV2aW5nIHRoZSB0ZXh0IHZhbHVlIG9mIGFuIGFycmF5IG9mIERPTSBub2Rlc1xuICogQHBhcmFtIHtBcnJheXxFbGVtZW50fSBlbGVtXG4gKi9cbmdldFRleHQgPSBTaXp6bGUuZ2V0VGV4dCA9IGZ1bmN0aW9uKCBlbGVtICkge1xuXHR2YXIgbm9kZSxcblx0XHRyZXQgPSBcIlwiLFxuXHRcdGkgPSAwLFxuXHRcdG5vZGVUeXBlID0gZWxlbS5ub2RlVHlwZTtcblxuXHRpZiAoICFub2RlVHlwZSApIHtcblx0XHQvLyBJZiBubyBub2RlVHlwZSwgdGhpcyBpcyBleHBlY3RlZCB0byBiZSBhbiBhcnJheVxuXHRcdHdoaWxlICggKG5vZGUgPSBlbGVtW2krK10pICkge1xuXHRcdFx0Ly8gRG8gbm90IHRyYXZlcnNlIGNvbW1lbnQgbm9kZXNcblx0XHRcdHJldCArPSBnZXRUZXh0KCBub2RlICk7XG5cdFx0fVxuXHR9IGVsc2UgaWYgKCBub2RlVHlwZSA9PT0gMSB8fCBub2RlVHlwZSA9PT0gOSB8fCBub2RlVHlwZSA9PT0gMTEgKSB7XG5cdFx0Ly8gVXNlIHRleHRDb250ZW50IGZvciBlbGVtZW50c1xuXHRcdC8vIGlubmVyVGV4dCB1c2FnZSByZW1vdmVkIGZvciBjb25zaXN0ZW5jeSBvZiBuZXcgbGluZXMgKGpRdWVyeSAjMTExNTMpXG5cdFx0aWYgKCB0eXBlb2YgZWxlbS50ZXh0Q29udGVudCA9PT0gXCJzdHJpbmdcIiApIHtcblx0XHRcdHJldHVybiBlbGVtLnRleHRDb250ZW50O1xuXHRcdH0gZWxzZSB7XG5cdFx0XHQvLyBUcmF2ZXJzZSBpdHMgY2hpbGRyZW5cblx0XHRcdGZvciAoIGVsZW0gPSBlbGVtLmZpcnN0Q2hpbGQ7IGVsZW07IGVsZW0gPSBlbGVtLm5leHRTaWJsaW5nICkge1xuXHRcdFx0XHRyZXQgKz0gZ2V0VGV4dCggZWxlbSApO1xuXHRcdFx0fVxuXHRcdH1cblx0fSBlbHNlIGlmICggbm9kZVR5cGUgPT09IDMgfHwgbm9kZVR5cGUgPT09IDQgKSB7XG5cdFx0cmV0dXJuIGVsZW0ubm9kZVZhbHVlO1xuXHR9XG5cdC8vIERvIG5vdCBpbmNsdWRlIGNvbW1lbnQgb3IgcHJvY2Vzc2luZyBpbnN0cnVjdGlvbiBub2Rlc1xuXG5cdHJldHVybiByZXQ7XG59O1xuXG5FeHByID0gU2l6emxlLnNlbGVjdG9ycyA9IHtcblxuXHQvLyBDYW4gYmUgYWRqdXN0ZWQgYnkgdGhlIHVzZXJcblx0Y2FjaGVMZW5ndGg6IDUwLFxuXG5cdGNyZWF0ZVBzZXVkbzogbWFya0Z1bmN0aW9uLFxuXG5cdG1hdGNoOiBtYXRjaEV4cHIsXG5cblx0YXR0ckhhbmRsZToge30sXG5cblx0ZmluZDoge30sXG5cblx0cmVsYXRpdmU6IHtcblx0XHRcIj5cIjogeyBkaXI6IFwicGFyZW50Tm9kZVwiLCBmaXJzdDogdHJ1ZSB9LFxuXHRcdFwiIFwiOiB7IGRpcjogXCJwYXJlbnROb2RlXCIgfSxcblx0XHRcIitcIjogeyBkaXI6IFwicHJldmlvdXNTaWJsaW5nXCIsIGZpcnN0OiB0cnVlIH0sXG5cdFx0XCJ+XCI6IHsgZGlyOiBcInByZXZpb3VzU2libGluZ1wiIH1cblx0fSxcblxuXHRwcmVGaWx0ZXI6IHtcblx0XHRcIkFUVFJcIjogZnVuY3Rpb24oIG1hdGNoICkge1xuXHRcdFx0bWF0Y2hbMV0gPSBtYXRjaFsxXS5yZXBsYWNlKCBydW5lc2NhcGUsIGZ1bmVzY2FwZSApO1xuXG5cdFx0XHQvLyBNb3ZlIHRoZSBnaXZlbiB2YWx1ZSB0byBtYXRjaFszXSB3aGV0aGVyIHF1b3RlZCBvciB1bnF1b3RlZFxuXHRcdFx0bWF0Y2hbM10gPSAoIG1hdGNoWzNdIHx8IG1hdGNoWzRdIHx8IG1hdGNoWzVdIHx8IFwiXCIgKS5yZXBsYWNlKCBydW5lc2NhcGUsIGZ1bmVzY2FwZSApO1xuXG5cdFx0XHRpZiAoIG1hdGNoWzJdID09PSBcIn49XCIgKSB7XG5cdFx0XHRcdG1hdGNoWzNdID0gXCIgXCIgKyBtYXRjaFszXSArIFwiIFwiO1xuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gbWF0Y2guc2xpY2UoIDAsIDQgKTtcblx0XHR9LFxuXG5cdFx0XCJDSElMRFwiOiBmdW5jdGlvbiggbWF0Y2ggKSB7XG5cdFx0XHQvKiBtYXRjaGVzIGZyb20gbWF0Y2hFeHByW1wiQ0hJTERcIl1cblx0XHRcdFx0MSB0eXBlIChvbmx5fG50aHwuLi4pXG5cdFx0XHRcdDIgd2hhdCAoY2hpbGR8b2YtdHlwZSlcblx0XHRcdFx0MyBhcmd1bWVudCAoZXZlbnxvZGR8XFxkKnxcXGQqbihbKy1dXFxkKyk/fC4uLilcblx0XHRcdFx0NCB4bi1jb21wb25lbnQgb2YgeG4reSBhcmd1bWVudCAoWystXT9cXGQqbnwpXG5cdFx0XHRcdDUgc2lnbiBvZiB4bi1jb21wb25lbnRcblx0XHRcdFx0NiB4IG9mIHhuLWNvbXBvbmVudFxuXHRcdFx0XHQ3IHNpZ24gb2YgeS1jb21wb25lbnRcblx0XHRcdFx0OCB5IG9mIHktY29tcG9uZW50XG5cdFx0XHQqL1xuXHRcdFx0bWF0Y2hbMV0gPSBtYXRjaFsxXS50b0xvd2VyQ2FzZSgpO1xuXG5cdFx0XHRpZiAoIG1hdGNoWzFdLnNsaWNlKCAwLCAzICkgPT09IFwibnRoXCIgKSB7XG5cdFx0XHRcdC8vIG50aC0qIHJlcXVpcmVzIGFyZ3VtZW50XG5cdFx0XHRcdGlmICggIW1hdGNoWzNdICkge1xuXHRcdFx0XHRcdFNpenpsZS5lcnJvciggbWF0Y2hbMF0gKTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIG51bWVyaWMgeCBhbmQgeSBwYXJhbWV0ZXJzIGZvciBFeHByLmZpbHRlci5DSElMRFxuXHRcdFx0XHQvLyByZW1lbWJlciB0aGF0IGZhbHNlL3RydWUgY2FzdCByZXNwZWN0aXZlbHkgdG8gMC8xXG5cdFx0XHRcdG1hdGNoWzRdID0gKyggbWF0Y2hbNF0gPyBtYXRjaFs1XSArIChtYXRjaFs2XSB8fCAxKSA6IDIgKiAoIG1hdGNoWzNdID09PSBcImV2ZW5cIiB8fCBtYXRjaFszXSA9PT0gXCJvZGRcIiApICk7XG5cdFx0XHRcdG1hdGNoWzVdID0gKyggKCBtYXRjaFs3XSArIG1hdGNoWzhdICkgfHwgbWF0Y2hbM10gPT09IFwib2RkXCIgKTtcblxuXHRcdFx0Ly8gb3RoZXIgdHlwZXMgcHJvaGliaXQgYXJndW1lbnRzXG5cdFx0XHR9IGVsc2UgaWYgKCBtYXRjaFszXSApIHtcblx0XHRcdFx0U2l6emxlLmVycm9yKCBtYXRjaFswXSApO1xuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gbWF0Y2g7XG5cdFx0fSxcblxuXHRcdFwiUFNFVURPXCI6IGZ1bmN0aW9uKCBtYXRjaCApIHtcblx0XHRcdHZhciBleGNlc3MsXG5cdFx0XHRcdHVucXVvdGVkID0gIW1hdGNoWzZdICYmIG1hdGNoWzJdO1xuXG5cdFx0XHRpZiAoIG1hdGNoRXhwcltcIkNISUxEXCJdLnRlc3QoIG1hdGNoWzBdICkgKSB7XG5cdFx0XHRcdHJldHVybiBudWxsO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBBY2NlcHQgcXVvdGVkIGFyZ3VtZW50cyBhcy1pc1xuXHRcdFx0aWYgKCBtYXRjaFszXSApIHtcblx0XHRcdFx0bWF0Y2hbMl0gPSBtYXRjaFs0XSB8fCBtYXRjaFs1XSB8fCBcIlwiO1xuXG5cdFx0XHQvLyBTdHJpcCBleGNlc3MgY2hhcmFjdGVycyBmcm9tIHVucXVvdGVkIGFyZ3VtZW50c1xuXHRcdFx0fSBlbHNlIGlmICggdW5xdW90ZWQgJiYgcnBzZXVkby50ZXN0KCB1bnF1b3RlZCApICYmXG5cdFx0XHRcdC8vIEdldCBleGNlc3MgZnJvbSB0b2tlbml6ZSAocmVjdXJzaXZlbHkpXG5cdFx0XHRcdChleGNlc3MgPSB0b2tlbml6ZSggdW5xdW90ZWQsIHRydWUgKSkgJiZcblx0XHRcdFx0Ly8gYWR2YW5jZSB0byB0aGUgbmV4dCBjbG9zaW5nIHBhcmVudGhlc2lzXG5cdFx0XHRcdChleGNlc3MgPSB1bnF1b3RlZC5pbmRleE9mKCBcIilcIiwgdW5xdW90ZWQubGVuZ3RoIC0gZXhjZXNzICkgLSB1bnF1b3RlZC5sZW5ndGgpICkge1xuXG5cdFx0XHRcdC8vIGV4Y2VzcyBpcyBhIG5lZ2F0aXZlIGluZGV4XG5cdFx0XHRcdG1hdGNoWzBdID0gbWF0Y2hbMF0uc2xpY2UoIDAsIGV4Y2VzcyApO1xuXHRcdFx0XHRtYXRjaFsyXSA9IHVucXVvdGVkLnNsaWNlKCAwLCBleGNlc3MgKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gUmV0dXJuIG9ubHkgY2FwdHVyZXMgbmVlZGVkIGJ5IHRoZSBwc2V1ZG8gZmlsdGVyIG1ldGhvZCAodHlwZSBhbmQgYXJndW1lbnQpXG5cdFx0XHRyZXR1cm4gbWF0Y2guc2xpY2UoIDAsIDMgKTtcblx0XHR9XG5cdH0sXG5cblx0ZmlsdGVyOiB7XG5cblx0XHRcIlRBR1wiOiBmdW5jdGlvbiggbm9kZU5hbWVTZWxlY3RvciApIHtcblx0XHRcdHZhciBub2RlTmFtZSA9IG5vZGVOYW1lU2VsZWN0b3IucmVwbGFjZSggcnVuZXNjYXBlLCBmdW5lc2NhcGUgKS50b0xvd2VyQ2FzZSgpO1xuXHRcdFx0cmV0dXJuIG5vZGVOYW1lU2VsZWN0b3IgPT09IFwiKlwiID9cblx0XHRcdFx0ZnVuY3Rpb24oKSB7IHJldHVybiB0cnVlOyB9IDpcblx0XHRcdFx0ZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRcdFx0cmV0dXJuIGVsZW0ubm9kZU5hbWUgJiYgZWxlbS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpID09PSBub2RlTmFtZTtcblx0XHRcdFx0fTtcblx0XHR9LFxuXG5cdFx0XCJDTEFTU1wiOiBmdW5jdGlvbiggY2xhc3NOYW1lICkge1xuXHRcdFx0dmFyIHBhdHRlcm4gPSBjbGFzc0NhY2hlWyBjbGFzc05hbWUgKyBcIiBcIiBdO1xuXG5cdFx0XHRyZXR1cm4gcGF0dGVybiB8fFxuXHRcdFx0XHQocGF0dGVybiA9IG5ldyBSZWdFeHAoIFwiKF58XCIgKyB3aGl0ZXNwYWNlICsgXCIpXCIgKyBjbGFzc05hbWUgKyBcIihcIiArIHdoaXRlc3BhY2UgKyBcInwkKVwiICkpICYmXG5cdFx0XHRcdGNsYXNzQ2FjaGUoIGNsYXNzTmFtZSwgZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRcdFx0cmV0dXJuIHBhdHRlcm4udGVzdCggdHlwZW9mIGVsZW0uY2xhc3NOYW1lID09PSBcInN0cmluZ1wiICYmIGVsZW0uY2xhc3NOYW1lIHx8IHR5cGVvZiBlbGVtLmdldEF0dHJpYnV0ZSAhPT0gXCJ1bmRlZmluZWRcIiAmJiBlbGVtLmdldEF0dHJpYnV0ZShcImNsYXNzXCIpIHx8IFwiXCIgKTtcblx0XHRcdFx0fSk7XG5cdFx0fSxcblxuXHRcdFwiQVRUUlwiOiBmdW5jdGlvbiggbmFtZSwgb3BlcmF0b3IsIGNoZWNrICkge1xuXHRcdFx0cmV0dXJuIGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0XHR2YXIgcmVzdWx0ID0gU2l6emxlLmF0dHIoIGVsZW0sIG5hbWUgKTtcblxuXHRcdFx0XHRpZiAoIHJlc3VsdCA9PSBudWxsICkge1xuXHRcdFx0XHRcdHJldHVybiBvcGVyYXRvciA9PT0gXCIhPVwiO1xuXHRcdFx0XHR9XG5cdFx0XHRcdGlmICggIW9wZXJhdG9yICkge1xuXHRcdFx0XHRcdHJldHVybiB0cnVlO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0cmVzdWx0ICs9IFwiXCI7XG5cblx0XHRcdFx0cmV0dXJuIG9wZXJhdG9yID09PSBcIj1cIiA/IHJlc3VsdCA9PT0gY2hlY2sgOlxuXHRcdFx0XHRcdG9wZXJhdG9yID09PSBcIiE9XCIgPyByZXN1bHQgIT09IGNoZWNrIDpcblx0XHRcdFx0XHRvcGVyYXRvciA9PT0gXCJePVwiID8gY2hlY2sgJiYgcmVzdWx0LmluZGV4T2YoIGNoZWNrICkgPT09IDAgOlxuXHRcdFx0XHRcdG9wZXJhdG9yID09PSBcIio9XCIgPyBjaGVjayAmJiByZXN1bHQuaW5kZXhPZiggY2hlY2sgKSA+IC0xIDpcblx0XHRcdFx0XHRvcGVyYXRvciA9PT0gXCIkPVwiID8gY2hlY2sgJiYgcmVzdWx0LnNsaWNlKCAtY2hlY2subGVuZ3RoICkgPT09IGNoZWNrIDpcblx0XHRcdFx0XHRvcGVyYXRvciA9PT0gXCJ+PVwiID8gKCBcIiBcIiArIHJlc3VsdC5yZXBsYWNlKCByd2hpdGVzcGFjZSwgXCIgXCIgKSArIFwiIFwiICkuaW5kZXhPZiggY2hlY2sgKSA+IC0xIDpcblx0XHRcdFx0XHRvcGVyYXRvciA9PT0gXCJ8PVwiID8gcmVzdWx0ID09PSBjaGVjayB8fCByZXN1bHQuc2xpY2UoIDAsIGNoZWNrLmxlbmd0aCArIDEgKSA9PT0gY2hlY2sgKyBcIi1cIiA6XG5cdFx0XHRcdFx0ZmFsc2U7XG5cdFx0XHR9O1xuXHRcdH0sXG5cblx0XHRcIkNISUxEXCI6IGZ1bmN0aW9uKCB0eXBlLCB3aGF0LCBhcmd1bWVudCwgZmlyc3QsIGxhc3QgKSB7XG5cdFx0XHR2YXIgc2ltcGxlID0gdHlwZS5zbGljZSggMCwgMyApICE9PSBcIm50aFwiLFxuXHRcdFx0XHRmb3J3YXJkID0gdHlwZS5zbGljZSggLTQgKSAhPT0gXCJsYXN0XCIsXG5cdFx0XHRcdG9mVHlwZSA9IHdoYXQgPT09IFwib2YtdHlwZVwiO1xuXG5cdFx0XHRyZXR1cm4gZmlyc3QgPT09IDEgJiYgbGFzdCA9PT0gMCA/XG5cblx0XHRcdFx0Ly8gU2hvcnRjdXQgZm9yIDpudGgtKihuKVxuXHRcdFx0XHRmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdFx0XHRyZXR1cm4gISFlbGVtLnBhcmVudE5vZGU7XG5cdFx0XHRcdH0gOlxuXG5cdFx0XHRcdGZ1bmN0aW9uKCBlbGVtLCBjb250ZXh0LCB4bWwgKSB7XG5cdFx0XHRcdFx0dmFyIGNhY2hlLCB1bmlxdWVDYWNoZSwgb3V0ZXJDYWNoZSwgbm9kZSwgbm9kZUluZGV4LCBzdGFydCxcblx0XHRcdFx0XHRcdGRpciA9IHNpbXBsZSAhPT0gZm9yd2FyZCA/IFwibmV4dFNpYmxpbmdcIiA6IFwicHJldmlvdXNTaWJsaW5nXCIsXG5cdFx0XHRcdFx0XHRwYXJlbnQgPSBlbGVtLnBhcmVudE5vZGUsXG5cdFx0XHRcdFx0XHRuYW1lID0gb2ZUeXBlICYmIGVsZW0ubm9kZU5hbWUudG9Mb3dlckNhc2UoKSxcblx0XHRcdFx0XHRcdHVzZUNhY2hlID0gIXhtbCAmJiAhb2ZUeXBlLFxuXHRcdFx0XHRcdFx0ZGlmZiA9IGZhbHNlO1xuXG5cdFx0XHRcdFx0aWYgKCBwYXJlbnQgKSB7XG5cblx0XHRcdFx0XHRcdC8vIDooZmlyc3R8bGFzdHxvbmx5KS0oY2hpbGR8b2YtdHlwZSlcblx0XHRcdFx0XHRcdGlmICggc2ltcGxlICkge1xuXHRcdFx0XHRcdFx0XHR3aGlsZSAoIGRpciApIHtcblx0XHRcdFx0XHRcdFx0XHRub2RlID0gZWxlbTtcblx0XHRcdFx0XHRcdFx0XHR3aGlsZSAoIChub2RlID0gbm9kZVsgZGlyIF0pICkge1xuXHRcdFx0XHRcdFx0XHRcdFx0aWYgKCBvZlR5cGUgP1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRub2RlLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCkgPT09IG5hbWUgOlxuXHRcdFx0XHRcdFx0XHRcdFx0XHRub2RlLm5vZGVUeXBlID09PSAxICkge1xuXG5cdFx0XHRcdFx0XHRcdFx0XHRcdHJldHVybiBmYWxzZTtcblx0XHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdFx0Ly8gUmV2ZXJzZSBkaXJlY3Rpb24gZm9yIDpvbmx5LSogKGlmIHdlIGhhdmVuJ3QgeWV0IGRvbmUgc28pXG5cdFx0XHRcdFx0XHRcdFx0c3RhcnQgPSBkaXIgPSB0eXBlID09PSBcIm9ubHlcIiAmJiAhc3RhcnQgJiYgXCJuZXh0U2libGluZ1wiO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdHJldHVybiB0cnVlO1xuXHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHRzdGFydCA9IFsgZm9yd2FyZCA/IHBhcmVudC5maXJzdENoaWxkIDogcGFyZW50Lmxhc3RDaGlsZCBdO1xuXG5cdFx0XHRcdFx0XHQvLyBub24teG1sIDpudGgtY2hpbGQoLi4uKSBzdG9yZXMgY2FjaGUgZGF0YSBvbiBgcGFyZW50YFxuXHRcdFx0XHRcdFx0aWYgKCBmb3J3YXJkICYmIHVzZUNhY2hlICkge1xuXG5cdFx0XHRcdFx0XHRcdC8vIFNlZWsgYGVsZW1gIGZyb20gYSBwcmV2aW91c2x5LWNhY2hlZCBpbmRleFxuXG5cdFx0XHRcdFx0XHRcdC8vIC4uLmluIGEgZ3ppcC1mcmllbmRseSB3YXlcblx0XHRcdFx0XHRcdFx0bm9kZSA9IHBhcmVudDtcblx0XHRcdFx0XHRcdFx0b3V0ZXJDYWNoZSA9IG5vZGVbIGV4cGFuZG8gXSB8fCAobm9kZVsgZXhwYW5kbyBdID0ge30pO1xuXG5cdFx0XHRcdFx0XHRcdC8vIFN1cHBvcnQ6IElFIDw5IG9ubHlcblx0XHRcdFx0XHRcdFx0Ly8gRGVmZW5kIGFnYWluc3QgY2xvbmVkIGF0dHJvcGVydGllcyAoalF1ZXJ5IGdoLTE3MDkpXG5cdFx0XHRcdFx0XHRcdHVuaXF1ZUNhY2hlID0gb3V0ZXJDYWNoZVsgbm9kZS51bmlxdWVJRCBdIHx8XG5cdFx0XHRcdFx0XHRcdFx0KG91dGVyQ2FjaGVbIG5vZGUudW5pcXVlSUQgXSA9IHt9KTtcblxuXHRcdFx0XHRcdFx0XHRjYWNoZSA9IHVuaXF1ZUNhY2hlWyB0eXBlIF0gfHwgW107XG5cdFx0XHRcdFx0XHRcdG5vZGVJbmRleCA9IGNhY2hlWyAwIF0gPT09IGRpcnJ1bnMgJiYgY2FjaGVbIDEgXTtcblx0XHRcdFx0XHRcdFx0ZGlmZiA9IG5vZGVJbmRleCAmJiBjYWNoZVsgMiBdO1xuXHRcdFx0XHRcdFx0XHRub2RlID0gbm9kZUluZGV4ICYmIHBhcmVudC5jaGlsZE5vZGVzWyBub2RlSW5kZXggXTtcblxuXHRcdFx0XHRcdFx0XHR3aGlsZSAoIChub2RlID0gKytub2RlSW5kZXggJiYgbm9kZSAmJiBub2RlWyBkaXIgXSB8fFxuXG5cdFx0XHRcdFx0XHRcdFx0Ly8gRmFsbGJhY2sgdG8gc2Vla2luZyBgZWxlbWAgZnJvbSB0aGUgc3RhcnRcblx0XHRcdFx0XHRcdFx0XHQoZGlmZiA9IG5vZGVJbmRleCA9IDApIHx8IHN0YXJ0LnBvcCgpKSApIHtcblxuXHRcdFx0XHRcdFx0XHRcdC8vIFdoZW4gZm91bmQsIGNhY2hlIGluZGV4ZXMgb24gYHBhcmVudGAgYW5kIGJyZWFrXG5cdFx0XHRcdFx0XHRcdFx0aWYgKCBub2RlLm5vZGVUeXBlID09PSAxICYmICsrZGlmZiAmJiBub2RlID09PSBlbGVtICkge1xuXHRcdFx0XHRcdFx0XHRcdFx0dW5pcXVlQ2FjaGVbIHR5cGUgXSA9IFsgZGlycnVucywgbm9kZUluZGV4LCBkaWZmIF07XG5cdFx0XHRcdFx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdFx0Ly8gVXNlIHByZXZpb3VzbHktY2FjaGVkIGVsZW1lbnQgaW5kZXggaWYgYXZhaWxhYmxlXG5cdFx0XHRcdFx0XHRcdGlmICggdXNlQ2FjaGUgKSB7XG5cdFx0XHRcdFx0XHRcdFx0Ly8gLi4uaW4gYSBnemlwLWZyaWVuZGx5IHdheVxuXHRcdFx0XHRcdFx0XHRcdG5vZGUgPSBlbGVtO1xuXHRcdFx0XHRcdFx0XHRcdG91dGVyQ2FjaGUgPSBub2RlWyBleHBhbmRvIF0gfHwgKG5vZGVbIGV4cGFuZG8gXSA9IHt9KTtcblxuXHRcdFx0XHRcdFx0XHRcdC8vIFN1cHBvcnQ6IElFIDw5IG9ubHlcblx0XHRcdFx0XHRcdFx0XHQvLyBEZWZlbmQgYWdhaW5zdCBjbG9uZWQgYXR0cm9wZXJ0aWVzIChqUXVlcnkgZ2gtMTcwOSlcblx0XHRcdFx0XHRcdFx0XHR1bmlxdWVDYWNoZSA9IG91dGVyQ2FjaGVbIG5vZGUudW5pcXVlSUQgXSB8fFxuXHRcdFx0XHRcdFx0XHRcdFx0KG91dGVyQ2FjaGVbIG5vZGUudW5pcXVlSUQgXSA9IHt9KTtcblxuXHRcdFx0XHRcdFx0XHRcdGNhY2hlID0gdW5pcXVlQ2FjaGVbIHR5cGUgXSB8fCBbXTtcblx0XHRcdFx0XHRcdFx0XHRub2RlSW5kZXggPSBjYWNoZVsgMCBdID09PSBkaXJydW5zICYmIGNhY2hlWyAxIF07XG5cdFx0XHRcdFx0XHRcdFx0ZGlmZiA9IG5vZGVJbmRleDtcblx0XHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHRcdC8vIHhtbCA6bnRoLWNoaWxkKC4uLilcblx0XHRcdFx0XHRcdFx0Ly8gb3IgOm50aC1sYXN0LWNoaWxkKC4uLikgb3IgOm50aCgtbGFzdCk/LW9mLXR5cGUoLi4uKVxuXHRcdFx0XHRcdFx0XHRpZiAoIGRpZmYgPT09IGZhbHNlICkge1xuXHRcdFx0XHRcdFx0XHRcdC8vIFVzZSB0aGUgc2FtZSBsb29wIGFzIGFib3ZlIHRvIHNlZWsgYGVsZW1gIGZyb20gdGhlIHN0YXJ0XG5cdFx0XHRcdFx0XHRcdFx0d2hpbGUgKCAobm9kZSA9ICsrbm9kZUluZGV4ICYmIG5vZGUgJiYgbm9kZVsgZGlyIF0gfHxcblx0XHRcdFx0XHRcdFx0XHRcdChkaWZmID0gbm9kZUluZGV4ID0gMCkgfHwgc3RhcnQucG9wKCkpICkge1xuXG5cdFx0XHRcdFx0XHRcdFx0XHRpZiAoICggb2ZUeXBlID9cblx0XHRcdFx0XHRcdFx0XHRcdFx0bm9kZS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpID09PSBuYW1lIDpcblx0XHRcdFx0XHRcdFx0XHRcdFx0bm9kZS5ub2RlVHlwZSA9PT0gMSApICYmXG5cdFx0XHRcdFx0XHRcdFx0XHRcdCsrZGlmZiApIHtcblxuXHRcdFx0XHRcdFx0XHRcdFx0XHQvLyBDYWNoZSB0aGUgaW5kZXggb2YgZWFjaCBlbmNvdW50ZXJlZCBlbGVtZW50XG5cdFx0XHRcdFx0XHRcdFx0XHRcdGlmICggdXNlQ2FjaGUgKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0b3V0ZXJDYWNoZSA9IG5vZGVbIGV4cGFuZG8gXSB8fCAobm9kZVsgZXhwYW5kbyBdID0ge30pO1xuXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0Ly8gU3VwcG9ydDogSUUgPDkgb25seVxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdC8vIERlZmVuZCBhZ2FpbnN0IGNsb25lZCBhdHRyb3BlcnRpZXMgKGpRdWVyeSBnaC0xNzA5KVxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdHVuaXF1ZUNhY2hlID0gb3V0ZXJDYWNoZVsgbm9kZS51bmlxdWVJRCBdIHx8XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHQob3V0ZXJDYWNoZVsgbm9kZS51bmlxdWVJRCBdID0ge30pO1xuXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0dW5pcXVlQ2FjaGVbIHR5cGUgXSA9IFsgZGlycnVucywgZGlmZiBdO1xuXHRcdFx0XHRcdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdFx0XHRcdFx0aWYgKCBub2RlID09PSBlbGVtICkge1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdC8vIEluY29ycG9yYXRlIHRoZSBvZmZzZXQsIHRoZW4gY2hlY2sgYWdhaW5zdCBjeWNsZSBzaXplXG5cdFx0XHRcdFx0XHRkaWZmIC09IGxhc3Q7XG5cdFx0XHRcdFx0XHRyZXR1cm4gZGlmZiA9PT0gZmlyc3QgfHwgKCBkaWZmICUgZmlyc3QgPT09IDAgJiYgZGlmZiAvIGZpcnN0ID49IDAgKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH07XG5cdFx0fSxcblxuXHRcdFwiUFNFVURPXCI6IGZ1bmN0aW9uKCBwc2V1ZG8sIGFyZ3VtZW50ICkge1xuXHRcdFx0Ly8gcHNldWRvLWNsYXNzIG5hbWVzIGFyZSBjYXNlLWluc2Vuc2l0aXZlXG5cdFx0XHQvLyBodHRwOi8vd3d3LnczLm9yZy9UUi9zZWxlY3RvcnMvI3BzZXVkby1jbGFzc2VzXG5cdFx0XHQvLyBQcmlvcml0aXplIGJ5IGNhc2Ugc2Vuc2l0aXZpdHkgaW4gY2FzZSBjdXN0b20gcHNldWRvcyBhcmUgYWRkZWQgd2l0aCB1cHBlcmNhc2UgbGV0dGVyc1xuXHRcdFx0Ly8gUmVtZW1iZXIgdGhhdCBzZXRGaWx0ZXJzIGluaGVyaXRzIGZyb20gcHNldWRvc1xuXHRcdFx0dmFyIGFyZ3MsXG5cdFx0XHRcdGZuID0gRXhwci5wc2V1ZG9zWyBwc2V1ZG8gXSB8fCBFeHByLnNldEZpbHRlcnNbIHBzZXVkby50b0xvd2VyQ2FzZSgpIF0gfHxcblx0XHRcdFx0XHRTaXp6bGUuZXJyb3IoIFwidW5zdXBwb3J0ZWQgcHNldWRvOiBcIiArIHBzZXVkbyApO1xuXG5cdFx0XHQvLyBUaGUgdXNlciBtYXkgdXNlIGNyZWF0ZVBzZXVkbyB0byBpbmRpY2F0ZSB0aGF0XG5cdFx0XHQvLyBhcmd1bWVudHMgYXJlIG5lZWRlZCB0byBjcmVhdGUgdGhlIGZpbHRlciBmdW5jdGlvblxuXHRcdFx0Ly8ganVzdCBhcyBTaXp6bGUgZG9lc1xuXHRcdFx0aWYgKCBmblsgZXhwYW5kbyBdICkge1xuXHRcdFx0XHRyZXR1cm4gZm4oIGFyZ3VtZW50ICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIEJ1dCBtYWludGFpbiBzdXBwb3J0IGZvciBvbGQgc2lnbmF0dXJlc1xuXHRcdFx0aWYgKCBmbi5sZW5ndGggPiAxICkge1xuXHRcdFx0XHRhcmdzID0gWyBwc2V1ZG8sIHBzZXVkbywgXCJcIiwgYXJndW1lbnQgXTtcblx0XHRcdFx0cmV0dXJuIEV4cHIuc2V0RmlsdGVycy5oYXNPd25Qcm9wZXJ0eSggcHNldWRvLnRvTG93ZXJDYXNlKCkgKSA/XG5cdFx0XHRcdFx0bWFya0Z1bmN0aW9uKGZ1bmN0aW9uKCBzZWVkLCBtYXRjaGVzICkge1xuXHRcdFx0XHRcdFx0dmFyIGlkeCxcblx0XHRcdFx0XHRcdFx0bWF0Y2hlZCA9IGZuKCBzZWVkLCBhcmd1bWVudCApLFxuXHRcdFx0XHRcdFx0XHRpID0gbWF0Y2hlZC5sZW5ndGg7XG5cdFx0XHRcdFx0XHR3aGlsZSAoIGktLSApIHtcblx0XHRcdFx0XHRcdFx0aWR4ID0gaW5kZXhPZiggc2VlZCwgbWF0Y2hlZFtpXSApO1xuXHRcdFx0XHRcdFx0XHRzZWVkWyBpZHggXSA9ICEoIG1hdGNoZXNbIGlkeCBdID0gbWF0Y2hlZFtpXSApO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH0pIDpcblx0XHRcdFx0XHRmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdFx0XHRcdHJldHVybiBmbiggZWxlbSwgMCwgYXJncyApO1xuXHRcdFx0XHRcdH07XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiBmbjtcblx0XHR9XG5cdH0sXG5cblx0cHNldWRvczoge1xuXHRcdC8vIFBvdGVudGlhbGx5IGNvbXBsZXggcHNldWRvc1xuXHRcdFwibm90XCI6IG1hcmtGdW5jdGlvbihmdW5jdGlvbiggc2VsZWN0b3IgKSB7XG5cdFx0XHQvLyBUcmltIHRoZSBzZWxlY3RvciBwYXNzZWQgdG8gY29tcGlsZVxuXHRcdFx0Ly8gdG8gYXZvaWQgdHJlYXRpbmcgbGVhZGluZyBhbmQgdHJhaWxpbmdcblx0XHRcdC8vIHNwYWNlcyBhcyBjb21iaW5hdG9yc1xuXHRcdFx0dmFyIGlucHV0ID0gW10sXG5cdFx0XHRcdHJlc3VsdHMgPSBbXSxcblx0XHRcdFx0bWF0Y2hlciA9IGNvbXBpbGUoIHNlbGVjdG9yLnJlcGxhY2UoIHJ0cmltLCBcIiQxXCIgKSApO1xuXG5cdFx0XHRyZXR1cm4gbWF0Y2hlclsgZXhwYW5kbyBdID9cblx0XHRcdFx0bWFya0Z1bmN0aW9uKGZ1bmN0aW9uKCBzZWVkLCBtYXRjaGVzLCBjb250ZXh0LCB4bWwgKSB7XG5cdFx0XHRcdFx0dmFyIGVsZW0sXG5cdFx0XHRcdFx0XHR1bm1hdGNoZWQgPSBtYXRjaGVyKCBzZWVkLCBudWxsLCB4bWwsIFtdICksXG5cdFx0XHRcdFx0XHRpID0gc2VlZC5sZW5ndGg7XG5cblx0XHRcdFx0XHQvLyBNYXRjaCBlbGVtZW50cyB1bm1hdGNoZWQgYnkgYG1hdGNoZXJgXG5cdFx0XHRcdFx0d2hpbGUgKCBpLS0gKSB7XG5cdFx0XHRcdFx0XHRpZiAoIChlbGVtID0gdW5tYXRjaGVkW2ldKSApIHtcblx0XHRcdFx0XHRcdFx0c2VlZFtpXSA9ICEobWF0Y2hlc1tpXSA9IGVsZW0pO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0fSkgOlxuXHRcdFx0XHRmdW5jdGlvbiggZWxlbSwgY29udGV4dCwgeG1sICkge1xuXHRcdFx0XHRcdGlucHV0WzBdID0gZWxlbTtcblx0XHRcdFx0XHRtYXRjaGVyKCBpbnB1dCwgbnVsbCwgeG1sLCByZXN1bHRzICk7XG5cdFx0XHRcdFx0Ly8gRG9uJ3Qga2VlcCB0aGUgZWxlbWVudCAoaXNzdWUgIzI5OSlcblx0XHRcdFx0XHRpbnB1dFswXSA9IG51bGw7XG5cdFx0XHRcdFx0cmV0dXJuICFyZXN1bHRzLnBvcCgpO1xuXHRcdFx0XHR9O1xuXHRcdH0pLFxuXG5cdFx0XCJoYXNcIjogbWFya0Z1bmN0aW9uKGZ1bmN0aW9uKCBzZWxlY3RvciApIHtcblx0XHRcdHJldHVybiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdFx0cmV0dXJuIFNpenpsZSggc2VsZWN0b3IsIGVsZW0gKS5sZW5ndGggPiAwO1xuXHRcdFx0fTtcblx0XHR9KSxcblxuXHRcdFwiY29udGFpbnNcIjogbWFya0Z1bmN0aW9uKGZ1bmN0aW9uKCB0ZXh0ICkge1xuXHRcdFx0dGV4dCA9IHRleHQucmVwbGFjZSggcnVuZXNjYXBlLCBmdW5lc2NhcGUgKTtcblx0XHRcdHJldHVybiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdFx0cmV0dXJuICggZWxlbS50ZXh0Q29udGVudCB8fCBlbGVtLmlubmVyVGV4dCB8fCBnZXRUZXh0KCBlbGVtICkgKS5pbmRleE9mKCB0ZXh0ICkgPiAtMTtcblx0XHRcdH07XG5cdFx0fSksXG5cblx0XHQvLyBcIldoZXRoZXIgYW4gZWxlbWVudCBpcyByZXByZXNlbnRlZCBieSBhIDpsYW5nKCkgc2VsZWN0b3Jcblx0XHQvLyBpcyBiYXNlZCBzb2xlbHkgb24gdGhlIGVsZW1lbnQncyBsYW5ndWFnZSB2YWx1ZVxuXHRcdC8vIGJlaW5nIGVxdWFsIHRvIHRoZSBpZGVudGlmaWVyIEMsXG5cdFx0Ly8gb3IgYmVnaW5uaW5nIHdpdGggdGhlIGlkZW50aWZpZXIgQyBpbW1lZGlhdGVseSBmb2xsb3dlZCBieSBcIi1cIi5cblx0XHQvLyBUaGUgbWF0Y2hpbmcgb2YgQyBhZ2FpbnN0IHRoZSBlbGVtZW50J3MgbGFuZ3VhZ2UgdmFsdWUgaXMgcGVyZm9ybWVkIGNhc2UtaW5zZW5zaXRpdmVseS5cblx0XHQvLyBUaGUgaWRlbnRpZmllciBDIGRvZXMgbm90IGhhdmUgdG8gYmUgYSB2YWxpZCBsYW5ndWFnZSBuYW1lLlwiXG5cdFx0Ly8gaHR0cDovL3d3dy53My5vcmcvVFIvc2VsZWN0b3JzLyNsYW5nLXBzZXVkb1xuXHRcdFwibGFuZ1wiOiBtYXJrRnVuY3Rpb24oIGZ1bmN0aW9uKCBsYW5nICkge1xuXHRcdFx0Ly8gbGFuZyB2YWx1ZSBtdXN0IGJlIGEgdmFsaWQgaWRlbnRpZmllclxuXHRcdFx0aWYgKCAhcmlkZW50aWZpZXIudGVzdChsYW5nIHx8IFwiXCIpICkge1xuXHRcdFx0XHRTaXp6bGUuZXJyb3IoIFwidW5zdXBwb3J0ZWQgbGFuZzogXCIgKyBsYW5nICk7XG5cdFx0XHR9XG5cdFx0XHRsYW5nID0gbGFuZy5yZXBsYWNlKCBydW5lc2NhcGUsIGZ1bmVzY2FwZSApLnRvTG93ZXJDYXNlKCk7XG5cdFx0XHRyZXR1cm4gZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRcdHZhciBlbGVtTGFuZztcblx0XHRcdFx0ZG8ge1xuXHRcdFx0XHRcdGlmICggKGVsZW1MYW5nID0gZG9jdW1lbnRJc0hUTUwgP1xuXHRcdFx0XHRcdFx0ZWxlbS5sYW5nIDpcblx0XHRcdFx0XHRcdGVsZW0uZ2V0QXR0cmlidXRlKFwieG1sOmxhbmdcIikgfHwgZWxlbS5nZXRBdHRyaWJ1dGUoXCJsYW5nXCIpKSApIHtcblxuXHRcdFx0XHRcdFx0ZWxlbUxhbmcgPSBlbGVtTGFuZy50b0xvd2VyQ2FzZSgpO1xuXHRcdFx0XHRcdFx0cmV0dXJuIGVsZW1MYW5nID09PSBsYW5nIHx8IGVsZW1MYW5nLmluZGV4T2YoIGxhbmcgKyBcIi1cIiApID09PSAwO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fSB3aGlsZSAoIChlbGVtID0gZWxlbS5wYXJlbnROb2RlKSAmJiBlbGVtLm5vZGVUeXBlID09PSAxICk7XG5cdFx0XHRcdHJldHVybiBmYWxzZTtcblx0XHRcdH07XG5cdFx0fSksXG5cblx0XHQvLyBNaXNjZWxsYW5lb3VzXG5cdFx0XCJ0YXJnZXRcIjogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHR2YXIgaGFzaCA9IHdpbmRvdy5sb2NhdGlvbiAmJiB3aW5kb3cubG9jYXRpb24uaGFzaDtcblx0XHRcdHJldHVybiBoYXNoICYmIGhhc2guc2xpY2UoIDEgKSA9PT0gZWxlbS5pZDtcblx0XHR9LFxuXG5cdFx0XCJyb290XCI6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0cmV0dXJuIGVsZW0gPT09IGRvY0VsZW07XG5cdFx0fSxcblxuXHRcdFwiZm9jdXNcIjogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRyZXR1cm4gZWxlbSA9PT0gZG9jdW1lbnQuYWN0aXZlRWxlbWVudCAmJiAoIWRvY3VtZW50Lmhhc0ZvY3VzIHx8IGRvY3VtZW50Lmhhc0ZvY3VzKCkpICYmICEhKGVsZW0udHlwZSB8fCBlbGVtLmhyZWYgfHwgfmVsZW0udGFiSW5kZXgpO1xuXHRcdH0sXG5cblx0XHQvLyBCb29sZWFuIHByb3BlcnRpZXNcblx0XHRcImVuYWJsZWRcIjogY3JlYXRlRGlzYWJsZWRQc2V1ZG8oIGZhbHNlICksXG5cdFx0XCJkaXNhYmxlZFwiOiBjcmVhdGVEaXNhYmxlZFBzZXVkbyggdHJ1ZSApLFxuXG5cdFx0XCJjaGVja2VkXCI6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0Ly8gSW4gQ1NTMywgOmNoZWNrZWQgc2hvdWxkIHJldHVybiBib3RoIGNoZWNrZWQgYW5kIHNlbGVjdGVkIGVsZW1lbnRzXG5cdFx0XHQvLyBodHRwOi8vd3d3LnczLm9yZy9UUi8yMDExL1JFQy1jc3MzLXNlbGVjdG9ycy0yMDExMDkyOS8jY2hlY2tlZFxuXHRcdFx0dmFyIG5vZGVOYW1lID0gZWxlbS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpO1xuXHRcdFx0cmV0dXJuIChub2RlTmFtZSA9PT0gXCJpbnB1dFwiICYmICEhZWxlbS5jaGVja2VkKSB8fCAobm9kZU5hbWUgPT09IFwib3B0aW9uXCIgJiYgISFlbGVtLnNlbGVjdGVkKTtcblx0XHR9LFxuXG5cdFx0XCJzZWxlY3RlZFwiOiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdC8vIEFjY2Vzc2luZyB0aGlzIHByb3BlcnR5IG1ha2VzIHNlbGVjdGVkLWJ5LWRlZmF1bHRcblx0XHRcdC8vIG9wdGlvbnMgaW4gU2FmYXJpIHdvcmsgcHJvcGVybHlcblx0XHRcdGlmICggZWxlbS5wYXJlbnROb2RlICkge1xuXHRcdFx0XHRlbGVtLnBhcmVudE5vZGUuc2VsZWN0ZWRJbmRleDtcblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIGVsZW0uc2VsZWN0ZWQgPT09IHRydWU7XG5cdFx0fSxcblxuXHRcdC8vIENvbnRlbnRzXG5cdFx0XCJlbXB0eVwiOiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdC8vIGh0dHA6Ly93d3cudzMub3JnL1RSL3NlbGVjdG9ycy8jZW1wdHktcHNldWRvXG5cdFx0XHQvLyA6ZW1wdHkgaXMgbmVnYXRlZCBieSBlbGVtZW50ICgxKSBvciBjb250ZW50IG5vZGVzICh0ZXh0OiAzOyBjZGF0YTogNDsgZW50aXR5IHJlZjogNSksXG5cdFx0XHQvLyAgIGJ1dCBub3QgYnkgb3RoZXJzIChjb21tZW50OiA4OyBwcm9jZXNzaW5nIGluc3RydWN0aW9uOiA3OyBldGMuKVxuXHRcdFx0Ly8gbm9kZVR5cGUgPCA2IHdvcmtzIGJlY2F1c2UgYXR0cmlidXRlcyAoMikgZG8gbm90IGFwcGVhciBhcyBjaGlsZHJlblxuXHRcdFx0Zm9yICggZWxlbSA9IGVsZW0uZmlyc3RDaGlsZDsgZWxlbTsgZWxlbSA9IGVsZW0ubmV4dFNpYmxpbmcgKSB7XG5cdFx0XHRcdGlmICggZWxlbS5ub2RlVHlwZSA8IDYgKSB7XG5cdFx0XHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHR9LFxuXG5cdFx0XCJwYXJlbnRcIjogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRyZXR1cm4gIUV4cHIucHNldWRvc1tcImVtcHR5XCJdKCBlbGVtICk7XG5cdFx0fSxcblxuXHRcdC8vIEVsZW1lbnQvaW5wdXQgdHlwZXNcblx0XHRcImhlYWRlclwiOiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdHJldHVybiByaGVhZGVyLnRlc3QoIGVsZW0ubm9kZU5hbWUgKTtcblx0XHR9LFxuXG5cdFx0XCJpbnB1dFwiOiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdHJldHVybiByaW5wdXRzLnRlc3QoIGVsZW0ubm9kZU5hbWUgKTtcblx0XHR9LFxuXG5cdFx0XCJidXR0b25cIjogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHR2YXIgbmFtZSA9IGVsZW0ubm9kZU5hbWUudG9Mb3dlckNhc2UoKTtcblx0XHRcdHJldHVybiBuYW1lID09PSBcImlucHV0XCIgJiYgZWxlbS50eXBlID09PSBcImJ1dHRvblwiIHx8IG5hbWUgPT09IFwiYnV0dG9uXCI7XG5cdFx0fSxcblxuXHRcdFwidGV4dFwiOiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdHZhciBhdHRyO1xuXHRcdFx0cmV0dXJuIGVsZW0ubm9kZU5hbWUudG9Mb3dlckNhc2UoKSA9PT0gXCJpbnB1dFwiICYmXG5cdFx0XHRcdGVsZW0udHlwZSA9PT0gXCJ0ZXh0XCIgJiZcblxuXHRcdFx0XHQvLyBTdXBwb3J0OiBJRTw4XG5cdFx0XHRcdC8vIE5ldyBIVE1MNSBhdHRyaWJ1dGUgdmFsdWVzIChlLmcuLCBcInNlYXJjaFwiKSBhcHBlYXIgd2l0aCBlbGVtLnR5cGUgPT09IFwidGV4dFwiXG5cdFx0XHRcdCggKGF0dHIgPSBlbGVtLmdldEF0dHJpYnV0ZShcInR5cGVcIikpID09IG51bGwgfHwgYXR0ci50b0xvd2VyQ2FzZSgpID09PSBcInRleHRcIiApO1xuXHRcdH0sXG5cblx0XHQvLyBQb3NpdGlvbi1pbi1jb2xsZWN0aW9uXG5cdFx0XCJmaXJzdFwiOiBjcmVhdGVQb3NpdGlvbmFsUHNldWRvKGZ1bmN0aW9uKCkge1xuXHRcdFx0cmV0dXJuIFsgMCBdO1xuXHRcdH0pLFxuXG5cdFx0XCJsYXN0XCI6IGNyZWF0ZVBvc2l0aW9uYWxQc2V1ZG8oZnVuY3Rpb24oIG1hdGNoSW5kZXhlcywgbGVuZ3RoICkge1xuXHRcdFx0cmV0dXJuIFsgbGVuZ3RoIC0gMSBdO1xuXHRcdH0pLFxuXG5cdFx0XCJlcVwiOiBjcmVhdGVQb3NpdGlvbmFsUHNldWRvKGZ1bmN0aW9uKCBtYXRjaEluZGV4ZXMsIGxlbmd0aCwgYXJndW1lbnQgKSB7XG5cdFx0XHRyZXR1cm4gWyBhcmd1bWVudCA8IDAgPyBhcmd1bWVudCArIGxlbmd0aCA6IGFyZ3VtZW50IF07XG5cdFx0fSksXG5cblx0XHRcImV2ZW5cIjogY3JlYXRlUG9zaXRpb25hbFBzZXVkbyhmdW5jdGlvbiggbWF0Y2hJbmRleGVzLCBsZW5ndGggKSB7XG5cdFx0XHR2YXIgaSA9IDA7XG5cdFx0XHRmb3IgKCA7IGkgPCBsZW5ndGg7IGkgKz0gMiApIHtcblx0XHRcdFx0bWF0Y2hJbmRleGVzLnB1c2goIGkgKTtcblx0XHRcdH1cblx0XHRcdHJldHVybiBtYXRjaEluZGV4ZXM7XG5cdFx0fSksXG5cblx0XHRcIm9kZFwiOiBjcmVhdGVQb3NpdGlvbmFsUHNldWRvKGZ1bmN0aW9uKCBtYXRjaEluZGV4ZXMsIGxlbmd0aCApIHtcblx0XHRcdHZhciBpID0gMTtcblx0XHRcdGZvciAoIDsgaSA8IGxlbmd0aDsgaSArPSAyICkge1xuXHRcdFx0XHRtYXRjaEluZGV4ZXMucHVzaCggaSApO1xuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIG1hdGNoSW5kZXhlcztcblx0XHR9KSxcblxuXHRcdFwibHRcIjogY3JlYXRlUG9zaXRpb25hbFBzZXVkbyhmdW5jdGlvbiggbWF0Y2hJbmRleGVzLCBsZW5ndGgsIGFyZ3VtZW50ICkge1xuXHRcdFx0dmFyIGkgPSBhcmd1bWVudCA8IDAgPyBhcmd1bWVudCArIGxlbmd0aCA6IGFyZ3VtZW50O1xuXHRcdFx0Zm9yICggOyAtLWkgPj0gMDsgKSB7XG5cdFx0XHRcdG1hdGNoSW5kZXhlcy5wdXNoKCBpICk7XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gbWF0Y2hJbmRleGVzO1xuXHRcdH0pLFxuXG5cdFx0XCJndFwiOiBjcmVhdGVQb3NpdGlvbmFsUHNldWRvKGZ1bmN0aW9uKCBtYXRjaEluZGV4ZXMsIGxlbmd0aCwgYXJndW1lbnQgKSB7XG5cdFx0XHR2YXIgaSA9IGFyZ3VtZW50IDwgMCA/IGFyZ3VtZW50ICsgbGVuZ3RoIDogYXJndW1lbnQ7XG5cdFx0XHRmb3IgKCA7ICsraSA8IGxlbmd0aDsgKSB7XG5cdFx0XHRcdG1hdGNoSW5kZXhlcy5wdXNoKCBpICk7XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gbWF0Y2hJbmRleGVzO1xuXHRcdH0pXG5cdH1cbn07XG5cbkV4cHIucHNldWRvc1tcIm50aFwiXSA9IEV4cHIucHNldWRvc1tcImVxXCJdO1xuXG4vLyBBZGQgYnV0dG9uL2lucHV0IHR5cGUgcHNldWRvc1xuZm9yICggaSBpbiB7IHJhZGlvOiB0cnVlLCBjaGVja2JveDogdHJ1ZSwgZmlsZTogdHJ1ZSwgcGFzc3dvcmQ6IHRydWUsIGltYWdlOiB0cnVlIH0gKSB7XG5cdEV4cHIucHNldWRvc1sgaSBdID0gY3JlYXRlSW5wdXRQc2V1ZG8oIGkgKTtcbn1cbmZvciAoIGkgaW4geyBzdWJtaXQ6IHRydWUsIHJlc2V0OiB0cnVlIH0gKSB7XG5cdEV4cHIucHNldWRvc1sgaSBdID0gY3JlYXRlQnV0dG9uUHNldWRvKCBpICk7XG59XG5cbi8vIEVhc3kgQVBJIGZvciBjcmVhdGluZyBuZXcgc2V0RmlsdGVyc1xuZnVuY3Rpb24gc2V0RmlsdGVycygpIHt9XG5zZXRGaWx0ZXJzLnByb3RvdHlwZSA9IEV4cHIuZmlsdGVycyA9IEV4cHIucHNldWRvcztcbkV4cHIuc2V0RmlsdGVycyA9IG5ldyBzZXRGaWx0ZXJzKCk7XG5cbnRva2VuaXplID0gU2l6emxlLnRva2VuaXplID0gZnVuY3Rpb24oIHNlbGVjdG9yLCBwYXJzZU9ubHkgKSB7XG5cdHZhciBtYXRjaGVkLCBtYXRjaCwgdG9rZW5zLCB0eXBlLFxuXHRcdHNvRmFyLCBncm91cHMsIHByZUZpbHRlcnMsXG5cdFx0Y2FjaGVkID0gdG9rZW5DYWNoZVsgc2VsZWN0b3IgKyBcIiBcIiBdO1xuXG5cdGlmICggY2FjaGVkICkge1xuXHRcdHJldHVybiBwYXJzZU9ubHkgPyAwIDogY2FjaGVkLnNsaWNlKCAwICk7XG5cdH1cblxuXHRzb0ZhciA9IHNlbGVjdG9yO1xuXHRncm91cHMgPSBbXTtcblx0cHJlRmlsdGVycyA9IEV4cHIucHJlRmlsdGVyO1xuXG5cdHdoaWxlICggc29GYXIgKSB7XG5cblx0XHQvLyBDb21tYSBhbmQgZmlyc3QgcnVuXG5cdFx0aWYgKCAhbWF0Y2hlZCB8fCAobWF0Y2ggPSByY29tbWEuZXhlYyggc29GYXIgKSkgKSB7XG5cdFx0XHRpZiAoIG1hdGNoICkge1xuXHRcdFx0XHQvLyBEb24ndCBjb25zdW1lIHRyYWlsaW5nIGNvbW1hcyBhcyB2YWxpZFxuXHRcdFx0XHRzb0ZhciA9IHNvRmFyLnNsaWNlKCBtYXRjaFswXS5sZW5ndGggKSB8fCBzb0Zhcjtcblx0XHRcdH1cblx0XHRcdGdyb3Vwcy5wdXNoKCAodG9rZW5zID0gW10pICk7XG5cdFx0fVxuXG5cdFx0bWF0Y2hlZCA9IGZhbHNlO1xuXG5cdFx0Ly8gQ29tYmluYXRvcnNcblx0XHRpZiAoIChtYXRjaCA9IHJjb21iaW5hdG9ycy5leGVjKCBzb0ZhciApKSApIHtcblx0XHRcdG1hdGNoZWQgPSBtYXRjaC5zaGlmdCgpO1xuXHRcdFx0dG9rZW5zLnB1c2goe1xuXHRcdFx0XHR2YWx1ZTogbWF0Y2hlZCxcblx0XHRcdFx0Ly8gQ2FzdCBkZXNjZW5kYW50IGNvbWJpbmF0b3JzIHRvIHNwYWNlXG5cdFx0XHRcdHR5cGU6IG1hdGNoWzBdLnJlcGxhY2UoIHJ0cmltLCBcIiBcIiApXG5cdFx0XHR9KTtcblx0XHRcdHNvRmFyID0gc29GYXIuc2xpY2UoIG1hdGNoZWQubGVuZ3RoICk7XG5cdFx0fVxuXG5cdFx0Ly8gRmlsdGVyc1xuXHRcdGZvciAoIHR5cGUgaW4gRXhwci5maWx0ZXIgKSB7XG5cdFx0XHRpZiAoIChtYXRjaCA9IG1hdGNoRXhwclsgdHlwZSBdLmV4ZWMoIHNvRmFyICkpICYmICghcHJlRmlsdGVyc1sgdHlwZSBdIHx8XG5cdFx0XHRcdChtYXRjaCA9IHByZUZpbHRlcnNbIHR5cGUgXSggbWF0Y2ggKSkpICkge1xuXHRcdFx0XHRtYXRjaGVkID0gbWF0Y2guc2hpZnQoKTtcblx0XHRcdFx0dG9rZW5zLnB1c2goe1xuXHRcdFx0XHRcdHZhbHVlOiBtYXRjaGVkLFxuXHRcdFx0XHRcdHR5cGU6IHR5cGUsXG5cdFx0XHRcdFx0bWF0Y2hlczogbWF0Y2hcblx0XHRcdFx0fSk7XG5cdFx0XHRcdHNvRmFyID0gc29GYXIuc2xpY2UoIG1hdGNoZWQubGVuZ3RoICk7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0aWYgKCAhbWF0Y2hlZCApIHtcblx0XHRcdGJyZWFrO1xuXHRcdH1cblx0fVxuXG5cdC8vIFJldHVybiB0aGUgbGVuZ3RoIG9mIHRoZSBpbnZhbGlkIGV4Y2Vzc1xuXHQvLyBpZiB3ZSdyZSBqdXN0IHBhcnNpbmdcblx0Ly8gT3RoZXJ3aXNlLCB0aHJvdyBhbiBlcnJvciBvciByZXR1cm4gdG9rZW5zXG5cdHJldHVybiBwYXJzZU9ubHkgP1xuXHRcdHNvRmFyLmxlbmd0aCA6XG5cdFx0c29GYXIgP1xuXHRcdFx0U2l6emxlLmVycm9yKCBzZWxlY3RvciApIDpcblx0XHRcdC8vIENhY2hlIHRoZSB0b2tlbnNcblx0XHRcdHRva2VuQ2FjaGUoIHNlbGVjdG9yLCBncm91cHMgKS5zbGljZSggMCApO1xufTtcblxuZnVuY3Rpb24gdG9TZWxlY3RvciggdG9rZW5zICkge1xuXHR2YXIgaSA9IDAsXG5cdFx0bGVuID0gdG9rZW5zLmxlbmd0aCxcblx0XHRzZWxlY3RvciA9IFwiXCI7XG5cdGZvciAoIDsgaSA8IGxlbjsgaSsrICkge1xuXHRcdHNlbGVjdG9yICs9IHRva2Vuc1tpXS52YWx1ZTtcblx0fVxuXHRyZXR1cm4gc2VsZWN0b3I7XG59XG5cbmZ1bmN0aW9uIGFkZENvbWJpbmF0b3IoIG1hdGNoZXIsIGNvbWJpbmF0b3IsIGJhc2UgKSB7XG5cdHZhciBkaXIgPSBjb21iaW5hdG9yLmRpcixcblx0XHRza2lwID0gY29tYmluYXRvci5uZXh0LFxuXHRcdGtleSA9IHNraXAgfHwgZGlyLFxuXHRcdGNoZWNrTm9uRWxlbWVudHMgPSBiYXNlICYmIGtleSA9PT0gXCJwYXJlbnROb2RlXCIsXG5cdFx0ZG9uZU5hbWUgPSBkb25lKys7XG5cblx0cmV0dXJuIGNvbWJpbmF0b3IuZmlyc3QgP1xuXHRcdC8vIENoZWNrIGFnYWluc3QgY2xvc2VzdCBhbmNlc3Rvci9wcmVjZWRpbmcgZWxlbWVudFxuXHRcdGZ1bmN0aW9uKCBlbGVtLCBjb250ZXh0LCB4bWwgKSB7XG5cdFx0XHR3aGlsZSAoIChlbGVtID0gZWxlbVsgZGlyIF0pICkge1xuXHRcdFx0XHRpZiAoIGVsZW0ubm9kZVR5cGUgPT09IDEgfHwgY2hlY2tOb25FbGVtZW50cyApIHtcblx0XHRcdFx0XHRyZXR1cm4gbWF0Y2hlciggZWxlbSwgY29udGV4dCwgeG1sICk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHRcdHJldHVybiBmYWxzZTtcblx0XHR9IDpcblxuXHRcdC8vIENoZWNrIGFnYWluc3QgYWxsIGFuY2VzdG9yL3ByZWNlZGluZyBlbGVtZW50c1xuXHRcdGZ1bmN0aW9uKCBlbGVtLCBjb250ZXh0LCB4bWwgKSB7XG5cdFx0XHR2YXIgb2xkQ2FjaGUsIHVuaXF1ZUNhY2hlLCBvdXRlckNhY2hlLFxuXHRcdFx0XHRuZXdDYWNoZSA9IFsgZGlycnVucywgZG9uZU5hbWUgXTtcblxuXHRcdFx0Ly8gV2UgY2FuJ3Qgc2V0IGFyYml0cmFyeSBkYXRhIG9uIFhNTCBub2Rlcywgc28gdGhleSBkb24ndCBiZW5lZml0IGZyb20gY29tYmluYXRvciBjYWNoaW5nXG5cdFx0XHRpZiAoIHhtbCApIHtcblx0XHRcdFx0d2hpbGUgKCAoZWxlbSA9IGVsZW1bIGRpciBdKSApIHtcblx0XHRcdFx0XHRpZiAoIGVsZW0ubm9kZVR5cGUgPT09IDEgfHwgY2hlY2tOb25FbGVtZW50cyApIHtcblx0XHRcdFx0XHRcdGlmICggbWF0Y2hlciggZWxlbSwgY29udGV4dCwgeG1sICkgKSB7XG5cdFx0XHRcdFx0XHRcdHJldHVybiB0cnVlO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0d2hpbGUgKCAoZWxlbSA9IGVsZW1bIGRpciBdKSApIHtcblx0XHRcdFx0XHRpZiAoIGVsZW0ubm9kZVR5cGUgPT09IDEgfHwgY2hlY2tOb25FbGVtZW50cyApIHtcblx0XHRcdFx0XHRcdG91dGVyQ2FjaGUgPSBlbGVtWyBleHBhbmRvIF0gfHwgKGVsZW1bIGV4cGFuZG8gXSA9IHt9KTtcblxuXHRcdFx0XHRcdFx0Ly8gU3VwcG9ydDogSUUgPDkgb25seVxuXHRcdFx0XHRcdFx0Ly8gRGVmZW5kIGFnYWluc3QgY2xvbmVkIGF0dHJvcGVydGllcyAoalF1ZXJ5IGdoLTE3MDkpXG5cdFx0XHRcdFx0XHR1bmlxdWVDYWNoZSA9IG91dGVyQ2FjaGVbIGVsZW0udW5pcXVlSUQgXSB8fCAob3V0ZXJDYWNoZVsgZWxlbS51bmlxdWVJRCBdID0ge30pO1xuXG5cdFx0XHRcdFx0XHRpZiAoIHNraXAgJiYgc2tpcCA9PT0gZWxlbS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpICkge1xuXHRcdFx0XHRcdFx0XHRlbGVtID0gZWxlbVsgZGlyIF0gfHwgZWxlbTtcblx0XHRcdFx0XHRcdH0gZWxzZSBpZiAoIChvbGRDYWNoZSA9IHVuaXF1ZUNhY2hlWyBrZXkgXSkgJiZcblx0XHRcdFx0XHRcdFx0b2xkQ2FjaGVbIDAgXSA9PT0gZGlycnVucyAmJiBvbGRDYWNoZVsgMSBdID09PSBkb25lTmFtZSApIHtcblxuXHRcdFx0XHRcdFx0XHQvLyBBc3NpZ24gdG8gbmV3Q2FjaGUgc28gcmVzdWx0cyBiYWNrLXByb3BhZ2F0ZSB0byBwcmV2aW91cyBlbGVtZW50c1xuXHRcdFx0XHRcdFx0XHRyZXR1cm4gKG5ld0NhY2hlWyAyIF0gPSBvbGRDYWNoZVsgMiBdKTtcblx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRcdC8vIFJldXNlIG5ld2NhY2hlIHNvIHJlc3VsdHMgYmFjay1wcm9wYWdhdGUgdG8gcHJldmlvdXMgZWxlbWVudHNcblx0XHRcdFx0XHRcdFx0dW5pcXVlQ2FjaGVbIGtleSBdID0gbmV3Q2FjaGU7XG5cblx0XHRcdFx0XHRcdFx0Ly8gQSBtYXRjaCBtZWFucyB3ZSdyZSBkb25lOyBhIGZhaWwgbWVhbnMgd2UgaGF2ZSB0byBrZWVwIGNoZWNraW5nXG5cdFx0XHRcdFx0XHRcdGlmICggKG5ld0NhY2hlWyAyIF0gPSBtYXRjaGVyKCBlbGVtLCBjb250ZXh0LCB4bWwgKSkgKSB7XG5cdFx0XHRcdFx0XHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHRcdHJldHVybiBmYWxzZTtcblx0XHR9O1xufVxuXG5mdW5jdGlvbiBlbGVtZW50TWF0Y2hlciggbWF0Y2hlcnMgKSB7XG5cdHJldHVybiBtYXRjaGVycy5sZW5ndGggPiAxID9cblx0XHRmdW5jdGlvbiggZWxlbSwgY29udGV4dCwgeG1sICkge1xuXHRcdFx0dmFyIGkgPSBtYXRjaGVycy5sZW5ndGg7XG5cdFx0XHR3aGlsZSAoIGktLSApIHtcblx0XHRcdFx0aWYgKCAhbWF0Y2hlcnNbaV0oIGVsZW0sIGNvbnRleHQsIHhtbCApICkge1xuXHRcdFx0XHRcdHJldHVybiBmYWxzZTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0fSA6XG5cdFx0bWF0Y2hlcnNbMF07XG59XG5cbmZ1bmN0aW9uIG11bHRpcGxlQ29udGV4dHMoIHNlbGVjdG9yLCBjb250ZXh0cywgcmVzdWx0cyApIHtcblx0dmFyIGkgPSAwLFxuXHRcdGxlbiA9IGNvbnRleHRzLmxlbmd0aDtcblx0Zm9yICggOyBpIDwgbGVuOyBpKysgKSB7XG5cdFx0U2l6emxlKCBzZWxlY3RvciwgY29udGV4dHNbaV0sIHJlc3VsdHMgKTtcblx0fVxuXHRyZXR1cm4gcmVzdWx0cztcbn1cblxuZnVuY3Rpb24gY29uZGVuc2UoIHVubWF0Y2hlZCwgbWFwLCBmaWx0ZXIsIGNvbnRleHQsIHhtbCApIHtcblx0dmFyIGVsZW0sXG5cdFx0bmV3VW5tYXRjaGVkID0gW10sXG5cdFx0aSA9IDAsXG5cdFx0bGVuID0gdW5tYXRjaGVkLmxlbmd0aCxcblx0XHRtYXBwZWQgPSBtYXAgIT0gbnVsbDtcblxuXHRmb3IgKCA7IGkgPCBsZW47IGkrKyApIHtcblx0XHRpZiAoIChlbGVtID0gdW5tYXRjaGVkW2ldKSApIHtcblx0XHRcdGlmICggIWZpbHRlciB8fCBmaWx0ZXIoIGVsZW0sIGNvbnRleHQsIHhtbCApICkge1xuXHRcdFx0XHRuZXdVbm1hdGNoZWQucHVzaCggZWxlbSApO1xuXHRcdFx0XHRpZiAoIG1hcHBlZCApIHtcblx0XHRcdFx0XHRtYXAucHVzaCggaSApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0cmV0dXJuIG5ld1VubWF0Y2hlZDtcbn1cblxuZnVuY3Rpb24gc2V0TWF0Y2hlciggcHJlRmlsdGVyLCBzZWxlY3RvciwgbWF0Y2hlciwgcG9zdEZpbHRlciwgcG9zdEZpbmRlciwgcG9zdFNlbGVjdG9yICkge1xuXHRpZiAoIHBvc3RGaWx0ZXIgJiYgIXBvc3RGaWx0ZXJbIGV4cGFuZG8gXSApIHtcblx0XHRwb3N0RmlsdGVyID0gc2V0TWF0Y2hlciggcG9zdEZpbHRlciApO1xuXHR9XG5cdGlmICggcG9zdEZpbmRlciAmJiAhcG9zdEZpbmRlclsgZXhwYW5kbyBdICkge1xuXHRcdHBvc3RGaW5kZXIgPSBzZXRNYXRjaGVyKCBwb3N0RmluZGVyLCBwb3N0U2VsZWN0b3IgKTtcblx0fVxuXHRyZXR1cm4gbWFya0Z1bmN0aW9uKGZ1bmN0aW9uKCBzZWVkLCByZXN1bHRzLCBjb250ZXh0LCB4bWwgKSB7XG5cdFx0dmFyIHRlbXAsIGksIGVsZW0sXG5cdFx0XHRwcmVNYXAgPSBbXSxcblx0XHRcdHBvc3RNYXAgPSBbXSxcblx0XHRcdHByZWV4aXN0aW5nID0gcmVzdWx0cy5sZW5ndGgsXG5cblx0XHRcdC8vIEdldCBpbml0aWFsIGVsZW1lbnRzIGZyb20gc2VlZCBvciBjb250ZXh0XG5cdFx0XHRlbGVtcyA9IHNlZWQgfHwgbXVsdGlwbGVDb250ZXh0cyggc2VsZWN0b3IgfHwgXCIqXCIsIGNvbnRleHQubm9kZVR5cGUgPyBbIGNvbnRleHQgXSA6IGNvbnRleHQsIFtdICksXG5cblx0XHRcdC8vIFByZWZpbHRlciB0byBnZXQgbWF0Y2hlciBpbnB1dCwgcHJlc2VydmluZyBhIG1hcCBmb3Igc2VlZC1yZXN1bHRzIHN5bmNocm9uaXphdGlvblxuXHRcdFx0bWF0Y2hlckluID0gcHJlRmlsdGVyICYmICggc2VlZCB8fCAhc2VsZWN0b3IgKSA/XG5cdFx0XHRcdGNvbmRlbnNlKCBlbGVtcywgcHJlTWFwLCBwcmVGaWx0ZXIsIGNvbnRleHQsIHhtbCApIDpcblx0XHRcdFx0ZWxlbXMsXG5cblx0XHRcdG1hdGNoZXJPdXQgPSBtYXRjaGVyID9cblx0XHRcdFx0Ly8gSWYgd2UgaGF2ZSBhIHBvc3RGaW5kZXIsIG9yIGZpbHRlcmVkIHNlZWQsIG9yIG5vbi1zZWVkIHBvc3RGaWx0ZXIgb3IgcHJlZXhpc3RpbmcgcmVzdWx0cyxcblx0XHRcdFx0cG9zdEZpbmRlciB8fCAoIHNlZWQgPyBwcmVGaWx0ZXIgOiBwcmVleGlzdGluZyB8fCBwb3N0RmlsdGVyICkgP1xuXG5cdFx0XHRcdFx0Ly8gLi4uaW50ZXJtZWRpYXRlIHByb2Nlc3NpbmcgaXMgbmVjZXNzYXJ5XG5cdFx0XHRcdFx0W10gOlxuXG5cdFx0XHRcdFx0Ly8gLi4ub3RoZXJ3aXNlIHVzZSByZXN1bHRzIGRpcmVjdGx5XG5cdFx0XHRcdFx0cmVzdWx0cyA6XG5cdFx0XHRcdG1hdGNoZXJJbjtcblxuXHRcdC8vIEZpbmQgcHJpbWFyeSBtYXRjaGVzXG5cdFx0aWYgKCBtYXRjaGVyICkge1xuXHRcdFx0bWF0Y2hlciggbWF0Y2hlckluLCBtYXRjaGVyT3V0LCBjb250ZXh0LCB4bWwgKTtcblx0XHR9XG5cblx0XHQvLyBBcHBseSBwb3N0RmlsdGVyXG5cdFx0aWYgKCBwb3N0RmlsdGVyICkge1xuXHRcdFx0dGVtcCA9IGNvbmRlbnNlKCBtYXRjaGVyT3V0LCBwb3N0TWFwICk7XG5cdFx0XHRwb3N0RmlsdGVyKCB0ZW1wLCBbXSwgY29udGV4dCwgeG1sICk7XG5cblx0XHRcdC8vIFVuLW1hdGNoIGZhaWxpbmcgZWxlbWVudHMgYnkgbW92aW5nIHRoZW0gYmFjayB0byBtYXRjaGVySW5cblx0XHRcdGkgPSB0ZW1wLmxlbmd0aDtcblx0XHRcdHdoaWxlICggaS0tICkge1xuXHRcdFx0XHRpZiAoIChlbGVtID0gdGVtcFtpXSkgKSB7XG5cdFx0XHRcdFx0bWF0Y2hlck91dFsgcG9zdE1hcFtpXSBdID0gIShtYXRjaGVySW5bIHBvc3RNYXBbaV0gXSA9IGVsZW0pO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0aWYgKCBzZWVkICkge1xuXHRcdFx0aWYgKCBwb3N0RmluZGVyIHx8IHByZUZpbHRlciApIHtcblx0XHRcdFx0aWYgKCBwb3N0RmluZGVyICkge1xuXHRcdFx0XHRcdC8vIEdldCB0aGUgZmluYWwgbWF0Y2hlck91dCBieSBjb25kZW5zaW5nIHRoaXMgaW50ZXJtZWRpYXRlIGludG8gcG9zdEZpbmRlciBjb250ZXh0c1xuXHRcdFx0XHRcdHRlbXAgPSBbXTtcblx0XHRcdFx0XHRpID0gbWF0Y2hlck91dC5sZW5ndGg7XG5cdFx0XHRcdFx0d2hpbGUgKCBpLS0gKSB7XG5cdFx0XHRcdFx0XHRpZiAoIChlbGVtID0gbWF0Y2hlck91dFtpXSkgKSB7XG5cdFx0XHRcdFx0XHRcdC8vIFJlc3RvcmUgbWF0Y2hlckluIHNpbmNlIGVsZW0gaXMgbm90IHlldCBhIGZpbmFsIG1hdGNoXG5cdFx0XHRcdFx0XHRcdHRlbXAucHVzaCggKG1hdGNoZXJJbltpXSA9IGVsZW0pICk7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdHBvc3RGaW5kZXIoIG51bGwsIChtYXRjaGVyT3V0ID0gW10pLCB0ZW1wLCB4bWwgKTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIE1vdmUgbWF0Y2hlZCBlbGVtZW50cyBmcm9tIHNlZWQgdG8gcmVzdWx0cyB0byBrZWVwIHRoZW0gc3luY2hyb25pemVkXG5cdFx0XHRcdGkgPSBtYXRjaGVyT3V0Lmxlbmd0aDtcblx0XHRcdFx0d2hpbGUgKCBpLS0gKSB7XG5cdFx0XHRcdFx0aWYgKCAoZWxlbSA9IG1hdGNoZXJPdXRbaV0pICYmXG5cdFx0XHRcdFx0XHQodGVtcCA9IHBvc3RGaW5kZXIgPyBpbmRleE9mKCBzZWVkLCBlbGVtICkgOiBwcmVNYXBbaV0pID4gLTEgKSB7XG5cblx0XHRcdFx0XHRcdHNlZWRbdGVtcF0gPSAhKHJlc3VsdHNbdGVtcF0gPSBlbGVtKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdC8vIEFkZCBlbGVtZW50cyB0byByZXN1bHRzLCB0aHJvdWdoIHBvc3RGaW5kZXIgaWYgZGVmaW5lZFxuXHRcdH0gZWxzZSB7XG5cdFx0XHRtYXRjaGVyT3V0ID0gY29uZGVuc2UoXG5cdFx0XHRcdG1hdGNoZXJPdXQgPT09IHJlc3VsdHMgP1xuXHRcdFx0XHRcdG1hdGNoZXJPdXQuc3BsaWNlKCBwcmVleGlzdGluZywgbWF0Y2hlck91dC5sZW5ndGggKSA6XG5cdFx0XHRcdFx0bWF0Y2hlck91dFxuXHRcdFx0KTtcblx0XHRcdGlmICggcG9zdEZpbmRlciApIHtcblx0XHRcdFx0cG9zdEZpbmRlciggbnVsbCwgcmVzdWx0cywgbWF0Y2hlck91dCwgeG1sICk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRwdXNoLmFwcGx5KCByZXN1bHRzLCBtYXRjaGVyT3V0ICk7XG5cdFx0XHR9XG5cdFx0fVxuXHR9KTtcbn1cblxuZnVuY3Rpb24gbWF0Y2hlckZyb21Ub2tlbnMoIHRva2VucyApIHtcblx0dmFyIGNoZWNrQ29udGV4dCwgbWF0Y2hlciwgaixcblx0XHRsZW4gPSB0b2tlbnMubGVuZ3RoLFxuXHRcdGxlYWRpbmdSZWxhdGl2ZSA9IEV4cHIucmVsYXRpdmVbIHRva2Vuc1swXS50eXBlIF0sXG5cdFx0aW1wbGljaXRSZWxhdGl2ZSA9IGxlYWRpbmdSZWxhdGl2ZSB8fCBFeHByLnJlbGF0aXZlW1wiIFwiXSxcblx0XHRpID0gbGVhZGluZ1JlbGF0aXZlID8gMSA6IDAsXG5cblx0XHQvLyBUaGUgZm91bmRhdGlvbmFsIG1hdGNoZXIgZW5zdXJlcyB0aGF0IGVsZW1lbnRzIGFyZSByZWFjaGFibGUgZnJvbSB0b3AtbGV2ZWwgY29udGV4dChzKVxuXHRcdG1hdGNoQ29udGV4dCA9IGFkZENvbWJpbmF0b3IoIGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0cmV0dXJuIGVsZW0gPT09IGNoZWNrQ29udGV4dDtcblx0XHR9LCBpbXBsaWNpdFJlbGF0aXZlLCB0cnVlICksXG5cdFx0bWF0Y2hBbnlDb250ZXh0ID0gYWRkQ29tYmluYXRvciggZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRyZXR1cm4gaW5kZXhPZiggY2hlY2tDb250ZXh0LCBlbGVtICkgPiAtMTtcblx0XHR9LCBpbXBsaWNpdFJlbGF0aXZlLCB0cnVlICksXG5cdFx0bWF0Y2hlcnMgPSBbIGZ1bmN0aW9uKCBlbGVtLCBjb250ZXh0LCB4bWwgKSB7XG5cdFx0XHR2YXIgcmV0ID0gKCAhbGVhZGluZ1JlbGF0aXZlICYmICggeG1sIHx8IGNvbnRleHQgIT09IG91dGVybW9zdENvbnRleHQgKSApIHx8IChcblx0XHRcdFx0KGNoZWNrQ29udGV4dCA9IGNvbnRleHQpLm5vZGVUeXBlID9cblx0XHRcdFx0XHRtYXRjaENvbnRleHQoIGVsZW0sIGNvbnRleHQsIHhtbCApIDpcblx0XHRcdFx0XHRtYXRjaEFueUNvbnRleHQoIGVsZW0sIGNvbnRleHQsIHhtbCApICk7XG5cdFx0XHQvLyBBdm9pZCBoYW5naW5nIG9udG8gZWxlbWVudCAoaXNzdWUgIzI5OSlcblx0XHRcdGNoZWNrQ29udGV4dCA9IG51bGw7XG5cdFx0XHRyZXR1cm4gcmV0O1xuXHRcdH0gXTtcblxuXHRmb3IgKCA7IGkgPCBsZW47IGkrKyApIHtcblx0XHRpZiAoIChtYXRjaGVyID0gRXhwci5yZWxhdGl2ZVsgdG9rZW5zW2ldLnR5cGUgXSkgKSB7XG5cdFx0XHRtYXRjaGVycyA9IFsgYWRkQ29tYmluYXRvcihlbGVtZW50TWF0Y2hlciggbWF0Y2hlcnMgKSwgbWF0Y2hlcikgXTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0bWF0Y2hlciA9IEV4cHIuZmlsdGVyWyB0b2tlbnNbaV0udHlwZSBdLmFwcGx5KCBudWxsLCB0b2tlbnNbaV0ubWF0Y2hlcyApO1xuXG5cdFx0XHQvLyBSZXR1cm4gc3BlY2lhbCB1cG9uIHNlZWluZyBhIHBvc2l0aW9uYWwgbWF0Y2hlclxuXHRcdFx0aWYgKCBtYXRjaGVyWyBleHBhbmRvIF0gKSB7XG5cdFx0XHRcdC8vIEZpbmQgdGhlIG5leHQgcmVsYXRpdmUgb3BlcmF0b3IgKGlmIGFueSkgZm9yIHByb3BlciBoYW5kbGluZ1xuXHRcdFx0XHRqID0gKytpO1xuXHRcdFx0XHRmb3IgKCA7IGogPCBsZW47IGorKyApIHtcblx0XHRcdFx0XHRpZiAoIEV4cHIucmVsYXRpdmVbIHRva2Vuc1tqXS50eXBlIF0gKSB7XG5cdFx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdFx0cmV0dXJuIHNldE1hdGNoZXIoXG5cdFx0XHRcdFx0aSA+IDEgJiYgZWxlbWVudE1hdGNoZXIoIG1hdGNoZXJzICksXG5cdFx0XHRcdFx0aSA+IDEgJiYgdG9TZWxlY3Rvcihcblx0XHRcdFx0XHRcdC8vIElmIHRoZSBwcmVjZWRpbmcgdG9rZW4gd2FzIGEgZGVzY2VuZGFudCBjb21iaW5hdG9yLCBpbnNlcnQgYW4gaW1wbGljaXQgYW55LWVsZW1lbnQgYCpgXG5cdFx0XHRcdFx0XHR0b2tlbnMuc2xpY2UoIDAsIGkgLSAxICkuY29uY2F0KHsgdmFsdWU6IHRva2Vuc1sgaSAtIDIgXS50eXBlID09PSBcIiBcIiA/IFwiKlwiIDogXCJcIiB9KVxuXHRcdFx0XHRcdCkucmVwbGFjZSggcnRyaW0sIFwiJDFcIiApLFxuXHRcdFx0XHRcdG1hdGNoZXIsXG5cdFx0XHRcdFx0aSA8IGogJiYgbWF0Y2hlckZyb21Ub2tlbnMoIHRva2Vucy5zbGljZSggaSwgaiApICksXG5cdFx0XHRcdFx0aiA8IGxlbiAmJiBtYXRjaGVyRnJvbVRva2VucyggKHRva2VucyA9IHRva2Vucy5zbGljZSggaiApKSApLFxuXHRcdFx0XHRcdGogPCBsZW4gJiYgdG9TZWxlY3RvciggdG9rZW5zIClcblx0XHRcdFx0KTtcblx0XHRcdH1cblx0XHRcdG1hdGNoZXJzLnB1c2goIG1hdGNoZXIgKTtcblx0XHR9XG5cdH1cblxuXHRyZXR1cm4gZWxlbWVudE1hdGNoZXIoIG1hdGNoZXJzICk7XG59XG5cbmZ1bmN0aW9uIG1hdGNoZXJGcm9tR3JvdXBNYXRjaGVycyggZWxlbWVudE1hdGNoZXJzLCBzZXRNYXRjaGVycyApIHtcblx0dmFyIGJ5U2V0ID0gc2V0TWF0Y2hlcnMubGVuZ3RoID4gMCxcblx0XHRieUVsZW1lbnQgPSBlbGVtZW50TWF0Y2hlcnMubGVuZ3RoID4gMCxcblx0XHRzdXBlck1hdGNoZXIgPSBmdW5jdGlvbiggc2VlZCwgY29udGV4dCwgeG1sLCByZXN1bHRzLCBvdXRlcm1vc3QgKSB7XG5cdFx0XHR2YXIgZWxlbSwgaiwgbWF0Y2hlcixcblx0XHRcdFx0bWF0Y2hlZENvdW50ID0gMCxcblx0XHRcdFx0aSA9IFwiMFwiLFxuXHRcdFx0XHR1bm1hdGNoZWQgPSBzZWVkICYmIFtdLFxuXHRcdFx0XHRzZXRNYXRjaGVkID0gW10sXG5cdFx0XHRcdGNvbnRleHRCYWNrdXAgPSBvdXRlcm1vc3RDb250ZXh0LFxuXHRcdFx0XHQvLyBXZSBtdXN0IGFsd2F5cyBoYXZlIGVpdGhlciBzZWVkIGVsZW1lbnRzIG9yIG91dGVybW9zdCBjb250ZXh0XG5cdFx0XHRcdGVsZW1zID0gc2VlZCB8fCBieUVsZW1lbnQgJiYgRXhwci5maW5kW1wiVEFHXCJdKCBcIipcIiwgb3V0ZXJtb3N0ICksXG5cdFx0XHRcdC8vIFVzZSBpbnRlZ2VyIGRpcnJ1bnMgaWZmIHRoaXMgaXMgdGhlIG91dGVybW9zdCBtYXRjaGVyXG5cdFx0XHRcdGRpcnJ1bnNVbmlxdWUgPSAoZGlycnVucyArPSBjb250ZXh0QmFja3VwID09IG51bGwgPyAxIDogTWF0aC5yYW5kb20oKSB8fCAwLjEpLFxuXHRcdFx0XHRsZW4gPSBlbGVtcy5sZW5ndGg7XG5cblx0XHRcdGlmICggb3V0ZXJtb3N0ICkge1xuXHRcdFx0XHRvdXRlcm1vc3RDb250ZXh0ID0gY29udGV4dCA9PT0gZG9jdW1lbnQgfHwgY29udGV4dCB8fCBvdXRlcm1vc3Q7XG5cdFx0XHR9XG5cblx0XHRcdC8vIEFkZCBlbGVtZW50cyBwYXNzaW5nIGVsZW1lbnRNYXRjaGVycyBkaXJlY3RseSB0byByZXN1bHRzXG5cdFx0XHQvLyBTdXBwb3J0OiBJRTw5LCBTYWZhcmlcblx0XHRcdC8vIFRvbGVyYXRlIE5vZGVMaXN0IHByb3BlcnRpZXMgKElFOiBcImxlbmd0aFwiOyBTYWZhcmk6IDxudW1iZXI+KSBtYXRjaGluZyBlbGVtZW50cyBieSBpZFxuXHRcdFx0Zm9yICggOyBpICE9PSBsZW4gJiYgKGVsZW0gPSBlbGVtc1tpXSkgIT0gbnVsbDsgaSsrICkge1xuXHRcdFx0XHRpZiAoIGJ5RWxlbWVudCAmJiBlbGVtICkge1xuXHRcdFx0XHRcdGogPSAwO1xuXHRcdFx0XHRcdGlmICggIWNvbnRleHQgJiYgZWxlbS5vd25lckRvY3VtZW50ICE9PSBkb2N1bWVudCApIHtcblx0XHRcdFx0XHRcdHNldERvY3VtZW50KCBlbGVtICk7XG5cdFx0XHRcdFx0XHR4bWwgPSAhZG9jdW1lbnRJc0hUTUw7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdHdoaWxlICggKG1hdGNoZXIgPSBlbGVtZW50TWF0Y2hlcnNbaisrXSkgKSB7XG5cdFx0XHRcdFx0XHRpZiAoIG1hdGNoZXIoIGVsZW0sIGNvbnRleHQgfHwgZG9jdW1lbnQsIHhtbCkgKSB7XG5cdFx0XHRcdFx0XHRcdHJlc3VsdHMucHVzaCggZWxlbSApO1xuXHRcdFx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0aWYgKCBvdXRlcm1vc3QgKSB7XG5cdFx0XHRcdFx0XHRkaXJydW5zID0gZGlycnVuc1VuaXF1ZTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBUcmFjayB1bm1hdGNoZWQgZWxlbWVudHMgZm9yIHNldCBmaWx0ZXJzXG5cdFx0XHRcdGlmICggYnlTZXQgKSB7XG5cdFx0XHRcdFx0Ly8gVGhleSB3aWxsIGhhdmUgZ29uZSB0aHJvdWdoIGFsbCBwb3NzaWJsZSBtYXRjaGVyc1xuXHRcdFx0XHRcdGlmICggKGVsZW0gPSAhbWF0Y2hlciAmJiBlbGVtKSApIHtcblx0XHRcdFx0XHRcdG1hdGNoZWRDb3VudC0tO1xuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdC8vIExlbmd0aGVuIHRoZSBhcnJheSBmb3IgZXZlcnkgZWxlbWVudCwgbWF0Y2hlZCBvciBub3Rcblx0XHRcdFx0XHRpZiAoIHNlZWQgKSB7XG5cdFx0XHRcdFx0XHR1bm1hdGNoZWQucHVzaCggZWxlbSApO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHQvLyBgaWAgaXMgbm93IHRoZSBjb3VudCBvZiBlbGVtZW50cyB2aXNpdGVkIGFib3ZlLCBhbmQgYWRkaW5nIGl0IHRvIGBtYXRjaGVkQ291bnRgXG5cdFx0XHQvLyBtYWtlcyB0aGUgbGF0dGVyIG5vbm5lZ2F0aXZlLlxuXHRcdFx0bWF0Y2hlZENvdW50ICs9IGk7XG5cblx0XHRcdC8vIEFwcGx5IHNldCBmaWx0ZXJzIHRvIHVubWF0Y2hlZCBlbGVtZW50c1xuXHRcdFx0Ly8gTk9URTogVGhpcyBjYW4gYmUgc2tpcHBlZCBpZiB0aGVyZSBhcmUgbm8gdW5tYXRjaGVkIGVsZW1lbnRzIChpLmUuLCBgbWF0Y2hlZENvdW50YFxuXHRcdFx0Ly8gZXF1YWxzIGBpYCksIHVubGVzcyB3ZSBkaWRuJ3QgdmlzaXQgX2FueV8gZWxlbWVudHMgaW4gdGhlIGFib3ZlIGxvb3AgYmVjYXVzZSB3ZSBoYXZlXG5cdFx0XHQvLyBubyBlbGVtZW50IG1hdGNoZXJzIGFuZCBubyBzZWVkLlxuXHRcdFx0Ly8gSW5jcmVtZW50aW5nIGFuIGluaXRpYWxseS1zdHJpbmcgXCIwXCIgYGlgIGFsbG93cyBgaWAgdG8gcmVtYWluIGEgc3RyaW5nIG9ubHkgaW4gdGhhdFxuXHRcdFx0Ly8gY2FzZSwgd2hpY2ggd2lsbCByZXN1bHQgaW4gYSBcIjAwXCIgYG1hdGNoZWRDb3VudGAgdGhhdCBkaWZmZXJzIGZyb20gYGlgIGJ1dCBpcyBhbHNvXG5cdFx0XHQvLyBudW1lcmljYWxseSB6ZXJvLlxuXHRcdFx0aWYgKCBieVNldCAmJiBpICE9PSBtYXRjaGVkQ291bnQgKSB7XG5cdFx0XHRcdGogPSAwO1xuXHRcdFx0XHR3aGlsZSAoIChtYXRjaGVyID0gc2V0TWF0Y2hlcnNbaisrXSkgKSB7XG5cdFx0XHRcdFx0bWF0Y2hlciggdW5tYXRjaGVkLCBzZXRNYXRjaGVkLCBjb250ZXh0LCB4bWwgKTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdGlmICggc2VlZCApIHtcblx0XHRcdFx0XHQvLyBSZWludGVncmF0ZSBlbGVtZW50IG1hdGNoZXMgdG8gZWxpbWluYXRlIHRoZSBuZWVkIGZvciBzb3J0aW5nXG5cdFx0XHRcdFx0aWYgKCBtYXRjaGVkQ291bnQgPiAwICkge1xuXHRcdFx0XHRcdFx0d2hpbGUgKCBpLS0gKSB7XG5cdFx0XHRcdFx0XHRcdGlmICggISh1bm1hdGNoZWRbaV0gfHwgc2V0TWF0Y2hlZFtpXSkgKSB7XG5cdFx0XHRcdFx0XHRcdFx0c2V0TWF0Y2hlZFtpXSA9IHBvcC5jYWxsKCByZXN1bHRzICk7XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHQvLyBEaXNjYXJkIGluZGV4IHBsYWNlaG9sZGVyIHZhbHVlcyB0byBnZXQgb25seSBhY3R1YWwgbWF0Y2hlc1xuXHRcdFx0XHRcdHNldE1hdGNoZWQgPSBjb25kZW5zZSggc2V0TWF0Y2hlZCApO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gQWRkIG1hdGNoZXMgdG8gcmVzdWx0c1xuXHRcdFx0XHRwdXNoLmFwcGx5KCByZXN1bHRzLCBzZXRNYXRjaGVkICk7XG5cblx0XHRcdFx0Ly8gU2VlZGxlc3Mgc2V0IG1hdGNoZXMgc3VjY2VlZGluZyBtdWx0aXBsZSBzdWNjZXNzZnVsIG1hdGNoZXJzIHN0aXB1bGF0ZSBzb3J0aW5nXG5cdFx0XHRcdGlmICggb3V0ZXJtb3N0ICYmICFzZWVkICYmIHNldE1hdGNoZWQubGVuZ3RoID4gMCAmJlxuXHRcdFx0XHRcdCggbWF0Y2hlZENvdW50ICsgc2V0TWF0Y2hlcnMubGVuZ3RoICkgPiAxICkge1xuXG5cdFx0XHRcdFx0U2l6emxlLnVuaXF1ZVNvcnQoIHJlc3VsdHMgKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHQvLyBPdmVycmlkZSBtYW5pcHVsYXRpb24gb2YgZ2xvYmFscyBieSBuZXN0ZWQgbWF0Y2hlcnNcblx0XHRcdGlmICggb3V0ZXJtb3N0ICkge1xuXHRcdFx0XHRkaXJydW5zID0gZGlycnVuc1VuaXF1ZTtcblx0XHRcdFx0b3V0ZXJtb3N0Q29udGV4dCA9IGNvbnRleHRCYWNrdXA7XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiB1bm1hdGNoZWQ7XG5cdFx0fTtcblxuXHRyZXR1cm4gYnlTZXQgP1xuXHRcdG1hcmtGdW5jdGlvbiggc3VwZXJNYXRjaGVyICkgOlxuXHRcdHN1cGVyTWF0Y2hlcjtcbn1cblxuY29tcGlsZSA9IFNpenpsZS5jb21waWxlID0gZnVuY3Rpb24oIHNlbGVjdG9yLCBtYXRjaCAvKiBJbnRlcm5hbCBVc2UgT25seSAqLyApIHtcblx0dmFyIGksXG5cdFx0c2V0TWF0Y2hlcnMgPSBbXSxcblx0XHRlbGVtZW50TWF0Y2hlcnMgPSBbXSxcblx0XHRjYWNoZWQgPSBjb21waWxlckNhY2hlWyBzZWxlY3RvciArIFwiIFwiIF07XG5cblx0aWYgKCAhY2FjaGVkICkge1xuXHRcdC8vIEdlbmVyYXRlIGEgZnVuY3Rpb24gb2YgcmVjdXJzaXZlIGZ1bmN0aW9ucyB0aGF0IGNhbiBiZSB1c2VkIHRvIGNoZWNrIGVhY2ggZWxlbWVudFxuXHRcdGlmICggIW1hdGNoICkge1xuXHRcdFx0bWF0Y2ggPSB0b2tlbml6ZSggc2VsZWN0b3IgKTtcblx0XHR9XG5cdFx0aSA9IG1hdGNoLmxlbmd0aDtcblx0XHR3aGlsZSAoIGktLSApIHtcblx0XHRcdGNhY2hlZCA9IG1hdGNoZXJGcm9tVG9rZW5zKCBtYXRjaFtpXSApO1xuXHRcdFx0aWYgKCBjYWNoZWRbIGV4cGFuZG8gXSApIHtcblx0XHRcdFx0c2V0TWF0Y2hlcnMucHVzaCggY2FjaGVkICk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRlbGVtZW50TWF0Y2hlcnMucHVzaCggY2FjaGVkICk7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Ly8gQ2FjaGUgdGhlIGNvbXBpbGVkIGZ1bmN0aW9uXG5cdFx0Y2FjaGVkID0gY29tcGlsZXJDYWNoZSggc2VsZWN0b3IsIG1hdGNoZXJGcm9tR3JvdXBNYXRjaGVycyggZWxlbWVudE1hdGNoZXJzLCBzZXRNYXRjaGVycyApICk7XG5cblx0XHQvLyBTYXZlIHNlbGVjdG9yIGFuZCB0b2tlbml6YXRpb25cblx0XHRjYWNoZWQuc2VsZWN0b3IgPSBzZWxlY3Rvcjtcblx0fVxuXHRyZXR1cm4gY2FjaGVkO1xufTtcblxuLyoqXG4gKiBBIGxvdy1sZXZlbCBzZWxlY3Rpb24gZnVuY3Rpb24gdGhhdCB3b3JrcyB3aXRoIFNpenpsZSdzIGNvbXBpbGVkXG4gKiAgc2VsZWN0b3IgZnVuY3Rpb25zXG4gKiBAcGFyYW0ge1N0cmluZ3xGdW5jdGlvbn0gc2VsZWN0b3IgQSBzZWxlY3RvciBvciBhIHByZS1jb21waWxlZFxuICogIHNlbGVjdG9yIGZ1bmN0aW9uIGJ1aWx0IHdpdGggU2l6emxlLmNvbXBpbGVcbiAqIEBwYXJhbSB7RWxlbWVudH0gY29udGV4dFxuICogQHBhcmFtIHtBcnJheX0gW3Jlc3VsdHNdXG4gKiBAcGFyYW0ge0FycmF5fSBbc2VlZF0gQSBzZXQgb2YgZWxlbWVudHMgdG8gbWF0Y2ggYWdhaW5zdFxuICovXG5zZWxlY3QgPSBTaXp6bGUuc2VsZWN0ID0gZnVuY3Rpb24oIHNlbGVjdG9yLCBjb250ZXh0LCByZXN1bHRzLCBzZWVkICkge1xuXHR2YXIgaSwgdG9rZW5zLCB0b2tlbiwgdHlwZSwgZmluZCxcblx0XHRjb21waWxlZCA9IHR5cGVvZiBzZWxlY3RvciA9PT0gXCJmdW5jdGlvblwiICYmIHNlbGVjdG9yLFxuXHRcdG1hdGNoID0gIXNlZWQgJiYgdG9rZW5pemUoIChzZWxlY3RvciA9IGNvbXBpbGVkLnNlbGVjdG9yIHx8IHNlbGVjdG9yKSApO1xuXG5cdHJlc3VsdHMgPSByZXN1bHRzIHx8IFtdO1xuXG5cdC8vIFRyeSB0byBtaW5pbWl6ZSBvcGVyYXRpb25zIGlmIHRoZXJlIGlzIG9ubHkgb25lIHNlbGVjdG9yIGluIHRoZSBsaXN0IGFuZCBubyBzZWVkXG5cdC8vICh0aGUgbGF0dGVyIG9mIHdoaWNoIGd1YXJhbnRlZXMgdXMgY29udGV4dClcblx0aWYgKCBtYXRjaC5sZW5ndGggPT09IDEgKSB7XG5cblx0XHQvLyBSZWR1Y2UgY29udGV4dCBpZiB0aGUgbGVhZGluZyBjb21wb3VuZCBzZWxlY3RvciBpcyBhbiBJRFxuXHRcdHRva2VucyA9IG1hdGNoWzBdID0gbWF0Y2hbMF0uc2xpY2UoIDAgKTtcblx0XHRpZiAoIHRva2Vucy5sZW5ndGggPiAyICYmICh0b2tlbiA9IHRva2Vuc1swXSkudHlwZSA9PT0gXCJJRFwiICYmXG5cdFx0XHRcdGNvbnRleHQubm9kZVR5cGUgPT09IDkgJiYgZG9jdW1lbnRJc0hUTUwgJiYgRXhwci5yZWxhdGl2ZVsgdG9rZW5zWzFdLnR5cGUgXSApIHtcblxuXHRcdFx0Y29udGV4dCA9ICggRXhwci5maW5kW1wiSURcIl0oIHRva2VuLm1hdGNoZXNbMF0ucmVwbGFjZShydW5lc2NhcGUsIGZ1bmVzY2FwZSksIGNvbnRleHQgKSB8fCBbXSApWzBdO1xuXHRcdFx0aWYgKCAhY29udGV4dCApIHtcblx0XHRcdFx0cmV0dXJuIHJlc3VsdHM7XG5cblx0XHRcdC8vIFByZWNvbXBpbGVkIG1hdGNoZXJzIHdpbGwgc3RpbGwgdmVyaWZ5IGFuY2VzdHJ5LCBzbyBzdGVwIHVwIGEgbGV2ZWxcblx0XHRcdH0gZWxzZSBpZiAoIGNvbXBpbGVkICkge1xuXHRcdFx0XHRjb250ZXh0ID0gY29udGV4dC5wYXJlbnROb2RlO1xuXHRcdFx0fVxuXG5cdFx0XHRzZWxlY3RvciA9IHNlbGVjdG9yLnNsaWNlKCB0b2tlbnMuc2hpZnQoKS52YWx1ZS5sZW5ndGggKTtcblx0XHR9XG5cblx0XHQvLyBGZXRjaCBhIHNlZWQgc2V0IGZvciByaWdodC10by1sZWZ0IG1hdGNoaW5nXG5cdFx0aSA9IG1hdGNoRXhwcltcIm5lZWRzQ29udGV4dFwiXS50ZXN0KCBzZWxlY3RvciApID8gMCA6IHRva2Vucy5sZW5ndGg7XG5cdFx0d2hpbGUgKCBpLS0gKSB7XG5cdFx0XHR0b2tlbiA9IHRva2Vuc1tpXTtcblxuXHRcdFx0Ly8gQWJvcnQgaWYgd2UgaGl0IGEgY29tYmluYXRvclxuXHRcdFx0aWYgKCBFeHByLnJlbGF0aXZlWyAodHlwZSA9IHRva2VuLnR5cGUpIF0gKSB7XG5cdFx0XHRcdGJyZWFrO1xuXHRcdFx0fVxuXHRcdFx0aWYgKCAoZmluZCA9IEV4cHIuZmluZFsgdHlwZSBdKSApIHtcblx0XHRcdFx0Ly8gU2VhcmNoLCBleHBhbmRpbmcgY29udGV4dCBmb3IgbGVhZGluZyBzaWJsaW5nIGNvbWJpbmF0b3JzXG5cdFx0XHRcdGlmICggKHNlZWQgPSBmaW5kKFxuXHRcdFx0XHRcdHRva2VuLm1hdGNoZXNbMF0ucmVwbGFjZSggcnVuZXNjYXBlLCBmdW5lc2NhcGUgKSxcblx0XHRcdFx0XHRyc2libGluZy50ZXN0KCB0b2tlbnNbMF0udHlwZSApICYmIHRlc3RDb250ZXh0KCBjb250ZXh0LnBhcmVudE5vZGUgKSB8fCBjb250ZXh0XG5cdFx0XHRcdCkpICkge1xuXG5cdFx0XHRcdFx0Ly8gSWYgc2VlZCBpcyBlbXB0eSBvciBubyB0b2tlbnMgcmVtYWluLCB3ZSBjYW4gcmV0dXJuIGVhcmx5XG5cdFx0XHRcdFx0dG9rZW5zLnNwbGljZSggaSwgMSApO1xuXHRcdFx0XHRcdHNlbGVjdG9yID0gc2VlZC5sZW5ndGggJiYgdG9TZWxlY3RvciggdG9rZW5zICk7XG5cdFx0XHRcdFx0aWYgKCAhc2VsZWN0b3IgKSB7XG5cdFx0XHRcdFx0XHRwdXNoLmFwcGx5KCByZXN1bHRzLCBzZWVkICk7XG5cdFx0XHRcdFx0XHRyZXR1cm4gcmVzdWx0cztcblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdC8vIENvbXBpbGUgYW5kIGV4ZWN1dGUgYSBmaWx0ZXJpbmcgZnVuY3Rpb24gaWYgb25lIGlzIG5vdCBwcm92aWRlZFxuXHQvLyBQcm92aWRlIGBtYXRjaGAgdG8gYXZvaWQgcmV0b2tlbml6YXRpb24gaWYgd2UgbW9kaWZpZWQgdGhlIHNlbGVjdG9yIGFib3ZlXG5cdCggY29tcGlsZWQgfHwgY29tcGlsZSggc2VsZWN0b3IsIG1hdGNoICkgKShcblx0XHRzZWVkLFxuXHRcdGNvbnRleHQsXG5cdFx0IWRvY3VtZW50SXNIVE1MLFxuXHRcdHJlc3VsdHMsXG5cdFx0IWNvbnRleHQgfHwgcnNpYmxpbmcudGVzdCggc2VsZWN0b3IgKSAmJiB0ZXN0Q29udGV4dCggY29udGV4dC5wYXJlbnROb2RlICkgfHwgY29udGV4dFxuXHQpO1xuXHRyZXR1cm4gcmVzdWx0cztcbn07XG5cbi8vIE9uZS10aW1lIGFzc2lnbm1lbnRzXG5cbi8vIFNvcnQgc3RhYmlsaXR5XG5zdXBwb3J0LnNvcnRTdGFibGUgPSBleHBhbmRvLnNwbGl0KFwiXCIpLnNvcnQoIHNvcnRPcmRlciApLmpvaW4oXCJcIikgPT09IGV4cGFuZG87XG5cbi8vIFN1cHBvcnQ6IENocm9tZSAxNC0zNStcbi8vIEFsd2F5cyBhc3N1bWUgZHVwbGljYXRlcyBpZiB0aGV5IGFyZW4ndCBwYXNzZWQgdG8gdGhlIGNvbXBhcmlzb24gZnVuY3Rpb25cbnN1cHBvcnQuZGV0ZWN0RHVwbGljYXRlcyA9ICEhaGFzRHVwbGljYXRlO1xuXG4vLyBJbml0aWFsaXplIGFnYWluc3QgdGhlIGRlZmF1bHQgZG9jdW1lbnRcbnNldERvY3VtZW50KCk7XG5cbi8vIFN1cHBvcnQ6IFdlYmtpdDw1MzcuMzIgLSBTYWZhcmkgNi4wLjMvQ2hyb21lIDI1IChmaXhlZCBpbiBDaHJvbWUgMjcpXG4vLyBEZXRhY2hlZCBub2RlcyBjb25mb3VuZGluZ2x5IGZvbGxvdyAqZWFjaCBvdGhlcipcbnN1cHBvcnQuc29ydERldGFjaGVkID0gYXNzZXJ0KGZ1bmN0aW9uKCBlbCApIHtcblx0Ly8gU2hvdWxkIHJldHVybiAxLCBidXQgcmV0dXJucyA0IChmb2xsb3dpbmcpXG5cdHJldHVybiBlbC5jb21wYXJlRG9jdW1lbnRQb3NpdGlvbiggZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImZpZWxkc2V0XCIpICkgJiAxO1xufSk7XG5cbi8vIFN1cHBvcnQ6IElFPDhcbi8vIFByZXZlbnQgYXR0cmlidXRlL3Byb3BlcnR5IFwiaW50ZXJwb2xhdGlvblwiXG4vLyBodHRwczovL21zZG4ubWljcm9zb2Z0LmNvbS9lbi11cy9saWJyYXJ5L21zNTM2NDI5JTI4VlMuODUlMjkuYXNweFxuaWYgKCAhYXNzZXJ0KGZ1bmN0aW9uKCBlbCApIHtcblx0ZWwuaW5uZXJIVE1MID0gXCI8YSBocmVmPScjJz48L2E+XCI7XG5cdHJldHVybiBlbC5maXJzdENoaWxkLmdldEF0dHJpYnV0ZShcImhyZWZcIikgPT09IFwiI1wiIDtcbn0pICkge1xuXHRhZGRIYW5kbGUoIFwidHlwZXxocmVmfGhlaWdodHx3aWR0aFwiLCBmdW5jdGlvbiggZWxlbSwgbmFtZSwgaXNYTUwgKSB7XG5cdFx0aWYgKCAhaXNYTUwgKSB7XG5cdFx0XHRyZXR1cm4gZWxlbS5nZXRBdHRyaWJ1dGUoIG5hbWUsIG5hbWUudG9Mb3dlckNhc2UoKSA9PT0gXCJ0eXBlXCIgPyAxIDogMiApO1xuXHRcdH1cblx0fSk7XG59XG5cbi8vIFN1cHBvcnQ6IElFPDlcbi8vIFVzZSBkZWZhdWx0VmFsdWUgaW4gcGxhY2Ugb2YgZ2V0QXR0cmlidXRlKFwidmFsdWVcIilcbmlmICggIXN1cHBvcnQuYXR0cmlidXRlcyB8fCAhYXNzZXJ0KGZ1bmN0aW9uKCBlbCApIHtcblx0ZWwuaW5uZXJIVE1MID0gXCI8aW5wdXQvPlwiO1xuXHRlbC5maXJzdENoaWxkLnNldEF0dHJpYnV0ZSggXCJ2YWx1ZVwiLCBcIlwiICk7XG5cdHJldHVybiBlbC5maXJzdENoaWxkLmdldEF0dHJpYnV0ZSggXCJ2YWx1ZVwiICkgPT09IFwiXCI7XG59KSApIHtcblx0YWRkSGFuZGxlKCBcInZhbHVlXCIsIGZ1bmN0aW9uKCBlbGVtLCBuYW1lLCBpc1hNTCApIHtcblx0XHRpZiAoICFpc1hNTCAmJiBlbGVtLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCkgPT09IFwiaW5wdXRcIiApIHtcblx0XHRcdHJldHVybiBlbGVtLmRlZmF1bHRWYWx1ZTtcblx0XHR9XG5cdH0pO1xufVxuXG4vLyBTdXBwb3J0OiBJRTw5XG4vLyBVc2UgZ2V0QXR0cmlidXRlTm9kZSB0byBmZXRjaCBib29sZWFucyB3aGVuIGdldEF0dHJpYnV0ZSBsaWVzXG5pZiAoICFhc3NlcnQoZnVuY3Rpb24oIGVsICkge1xuXHRyZXR1cm4gZWwuZ2V0QXR0cmlidXRlKFwiZGlzYWJsZWRcIikgPT0gbnVsbDtcbn0pICkge1xuXHRhZGRIYW5kbGUoIGJvb2xlYW5zLCBmdW5jdGlvbiggZWxlbSwgbmFtZSwgaXNYTUwgKSB7XG5cdFx0dmFyIHZhbDtcblx0XHRpZiAoICFpc1hNTCApIHtcblx0XHRcdHJldHVybiBlbGVtWyBuYW1lIF0gPT09IHRydWUgPyBuYW1lLnRvTG93ZXJDYXNlKCkgOlxuXHRcdFx0XHRcdCh2YWwgPSBlbGVtLmdldEF0dHJpYnV0ZU5vZGUoIG5hbWUgKSkgJiYgdmFsLnNwZWNpZmllZCA/XG5cdFx0XHRcdFx0dmFsLnZhbHVlIDpcblx0XHRcdFx0bnVsbDtcblx0XHR9XG5cdH0pO1xufVxuXG5yZXR1cm4gU2l6emxlO1xuXG59KSggd2luZG93ICk7XG5cblxuXG5qUXVlcnkuZmluZCA9IFNpenpsZTtcbmpRdWVyeS5leHByID0gU2l6emxlLnNlbGVjdG9ycztcblxuLy8gRGVwcmVjYXRlZFxualF1ZXJ5LmV4cHJbIFwiOlwiIF0gPSBqUXVlcnkuZXhwci5wc2V1ZG9zO1xualF1ZXJ5LnVuaXF1ZVNvcnQgPSBqUXVlcnkudW5pcXVlID0gU2l6emxlLnVuaXF1ZVNvcnQ7XG5qUXVlcnkudGV4dCA9IFNpenpsZS5nZXRUZXh0O1xualF1ZXJ5LmlzWE1MRG9jID0gU2l6emxlLmlzWE1MO1xualF1ZXJ5LmNvbnRhaW5zID0gU2l6emxlLmNvbnRhaW5zO1xualF1ZXJ5LmVzY2FwZVNlbGVjdG9yID0gU2l6emxlLmVzY2FwZTtcblxuXG5cblxudmFyIGRpciA9IGZ1bmN0aW9uKCBlbGVtLCBkaXIsIHVudGlsICkge1xuXHR2YXIgbWF0Y2hlZCA9IFtdLFxuXHRcdHRydW5jYXRlID0gdW50aWwgIT09IHVuZGVmaW5lZDtcblxuXHR3aGlsZSAoICggZWxlbSA9IGVsZW1bIGRpciBdICkgJiYgZWxlbS5ub2RlVHlwZSAhPT0gOSApIHtcblx0XHRpZiAoIGVsZW0ubm9kZVR5cGUgPT09IDEgKSB7XG5cdFx0XHRpZiAoIHRydW5jYXRlICYmIGpRdWVyeSggZWxlbSApLmlzKCB1bnRpbCApICkge1xuXHRcdFx0XHRicmVhaztcblx0XHRcdH1cblx0XHRcdG1hdGNoZWQucHVzaCggZWxlbSApO1xuXHRcdH1cblx0fVxuXHRyZXR1cm4gbWF0Y2hlZDtcbn07XG5cblxudmFyIHNpYmxpbmdzID0gZnVuY3Rpb24oIG4sIGVsZW0gKSB7XG5cdHZhciBtYXRjaGVkID0gW107XG5cblx0Zm9yICggOyBuOyBuID0gbi5uZXh0U2libGluZyApIHtcblx0XHRpZiAoIG4ubm9kZVR5cGUgPT09IDEgJiYgbiAhPT0gZWxlbSApIHtcblx0XHRcdG1hdGNoZWQucHVzaCggbiApO1xuXHRcdH1cblx0fVxuXG5cdHJldHVybiBtYXRjaGVkO1xufTtcblxuXG52YXIgcm5lZWRzQ29udGV4dCA9IGpRdWVyeS5leHByLm1hdGNoLm5lZWRzQ29udGV4dDtcblxuXG5cbmZ1bmN0aW9uIG5vZGVOYW1lKCBlbGVtLCBuYW1lICkge1xuXG4gIHJldHVybiBlbGVtLm5vZGVOYW1lICYmIGVsZW0ubm9kZU5hbWUudG9Mb3dlckNhc2UoKSA9PT0gbmFtZS50b0xvd2VyQ2FzZSgpO1xuXG59O1xudmFyIHJzaW5nbGVUYWcgPSAoIC9ePChbYS16XVteXFwvXFwwPjpcXHgyMFxcdFxcclxcblxcZl0qKVtcXHgyMFxcdFxcclxcblxcZl0qXFwvPz4oPzo8XFwvXFwxPnwpJC9pICk7XG5cblxuXG4vLyBJbXBsZW1lbnQgdGhlIGlkZW50aWNhbCBmdW5jdGlvbmFsaXR5IGZvciBmaWx0ZXIgYW5kIG5vdFxuZnVuY3Rpb24gd2lubm93KCBlbGVtZW50cywgcXVhbGlmaWVyLCBub3QgKSB7XG5cdGlmICggaXNGdW5jdGlvbiggcXVhbGlmaWVyICkgKSB7XG5cdFx0cmV0dXJuIGpRdWVyeS5ncmVwKCBlbGVtZW50cywgZnVuY3Rpb24oIGVsZW0sIGkgKSB7XG5cdFx0XHRyZXR1cm4gISFxdWFsaWZpZXIuY2FsbCggZWxlbSwgaSwgZWxlbSApICE9PSBub3Q7XG5cdFx0fSApO1xuXHR9XG5cblx0Ly8gU2luZ2xlIGVsZW1lbnRcblx0aWYgKCBxdWFsaWZpZXIubm9kZVR5cGUgKSB7XG5cdFx0cmV0dXJuIGpRdWVyeS5ncmVwKCBlbGVtZW50cywgZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRyZXR1cm4gKCBlbGVtID09PSBxdWFsaWZpZXIgKSAhPT0gbm90O1xuXHRcdH0gKTtcblx0fVxuXG5cdC8vIEFycmF5bGlrZSBvZiBlbGVtZW50cyAoalF1ZXJ5LCBhcmd1bWVudHMsIEFycmF5KVxuXHRpZiAoIHR5cGVvZiBxdWFsaWZpZXIgIT09IFwic3RyaW5nXCIgKSB7XG5cdFx0cmV0dXJuIGpRdWVyeS5ncmVwKCBlbGVtZW50cywgZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRyZXR1cm4gKCBpbmRleE9mLmNhbGwoIHF1YWxpZmllciwgZWxlbSApID4gLTEgKSAhPT0gbm90O1xuXHRcdH0gKTtcblx0fVxuXG5cdC8vIEZpbHRlcmVkIGRpcmVjdGx5IGZvciBib3RoIHNpbXBsZSBhbmQgY29tcGxleCBzZWxlY3RvcnNcblx0cmV0dXJuIGpRdWVyeS5maWx0ZXIoIHF1YWxpZmllciwgZWxlbWVudHMsIG5vdCApO1xufVxuXG5qUXVlcnkuZmlsdGVyID0gZnVuY3Rpb24oIGV4cHIsIGVsZW1zLCBub3QgKSB7XG5cdHZhciBlbGVtID0gZWxlbXNbIDAgXTtcblxuXHRpZiAoIG5vdCApIHtcblx0XHRleHByID0gXCI6bm90KFwiICsgZXhwciArIFwiKVwiO1xuXHR9XG5cblx0aWYgKCBlbGVtcy5sZW5ndGggPT09IDEgJiYgZWxlbS5ub2RlVHlwZSA9PT0gMSApIHtcblx0XHRyZXR1cm4galF1ZXJ5LmZpbmQubWF0Y2hlc1NlbGVjdG9yKCBlbGVtLCBleHByICkgPyBbIGVsZW0gXSA6IFtdO1xuXHR9XG5cblx0cmV0dXJuIGpRdWVyeS5maW5kLm1hdGNoZXMoIGV4cHIsIGpRdWVyeS5ncmVwKCBlbGVtcywgZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0cmV0dXJuIGVsZW0ubm9kZVR5cGUgPT09IDE7XG5cdH0gKSApO1xufTtcblxualF1ZXJ5LmZuLmV4dGVuZCgge1xuXHRmaW5kOiBmdW5jdGlvbiggc2VsZWN0b3IgKSB7XG5cdFx0dmFyIGksIHJldCxcblx0XHRcdGxlbiA9IHRoaXMubGVuZ3RoLFxuXHRcdFx0c2VsZiA9IHRoaXM7XG5cblx0XHRpZiAoIHR5cGVvZiBzZWxlY3RvciAhPT0gXCJzdHJpbmdcIiApIHtcblx0XHRcdHJldHVybiB0aGlzLnB1c2hTdGFjayggalF1ZXJ5KCBzZWxlY3RvciApLmZpbHRlciggZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGZvciAoIGkgPSAwOyBpIDwgbGVuOyBpKysgKSB7XG5cdFx0XHRcdFx0aWYgKCBqUXVlcnkuY29udGFpbnMoIHNlbGZbIGkgXSwgdGhpcyApICkge1xuXHRcdFx0XHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9ICkgKTtcblx0XHR9XG5cblx0XHRyZXQgPSB0aGlzLnB1c2hTdGFjayggW10gKTtcblxuXHRcdGZvciAoIGkgPSAwOyBpIDwgbGVuOyBpKysgKSB7XG5cdFx0XHRqUXVlcnkuZmluZCggc2VsZWN0b3IsIHNlbGZbIGkgXSwgcmV0ICk7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIGxlbiA+IDEgPyBqUXVlcnkudW5pcXVlU29ydCggcmV0ICkgOiByZXQ7XG5cdH0sXG5cdGZpbHRlcjogZnVuY3Rpb24oIHNlbGVjdG9yICkge1xuXHRcdHJldHVybiB0aGlzLnB1c2hTdGFjayggd2lubm93KCB0aGlzLCBzZWxlY3RvciB8fCBbXSwgZmFsc2UgKSApO1xuXHR9LFxuXHRub3Q6IGZ1bmN0aW9uKCBzZWxlY3RvciApIHtcblx0XHRyZXR1cm4gdGhpcy5wdXNoU3RhY2soIHdpbm5vdyggdGhpcywgc2VsZWN0b3IgfHwgW10sIHRydWUgKSApO1xuXHR9LFxuXHRpczogZnVuY3Rpb24oIHNlbGVjdG9yICkge1xuXHRcdHJldHVybiAhIXdpbm5vdyhcblx0XHRcdHRoaXMsXG5cblx0XHRcdC8vIElmIHRoaXMgaXMgYSBwb3NpdGlvbmFsL3JlbGF0aXZlIHNlbGVjdG9yLCBjaGVjayBtZW1iZXJzaGlwIGluIHRoZSByZXR1cm5lZCBzZXRcblx0XHRcdC8vIHNvICQoXCJwOmZpcnN0XCIpLmlzKFwicDpsYXN0XCIpIHdvbid0IHJldHVybiB0cnVlIGZvciBhIGRvYyB3aXRoIHR3byBcInBcIi5cblx0XHRcdHR5cGVvZiBzZWxlY3RvciA9PT0gXCJzdHJpbmdcIiAmJiBybmVlZHNDb250ZXh0LnRlc3QoIHNlbGVjdG9yICkgP1xuXHRcdFx0XHRqUXVlcnkoIHNlbGVjdG9yICkgOlxuXHRcdFx0XHRzZWxlY3RvciB8fCBbXSxcblx0XHRcdGZhbHNlXG5cdFx0KS5sZW5ndGg7XG5cdH1cbn0gKTtcblxuXG4vLyBJbml0aWFsaXplIGEgalF1ZXJ5IG9iamVjdFxuXG5cbi8vIEEgY2VudHJhbCByZWZlcmVuY2UgdG8gdGhlIHJvb3QgalF1ZXJ5KGRvY3VtZW50KVxudmFyIHJvb3RqUXVlcnksXG5cblx0Ly8gQSBzaW1wbGUgd2F5IHRvIGNoZWNrIGZvciBIVE1MIHN0cmluZ3Ncblx0Ly8gUHJpb3JpdGl6ZSAjaWQgb3ZlciA8dGFnPiB0byBhdm9pZCBYU1MgdmlhIGxvY2F0aW9uLmhhc2ggKCM5NTIxKVxuXHQvLyBTdHJpY3QgSFRNTCByZWNvZ25pdGlvbiAoIzExMjkwOiBtdXN0IHN0YXJ0IHdpdGggPClcblx0Ly8gU2hvcnRjdXQgc2ltcGxlICNpZCBjYXNlIGZvciBzcGVlZFxuXHRycXVpY2tFeHByID0gL14oPzpcXHMqKDxbXFx3XFxXXSs+KVtePl0qfCMoW1xcdy1dKykpJC8sXG5cblx0aW5pdCA9IGpRdWVyeS5mbi5pbml0ID0gZnVuY3Rpb24oIHNlbGVjdG9yLCBjb250ZXh0LCByb290ICkge1xuXHRcdHZhciBtYXRjaCwgZWxlbTtcblxuXHRcdC8vIEhBTkRMRTogJChcIlwiKSwgJChudWxsKSwgJCh1bmRlZmluZWQpLCAkKGZhbHNlKVxuXHRcdGlmICggIXNlbGVjdG9yICkge1xuXHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0fVxuXG5cdFx0Ly8gTWV0aG9kIGluaXQoKSBhY2NlcHRzIGFuIGFsdGVybmF0ZSByb290alF1ZXJ5XG5cdFx0Ly8gc28gbWlncmF0ZSBjYW4gc3VwcG9ydCBqUXVlcnkuc3ViIChnaC0yMTAxKVxuXHRcdHJvb3QgPSByb290IHx8IHJvb3RqUXVlcnk7XG5cblx0XHQvLyBIYW5kbGUgSFRNTCBzdHJpbmdzXG5cdFx0aWYgKCB0eXBlb2Ygc2VsZWN0b3IgPT09IFwic3RyaW5nXCIgKSB7XG5cdFx0XHRpZiAoIHNlbGVjdG9yWyAwIF0gPT09IFwiPFwiICYmXG5cdFx0XHRcdHNlbGVjdG9yWyBzZWxlY3Rvci5sZW5ndGggLSAxIF0gPT09IFwiPlwiICYmXG5cdFx0XHRcdHNlbGVjdG9yLmxlbmd0aCA+PSAzICkge1xuXG5cdFx0XHRcdC8vIEFzc3VtZSB0aGF0IHN0cmluZ3MgdGhhdCBzdGFydCBhbmQgZW5kIHdpdGggPD4gYXJlIEhUTUwgYW5kIHNraXAgdGhlIHJlZ2V4IGNoZWNrXG5cdFx0XHRcdG1hdGNoID0gWyBudWxsLCBzZWxlY3RvciwgbnVsbCBdO1xuXG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRtYXRjaCA9IHJxdWlja0V4cHIuZXhlYyggc2VsZWN0b3IgKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gTWF0Y2ggaHRtbCBvciBtYWtlIHN1cmUgbm8gY29udGV4dCBpcyBzcGVjaWZpZWQgZm9yICNpZFxuXHRcdFx0aWYgKCBtYXRjaCAmJiAoIG1hdGNoWyAxIF0gfHwgIWNvbnRleHQgKSApIHtcblxuXHRcdFx0XHQvLyBIQU5ETEU6ICQoaHRtbCkgLT4gJChhcnJheSlcblx0XHRcdFx0aWYgKCBtYXRjaFsgMSBdICkge1xuXHRcdFx0XHRcdGNvbnRleHQgPSBjb250ZXh0IGluc3RhbmNlb2YgalF1ZXJ5ID8gY29udGV4dFsgMCBdIDogY29udGV4dDtcblxuXHRcdFx0XHRcdC8vIE9wdGlvbiB0byBydW4gc2NyaXB0cyBpcyB0cnVlIGZvciBiYWNrLWNvbXBhdFxuXHRcdFx0XHRcdC8vIEludGVudGlvbmFsbHkgbGV0IHRoZSBlcnJvciBiZSB0aHJvd24gaWYgcGFyc2VIVE1MIGlzIG5vdCBwcmVzZW50XG5cdFx0XHRcdFx0alF1ZXJ5Lm1lcmdlKCB0aGlzLCBqUXVlcnkucGFyc2VIVE1MKFxuXHRcdFx0XHRcdFx0bWF0Y2hbIDEgXSxcblx0XHRcdFx0XHRcdGNvbnRleHQgJiYgY29udGV4dC5ub2RlVHlwZSA/IGNvbnRleHQub3duZXJEb2N1bWVudCB8fCBjb250ZXh0IDogZG9jdW1lbnQsXG5cdFx0XHRcdFx0XHR0cnVlXG5cdFx0XHRcdFx0KSApO1xuXG5cdFx0XHRcdFx0Ly8gSEFORExFOiAkKGh0bWwsIHByb3BzKVxuXHRcdFx0XHRcdGlmICggcnNpbmdsZVRhZy50ZXN0KCBtYXRjaFsgMSBdICkgJiYgalF1ZXJ5LmlzUGxhaW5PYmplY3QoIGNvbnRleHQgKSApIHtcblx0XHRcdFx0XHRcdGZvciAoIG1hdGNoIGluIGNvbnRleHQgKSB7XG5cblx0XHRcdFx0XHRcdFx0Ly8gUHJvcGVydGllcyBvZiBjb250ZXh0IGFyZSBjYWxsZWQgYXMgbWV0aG9kcyBpZiBwb3NzaWJsZVxuXHRcdFx0XHRcdFx0XHRpZiAoIGlzRnVuY3Rpb24oIHRoaXNbIG1hdGNoIF0gKSApIHtcblx0XHRcdFx0XHRcdFx0XHR0aGlzWyBtYXRjaCBdKCBjb250ZXh0WyBtYXRjaCBdICk7XG5cblx0XHRcdFx0XHRcdFx0Ly8gLi4uYW5kIG90aGVyd2lzZSBzZXQgYXMgYXR0cmlidXRlc1xuXHRcdFx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0XHRcdHRoaXMuYXR0ciggbWF0Y2gsIGNvbnRleHRbIG1hdGNoIF0gKTtcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdHJldHVybiB0aGlzO1xuXG5cdFx0XHRcdC8vIEhBTkRMRTogJCgjaWQpXG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0ZWxlbSA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCBtYXRjaFsgMiBdICk7XG5cblx0XHRcdFx0XHRpZiAoIGVsZW0gKSB7XG5cblx0XHRcdFx0XHRcdC8vIEluamVjdCB0aGUgZWxlbWVudCBkaXJlY3RseSBpbnRvIHRoZSBqUXVlcnkgb2JqZWN0XG5cdFx0XHRcdFx0XHR0aGlzWyAwIF0gPSBlbGVtO1xuXHRcdFx0XHRcdFx0dGhpcy5sZW5ndGggPSAxO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRyZXR1cm4gdGhpcztcblx0XHRcdFx0fVxuXG5cdFx0XHQvLyBIQU5ETEU6ICQoZXhwciwgJCguLi4pKVxuXHRcdFx0fSBlbHNlIGlmICggIWNvbnRleHQgfHwgY29udGV4dC5qcXVlcnkgKSB7XG5cdFx0XHRcdHJldHVybiAoIGNvbnRleHQgfHwgcm9vdCApLmZpbmQoIHNlbGVjdG9yICk7XG5cblx0XHRcdC8vIEhBTkRMRTogJChleHByLCBjb250ZXh0KVxuXHRcdFx0Ly8gKHdoaWNoIGlzIGp1c3QgZXF1aXZhbGVudCB0bzogJChjb250ZXh0KS5maW5kKGV4cHIpXG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRyZXR1cm4gdGhpcy5jb25zdHJ1Y3RvciggY29udGV4dCApLmZpbmQoIHNlbGVjdG9yICk7XG5cdFx0XHR9XG5cblx0XHQvLyBIQU5ETEU6ICQoRE9NRWxlbWVudClcblx0XHR9IGVsc2UgaWYgKCBzZWxlY3Rvci5ub2RlVHlwZSApIHtcblx0XHRcdHRoaXNbIDAgXSA9IHNlbGVjdG9yO1xuXHRcdFx0dGhpcy5sZW5ndGggPSAxO1xuXHRcdFx0cmV0dXJuIHRoaXM7XG5cblx0XHQvLyBIQU5ETEU6ICQoZnVuY3Rpb24pXG5cdFx0Ly8gU2hvcnRjdXQgZm9yIGRvY3VtZW50IHJlYWR5XG5cdFx0fSBlbHNlIGlmICggaXNGdW5jdGlvbiggc2VsZWN0b3IgKSApIHtcblx0XHRcdHJldHVybiByb290LnJlYWR5ICE9PSB1bmRlZmluZWQgP1xuXHRcdFx0XHRyb290LnJlYWR5KCBzZWxlY3RvciApIDpcblxuXHRcdFx0XHQvLyBFeGVjdXRlIGltbWVkaWF0ZWx5IGlmIHJlYWR5IGlzIG5vdCBwcmVzZW50XG5cdFx0XHRcdHNlbGVjdG9yKCBqUXVlcnkgKTtcblx0XHR9XG5cblx0XHRyZXR1cm4galF1ZXJ5Lm1ha2VBcnJheSggc2VsZWN0b3IsIHRoaXMgKTtcblx0fTtcblxuLy8gR2l2ZSB0aGUgaW5pdCBmdW5jdGlvbiB0aGUgalF1ZXJ5IHByb3RvdHlwZSBmb3IgbGF0ZXIgaW5zdGFudGlhdGlvblxuaW5pdC5wcm90b3R5cGUgPSBqUXVlcnkuZm47XG5cbi8vIEluaXRpYWxpemUgY2VudHJhbCByZWZlcmVuY2VcbnJvb3RqUXVlcnkgPSBqUXVlcnkoIGRvY3VtZW50ICk7XG5cblxudmFyIHJwYXJlbnRzcHJldiA9IC9eKD86cGFyZW50c3xwcmV2KD86VW50aWx8QWxsKSkvLFxuXG5cdC8vIE1ldGhvZHMgZ3VhcmFudGVlZCB0byBwcm9kdWNlIGEgdW5pcXVlIHNldCB3aGVuIHN0YXJ0aW5nIGZyb20gYSB1bmlxdWUgc2V0XG5cdGd1YXJhbnRlZWRVbmlxdWUgPSB7XG5cdFx0Y2hpbGRyZW46IHRydWUsXG5cdFx0Y29udGVudHM6IHRydWUsXG5cdFx0bmV4dDogdHJ1ZSxcblx0XHRwcmV2OiB0cnVlXG5cdH07XG5cbmpRdWVyeS5mbi5leHRlbmQoIHtcblx0aGFzOiBmdW5jdGlvbiggdGFyZ2V0ICkge1xuXHRcdHZhciB0YXJnZXRzID0galF1ZXJ5KCB0YXJnZXQsIHRoaXMgKSxcblx0XHRcdGwgPSB0YXJnZXRzLmxlbmd0aDtcblxuXHRcdHJldHVybiB0aGlzLmZpbHRlciggZnVuY3Rpb24oKSB7XG5cdFx0XHR2YXIgaSA9IDA7XG5cdFx0XHRmb3IgKCA7IGkgPCBsOyBpKysgKSB7XG5cdFx0XHRcdGlmICggalF1ZXJ5LmNvbnRhaW5zKCB0aGlzLCB0YXJnZXRzWyBpIF0gKSApIHtcblx0XHRcdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH0gKTtcblx0fSxcblxuXHRjbG9zZXN0OiBmdW5jdGlvbiggc2VsZWN0b3JzLCBjb250ZXh0ICkge1xuXHRcdHZhciBjdXIsXG5cdFx0XHRpID0gMCxcblx0XHRcdGwgPSB0aGlzLmxlbmd0aCxcblx0XHRcdG1hdGNoZWQgPSBbXSxcblx0XHRcdHRhcmdldHMgPSB0eXBlb2Ygc2VsZWN0b3JzICE9PSBcInN0cmluZ1wiICYmIGpRdWVyeSggc2VsZWN0b3JzICk7XG5cblx0XHQvLyBQb3NpdGlvbmFsIHNlbGVjdG9ycyBuZXZlciBtYXRjaCwgc2luY2UgdGhlcmUncyBubyBfc2VsZWN0aW9uXyBjb250ZXh0XG5cdFx0aWYgKCAhcm5lZWRzQ29udGV4dC50ZXN0KCBzZWxlY3RvcnMgKSApIHtcblx0XHRcdGZvciAoIDsgaSA8IGw7IGkrKyApIHtcblx0XHRcdFx0Zm9yICggY3VyID0gdGhpc1sgaSBdOyBjdXIgJiYgY3VyICE9PSBjb250ZXh0OyBjdXIgPSBjdXIucGFyZW50Tm9kZSApIHtcblxuXHRcdFx0XHRcdC8vIEFsd2F5cyBza2lwIGRvY3VtZW50IGZyYWdtZW50c1xuXHRcdFx0XHRcdGlmICggY3VyLm5vZGVUeXBlIDwgMTEgJiYgKCB0YXJnZXRzID9cblx0XHRcdFx0XHRcdHRhcmdldHMuaW5kZXgoIGN1ciApID4gLTEgOlxuXG5cdFx0XHRcdFx0XHQvLyBEb24ndCBwYXNzIG5vbi1lbGVtZW50cyB0byBTaXp6bGVcblx0XHRcdFx0XHRcdGN1ci5ub2RlVHlwZSA9PT0gMSAmJlxuXHRcdFx0XHRcdFx0XHRqUXVlcnkuZmluZC5tYXRjaGVzU2VsZWN0b3IoIGN1ciwgc2VsZWN0b3JzICkgKSApIHtcblxuXHRcdFx0XHRcdFx0bWF0Y2hlZC5wdXNoKCBjdXIgKTtcblx0XHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHJldHVybiB0aGlzLnB1c2hTdGFjayggbWF0Y2hlZC5sZW5ndGggPiAxID8galF1ZXJ5LnVuaXF1ZVNvcnQoIG1hdGNoZWQgKSA6IG1hdGNoZWQgKTtcblx0fSxcblxuXHQvLyBEZXRlcm1pbmUgdGhlIHBvc2l0aW9uIG9mIGFuIGVsZW1lbnQgd2l0aGluIHRoZSBzZXRcblx0aW5kZXg6IGZ1bmN0aW9uKCBlbGVtICkge1xuXG5cdFx0Ly8gTm8gYXJndW1lbnQsIHJldHVybiBpbmRleCBpbiBwYXJlbnRcblx0XHRpZiAoICFlbGVtICkge1xuXHRcdFx0cmV0dXJuICggdGhpc1sgMCBdICYmIHRoaXNbIDAgXS5wYXJlbnROb2RlICkgPyB0aGlzLmZpcnN0KCkucHJldkFsbCgpLmxlbmd0aCA6IC0xO1xuXHRcdH1cblxuXHRcdC8vIEluZGV4IGluIHNlbGVjdG9yXG5cdFx0aWYgKCB0eXBlb2YgZWxlbSA9PT0gXCJzdHJpbmdcIiApIHtcblx0XHRcdHJldHVybiBpbmRleE9mLmNhbGwoIGpRdWVyeSggZWxlbSApLCB0aGlzWyAwIF0gKTtcblx0XHR9XG5cblx0XHQvLyBMb2NhdGUgdGhlIHBvc2l0aW9uIG9mIHRoZSBkZXNpcmVkIGVsZW1lbnRcblx0XHRyZXR1cm4gaW5kZXhPZi5jYWxsKCB0aGlzLFxuXG5cdFx0XHQvLyBJZiBpdCByZWNlaXZlcyBhIGpRdWVyeSBvYmplY3QsIHRoZSBmaXJzdCBlbGVtZW50IGlzIHVzZWRcblx0XHRcdGVsZW0uanF1ZXJ5ID8gZWxlbVsgMCBdIDogZWxlbVxuXHRcdCk7XG5cdH0sXG5cblx0YWRkOiBmdW5jdGlvbiggc2VsZWN0b3IsIGNvbnRleHQgKSB7XG5cdFx0cmV0dXJuIHRoaXMucHVzaFN0YWNrKFxuXHRcdFx0alF1ZXJ5LnVuaXF1ZVNvcnQoXG5cdFx0XHRcdGpRdWVyeS5tZXJnZSggdGhpcy5nZXQoKSwgalF1ZXJ5KCBzZWxlY3RvciwgY29udGV4dCApIClcblx0XHRcdClcblx0XHQpO1xuXHR9LFxuXG5cdGFkZEJhY2s6IGZ1bmN0aW9uKCBzZWxlY3RvciApIHtcblx0XHRyZXR1cm4gdGhpcy5hZGQoIHNlbGVjdG9yID09IG51bGwgP1xuXHRcdFx0dGhpcy5wcmV2T2JqZWN0IDogdGhpcy5wcmV2T2JqZWN0LmZpbHRlciggc2VsZWN0b3IgKVxuXHRcdCk7XG5cdH1cbn0gKTtcblxuZnVuY3Rpb24gc2libGluZyggY3VyLCBkaXIgKSB7XG5cdHdoaWxlICggKCBjdXIgPSBjdXJbIGRpciBdICkgJiYgY3VyLm5vZGVUeXBlICE9PSAxICkge31cblx0cmV0dXJuIGN1cjtcbn1cblxualF1ZXJ5LmVhY2goIHtcblx0cGFyZW50OiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHR2YXIgcGFyZW50ID0gZWxlbS5wYXJlbnROb2RlO1xuXHRcdHJldHVybiBwYXJlbnQgJiYgcGFyZW50Lm5vZGVUeXBlICE9PSAxMSA/IHBhcmVudCA6IG51bGw7XG5cdH0sXG5cdHBhcmVudHM6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdHJldHVybiBkaXIoIGVsZW0sIFwicGFyZW50Tm9kZVwiICk7XG5cdH0sXG5cdHBhcmVudHNVbnRpbDogZnVuY3Rpb24oIGVsZW0sIGksIHVudGlsICkge1xuXHRcdHJldHVybiBkaXIoIGVsZW0sIFwicGFyZW50Tm9kZVwiLCB1bnRpbCApO1xuXHR9LFxuXHRuZXh0OiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRyZXR1cm4gc2libGluZyggZWxlbSwgXCJuZXh0U2libGluZ1wiICk7XG5cdH0sXG5cdHByZXY6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdHJldHVybiBzaWJsaW5nKCBlbGVtLCBcInByZXZpb3VzU2libGluZ1wiICk7XG5cdH0sXG5cdG5leHRBbGw6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdHJldHVybiBkaXIoIGVsZW0sIFwibmV4dFNpYmxpbmdcIiApO1xuXHR9LFxuXHRwcmV2QWxsOiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRyZXR1cm4gZGlyKCBlbGVtLCBcInByZXZpb3VzU2libGluZ1wiICk7XG5cdH0sXG5cdG5leHRVbnRpbDogZnVuY3Rpb24oIGVsZW0sIGksIHVudGlsICkge1xuXHRcdHJldHVybiBkaXIoIGVsZW0sIFwibmV4dFNpYmxpbmdcIiwgdW50aWwgKTtcblx0fSxcblx0cHJldlVudGlsOiBmdW5jdGlvbiggZWxlbSwgaSwgdW50aWwgKSB7XG5cdFx0cmV0dXJuIGRpciggZWxlbSwgXCJwcmV2aW91c1NpYmxpbmdcIiwgdW50aWwgKTtcblx0fSxcblx0c2libGluZ3M6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdHJldHVybiBzaWJsaW5ncyggKCBlbGVtLnBhcmVudE5vZGUgfHwge30gKS5maXJzdENoaWxkLCBlbGVtICk7XG5cdH0sXG5cdGNoaWxkcmVuOiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRyZXR1cm4gc2libGluZ3MoIGVsZW0uZmlyc3RDaGlsZCApO1xuXHR9LFxuXHRjb250ZW50czogZnVuY3Rpb24oIGVsZW0gKSB7XG4gICAgICAgIGlmICggbm9kZU5hbWUoIGVsZW0sIFwiaWZyYW1lXCIgKSApIHtcbiAgICAgICAgICAgIHJldHVybiBlbGVtLmNvbnRlbnREb2N1bWVudDtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIFN1cHBvcnQ6IElFIDkgLSAxMSBvbmx5LCBpT1MgNyBvbmx5LCBBbmRyb2lkIEJyb3dzZXIgPD00LjMgb25seVxuICAgICAgICAvLyBUcmVhdCB0aGUgdGVtcGxhdGUgZWxlbWVudCBhcyBhIHJlZ3VsYXIgb25lIGluIGJyb3dzZXJzIHRoYXRcbiAgICAgICAgLy8gZG9uJ3Qgc3VwcG9ydCBpdC5cbiAgICAgICAgaWYgKCBub2RlTmFtZSggZWxlbSwgXCJ0ZW1wbGF0ZVwiICkgKSB7XG4gICAgICAgICAgICBlbGVtID0gZWxlbS5jb250ZW50IHx8IGVsZW07XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4galF1ZXJ5Lm1lcmdlKCBbXSwgZWxlbS5jaGlsZE5vZGVzICk7XG5cdH1cbn0sIGZ1bmN0aW9uKCBuYW1lLCBmbiApIHtcblx0alF1ZXJ5LmZuWyBuYW1lIF0gPSBmdW5jdGlvbiggdW50aWwsIHNlbGVjdG9yICkge1xuXHRcdHZhciBtYXRjaGVkID0galF1ZXJ5Lm1hcCggdGhpcywgZm4sIHVudGlsICk7XG5cblx0XHRpZiAoIG5hbWUuc2xpY2UoIC01ICkgIT09IFwiVW50aWxcIiApIHtcblx0XHRcdHNlbGVjdG9yID0gdW50aWw7XG5cdFx0fVxuXG5cdFx0aWYgKCBzZWxlY3RvciAmJiB0eXBlb2Ygc2VsZWN0b3IgPT09IFwic3RyaW5nXCIgKSB7XG5cdFx0XHRtYXRjaGVkID0galF1ZXJ5LmZpbHRlciggc2VsZWN0b3IsIG1hdGNoZWQgKTtcblx0XHR9XG5cblx0XHRpZiAoIHRoaXMubGVuZ3RoID4gMSApIHtcblxuXHRcdFx0Ly8gUmVtb3ZlIGR1cGxpY2F0ZXNcblx0XHRcdGlmICggIWd1YXJhbnRlZWRVbmlxdWVbIG5hbWUgXSApIHtcblx0XHRcdFx0alF1ZXJ5LnVuaXF1ZVNvcnQoIG1hdGNoZWQgKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gUmV2ZXJzZSBvcmRlciBmb3IgcGFyZW50cyogYW5kIHByZXYtZGVyaXZhdGl2ZXNcblx0XHRcdGlmICggcnBhcmVudHNwcmV2LnRlc3QoIG5hbWUgKSApIHtcblx0XHRcdFx0bWF0Y2hlZC5yZXZlcnNlKCk7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXMucHVzaFN0YWNrKCBtYXRjaGVkICk7XG5cdH07XG59ICk7XG52YXIgcm5vdGh0bWx3aGl0ZSA9ICggL1teXFx4MjBcXHRcXHJcXG5cXGZdKy9nICk7XG5cblxuXG4vLyBDb252ZXJ0IFN0cmluZy1mb3JtYXR0ZWQgb3B0aW9ucyBpbnRvIE9iamVjdC1mb3JtYXR0ZWQgb25lc1xuZnVuY3Rpb24gY3JlYXRlT3B0aW9ucyggb3B0aW9ucyApIHtcblx0dmFyIG9iamVjdCA9IHt9O1xuXHRqUXVlcnkuZWFjaCggb3B0aW9ucy5tYXRjaCggcm5vdGh0bWx3aGl0ZSApIHx8IFtdLCBmdW5jdGlvbiggXywgZmxhZyApIHtcblx0XHRvYmplY3RbIGZsYWcgXSA9IHRydWU7XG5cdH0gKTtcblx0cmV0dXJuIG9iamVjdDtcbn1cblxuLypcbiAqIENyZWF0ZSBhIGNhbGxiYWNrIGxpc3QgdXNpbmcgdGhlIGZvbGxvd2luZyBwYXJhbWV0ZXJzOlxuICpcbiAqXHRvcHRpb25zOiBhbiBvcHRpb25hbCBsaXN0IG9mIHNwYWNlLXNlcGFyYXRlZCBvcHRpb25zIHRoYXQgd2lsbCBjaGFuZ2UgaG93XG4gKlx0XHRcdHRoZSBjYWxsYmFjayBsaXN0IGJlaGF2ZXMgb3IgYSBtb3JlIHRyYWRpdGlvbmFsIG9wdGlvbiBvYmplY3RcbiAqXG4gKiBCeSBkZWZhdWx0IGEgY2FsbGJhY2sgbGlzdCB3aWxsIGFjdCBsaWtlIGFuIGV2ZW50IGNhbGxiYWNrIGxpc3QgYW5kIGNhbiBiZVxuICogXCJmaXJlZFwiIG11bHRpcGxlIHRpbWVzLlxuICpcbiAqIFBvc3NpYmxlIG9wdGlvbnM6XG4gKlxuICpcdG9uY2U6XHRcdFx0d2lsbCBlbnN1cmUgdGhlIGNhbGxiYWNrIGxpc3QgY2FuIG9ubHkgYmUgZmlyZWQgb25jZSAobGlrZSBhIERlZmVycmVkKVxuICpcbiAqXHRtZW1vcnk6XHRcdFx0d2lsbCBrZWVwIHRyYWNrIG9mIHByZXZpb3VzIHZhbHVlcyBhbmQgd2lsbCBjYWxsIGFueSBjYWxsYmFjayBhZGRlZFxuICpcdFx0XHRcdFx0YWZ0ZXIgdGhlIGxpc3QgaGFzIGJlZW4gZmlyZWQgcmlnaHQgYXdheSB3aXRoIHRoZSBsYXRlc3QgXCJtZW1vcml6ZWRcIlxuICpcdFx0XHRcdFx0dmFsdWVzIChsaWtlIGEgRGVmZXJyZWQpXG4gKlxuICpcdHVuaXF1ZTpcdFx0XHR3aWxsIGVuc3VyZSBhIGNhbGxiYWNrIGNhbiBvbmx5IGJlIGFkZGVkIG9uY2UgKG5vIGR1cGxpY2F0ZSBpbiB0aGUgbGlzdClcbiAqXG4gKlx0c3RvcE9uRmFsc2U6XHRpbnRlcnJ1cHQgY2FsbGluZ3Mgd2hlbiBhIGNhbGxiYWNrIHJldHVybnMgZmFsc2VcbiAqXG4gKi9cbmpRdWVyeS5DYWxsYmFja3MgPSBmdW5jdGlvbiggb3B0aW9ucyApIHtcblxuXHQvLyBDb252ZXJ0IG9wdGlvbnMgZnJvbSBTdHJpbmctZm9ybWF0dGVkIHRvIE9iamVjdC1mb3JtYXR0ZWQgaWYgbmVlZGVkXG5cdC8vICh3ZSBjaGVjayBpbiBjYWNoZSBmaXJzdClcblx0b3B0aW9ucyA9IHR5cGVvZiBvcHRpb25zID09PSBcInN0cmluZ1wiID9cblx0XHRjcmVhdGVPcHRpb25zKCBvcHRpb25zICkgOlxuXHRcdGpRdWVyeS5leHRlbmQoIHt9LCBvcHRpb25zICk7XG5cblx0dmFyIC8vIEZsYWcgdG8ga25vdyBpZiBsaXN0IGlzIGN1cnJlbnRseSBmaXJpbmdcblx0XHRmaXJpbmcsXG5cblx0XHQvLyBMYXN0IGZpcmUgdmFsdWUgZm9yIG5vbi1mb3JnZXR0YWJsZSBsaXN0c1xuXHRcdG1lbW9yeSxcblxuXHRcdC8vIEZsYWcgdG8ga25vdyBpZiBsaXN0IHdhcyBhbHJlYWR5IGZpcmVkXG5cdFx0ZmlyZWQsXG5cblx0XHQvLyBGbGFnIHRvIHByZXZlbnQgZmlyaW5nXG5cdFx0bG9ja2VkLFxuXG5cdFx0Ly8gQWN0dWFsIGNhbGxiYWNrIGxpc3Rcblx0XHRsaXN0ID0gW10sXG5cblx0XHQvLyBRdWV1ZSBvZiBleGVjdXRpb24gZGF0YSBmb3IgcmVwZWF0YWJsZSBsaXN0c1xuXHRcdHF1ZXVlID0gW10sXG5cblx0XHQvLyBJbmRleCBvZiBjdXJyZW50bHkgZmlyaW5nIGNhbGxiYWNrIChtb2RpZmllZCBieSBhZGQvcmVtb3ZlIGFzIG5lZWRlZClcblx0XHRmaXJpbmdJbmRleCA9IC0xLFxuXG5cdFx0Ly8gRmlyZSBjYWxsYmFja3Ncblx0XHRmaXJlID0gZnVuY3Rpb24oKSB7XG5cblx0XHRcdC8vIEVuZm9yY2Ugc2luZ2xlLWZpcmluZ1xuXHRcdFx0bG9ja2VkID0gbG9ja2VkIHx8IG9wdGlvbnMub25jZTtcblxuXHRcdFx0Ly8gRXhlY3V0ZSBjYWxsYmFja3MgZm9yIGFsbCBwZW5kaW5nIGV4ZWN1dGlvbnMsXG5cdFx0XHQvLyByZXNwZWN0aW5nIGZpcmluZ0luZGV4IG92ZXJyaWRlcyBhbmQgcnVudGltZSBjaGFuZ2VzXG5cdFx0XHRmaXJlZCA9IGZpcmluZyA9IHRydWU7XG5cdFx0XHRmb3IgKCA7IHF1ZXVlLmxlbmd0aDsgZmlyaW5nSW5kZXggPSAtMSApIHtcblx0XHRcdFx0bWVtb3J5ID0gcXVldWUuc2hpZnQoKTtcblx0XHRcdFx0d2hpbGUgKCArK2ZpcmluZ0luZGV4IDwgbGlzdC5sZW5ndGggKSB7XG5cblx0XHRcdFx0XHQvLyBSdW4gY2FsbGJhY2sgYW5kIGNoZWNrIGZvciBlYXJseSB0ZXJtaW5hdGlvblxuXHRcdFx0XHRcdGlmICggbGlzdFsgZmlyaW5nSW5kZXggXS5hcHBseSggbWVtb3J5WyAwIF0sIG1lbW9yeVsgMSBdICkgPT09IGZhbHNlICYmXG5cdFx0XHRcdFx0XHRvcHRpb25zLnN0b3BPbkZhbHNlICkge1xuXG5cdFx0XHRcdFx0XHQvLyBKdW1wIHRvIGVuZCBhbmQgZm9yZ2V0IHRoZSBkYXRhIHNvIC5hZGQgZG9lc24ndCByZS1maXJlXG5cdFx0XHRcdFx0XHRmaXJpbmdJbmRleCA9IGxpc3QubGVuZ3RoO1xuXHRcdFx0XHRcdFx0bWVtb3J5ID0gZmFsc2U7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdC8vIEZvcmdldCB0aGUgZGF0YSBpZiB3ZSdyZSBkb25lIHdpdGggaXRcblx0XHRcdGlmICggIW9wdGlvbnMubWVtb3J5ICkge1xuXHRcdFx0XHRtZW1vcnkgPSBmYWxzZTtcblx0XHRcdH1cblxuXHRcdFx0ZmlyaW5nID0gZmFsc2U7XG5cblx0XHRcdC8vIENsZWFuIHVwIGlmIHdlJ3JlIGRvbmUgZmlyaW5nIGZvciBnb29kXG5cdFx0XHRpZiAoIGxvY2tlZCApIHtcblxuXHRcdFx0XHQvLyBLZWVwIGFuIGVtcHR5IGxpc3QgaWYgd2UgaGF2ZSBkYXRhIGZvciBmdXR1cmUgYWRkIGNhbGxzXG5cdFx0XHRcdGlmICggbWVtb3J5ICkge1xuXHRcdFx0XHRcdGxpc3QgPSBbXTtcblxuXHRcdFx0XHQvLyBPdGhlcndpc2UsIHRoaXMgb2JqZWN0IGlzIHNwZW50XG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0bGlzdCA9IFwiXCI7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9LFxuXG5cdFx0Ly8gQWN0dWFsIENhbGxiYWNrcyBvYmplY3Rcblx0XHRzZWxmID0ge1xuXG5cdFx0XHQvLyBBZGQgYSBjYWxsYmFjayBvciBhIGNvbGxlY3Rpb24gb2YgY2FsbGJhY2tzIHRvIHRoZSBsaXN0XG5cdFx0XHRhZGQ6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRpZiAoIGxpc3QgKSB7XG5cblx0XHRcdFx0XHQvLyBJZiB3ZSBoYXZlIG1lbW9yeSBmcm9tIGEgcGFzdCBydW4sIHdlIHNob3VsZCBmaXJlIGFmdGVyIGFkZGluZ1xuXHRcdFx0XHRcdGlmICggbWVtb3J5ICYmICFmaXJpbmcgKSB7XG5cdFx0XHRcdFx0XHRmaXJpbmdJbmRleCA9IGxpc3QubGVuZ3RoIC0gMTtcblx0XHRcdFx0XHRcdHF1ZXVlLnB1c2goIG1lbW9yeSApO1xuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdCggZnVuY3Rpb24gYWRkKCBhcmdzICkge1xuXHRcdFx0XHRcdFx0alF1ZXJ5LmVhY2goIGFyZ3MsIGZ1bmN0aW9uKCBfLCBhcmcgKSB7XG5cdFx0XHRcdFx0XHRcdGlmICggaXNGdW5jdGlvbiggYXJnICkgKSB7XG5cdFx0XHRcdFx0XHRcdFx0aWYgKCAhb3B0aW9ucy51bmlxdWUgfHwgIXNlbGYuaGFzKCBhcmcgKSApIHtcblx0XHRcdFx0XHRcdFx0XHRcdGxpc3QucHVzaCggYXJnICk7XG5cdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHR9IGVsc2UgaWYgKCBhcmcgJiYgYXJnLmxlbmd0aCAmJiB0b1R5cGUoIGFyZyApICE9PSBcInN0cmluZ1wiICkge1xuXG5cdFx0XHRcdFx0XHRcdFx0Ly8gSW5zcGVjdCByZWN1cnNpdmVseVxuXHRcdFx0XHRcdFx0XHRcdGFkZCggYXJnICk7XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH0gKTtcblx0XHRcdFx0XHR9ICkoIGFyZ3VtZW50cyApO1xuXG5cdFx0XHRcdFx0aWYgKCBtZW1vcnkgJiYgIWZpcmluZyApIHtcblx0XHRcdFx0XHRcdGZpcmUoKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0XHR9LFxuXG5cdFx0XHQvLyBSZW1vdmUgYSBjYWxsYmFjayBmcm9tIHRoZSBsaXN0XG5cdFx0XHRyZW1vdmU6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRqUXVlcnkuZWFjaCggYXJndW1lbnRzLCBmdW5jdGlvbiggXywgYXJnICkge1xuXHRcdFx0XHRcdHZhciBpbmRleDtcblx0XHRcdFx0XHR3aGlsZSAoICggaW5kZXggPSBqUXVlcnkuaW5BcnJheSggYXJnLCBsaXN0LCBpbmRleCApICkgPiAtMSApIHtcblx0XHRcdFx0XHRcdGxpc3Quc3BsaWNlKCBpbmRleCwgMSApO1xuXG5cdFx0XHRcdFx0XHQvLyBIYW5kbGUgZmlyaW5nIGluZGV4ZXNcblx0XHRcdFx0XHRcdGlmICggaW5kZXggPD0gZmlyaW5nSW5kZXggKSB7XG5cdFx0XHRcdFx0XHRcdGZpcmluZ0luZGV4LS07XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9ICk7XG5cdFx0XHRcdHJldHVybiB0aGlzO1xuXHRcdFx0fSxcblxuXHRcdFx0Ly8gQ2hlY2sgaWYgYSBnaXZlbiBjYWxsYmFjayBpcyBpbiB0aGUgbGlzdC5cblx0XHRcdC8vIElmIG5vIGFyZ3VtZW50IGlzIGdpdmVuLCByZXR1cm4gd2hldGhlciBvciBub3QgbGlzdCBoYXMgY2FsbGJhY2tzIGF0dGFjaGVkLlxuXHRcdFx0aGFzOiBmdW5jdGlvbiggZm4gKSB7XG5cdFx0XHRcdHJldHVybiBmbiA/XG5cdFx0XHRcdFx0alF1ZXJ5LmluQXJyYXkoIGZuLCBsaXN0ICkgPiAtMSA6XG5cdFx0XHRcdFx0bGlzdC5sZW5ndGggPiAwO1xuXHRcdFx0fSxcblxuXHRcdFx0Ly8gUmVtb3ZlIGFsbCBjYWxsYmFja3MgZnJvbSB0aGUgbGlzdFxuXHRcdFx0ZW1wdHk6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRpZiAoIGxpc3QgKSB7XG5cdFx0XHRcdFx0bGlzdCA9IFtdO1xuXHRcdFx0XHR9XG5cdFx0XHRcdHJldHVybiB0aGlzO1xuXHRcdFx0fSxcblxuXHRcdFx0Ly8gRGlzYWJsZSAuZmlyZSBhbmQgLmFkZFxuXHRcdFx0Ly8gQWJvcnQgYW55IGN1cnJlbnQvcGVuZGluZyBleGVjdXRpb25zXG5cdFx0XHQvLyBDbGVhciBhbGwgY2FsbGJhY2tzIGFuZCB2YWx1ZXNcblx0XHRcdGRpc2FibGU6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRsb2NrZWQgPSBxdWV1ZSA9IFtdO1xuXHRcdFx0XHRsaXN0ID0gbWVtb3J5ID0gXCJcIjtcblx0XHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0XHR9LFxuXHRcdFx0ZGlzYWJsZWQ6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRyZXR1cm4gIWxpc3Q7XG5cdFx0XHR9LFxuXG5cdFx0XHQvLyBEaXNhYmxlIC5maXJlXG5cdFx0XHQvLyBBbHNvIGRpc2FibGUgLmFkZCB1bmxlc3Mgd2UgaGF2ZSBtZW1vcnkgKHNpbmNlIGl0IHdvdWxkIGhhdmUgbm8gZWZmZWN0KVxuXHRcdFx0Ly8gQWJvcnQgYW55IHBlbmRpbmcgZXhlY3V0aW9uc1xuXHRcdFx0bG9jazogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGxvY2tlZCA9IHF1ZXVlID0gW107XG5cdFx0XHRcdGlmICggIW1lbW9yeSAmJiAhZmlyaW5nICkge1xuXHRcdFx0XHRcdGxpc3QgPSBtZW1vcnkgPSBcIlwiO1xuXHRcdFx0XHR9XG5cdFx0XHRcdHJldHVybiB0aGlzO1xuXHRcdFx0fSxcblx0XHRcdGxvY2tlZDogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdHJldHVybiAhIWxvY2tlZDtcblx0XHRcdH0sXG5cblx0XHRcdC8vIENhbGwgYWxsIGNhbGxiYWNrcyB3aXRoIHRoZSBnaXZlbiBjb250ZXh0IGFuZCBhcmd1bWVudHNcblx0XHRcdGZpcmVXaXRoOiBmdW5jdGlvbiggY29udGV4dCwgYXJncyApIHtcblx0XHRcdFx0aWYgKCAhbG9ja2VkICkge1xuXHRcdFx0XHRcdGFyZ3MgPSBhcmdzIHx8IFtdO1xuXHRcdFx0XHRcdGFyZ3MgPSBbIGNvbnRleHQsIGFyZ3Muc2xpY2UgPyBhcmdzLnNsaWNlKCkgOiBhcmdzIF07XG5cdFx0XHRcdFx0cXVldWUucHVzaCggYXJncyApO1xuXHRcdFx0XHRcdGlmICggIWZpcmluZyApIHtcblx0XHRcdFx0XHRcdGZpcmUoKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0XHR9LFxuXG5cdFx0XHQvLyBDYWxsIGFsbCB0aGUgY2FsbGJhY2tzIHdpdGggdGhlIGdpdmVuIGFyZ3VtZW50c1xuXHRcdFx0ZmlyZTogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdHNlbGYuZmlyZVdpdGgoIHRoaXMsIGFyZ3VtZW50cyApO1xuXHRcdFx0XHRyZXR1cm4gdGhpcztcblx0XHRcdH0sXG5cblx0XHRcdC8vIFRvIGtub3cgaWYgdGhlIGNhbGxiYWNrcyBoYXZlIGFscmVhZHkgYmVlbiBjYWxsZWQgYXQgbGVhc3Qgb25jZVxuXHRcdFx0ZmlyZWQ6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRyZXR1cm4gISFmaXJlZDtcblx0XHRcdH1cblx0XHR9O1xuXG5cdHJldHVybiBzZWxmO1xufTtcblxuXG5mdW5jdGlvbiBJZGVudGl0eSggdiApIHtcblx0cmV0dXJuIHY7XG59XG5mdW5jdGlvbiBUaHJvd2VyKCBleCApIHtcblx0dGhyb3cgZXg7XG59XG5cbmZ1bmN0aW9uIGFkb3B0VmFsdWUoIHZhbHVlLCByZXNvbHZlLCByZWplY3QsIG5vVmFsdWUgKSB7XG5cdHZhciBtZXRob2Q7XG5cblx0dHJ5IHtcblxuXHRcdC8vIENoZWNrIGZvciBwcm9taXNlIGFzcGVjdCBmaXJzdCB0byBwcml2aWxlZ2Ugc3luY2hyb25vdXMgYmVoYXZpb3Jcblx0XHRpZiAoIHZhbHVlICYmIGlzRnVuY3Rpb24oICggbWV0aG9kID0gdmFsdWUucHJvbWlzZSApICkgKSB7XG5cdFx0XHRtZXRob2QuY2FsbCggdmFsdWUgKS5kb25lKCByZXNvbHZlICkuZmFpbCggcmVqZWN0ICk7XG5cblx0XHQvLyBPdGhlciB0aGVuYWJsZXNcblx0XHR9IGVsc2UgaWYgKCB2YWx1ZSAmJiBpc0Z1bmN0aW9uKCAoIG1ldGhvZCA9IHZhbHVlLnRoZW4gKSApICkge1xuXHRcdFx0bWV0aG9kLmNhbGwoIHZhbHVlLCByZXNvbHZlLCByZWplY3QgKTtcblxuXHRcdC8vIE90aGVyIG5vbi10aGVuYWJsZXNcblx0XHR9IGVsc2Uge1xuXG5cdFx0XHQvLyBDb250cm9sIGByZXNvbHZlYCBhcmd1bWVudHMgYnkgbGV0dGluZyBBcnJheSNzbGljZSBjYXN0IGJvb2xlYW4gYG5vVmFsdWVgIHRvIGludGVnZXI6XG5cdFx0XHQvLyAqIGZhbHNlOiBbIHZhbHVlIF0uc2xpY2UoIDAgKSA9PiByZXNvbHZlKCB2YWx1ZSApXG5cdFx0XHQvLyAqIHRydWU6IFsgdmFsdWUgXS5zbGljZSggMSApID0+IHJlc29sdmUoKVxuXHRcdFx0cmVzb2x2ZS5hcHBseSggdW5kZWZpbmVkLCBbIHZhbHVlIF0uc2xpY2UoIG5vVmFsdWUgKSApO1xuXHRcdH1cblxuXHQvLyBGb3IgUHJvbWlzZXMvQSssIGNvbnZlcnQgZXhjZXB0aW9ucyBpbnRvIHJlamVjdGlvbnNcblx0Ly8gU2luY2UgalF1ZXJ5LndoZW4gZG9lc24ndCB1bndyYXAgdGhlbmFibGVzLCB3ZSBjYW4gc2tpcCB0aGUgZXh0cmEgY2hlY2tzIGFwcGVhcmluZyBpblxuXHQvLyBEZWZlcnJlZCN0aGVuIHRvIGNvbmRpdGlvbmFsbHkgc3VwcHJlc3MgcmVqZWN0aW9uLlxuXHR9IGNhdGNoICggdmFsdWUgKSB7XG5cblx0XHQvLyBTdXBwb3J0OiBBbmRyb2lkIDQuMCBvbmx5XG5cdFx0Ly8gU3RyaWN0IG1vZGUgZnVuY3Rpb25zIGludm9rZWQgd2l0aG91dCAuY2FsbC8uYXBwbHkgZ2V0IGdsb2JhbC1vYmplY3QgY29udGV4dFxuXHRcdHJlamVjdC5hcHBseSggdW5kZWZpbmVkLCBbIHZhbHVlIF0gKTtcblx0fVxufVxuXG5qUXVlcnkuZXh0ZW5kKCB7XG5cblx0RGVmZXJyZWQ6IGZ1bmN0aW9uKCBmdW5jICkge1xuXHRcdHZhciB0dXBsZXMgPSBbXG5cblx0XHRcdFx0Ly8gYWN0aW9uLCBhZGQgbGlzdGVuZXIsIGNhbGxiYWNrcyxcblx0XHRcdFx0Ly8gLi4uIC50aGVuIGhhbmRsZXJzLCBhcmd1bWVudCBpbmRleCwgW2ZpbmFsIHN0YXRlXVxuXHRcdFx0XHRbIFwibm90aWZ5XCIsIFwicHJvZ3Jlc3NcIiwgalF1ZXJ5LkNhbGxiYWNrcyggXCJtZW1vcnlcIiApLFxuXHRcdFx0XHRcdGpRdWVyeS5DYWxsYmFja3MoIFwibWVtb3J5XCIgKSwgMiBdLFxuXHRcdFx0XHRbIFwicmVzb2x2ZVwiLCBcImRvbmVcIiwgalF1ZXJ5LkNhbGxiYWNrcyggXCJvbmNlIG1lbW9yeVwiICksXG5cdFx0XHRcdFx0alF1ZXJ5LkNhbGxiYWNrcyggXCJvbmNlIG1lbW9yeVwiICksIDAsIFwicmVzb2x2ZWRcIiBdLFxuXHRcdFx0XHRbIFwicmVqZWN0XCIsIFwiZmFpbFwiLCBqUXVlcnkuQ2FsbGJhY2tzKCBcIm9uY2UgbWVtb3J5XCIgKSxcblx0XHRcdFx0XHRqUXVlcnkuQ2FsbGJhY2tzKCBcIm9uY2UgbWVtb3J5XCIgKSwgMSwgXCJyZWplY3RlZFwiIF1cblx0XHRcdF0sXG5cdFx0XHRzdGF0ZSA9IFwicGVuZGluZ1wiLFxuXHRcdFx0cHJvbWlzZSA9IHtcblx0XHRcdFx0c3RhdGU6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdHJldHVybiBzdGF0ZTtcblx0XHRcdFx0fSxcblx0XHRcdFx0YWx3YXlzOiBmdW5jdGlvbigpIHtcblx0XHRcdFx0XHRkZWZlcnJlZC5kb25lKCBhcmd1bWVudHMgKS5mYWlsKCBhcmd1bWVudHMgKTtcblx0XHRcdFx0XHRyZXR1cm4gdGhpcztcblx0XHRcdFx0fSxcblx0XHRcdFx0XCJjYXRjaFwiOiBmdW5jdGlvbiggZm4gKSB7XG5cdFx0XHRcdFx0cmV0dXJuIHByb21pc2UudGhlbiggbnVsbCwgZm4gKTtcblx0XHRcdFx0fSxcblxuXHRcdFx0XHQvLyBLZWVwIHBpcGUgZm9yIGJhY2stY29tcGF0XG5cdFx0XHRcdHBpcGU6IGZ1bmN0aW9uKCAvKiBmbkRvbmUsIGZuRmFpbCwgZm5Qcm9ncmVzcyAqLyApIHtcblx0XHRcdFx0XHR2YXIgZm5zID0gYXJndW1lbnRzO1xuXG5cdFx0XHRcdFx0cmV0dXJuIGpRdWVyeS5EZWZlcnJlZCggZnVuY3Rpb24oIG5ld0RlZmVyICkge1xuXHRcdFx0XHRcdFx0alF1ZXJ5LmVhY2goIHR1cGxlcywgZnVuY3Rpb24oIGksIHR1cGxlICkge1xuXG5cdFx0XHRcdFx0XHRcdC8vIE1hcCB0dXBsZXMgKHByb2dyZXNzLCBkb25lLCBmYWlsKSB0byBhcmd1bWVudHMgKGRvbmUsIGZhaWwsIHByb2dyZXNzKVxuXHRcdFx0XHRcdFx0XHR2YXIgZm4gPSBpc0Z1bmN0aW9uKCBmbnNbIHR1cGxlWyA0IF0gXSApICYmIGZuc1sgdHVwbGVbIDQgXSBdO1xuXG5cdFx0XHRcdFx0XHRcdC8vIGRlZmVycmVkLnByb2dyZXNzKGZ1bmN0aW9uKCkgeyBiaW5kIHRvIG5ld0RlZmVyIG9yIG5ld0RlZmVyLm5vdGlmeSB9KVxuXHRcdFx0XHRcdFx0XHQvLyBkZWZlcnJlZC5kb25lKGZ1bmN0aW9uKCkgeyBiaW5kIHRvIG5ld0RlZmVyIG9yIG5ld0RlZmVyLnJlc29sdmUgfSlcblx0XHRcdFx0XHRcdFx0Ly8gZGVmZXJyZWQuZmFpbChmdW5jdGlvbigpIHsgYmluZCB0byBuZXdEZWZlciBvciBuZXdEZWZlci5yZWplY3QgfSlcblx0XHRcdFx0XHRcdFx0ZGVmZXJyZWRbIHR1cGxlWyAxIF0gXSggZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0XHRcdFx0dmFyIHJldHVybmVkID0gZm4gJiYgZm4uYXBwbHkoIHRoaXMsIGFyZ3VtZW50cyApO1xuXHRcdFx0XHRcdFx0XHRcdGlmICggcmV0dXJuZWQgJiYgaXNGdW5jdGlvbiggcmV0dXJuZWQucHJvbWlzZSApICkge1xuXHRcdFx0XHRcdFx0XHRcdFx0cmV0dXJuZWQucHJvbWlzZSgpXG5cdFx0XHRcdFx0XHRcdFx0XHRcdC5wcm9ncmVzcyggbmV3RGVmZXIubm90aWZ5IClcblx0XHRcdFx0XHRcdFx0XHRcdFx0LmRvbmUoIG5ld0RlZmVyLnJlc29sdmUgKVxuXHRcdFx0XHRcdFx0XHRcdFx0XHQuZmFpbCggbmV3RGVmZXIucmVqZWN0ICk7XG5cdFx0XHRcdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdFx0XHRcdG5ld0RlZmVyWyB0dXBsZVsgMCBdICsgXCJXaXRoXCIgXShcblx0XHRcdFx0XHRcdFx0XHRcdFx0dGhpcyxcblx0XHRcdFx0XHRcdFx0XHRcdFx0Zm4gPyBbIHJldHVybmVkIF0gOiBhcmd1bWVudHNcblx0XHRcdFx0XHRcdFx0XHRcdCk7XG5cdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHR9ICk7XG5cdFx0XHRcdFx0XHR9ICk7XG5cdFx0XHRcdFx0XHRmbnMgPSBudWxsO1xuXHRcdFx0XHRcdH0gKS5wcm9taXNlKCk7XG5cdFx0XHRcdH0sXG5cdFx0XHRcdHRoZW46IGZ1bmN0aW9uKCBvbkZ1bGZpbGxlZCwgb25SZWplY3RlZCwgb25Qcm9ncmVzcyApIHtcblx0XHRcdFx0XHR2YXIgbWF4RGVwdGggPSAwO1xuXHRcdFx0XHRcdGZ1bmN0aW9uIHJlc29sdmUoIGRlcHRoLCBkZWZlcnJlZCwgaGFuZGxlciwgc3BlY2lhbCApIHtcblx0XHRcdFx0XHRcdHJldHVybiBmdW5jdGlvbigpIHtcblx0XHRcdFx0XHRcdFx0dmFyIHRoYXQgPSB0aGlzLFxuXHRcdFx0XHRcdFx0XHRcdGFyZ3MgPSBhcmd1bWVudHMsXG5cdFx0XHRcdFx0XHRcdFx0bWlnaHRUaHJvdyA9IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdFx0XHRcdFx0dmFyIHJldHVybmVkLCB0aGVuO1xuXG5cdFx0XHRcdFx0XHRcdFx0XHQvLyBTdXBwb3J0OiBQcm9taXNlcy9BKyBzZWN0aW9uIDIuMy4zLjMuM1xuXHRcdFx0XHRcdFx0XHRcdFx0Ly8gaHR0cHM6Ly9wcm9taXNlc2FwbHVzLmNvbS8jcG9pbnQtNTlcblx0XHRcdFx0XHRcdFx0XHRcdC8vIElnbm9yZSBkb3VibGUtcmVzb2x1dGlvbiBhdHRlbXB0c1xuXHRcdFx0XHRcdFx0XHRcdFx0aWYgKCBkZXB0aCA8IG1heERlcHRoICkge1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRyZXR1cm47XG5cdFx0XHRcdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdFx0XHRcdHJldHVybmVkID0gaGFuZGxlci5hcHBseSggdGhhdCwgYXJncyApO1xuXG5cdFx0XHRcdFx0XHRcdFx0XHQvLyBTdXBwb3J0OiBQcm9taXNlcy9BKyBzZWN0aW9uIDIuMy4xXG5cdFx0XHRcdFx0XHRcdFx0XHQvLyBodHRwczovL3Byb21pc2VzYXBsdXMuY29tLyNwb2ludC00OFxuXHRcdFx0XHRcdFx0XHRcdFx0aWYgKCByZXR1cm5lZCA9PT0gZGVmZXJyZWQucHJvbWlzZSgpICkge1xuXHRcdFx0XHRcdFx0XHRcdFx0XHR0aHJvdyBuZXcgVHlwZUVycm9yKCBcIlRoZW5hYmxlIHNlbGYtcmVzb2x1dGlvblwiICk7XG5cdFx0XHRcdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdFx0XHRcdC8vIFN1cHBvcnQ6IFByb21pc2VzL0ErIHNlY3Rpb25zIDIuMy4zLjEsIDMuNVxuXHRcdFx0XHRcdFx0XHRcdFx0Ly8gaHR0cHM6Ly9wcm9taXNlc2FwbHVzLmNvbS8jcG9pbnQtNTRcblx0XHRcdFx0XHRcdFx0XHRcdC8vIGh0dHBzOi8vcHJvbWlzZXNhcGx1cy5jb20vI3BvaW50LTc1XG5cdFx0XHRcdFx0XHRcdFx0XHQvLyBSZXRyaWV2ZSBgdGhlbmAgb25seSBvbmNlXG5cdFx0XHRcdFx0XHRcdFx0XHR0aGVuID0gcmV0dXJuZWQgJiZcblxuXHRcdFx0XHRcdFx0XHRcdFx0XHQvLyBTdXBwb3J0OiBQcm9taXNlcy9BKyBzZWN0aW9uIDIuMy40XG5cdFx0XHRcdFx0XHRcdFx0XHRcdC8vIGh0dHBzOi8vcHJvbWlzZXNhcGx1cy5jb20vI3BvaW50LTY0XG5cdFx0XHRcdFx0XHRcdFx0XHRcdC8vIE9ubHkgY2hlY2sgb2JqZWN0cyBhbmQgZnVuY3Rpb25zIGZvciB0aGVuYWJpbGl0eVxuXHRcdFx0XHRcdFx0XHRcdFx0XHQoIHR5cGVvZiByZXR1cm5lZCA9PT0gXCJvYmplY3RcIiB8fFxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdHR5cGVvZiByZXR1cm5lZCA9PT0gXCJmdW5jdGlvblwiICkgJiZcblx0XHRcdFx0XHRcdFx0XHRcdFx0cmV0dXJuZWQudGhlbjtcblxuXHRcdFx0XHRcdFx0XHRcdFx0Ly8gSGFuZGxlIGEgcmV0dXJuZWQgdGhlbmFibGVcblx0XHRcdFx0XHRcdFx0XHRcdGlmICggaXNGdW5jdGlvbiggdGhlbiApICkge1xuXG5cdFx0XHRcdFx0XHRcdFx0XHRcdC8vIFNwZWNpYWwgcHJvY2Vzc29ycyAobm90aWZ5KSBqdXN0IHdhaXQgZm9yIHJlc29sdXRpb25cblx0XHRcdFx0XHRcdFx0XHRcdFx0aWYgKCBzcGVjaWFsICkge1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdHRoZW4uY2FsbChcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdHJldHVybmVkLFxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0cmVzb2x2ZSggbWF4RGVwdGgsIGRlZmVycmVkLCBJZGVudGl0eSwgc3BlY2lhbCApLFxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0cmVzb2x2ZSggbWF4RGVwdGgsIGRlZmVycmVkLCBUaHJvd2VyLCBzcGVjaWFsIClcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHQpO1xuXG5cdFx0XHRcdFx0XHRcdFx0XHRcdC8vIE5vcm1hbCBwcm9jZXNzb3JzIChyZXNvbHZlKSBhbHNvIGhvb2sgaW50byBwcm9ncmVzc1xuXHRcdFx0XHRcdFx0XHRcdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0Ly8gLi4uYW5kIGRpc3JlZ2FyZCBvbGRlciByZXNvbHV0aW9uIHZhbHVlc1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdG1heERlcHRoKys7XG5cblx0XHRcdFx0XHRcdFx0XHRcdFx0XHR0aGVuLmNhbGwoXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRyZXR1cm5lZCxcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdHJlc29sdmUoIG1heERlcHRoLCBkZWZlcnJlZCwgSWRlbnRpdHksIHNwZWNpYWwgKSxcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdHJlc29sdmUoIG1heERlcHRoLCBkZWZlcnJlZCwgVGhyb3dlciwgc3BlY2lhbCApLFxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0cmVzb2x2ZSggbWF4RGVwdGgsIGRlZmVycmVkLCBJZGVudGl0eSxcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0ZGVmZXJyZWQubm90aWZ5V2l0aCApXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0KTtcblx0XHRcdFx0XHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHRcdFx0XHQvLyBIYW5kbGUgYWxsIG90aGVyIHJldHVybmVkIHZhbHVlc1xuXHRcdFx0XHRcdFx0XHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRcdFx0XHRcdFx0XHQvLyBPbmx5IHN1YnN0aXR1dGUgaGFuZGxlcnMgcGFzcyBvbiBjb250ZXh0XG5cdFx0XHRcdFx0XHRcdFx0XHRcdC8vIGFuZCBtdWx0aXBsZSB2YWx1ZXMgKG5vbi1zcGVjIGJlaGF2aW9yKVxuXHRcdFx0XHRcdFx0XHRcdFx0XHRpZiAoIGhhbmRsZXIgIT09IElkZW50aXR5ICkge1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdHRoYXQgPSB1bmRlZmluZWQ7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0YXJncyA9IFsgcmV0dXJuZWQgXTtcblx0XHRcdFx0XHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHRcdFx0XHRcdC8vIFByb2Nlc3MgdGhlIHZhbHVlKHMpXG5cdFx0XHRcdFx0XHRcdFx0XHRcdC8vIERlZmF1bHQgcHJvY2VzcyBpcyByZXNvbHZlXG5cdFx0XHRcdFx0XHRcdFx0XHRcdCggc3BlY2lhbCB8fCBkZWZlcnJlZC5yZXNvbHZlV2l0aCApKCB0aGF0LCBhcmdzICk7XG5cdFx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdFx0fSxcblxuXHRcdFx0XHRcdFx0XHRcdC8vIE9ubHkgbm9ybWFsIHByb2Nlc3NvcnMgKHJlc29sdmUpIGNhdGNoIGFuZCByZWplY3QgZXhjZXB0aW9uc1xuXHRcdFx0XHRcdFx0XHRcdHByb2Nlc3MgPSBzcGVjaWFsID9cblx0XHRcdFx0XHRcdFx0XHRcdG1pZ2h0VGhyb3cgOlxuXHRcdFx0XHRcdFx0XHRcdFx0ZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdHRyeSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0bWlnaHRUaHJvdygpO1xuXHRcdFx0XHRcdFx0XHRcdFx0XHR9IGNhdGNoICggZSApIHtcblxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdGlmICggalF1ZXJ5LkRlZmVycmVkLmV4Y2VwdGlvbkhvb2sgKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRqUXVlcnkuRGVmZXJyZWQuZXhjZXB0aW9uSG9vayggZSxcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0cHJvY2Vzcy5zdGFja1RyYWNlICk7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0Ly8gU3VwcG9ydDogUHJvbWlzZXMvQSsgc2VjdGlvbiAyLjMuMy4zLjQuMVxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdC8vIGh0dHBzOi8vcHJvbWlzZXNhcGx1cy5jb20vI3BvaW50LTYxXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0Ly8gSWdub3JlIHBvc3QtcmVzb2x1dGlvbiBleGNlcHRpb25zXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0aWYgKCBkZXB0aCArIDEgPj0gbWF4RGVwdGggKSB7XG5cblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdC8vIE9ubHkgc3Vic3RpdHV0ZSBoYW5kbGVycyBwYXNzIG9uIGNvbnRleHRcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdC8vIGFuZCBtdWx0aXBsZSB2YWx1ZXMgKG5vbi1zcGVjIGJlaGF2aW9yKVxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0aWYgKCBoYW5kbGVyICE9PSBUaHJvd2VyICkge1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHR0aGF0ID0gdW5kZWZpbmVkO1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRhcmdzID0gWyBlIF07XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdGRlZmVycmVkLnJlamVjdFdpdGgoIHRoYXQsIGFyZ3MgKTtcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0XHRcdH07XG5cblx0XHRcdFx0XHRcdFx0Ly8gU3VwcG9ydDogUHJvbWlzZXMvQSsgc2VjdGlvbiAyLjMuMy4zLjFcblx0XHRcdFx0XHRcdFx0Ly8gaHR0cHM6Ly9wcm9taXNlc2FwbHVzLmNvbS8jcG9pbnQtNTdcblx0XHRcdFx0XHRcdFx0Ly8gUmUtcmVzb2x2ZSBwcm9taXNlcyBpbW1lZGlhdGVseSB0byBkb2RnZSBmYWxzZSByZWplY3Rpb24gZnJvbVxuXHRcdFx0XHRcdFx0XHQvLyBzdWJzZXF1ZW50IGVycm9yc1xuXHRcdFx0XHRcdFx0XHRpZiAoIGRlcHRoICkge1xuXHRcdFx0XHRcdFx0XHRcdHByb2Nlc3MoKTtcblx0XHRcdFx0XHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRcdFx0XHRcdC8vIENhbGwgYW4gb3B0aW9uYWwgaG9vayB0byByZWNvcmQgdGhlIHN0YWNrLCBpbiBjYXNlIG9mIGV4Y2VwdGlvblxuXHRcdFx0XHRcdFx0XHRcdC8vIHNpbmNlIGl0J3Mgb3RoZXJ3aXNlIGxvc3Qgd2hlbiBleGVjdXRpb24gZ29lcyBhc3luY1xuXHRcdFx0XHRcdFx0XHRcdGlmICggalF1ZXJ5LkRlZmVycmVkLmdldFN0YWNrSG9vayApIHtcblx0XHRcdFx0XHRcdFx0XHRcdHByb2Nlc3Muc3RhY2tUcmFjZSA9IGpRdWVyeS5EZWZlcnJlZC5nZXRTdGFja0hvb2soKTtcblx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdFx0d2luZG93LnNldFRpbWVvdXQoIHByb2Nlc3MgKTtcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fTtcblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRyZXR1cm4galF1ZXJ5LkRlZmVycmVkKCBmdW5jdGlvbiggbmV3RGVmZXIgKSB7XG5cblx0XHRcdFx0XHRcdC8vIHByb2dyZXNzX2hhbmRsZXJzLmFkZCggLi4uIClcblx0XHRcdFx0XHRcdHR1cGxlc1sgMCBdWyAzIF0uYWRkKFxuXHRcdFx0XHRcdFx0XHRyZXNvbHZlKFxuXHRcdFx0XHRcdFx0XHRcdDAsXG5cdFx0XHRcdFx0XHRcdFx0bmV3RGVmZXIsXG5cdFx0XHRcdFx0XHRcdFx0aXNGdW5jdGlvbiggb25Qcm9ncmVzcyApID9cblx0XHRcdFx0XHRcdFx0XHRcdG9uUHJvZ3Jlc3MgOlxuXHRcdFx0XHRcdFx0XHRcdFx0SWRlbnRpdHksXG5cdFx0XHRcdFx0XHRcdFx0bmV3RGVmZXIubm90aWZ5V2l0aFxuXHRcdFx0XHRcdFx0XHQpXG5cdFx0XHRcdFx0XHQpO1xuXG5cdFx0XHRcdFx0XHQvLyBmdWxmaWxsZWRfaGFuZGxlcnMuYWRkKCAuLi4gKVxuXHRcdFx0XHRcdFx0dHVwbGVzWyAxIF1bIDMgXS5hZGQoXG5cdFx0XHRcdFx0XHRcdHJlc29sdmUoXG5cdFx0XHRcdFx0XHRcdFx0MCxcblx0XHRcdFx0XHRcdFx0XHRuZXdEZWZlcixcblx0XHRcdFx0XHRcdFx0XHRpc0Z1bmN0aW9uKCBvbkZ1bGZpbGxlZCApID9cblx0XHRcdFx0XHRcdFx0XHRcdG9uRnVsZmlsbGVkIDpcblx0XHRcdFx0XHRcdFx0XHRcdElkZW50aXR5XG5cdFx0XHRcdFx0XHRcdClcblx0XHRcdFx0XHRcdCk7XG5cblx0XHRcdFx0XHRcdC8vIHJlamVjdGVkX2hhbmRsZXJzLmFkZCggLi4uIClcblx0XHRcdFx0XHRcdHR1cGxlc1sgMiBdWyAzIF0uYWRkKFxuXHRcdFx0XHRcdFx0XHRyZXNvbHZlKFxuXHRcdFx0XHRcdFx0XHRcdDAsXG5cdFx0XHRcdFx0XHRcdFx0bmV3RGVmZXIsXG5cdFx0XHRcdFx0XHRcdFx0aXNGdW5jdGlvbiggb25SZWplY3RlZCApID9cblx0XHRcdFx0XHRcdFx0XHRcdG9uUmVqZWN0ZWQgOlxuXHRcdFx0XHRcdFx0XHRcdFx0VGhyb3dlclxuXHRcdFx0XHRcdFx0XHQpXG5cdFx0XHRcdFx0XHQpO1xuXHRcdFx0XHRcdH0gKS5wcm9taXNlKCk7XG5cdFx0XHRcdH0sXG5cblx0XHRcdFx0Ly8gR2V0IGEgcHJvbWlzZSBmb3IgdGhpcyBkZWZlcnJlZFxuXHRcdFx0XHQvLyBJZiBvYmogaXMgcHJvdmlkZWQsIHRoZSBwcm9taXNlIGFzcGVjdCBpcyBhZGRlZCB0byB0aGUgb2JqZWN0XG5cdFx0XHRcdHByb21pc2U6IGZ1bmN0aW9uKCBvYmogKSB7XG5cdFx0XHRcdFx0cmV0dXJuIG9iaiAhPSBudWxsID8galF1ZXJ5LmV4dGVuZCggb2JqLCBwcm9taXNlICkgOiBwcm9taXNlO1xuXHRcdFx0XHR9XG5cdFx0XHR9LFxuXHRcdFx0ZGVmZXJyZWQgPSB7fTtcblxuXHRcdC8vIEFkZCBsaXN0LXNwZWNpZmljIG1ldGhvZHNcblx0XHRqUXVlcnkuZWFjaCggdHVwbGVzLCBmdW5jdGlvbiggaSwgdHVwbGUgKSB7XG5cdFx0XHR2YXIgbGlzdCA9IHR1cGxlWyAyIF0sXG5cdFx0XHRcdHN0YXRlU3RyaW5nID0gdHVwbGVbIDUgXTtcblxuXHRcdFx0Ly8gcHJvbWlzZS5wcm9ncmVzcyA9IGxpc3QuYWRkXG5cdFx0XHQvLyBwcm9taXNlLmRvbmUgPSBsaXN0LmFkZFxuXHRcdFx0Ly8gcHJvbWlzZS5mYWlsID0gbGlzdC5hZGRcblx0XHRcdHByb21pc2VbIHR1cGxlWyAxIF0gXSA9IGxpc3QuYWRkO1xuXG5cdFx0XHQvLyBIYW5kbGUgc3RhdGVcblx0XHRcdGlmICggc3RhdGVTdHJpbmcgKSB7XG5cdFx0XHRcdGxpc3QuYWRkKFxuXHRcdFx0XHRcdGZ1bmN0aW9uKCkge1xuXG5cdFx0XHRcdFx0XHQvLyBzdGF0ZSA9IFwicmVzb2x2ZWRcIiAoaS5lLiwgZnVsZmlsbGVkKVxuXHRcdFx0XHRcdFx0Ly8gc3RhdGUgPSBcInJlamVjdGVkXCJcblx0XHRcdFx0XHRcdHN0YXRlID0gc3RhdGVTdHJpbmc7XG5cdFx0XHRcdFx0fSxcblxuXHRcdFx0XHRcdC8vIHJlamVjdGVkX2NhbGxiYWNrcy5kaXNhYmxlXG5cdFx0XHRcdFx0Ly8gZnVsZmlsbGVkX2NhbGxiYWNrcy5kaXNhYmxlXG5cdFx0XHRcdFx0dHVwbGVzWyAzIC0gaSBdWyAyIF0uZGlzYWJsZSxcblxuXHRcdFx0XHRcdC8vIHJlamVjdGVkX2hhbmRsZXJzLmRpc2FibGVcblx0XHRcdFx0XHQvLyBmdWxmaWxsZWRfaGFuZGxlcnMuZGlzYWJsZVxuXHRcdFx0XHRcdHR1cGxlc1sgMyAtIGkgXVsgMyBdLmRpc2FibGUsXG5cblx0XHRcdFx0XHQvLyBwcm9ncmVzc19jYWxsYmFja3MubG9ja1xuXHRcdFx0XHRcdHR1cGxlc1sgMCBdWyAyIF0ubG9jayxcblxuXHRcdFx0XHRcdC8vIHByb2dyZXNzX2hhbmRsZXJzLmxvY2tcblx0XHRcdFx0XHR0dXBsZXNbIDAgXVsgMyBdLmxvY2tcblx0XHRcdFx0KTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gcHJvZ3Jlc3NfaGFuZGxlcnMuZmlyZVxuXHRcdFx0Ly8gZnVsZmlsbGVkX2hhbmRsZXJzLmZpcmVcblx0XHRcdC8vIHJlamVjdGVkX2hhbmRsZXJzLmZpcmVcblx0XHRcdGxpc3QuYWRkKCB0dXBsZVsgMyBdLmZpcmUgKTtcblxuXHRcdFx0Ly8gZGVmZXJyZWQubm90aWZ5ID0gZnVuY3Rpb24oKSB7IGRlZmVycmVkLm5vdGlmeVdpdGgoLi4uKSB9XG5cdFx0XHQvLyBkZWZlcnJlZC5yZXNvbHZlID0gZnVuY3Rpb24oKSB7IGRlZmVycmVkLnJlc29sdmVXaXRoKC4uLikgfVxuXHRcdFx0Ly8gZGVmZXJyZWQucmVqZWN0ID0gZnVuY3Rpb24oKSB7IGRlZmVycmVkLnJlamVjdFdpdGgoLi4uKSB9XG5cdFx0XHRkZWZlcnJlZFsgdHVwbGVbIDAgXSBdID0gZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGRlZmVycmVkWyB0dXBsZVsgMCBdICsgXCJXaXRoXCIgXSggdGhpcyA9PT0gZGVmZXJyZWQgPyB1bmRlZmluZWQgOiB0aGlzLCBhcmd1bWVudHMgKTtcblx0XHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0XHR9O1xuXG5cdFx0XHQvLyBkZWZlcnJlZC5ub3RpZnlXaXRoID0gbGlzdC5maXJlV2l0aFxuXHRcdFx0Ly8gZGVmZXJyZWQucmVzb2x2ZVdpdGggPSBsaXN0LmZpcmVXaXRoXG5cdFx0XHQvLyBkZWZlcnJlZC5yZWplY3RXaXRoID0gbGlzdC5maXJlV2l0aFxuXHRcdFx0ZGVmZXJyZWRbIHR1cGxlWyAwIF0gKyBcIldpdGhcIiBdID0gbGlzdC5maXJlV2l0aDtcblx0XHR9ICk7XG5cblx0XHQvLyBNYWtlIHRoZSBkZWZlcnJlZCBhIHByb21pc2Vcblx0XHRwcm9taXNlLnByb21pc2UoIGRlZmVycmVkICk7XG5cblx0XHQvLyBDYWxsIGdpdmVuIGZ1bmMgaWYgYW55XG5cdFx0aWYgKCBmdW5jICkge1xuXHRcdFx0ZnVuYy5jYWxsKCBkZWZlcnJlZCwgZGVmZXJyZWQgKTtcblx0XHR9XG5cblx0XHQvLyBBbGwgZG9uZSFcblx0XHRyZXR1cm4gZGVmZXJyZWQ7XG5cdH0sXG5cblx0Ly8gRGVmZXJyZWQgaGVscGVyXG5cdHdoZW46IGZ1bmN0aW9uKCBzaW5nbGVWYWx1ZSApIHtcblx0XHR2YXJcblxuXHRcdFx0Ly8gY291bnQgb2YgdW5jb21wbGV0ZWQgc3Vib3JkaW5hdGVzXG5cdFx0XHRyZW1haW5pbmcgPSBhcmd1bWVudHMubGVuZ3RoLFxuXG5cdFx0XHQvLyBjb3VudCBvZiB1bnByb2Nlc3NlZCBhcmd1bWVudHNcblx0XHRcdGkgPSByZW1haW5pbmcsXG5cblx0XHRcdC8vIHN1Ym9yZGluYXRlIGZ1bGZpbGxtZW50IGRhdGFcblx0XHRcdHJlc29sdmVDb250ZXh0cyA9IEFycmF5KCBpICksXG5cdFx0XHRyZXNvbHZlVmFsdWVzID0gc2xpY2UuY2FsbCggYXJndW1lbnRzICksXG5cblx0XHRcdC8vIHRoZSBtYXN0ZXIgRGVmZXJyZWRcblx0XHRcdG1hc3RlciA9IGpRdWVyeS5EZWZlcnJlZCgpLFxuXG5cdFx0XHQvLyBzdWJvcmRpbmF0ZSBjYWxsYmFjayBmYWN0b3J5XG5cdFx0XHR1cGRhdGVGdW5jID0gZnVuY3Rpb24oIGkgKSB7XG5cdFx0XHRcdHJldHVybiBmdW5jdGlvbiggdmFsdWUgKSB7XG5cdFx0XHRcdFx0cmVzb2x2ZUNvbnRleHRzWyBpIF0gPSB0aGlzO1xuXHRcdFx0XHRcdHJlc29sdmVWYWx1ZXNbIGkgXSA9IGFyZ3VtZW50cy5sZW5ndGggPiAxID8gc2xpY2UuY2FsbCggYXJndW1lbnRzICkgOiB2YWx1ZTtcblx0XHRcdFx0XHRpZiAoICEoIC0tcmVtYWluaW5nICkgKSB7XG5cdFx0XHRcdFx0XHRtYXN0ZXIucmVzb2x2ZVdpdGgoIHJlc29sdmVDb250ZXh0cywgcmVzb2x2ZVZhbHVlcyApO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fTtcblx0XHRcdH07XG5cblx0XHQvLyBTaW5nbGUtIGFuZCBlbXB0eSBhcmd1bWVudHMgYXJlIGFkb3B0ZWQgbGlrZSBQcm9taXNlLnJlc29sdmVcblx0XHRpZiAoIHJlbWFpbmluZyA8PSAxICkge1xuXHRcdFx0YWRvcHRWYWx1ZSggc2luZ2xlVmFsdWUsIG1hc3Rlci5kb25lKCB1cGRhdGVGdW5jKCBpICkgKS5yZXNvbHZlLCBtYXN0ZXIucmVqZWN0LFxuXHRcdFx0XHQhcmVtYWluaW5nICk7XG5cblx0XHRcdC8vIFVzZSAudGhlbigpIHRvIHVud3JhcCBzZWNvbmRhcnkgdGhlbmFibGVzIChjZi4gZ2gtMzAwMClcblx0XHRcdGlmICggbWFzdGVyLnN0YXRlKCkgPT09IFwicGVuZGluZ1wiIHx8XG5cdFx0XHRcdGlzRnVuY3Rpb24oIHJlc29sdmVWYWx1ZXNbIGkgXSAmJiByZXNvbHZlVmFsdWVzWyBpIF0udGhlbiApICkge1xuXG5cdFx0XHRcdHJldHVybiBtYXN0ZXIudGhlbigpO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdC8vIE11bHRpcGxlIGFyZ3VtZW50cyBhcmUgYWdncmVnYXRlZCBsaWtlIFByb21pc2UuYWxsIGFycmF5IGVsZW1lbnRzXG5cdFx0d2hpbGUgKCBpLS0gKSB7XG5cdFx0XHRhZG9wdFZhbHVlKCByZXNvbHZlVmFsdWVzWyBpIF0sIHVwZGF0ZUZ1bmMoIGkgKSwgbWFzdGVyLnJlamVjdCApO1xuXHRcdH1cblxuXHRcdHJldHVybiBtYXN0ZXIucHJvbWlzZSgpO1xuXHR9XG59ICk7XG5cblxuLy8gVGhlc2UgdXN1YWxseSBpbmRpY2F0ZSBhIHByb2dyYW1tZXIgbWlzdGFrZSBkdXJpbmcgZGV2ZWxvcG1lbnQsXG4vLyB3YXJuIGFib3V0IHRoZW0gQVNBUCByYXRoZXIgdGhhbiBzd2FsbG93aW5nIHRoZW0gYnkgZGVmYXVsdC5cbnZhciByZXJyb3JOYW1lcyA9IC9eKEV2YWx8SW50ZXJuYWx8UmFuZ2V8UmVmZXJlbmNlfFN5bnRheHxUeXBlfFVSSSlFcnJvciQvO1xuXG5qUXVlcnkuRGVmZXJyZWQuZXhjZXB0aW9uSG9vayA9IGZ1bmN0aW9uKCBlcnJvciwgc3RhY2sgKSB7XG5cblx0Ly8gU3VwcG9ydDogSUUgOCAtIDkgb25seVxuXHQvLyBDb25zb2xlIGV4aXN0cyB3aGVuIGRldiB0b29scyBhcmUgb3Blbiwgd2hpY2ggY2FuIGhhcHBlbiBhdCBhbnkgdGltZVxuXHRpZiAoIHdpbmRvdy5jb25zb2xlICYmIHdpbmRvdy5jb25zb2xlLndhcm4gJiYgZXJyb3IgJiYgcmVycm9yTmFtZXMudGVzdCggZXJyb3IubmFtZSApICkge1xuXHRcdHdpbmRvdy5jb25zb2xlLndhcm4oIFwialF1ZXJ5LkRlZmVycmVkIGV4Y2VwdGlvbjogXCIgKyBlcnJvci5tZXNzYWdlLCBlcnJvci5zdGFjaywgc3RhY2sgKTtcblx0fVxufTtcblxuXG5cblxualF1ZXJ5LnJlYWR5RXhjZXB0aW9uID0gZnVuY3Rpb24oIGVycm9yICkge1xuXHR3aW5kb3cuc2V0VGltZW91dCggZnVuY3Rpb24oKSB7XG5cdFx0dGhyb3cgZXJyb3I7XG5cdH0gKTtcbn07XG5cblxuXG5cbi8vIFRoZSBkZWZlcnJlZCB1c2VkIG9uIERPTSByZWFkeVxudmFyIHJlYWR5TGlzdCA9IGpRdWVyeS5EZWZlcnJlZCgpO1xuXG5qUXVlcnkuZm4ucmVhZHkgPSBmdW5jdGlvbiggZm4gKSB7XG5cblx0cmVhZHlMaXN0XG5cdFx0LnRoZW4oIGZuIClcblxuXHRcdC8vIFdyYXAgalF1ZXJ5LnJlYWR5RXhjZXB0aW9uIGluIGEgZnVuY3Rpb24gc28gdGhhdCB0aGUgbG9va3VwXG5cdFx0Ly8gaGFwcGVucyBhdCB0aGUgdGltZSBvZiBlcnJvciBoYW5kbGluZyBpbnN0ZWFkIG9mIGNhbGxiYWNrXG5cdFx0Ly8gcmVnaXN0cmF0aW9uLlxuXHRcdC5jYXRjaCggZnVuY3Rpb24oIGVycm9yICkge1xuXHRcdFx0alF1ZXJ5LnJlYWR5RXhjZXB0aW9uKCBlcnJvciApO1xuXHRcdH0gKTtcblxuXHRyZXR1cm4gdGhpcztcbn07XG5cbmpRdWVyeS5leHRlbmQoIHtcblxuXHQvLyBJcyB0aGUgRE9NIHJlYWR5IHRvIGJlIHVzZWQ/IFNldCB0byB0cnVlIG9uY2UgaXQgb2NjdXJzLlxuXHRpc1JlYWR5OiBmYWxzZSxcblxuXHQvLyBBIGNvdW50ZXIgdG8gdHJhY2sgaG93IG1hbnkgaXRlbXMgdG8gd2FpdCBmb3IgYmVmb3JlXG5cdC8vIHRoZSByZWFkeSBldmVudCBmaXJlcy4gU2VlICM2NzgxXG5cdHJlYWR5V2FpdDogMSxcblxuXHQvLyBIYW5kbGUgd2hlbiB0aGUgRE9NIGlzIHJlYWR5XG5cdHJlYWR5OiBmdW5jdGlvbiggd2FpdCApIHtcblxuXHRcdC8vIEFib3J0IGlmIHRoZXJlIGFyZSBwZW5kaW5nIGhvbGRzIG9yIHdlJ3JlIGFscmVhZHkgcmVhZHlcblx0XHRpZiAoIHdhaXQgPT09IHRydWUgPyAtLWpRdWVyeS5yZWFkeVdhaXQgOiBqUXVlcnkuaXNSZWFkeSApIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHQvLyBSZW1lbWJlciB0aGF0IHRoZSBET00gaXMgcmVhZHlcblx0XHRqUXVlcnkuaXNSZWFkeSA9IHRydWU7XG5cblx0XHQvLyBJZiBhIG5vcm1hbCBET00gUmVhZHkgZXZlbnQgZmlyZWQsIGRlY3JlbWVudCwgYW5kIHdhaXQgaWYgbmVlZCBiZVxuXHRcdGlmICggd2FpdCAhPT0gdHJ1ZSAmJiAtLWpRdWVyeS5yZWFkeVdhaXQgPiAwICkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdC8vIElmIHRoZXJlIGFyZSBmdW5jdGlvbnMgYm91bmQsIHRvIGV4ZWN1dGVcblx0XHRyZWFkeUxpc3QucmVzb2x2ZVdpdGgoIGRvY3VtZW50LCBbIGpRdWVyeSBdICk7XG5cdH1cbn0gKTtcblxualF1ZXJ5LnJlYWR5LnRoZW4gPSByZWFkeUxpc3QudGhlbjtcblxuLy8gVGhlIHJlYWR5IGV2ZW50IGhhbmRsZXIgYW5kIHNlbGYgY2xlYW51cCBtZXRob2RcbmZ1bmN0aW9uIGNvbXBsZXRlZCgpIHtcblx0ZG9jdW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lciggXCJET01Db250ZW50TG9hZGVkXCIsIGNvbXBsZXRlZCApO1xuXHR3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lciggXCJsb2FkXCIsIGNvbXBsZXRlZCApO1xuXHRqUXVlcnkucmVhZHkoKTtcbn1cblxuLy8gQ2F0Y2ggY2FzZXMgd2hlcmUgJChkb2N1bWVudCkucmVhZHkoKSBpcyBjYWxsZWRcbi8vIGFmdGVyIHRoZSBicm93c2VyIGV2ZW50IGhhcyBhbHJlYWR5IG9jY3VycmVkLlxuLy8gU3VwcG9ydDogSUUgPD05IC0gMTAgb25seVxuLy8gT2xkZXIgSUUgc29tZXRpbWVzIHNpZ25hbHMgXCJpbnRlcmFjdGl2ZVwiIHRvbyBzb29uXG5pZiAoIGRvY3VtZW50LnJlYWR5U3RhdGUgPT09IFwiY29tcGxldGVcIiB8fFxuXHQoIGRvY3VtZW50LnJlYWR5U3RhdGUgIT09IFwibG9hZGluZ1wiICYmICFkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuZG9TY3JvbGwgKSApIHtcblxuXHQvLyBIYW5kbGUgaXQgYXN5bmNocm9ub3VzbHkgdG8gYWxsb3cgc2NyaXB0cyB0aGUgb3Bwb3J0dW5pdHkgdG8gZGVsYXkgcmVhZHlcblx0d2luZG93LnNldFRpbWVvdXQoIGpRdWVyeS5yZWFkeSApO1xuXG59IGVsc2Uge1xuXG5cdC8vIFVzZSB0aGUgaGFuZHkgZXZlbnQgY2FsbGJhY2tcblx0ZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lciggXCJET01Db250ZW50TG9hZGVkXCIsIGNvbXBsZXRlZCApO1xuXG5cdC8vIEEgZmFsbGJhY2sgdG8gd2luZG93Lm9ubG9hZCwgdGhhdCB3aWxsIGFsd2F5cyB3b3JrXG5cdHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCBcImxvYWRcIiwgY29tcGxldGVkICk7XG59XG5cblxuXG5cbi8vIE11bHRpZnVuY3Rpb25hbCBtZXRob2QgdG8gZ2V0IGFuZCBzZXQgdmFsdWVzIG9mIGEgY29sbGVjdGlvblxuLy8gVGhlIHZhbHVlL3MgY2FuIG9wdGlvbmFsbHkgYmUgZXhlY3V0ZWQgaWYgaXQncyBhIGZ1bmN0aW9uXG52YXIgYWNjZXNzID0gZnVuY3Rpb24oIGVsZW1zLCBmbiwga2V5LCB2YWx1ZSwgY2hhaW5hYmxlLCBlbXB0eUdldCwgcmF3ICkge1xuXHR2YXIgaSA9IDAsXG5cdFx0bGVuID0gZWxlbXMubGVuZ3RoLFxuXHRcdGJ1bGsgPSBrZXkgPT0gbnVsbDtcblxuXHQvLyBTZXRzIG1hbnkgdmFsdWVzXG5cdGlmICggdG9UeXBlKCBrZXkgKSA9PT0gXCJvYmplY3RcIiApIHtcblx0XHRjaGFpbmFibGUgPSB0cnVlO1xuXHRcdGZvciAoIGkgaW4ga2V5ICkge1xuXHRcdFx0YWNjZXNzKCBlbGVtcywgZm4sIGksIGtleVsgaSBdLCB0cnVlLCBlbXB0eUdldCwgcmF3ICk7XG5cdFx0fVxuXG5cdC8vIFNldHMgb25lIHZhbHVlXG5cdH0gZWxzZSBpZiAoIHZhbHVlICE9PSB1bmRlZmluZWQgKSB7XG5cdFx0Y2hhaW5hYmxlID0gdHJ1ZTtcblxuXHRcdGlmICggIWlzRnVuY3Rpb24oIHZhbHVlICkgKSB7XG5cdFx0XHRyYXcgPSB0cnVlO1xuXHRcdH1cblxuXHRcdGlmICggYnVsayApIHtcblxuXHRcdFx0Ly8gQnVsayBvcGVyYXRpb25zIHJ1biBhZ2FpbnN0IHRoZSBlbnRpcmUgc2V0XG5cdFx0XHRpZiAoIHJhdyApIHtcblx0XHRcdFx0Zm4uY2FsbCggZWxlbXMsIHZhbHVlICk7XG5cdFx0XHRcdGZuID0gbnVsbDtcblxuXHRcdFx0Ly8gLi4uZXhjZXB0IHdoZW4gZXhlY3V0aW5nIGZ1bmN0aW9uIHZhbHVlc1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0YnVsayA9IGZuO1xuXHRcdFx0XHRmbiA9IGZ1bmN0aW9uKCBlbGVtLCBrZXksIHZhbHVlICkge1xuXHRcdFx0XHRcdHJldHVybiBidWxrLmNhbGwoIGpRdWVyeSggZWxlbSApLCB2YWx1ZSApO1xuXHRcdFx0XHR9O1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdGlmICggZm4gKSB7XG5cdFx0XHRmb3IgKCA7IGkgPCBsZW47IGkrKyApIHtcblx0XHRcdFx0Zm4oXG5cdFx0XHRcdFx0ZWxlbXNbIGkgXSwga2V5LCByYXcgP1xuXHRcdFx0XHRcdHZhbHVlIDpcblx0XHRcdFx0XHR2YWx1ZS5jYWxsKCBlbGVtc1sgaSBdLCBpLCBmbiggZWxlbXNbIGkgXSwga2V5ICkgKVxuXHRcdFx0XHQpO1xuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdGlmICggY2hhaW5hYmxlICkge1xuXHRcdHJldHVybiBlbGVtcztcblx0fVxuXG5cdC8vIEdldHNcblx0aWYgKCBidWxrICkge1xuXHRcdHJldHVybiBmbi5jYWxsKCBlbGVtcyApO1xuXHR9XG5cblx0cmV0dXJuIGxlbiA/IGZuKCBlbGVtc1sgMCBdLCBrZXkgKSA6IGVtcHR5R2V0O1xufTtcblxuXG4vLyBNYXRjaGVzIGRhc2hlZCBzdHJpbmcgZm9yIGNhbWVsaXppbmdcbnZhciBybXNQcmVmaXggPSAvXi1tcy0vLFxuXHRyZGFzaEFscGhhID0gLy0oW2Etel0pL2c7XG5cbi8vIFVzZWQgYnkgY2FtZWxDYXNlIGFzIGNhbGxiYWNrIHRvIHJlcGxhY2UoKVxuZnVuY3Rpb24gZmNhbWVsQ2FzZSggYWxsLCBsZXR0ZXIgKSB7XG5cdHJldHVybiBsZXR0ZXIudG9VcHBlckNhc2UoKTtcbn1cblxuLy8gQ29udmVydCBkYXNoZWQgdG8gY2FtZWxDYXNlOyB1c2VkIGJ5IHRoZSBjc3MgYW5kIGRhdGEgbW9kdWxlc1xuLy8gU3VwcG9ydDogSUUgPD05IC0gMTEsIEVkZ2UgMTIgLSAxNVxuLy8gTWljcm9zb2Z0IGZvcmdvdCB0byBodW1wIHRoZWlyIHZlbmRvciBwcmVmaXggKCM5NTcyKVxuZnVuY3Rpb24gY2FtZWxDYXNlKCBzdHJpbmcgKSB7XG5cdHJldHVybiBzdHJpbmcucmVwbGFjZSggcm1zUHJlZml4LCBcIm1zLVwiICkucmVwbGFjZSggcmRhc2hBbHBoYSwgZmNhbWVsQ2FzZSApO1xufVxudmFyIGFjY2VwdERhdGEgPSBmdW5jdGlvbiggb3duZXIgKSB7XG5cblx0Ly8gQWNjZXB0cyBvbmx5OlxuXHQvLyAgLSBOb2RlXG5cdC8vICAgIC0gTm9kZS5FTEVNRU5UX05PREVcblx0Ly8gICAgLSBOb2RlLkRPQ1VNRU5UX05PREVcblx0Ly8gIC0gT2JqZWN0XG5cdC8vICAgIC0gQW55XG5cdHJldHVybiBvd25lci5ub2RlVHlwZSA9PT0gMSB8fCBvd25lci5ub2RlVHlwZSA9PT0gOSB8fCAhKCArb3duZXIubm9kZVR5cGUgKTtcbn07XG5cblxuXG5cbmZ1bmN0aW9uIERhdGEoKSB7XG5cdHRoaXMuZXhwYW5kbyA9IGpRdWVyeS5leHBhbmRvICsgRGF0YS51aWQrKztcbn1cblxuRGF0YS51aWQgPSAxO1xuXG5EYXRhLnByb3RvdHlwZSA9IHtcblxuXHRjYWNoZTogZnVuY3Rpb24oIG93bmVyICkge1xuXG5cdFx0Ly8gQ2hlY2sgaWYgdGhlIG93bmVyIG9iamVjdCBhbHJlYWR5IGhhcyBhIGNhY2hlXG5cdFx0dmFyIHZhbHVlID0gb3duZXJbIHRoaXMuZXhwYW5kbyBdO1xuXG5cdFx0Ly8gSWYgbm90LCBjcmVhdGUgb25lXG5cdFx0aWYgKCAhdmFsdWUgKSB7XG5cdFx0XHR2YWx1ZSA9IHt9O1xuXG5cdFx0XHQvLyBXZSBjYW4gYWNjZXB0IGRhdGEgZm9yIG5vbi1lbGVtZW50IG5vZGVzIGluIG1vZGVybiBicm93c2Vycyxcblx0XHRcdC8vIGJ1dCB3ZSBzaG91bGQgbm90LCBzZWUgIzgzMzUuXG5cdFx0XHQvLyBBbHdheXMgcmV0dXJuIGFuIGVtcHR5IG9iamVjdC5cblx0XHRcdGlmICggYWNjZXB0RGF0YSggb3duZXIgKSApIHtcblxuXHRcdFx0XHQvLyBJZiBpdCBpcyBhIG5vZGUgdW5saWtlbHkgdG8gYmUgc3RyaW5naWZ5LWVkIG9yIGxvb3BlZCBvdmVyXG5cdFx0XHRcdC8vIHVzZSBwbGFpbiBhc3NpZ25tZW50XG5cdFx0XHRcdGlmICggb3duZXIubm9kZVR5cGUgKSB7XG5cdFx0XHRcdFx0b3duZXJbIHRoaXMuZXhwYW5kbyBdID0gdmFsdWU7XG5cblx0XHRcdFx0Ly8gT3RoZXJ3aXNlIHNlY3VyZSBpdCBpbiBhIG5vbi1lbnVtZXJhYmxlIHByb3BlcnR5XG5cdFx0XHRcdC8vIGNvbmZpZ3VyYWJsZSBtdXN0IGJlIHRydWUgdG8gYWxsb3cgdGhlIHByb3BlcnR5IHRvIGJlXG5cdFx0XHRcdC8vIGRlbGV0ZWQgd2hlbiBkYXRhIGlzIHJlbW92ZWRcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoIG93bmVyLCB0aGlzLmV4cGFuZG8sIHtcblx0XHRcdFx0XHRcdHZhbHVlOiB2YWx1ZSxcblx0XHRcdFx0XHRcdGNvbmZpZ3VyYWJsZTogdHJ1ZVxuXHRcdFx0XHRcdH0gKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHJldHVybiB2YWx1ZTtcblx0fSxcblx0c2V0OiBmdW5jdGlvbiggb3duZXIsIGRhdGEsIHZhbHVlICkge1xuXHRcdHZhciBwcm9wLFxuXHRcdFx0Y2FjaGUgPSB0aGlzLmNhY2hlKCBvd25lciApO1xuXG5cdFx0Ly8gSGFuZGxlOiBbIG93bmVyLCBrZXksIHZhbHVlIF0gYXJnc1xuXHRcdC8vIEFsd2F5cyB1c2UgY2FtZWxDYXNlIGtleSAoZ2gtMjI1Nylcblx0XHRpZiAoIHR5cGVvZiBkYXRhID09PSBcInN0cmluZ1wiICkge1xuXHRcdFx0Y2FjaGVbIGNhbWVsQ2FzZSggZGF0YSApIF0gPSB2YWx1ZTtcblxuXHRcdC8vIEhhbmRsZTogWyBvd25lciwgeyBwcm9wZXJ0aWVzIH0gXSBhcmdzXG5cdFx0fSBlbHNlIHtcblxuXHRcdFx0Ly8gQ29weSB0aGUgcHJvcGVydGllcyBvbmUtYnktb25lIHRvIHRoZSBjYWNoZSBvYmplY3Rcblx0XHRcdGZvciAoIHByb3AgaW4gZGF0YSApIHtcblx0XHRcdFx0Y2FjaGVbIGNhbWVsQ2FzZSggcHJvcCApIF0gPSBkYXRhWyBwcm9wIF07XG5cdFx0XHR9XG5cdFx0fVxuXHRcdHJldHVybiBjYWNoZTtcblx0fSxcblx0Z2V0OiBmdW5jdGlvbiggb3duZXIsIGtleSApIHtcblx0XHRyZXR1cm4ga2V5ID09PSB1bmRlZmluZWQgP1xuXHRcdFx0dGhpcy5jYWNoZSggb3duZXIgKSA6XG5cblx0XHRcdC8vIEFsd2F5cyB1c2UgY2FtZWxDYXNlIGtleSAoZ2gtMjI1Nylcblx0XHRcdG93bmVyWyB0aGlzLmV4cGFuZG8gXSAmJiBvd25lclsgdGhpcy5leHBhbmRvIF1bIGNhbWVsQ2FzZSgga2V5ICkgXTtcblx0fSxcblx0YWNjZXNzOiBmdW5jdGlvbiggb3duZXIsIGtleSwgdmFsdWUgKSB7XG5cblx0XHQvLyBJbiBjYXNlcyB3aGVyZSBlaXRoZXI6XG5cdFx0Ly9cblx0XHQvLyAgIDEuIE5vIGtleSB3YXMgc3BlY2lmaWVkXG5cdFx0Ly8gICAyLiBBIHN0cmluZyBrZXkgd2FzIHNwZWNpZmllZCwgYnV0IG5vIHZhbHVlIHByb3ZpZGVkXG5cdFx0Ly9cblx0XHQvLyBUYWtlIHRoZSBcInJlYWRcIiBwYXRoIGFuZCBhbGxvdyB0aGUgZ2V0IG1ldGhvZCB0byBkZXRlcm1pbmVcblx0XHQvLyB3aGljaCB2YWx1ZSB0byByZXR1cm4sIHJlc3BlY3RpdmVseSBlaXRoZXI6XG5cdFx0Ly9cblx0XHQvLyAgIDEuIFRoZSBlbnRpcmUgY2FjaGUgb2JqZWN0XG5cdFx0Ly8gICAyLiBUaGUgZGF0YSBzdG9yZWQgYXQgdGhlIGtleVxuXHRcdC8vXG5cdFx0aWYgKCBrZXkgPT09IHVuZGVmaW5lZCB8fFxuXHRcdFx0XHQoICgga2V5ICYmIHR5cGVvZiBrZXkgPT09IFwic3RyaW5nXCIgKSAmJiB2YWx1ZSA9PT0gdW5kZWZpbmVkICkgKSB7XG5cblx0XHRcdHJldHVybiB0aGlzLmdldCggb3duZXIsIGtleSApO1xuXHRcdH1cblxuXHRcdC8vIFdoZW4gdGhlIGtleSBpcyBub3QgYSBzdHJpbmcsIG9yIGJvdGggYSBrZXkgYW5kIHZhbHVlXG5cdFx0Ly8gYXJlIHNwZWNpZmllZCwgc2V0IG9yIGV4dGVuZCAoZXhpc3Rpbmcgb2JqZWN0cykgd2l0aCBlaXRoZXI6XG5cdFx0Ly9cblx0XHQvLyAgIDEuIEFuIG9iamVjdCBvZiBwcm9wZXJ0aWVzXG5cdFx0Ly8gICAyLiBBIGtleSBhbmQgdmFsdWVcblx0XHQvL1xuXHRcdHRoaXMuc2V0KCBvd25lciwga2V5LCB2YWx1ZSApO1xuXG5cdFx0Ly8gU2luY2UgdGhlIFwic2V0XCIgcGF0aCBjYW4gaGF2ZSB0d28gcG9zc2libGUgZW50cnkgcG9pbnRzXG5cdFx0Ly8gcmV0dXJuIHRoZSBleHBlY3RlZCBkYXRhIGJhc2VkIG9uIHdoaWNoIHBhdGggd2FzIHRha2VuWypdXG5cdFx0cmV0dXJuIHZhbHVlICE9PSB1bmRlZmluZWQgPyB2YWx1ZSA6IGtleTtcblx0fSxcblx0cmVtb3ZlOiBmdW5jdGlvbiggb3duZXIsIGtleSApIHtcblx0XHR2YXIgaSxcblx0XHRcdGNhY2hlID0gb3duZXJbIHRoaXMuZXhwYW5kbyBdO1xuXG5cdFx0aWYgKCBjYWNoZSA9PT0gdW5kZWZpbmVkICkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdGlmICgga2V5ICE9PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdC8vIFN1cHBvcnQgYXJyYXkgb3Igc3BhY2Ugc2VwYXJhdGVkIHN0cmluZyBvZiBrZXlzXG5cdFx0XHRpZiAoIEFycmF5LmlzQXJyYXkoIGtleSApICkge1xuXG5cdFx0XHRcdC8vIElmIGtleSBpcyBhbiBhcnJheSBvZiBrZXlzLi4uXG5cdFx0XHRcdC8vIFdlIGFsd2F5cyBzZXQgY2FtZWxDYXNlIGtleXMsIHNvIHJlbW92ZSB0aGF0LlxuXHRcdFx0XHRrZXkgPSBrZXkubWFwKCBjYW1lbENhc2UgKTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGtleSA9IGNhbWVsQ2FzZSgga2V5ICk7XG5cblx0XHRcdFx0Ly8gSWYgYSBrZXkgd2l0aCB0aGUgc3BhY2VzIGV4aXN0cywgdXNlIGl0LlxuXHRcdFx0XHQvLyBPdGhlcndpc2UsIGNyZWF0ZSBhbiBhcnJheSBieSBtYXRjaGluZyBub24td2hpdGVzcGFjZVxuXHRcdFx0XHRrZXkgPSBrZXkgaW4gY2FjaGUgP1xuXHRcdFx0XHRcdFsga2V5IF0gOlxuXHRcdFx0XHRcdCgga2V5Lm1hdGNoKCBybm90aHRtbHdoaXRlICkgfHwgW10gKTtcblx0XHRcdH1cblxuXHRcdFx0aSA9IGtleS5sZW5ndGg7XG5cblx0XHRcdHdoaWxlICggaS0tICkge1xuXHRcdFx0XHRkZWxldGUgY2FjaGVbIGtleVsgaSBdIF07XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Ly8gUmVtb3ZlIHRoZSBleHBhbmRvIGlmIHRoZXJlJ3Mgbm8gbW9yZSBkYXRhXG5cdFx0aWYgKCBrZXkgPT09IHVuZGVmaW5lZCB8fCBqUXVlcnkuaXNFbXB0eU9iamVjdCggY2FjaGUgKSApIHtcblxuXHRcdFx0Ly8gU3VwcG9ydDogQ2hyb21lIDw9MzUgLSA0NVxuXHRcdFx0Ly8gV2Via2l0ICYgQmxpbmsgcGVyZm9ybWFuY2Ugc3VmZmVycyB3aGVuIGRlbGV0aW5nIHByb3BlcnRpZXNcblx0XHRcdC8vIGZyb20gRE9NIG5vZGVzLCBzbyBzZXQgdG8gdW5kZWZpbmVkIGluc3RlYWRcblx0XHRcdC8vIGh0dHBzOi8vYnVncy5jaHJvbWl1bS5vcmcvcC9jaHJvbWl1bS9pc3N1ZXMvZGV0YWlsP2lkPTM3ODYwNyAoYnVnIHJlc3RyaWN0ZWQpXG5cdFx0XHRpZiAoIG93bmVyLm5vZGVUeXBlICkge1xuXHRcdFx0XHRvd25lclsgdGhpcy5leHBhbmRvIF0gPSB1bmRlZmluZWQ7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRkZWxldGUgb3duZXJbIHRoaXMuZXhwYW5kbyBdO1xuXHRcdFx0fVxuXHRcdH1cblx0fSxcblx0aGFzRGF0YTogZnVuY3Rpb24oIG93bmVyICkge1xuXHRcdHZhciBjYWNoZSA9IG93bmVyWyB0aGlzLmV4cGFuZG8gXTtcblx0XHRyZXR1cm4gY2FjaGUgIT09IHVuZGVmaW5lZCAmJiAhalF1ZXJ5LmlzRW1wdHlPYmplY3QoIGNhY2hlICk7XG5cdH1cbn07XG52YXIgZGF0YVByaXYgPSBuZXcgRGF0YSgpO1xuXG52YXIgZGF0YVVzZXIgPSBuZXcgRGF0YSgpO1xuXG5cblxuLy9cdEltcGxlbWVudGF0aW9uIFN1bW1hcnlcbi8vXG4vL1x0MS4gRW5mb3JjZSBBUEkgc3VyZmFjZSBhbmQgc2VtYW50aWMgY29tcGF0aWJpbGl0eSB3aXRoIDEuOS54IGJyYW5jaFxuLy9cdDIuIEltcHJvdmUgdGhlIG1vZHVsZSdzIG1haW50YWluYWJpbGl0eSBieSByZWR1Y2luZyB0aGUgc3RvcmFnZVxuLy9cdFx0cGF0aHMgdG8gYSBzaW5nbGUgbWVjaGFuaXNtLlxuLy9cdDMuIFVzZSB0aGUgc2FtZSBzaW5nbGUgbWVjaGFuaXNtIHRvIHN1cHBvcnQgXCJwcml2YXRlXCIgYW5kIFwidXNlclwiIGRhdGEuXG4vL1x0NC4gX05ldmVyXyBleHBvc2UgXCJwcml2YXRlXCIgZGF0YSB0byB1c2VyIGNvZGUgKFRPRE86IERyb3AgX2RhdGEsIF9yZW1vdmVEYXRhKVxuLy9cdDUuIEF2b2lkIGV4cG9zaW5nIGltcGxlbWVudGF0aW9uIGRldGFpbHMgb24gdXNlciBvYmplY3RzIChlZy4gZXhwYW5kbyBwcm9wZXJ0aWVzKVxuLy9cdDYuIFByb3ZpZGUgYSBjbGVhciBwYXRoIGZvciBpbXBsZW1lbnRhdGlvbiB1cGdyYWRlIHRvIFdlYWtNYXAgaW4gMjAxNFxuXG52YXIgcmJyYWNlID0gL14oPzpcXHtbXFx3XFxXXSpcXH18XFxbW1xcd1xcV10qXFxdKSQvLFxuXHRybXVsdGlEYXNoID0gL1tBLVpdL2c7XG5cbmZ1bmN0aW9uIGdldERhdGEoIGRhdGEgKSB7XG5cdGlmICggZGF0YSA9PT0gXCJ0cnVlXCIgKSB7XG5cdFx0cmV0dXJuIHRydWU7XG5cdH1cblxuXHRpZiAoIGRhdGEgPT09IFwiZmFsc2VcIiApIHtcblx0XHRyZXR1cm4gZmFsc2U7XG5cdH1cblxuXHRpZiAoIGRhdGEgPT09IFwibnVsbFwiICkge1xuXHRcdHJldHVybiBudWxsO1xuXHR9XG5cblx0Ly8gT25seSBjb252ZXJ0IHRvIGEgbnVtYmVyIGlmIGl0IGRvZXNuJ3QgY2hhbmdlIHRoZSBzdHJpbmdcblx0aWYgKCBkYXRhID09PSArZGF0YSArIFwiXCIgKSB7XG5cdFx0cmV0dXJuICtkYXRhO1xuXHR9XG5cblx0aWYgKCByYnJhY2UudGVzdCggZGF0YSApICkge1xuXHRcdHJldHVybiBKU09OLnBhcnNlKCBkYXRhICk7XG5cdH1cblxuXHRyZXR1cm4gZGF0YTtcbn1cblxuZnVuY3Rpb24gZGF0YUF0dHIoIGVsZW0sIGtleSwgZGF0YSApIHtcblx0dmFyIG5hbWU7XG5cblx0Ly8gSWYgbm90aGluZyB3YXMgZm91bmQgaW50ZXJuYWxseSwgdHJ5IHRvIGZldGNoIGFueVxuXHQvLyBkYXRhIGZyb20gdGhlIEhUTUw1IGRhdGEtKiBhdHRyaWJ1dGVcblx0aWYgKCBkYXRhID09PSB1bmRlZmluZWQgJiYgZWxlbS5ub2RlVHlwZSA9PT0gMSApIHtcblx0XHRuYW1lID0gXCJkYXRhLVwiICsga2V5LnJlcGxhY2UoIHJtdWx0aURhc2gsIFwiLSQmXCIgKS50b0xvd2VyQ2FzZSgpO1xuXHRcdGRhdGEgPSBlbGVtLmdldEF0dHJpYnV0ZSggbmFtZSApO1xuXG5cdFx0aWYgKCB0eXBlb2YgZGF0YSA9PT0gXCJzdHJpbmdcIiApIHtcblx0XHRcdHRyeSB7XG5cdFx0XHRcdGRhdGEgPSBnZXREYXRhKCBkYXRhICk7XG5cdFx0XHR9IGNhdGNoICggZSApIHt9XG5cblx0XHRcdC8vIE1ha2Ugc3VyZSB3ZSBzZXQgdGhlIGRhdGEgc28gaXQgaXNuJ3QgY2hhbmdlZCBsYXRlclxuXHRcdFx0ZGF0YVVzZXIuc2V0KCBlbGVtLCBrZXksIGRhdGEgKTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0ZGF0YSA9IHVuZGVmaW5lZDtcblx0XHR9XG5cdH1cblx0cmV0dXJuIGRhdGE7XG59XG5cbmpRdWVyeS5leHRlbmQoIHtcblx0aGFzRGF0YTogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0cmV0dXJuIGRhdGFVc2VyLmhhc0RhdGEoIGVsZW0gKSB8fCBkYXRhUHJpdi5oYXNEYXRhKCBlbGVtICk7XG5cdH0sXG5cblx0ZGF0YTogZnVuY3Rpb24oIGVsZW0sIG5hbWUsIGRhdGEgKSB7XG5cdFx0cmV0dXJuIGRhdGFVc2VyLmFjY2VzcyggZWxlbSwgbmFtZSwgZGF0YSApO1xuXHR9LFxuXG5cdHJlbW92ZURhdGE6IGZ1bmN0aW9uKCBlbGVtLCBuYW1lICkge1xuXHRcdGRhdGFVc2VyLnJlbW92ZSggZWxlbSwgbmFtZSApO1xuXHR9LFxuXG5cdC8vIFRPRE86IE5vdyB0aGF0IGFsbCBjYWxscyB0byBfZGF0YSBhbmQgX3JlbW92ZURhdGEgaGF2ZSBiZWVuIHJlcGxhY2VkXG5cdC8vIHdpdGggZGlyZWN0IGNhbGxzIHRvIGRhdGFQcml2IG1ldGhvZHMsIHRoZXNlIGNhbiBiZSBkZXByZWNhdGVkLlxuXHRfZGF0YTogZnVuY3Rpb24oIGVsZW0sIG5hbWUsIGRhdGEgKSB7XG5cdFx0cmV0dXJuIGRhdGFQcml2LmFjY2VzcyggZWxlbSwgbmFtZSwgZGF0YSApO1xuXHR9LFxuXG5cdF9yZW1vdmVEYXRhOiBmdW5jdGlvbiggZWxlbSwgbmFtZSApIHtcblx0XHRkYXRhUHJpdi5yZW1vdmUoIGVsZW0sIG5hbWUgKTtcblx0fVxufSApO1xuXG5qUXVlcnkuZm4uZXh0ZW5kKCB7XG5cdGRhdGE6IGZ1bmN0aW9uKCBrZXksIHZhbHVlICkge1xuXHRcdHZhciBpLCBuYW1lLCBkYXRhLFxuXHRcdFx0ZWxlbSA9IHRoaXNbIDAgXSxcblx0XHRcdGF0dHJzID0gZWxlbSAmJiBlbGVtLmF0dHJpYnV0ZXM7XG5cblx0XHQvLyBHZXRzIGFsbCB2YWx1ZXNcblx0XHRpZiAoIGtleSA9PT0gdW5kZWZpbmVkICkge1xuXHRcdFx0aWYgKCB0aGlzLmxlbmd0aCApIHtcblx0XHRcdFx0ZGF0YSA9IGRhdGFVc2VyLmdldCggZWxlbSApO1xuXG5cdFx0XHRcdGlmICggZWxlbS5ub2RlVHlwZSA9PT0gMSAmJiAhZGF0YVByaXYuZ2V0KCBlbGVtLCBcImhhc0RhdGFBdHRyc1wiICkgKSB7XG5cdFx0XHRcdFx0aSA9IGF0dHJzLmxlbmd0aDtcblx0XHRcdFx0XHR3aGlsZSAoIGktLSApIHtcblxuXHRcdFx0XHRcdFx0Ly8gU3VwcG9ydDogSUUgMTEgb25seVxuXHRcdFx0XHRcdFx0Ly8gVGhlIGF0dHJzIGVsZW1lbnRzIGNhbiBiZSBudWxsICgjMTQ4OTQpXG5cdFx0XHRcdFx0XHRpZiAoIGF0dHJzWyBpIF0gKSB7XG5cdFx0XHRcdFx0XHRcdG5hbWUgPSBhdHRyc1sgaSBdLm5hbWU7XG5cdFx0XHRcdFx0XHRcdGlmICggbmFtZS5pbmRleE9mKCBcImRhdGEtXCIgKSA9PT0gMCApIHtcblx0XHRcdFx0XHRcdFx0XHRuYW1lID0gY2FtZWxDYXNlKCBuYW1lLnNsaWNlKCA1ICkgKTtcblx0XHRcdFx0XHRcdFx0XHRkYXRhQXR0ciggZWxlbSwgbmFtZSwgZGF0YVsgbmFtZSBdICk7XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0ZGF0YVByaXYuc2V0KCBlbGVtLCBcImhhc0RhdGFBdHRyc1wiLCB0cnVlICk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIGRhdGE7XG5cdFx0fVxuXG5cdFx0Ly8gU2V0cyBtdWx0aXBsZSB2YWx1ZXNcblx0XHRpZiAoIHR5cGVvZiBrZXkgPT09IFwib2JqZWN0XCIgKSB7XG5cdFx0XHRyZXR1cm4gdGhpcy5lYWNoKCBmdW5jdGlvbigpIHtcblx0XHRcdFx0ZGF0YVVzZXIuc2V0KCB0aGlzLCBrZXkgKTtcblx0XHRcdH0gKTtcblx0XHR9XG5cblx0XHRyZXR1cm4gYWNjZXNzKCB0aGlzLCBmdW5jdGlvbiggdmFsdWUgKSB7XG5cdFx0XHR2YXIgZGF0YTtcblxuXHRcdFx0Ly8gVGhlIGNhbGxpbmcgalF1ZXJ5IG9iamVjdCAoZWxlbWVudCBtYXRjaGVzKSBpcyBub3QgZW1wdHlcblx0XHRcdC8vIChhbmQgdGhlcmVmb3JlIGhhcyBhbiBlbGVtZW50IGFwcGVhcnMgYXQgdGhpc1sgMCBdKSBhbmQgdGhlXG5cdFx0XHQvLyBgdmFsdWVgIHBhcmFtZXRlciB3YXMgbm90IHVuZGVmaW5lZC4gQW4gZW1wdHkgalF1ZXJ5IG9iamVjdFxuXHRcdFx0Ly8gd2lsbCByZXN1bHQgaW4gYHVuZGVmaW5lZGAgZm9yIGVsZW0gPSB0aGlzWyAwIF0gd2hpY2ggd2lsbFxuXHRcdFx0Ly8gdGhyb3cgYW4gZXhjZXB0aW9uIGlmIGFuIGF0dGVtcHQgdG8gcmVhZCBhIGRhdGEgY2FjaGUgaXMgbWFkZS5cblx0XHRcdGlmICggZWxlbSAmJiB2YWx1ZSA9PT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRcdC8vIEF0dGVtcHQgdG8gZ2V0IGRhdGEgZnJvbSB0aGUgY2FjaGVcblx0XHRcdFx0Ly8gVGhlIGtleSB3aWxsIGFsd2F5cyBiZSBjYW1lbENhc2VkIGluIERhdGFcblx0XHRcdFx0ZGF0YSA9IGRhdGFVc2VyLmdldCggZWxlbSwga2V5ICk7XG5cdFx0XHRcdGlmICggZGF0YSAhPT0gdW5kZWZpbmVkICkge1xuXHRcdFx0XHRcdHJldHVybiBkYXRhO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gQXR0ZW1wdCB0byBcImRpc2NvdmVyXCIgdGhlIGRhdGEgaW5cblx0XHRcdFx0Ly8gSFRNTDUgY3VzdG9tIGRhdGEtKiBhdHRyc1xuXHRcdFx0XHRkYXRhID0gZGF0YUF0dHIoIGVsZW0sIGtleSApO1xuXHRcdFx0XHRpZiAoIGRhdGEgIT09IHVuZGVmaW5lZCApIHtcblx0XHRcdFx0XHRyZXR1cm4gZGF0YTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIFdlIHRyaWVkIHJlYWxseSBoYXJkLCBidXQgdGhlIGRhdGEgZG9lc24ndCBleGlzdC5cblx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBTZXQgdGhlIGRhdGEuLi5cblx0XHRcdHRoaXMuZWFjaCggZnVuY3Rpb24oKSB7XG5cblx0XHRcdFx0Ly8gV2UgYWx3YXlzIHN0b3JlIHRoZSBjYW1lbENhc2VkIGtleVxuXHRcdFx0XHRkYXRhVXNlci5zZXQoIHRoaXMsIGtleSwgdmFsdWUgKTtcblx0XHRcdH0gKTtcblx0XHR9LCBudWxsLCB2YWx1ZSwgYXJndW1lbnRzLmxlbmd0aCA+IDEsIG51bGwsIHRydWUgKTtcblx0fSxcblxuXHRyZW1vdmVEYXRhOiBmdW5jdGlvbigga2V5ICkge1xuXHRcdHJldHVybiB0aGlzLmVhY2goIGZ1bmN0aW9uKCkge1xuXHRcdFx0ZGF0YVVzZXIucmVtb3ZlKCB0aGlzLCBrZXkgKTtcblx0XHR9ICk7XG5cdH1cbn0gKTtcblxuXG5qUXVlcnkuZXh0ZW5kKCB7XG5cdHF1ZXVlOiBmdW5jdGlvbiggZWxlbSwgdHlwZSwgZGF0YSApIHtcblx0XHR2YXIgcXVldWU7XG5cblx0XHRpZiAoIGVsZW0gKSB7XG5cdFx0XHR0eXBlID0gKCB0eXBlIHx8IFwiZnhcIiApICsgXCJxdWV1ZVwiO1xuXHRcdFx0cXVldWUgPSBkYXRhUHJpdi5nZXQoIGVsZW0sIHR5cGUgKTtcblxuXHRcdFx0Ly8gU3BlZWQgdXAgZGVxdWV1ZSBieSBnZXR0aW5nIG91dCBxdWlja2x5IGlmIHRoaXMgaXMganVzdCBhIGxvb2t1cFxuXHRcdFx0aWYgKCBkYXRhICkge1xuXHRcdFx0XHRpZiAoICFxdWV1ZSB8fCBBcnJheS5pc0FycmF5KCBkYXRhICkgKSB7XG5cdFx0XHRcdFx0cXVldWUgPSBkYXRhUHJpdi5hY2Nlc3MoIGVsZW0sIHR5cGUsIGpRdWVyeS5tYWtlQXJyYXkoIGRhdGEgKSApO1xuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdHF1ZXVlLnB1c2goIGRhdGEgKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIHF1ZXVlIHx8IFtdO1xuXHRcdH1cblx0fSxcblxuXHRkZXF1ZXVlOiBmdW5jdGlvbiggZWxlbSwgdHlwZSApIHtcblx0XHR0eXBlID0gdHlwZSB8fCBcImZ4XCI7XG5cblx0XHR2YXIgcXVldWUgPSBqUXVlcnkucXVldWUoIGVsZW0sIHR5cGUgKSxcblx0XHRcdHN0YXJ0TGVuZ3RoID0gcXVldWUubGVuZ3RoLFxuXHRcdFx0Zm4gPSBxdWV1ZS5zaGlmdCgpLFxuXHRcdFx0aG9va3MgPSBqUXVlcnkuX3F1ZXVlSG9va3MoIGVsZW0sIHR5cGUgKSxcblx0XHRcdG5leHQgPSBmdW5jdGlvbigpIHtcblx0XHRcdFx0alF1ZXJ5LmRlcXVldWUoIGVsZW0sIHR5cGUgKTtcblx0XHRcdH07XG5cblx0XHQvLyBJZiB0aGUgZnggcXVldWUgaXMgZGVxdWV1ZWQsIGFsd2F5cyByZW1vdmUgdGhlIHByb2dyZXNzIHNlbnRpbmVsXG5cdFx0aWYgKCBmbiA9PT0gXCJpbnByb2dyZXNzXCIgKSB7XG5cdFx0XHRmbiA9IHF1ZXVlLnNoaWZ0KCk7XG5cdFx0XHRzdGFydExlbmd0aC0tO1xuXHRcdH1cblxuXHRcdGlmICggZm4gKSB7XG5cblx0XHRcdC8vIEFkZCBhIHByb2dyZXNzIHNlbnRpbmVsIHRvIHByZXZlbnQgdGhlIGZ4IHF1ZXVlIGZyb20gYmVpbmdcblx0XHRcdC8vIGF1dG9tYXRpY2FsbHkgZGVxdWV1ZWRcblx0XHRcdGlmICggdHlwZSA9PT0gXCJmeFwiICkge1xuXHRcdFx0XHRxdWV1ZS51bnNoaWZ0KCBcImlucHJvZ3Jlc3NcIiApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBDbGVhciB1cCB0aGUgbGFzdCBxdWV1ZSBzdG9wIGZ1bmN0aW9uXG5cdFx0XHRkZWxldGUgaG9va3Muc3RvcDtcblx0XHRcdGZuLmNhbGwoIGVsZW0sIG5leHQsIGhvb2tzICk7XG5cdFx0fVxuXG5cdFx0aWYgKCAhc3RhcnRMZW5ndGggJiYgaG9va3MgKSB7XG5cdFx0XHRob29rcy5lbXB0eS5maXJlKCk7XG5cdFx0fVxuXHR9LFxuXG5cdC8vIE5vdCBwdWJsaWMgLSBnZW5lcmF0ZSBhIHF1ZXVlSG9va3Mgb2JqZWN0LCBvciByZXR1cm4gdGhlIGN1cnJlbnQgb25lXG5cdF9xdWV1ZUhvb2tzOiBmdW5jdGlvbiggZWxlbSwgdHlwZSApIHtcblx0XHR2YXIga2V5ID0gdHlwZSArIFwicXVldWVIb29rc1wiO1xuXHRcdHJldHVybiBkYXRhUHJpdi5nZXQoIGVsZW0sIGtleSApIHx8IGRhdGFQcml2LmFjY2VzcyggZWxlbSwga2V5LCB7XG5cdFx0XHRlbXB0eTogalF1ZXJ5LkNhbGxiYWNrcyggXCJvbmNlIG1lbW9yeVwiICkuYWRkKCBmdW5jdGlvbigpIHtcblx0XHRcdFx0ZGF0YVByaXYucmVtb3ZlKCBlbGVtLCBbIHR5cGUgKyBcInF1ZXVlXCIsIGtleSBdICk7XG5cdFx0XHR9IClcblx0XHR9ICk7XG5cdH1cbn0gKTtcblxualF1ZXJ5LmZuLmV4dGVuZCgge1xuXHRxdWV1ZTogZnVuY3Rpb24oIHR5cGUsIGRhdGEgKSB7XG5cdFx0dmFyIHNldHRlciA9IDI7XG5cblx0XHRpZiAoIHR5cGVvZiB0eXBlICE9PSBcInN0cmluZ1wiICkge1xuXHRcdFx0ZGF0YSA9IHR5cGU7XG5cdFx0XHR0eXBlID0gXCJmeFwiO1xuXHRcdFx0c2V0dGVyLS07XG5cdFx0fVxuXG5cdFx0aWYgKCBhcmd1bWVudHMubGVuZ3RoIDwgc2V0dGVyICkge1xuXHRcdFx0cmV0dXJuIGpRdWVyeS5xdWV1ZSggdGhpc1sgMCBdLCB0eXBlICk7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIGRhdGEgPT09IHVuZGVmaW5lZCA/XG5cdFx0XHR0aGlzIDpcblx0XHRcdHRoaXMuZWFjaCggZnVuY3Rpb24oKSB7XG5cdFx0XHRcdHZhciBxdWV1ZSA9IGpRdWVyeS5xdWV1ZSggdGhpcywgdHlwZSwgZGF0YSApO1xuXG5cdFx0XHRcdC8vIEVuc3VyZSBhIGhvb2tzIGZvciB0aGlzIHF1ZXVlXG5cdFx0XHRcdGpRdWVyeS5fcXVldWVIb29rcyggdGhpcywgdHlwZSApO1xuXG5cdFx0XHRcdGlmICggdHlwZSA9PT0gXCJmeFwiICYmIHF1ZXVlWyAwIF0gIT09IFwiaW5wcm9ncmVzc1wiICkge1xuXHRcdFx0XHRcdGpRdWVyeS5kZXF1ZXVlKCB0aGlzLCB0eXBlICk7XG5cdFx0XHRcdH1cblx0XHRcdH0gKTtcblx0fSxcblx0ZGVxdWV1ZTogZnVuY3Rpb24oIHR5cGUgKSB7XG5cdFx0cmV0dXJuIHRoaXMuZWFjaCggZnVuY3Rpb24oKSB7XG5cdFx0XHRqUXVlcnkuZGVxdWV1ZSggdGhpcywgdHlwZSApO1xuXHRcdH0gKTtcblx0fSxcblx0Y2xlYXJRdWV1ZTogZnVuY3Rpb24oIHR5cGUgKSB7XG5cdFx0cmV0dXJuIHRoaXMucXVldWUoIHR5cGUgfHwgXCJmeFwiLCBbXSApO1xuXHR9LFxuXG5cdC8vIEdldCBhIHByb21pc2UgcmVzb2x2ZWQgd2hlbiBxdWV1ZXMgb2YgYSBjZXJ0YWluIHR5cGVcblx0Ly8gYXJlIGVtcHRpZWQgKGZ4IGlzIHRoZSB0eXBlIGJ5IGRlZmF1bHQpXG5cdHByb21pc2U6IGZ1bmN0aW9uKCB0eXBlLCBvYmogKSB7XG5cdFx0dmFyIHRtcCxcblx0XHRcdGNvdW50ID0gMSxcblx0XHRcdGRlZmVyID0galF1ZXJ5LkRlZmVycmVkKCksXG5cdFx0XHRlbGVtZW50cyA9IHRoaXMsXG5cdFx0XHRpID0gdGhpcy5sZW5ndGgsXG5cdFx0XHRyZXNvbHZlID0gZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGlmICggISggLS1jb3VudCApICkge1xuXHRcdFx0XHRcdGRlZmVyLnJlc29sdmVXaXRoKCBlbGVtZW50cywgWyBlbGVtZW50cyBdICk7XG5cdFx0XHRcdH1cblx0XHRcdH07XG5cblx0XHRpZiAoIHR5cGVvZiB0eXBlICE9PSBcInN0cmluZ1wiICkge1xuXHRcdFx0b2JqID0gdHlwZTtcblx0XHRcdHR5cGUgPSB1bmRlZmluZWQ7XG5cdFx0fVxuXHRcdHR5cGUgPSB0eXBlIHx8IFwiZnhcIjtcblxuXHRcdHdoaWxlICggaS0tICkge1xuXHRcdFx0dG1wID0gZGF0YVByaXYuZ2V0KCBlbGVtZW50c1sgaSBdLCB0eXBlICsgXCJxdWV1ZUhvb2tzXCIgKTtcblx0XHRcdGlmICggdG1wICYmIHRtcC5lbXB0eSApIHtcblx0XHRcdFx0Y291bnQrKztcblx0XHRcdFx0dG1wLmVtcHR5LmFkZCggcmVzb2x2ZSApO1xuXHRcdFx0fVxuXHRcdH1cblx0XHRyZXNvbHZlKCk7XG5cdFx0cmV0dXJuIGRlZmVyLnByb21pc2UoIG9iaiApO1xuXHR9XG59ICk7XG52YXIgcG51bSA9ICggL1srLV0/KD86XFxkKlxcLnwpXFxkKyg/OltlRV1bKy1dP1xcZCt8KS8gKS5zb3VyY2U7XG5cbnZhciByY3NzTnVtID0gbmV3IFJlZ0V4cCggXCJeKD86KFsrLV0pPXwpKFwiICsgcG51bSArIFwiKShbYS16JV0qKSRcIiwgXCJpXCIgKTtcblxuXG52YXIgY3NzRXhwYW5kID0gWyBcIlRvcFwiLCBcIlJpZ2h0XCIsIFwiQm90dG9tXCIsIFwiTGVmdFwiIF07XG5cbnZhciBpc0hpZGRlbldpdGhpblRyZWUgPSBmdW5jdGlvbiggZWxlbSwgZWwgKSB7XG5cblx0XHQvLyBpc0hpZGRlbldpdGhpblRyZWUgbWlnaHQgYmUgY2FsbGVkIGZyb20galF1ZXJ5I2ZpbHRlciBmdW5jdGlvbjtcblx0XHQvLyBpbiB0aGF0IGNhc2UsIGVsZW1lbnQgd2lsbCBiZSBzZWNvbmQgYXJndW1lbnRcblx0XHRlbGVtID0gZWwgfHwgZWxlbTtcblxuXHRcdC8vIElubGluZSBzdHlsZSB0cnVtcHMgYWxsXG5cdFx0cmV0dXJuIGVsZW0uc3R5bGUuZGlzcGxheSA9PT0gXCJub25lXCIgfHxcblx0XHRcdGVsZW0uc3R5bGUuZGlzcGxheSA9PT0gXCJcIiAmJlxuXG5cdFx0XHQvLyBPdGhlcndpc2UsIGNoZWNrIGNvbXB1dGVkIHN0eWxlXG5cdFx0XHQvLyBTdXBwb3J0OiBGaXJlZm94IDw9NDMgLSA0NVxuXHRcdFx0Ly8gRGlzY29ubmVjdGVkIGVsZW1lbnRzIGNhbiBoYXZlIGNvbXB1dGVkIGRpc3BsYXk6IG5vbmUsIHNvIGZpcnN0IGNvbmZpcm0gdGhhdCBlbGVtIGlzXG5cdFx0XHQvLyBpbiB0aGUgZG9jdW1lbnQuXG5cdFx0XHRqUXVlcnkuY29udGFpbnMoIGVsZW0ub3duZXJEb2N1bWVudCwgZWxlbSApICYmXG5cblx0XHRcdGpRdWVyeS5jc3MoIGVsZW0sIFwiZGlzcGxheVwiICkgPT09IFwibm9uZVwiO1xuXHR9O1xuXG52YXIgc3dhcCA9IGZ1bmN0aW9uKCBlbGVtLCBvcHRpb25zLCBjYWxsYmFjaywgYXJncyApIHtcblx0dmFyIHJldCwgbmFtZSxcblx0XHRvbGQgPSB7fTtcblxuXHQvLyBSZW1lbWJlciB0aGUgb2xkIHZhbHVlcywgYW5kIGluc2VydCB0aGUgbmV3IG9uZXNcblx0Zm9yICggbmFtZSBpbiBvcHRpb25zICkge1xuXHRcdG9sZFsgbmFtZSBdID0gZWxlbS5zdHlsZVsgbmFtZSBdO1xuXHRcdGVsZW0uc3R5bGVbIG5hbWUgXSA9IG9wdGlvbnNbIG5hbWUgXTtcblx0fVxuXG5cdHJldCA9IGNhbGxiYWNrLmFwcGx5KCBlbGVtLCBhcmdzIHx8IFtdICk7XG5cblx0Ly8gUmV2ZXJ0IHRoZSBvbGQgdmFsdWVzXG5cdGZvciAoIG5hbWUgaW4gb3B0aW9ucyApIHtcblx0XHRlbGVtLnN0eWxlWyBuYW1lIF0gPSBvbGRbIG5hbWUgXTtcblx0fVxuXG5cdHJldHVybiByZXQ7XG59O1xuXG5cblxuXG5mdW5jdGlvbiBhZGp1c3RDU1MoIGVsZW0sIHByb3AsIHZhbHVlUGFydHMsIHR3ZWVuICkge1xuXHR2YXIgYWRqdXN0ZWQsIHNjYWxlLFxuXHRcdG1heEl0ZXJhdGlvbnMgPSAyMCxcblx0XHRjdXJyZW50VmFsdWUgPSB0d2VlbiA/XG5cdFx0XHRmdW5jdGlvbigpIHtcblx0XHRcdFx0cmV0dXJuIHR3ZWVuLmN1cigpO1xuXHRcdFx0fSA6XG5cdFx0XHRmdW5jdGlvbigpIHtcblx0XHRcdFx0cmV0dXJuIGpRdWVyeS5jc3MoIGVsZW0sIHByb3AsIFwiXCIgKTtcblx0XHRcdH0sXG5cdFx0aW5pdGlhbCA9IGN1cnJlbnRWYWx1ZSgpLFxuXHRcdHVuaXQgPSB2YWx1ZVBhcnRzICYmIHZhbHVlUGFydHNbIDMgXSB8fCAoIGpRdWVyeS5jc3NOdW1iZXJbIHByb3AgXSA/IFwiXCIgOiBcInB4XCIgKSxcblxuXHRcdC8vIFN0YXJ0aW5nIHZhbHVlIGNvbXB1dGF0aW9uIGlzIHJlcXVpcmVkIGZvciBwb3RlbnRpYWwgdW5pdCBtaXNtYXRjaGVzXG5cdFx0aW5pdGlhbEluVW5pdCA9ICggalF1ZXJ5LmNzc051bWJlclsgcHJvcCBdIHx8IHVuaXQgIT09IFwicHhcIiAmJiAraW5pdGlhbCApICYmXG5cdFx0XHRyY3NzTnVtLmV4ZWMoIGpRdWVyeS5jc3MoIGVsZW0sIHByb3AgKSApO1xuXG5cdGlmICggaW5pdGlhbEluVW5pdCAmJiBpbml0aWFsSW5Vbml0WyAzIF0gIT09IHVuaXQgKSB7XG5cblx0XHQvLyBTdXBwb3J0OiBGaXJlZm94IDw9NTRcblx0XHQvLyBIYWx2ZSB0aGUgaXRlcmF0aW9uIHRhcmdldCB2YWx1ZSB0byBwcmV2ZW50IGludGVyZmVyZW5jZSBmcm9tIENTUyB1cHBlciBib3VuZHMgKGdoLTIxNDQpXG5cdFx0aW5pdGlhbCA9IGluaXRpYWwgLyAyO1xuXG5cdFx0Ly8gVHJ1c3QgdW5pdHMgcmVwb3J0ZWQgYnkgalF1ZXJ5LmNzc1xuXHRcdHVuaXQgPSB1bml0IHx8IGluaXRpYWxJblVuaXRbIDMgXTtcblxuXHRcdC8vIEl0ZXJhdGl2ZWx5IGFwcHJveGltYXRlIGZyb20gYSBub256ZXJvIHN0YXJ0aW5nIHBvaW50XG5cdFx0aW5pdGlhbEluVW5pdCA9ICtpbml0aWFsIHx8IDE7XG5cblx0XHR3aGlsZSAoIG1heEl0ZXJhdGlvbnMtLSApIHtcblxuXHRcdFx0Ly8gRXZhbHVhdGUgYW5kIHVwZGF0ZSBvdXIgYmVzdCBndWVzcyAoZG91YmxpbmcgZ3Vlc3NlcyB0aGF0IHplcm8gb3V0KS5cblx0XHRcdC8vIEZpbmlzaCBpZiB0aGUgc2NhbGUgZXF1YWxzIG9yIGNyb3NzZXMgMSAobWFraW5nIHRoZSBvbGQqbmV3IHByb2R1Y3Qgbm9uLXBvc2l0aXZlKS5cblx0XHRcdGpRdWVyeS5zdHlsZSggZWxlbSwgcHJvcCwgaW5pdGlhbEluVW5pdCArIHVuaXQgKTtcblx0XHRcdGlmICggKCAxIC0gc2NhbGUgKSAqICggMSAtICggc2NhbGUgPSBjdXJyZW50VmFsdWUoKSAvIGluaXRpYWwgfHwgMC41ICkgKSA8PSAwICkge1xuXHRcdFx0XHRtYXhJdGVyYXRpb25zID0gMDtcblx0XHRcdH1cblx0XHRcdGluaXRpYWxJblVuaXQgPSBpbml0aWFsSW5Vbml0IC8gc2NhbGU7XG5cblx0XHR9XG5cblx0XHRpbml0aWFsSW5Vbml0ID0gaW5pdGlhbEluVW5pdCAqIDI7XG5cdFx0alF1ZXJ5LnN0eWxlKCBlbGVtLCBwcm9wLCBpbml0aWFsSW5Vbml0ICsgdW5pdCApO1xuXG5cdFx0Ly8gTWFrZSBzdXJlIHdlIHVwZGF0ZSB0aGUgdHdlZW4gcHJvcGVydGllcyBsYXRlciBvblxuXHRcdHZhbHVlUGFydHMgPSB2YWx1ZVBhcnRzIHx8IFtdO1xuXHR9XG5cblx0aWYgKCB2YWx1ZVBhcnRzICkge1xuXHRcdGluaXRpYWxJblVuaXQgPSAraW5pdGlhbEluVW5pdCB8fCAraW5pdGlhbCB8fCAwO1xuXG5cdFx0Ly8gQXBwbHkgcmVsYXRpdmUgb2Zmc2V0ICgrPS8tPSkgaWYgc3BlY2lmaWVkXG5cdFx0YWRqdXN0ZWQgPSB2YWx1ZVBhcnRzWyAxIF0gP1xuXHRcdFx0aW5pdGlhbEluVW5pdCArICggdmFsdWVQYXJ0c1sgMSBdICsgMSApICogdmFsdWVQYXJ0c1sgMiBdIDpcblx0XHRcdCt2YWx1ZVBhcnRzWyAyIF07XG5cdFx0aWYgKCB0d2VlbiApIHtcblx0XHRcdHR3ZWVuLnVuaXQgPSB1bml0O1xuXHRcdFx0dHdlZW4uc3RhcnQgPSBpbml0aWFsSW5Vbml0O1xuXHRcdFx0dHdlZW4uZW5kID0gYWRqdXN0ZWQ7XG5cdFx0fVxuXHR9XG5cdHJldHVybiBhZGp1c3RlZDtcbn1cblxuXG52YXIgZGVmYXVsdERpc3BsYXlNYXAgPSB7fTtcblxuZnVuY3Rpb24gZ2V0RGVmYXVsdERpc3BsYXkoIGVsZW0gKSB7XG5cdHZhciB0ZW1wLFxuXHRcdGRvYyA9IGVsZW0ub3duZXJEb2N1bWVudCxcblx0XHRub2RlTmFtZSA9IGVsZW0ubm9kZU5hbWUsXG5cdFx0ZGlzcGxheSA9IGRlZmF1bHREaXNwbGF5TWFwWyBub2RlTmFtZSBdO1xuXG5cdGlmICggZGlzcGxheSApIHtcblx0XHRyZXR1cm4gZGlzcGxheTtcblx0fVxuXG5cdHRlbXAgPSBkb2MuYm9keS5hcHBlbmRDaGlsZCggZG9jLmNyZWF0ZUVsZW1lbnQoIG5vZGVOYW1lICkgKTtcblx0ZGlzcGxheSA9IGpRdWVyeS5jc3MoIHRlbXAsIFwiZGlzcGxheVwiICk7XG5cblx0dGVtcC5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKCB0ZW1wICk7XG5cblx0aWYgKCBkaXNwbGF5ID09PSBcIm5vbmVcIiApIHtcblx0XHRkaXNwbGF5ID0gXCJibG9ja1wiO1xuXHR9XG5cdGRlZmF1bHREaXNwbGF5TWFwWyBub2RlTmFtZSBdID0gZGlzcGxheTtcblxuXHRyZXR1cm4gZGlzcGxheTtcbn1cblxuZnVuY3Rpb24gc2hvd0hpZGUoIGVsZW1lbnRzLCBzaG93ICkge1xuXHR2YXIgZGlzcGxheSwgZWxlbSxcblx0XHR2YWx1ZXMgPSBbXSxcblx0XHRpbmRleCA9IDAsXG5cdFx0bGVuZ3RoID0gZWxlbWVudHMubGVuZ3RoO1xuXG5cdC8vIERldGVybWluZSBuZXcgZGlzcGxheSB2YWx1ZSBmb3IgZWxlbWVudHMgdGhhdCBuZWVkIHRvIGNoYW5nZVxuXHRmb3IgKCA7IGluZGV4IDwgbGVuZ3RoOyBpbmRleCsrICkge1xuXHRcdGVsZW0gPSBlbGVtZW50c1sgaW5kZXggXTtcblx0XHRpZiAoICFlbGVtLnN0eWxlICkge1xuXHRcdFx0Y29udGludWU7XG5cdFx0fVxuXG5cdFx0ZGlzcGxheSA9IGVsZW0uc3R5bGUuZGlzcGxheTtcblx0XHRpZiAoIHNob3cgKSB7XG5cblx0XHRcdC8vIFNpbmNlIHdlIGZvcmNlIHZpc2liaWxpdHkgdXBvbiBjYXNjYWRlLWhpZGRlbiBlbGVtZW50cywgYW4gaW1tZWRpYXRlIChhbmQgc2xvdylcblx0XHRcdC8vIGNoZWNrIGlzIHJlcXVpcmVkIGluIHRoaXMgZmlyc3QgbG9vcCB1bmxlc3Mgd2UgaGF2ZSBhIG5vbmVtcHR5IGRpc3BsYXkgdmFsdWUgKGVpdGhlclxuXHRcdFx0Ly8gaW5saW5lIG9yIGFib3V0LXRvLWJlLXJlc3RvcmVkKVxuXHRcdFx0aWYgKCBkaXNwbGF5ID09PSBcIm5vbmVcIiApIHtcblx0XHRcdFx0dmFsdWVzWyBpbmRleCBdID0gZGF0YVByaXYuZ2V0KCBlbGVtLCBcImRpc3BsYXlcIiApIHx8IG51bGw7XG5cdFx0XHRcdGlmICggIXZhbHVlc1sgaW5kZXggXSApIHtcblx0XHRcdFx0XHRlbGVtLnN0eWxlLmRpc3BsYXkgPSBcIlwiO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0XHRpZiAoIGVsZW0uc3R5bGUuZGlzcGxheSA9PT0gXCJcIiAmJiBpc0hpZGRlbldpdGhpblRyZWUoIGVsZW0gKSApIHtcblx0XHRcdFx0dmFsdWVzWyBpbmRleCBdID0gZ2V0RGVmYXVsdERpc3BsYXkoIGVsZW0gKTtcblx0XHRcdH1cblx0XHR9IGVsc2Uge1xuXHRcdFx0aWYgKCBkaXNwbGF5ICE9PSBcIm5vbmVcIiApIHtcblx0XHRcdFx0dmFsdWVzWyBpbmRleCBdID0gXCJub25lXCI7XG5cblx0XHRcdFx0Ly8gUmVtZW1iZXIgd2hhdCB3ZSdyZSBvdmVyd3JpdGluZ1xuXHRcdFx0XHRkYXRhUHJpdi5zZXQoIGVsZW0sIFwiZGlzcGxheVwiLCBkaXNwbGF5ICk7XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0Ly8gU2V0IHRoZSBkaXNwbGF5IG9mIHRoZSBlbGVtZW50cyBpbiBhIHNlY29uZCBsb29wIHRvIGF2b2lkIGNvbnN0YW50IHJlZmxvd1xuXHRmb3IgKCBpbmRleCA9IDA7IGluZGV4IDwgbGVuZ3RoOyBpbmRleCsrICkge1xuXHRcdGlmICggdmFsdWVzWyBpbmRleCBdICE9IG51bGwgKSB7XG5cdFx0XHRlbGVtZW50c1sgaW5kZXggXS5zdHlsZS5kaXNwbGF5ID0gdmFsdWVzWyBpbmRleCBdO1xuXHRcdH1cblx0fVxuXG5cdHJldHVybiBlbGVtZW50cztcbn1cblxualF1ZXJ5LmZuLmV4dGVuZCgge1xuXHRzaG93OiBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4gc2hvd0hpZGUoIHRoaXMsIHRydWUgKTtcblx0fSxcblx0aGlkZTogZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIHNob3dIaWRlKCB0aGlzICk7XG5cdH0sXG5cdHRvZ2dsZTogZnVuY3Rpb24oIHN0YXRlICkge1xuXHRcdGlmICggdHlwZW9mIHN0YXRlID09PSBcImJvb2xlYW5cIiApIHtcblx0XHRcdHJldHVybiBzdGF0ZSA/IHRoaXMuc2hvdygpIDogdGhpcy5oaWRlKCk7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXMuZWFjaCggZnVuY3Rpb24oKSB7XG5cdFx0XHRpZiAoIGlzSGlkZGVuV2l0aGluVHJlZSggdGhpcyApICkge1xuXHRcdFx0XHRqUXVlcnkoIHRoaXMgKS5zaG93KCk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRqUXVlcnkoIHRoaXMgKS5oaWRlKCk7XG5cdFx0XHR9XG5cdFx0fSApO1xuXHR9XG59ICk7XG52YXIgcmNoZWNrYWJsZVR5cGUgPSAoIC9eKD86Y2hlY2tib3h8cmFkaW8pJC9pICk7XG5cbnZhciBydGFnTmFtZSA9ICggLzwoW2Etel1bXlxcL1xcMD5cXHgyMFxcdFxcclxcblxcZl0rKS9pICk7XG5cbnZhciByc2NyaXB0VHlwZSA9ICggL14kfF5tb2R1bGUkfFxcLyg/OmphdmF8ZWNtYSlzY3JpcHQvaSApO1xuXG5cblxuLy8gV2UgaGF2ZSB0byBjbG9zZSB0aGVzZSB0YWdzIHRvIHN1cHBvcnQgWEhUTUwgKCMxMzIwMClcbnZhciB3cmFwTWFwID0ge1xuXG5cdC8vIFN1cHBvcnQ6IElFIDw9OSBvbmx5XG5cdG9wdGlvbjogWyAxLCBcIjxzZWxlY3QgbXVsdGlwbGU9J211bHRpcGxlJz5cIiwgXCI8L3NlbGVjdD5cIiBdLFxuXG5cdC8vIFhIVE1MIHBhcnNlcnMgZG8gbm90IG1hZ2ljYWxseSBpbnNlcnQgZWxlbWVudHMgaW4gdGhlXG5cdC8vIHNhbWUgd2F5IHRoYXQgdGFnIHNvdXAgcGFyc2VycyBkby4gU28gd2UgY2Fubm90IHNob3J0ZW5cblx0Ly8gdGhpcyBieSBvbWl0dGluZyA8dGJvZHk+IG9yIG90aGVyIHJlcXVpcmVkIGVsZW1lbnRzLlxuXHR0aGVhZDogWyAxLCBcIjx0YWJsZT5cIiwgXCI8L3RhYmxlPlwiIF0sXG5cdGNvbDogWyAyLCBcIjx0YWJsZT48Y29sZ3JvdXA+XCIsIFwiPC9jb2xncm91cD48L3RhYmxlPlwiIF0sXG5cdHRyOiBbIDIsIFwiPHRhYmxlPjx0Ym9keT5cIiwgXCI8L3Rib2R5PjwvdGFibGU+XCIgXSxcblx0dGQ6IFsgMywgXCI8dGFibGU+PHRib2R5Pjx0cj5cIiwgXCI8L3RyPjwvdGJvZHk+PC90YWJsZT5cIiBdLFxuXG5cdF9kZWZhdWx0OiBbIDAsIFwiXCIsIFwiXCIgXVxufTtcblxuLy8gU3VwcG9ydDogSUUgPD05IG9ubHlcbndyYXBNYXAub3B0Z3JvdXAgPSB3cmFwTWFwLm9wdGlvbjtcblxud3JhcE1hcC50Ym9keSA9IHdyYXBNYXAudGZvb3QgPSB3cmFwTWFwLmNvbGdyb3VwID0gd3JhcE1hcC5jYXB0aW9uID0gd3JhcE1hcC50aGVhZDtcbndyYXBNYXAudGggPSB3cmFwTWFwLnRkO1xuXG5cbmZ1bmN0aW9uIGdldEFsbCggY29udGV4dCwgdGFnICkge1xuXG5cdC8vIFN1cHBvcnQ6IElFIDw9OSAtIDExIG9ubHlcblx0Ly8gVXNlIHR5cGVvZiB0byBhdm9pZCB6ZXJvLWFyZ3VtZW50IG1ldGhvZCBpbnZvY2F0aW9uIG9uIGhvc3Qgb2JqZWN0cyAoIzE1MTUxKVxuXHR2YXIgcmV0O1xuXG5cdGlmICggdHlwZW9mIGNvbnRleHQuZ2V0RWxlbWVudHNCeVRhZ05hbWUgIT09IFwidW5kZWZpbmVkXCIgKSB7XG5cdFx0cmV0ID0gY29udGV4dC5nZXRFbGVtZW50c0J5VGFnTmFtZSggdGFnIHx8IFwiKlwiICk7XG5cblx0fSBlbHNlIGlmICggdHlwZW9mIGNvbnRleHQucXVlcnlTZWxlY3RvckFsbCAhPT0gXCJ1bmRlZmluZWRcIiApIHtcblx0XHRyZXQgPSBjb250ZXh0LnF1ZXJ5U2VsZWN0b3JBbGwoIHRhZyB8fCBcIipcIiApO1xuXG5cdH0gZWxzZSB7XG5cdFx0cmV0ID0gW107XG5cdH1cblxuXHRpZiAoIHRhZyA9PT0gdW5kZWZpbmVkIHx8IHRhZyAmJiBub2RlTmFtZSggY29udGV4dCwgdGFnICkgKSB7XG5cdFx0cmV0dXJuIGpRdWVyeS5tZXJnZSggWyBjb250ZXh0IF0sIHJldCApO1xuXHR9XG5cblx0cmV0dXJuIHJldDtcbn1cblxuXG4vLyBNYXJrIHNjcmlwdHMgYXMgaGF2aW5nIGFscmVhZHkgYmVlbiBldmFsdWF0ZWRcbmZ1bmN0aW9uIHNldEdsb2JhbEV2YWwoIGVsZW1zLCByZWZFbGVtZW50cyApIHtcblx0dmFyIGkgPSAwLFxuXHRcdGwgPSBlbGVtcy5sZW5ndGg7XG5cblx0Zm9yICggOyBpIDwgbDsgaSsrICkge1xuXHRcdGRhdGFQcml2LnNldChcblx0XHRcdGVsZW1zWyBpIF0sXG5cdFx0XHRcImdsb2JhbEV2YWxcIixcblx0XHRcdCFyZWZFbGVtZW50cyB8fCBkYXRhUHJpdi5nZXQoIHJlZkVsZW1lbnRzWyBpIF0sIFwiZ2xvYmFsRXZhbFwiIClcblx0XHQpO1xuXHR9XG59XG5cblxudmFyIHJodG1sID0gLzx8JiM/XFx3KzsvO1xuXG5mdW5jdGlvbiBidWlsZEZyYWdtZW50KCBlbGVtcywgY29udGV4dCwgc2NyaXB0cywgc2VsZWN0aW9uLCBpZ25vcmVkICkge1xuXHR2YXIgZWxlbSwgdG1wLCB0YWcsIHdyYXAsIGNvbnRhaW5zLCBqLFxuXHRcdGZyYWdtZW50ID0gY29udGV4dC5jcmVhdGVEb2N1bWVudEZyYWdtZW50KCksXG5cdFx0bm9kZXMgPSBbXSxcblx0XHRpID0gMCxcblx0XHRsID0gZWxlbXMubGVuZ3RoO1xuXG5cdGZvciAoIDsgaSA8IGw7IGkrKyApIHtcblx0XHRlbGVtID0gZWxlbXNbIGkgXTtcblxuXHRcdGlmICggZWxlbSB8fCBlbGVtID09PSAwICkge1xuXG5cdFx0XHQvLyBBZGQgbm9kZXMgZGlyZWN0bHlcblx0XHRcdGlmICggdG9UeXBlKCBlbGVtICkgPT09IFwib2JqZWN0XCIgKSB7XG5cblx0XHRcdFx0Ly8gU3VwcG9ydDogQW5kcm9pZCA8PTQuMCBvbmx5LCBQaGFudG9tSlMgMSBvbmx5XG5cdFx0XHRcdC8vIHB1c2guYXBwbHkoXywgYXJyYXlsaWtlKSB0aHJvd3Mgb24gYW5jaWVudCBXZWJLaXRcblx0XHRcdFx0alF1ZXJ5Lm1lcmdlKCBub2RlcywgZWxlbS5ub2RlVHlwZSA/IFsgZWxlbSBdIDogZWxlbSApO1xuXG5cdFx0XHQvLyBDb252ZXJ0IG5vbi1odG1sIGludG8gYSB0ZXh0IG5vZGVcblx0XHRcdH0gZWxzZSBpZiAoICFyaHRtbC50ZXN0KCBlbGVtICkgKSB7XG5cdFx0XHRcdG5vZGVzLnB1c2goIGNvbnRleHQuY3JlYXRlVGV4dE5vZGUoIGVsZW0gKSApO1xuXG5cdFx0XHQvLyBDb252ZXJ0IGh0bWwgaW50byBET00gbm9kZXNcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdHRtcCA9IHRtcCB8fCBmcmFnbWVudC5hcHBlbmRDaGlsZCggY29udGV4dC5jcmVhdGVFbGVtZW50KCBcImRpdlwiICkgKTtcblxuXHRcdFx0XHQvLyBEZXNlcmlhbGl6ZSBhIHN0YW5kYXJkIHJlcHJlc2VudGF0aW9uXG5cdFx0XHRcdHRhZyA9ICggcnRhZ05hbWUuZXhlYyggZWxlbSApIHx8IFsgXCJcIiwgXCJcIiBdIClbIDEgXS50b0xvd2VyQ2FzZSgpO1xuXHRcdFx0XHR3cmFwID0gd3JhcE1hcFsgdGFnIF0gfHwgd3JhcE1hcC5fZGVmYXVsdDtcblx0XHRcdFx0dG1wLmlubmVySFRNTCA9IHdyYXBbIDEgXSArIGpRdWVyeS5odG1sUHJlZmlsdGVyKCBlbGVtICkgKyB3cmFwWyAyIF07XG5cblx0XHRcdFx0Ly8gRGVzY2VuZCB0aHJvdWdoIHdyYXBwZXJzIHRvIHRoZSByaWdodCBjb250ZW50XG5cdFx0XHRcdGogPSB3cmFwWyAwIF07XG5cdFx0XHRcdHdoaWxlICggai0tICkge1xuXHRcdFx0XHRcdHRtcCA9IHRtcC5sYXN0Q2hpbGQ7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBTdXBwb3J0OiBBbmRyb2lkIDw9NC4wIG9ubHksIFBoYW50b21KUyAxIG9ubHlcblx0XHRcdFx0Ly8gcHVzaC5hcHBseShfLCBhcnJheWxpa2UpIHRocm93cyBvbiBhbmNpZW50IFdlYktpdFxuXHRcdFx0XHRqUXVlcnkubWVyZ2UoIG5vZGVzLCB0bXAuY2hpbGROb2RlcyApO1xuXG5cdFx0XHRcdC8vIFJlbWVtYmVyIHRoZSB0b3AtbGV2ZWwgY29udGFpbmVyXG5cdFx0XHRcdHRtcCA9IGZyYWdtZW50LmZpcnN0Q2hpbGQ7XG5cblx0XHRcdFx0Ly8gRW5zdXJlIHRoZSBjcmVhdGVkIG5vZGVzIGFyZSBvcnBoYW5lZCAoIzEyMzkyKVxuXHRcdFx0XHR0bXAudGV4dENvbnRlbnQgPSBcIlwiO1xuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdC8vIFJlbW92ZSB3cmFwcGVyIGZyb20gZnJhZ21lbnRcblx0ZnJhZ21lbnQudGV4dENvbnRlbnQgPSBcIlwiO1xuXG5cdGkgPSAwO1xuXHR3aGlsZSAoICggZWxlbSA9IG5vZGVzWyBpKysgXSApICkge1xuXG5cdFx0Ly8gU2tpcCBlbGVtZW50cyBhbHJlYWR5IGluIHRoZSBjb250ZXh0IGNvbGxlY3Rpb24gKHRyYWMtNDA4Nylcblx0XHRpZiAoIHNlbGVjdGlvbiAmJiBqUXVlcnkuaW5BcnJheSggZWxlbSwgc2VsZWN0aW9uICkgPiAtMSApIHtcblx0XHRcdGlmICggaWdub3JlZCApIHtcblx0XHRcdFx0aWdub3JlZC5wdXNoKCBlbGVtICk7XG5cdFx0XHR9XG5cdFx0XHRjb250aW51ZTtcblx0XHR9XG5cblx0XHRjb250YWlucyA9IGpRdWVyeS5jb250YWlucyggZWxlbS5vd25lckRvY3VtZW50LCBlbGVtICk7XG5cblx0XHQvLyBBcHBlbmQgdG8gZnJhZ21lbnRcblx0XHR0bXAgPSBnZXRBbGwoIGZyYWdtZW50LmFwcGVuZENoaWxkKCBlbGVtICksIFwic2NyaXB0XCIgKTtcblxuXHRcdC8vIFByZXNlcnZlIHNjcmlwdCBldmFsdWF0aW9uIGhpc3Rvcnlcblx0XHRpZiAoIGNvbnRhaW5zICkge1xuXHRcdFx0c2V0R2xvYmFsRXZhbCggdG1wICk7XG5cdFx0fVxuXG5cdFx0Ly8gQ2FwdHVyZSBleGVjdXRhYmxlc1xuXHRcdGlmICggc2NyaXB0cyApIHtcblx0XHRcdGogPSAwO1xuXHRcdFx0d2hpbGUgKCAoIGVsZW0gPSB0bXBbIGorKyBdICkgKSB7XG5cdFx0XHRcdGlmICggcnNjcmlwdFR5cGUudGVzdCggZWxlbS50eXBlIHx8IFwiXCIgKSApIHtcblx0XHRcdFx0XHRzY3JpcHRzLnB1c2goIGVsZW0gKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdHJldHVybiBmcmFnbWVudDtcbn1cblxuXG4oIGZ1bmN0aW9uKCkge1xuXHR2YXIgZnJhZ21lbnQgPSBkb2N1bWVudC5jcmVhdGVEb2N1bWVudEZyYWdtZW50KCksXG5cdFx0ZGl2ID0gZnJhZ21lbnQuYXBwZW5kQ2hpbGQoIGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoIFwiZGl2XCIgKSApLFxuXHRcdGlucHV0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCggXCJpbnB1dFwiICk7XG5cblx0Ly8gU3VwcG9ydDogQW5kcm9pZCA0LjAgLSA0LjMgb25seVxuXHQvLyBDaGVjayBzdGF0ZSBsb3N0IGlmIHRoZSBuYW1lIGlzIHNldCAoIzExMjE3KVxuXHQvLyBTdXBwb3J0OiBXaW5kb3dzIFdlYiBBcHBzIChXV0EpXG5cdC8vIGBuYW1lYCBhbmQgYHR5cGVgIG11c3QgdXNlIC5zZXRBdHRyaWJ1dGUgZm9yIFdXQSAoIzE0OTAxKVxuXHRpbnB1dC5zZXRBdHRyaWJ1dGUoIFwidHlwZVwiLCBcInJhZGlvXCIgKTtcblx0aW5wdXQuc2V0QXR0cmlidXRlKCBcImNoZWNrZWRcIiwgXCJjaGVja2VkXCIgKTtcblx0aW5wdXQuc2V0QXR0cmlidXRlKCBcIm5hbWVcIiwgXCJ0XCIgKTtcblxuXHRkaXYuYXBwZW5kQ2hpbGQoIGlucHV0ICk7XG5cblx0Ly8gU3VwcG9ydDogQW5kcm9pZCA8PTQuMSBvbmx5XG5cdC8vIE9sZGVyIFdlYktpdCBkb2Vzbid0IGNsb25lIGNoZWNrZWQgc3RhdGUgY29ycmVjdGx5IGluIGZyYWdtZW50c1xuXHRzdXBwb3J0LmNoZWNrQ2xvbmUgPSBkaXYuY2xvbmVOb2RlKCB0cnVlICkuY2xvbmVOb2RlKCB0cnVlICkubGFzdENoaWxkLmNoZWNrZWQ7XG5cblx0Ly8gU3VwcG9ydDogSUUgPD0xMSBvbmx5XG5cdC8vIE1ha2Ugc3VyZSB0ZXh0YXJlYSAoYW5kIGNoZWNrYm94KSBkZWZhdWx0VmFsdWUgaXMgcHJvcGVybHkgY2xvbmVkXG5cdGRpdi5pbm5lckhUTUwgPSBcIjx0ZXh0YXJlYT54PC90ZXh0YXJlYT5cIjtcblx0c3VwcG9ydC5ub0Nsb25lQ2hlY2tlZCA9ICEhZGl2LmNsb25lTm9kZSggdHJ1ZSApLmxhc3RDaGlsZC5kZWZhdWx0VmFsdWU7XG59ICkoKTtcbnZhciBkb2N1bWVudEVsZW1lbnQgPSBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQ7XG5cblxuXG52YXJcblx0cmtleUV2ZW50ID0gL15rZXkvLFxuXHRybW91c2VFdmVudCA9IC9eKD86bW91c2V8cG9pbnRlcnxjb250ZXh0bWVudXxkcmFnfGRyb3ApfGNsaWNrLyxcblx0cnR5cGVuYW1lc3BhY2UgPSAvXihbXi5dKikoPzpcXC4oLispfCkvO1xuXG5mdW5jdGlvbiByZXR1cm5UcnVlKCkge1xuXHRyZXR1cm4gdHJ1ZTtcbn1cblxuZnVuY3Rpb24gcmV0dXJuRmFsc2UoKSB7XG5cdHJldHVybiBmYWxzZTtcbn1cblxuLy8gU3VwcG9ydDogSUUgPD05IG9ubHlcbi8vIFNlZSAjMTMzOTMgZm9yIG1vcmUgaW5mb1xuZnVuY3Rpb24gc2FmZUFjdGl2ZUVsZW1lbnQoKSB7XG5cdHRyeSB7XG5cdFx0cmV0dXJuIGRvY3VtZW50LmFjdGl2ZUVsZW1lbnQ7XG5cdH0gY2F0Y2ggKCBlcnIgKSB7IH1cbn1cblxuZnVuY3Rpb24gb24oIGVsZW0sIHR5cGVzLCBzZWxlY3RvciwgZGF0YSwgZm4sIG9uZSApIHtcblx0dmFyIG9yaWdGbiwgdHlwZTtcblxuXHQvLyBUeXBlcyBjYW4gYmUgYSBtYXAgb2YgdHlwZXMvaGFuZGxlcnNcblx0aWYgKCB0eXBlb2YgdHlwZXMgPT09IFwib2JqZWN0XCIgKSB7XG5cblx0XHQvLyAoIHR5cGVzLU9iamVjdCwgc2VsZWN0b3IsIGRhdGEgKVxuXHRcdGlmICggdHlwZW9mIHNlbGVjdG9yICE9PSBcInN0cmluZ1wiICkge1xuXG5cdFx0XHQvLyAoIHR5cGVzLU9iamVjdCwgZGF0YSApXG5cdFx0XHRkYXRhID0gZGF0YSB8fCBzZWxlY3Rvcjtcblx0XHRcdHNlbGVjdG9yID0gdW5kZWZpbmVkO1xuXHRcdH1cblx0XHRmb3IgKCB0eXBlIGluIHR5cGVzICkge1xuXHRcdFx0b24oIGVsZW0sIHR5cGUsIHNlbGVjdG9yLCBkYXRhLCB0eXBlc1sgdHlwZSBdLCBvbmUgKTtcblx0XHR9XG5cdFx0cmV0dXJuIGVsZW07XG5cdH1cblxuXHRpZiAoIGRhdGEgPT0gbnVsbCAmJiBmbiA9PSBudWxsICkge1xuXG5cdFx0Ly8gKCB0eXBlcywgZm4gKVxuXHRcdGZuID0gc2VsZWN0b3I7XG5cdFx0ZGF0YSA9IHNlbGVjdG9yID0gdW5kZWZpbmVkO1xuXHR9IGVsc2UgaWYgKCBmbiA9PSBudWxsICkge1xuXHRcdGlmICggdHlwZW9mIHNlbGVjdG9yID09PSBcInN0cmluZ1wiICkge1xuXG5cdFx0XHQvLyAoIHR5cGVzLCBzZWxlY3RvciwgZm4gKVxuXHRcdFx0Zm4gPSBkYXRhO1xuXHRcdFx0ZGF0YSA9IHVuZGVmaW5lZDtcblx0XHR9IGVsc2Uge1xuXG5cdFx0XHQvLyAoIHR5cGVzLCBkYXRhLCBmbiApXG5cdFx0XHRmbiA9IGRhdGE7XG5cdFx0XHRkYXRhID0gc2VsZWN0b3I7XG5cdFx0XHRzZWxlY3RvciA9IHVuZGVmaW5lZDtcblx0XHR9XG5cdH1cblx0aWYgKCBmbiA9PT0gZmFsc2UgKSB7XG5cdFx0Zm4gPSByZXR1cm5GYWxzZTtcblx0fSBlbHNlIGlmICggIWZuICkge1xuXHRcdHJldHVybiBlbGVtO1xuXHR9XG5cblx0aWYgKCBvbmUgPT09IDEgKSB7XG5cdFx0b3JpZ0ZuID0gZm47XG5cdFx0Zm4gPSBmdW5jdGlvbiggZXZlbnQgKSB7XG5cblx0XHRcdC8vIENhbiB1c2UgYW4gZW1wdHkgc2V0LCBzaW5jZSBldmVudCBjb250YWlucyB0aGUgaW5mb1xuXHRcdFx0alF1ZXJ5KCkub2ZmKCBldmVudCApO1xuXHRcdFx0cmV0dXJuIG9yaWdGbi5hcHBseSggdGhpcywgYXJndW1lbnRzICk7XG5cdFx0fTtcblxuXHRcdC8vIFVzZSBzYW1lIGd1aWQgc28gY2FsbGVyIGNhbiByZW1vdmUgdXNpbmcgb3JpZ0ZuXG5cdFx0Zm4uZ3VpZCA9IG9yaWdGbi5ndWlkIHx8ICggb3JpZ0ZuLmd1aWQgPSBqUXVlcnkuZ3VpZCsrICk7XG5cdH1cblx0cmV0dXJuIGVsZW0uZWFjaCggZnVuY3Rpb24oKSB7XG5cdFx0alF1ZXJ5LmV2ZW50LmFkZCggdGhpcywgdHlwZXMsIGZuLCBkYXRhLCBzZWxlY3RvciApO1xuXHR9ICk7XG59XG5cbi8qXG4gKiBIZWxwZXIgZnVuY3Rpb25zIGZvciBtYW5hZ2luZyBldmVudHMgLS0gbm90IHBhcnQgb2YgdGhlIHB1YmxpYyBpbnRlcmZhY2UuXG4gKiBQcm9wcyB0byBEZWFuIEVkd2FyZHMnIGFkZEV2ZW50IGxpYnJhcnkgZm9yIG1hbnkgb2YgdGhlIGlkZWFzLlxuICovXG5qUXVlcnkuZXZlbnQgPSB7XG5cblx0Z2xvYmFsOiB7fSxcblxuXHRhZGQ6IGZ1bmN0aW9uKCBlbGVtLCB0eXBlcywgaGFuZGxlciwgZGF0YSwgc2VsZWN0b3IgKSB7XG5cblx0XHR2YXIgaGFuZGxlT2JqSW4sIGV2ZW50SGFuZGxlLCB0bXAsXG5cdFx0XHRldmVudHMsIHQsIGhhbmRsZU9iaixcblx0XHRcdHNwZWNpYWwsIGhhbmRsZXJzLCB0eXBlLCBuYW1lc3BhY2VzLCBvcmlnVHlwZSxcblx0XHRcdGVsZW1EYXRhID0gZGF0YVByaXYuZ2V0KCBlbGVtICk7XG5cblx0XHQvLyBEb24ndCBhdHRhY2ggZXZlbnRzIHRvIG5vRGF0YSBvciB0ZXh0L2NvbW1lbnQgbm9kZXMgKGJ1dCBhbGxvdyBwbGFpbiBvYmplY3RzKVxuXHRcdGlmICggIWVsZW1EYXRhICkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdC8vIENhbGxlciBjYW4gcGFzcyBpbiBhbiBvYmplY3Qgb2YgY3VzdG9tIGRhdGEgaW4gbGlldSBvZiB0aGUgaGFuZGxlclxuXHRcdGlmICggaGFuZGxlci5oYW5kbGVyICkge1xuXHRcdFx0aGFuZGxlT2JqSW4gPSBoYW5kbGVyO1xuXHRcdFx0aGFuZGxlciA9IGhhbmRsZU9iakluLmhhbmRsZXI7XG5cdFx0XHRzZWxlY3RvciA9IGhhbmRsZU9iakluLnNlbGVjdG9yO1xuXHRcdH1cblxuXHRcdC8vIEVuc3VyZSB0aGF0IGludmFsaWQgc2VsZWN0b3JzIHRocm93IGV4Y2VwdGlvbnMgYXQgYXR0YWNoIHRpbWVcblx0XHQvLyBFdmFsdWF0ZSBhZ2FpbnN0IGRvY3VtZW50RWxlbWVudCBpbiBjYXNlIGVsZW0gaXMgYSBub24tZWxlbWVudCBub2RlIChlLmcuLCBkb2N1bWVudClcblx0XHRpZiAoIHNlbGVjdG9yICkge1xuXHRcdFx0alF1ZXJ5LmZpbmQubWF0Y2hlc1NlbGVjdG9yKCBkb2N1bWVudEVsZW1lbnQsIHNlbGVjdG9yICk7XG5cdFx0fVxuXG5cdFx0Ly8gTWFrZSBzdXJlIHRoYXQgdGhlIGhhbmRsZXIgaGFzIGEgdW5pcXVlIElELCB1c2VkIHRvIGZpbmQvcmVtb3ZlIGl0IGxhdGVyXG5cdFx0aWYgKCAhaGFuZGxlci5ndWlkICkge1xuXHRcdFx0aGFuZGxlci5ndWlkID0galF1ZXJ5Lmd1aWQrKztcblx0XHR9XG5cblx0XHQvLyBJbml0IHRoZSBlbGVtZW50J3MgZXZlbnQgc3RydWN0dXJlIGFuZCBtYWluIGhhbmRsZXIsIGlmIHRoaXMgaXMgdGhlIGZpcnN0XG5cdFx0aWYgKCAhKCBldmVudHMgPSBlbGVtRGF0YS5ldmVudHMgKSApIHtcblx0XHRcdGV2ZW50cyA9IGVsZW1EYXRhLmV2ZW50cyA9IHt9O1xuXHRcdH1cblx0XHRpZiAoICEoIGV2ZW50SGFuZGxlID0gZWxlbURhdGEuaGFuZGxlICkgKSB7XG5cdFx0XHRldmVudEhhbmRsZSA9IGVsZW1EYXRhLmhhbmRsZSA9IGZ1bmN0aW9uKCBlICkge1xuXG5cdFx0XHRcdC8vIERpc2NhcmQgdGhlIHNlY29uZCBldmVudCBvZiBhIGpRdWVyeS5ldmVudC50cmlnZ2VyKCkgYW5kXG5cdFx0XHRcdC8vIHdoZW4gYW4gZXZlbnQgaXMgY2FsbGVkIGFmdGVyIGEgcGFnZSBoYXMgdW5sb2FkZWRcblx0XHRcdFx0cmV0dXJuIHR5cGVvZiBqUXVlcnkgIT09IFwidW5kZWZpbmVkXCIgJiYgalF1ZXJ5LmV2ZW50LnRyaWdnZXJlZCAhPT0gZS50eXBlID9cblx0XHRcdFx0XHRqUXVlcnkuZXZlbnQuZGlzcGF0Y2guYXBwbHkoIGVsZW0sIGFyZ3VtZW50cyApIDogdW5kZWZpbmVkO1xuXHRcdFx0fTtcblx0XHR9XG5cblx0XHQvLyBIYW5kbGUgbXVsdGlwbGUgZXZlbnRzIHNlcGFyYXRlZCBieSBhIHNwYWNlXG5cdFx0dHlwZXMgPSAoIHR5cGVzIHx8IFwiXCIgKS5tYXRjaCggcm5vdGh0bWx3aGl0ZSApIHx8IFsgXCJcIiBdO1xuXHRcdHQgPSB0eXBlcy5sZW5ndGg7XG5cdFx0d2hpbGUgKCB0LS0gKSB7XG5cdFx0XHR0bXAgPSBydHlwZW5hbWVzcGFjZS5leGVjKCB0eXBlc1sgdCBdICkgfHwgW107XG5cdFx0XHR0eXBlID0gb3JpZ1R5cGUgPSB0bXBbIDEgXTtcblx0XHRcdG5hbWVzcGFjZXMgPSAoIHRtcFsgMiBdIHx8IFwiXCIgKS5zcGxpdCggXCIuXCIgKS5zb3J0KCk7XG5cblx0XHRcdC8vIFRoZXJlICptdXN0KiBiZSBhIHR5cGUsIG5vIGF0dGFjaGluZyBuYW1lc3BhY2Utb25seSBoYW5kbGVyc1xuXHRcdFx0aWYgKCAhdHlwZSApIHtcblx0XHRcdFx0Y29udGludWU7XG5cdFx0XHR9XG5cblx0XHRcdC8vIElmIGV2ZW50IGNoYW5nZXMgaXRzIHR5cGUsIHVzZSB0aGUgc3BlY2lhbCBldmVudCBoYW5kbGVycyBmb3IgdGhlIGNoYW5nZWQgdHlwZVxuXHRcdFx0c3BlY2lhbCA9IGpRdWVyeS5ldmVudC5zcGVjaWFsWyB0eXBlIF0gfHwge307XG5cblx0XHRcdC8vIElmIHNlbGVjdG9yIGRlZmluZWQsIGRldGVybWluZSBzcGVjaWFsIGV2ZW50IGFwaSB0eXBlLCBvdGhlcndpc2UgZ2l2ZW4gdHlwZVxuXHRcdFx0dHlwZSA9ICggc2VsZWN0b3IgPyBzcGVjaWFsLmRlbGVnYXRlVHlwZSA6IHNwZWNpYWwuYmluZFR5cGUgKSB8fCB0eXBlO1xuXG5cdFx0XHQvLyBVcGRhdGUgc3BlY2lhbCBiYXNlZCBvbiBuZXdseSByZXNldCB0eXBlXG5cdFx0XHRzcGVjaWFsID0galF1ZXJ5LmV2ZW50LnNwZWNpYWxbIHR5cGUgXSB8fCB7fTtcblxuXHRcdFx0Ly8gaGFuZGxlT2JqIGlzIHBhc3NlZCB0byBhbGwgZXZlbnQgaGFuZGxlcnNcblx0XHRcdGhhbmRsZU9iaiA9IGpRdWVyeS5leHRlbmQoIHtcblx0XHRcdFx0dHlwZTogdHlwZSxcblx0XHRcdFx0b3JpZ1R5cGU6IG9yaWdUeXBlLFxuXHRcdFx0XHRkYXRhOiBkYXRhLFxuXHRcdFx0XHRoYW5kbGVyOiBoYW5kbGVyLFxuXHRcdFx0XHRndWlkOiBoYW5kbGVyLmd1aWQsXG5cdFx0XHRcdHNlbGVjdG9yOiBzZWxlY3Rvcixcblx0XHRcdFx0bmVlZHNDb250ZXh0OiBzZWxlY3RvciAmJiBqUXVlcnkuZXhwci5tYXRjaC5uZWVkc0NvbnRleHQudGVzdCggc2VsZWN0b3IgKSxcblx0XHRcdFx0bmFtZXNwYWNlOiBuYW1lc3BhY2VzLmpvaW4oIFwiLlwiIClcblx0XHRcdH0sIGhhbmRsZU9iakluICk7XG5cblx0XHRcdC8vIEluaXQgdGhlIGV2ZW50IGhhbmRsZXIgcXVldWUgaWYgd2UncmUgdGhlIGZpcnN0XG5cdFx0XHRpZiAoICEoIGhhbmRsZXJzID0gZXZlbnRzWyB0eXBlIF0gKSApIHtcblx0XHRcdFx0aGFuZGxlcnMgPSBldmVudHNbIHR5cGUgXSA9IFtdO1xuXHRcdFx0XHRoYW5kbGVycy5kZWxlZ2F0ZUNvdW50ID0gMDtcblxuXHRcdFx0XHQvLyBPbmx5IHVzZSBhZGRFdmVudExpc3RlbmVyIGlmIHRoZSBzcGVjaWFsIGV2ZW50cyBoYW5kbGVyIHJldHVybnMgZmFsc2Vcblx0XHRcdFx0aWYgKCAhc3BlY2lhbC5zZXR1cCB8fFxuXHRcdFx0XHRcdHNwZWNpYWwuc2V0dXAuY2FsbCggZWxlbSwgZGF0YSwgbmFtZXNwYWNlcywgZXZlbnRIYW5kbGUgKSA9PT0gZmFsc2UgKSB7XG5cblx0XHRcdFx0XHRpZiAoIGVsZW0uYWRkRXZlbnRMaXN0ZW5lciApIHtcblx0XHRcdFx0XHRcdGVsZW0uYWRkRXZlbnRMaXN0ZW5lciggdHlwZSwgZXZlbnRIYW5kbGUgKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0aWYgKCBzcGVjaWFsLmFkZCApIHtcblx0XHRcdFx0c3BlY2lhbC5hZGQuY2FsbCggZWxlbSwgaGFuZGxlT2JqICk7XG5cblx0XHRcdFx0aWYgKCAhaGFuZGxlT2JqLmhhbmRsZXIuZ3VpZCApIHtcblx0XHRcdFx0XHRoYW5kbGVPYmouaGFuZGxlci5ndWlkID0gaGFuZGxlci5ndWlkO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdC8vIEFkZCB0byB0aGUgZWxlbWVudCdzIGhhbmRsZXIgbGlzdCwgZGVsZWdhdGVzIGluIGZyb250XG5cdFx0XHRpZiAoIHNlbGVjdG9yICkge1xuXHRcdFx0XHRoYW5kbGVycy5zcGxpY2UoIGhhbmRsZXJzLmRlbGVnYXRlQ291bnQrKywgMCwgaGFuZGxlT2JqICk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRoYW5kbGVycy5wdXNoKCBoYW5kbGVPYmogKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gS2VlcCB0cmFjayBvZiB3aGljaCBldmVudHMgaGF2ZSBldmVyIGJlZW4gdXNlZCwgZm9yIGV2ZW50IG9wdGltaXphdGlvblxuXHRcdFx0alF1ZXJ5LmV2ZW50Lmdsb2JhbFsgdHlwZSBdID0gdHJ1ZTtcblx0XHR9XG5cblx0fSxcblxuXHQvLyBEZXRhY2ggYW4gZXZlbnQgb3Igc2V0IG9mIGV2ZW50cyBmcm9tIGFuIGVsZW1lbnRcblx0cmVtb3ZlOiBmdW5jdGlvbiggZWxlbSwgdHlwZXMsIGhhbmRsZXIsIHNlbGVjdG9yLCBtYXBwZWRUeXBlcyApIHtcblxuXHRcdHZhciBqLCBvcmlnQ291bnQsIHRtcCxcblx0XHRcdGV2ZW50cywgdCwgaGFuZGxlT2JqLFxuXHRcdFx0c3BlY2lhbCwgaGFuZGxlcnMsIHR5cGUsIG5hbWVzcGFjZXMsIG9yaWdUeXBlLFxuXHRcdFx0ZWxlbURhdGEgPSBkYXRhUHJpdi5oYXNEYXRhKCBlbGVtICkgJiYgZGF0YVByaXYuZ2V0KCBlbGVtICk7XG5cblx0XHRpZiAoICFlbGVtRGF0YSB8fCAhKCBldmVudHMgPSBlbGVtRGF0YS5ldmVudHMgKSApIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHQvLyBPbmNlIGZvciBlYWNoIHR5cGUubmFtZXNwYWNlIGluIHR5cGVzOyB0eXBlIG1heSBiZSBvbWl0dGVkXG5cdFx0dHlwZXMgPSAoIHR5cGVzIHx8IFwiXCIgKS5tYXRjaCggcm5vdGh0bWx3aGl0ZSApIHx8IFsgXCJcIiBdO1xuXHRcdHQgPSB0eXBlcy5sZW5ndGg7XG5cdFx0d2hpbGUgKCB0LS0gKSB7XG5cdFx0XHR0bXAgPSBydHlwZW5hbWVzcGFjZS5leGVjKCB0eXBlc1sgdCBdICkgfHwgW107XG5cdFx0XHR0eXBlID0gb3JpZ1R5cGUgPSB0bXBbIDEgXTtcblx0XHRcdG5hbWVzcGFjZXMgPSAoIHRtcFsgMiBdIHx8IFwiXCIgKS5zcGxpdCggXCIuXCIgKS5zb3J0KCk7XG5cblx0XHRcdC8vIFVuYmluZCBhbGwgZXZlbnRzIChvbiB0aGlzIG5hbWVzcGFjZSwgaWYgcHJvdmlkZWQpIGZvciB0aGUgZWxlbWVudFxuXHRcdFx0aWYgKCAhdHlwZSApIHtcblx0XHRcdFx0Zm9yICggdHlwZSBpbiBldmVudHMgKSB7XG5cdFx0XHRcdFx0alF1ZXJ5LmV2ZW50LnJlbW92ZSggZWxlbSwgdHlwZSArIHR5cGVzWyB0IF0sIGhhbmRsZXIsIHNlbGVjdG9yLCB0cnVlICk7XG5cdFx0XHRcdH1cblx0XHRcdFx0Y29udGludWU7XG5cdFx0XHR9XG5cblx0XHRcdHNwZWNpYWwgPSBqUXVlcnkuZXZlbnQuc3BlY2lhbFsgdHlwZSBdIHx8IHt9O1xuXHRcdFx0dHlwZSA9ICggc2VsZWN0b3IgPyBzcGVjaWFsLmRlbGVnYXRlVHlwZSA6IHNwZWNpYWwuYmluZFR5cGUgKSB8fCB0eXBlO1xuXHRcdFx0aGFuZGxlcnMgPSBldmVudHNbIHR5cGUgXSB8fCBbXTtcblx0XHRcdHRtcCA9IHRtcFsgMiBdICYmXG5cdFx0XHRcdG5ldyBSZWdFeHAoIFwiKF58XFxcXC4pXCIgKyBuYW1lc3BhY2VzLmpvaW4oIFwiXFxcXC4oPzouKlxcXFwufClcIiApICsgXCIoXFxcXC58JClcIiApO1xuXG5cdFx0XHQvLyBSZW1vdmUgbWF0Y2hpbmcgZXZlbnRzXG5cdFx0XHRvcmlnQ291bnQgPSBqID0gaGFuZGxlcnMubGVuZ3RoO1xuXHRcdFx0d2hpbGUgKCBqLS0gKSB7XG5cdFx0XHRcdGhhbmRsZU9iaiA9IGhhbmRsZXJzWyBqIF07XG5cblx0XHRcdFx0aWYgKCAoIG1hcHBlZFR5cGVzIHx8IG9yaWdUeXBlID09PSBoYW5kbGVPYmoub3JpZ1R5cGUgKSAmJlxuXHRcdFx0XHRcdCggIWhhbmRsZXIgfHwgaGFuZGxlci5ndWlkID09PSBoYW5kbGVPYmouZ3VpZCApICYmXG5cdFx0XHRcdFx0KCAhdG1wIHx8IHRtcC50ZXN0KCBoYW5kbGVPYmoubmFtZXNwYWNlICkgKSAmJlxuXHRcdFx0XHRcdCggIXNlbGVjdG9yIHx8IHNlbGVjdG9yID09PSBoYW5kbGVPYmouc2VsZWN0b3IgfHxcblx0XHRcdFx0XHRcdHNlbGVjdG9yID09PSBcIioqXCIgJiYgaGFuZGxlT2JqLnNlbGVjdG9yICkgKSB7XG5cdFx0XHRcdFx0aGFuZGxlcnMuc3BsaWNlKCBqLCAxICk7XG5cblx0XHRcdFx0XHRpZiAoIGhhbmRsZU9iai5zZWxlY3RvciApIHtcblx0XHRcdFx0XHRcdGhhbmRsZXJzLmRlbGVnYXRlQ291bnQtLTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0aWYgKCBzcGVjaWFsLnJlbW92ZSApIHtcblx0XHRcdFx0XHRcdHNwZWNpYWwucmVtb3ZlLmNhbGwoIGVsZW0sIGhhbmRsZU9iaiApO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHQvLyBSZW1vdmUgZ2VuZXJpYyBldmVudCBoYW5kbGVyIGlmIHdlIHJlbW92ZWQgc29tZXRoaW5nIGFuZCBubyBtb3JlIGhhbmRsZXJzIGV4aXN0XG5cdFx0XHQvLyAoYXZvaWRzIHBvdGVudGlhbCBmb3IgZW5kbGVzcyByZWN1cnNpb24gZHVyaW5nIHJlbW92YWwgb2Ygc3BlY2lhbCBldmVudCBoYW5kbGVycylcblx0XHRcdGlmICggb3JpZ0NvdW50ICYmICFoYW5kbGVycy5sZW5ndGggKSB7XG5cdFx0XHRcdGlmICggIXNwZWNpYWwudGVhcmRvd24gfHxcblx0XHRcdFx0XHRzcGVjaWFsLnRlYXJkb3duLmNhbGwoIGVsZW0sIG5hbWVzcGFjZXMsIGVsZW1EYXRhLmhhbmRsZSApID09PSBmYWxzZSApIHtcblxuXHRcdFx0XHRcdGpRdWVyeS5yZW1vdmVFdmVudCggZWxlbSwgdHlwZSwgZWxlbURhdGEuaGFuZGxlICk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRkZWxldGUgZXZlbnRzWyB0eXBlIF07XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Ly8gUmVtb3ZlIGRhdGEgYW5kIHRoZSBleHBhbmRvIGlmIGl0J3Mgbm8gbG9uZ2VyIHVzZWRcblx0XHRpZiAoIGpRdWVyeS5pc0VtcHR5T2JqZWN0KCBldmVudHMgKSApIHtcblx0XHRcdGRhdGFQcml2LnJlbW92ZSggZWxlbSwgXCJoYW5kbGUgZXZlbnRzXCIgKTtcblx0XHR9XG5cdH0sXG5cblx0ZGlzcGF0Y2g6IGZ1bmN0aW9uKCBuYXRpdmVFdmVudCApIHtcblxuXHRcdC8vIE1ha2UgYSB3cml0YWJsZSBqUXVlcnkuRXZlbnQgZnJvbSB0aGUgbmF0aXZlIGV2ZW50IG9iamVjdFxuXHRcdHZhciBldmVudCA9IGpRdWVyeS5ldmVudC5maXgoIG5hdGl2ZUV2ZW50ICk7XG5cblx0XHR2YXIgaSwgaiwgcmV0LCBtYXRjaGVkLCBoYW5kbGVPYmosIGhhbmRsZXJRdWV1ZSxcblx0XHRcdGFyZ3MgPSBuZXcgQXJyYXkoIGFyZ3VtZW50cy5sZW5ndGggKSxcblx0XHRcdGhhbmRsZXJzID0gKCBkYXRhUHJpdi5nZXQoIHRoaXMsIFwiZXZlbnRzXCIgKSB8fCB7fSApWyBldmVudC50eXBlIF0gfHwgW10sXG5cdFx0XHRzcGVjaWFsID0galF1ZXJ5LmV2ZW50LnNwZWNpYWxbIGV2ZW50LnR5cGUgXSB8fCB7fTtcblxuXHRcdC8vIFVzZSB0aGUgZml4LWVkIGpRdWVyeS5FdmVudCByYXRoZXIgdGhhbiB0aGUgKHJlYWQtb25seSkgbmF0aXZlIGV2ZW50XG5cdFx0YXJnc1sgMCBdID0gZXZlbnQ7XG5cblx0XHRmb3IgKCBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKyApIHtcblx0XHRcdGFyZ3NbIGkgXSA9IGFyZ3VtZW50c1sgaSBdO1xuXHRcdH1cblxuXHRcdGV2ZW50LmRlbGVnYXRlVGFyZ2V0ID0gdGhpcztcblxuXHRcdC8vIENhbGwgdGhlIHByZURpc3BhdGNoIGhvb2sgZm9yIHRoZSBtYXBwZWQgdHlwZSwgYW5kIGxldCBpdCBiYWlsIGlmIGRlc2lyZWRcblx0XHRpZiAoIHNwZWNpYWwucHJlRGlzcGF0Y2ggJiYgc3BlY2lhbC5wcmVEaXNwYXRjaC5jYWxsKCB0aGlzLCBldmVudCApID09PSBmYWxzZSApIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHQvLyBEZXRlcm1pbmUgaGFuZGxlcnNcblx0XHRoYW5kbGVyUXVldWUgPSBqUXVlcnkuZXZlbnQuaGFuZGxlcnMuY2FsbCggdGhpcywgZXZlbnQsIGhhbmRsZXJzICk7XG5cblx0XHQvLyBSdW4gZGVsZWdhdGVzIGZpcnN0OyB0aGV5IG1heSB3YW50IHRvIHN0b3AgcHJvcGFnYXRpb24gYmVuZWF0aCB1c1xuXHRcdGkgPSAwO1xuXHRcdHdoaWxlICggKCBtYXRjaGVkID0gaGFuZGxlclF1ZXVlWyBpKysgXSApICYmICFldmVudC5pc1Byb3BhZ2F0aW9uU3RvcHBlZCgpICkge1xuXHRcdFx0ZXZlbnQuY3VycmVudFRhcmdldCA9IG1hdGNoZWQuZWxlbTtcblxuXHRcdFx0aiA9IDA7XG5cdFx0XHR3aGlsZSAoICggaGFuZGxlT2JqID0gbWF0Y2hlZC5oYW5kbGVyc1sgaisrIF0gKSAmJlxuXHRcdFx0XHQhZXZlbnQuaXNJbW1lZGlhdGVQcm9wYWdhdGlvblN0b3BwZWQoKSApIHtcblxuXHRcdFx0XHQvLyBUcmlnZ2VyZWQgZXZlbnQgbXVzdCBlaXRoZXIgMSkgaGF2ZSBubyBuYW1lc3BhY2UsIG9yIDIpIGhhdmUgbmFtZXNwYWNlKHMpXG5cdFx0XHRcdC8vIGEgc3Vic2V0IG9yIGVxdWFsIHRvIHRob3NlIGluIHRoZSBib3VuZCBldmVudCAoYm90aCBjYW4gaGF2ZSBubyBuYW1lc3BhY2UpLlxuXHRcdFx0XHRpZiAoICFldmVudC5ybmFtZXNwYWNlIHx8IGV2ZW50LnJuYW1lc3BhY2UudGVzdCggaGFuZGxlT2JqLm5hbWVzcGFjZSApICkge1xuXG5cdFx0XHRcdFx0ZXZlbnQuaGFuZGxlT2JqID0gaGFuZGxlT2JqO1xuXHRcdFx0XHRcdGV2ZW50LmRhdGEgPSBoYW5kbGVPYmouZGF0YTtcblxuXHRcdFx0XHRcdHJldCA9ICggKCBqUXVlcnkuZXZlbnQuc3BlY2lhbFsgaGFuZGxlT2JqLm9yaWdUeXBlIF0gfHwge30gKS5oYW5kbGUgfHxcblx0XHRcdFx0XHRcdGhhbmRsZU9iai5oYW5kbGVyICkuYXBwbHkoIG1hdGNoZWQuZWxlbSwgYXJncyApO1xuXG5cdFx0XHRcdFx0aWYgKCByZXQgIT09IHVuZGVmaW5lZCApIHtcblx0XHRcdFx0XHRcdGlmICggKCBldmVudC5yZXN1bHQgPSByZXQgKSA9PT0gZmFsc2UgKSB7XG5cdFx0XHRcdFx0XHRcdGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG5cdFx0XHRcdFx0XHRcdGV2ZW50LnN0b3BQcm9wYWdhdGlvbigpO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblxuXHRcdC8vIENhbGwgdGhlIHBvc3REaXNwYXRjaCBob29rIGZvciB0aGUgbWFwcGVkIHR5cGVcblx0XHRpZiAoIHNwZWNpYWwucG9zdERpc3BhdGNoICkge1xuXHRcdFx0c3BlY2lhbC5wb3N0RGlzcGF0Y2guY2FsbCggdGhpcywgZXZlbnQgKTtcblx0XHR9XG5cblx0XHRyZXR1cm4gZXZlbnQucmVzdWx0O1xuXHR9LFxuXG5cdGhhbmRsZXJzOiBmdW5jdGlvbiggZXZlbnQsIGhhbmRsZXJzICkge1xuXHRcdHZhciBpLCBoYW5kbGVPYmosIHNlbCwgbWF0Y2hlZEhhbmRsZXJzLCBtYXRjaGVkU2VsZWN0b3JzLFxuXHRcdFx0aGFuZGxlclF1ZXVlID0gW10sXG5cdFx0XHRkZWxlZ2F0ZUNvdW50ID0gaGFuZGxlcnMuZGVsZWdhdGVDb3VudCxcblx0XHRcdGN1ciA9IGV2ZW50LnRhcmdldDtcblxuXHRcdC8vIEZpbmQgZGVsZWdhdGUgaGFuZGxlcnNcblx0XHRpZiAoIGRlbGVnYXRlQ291bnQgJiZcblxuXHRcdFx0Ly8gU3VwcG9ydDogSUUgPD05XG5cdFx0XHQvLyBCbGFjay1ob2xlIFNWRyA8dXNlPiBpbnN0YW5jZSB0cmVlcyAodHJhYy0xMzE4MClcblx0XHRcdGN1ci5ub2RlVHlwZSAmJlxuXG5cdFx0XHQvLyBTdXBwb3J0OiBGaXJlZm94IDw9NDJcblx0XHRcdC8vIFN1cHByZXNzIHNwZWMtdmlvbGF0aW5nIGNsaWNrcyBpbmRpY2F0aW5nIGEgbm9uLXByaW1hcnkgcG9pbnRlciBidXR0b24gKHRyYWMtMzg2MSlcblx0XHRcdC8vIGh0dHBzOi8vd3d3LnczLm9yZy9UUi9ET00tTGV2ZWwtMy1FdmVudHMvI2V2ZW50LXR5cGUtY2xpY2tcblx0XHRcdC8vIFN1cHBvcnQ6IElFIDExIG9ubHlcblx0XHRcdC8vIC4uLmJ1dCBub3QgYXJyb3cga2V5IFwiY2xpY2tzXCIgb2YgcmFkaW8gaW5wdXRzLCB3aGljaCBjYW4gaGF2ZSBgYnV0dG9uYCAtMSAoZ2gtMjM0Mylcblx0XHRcdCEoIGV2ZW50LnR5cGUgPT09IFwiY2xpY2tcIiAmJiBldmVudC5idXR0b24gPj0gMSApICkge1xuXG5cdFx0XHRmb3IgKCA7IGN1ciAhPT0gdGhpczsgY3VyID0gY3VyLnBhcmVudE5vZGUgfHwgdGhpcyApIHtcblxuXHRcdFx0XHQvLyBEb24ndCBjaGVjayBub24tZWxlbWVudHMgKCMxMzIwOClcblx0XHRcdFx0Ly8gRG9uJ3QgcHJvY2VzcyBjbGlja3Mgb24gZGlzYWJsZWQgZWxlbWVudHMgKCM2OTExLCAjODE2NSwgIzExMzgyLCAjMTE3NjQpXG5cdFx0XHRcdGlmICggY3VyLm5vZGVUeXBlID09PSAxICYmICEoIGV2ZW50LnR5cGUgPT09IFwiY2xpY2tcIiAmJiBjdXIuZGlzYWJsZWQgPT09IHRydWUgKSApIHtcblx0XHRcdFx0XHRtYXRjaGVkSGFuZGxlcnMgPSBbXTtcblx0XHRcdFx0XHRtYXRjaGVkU2VsZWN0b3JzID0ge307XG5cdFx0XHRcdFx0Zm9yICggaSA9IDA7IGkgPCBkZWxlZ2F0ZUNvdW50OyBpKysgKSB7XG5cdFx0XHRcdFx0XHRoYW5kbGVPYmogPSBoYW5kbGVyc1sgaSBdO1xuXG5cdFx0XHRcdFx0XHQvLyBEb24ndCBjb25mbGljdCB3aXRoIE9iamVjdC5wcm90b3R5cGUgcHJvcGVydGllcyAoIzEzMjAzKVxuXHRcdFx0XHRcdFx0c2VsID0gaGFuZGxlT2JqLnNlbGVjdG9yICsgXCIgXCI7XG5cblx0XHRcdFx0XHRcdGlmICggbWF0Y2hlZFNlbGVjdG9yc1sgc2VsIF0gPT09IHVuZGVmaW5lZCApIHtcblx0XHRcdFx0XHRcdFx0bWF0Y2hlZFNlbGVjdG9yc1sgc2VsIF0gPSBoYW5kbGVPYmoubmVlZHNDb250ZXh0ID9cblx0XHRcdFx0XHRcdFx0XHRqUXVlcnkoIHNlbCwgdGhpcyApLmluZGV4KCBjdXIgKSA+IC0xIDpcblx0XHRcdFx0XHRcdFx0XHRqUXVlcnkuZmluZCggc2VsLCB0aGlzLCBudWxsLCBbIGN1ciBdICkubGVuZ3RoO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0aWYgKCBtYXRjaGVkU2VsZWN0b3JzWyBzZWwgXSApIHtcblx0XHRcdFx0XHRcdFx0bWF0Y2hlZEhhbmRsZXJzLnB1c2goIGhhbmRsZU9iaiApO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRpZiAoIG1hdGNoZWRIYW5kbGVycy5sZW5ndGggKSB7XG5cdFx0XHRcdFx0XHRoYW5kbGVyUXVldWUucHVzaCggeyBlbGVtOiBjdXIsIGhhbmRsZXJzOiBtYXRjaGVkSGFuZGxlcnMgfSApO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblxuXHRcdC8vIEFkZCB0aGUgcmVtYWluaW5nIChkaXJlY3RseS1ib3VuZCkgaGFuZGxlcnNcblx0XHRjdXIgPSB0aGlzO1xuXHRcdGlmICggZGVsZWdhdGVDb3VudCA8IGhhbmRsZXJzLmxlbmd0aCApIHtcblx0XHRcdGhhbmRsZXJRdWV1ZS5wdXNoKCB7IGVsZW06IGN1ciwgaGFuZGxlcnM6IGhhbmRsZXJzLnNsaWNlKCBkZWxlZ2F0ZUNvdW50ICkgfSApO1xuXHRcdH1cblxuXHRcdHJldHVybiBoYW5kbGVyUXVldWU7XG5cdH0sXG5cblx0YWRkUHJvcDogZnVuY3Rpb24oIG5hbWUsIGhvb2sgKSB7XG5cdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KCBqUXVlcnkuRXZlbnQucHJvdG90eXBlLCBuYW1lLCB7XG5cdFx0XHRlbnVtZXJhYmxlOiB0cnVlLFxuXHRcdFx0Y29uZmlndXJhYmxlOiB0cnVlLFxuXG5cdFx0XHRnZXQ6IGlzRnVuY3Rpb24oIGhvb2sgKSA/XG5cdFx0XHRcdGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdGlmICggdGhpcy5vcmlnaW5hbEV2ZW50ICkge1xuXHRcdFx0XHRcdFx0XHRyZXR1cm4gaG9vayggdGhpcy5vcmlnaW5hbEV2ZW50ICk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9IDpcblx0XHRcdFx0ZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0aWYgKCB0aGlzLm9yaWdpbmFsRXZlbnQgKSB7XG5cdFx0XHRcdFx0XHRcdHJldHVybiB0aGlzLm9yaWdpbmFsRXZlbnRbIG5hbWUgXTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH0sXG5cblx0XHRcdHNldDogZnVuY3Rpb24oIHZhbHVlICkge1xuXHRcdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoIHRoaXMsIG5hbWUsIHtcblx0XHRcdFx0XHRlbnVtZXJhYmxlOiB0cnVlLFxuXHRcdFx0XHRcdGNvbmZpZ3VyYWJsZTogdHJ1ZSxcblx0XHRcdFx0XHR3cml0YWJsZTogdHJ1ZSxcblx0XHRcdFx0XHR2YWx1ZTogdmFsdWVcblx0XHRcdFx0fSApO1xuXHRcdFx0fVxuXHRcdH0gKTtcblx0fSxcblxuXHRmaXg6IGZ1bmN0aW9uKCBvcmlnaW5hbEV2ZW50ICkge1xuXHRcdHJldHVybiBvcmlnaW5hbEV2ZW50WyBqUXVlcnkuZXhwYW5kbyBdID9cblx0XHRcdG9yaWdpbmFsRXZlbnQgOlxuXHRcdFx0bmV3IGpRdWVyeS5FdmVudCggb3JpZ2luYWxFdmVudCApO1xuXHR9LFxuXG5cdHNwZWNpYWw6IHtcblx0XHRsb2FkOiB7XG5cblx0XHRcdC8vIFByZXZlbnQgdHJpZ2dlcmVkIGltYWdlLmxvYWQgZXZlbnRzIGZyb20gYnViYmxpbmcgdG8gd2luZG93LmxvYWRcblx0XHRcdG5vQnViYmxlOiB0cnVlXG5cdFx0fSxcblx0XHRmb2N1czoge1xuXG5cdFx0XHQvLyBGaXJlIG5hdGl2ZSBldmVudCBpZiBwb3NzaWJsZSBzbyBibHVyL2ZvY3VzIHNlcXVlbmNlIGlzIGNvcnJlY3Rcblx0XHRcdHRyaWdnZXI6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRpZiAoIHRoaXMgIT09IHNhZmVBY3RpdmVFbGVtZW50KCkgJiYgdGhpcy5mb2N1cyApIHtcblx0XHRcdFx0XHR0aGlzLmZvY3VzKCk7XG5cdFx0XHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdFx0XHR9XG5cdFx0XHR9LFxuXHRcdFx0ZGVsZWdhdGVUeXBlOiBcImZvY3VzaW5cIlxuXHRcdH0sXG5cdFx0Ymx1cjoge1xuXHRcdFx0dHJpZ2dlcjogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGlmICggdGhpcyA9PT0gc2FmZUFjdGl2ZUVsZW1lbnQoKSAmJiB0aGlzLmJsdXIgKSB7XG5cdFx0XHRcdFx0dGhpcy5ibHVyKCk7XG5cdFx0XHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdFx0XHR9XG5cdFx0XHR9LFxuXHRcdFx0ZGVsZWdhdGVUeXBlOiBcImZvY3Vzb3V0XCJcblx0XHR9LFxuXHRcdGNsaWNrOiB7XG5cblx0XHRcdC8vIEZvciBjaGVja2JveCwgZmlyZSBuYXRpdmUgZXZlbnQgc28gY2hlY2tlZCBzdGF0ZSB3aWxsIGJlIHJpZ2h0XG5cdFx0XHR0cmlnZ2VyOiBmdW5jdGlvbigpIHtcblx0XHRcdFx0aWYgKCB0aGlzLnR5cGUgPT09IFwiY2hlY2tib3hcIiAmJiB0aGlzLmNsaWNrICYmIG5vZGVOYW1lKCB0aGlzLCBcImlucHV0XCIgKSApIHtcblx0XHRcdFx0XHR0aGlzLmNsaWNrKCk7XG5cdFx0XHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdFx0XHR9XG5cdFx0XHR9LFxuXG5cdFx0XHQvLyBGb3IgY3Jvc3MtYnJvd3NlciBjb25zaXN0ZW5jeSwgZG9uJ3QgZmlyZSBuYXRpdmUgLmNsaWNrKCkgb24gbGlua3Ncblx0XHRcdF9kZWZhdWx0OiBmdW5jdGlvbiggZXZlbnQgKSB7XG5cdFx0XHRcdHJldHVybiBub2RlTmFtZSggZXZlbnQudGFyZ2V0LCBcImFcIiApO1xuXHRcdFx0fVxuXHRcdH0sXG5cblx0XHRiZWZvcmV1bmxvYWQ6IHtcblx0XHRcdHBvc3REaXNwYXRjaDogZnVuY3Rpb24oIGV2ZW50ICkge1xuXG5cdFx0XHRcdC8vIFN1cHBvcnQ6IEZpcmVmb3ggMjArXG5cdFx0XHRcdC8vIEZpcmVmb3ggZG9lc24ndCBhbGVydCBpZiB0aGUgcmV0dXJuVmFsdWUgZmllbGQgaXMgbm90IHNldC5cblx0XHRcdFx0aWYgKCBldmVudC5yZXN1bHQgIT09IHVuZGVmaW5lZCAmJiBldmVudC5vcmlnaW5hbEV2ZW50ICkge1xuXHRcdFx0XHRcdGV2ZW50Lm9yaWdpbmFsRXZlbnQucmV0dXJuVmFsdWUgPSBldmVudC5yZXN1bHQ7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdH1cbn07XG5cbmpRdWVyeS5yZW1vdmVFdmVudCA9IGZ1bmN0aW9uKCBlbGVtLCB0eXBlLCBoYW5kbGUgKSB7XG5cblx0Ly8gVGhpcyBcImlmXCIgaXMgbmVlZGVkIGZvciBwbGFpbiBvYmplY3RzXG5cdGlmICggZWxlbS5yZW1vdmVFdmVudExpc3RlbmVyICkge1xuXHRcdGVsZW0ucmVtb3ZlRXZlbnRMaXN0ZW5lciggdHlwZSwgaGFuZGxlICk7XG5cdH1cbn07XG5cbmpRdWVyeS5FdmVudCA9IGZ1bmN0aW9uKCBzcmMsIHByb3BzICkge1xuXG5cdC8vIEFsbG93IGluc3RhbnRpYXRpb24gd2l0aG91dCB0aGUgJ25ldycga2V5d29yZFxuXHRpZiAoICEoIHRoaXMgaW5zdGFuY2VvZiBqUXVlcnkuRXZlbnQgKSApIHtcblx0XHRyZXR1cm4gbmV3IGpRdWVyeS5FdmVudCggc3JjLCBwcm9wcyApO1xuXHR9XG5cblx0Ly8gRXZlbnQgb2JqZWN0XG5cdGlmICggc3JjICYmIHNyYy50eXBlICkge1xuXHRcdHRoaXMub3JpZ2luYWxFdmVudCA9IHNyYztcblx0XHR0aGlzLnR5cGUgPSBzcmMudHlwZTtcblxuXHRcdC8vIEV2ZW50cyBidWJibGluZyB1cCB0aGUgZG9jdW1lbnQgbWF5IGhhdmUgYmVlbiBtYXJrZWQgYXMgcHJldmVudGVkXG5cdFx0Ly8gYnkgYSBoYW5kbGVyIGxvd2VyIGRvd24gdGhlIHRyZWU7IHJlZmxlY3QgdGhlIGNvcnJlY3QgdmFsdWUuXG5cdFx0dGhpcy5pc0RlZmF1bHRQcmV2ZW50ZWQgPSBzcmMuZGVmYXVsdFByZXZlbnRlZCB8fFxuXHRcdFx0XHRzcmMuZGVmYXVsdFByZXZlbnRlZCA9PT0gdW5kZWZpbmVkICYmXG5cblx0XHRcdFx0Ly8gU3VwcG9ydDogQW5kcm9pZCA8PTIuMyBvbmx5XG5cdFx0XHRcdHNyYy5yZXR1cm5WYWx1ZSA9PT0gZmFsc2UgP1xuXHRcdFx0cmV0dXJuVHJ1ZSA6XG5cdFx0XHRyZXR1cm5GYWxzZTtcblxuXHRcdC8vIENyZWF0ZSB0YXJnZXQgcHJvcGVydGllc1xuXHRcdC8vIFN1cHBvcnQ6IFNhZmFyaSA8PTYgLSA3IG9ubHlcblx0XHQvLyBUYXJnZXQgc2hvdWxkIG5vdCBiZSBhIHRleHQgbm9kZSAoIzUwNCwgIzEzMTQzKVxuXHRcdHRoaXMudGFyZ2V0ID0gKCBzcmMudGFyZ2V0ICYmIHNyYy50YXJnZXQubm9kZVR5cGUgPT09IDMgKSA/XG5cdFx0XHRzcmMudGFyZ2V0LnBhcmVudE5vZGUgOlxuXHRcdFx0c3JjLnRhcmdldDtcblxuXHRcdHRoaXMuY3VycmVudFRhcmdldCA9IHNyYy5jdXJyZW50VGFyZ2V0O1xuXHRcdHRoaXMucmVsYXRlZFRhcmdldCA9IHNyYy5yZWxhdGVkVGFyZ2V0O1xuXG5cdC8vIEV2ZW50IHR5cGVcblx0fSBlbHNlIHtcblx0XHR0aGlzLnR5cGUgPSBzcmM7XG5cdH1cblxuXHQvLyBQdXQgZXhwbGljaXRseSBwcm92aWRlZCBwcm9wZXJ0aWVzIG9udG8gdGhlIGV2ZW50IG9iamVjdFxuXHRpZiAoIHByb3BzICkge1xuXHRcdGpRdWVyeS5leHRlbmQoIHRoaXMsIHByb3BzICk7XG5cdH1cblxuXHQvLyBDcmVhdGUgYSB0aW1lc3RhbXAgaWYgaW5jb21pbmcgZXZlbnQgZG9lc24ndCBoYXZlIG9uZVxuXHR0aGlzLnRpbWVTdGFtcCA9IHNyYyAmJiBzcmMudGltZVN0YW1wIHx8IERhdGUubm93KCk7XG5cblx0Ly8gTWFyayBpdCBhcyBmaXhlZFxuXHR0aGlzWyBqUXVlcnkuZXhwYW5kbyBdID0gdHJ1ZTtcbn07XG5cbi8vIGpRdWVyeS5FdmVudCBpcyBiYXNlZCBvbiBET00zIEV2ZW50cyBhcyBzcGVjaWZpZWQgYnkgdGhlIEVDTUFTY3JpcHQgTGFuZ3VhZ2UgQmluZGluZ1xuLy8gaHR0cHM6Ly93d3cudzMub3JnL1RSLzIwMDMvV0QtRE9NLUxldmVsLTMtRXZlbnRzLTIwMDMwMzMxL2VjbWEtc2NyaXB0LWJpbmRpbmcuaHRtbFxualF1ZXJ5LkV2ZW50LnByb3RvdHlwZSA9IHtcblx0Y29uc3RydWN0b3I6IGpRdWVyeS5FdmVudCxcblx0aXNEZWZhdWx0UHJldmVudGVkOiByZXR1cm5GYWxzZSxcblx0aXNQcm9wYWdhdGlvblN0b3BwZWQ6IHJldHVybkZhbHNlLFxuXHRpc0ltbWVkaWF0ZVByb3BhZ2F0aW9uU3RvcHBlZDogcmV0dXJuRmFsc2UsXG5cdGlzU2ltdWxhdGVkOiBmYWxzZSxcblxuXHRwcmV2ZW50RGVmYXVsdDogZnVuY3Rpb24oKSB7XG5cdFx0dmFyIGUgPSB0aGlzLm9yaWdpbmFsRXZlbnQ7XG5cblx0XHR0aGlzLmlzRGVmYXVsdFByZXZlbnRlZCA9IHJldHVyblRydWU7XG5cblx0XHRpZiAoIGUgJiYgIXRoaXMuaXNTaW11bGF0ZWQgKSB7XG5cdFx0XHRlLnByZXZlbnREZWZhdWx0KCk7XG5cdFx0fVxuXHR9LFxuXHRzdG9wUHJvcGFnYXRpb246IGZ1bmN0aW9uKCkge1xuXHRcdHZhciBlID0gdGhpcy5vcmlnaW5hbEV2ZW50O1xuXG5cdFx0dGhpcy5pc1Byb3BhZ2F0aW9uU3RvcHBlZCA9IHJldHVyblRydWU7XG5cblx0XHRpZiAoIGUgJiYgIXRoaXMuaXNTaW11bGF0ZWQgKSB7XG5cdFx0XHRlLnN0b3BQcm9wYWdhdGlvbigpO1xuXHRcdH1cblx0fSxcblx0c3RvcEltbWVkaWF0ZVByb3BhZ2F0aW9uOiBmdW5jdGlvbigpIHtcblx0XHR2YXIgZSA9IHRoaXMub3JpZ2luYWxFdmVudDtcblxuXHRcdHRoaXMuaXNJbW1lZGlhdGVQcm9wYWdhdGlvblN0b3BwZWQgPSByZXR1cm5UcnVlO1xuXG5cdFx0aWYgKCBlICYmICF0aGlzLmlzU2ltdWxhdGVkICkge1xuXHRcdFx0ZS5zdG9wSW1tZWRpYXRlUHJvcGFnYXRpb24oKTtcblx0XHR9XG5cblx0XHR0aGlzLnN0b3BQcm9wYWdhdGlvbigpO1xuXHR9XG59O1xuXG4vLyBJbmNsdWRlcyBhbGwgY29tbW9uIGV2ZW50IHByb3BzIGluY2x1ZGluZyBLZXlFdmVudCBhbmQgTW91c2VFdmVudCBzcGVjaWZpYyBwcm9wc1xualF1ZXJ5LmVhY2goIHtcblx0YWx0S2V5OiB0cnVlLFxuXHRidWJibGVzOiB0cnVlLFxuXHRjYW5jZWxhYmxlOiB0cnVlLFxuXHRjaGFuZ2VkVG91Y2hlczogdHJ1ZSxcblx0Y3RybEtleTogdHJ1ZSxcblx0ZGV0YWlsOiB0cnVlLFxuXHRldmVudFBoYXNlOiB0cnVlLFxuXHRtZXRhS2V5OiB0cnVlLFxuXHRwYWdlWDogdHJ1ZSxcblx0cGFnZVk6IHRydWUsXG5cdHNoaWZ0S2V5OiB0cnVlLFxuXHR2aWV3OiB0cnVlLFxuXHRcImNoYXJcIjogdHJ1ZSxcblx0Y2hhckNvZGU6IHRydWUsXG5cdGtleTogdHJ1ZSxcblx0a2V5Q29kZTogdHJ1ZSxcblx0YnV0dG9uOiB0cnVlLFxuXHRidXR0b25zOiB0cnVlLFxuXHRjbGllbnRYOiB0cnVlLFxuXHRjbGllbnRZOiB0cnVlLFxuXHRvZmZzZXRYOiB0cnVlLFxuXHRvZmZzZXRZOiB0cnVlLFxuXHRwb2ludGVySWQ6IHRydWUsXG5cdHBvaW50ZXJUeXBlOiB0cnVlLFxuXHRzY3JlZW5YOiB0cnVlLFxuXHRzY3JlZW5ZOiB0cnVlLFxuXHR0YXJnZXRUb3VjaGVzOiB0cnVlLFxuXHR0b0VsZW1lbnQ6IHRydWUsXG5cdHRvdWNoZXM6IHRydWUsXG5cblx0d2hpY2g6IGZ1bmN0aW9uKCBldmVudCApIHtcblx0XHR2YXIgYnV0dG9uID0gZXZlbnQuYnV0dG9uO1xuXG5cdFx0Ly8gQWRkIHdoaWNoIGZvciBrZXkgZXZlbnRzXG5cdFx0aWYgKCBldmVudC53aGljaCA9PSBudWxsICYmIHJrZXlFdmVudC50ZXN0KCBldmVudC50eXBlICkgKSB7XG5cdFx0XHRyZXR1cm4gZXZlbnQuY2hhckNvZGUgIT0gbnVsbCA/IGV2ZW50LmNoYXJDb2RlIDogZXZlbnQua2V5Q29kZTtcblx0XHR9XG5cblx0XHQvLyBBZGQgd2hpY2ggZm9yIGNsaWNrOiAxID09PSBsZWZ0OyAyID09PSBtaWRkbGU7IDMgPT09IHJpZ2h0XG5cdFx0aWYgKCAhZXZlbnQud2hpY2ggJiYgYnV0dG9uICE9PSB1bmRlZmluZWQgJiYgcm1vdXNlRXZlbnQudGVzdCggZXZlbnQudHlwZSApICkge1xuXHRcdFx0aWYgKCBidXR0b24gJiAxICkge1xuXHRcdFx0XHRyZXR1cm4gMTtcblx0XHRcdH1cblxuXHRcdFx0aWYgKCBidXR0b24gJiAyICkge1xuXHRcdFx0XHRyZXR1cm4gMztcblx0XHRcdH1cblxuXHRcdFx0aWYgKCBidXR0b24gJiA0ICkge1xuXHRcdFx0XHRyZXR1cm4gMjtcblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIDA7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIGV2ZW50LndoaWNoO1xuXHR9XG59LCBqUXVlcnkuZXZlbnQuYWRkUHJvcCApO1xuXG4vLyBDcmVhdGUgbW91c2VlbnRlci9sZWF2ZSBldmVudHMgdXNpbmcgbW91c2VvdmVyL291dCBhbmQgZXZlbnQtdGltZSBjaGVja3Ncbi8vIHNvIHRoYXQgZXZlbnQgZGVsZWdhdGlvbiB3b3JrcyBpbiBqUXVlcnkuXG4vLyBEbyB0aGUgc2FtZSBmb3IgcG9pbnRlcmVudGVyL3BvaW50ZXJsZWF2ZSBhbmQgcG9pbnRlcm92ZXIvcG9pbnRlcm91dFxuLy9cbi8vIFN1cHBvcnQ6IFNhZmFyaSA3IG9ubHlcbi8vIFNhZmFyaSBzZW5kcyBtb3VzZWVudGVyIHRvbyBvZnRlbjsgc2VlOlxuLy8gaHR0cHM6Ly9idWdzLmNocm9taXVtLm9yZy9wL2Nocm9taXVtL2lzc3Vlcy9kZXRhaWw/aWQ9NDcwMjU4XG4vLyBmb3IgdGhlIGRlc2NyaXB0aW9uIG9mIHRoZSBidWcgKGl0IGV4aXN0ZWQgaW4gb2xkZXIgQ2hyb21lIHZlcnNpb25zIGFzIHdlbGwpLlxualF1ZXJ5LmVhY2goIHtcblx0bW91c2VlbnRlcjogXCJtb3VzZW92ZXJcIixcblx0bW91c2VsZWF2ZTogXCJtb3VzZW91dFwiLFxuXHRwb2ludGVyZW50ZXI6IFwicG9pbnRlcm92ZXJcIixcblx0cG9pbnRlcmxlYXZlOiBcInBvaW50ZXJvdXRcIlxufSwgZnVuY3Rpb24oIG9yaWcsIGZpeCApIHtcblx0alF1ZXJ5LmV2ZW50LnNwZWNpYWxbIG9yaWcgXSA9IHtcblx0XHRkZWxlZ2F0ZVR5cGU6IGZpeCxcblx0XHRiaW5kVHlwZTogZml4LFxuXG5cdFx0aGFuZGxlOiBmdW5jdGlvbiggZXZlbnQgKSB7XG5cdFx0XHR2YXIgcmV0LFxuXHRcdFx0XHR0YXJnZXQgPSB0aGlzLFxuXHRcdFx0XHRyZWxhdGVkID0gZXZlbnQucmVsYXRlZFRhcmdldCxcblx0XHRcdFx0aGFuZGxlT2JqID0gZXZlbnQuaGFuZGxlT2JqO1xuXG5cdFx0XHQvLyBGb3IgbW91c2VlbnRlci9sZWF2ZSBjYWxsIHRoZSBoYW5kbGVyIGlmIHJlbGF0ZWQgaXMgb3V0c2lkZSB0aGUgdGFyZ2V0LlxuXHRcdFx0Ly8gTkI6IE5vIHJlbGF0ZWRUYXJnZXQgaWYgdGhlIG1vdXNlIGxlZnQvZW50ZXJlZCB0aGUgYnJvd3NlciB3aW5kb3dcblx0XHRcdGlmICggIXJlbGF0ZWQgfHwgKCByZWxhdGVkICE9PSB0YXJnZXQgJiYgIWpRdWVyeS5jb250YWlucyggdGFyZ2V0LCByZWxhdGVkICkgKSApIHtcblx0XHRcdFx0ZXZlbnQudHlwZSA9IGhhbmRsZU9iai5vcmlnVHlwZTtcblx0XHRcdFx0cmV0ID0gaGFuZGxlT2JqLmhhbmRsZXIuYXBwbHkoIHRoaXMsIGFyZ3VtZW50cyApO1xuXHRcdFx0XHRldmVudC50eXBlID0gZml4O1xuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIHJldDtcblx0XHR9XG5cdH07XG59ICk7XG5cbmpRdWVyeS5mbi5leHRlbmQoIHtcblxuXHRvbjogZnVuY3Rpb24oIHR5cGVzLCBzZWxlY3RvciwgZGF0YSwgZm4gKSB7XG5cdFx0cmV0dXJuIG9uKCB0aGlzLCB0eXBlcywgc2VsZWN0b3IsIGRhdGEsIGZuICk7XG5cdH0sXG5cdG9uZTogZnVuY3Rpb24oIHR5cGVzLCBzZWxlY3RvciwgZGF0YSwgZm4gKSB7XG5cdFx0cmV0dXJuIG9uKCB0aGlzLCB0eXBlcywgc2VsZWN0b3IsIGRhdGEsIGZuLCAxICk7XG5cdH0sXG5cdG9mZjogZnVuY3Rpb24oIHR5cGVzLCBzZWxlY3RvciwgZm4gKSB7XG5cdFx0dmFyIGhhbmRsZU9iaiwgdHlwZTtcblx0XHRpZiAoIHR5cGVzICYmIHR5cGVzLnByZXZlbnREZWZhdWx0ICYmIHR5cGVzLmhhbmRsZU9iaiApIHtcblxuXHRcdFx0Ly8gKCBldmVudCApICBkaXNwYXRjaGVkIGpRdWVyeS5FdmVudFxuXHRcdFx0aGFuZGxlT2JqID0gdHlwZXMuaGFuZGxlT2JqO1xuXHRcdFx0alF1ZXJ5KCB0eXBlcy5kZWxlZ2F0ZVRhcmdldCApLm9mZihcblx0XHRcdFx0aGFuZGxlT2JqLm5hbWVzcGFjZSA/XG5cdFx0XHRcdFx0aGFuZGxlT2JqLm9yaWdUeXBlICsgXCIuXCIgKyBoYW5kbGVPYmoubmFtZXNwYWNlIDpcblx0XHRcdFx0XHRoYW5kbGVPYmoub3JpZ1R5cGUsXG5cdFx0XHRcdGhhbmRsZU9iai5zZWxlY3Rvcixcblx0XHRcdFx0aGFuZGxlT2JqLmhhbmRsZXJcblx0XHRcdCk7XG5cdFx0XHRyZXR1cm4gdGhpcztcblx0XHR9XG5cdFx0aWYgKCB0eXBlb2YgdHlwZXMgPT09IFwib2JqZWN0XCIgKSB7XG5cblx0XHRcdC8vICggdHlwZXMtb2JqZWN0IFssIHNlbGVjdG9yXSApXG5cdFx0XHRmb3IgKCB0eXBlIGluIHR5cGVzICkge1xuXHRcdFx0XHR0aGlzLm9mZiggdHlwZSwgc2VsZWN0b3IsIHR5cGVzWyB0eXBlIF0gKTtcblx0XHRcdH1cblx0XHRcdHJldHVybiB0aGlzO1xuXHRcdH1cblx0XHRpZiAoIHNlbGVjdG9yID09PSBmYWxzZSB8fCB0eXBlb2Ygc2VsZWN0b3IgPT09IFwiZnVuY3Rpb25cIiApIHtcblxuXHRcdFx0Ly8gKCB0eXBlcyBbLCBmbl0gKVxuXHRcdFx0Zm4gPSBzZWxlY3Rvcjtcblx0XHRcdHNlbGVjdG9yID0gdW5kZWZpbmVkO1xuXHRcdH1cblx0XHRpZiAoIGZuID09PSBmYWxzZSApIHtcblx0XHRcdGZuID0gcmV0dXJuRmFsc2U7XG5cdFx0fVxuXHRcdHJldHVybiB0aGlzLmVhY2goIGZ1bmN0aW9uKCkge1xuXHRcdFx0alF1ZXJ5LmV2ZW50LnJlbW92ZSggdGhpcywgdHlwZXMsIGZuLCBzZWxlY3RvciApO1xuXHRcdH0gKTtcblx0fVxufSApO1xuXG5cbnZhclxuXG5cdC8qIGVzbGludC1kaXNhYmxlIG1heC1sZW4gKi9cblxuXHQvLyBTZWUgaHR0cHM6Ly9naXRodWIuY29tL2VzbGludC9lc2xpbnQvaXNzdWVzLzMyMjlcblx0cnhodG1sVGFnID0gLzwoPyFhcmVhfGJyfGNvbHxlbWJlZHxocnxpbWd8aW5wdXR8bGlua3xtZXRhfHBhcmFtKSgoW2Etel1bXlxcL1xcMD5cXHgyMFxcdFxcclxcblxcZl0qKVtePl0qKVxcLz4vZ2ksXG5cblx0LyogZXNsaW50LWVuYWJsZSAqL1xuXG5cdC8vIFN1cHBvcnQ6IElFIDw9MTAgLSAxMSwgRWRnZSAxMiAtIDEzIG9ubHlcblx0Ly8gSW4gSUUvRWRnZSB1c2luZyByZWdleCBncm91cHMgaGVyZSBjYXVzZXMgc2V2ZXJlIHNsb3dkb3ducy5cblx0Ly8gU2VlIGh0dHBzOi8vY29ubmVjdC5taWNyb3NvZnQuY29tL0lFL2ZlZWRiYWNrL2RldGFpbHMvMTczNjUxMi9cblx0cm5vSW5uZXJodG1sID0gLzxzY3JpcHR8PHN0eWxlfDxsaW5rL2ksXG5cblx0Ly8gY2hlY2tlZD1cImNoZWNrZWRcIiBvciBjaGVja2VkXG5cdHJjaGVja2VkID0gL2NoZWNrZWRcXHMqKD86W149XXw9XFxzKi5jaGVja2VkLikvaSxcblx0cmNsZWFuU2NyaXB0ID0gL15cXHMqPCEoPzpcXFtDREFUQVxcW3wtLSl8KD86XFxdXFxdfC0tKT5cXHMqJC9nO1xuXG4vLyBQcmVmZXIgYSB0Ym9keSBvdmVyIGl0cyBwYXJlbnQgdGFibGUgZm9yIGNvbnRhaW5pbmcgbmV3IHJvd3NcbmZ1bmN0aW9uIG1hbmlwdWxhdGlvblRhcmdldCggZWxlbSwgY29udGVudCApIHtcblx0aWYgKCBub2RlTmFtZSggZWxlbSwgXCJ0YWJsZVwiICkgJiZcblx0XHRub2RlTmFtZSggY29udGVudC5ub2RlVHlwZSAhPT0gMTEgPyBjb250ZW50IDogY29udGVudC5maXJzdENoaWxkLCBcInRyXCIgKSApIHtcblxuXHRcdHJldHVybiBqUXVlcnkoIGVsZW0gKS5jaGlsZHJlbiggXCJ0Ym9keVwiIClbIDAgXSB8fCBlbGVtO1xuXHR9XG5cblx0cmV0dXJuIGVsZW07XG59XG5cbi8vIFJlcGxhY2UvcmVzdG9yZSB0aGUgdHlwZSBhdHRyaWJ1dGUgb2Ygc2NyaXB0IGVsZW1lbnRzIGZvciBzYWZlIERPTSBtYW5pcHVsYXRpb25cbmZ1bmN0aW9uIGRpc2FibGVTY3JpcHQoIGVsZW0gKSB7XG5cdGVsZW0udHlwZSA9ICggZWxlbS5nZXRBdHRyaWJ1dGUoIFwidHlwZVwiICkgIT09IG51bGwgKSArIFwiL1wiICsgZWxlbS50eXBlO1xuXHRyZXR1cm4gZWxlbTtcbn1cbmZ1bmN0aW9uIHJlc3RvcmVTY3JpcHQoIGVsZW0gKSB7XG5cdGlmICggKCBlbGVtLnR5cGUgfHwgXCJcIiApLnNsaWNlKCAwLCA1ICkgPT09IFwidHJ1ZS9cIiApIHtcblx0XHRlbGVtLnR5cGUgPSBlbGVtLnR5cGUuc2xpY2UoIDUgKTtcblx0fSBlbHNlIHtcblx0XHRlbGVtLnJlbW92ZUF0dHJpYnV0ZSggXCJ0eXBlXCIgKTtcblx0fVxuXG5cdHJldHVybiBlbGVtO1xufVxuXG5mdW5jdGlvbiBjbG9uZUNvcHlFdmVudCggc3JjLCBkZXN0ICkge1xuXHR2YXIgaSwgbCwgdHlwZSwgcGRhdGFPbGQsIHBkYXRhQ3VyLCB1ZGF0YU9sZCwgdWRhdGFDdXIsIGV2ZW50cztcblxuXHRpZiAoIGRlc3Qubm9kZVR5cGUgIT09IDEgKSB7XG5cdFx0cmV0dXJuO1xuXHR9XG5cblx0Ly8gMS4gQ29weSBwcml2YXRlIGRhdGE6IGV2ZW50cywgaGFuZGxlcnMsIGV0Yy5cblx0aWYgKCBkYXRhUHJpdi5oYXNEYXRhKCBzcmMgKSApIHtcblx0XHRwZGF0YU9sZCA9IGRhdGFQcml2LmFjY2Vzcyggc3JjICk7XG5cdFx0cGRhdGFDdXIgPSBkYXRhUHJpdi5zZXQoIGRlc3QsIHBkYXRhT2xkICk7XG5cdFx0ZXZlbnRzID0gcGRhdGFPbGQuZXZlbnRzO1xuXG5cdFx0aWYgKCBldmVudHMgKSB7XG5cdFx0XHRkZWxldGUgcGRhdGFDdXIuaGFuZGxlO1xuXHRcdFx0cGRhdGFDdXIuZXZlbnRzID0ge307XG5cblx0XHRcdGZvciAoIHR5cGUgaW4gZXZlbnRzICkge1xuXHRcdFx0XHRmb3IgKCBpID0gMCwgbCA9IGV2ZW50c1sgdHlwZSBdLmxlbmd0aDsgaSA8IGw7IGkrKyApIHtcblx0XHRcdFx0XHRqUXVlcnkuZXZlbnQuYWRkKCBkZXN0LCB0eXBlLCBldmVudHNbIHR5cGUgXVsgaSBdICk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHQvLyAyLiBDb3B5IHVzZXIgZGF0YVxuXHRpZiAoIGRhdGFVc2VyLmhhc0RhdGEoIHNyYyApICkge1xuXHRcdHVkYXRhT2xkID0gZGF0YVVzZXIuYWNjZXNzKCBzcmMgKTtcblx0XHR1ZGF0YUN1ciA9IGpRdWVyeS5leHRlbmQoIHt9LCB1ZGF0YU9sZCApO1xuXG5cdFx0ZGF0YVVzZXIuc2V0KCBkZXN0LCB1ZGF0YUN1ciApO1xuXHR9XG59XG5cbi8vIEZpeCBJRSBidWdzLCBzZWUgc3VwcG9ydCB0ZXN0c1xuZnVuY3Rpb24gZml4SW5wdXQoIHNyYywgZGVzdCApIHtcblx0dmFyIG5vZGVOYW1lID0gZGVzdC5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpO1xuXG5cdC8vIEZhaWxzIHRvIHBlcnNpc3QgdGhlIGNoZWNrZWQgc3RhdGUgb2YgYSBjbG9uZWQgY2hlY2tib3ggb3IgcmFkaW8gYnV0dG9uLlxuXHRpZiAoIG5vZGVOYW1lID09PSBcImlucHV0XCIgJiYgcmNoZWNrYWJsZVR5cGUudGVzdCggc3JjLnR5cGUgKSApIHtcblx0XHRkZXN0LmNoZWNrZWQgPSBzcmMuY2hlY2tlZDtcblxuXHQvLyBGYWlscyB0byByZXR1cm4gdGhlIHNlbGVjdGVkIG9wdGlvbiB0byB0aGUgZGVmYXVsdCBzZWxlY3RlZCBzdGF0ZSB3aGVuIGNsb25pbmcgb3B0aW9uc1xuXHR9IGVsc2UgaWYgKCBub2RlTmFtZSA9PT0gXCJpbnB1dFwiIHx8IG5vZGVOYW1lID09PSBcInRleHRhcmVhXCIgKSB7XG5cdFx0ZGVzdC5kZWZhdWx0VmFsdWUgPSBzcmMuZGVmYXVsdFZhbHVlO1xuXHR9XG59XG5cbmZ1bmN0aW9uIGRvbU1hbmlwKCBjb2xsZWN0aW9uLCBhcmdzLCBjYWxsYmFjaywgaWdub3JlZCApIHtcblxuXHQvLyBGbGF0dGVuIGFueSBuZXN0ZWQgYXJyYXlzXG5cdGFyZ3MgPSBjb25jYXQuYXBwbHkoIFtdLCBhcmdzICk7XG5cblx0dmFyIGZyYWdtZW50LCBmaXJzdCwgc2NyaXB0cywgaGFzU2NyaXB0cywgbm9kZSwgZG9jLFxuXHRcdGkgPSAwLFxuXHRcdGwgPSBjb2xsZWN0aW9uLmxlbmd0aCxcblx0XHRpTm9DbG9uZSA9IGwgLSAxLFxuXHRcdHZhbHVlID0gYXJnc1sgMCBdLFxuXHRcdHZhbHVlSXNGdW5jdGlvbiA9IGlzRnVuY3Rpb24oIHZhbHVlICk7XG5cblx0Ly8gV2UgY2FuJ3QgY2xvbmVOb2RlIGZyYWdtZW50cyB0aGF0IGNvbnRhaW4gY2hlY2tlZCwgaW4gV2ViS2l0XG5cdGlmICggdmFsdWVJc0Z1bmN0aW9uIHx8XG5cdFx0XHQoIGwgPiAxICYmIHR5cGVvZiB2YWx1ZSA9PT0gXCJzdHJpbmdcIiAmJlxuXHRcdFx0XHQhc3VwcG9ydC5jaGVja0Nsb25lICYmIHJjaGVja2VkLnRlc3QoIHZhbHVlICkgKSApIHtcblx0XHRyZXR1cm4gY29sbGVjdGlvbi5lYWNoKCBmdW5jdGlvbiggaW5kZXggKSB7XG5cdFx0XHR2YXIgc2VsZiA9IGNvbGxlY3Rpb24uZXEoIGluZGV4ICk7XG5cdFx0XHRpZiAoIHZhbHVlSXNGdW5jdGlvbiApIHtcblx0XHRcdFx0YXJnc1sgMCBdID0gdmFsdWUuY2FsbCggdGhpcywgaW5kZXgsIHNlbGYuaHRtbCgpICk7XG5cdFx0XHR9XG5cdFx0XHRkb21NYW5pcCggc2VsZiwgYXJncywgY2FsbGJhY2ssIGlnbm9yZWQgKTtcblx0XHR9ICk7XG5cdH1cblxuXHRpZiAoIGwgKSB7XG5cdFx0ZnJhZ21lbnQgPSBidWlsZEZyYWdtZW50KCBhcmdzLCBjb2xsZWN0aW9uWyAwIF0ub3duZXJEb2N1bWVudCwgZmFsc2UsIGNvbGxlY3Rpb24sIGlnbm9yZWQgKTtcblx0XHRmaXJzdCA9IGZyYWdtZW50LmZpcnN0Q2hpbGQ7XG5cblx0XHRpZiAoIGZyYWdtZW50LmNoaWxkTm9kZXMubGVuZ3RoID09PSAxICkge1xuXHRcdFx0ZnJhZ21lbnQgPSBmaXJzdDtcblx0XHR9XG5cblx0XHQvLyBSZXF1aXJlIGVpdGhlciBuZXcgY29udGVudCBvciBhbiBpbnRlcmVzdCBpbiBpZ25vcmVkIGVsZW1lbnRzIHRvIGludm9rZSB0aGUgY2FsbGJhY2tcblx0XHRpZiAoIGZpcnN0IHx8IGlnbm9yZWQgKSB7XG5cdFx0XHRzY3JpcHRzID0galF1ZXJ5Lm1hcCggZ2V0QWxsKCBmcmFnbWVudCwgXCJzY3JpcHRcIiApLCBkaXNhYmxlU2NyaXB0ICk7XG5cdFx0XHRoYXNTY3JpcHRzID0gc2NyaXB0cy5sZW5ndGg7XG5cblx0XHRcdC8vIFVzZSB0aGUgb3JpZ2luYWwgZnJhZ21lbnQgZm9yIHRoZSBsYXN0IGl0ZW1cblx0XHRcdC8vIGluc3RlYWQgb2YgdGhlIGZpcnN0IGJlY2F1c2UgaXQgY2FuIGVuZCB1cFxuXHRcdFx0Ly8gYmVpbmcgZW1wdGllZCBpbmNvcnJlY3RseSBpbiBjZXJ0YWluIHNpdHVhdGlvbnMgKCM4MDcwKS5cblx0XHRcdGZvciAoIDsgaSA8IGw7IGkrKyApIHtcblx0XHRcdFx0bm9kZSA9IGZyYWdtZW50O1xuXG5cdFx0XHRcdGlmICggaSAhPT0gaU5vQ2xvbmUgKSB7XG5cdFx0XHRcdFx0bm9kZSA9IGpRdWVyeS5jbG9uZSggbm9kZSwgdHJ1ZSwgdHJ1ZSApO1xuXG5cdFx0XHRcdFx0Ly8gS2VlcCByZWZlcmVuY2VzIHRvIGNsb25lZCBzY3JpcHRzIGZvciBsYXRlciByZXN0b3JhdGlvblxuXHRcdFx0XHRcdGlmICggaGFzU2NyaXB0cyApIHtcblxuXHRcdFx0XHRcdFx0Ly8gU3VwcG9ydDogQW5kcm9pZCA8PTQuMCBvbmx5LCBQaGFudG9tSlMgMSBvbmx5XG5cdFx0XHRcdFx0XHQvLyBwdXNoLmFwcGx5KF8sIGFycmF5bGlrZSkgdGhyb3dzIG9uIGFuY2llbnQgV2ViS2l0XG5cdFx0XHRcdFx0XHRqUXVlcnkubWVyZ2UoIHNjcmlwdHMsIGdldEFsbCggbm9kZSwgXCJzY3JpcHRcIiApICk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cblx0XHRcdFx0Y2FsbGJhY2suY2FsbCggY29sbGVjdGlvblsgaSBdLCBub2RlLCBpICk7XG5cdFx0XHR9XG5cblx0XHRcdGlmICggaGFzU2NyaXB0cyApIHtcblx0XHRcdFx0ZG9jID0gc2NyaXB0c1sgc2NyaXB0cy5sZW5ndGggLSAxIF0ub3duZXJEb2N1bWVudDtcblxuXHRcdFx0XHQvLyBSZWVuYWJsZSBzY3JpcHRzXG5cdFx0XHRcdGpRdWVyeS5tYXAoIHNjcmlwdHMsIHJlc3RvcmVTY3JpcHQgKTtcblxuXHRcdFx0XHQvLyBFdmFsdWF0ZSBleGVjdXRhYmxlIHNjcmlwdHMgb24gZmlyc3QgZG9jdW1lbnQgaW5zZXJ0aW9uXG5cdFx0XHRcdGZvciAoIGkgPSAwOyBpIDwgaGFzU2NyaXB0czsgaSsrICkge1xuXHRcdFx0XHRcdG5vZGUgPSBzY3JpcHRzWyBpIF07XG5cdFx0XHRcdFx0aWYgKCByc2NyaXB0VHlwZS50ZXN0KCBub2RlLnR5cGUgfHwgXCJcIiApICYmXG5cdFx0XHRcdFx0XHQhZGF0YVByaXYuYWNjZXNzKCBub2RlLCBcImdsb2JhbEV2YWxcIiApICYmXG5cdFx0XHRcdFx0XHRqUXVlcnkuY29udGFpbnMoIGRvYywgbm9kZSApICkge1xuXG5cdFx0XHRcdFx0XHRpZiAoIG5vZGUuc3JjICYmICggbm9kZS50eXBlIHx8IFwiXCIgKS50b0xvd2VyQ2FzZSgpICAhPT0gXCJtb2R1bGVcIiApIHtcblxuXHRcdFx0XHRcdFx0XHQvLyBPcHRpb25hbCBBSkFYIGRlcGVuZGVuY3ksIGJ1dCB3b24ndCBydW4gc2NyaXB0cyBpZiBub3QgcHJlc2VudFxuXHRcdFx0XHRcdFx0XHRpZiAoIGpRdWVyeS5fZXZhbFVybCApIHtcblx0XHRcdFx0XHRcdFx0XHRqUXVlcnkuX2V2YWxVcmwoIG5vZGUuc3JjICk7XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRcdERPTUV2YWwoIG5vZGUudGV4dENvbnRlbnQucmVwbGFjZSggcmNsZWFuU2NyaXB0LCBcIlwiICksIGRvYywgbm9kZSApO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdHJldHVybiBjb2xsZWN0aW9uO1xufVxuXG5mdW5jdGlvbiByZW1vdmUoIGVsZW0sIHNlbGVjdG9yLCBrZWVwRGF0YSApIHtcblx0dmFyIG5vZGUsXG5cdFx0bm9kZXMgPSBzZWxlY3RvciA/IGpRdWVyeS5maWx0ZXIoIHNlbGVjdG9yLCBlbGVtICkgOiBlbGVtLFxuXHRcdGkgPSAwO1xuXG5cdGZvciAoIDsgKCBub2RlID0gbm9kZXNbIGkgXSApICE9IG51bGw7IGkrKyApIHtcblx0XHRpZiAoICFrZWVwRGF0YSAmJiBub2RlLm5vZGVUeXBlID09PSAxICkge1xuXHRcdFx0alF1ZXJ5LmNsZWFuRGF0YSggZ2V0QWxsKCBub2RlICkgKTtcblx0XHR9XG5cblx0XHRpZiAoIG5vZGUucGFyZW50Tm9kZSApIHtcblx0XHRcdGlmICgga2VlcERhdGEgJiYgalF1ZXJ5LmNvbnRhaW5zKCBub2RlLm93bmVyRG9jdW1lbnQsIG5vZGUgKSApIHtcblx0XHRcdFx0c2V0R2xvYmFsRXZhbCggZ2V0QWxsKCBub2RlLCBcInNjcmlwdFwiICkgKTtcblx0XHRcdH1cblx0XHRcdG5vZGUucGFyZW50Tm9kZS5yZW1vdmVDaGlsZCggbm9kZSApO1xuXHRcdH1cblx0fVxuXG5cdHJldHVybiBlbGVtO1xufVxuXG5qUXVlcnkuZXh0ZW5kKCB7XG5cdGh0bWxQcmVmaWx0ZXI6IGZ1bmN0aW9uKCBodG1sICkge1xuXHRcdHJldHVybiBodG1sLnJlcGxhY2UoIHJ4aHRtbFRhZywgXCI8JDE+PC8kMj5cIiApO1xuXHR9LFxuXG5cdGNsb25lOiBmdW5jdGlvbiggZWxlbSwgZGF0YUFuZEV2ZW50cywgZGVlcERhdGFBbmRFdmVudHMgKSB7XG5cdFx0dmFyIGksIGwsIHNyY0VsZW1lbnRzLCBkZXN0RWxlbWVudHMsXG5cdFx0XHRjbG9uZSA9IGVsZW0uY2xvbmVOb2RlKCB0cnVlICksXG5cdFx0XHRpblBhZ2UgPSBqUXVlcnkuY29udGFpbnMoIGVsZW0ub3duZXJEb2N1bWVudCwgZWxlbSApO1xuXG5cdFx0Ly8gRml4IElFIGNsb25pbmcgaXNzdWVzXG5cdFx0aWYgKCAhc3VwcG9ydC5ub0Nsb25lQ2hlY2tlZCAmJiAoIGVsZW0ubm9kZVR5cGUgPT09IDEgfHwgZWxlbS5ub2RlVHlwZSA9PT0gMTEgKSAmJlxuXHRcdFx0XHQhalF1ZXJ5LmlzWE1MRG9jKCBlbGVtICkgKSB7XG5cblx0XHRcdC8vIFdlIGVzY2hldyBTaXp6bGUgaGVyZSBmb3IgcGVyZm9ybWFuY2UgcmVhc29uczogaHR0cHM6Ly9qc3BlcmYuY29tL2dldGFsbC12cy1zaXp6bGUvMlxuXHRcdFx0ZGVzdEVsZW1lbnRzID0gZ2V0QWxsKCBjbG9uZSApO1xuXHRcdFx0c3JjRWxlbWVudHMgPSBnZXRBbGwoIGVsZW0gKTtcblxuXHRcdFx0Zm9yICggaSA9IDAsIGwgPSBzcmNFbGVtZW50cy5sZW5ndGg7IGkgPCBsOyBpKysgKSB7XG5cdFx0XHRcdGZpeElucHV0KCBzcmNFbGVtZW50c1sgaSBdLCBkZXN0RWxlbWVudHNbIGkgXSApO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdC8vIENvcHkgdGhlIGV2ZW50cyBmcm9tIHRoZSBvcmlnaW5hbCB0byB0aGUgY2xvbmVcblx0XHRpZiAoIGRhdGFBbmRFdmVudHMgKSB7XG5cdFx0XHRpZiAoIGRlZXBEYXRhQW5kRXZlbnRzICkge1xuXHRcdFx0XHRzcmNFbGVtZW50cyA9IHNyY0VsZW1lbnRzIHx8IGdldEFsbCggZWxlbSApO1xuXHRcdFx0XHRkZXN0RWxlbWVudHMgPSBkZXN0RWxlbWVudHMgfHwgZ2V0QWxsKCBjbG9uZSApO1xuXG5cdFx0XHRcdGZvciAoIGkgPSAwLCBsID0gc3JjRWxlbWVudHMubGVuZ3RoOyBpIDwgbDsgaSsrICkge1xuXHRcdFx0XHRcdGNsb25lQ29weUV2ZW50KCBzcmNFbGVtZW50c1sgaSBdLCBkZXN0RWxlbWVudHNbIGkgXSApO1xuXHRcdFx0XHR9XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRjbG9uZUNvcHlFdmVudCggZWxlbSwgY2xvbmUgKTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHQvLyBQcmVzZXJ2ZSBzY3JpcHQgZXZhbHVhdGlvbiBoaXN0b3J5XG5cdFx0ZGVzdEVsZW1lbnRzID0gZ2V0QWxsKCBjbG9uZSwgXCJzY3JpcHRcIiApO1xuXHRcdGlmICggZGVzdEVsZW1lbnRzLmxlbmd0aCA+IDAgKSB7XG5cdFx0XHRzZXRHbG9iYWxFdmFsKCBkZXN0RWxlbWVudHMsICFpblBhZ2UgJiYgZ2V0QWxsKCBlbGVtLCBcInNjcmlwdFwiICkgKTtcblx0XHR9XG5cblx0XHQvLyBSZXR1cm4gdGhlIGNsb25lZCBzZXRcblx0XHRyZXR1cm4gY2xvbmU7XG5cdH0sXG5cblx0Y2xlYW5EYXRhOiBmdW5jdGlvbiggZWxlbXMgKSB7XG5cdFx0dmFyIGRhdGEsIGVsZW0sIHR5cGUsXG5cdFx0XHRzcGVjaWFsID0galF1ZXJ5LmV2ZW50LnNwZWNpYWwsXG5cdFx0XHRpID0gMDtcblxuXHRcdGZvciAoIDsgKCBlbGVtID0gZWxlbXNbIGkgXSApICE9PSB1bmRlZmluZWQ7IGkrKyApIHtcblx0XHRcdGlmICggYWNjZXB0RGF0YSggZWxlbSApICkge1xuXHRcdFx0XHRpZiAoICggZGF0YSA9IGVsZW1bIGRhdGFQcml2LmV4cGFuZG8gXSApICkge1xuXHRcdFx0XHRcdGlmICggZGF0YS5ldmVudHMgKSB7XG5cdFx0XHRcdFx0XHRmb3IgKCB0eXBlIGluIGRhdGEuZXZlbnRzICkge1xuXHRcdFx0XHRcdFx0XHRpZiAoIHNwZWNpYWxbIHR5cGUgXSApIHtcblx0XHRcdFx0XHRcdFx0XHRqUXVlcnkuZXZlbnQucmVtb3ZlKCBlbGVtLCB0eXBlICk7XG5cblx0XHRcdFx0XHRcdFx0Ly8gVGhpcyBpcyBhIHNob3J0Y3V0IHRvIGF2b2lkIGpRdWVyeS5ldmVudC5yZW1vdmUncyBvdmVyaGVhZFxuXHRcdFx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0XHRcdGpRdWVyeS5yZW1vdmVFdmVudCggZWxlbSwgdHlwZSwgZGF0YS5oYW5kbGUgKTtcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdC8vIFN1cHBvcnQ6IENocm9tZSA8PTM1IC0gNDUrXG5cdFx0XHRcdFx0Ly8gQXNzaWduIHVuZGVmaW5lZCBpbnN0ZWFkIG9mIHVzaW5nIGRlbGV0ZSwgc2VlIERhdGEjcmVtb3ZlXG5cdFx0XHRcdFx0ZWxlbVsgZGF0YVByaXYuZXhwYW5kbyBdID0gdW5kZWZpbmVkO1xuXHRcdFx0XHR9XG5cdFx0XHRcdGlmICggZWxlbVsgZGF0YVVzZXIuZXhwYW5kbyBdICkge1xuXG5cdFx0XHRcdFx0Ly8gU3VwcG9ydDogQ2hyb21lIDw9MzUgLSA0NStcblx0XHRcdFx0XHQvLyBBc3NpZ24gdW5kZWZpbmVkIGluc3RlYWQgb2YgdXNpbmcgZGVsZXRlLCBzZWUgRGF0YSNyZW1vdmVcblx0XHRcdFx0XHRlbGVtWyBkYXRhVXNlci5leHBhbmRvIF0gPSB1bmRlZmluZWQ7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdH1cbn0gKTtcblxualF1ZXJ5LmZuLmV4dGVuZCgge1xuXHRkZXRhY2g6IGZ1bmN0aW9uKCBzZWxlY3RvciApIHtcblx0XHRyZXR1cm4gcmVtb3ZlKCB0aGlzLCBzZWxlY3RvciwgdHJ1ZSApO1xuXHR9LFxuXG5cdHJlbW92ZTogZnVuY3Rpb24oIHNlbGVjdG9yICkge1xuXHRcdHJldHVybiByZW1vdmUoIHRoaXMsIHNlbGVjdG9yICk7XG5cdH0sXG5cblx0dGV4dDogZnVuY3Rpb24oIHZhbHVlICkge1xuXHRcdHJldHVybiBhY2Nlc3MoIHRoaXMsIGZ1bmN0aW9uKCB2YWx1ZSApIHtcblx0XHRcdHJldHVybiB2YWx1ZSA9PT0gdW5kZWZpbmVkID9cblx0XHRcdFx0alF1ZXJ5LnRleHQoIHRoaXMgKSA6XG5cdFx0XHRcdHRoaXMuZW1wdHkoKS5lYWNoKCBmdW5jdGlvbigpIHtcblx0XHRcdFx0XHRpZiAoIHRoaXMubm9kZVR5cGUgPT09IDEgfHwgdGhpcy5ub2RlVHlwZSA9PT0gMTEgfHwgdGhpcy5ub2RlVHlwZSA9PT0gOSApIHtcblx0XHRcdFx0XHRcdHRoaXMudGV4dENvbnRlbnQgPSB2YWx1ZTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH0gKTtcblx0XHR9LCBudWxsLCB2YWx1ZSwgYXJndW1lbnRzLmxlbmd0aCApO1xuXHR9LFxuXG5cdGFwcGVuZDogZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIGRvbU1hbmlwKCB0aGlzLCBhcmd1bWVudHMsIGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0aWYgKCB0aGlzLm5vZGVUeXBlID09PSAxIHx8IHRoaXMubm9kZVR5cGUgPT09IDExIHx8IHRoaXMubm9kZVR5cGUgPT09IDkgKSB7XG5cdFx0XHRcdHZhciB0YXJnZXQgPSBtYW5pcHVsYXRpb25UYXJnZXQoIHRoaXMsIGVsZW0gKTtcblx0XHRcdFx0dGFyZ2V0LmFwcGVuZENoaWxkKCBlbGVtICk7XG5cdFx0XHR9XG5cdFx0fSApO1xuXHR9LFxuXG5cdHByZXBlbmQ6IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiBkb21NYW5pcCggdGhpcywgYXJndW1lbnRzLCBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdGlmICggdGhpcy5ub2RlVHlwZSA9PT0gMSB8fCB0aGlzLm5vZGVUeXBlID09PSAxMSB8fCB0aGlzLm5vZGVUeXBlID09PSA5ICkge1xuXHRcdFx0XHR2YXIgdGFyZ2V0ID0gbWFuaXB1bGF0aW9uVGFyZ2V0KCB0aGlzLCBlbGVtICk7XG5cdFx0XHRcdHRhcmdldC5pbnNlcnRCZWZvcmUoIGVsZW0sIHRhcmdldC5maXJzdENoaWxkICk7XG5cdFx0XHR9XG5cdFx0fSApO1xuXHR9LFxuXG5cdGJlZm9yZTogZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIGRvbU1hbmlwKCB0aGlzLCBhcmd1bWVudHMsIGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0aWYgKCB0aGlzLnBhcmVudE5vZGUgKSB7XG5cdFx0XHRcdHRoaXMucGFyZW50Tm9kZS5pbnNlcnRCZWZvcmUoIGVsZW0sIHRoaXMgKTtcblx0XHRcdH1cblx0XHR9ICk7XG5cdH0sXG5cblx0YWZ0ZXI6IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiBkb21NYW5pcCggdGhpcywgYXJndW1lbnRzLCBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdGlmICggdGhpcy5wYXJlbnROb2RlICkge1xuXHRcdFx0XHR0aGlzLnBhcmVudE5vZGUuaW5zZXJ0QmVmb3JlKCBlbGVtLCB0aGlzLm5leHRTaWJsaW5nICk7XG5cdFx0XHR9XG5cdFx0fSApO1xuXHR9LFxuXG5cdGVtcHR5OiBmdW5jdGlvbigpIHtcblx0XHR2YXIgZWxlbSxcblx0XHRcdGkgPSAwO1xuXG5cdFx0Zm9yICggOyAoIGVsZW0gPSB0aGlzWyBpIF0gKSAhPSBudWxsOyBpKysgKSB7XG5cdFx0XHRpZiAoIGVsZW0ubm9kZVR5cGUgPT09IDEgKSB7XG5cblx0XHRcdFx0Ly8gUHJldmVudCBtZW1vcnkgbGVha3Ncblx0XHRcdFx0alF1ZXJ5LmNsZWFuRGF0YSggZ2V0QWxsKCBlbGVtLCBmYWxzZSApICk7XG5cblx0XHRcdFx0Ly8gUmVtb3ZlIGFueSByZW1haW5pbmcgbm9kZXNcblx0XHRcdFx0ZWxlbS50ZXh0Q29udGVudCA9IFwiXCI7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXM7XG5cdH0sXG5cblx0Y2xvbmU6IGZ1bmN0aW9uKCBkYXRhQW5kRXZlbnRzLCBkZWVwRGF0YUFuZEV2ZW50cyApIHtcblx0XHRkYXRhQW5kRXZlbnRzID0gZGF0YUFuZEV2ZW50cyA9PSBudWxsID8gZmFsc2UgOiBkYXRhQW5kRXZlbnRzO1xuXHRcdGRlZXBEYXRhQW5kRXZlbnRzID0gZGVlcERhdGFBbmRFdmVudHMgPT0gbnVsbCA/IGRhdGFBbmRFdmVudHMgOiBkZWVwRGF0YUFuZEV2ZW50cztcblxuXHRcdHJldHVybiB0aGlzLm1hcCggZnVuY3Rpb24oKSB7XG5cdFx0XHRyZXR1cm4galF1ZXJ5LmNsb25lKCB0aGlzLCBkYXRhQW5kRXZlbnRzLCBkZWVwRGF0YUFuZEV2ZW50cyApO1xuXHRcdH0gKTtcblx0fSxcblxuXHRodG1sOiBmdW5jdGlvbiggdmFsdWUgKSB7XG5cdFx0cmV0dXJuIGFjY2VzcyggdGhpcywgZnVuY3Rpb24oIHZhbHVlICkge1xuXHRcdFx0dmFyIGVsZW0gPSB0aGlzWyAwIF0gfHwge30sXG5cdFx0XHRcdGkgPSAwLFxuXHRcdFx0XHRsID0gdGhpcy5sZW5ndGg7XG5cblx0XHRcdGlmICggdmFsdWUgPT09IHVuZGVmaW5lZCAmJiBlbGVtLm5vZGVUeXBlID09PSAxICkge1xuXHRcdFx0XHRyZXR1cm4gZWxlbS5pbm5lckhUTUw7XG5cdFx0XHR9XG5cblx0XHRcdC8vIFNlZSBpZiB3ZSBjYW4gdGFrZSBhIHNob3J0Y3V0IGFuZCBqdXN0IHVzZSBpbm5lckhUTUxcblx0XHRcdGlmICggdHlwZW9mIHZhbHVlID09PSBcInN0cmluZ1wiICYmICFybm9Jbm5lcmh0bWwudGVzdCggdmFsdWUgKSAmJlxuXHRcdFx0XHQhd3JhcE1hcFsgKCBydGFnTmFtZS5leGVjKCB2YWx1ZSApIHx8IFsgXCJcIiwgXCJcIiBdIClbIDEgXS50b0xvd2VyQ2FzZSgpIF0gKSB7XG5cblx0XHRcdFx0dmFsdWUgPSBqUXVlcnkuaHRtbFByZWZpbHRlciggdmFsdWUgKTtcblxuXHRcdFx0XHR0cnkge1xuXHRcdFx0XHRcdGZvciAoIDsgaSA8IGw7IGkrKyApIHtcblx0XHRcdFx0XHRcdGVsZW0gPSB0aGlzWyBpIF0gfHwge307XG5cblx0XHRcdFx0XHRcdC8vIFJlbW92ZSBlbGVtZW50IG5vZGVzIGFuZCBwcmV2ZW50IG1lbW9yeSBsZWFrc1xuXHRcdFx0XHRcdFx0aWYgKCBlbGVtLm5vZGVUeXBlID09PSAxICkge1xuXHRcdFx0XHRcdFx0XHRqUXVlcnkuY2xlYW5EYXRhKCBnZXRBbGwoIGVsZW0sIGZhbHNlICkgKTtcblx0XHRcdFx0XHRcdFx0ZWxlbS5pbm5lckhUTUwgPSB2YWx1ZTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRlbGVtID0gMDtcblxuXHRcdFx0XHQvLyBJZiB1c2luZyBpbm5lckhUTUwgdGhyb3dzIGFuIGV4Y2VwdGlvbiwgdXNlIHRoZSBmYWxsYmFjayBtZXRob2Rcblx0XHRcdFx0fSBjYXRjaCAoIGUgKSB7fVxuXHRcdFx0fVxuXG5cdFx0XHRpZiAoIGVsZW0gKSB7XG5cdFx0XHRcdHRoaXMuZW1wdHkoKS5hcHBlbmQoIHZhbHVlICk7XG5cdFx0XHR9XG5cdFx0fSwgbnVsbCwgdmFsdWUsIGFyZ3VtZW50cy5sZW5ndGggKTtcblx0fSxcblxuXHRyZXBsYWNlV2l0aDogZnVuY3Rpb24oKSB7XG5cdFx0dmFyIGlnbm9yZWQgPSBbXTtcblxuXHRcdC8vIE1ha2UgdGhlIGNoYW5nZXMsIHJlcGxhY2luZyBlYWNoIG5vbi1pZ25vcmVkIGNvbnRleHQgZWxlbWVudCB3aXRoIHRoZSBuZXcgY29udGVudFxuXHRcdHJldHVybiBkb21NYW5pcCggdGhpcywgYXJndW1lbnRzLCBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdHZhciBwYXJlbnQgPSB0aGlzLnBhcmVudE5vZGU7XG5cblx0XHRcdGlmICggalF1ZXJ5LmluQXJyYXkoIHRoaXMsIGlnbm9yZWQgKSA8IDAgKSB7XG5cdFx0XHRcdGpRdWVyeS5jbGVhbkRhdGEoIGdldEFsbCggdGhpcyApICk7XG5cdFx0XHRcdGlmICggcGFyZW50ICkge1xuXHRcdFx0XHRcdHBhcmVudC5yZXBsYWNlQ2hpbGQoIGVsZW0sIHRoaXMgKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0Ly8gRm9yY2UgY2FsbGJhY2sgaW52b2NhdGlvblxuXHRcdH0sIGlnbm9yZWQgKTtcblx0fVxufSApO1xuXG5qUXVlcnkuZWFjaCgge1xuXHRhcHBlbmRUbzogXCJhcHBlbmRcIixcblx0cHJlcGVuZFRvOiBcInByZXBlbmRcIixcblx0aW5zZXJ0QmVmb3JlOiBcImJlZm9yZVwiLFxuXHRpbnNlcnRBZnRlcjogXCJhZnRlclwiLFxuXHRyZXBsYWNlQWxsOiBcInJlcGxhY2VXaXRoXCJcbn0sIGZ1bmN0aW9uKCBuYW1lLCBvcmlnaW5hbCApIHtcblx0alF1ZXJ5LmZuWyBuYW1lIF0gPSBmdW5jdGlvbiggc2VsZWN0b3IgKSB7XG5cdFx0dmFyIGVsZW1zLFxuXHRcdFx0cmV0ID0gW10sXG5cdFx0XHRpbnNlcnQgPSBqUXVlcnkoIHNlbGVjdG9yICksXG5cdFx0XHRsYXN0ID0gaW5zZXJ0Lmxlbmd0aCAtIDEsXG5cdFx0XHRpID0gMDtcblxuXHRcdGZvciAoIDsgaSA8PSBsYXN0OyBpKysgKSB7XG5cdFx0XHRlbGVtcyA9IGkgPT09IGxhc3QgPyB0aGlzIDogdGhpcy5jbG9uZSggdHJ1ZSApO1xuXHRcdFx0alF1ZXJ5KCBpbnNlcnRbIGkgXSApWyBvcmlnaW5hbCBdKCBlbGVtcyApO1xuXG5cdFx0XHQvLyBTdXBwb3J0OiBBbmRyb2lkIDw9NC4wIG9ubHksIFBoYW50b21KUyAxIG9ubHlcblx0XHRcdC8vIC5nZXQoKSBiZWNhdXNlIHB1c2guYXBwbHkoXywgYXJyYXlsaWtlKSB0aHJvd3Mgb24gYW5jaWVudCBXZWJLaXRcblx0XHRcdHB1c2guYXBwbHkoIHJldCwgZWxlbXMuZ2V0KCkgKTtcblx0XHR9XG5cblx0XHRyZXR1cm4gdGhpcy5wdXNoU3RhY2soIHJldCApO1xuXHR9O1xufSApO1xudmFyIHJudW1ub25weCA9IG5ldyBSZWdFeHAoIFwiXihcIiArIHBudW0gKyBcIikoPyFweClbYS16JV0rJFwiLCBcImlcIiApO1xuXG52YXIgZ2V0U3R5bGVzID0gZnVuY3Rpb24oIGVsZW0gKSB7XG5cblx0XHQvLyBTdXBwb3J0OiBJRSA8PTExIG9ubHksIEZpcmVmb3ggPD0zMCAoIzE1MDk4LCAjMTQxNTApXG5cdFx0Ly8gSUUgdGhyb3dzIG9uIGVsZW1lbnRzIGNyZWF0ZWQgaW4gcG9wdXBzXG5cdFx0Ly8gRkYgbWVhbndoaWxlIHRocm93cyBvbiBmcmFtZSBlbGVtZW50cyB0aHJvdWdoIFwiZGVmYXVsdFZpZXcuZ2V0Q29tcHV0ZWRTdHlsZVwiXG5cdFx0dmFyIHZpZXcgPSBlbGVtLm93bmVyRG9jdW1lbnQuZGVmYXVsdFZpZXc7XG5cblx0XHRpZiAoICF2aWV3IHx8ICF2aWV3Lm9wZW5lciApIHtcblx0XHRcdHZpZXcgPSB3aW5kb3c7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHZpZXcuZ2V0Q29tcHV0ZWRTdHlsZSggZWxlbSApO1xuXHR9O1xuXG52YXIgcmJveFN0eWxlID0gbmV3IFJlZ0V4cCggY3NzRXhwYW5kLmpvaW4oIFwifFwiICksIFwiaVwiICk7XG5cblxuXG4oIGZ1bmN0aW9uKCkge1xuXG5cdC8vIEV4ZWN1dGluZyBib3RoIHBpeGVsUG9zaXRpb24gJiBib3hTaXppbmdSZWxpYWJsZSB0ZXN0cyByZXF1aXJlIG9ubHkgb25lIGxheW91dFxuXHQvLyBzbyB0aGV5J3JlIGV4ZWN1dGVkIGF0IHRoZSBzYW1lIHRpbWUgdG8gc2F2ZSB0aGUgc2Vjb25kIGNvbXB1dGF0aW9uLlxuXHRmdW5jdGlvbiBjb21wdXRlU3R5bGVUZXN0cygpIHtcblxuXHRcdC8vIFRoaXMgaXMgYSBzaW5nbGV0b24sIHdlIG5lZWQgdG8gZXhlY3V0ZSBpdCBvbmx5IG9uY2Vcblx0XHRpZiAoICFkaXYgKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0Y29udGFpbmVyLnN0eWxlLmNzc1RleHQgPSBcInBvc2l0aW9uOmFic29sdXRlO2xlZnQ6LTExMTExcHg7d2lkdGg6NjBweDtcIiArXG5cdFx0XHRcIm1hcmdpbi10b3A6MXB4O3BhZGRpbmc6MDtib3JkZXI6MFwiO1xuXHRcdGRpdi5zdHlsZS5jc3NUZXh0ID1cblx0XHRcdFwicG9zaXRpb246cmVsYXRpdmU7ZGlzcGxheTpibG9jaztib3gtc2l6aW5nOmJvcmRlci1ib3g7b3ZlcmZsb3c6c2Nyb2xsO1wiICtcblx0XHRcdFwibWFyZ2luOmF1dG87Ym9yZGVyOjFweDtwYWRkaW5nOjFweDtcIiArXG5cdFx0XHRcIndpZHRoOjYwJTt0b3A6MSVcIjtcblx0XHRkb2N1bWVudEVsZW1lbnQuYXBwZW5kQ2hpbGQoIGNvbnRhaW5lciApLmFwcGVuZENoaWxkKCBkaXYgKTtcblxuXHRcdHZhciBkaXZTdHlsZSA9IHdpbmRvdy5nZXRDb21wdXRlZFN0eWxlKCBkaXYgKTtcblx0XHRwaXhlbFBvc2l0aW9uVmFsID0gZGl2U3R5bGUudG9wICE9PSBcIjElXCI7XG5cblx0XHQvLyBTdXBwb3J0OiBBbmRyb2lkIDQuMCAtIDQuMyBvbmx5LCBGaXJlZm94IDw9MyAtIDQ0XG5cdFx0cmVsaWFibGVNYXJnaW5MZWZ0VmFsID0gcm91bmRQaXhlbE1lYXN1cmVzKCBkaXZTdHlsZS5tYXJnaW5MZWZ0ICkgPT09IDEyO1xuXG5cdFx0Ly8gU3VwcG9ydDogQW5kcm9pZCA0LjAgLSA0LjMgb25seSwgU2FmYXJpIDw9OS4xIC0gMTAuMSwgaU9TIDw9Ny4wIC0gOS4zXG5cdFx0Ly8gU29tZSBzdHlsZXMgY29tZSBiYWNrIHdpdGggcGVyY2VudGFnZSB2YWx1ZXMsIGV2ZW4gdGhvdWdoIHRoZXkgc2hvdWxkbid0XG5cdFx0ZGl2LnN0eWxlLnJpZ2h0ID0gXCI2MCVcIjtcblx0XHRwaXhlbEJveFN0eWxlc1ZhbCA9IHJvdW5kUGl4ZWxNZWFzdXJlcyggZGl2U3R5bGUucmlnaHQgKSA9PT0gMzY7XG5cblx0XHQvLyBTdXBwb3J0OiBJRSA5IC0gMTEgb25seVxuXHRcdC8vIERldGVjdCBtaXNyZXBvcnRpbmcgb2YgY29udGVudCBkaW1lbnNpb25zIGZvciBib3gtc2l6aW5nOmJvcmRlci1ib3ggZWxlbWVudHNcblx0XHRib3hTaXppbmdSZWxpYWJsZVZhbCA9IHJvdW5kUGl4ZWxNZWFzdXJlcyggZGl2U3R5bGUud2lkdGggKSA9PT0gMzY7XG5cblx0XHQvLyBTdXBwb3J0OiBJRSA5IG9ubHlcblx0XHQvLyBEZXRlY3Qgb3ZlcmZsb3c6c2Nyb2xsIHNjcmV3aW5lc3MgKGdoLTM2OTkpXG5cdFx0ZGl2LnN0eWxlLnBvc2l0aW9uID0gXCJhYnNvbHV0ZVwiO1xuXHRcdHNjcm9sbGJveFNpemVWYWwgPSBkaXYub2Zmc2V0V2lkdGggPT09IDM2IHx8IFwiYWJzb2x1dGVcIjtcblxuXHRcdGRvY3VtZW50RWxlbWVudC5yZW1vdmVDaGlsZCggY29udGFpbmVyICk7XG5cblx0XHQvLyBOdWxsaWZ5IHRoZSBkaXYgc28gaXQgd291bGRuJ3QgYmUgc3RvcmVkIGluIHRoZSBtZW1vcnkgYW5kXG5cdFx0Ly8gaXQgd2lsbCBhbHNvIGJlIGEgc2lnbiB0aGF0IGNoZWNrcyBhbHJlYWR5IHBlcmZvcm1lZFxuXHRcdGRpdiA9IG51bGw7XG5cdH1cblxuXHRmdW5jdGlvbiByb3VuZFBpeGVsTWVhc3VyZXMoIG1lYXN1cmUgKSB7XG5cdFx0cmV0dXJuIE1hdGgucm91bmQoIHBhcnNlRmxvYXQoIG1lYXN1cmUgKSApO1xuXHR9XG5cblx0dmFyIHBpeGVsUG9zaXRpb25WYWwsIGJveFNpemluZ1JlbGlhYmxlVmFsLCBzY3JvbGxib3hTaXplVmFsLCBwaXhlbEJveFN0eWxlc1ZhbCxcblx0XHRyZWxpYWJsZU1hcmdpbkxlZnRWYWwsXG5cdFx0Y29udGFpbmVyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCggXCJkaXZcIiApLFxuXHRcdGRpdiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoIFwiZGl2XCIgKTtcblxuXHQvLyBGaW5pc2ggZWFybHkgaW4gbGltaXRlZCAobm9uLWJyb3dzZXIpIGVudmlyb25tZW50c1xuXHRpZiAoICFkaXYuc3R5bGUgKSB7XG5cdFx0cmV0dXJuO1xuXHR9XG5cblx0Ly8gU3VwcG9ydDogSUUgPD05IC0gMTEgb25seVxuXHQvLyBTdHlsZSBvZiBjbG9uZWQgZWxlbWVudCBhZmZlY3RzIHNvdXJjZSBlbGVtZW50IGNsb25lZCAoIzg5MDgpXG5cdGRpdi5zdHlsZS5iYWNrZ3JvdW5kQ2xpcCA9IFwiY29udGVudC1ib3hcIjtcblx0ZGl2LmNsb25lTm9kZSggdHJ1ZSApLnN0eWxlLmJhY2tncm91bmRDbGlwID0gXCJcIjtcblx0c3VwcG9ydC5jbGVhckNsb25lU3R5bGUgPSBkaXYuc3R5bGUuYmFja2dyb3VuZENsaXAgPT09IFwiY29udGVudC1ib3hcIjtcblxuXHRqUXVlcnkuZXh0ZW5kKCBzdXBwb3J0LCB7XG5cdFx0Ym94U2l6aW5nUmVsaWFibGU6IGZ1bmN0aW9uKCkge1xuXHRcdFx0Y29tcHV0ZVN0eWxlVGVzdHMoKTtcblx0XHRcdHJldHVybiBib3hTaXppbmdSZWxpYWJsZVZhbDtcblx0XHR9LFxuXHRcdHBpeGVsQm94U3R5bGVzOiBmdW5jdGlvbigpIHtcblx0XHRcdGNvbXB1dGVTdHlsZVRlc3RzKCk7XG5cdFx0XHRyZXR1cm4gcGl4ZWxCb3hTdHlsZXNWYWw7XG5cdFx0fSxcblx0XHRwaXhlbFBvc2l0aW9uOiBmdW5jdGlvbigpIHtcblx0XHRcdGNvbXB1dGVTdHlsZVRlc3RzKCk7XG5cdFx0XHRyZXR1cm4gcGl4ZWxQb3NpdGlvblZhbDtcblx0XHR9LFxuXHRcdHJlbGlhYmxlTWFyZ2luTGVmdDogZnVuY3Rpb24oKSB7XG5cdFx0XHRjb21wdXRlU3R5bGVUZXN0cygpO1xuXHRcdFx0cmV0dXJuIHJlbGlhYmxlTWFyZ2luTGVmdFZhbDtcblx0XHR9LFxuXHRcdHNjcm9sbGJveFNpemU6IGZ1bmN0aW9uKCkge1xuXHRcdFx0Y29tcHV0ZVN0eWxlVGVzdHMoKTtcblx0XHRcdHJldHVybiBzY3JvbGxib3hTaXplVmFsO1xuXHRcdH1cblx0fSApO1xufSApKCk7XG5cblxuZnVuY3Rpb24gY3VyQ1NTKCBlbGVtLCBuYW1lLCBjb21wdXRlZCApIHtcblx0dmFyIHdpZHRoLCBtaW5XaWR0aCwgbWF4V2lkdGgsIHJldCxcblxuXHRcdC8vIFN1cHBvcnQ6IEZpcmVmb3ggNTErXG5cdFx0Ly8gUmV0cmlldmluZyBzdHlsZSBiZWZvcmUgY29tcHV0ZWQgc29tZWhvd1xuXHRcdC8vIGZpeGVzIGFuIGlzc3VlIHdpdGggZ2V0dGluZyB3cm9uZyB2YWx1ZXNcblx0XHQvLyBvbiBkZXRhY2hlZCBlbGVtZW50c1xuXHRcdHN0eWxlID0gZWxlbS5zdHlsZTtcblxuXHRjb21wdXRlZCA9IGNvbXB1dGVkIHx8IGdldFN0eWxlcyggZWxlbSApO1xuXG5cdC8vIGdldFByb3BlcnR5VmFsdWUgaXMgbmVlZGVkIGZvcjpcblx0Ly8gICAuY3NzKCdmaWx0ZXInKSAoSUUgOSBvbmx5LCAjMTI1MzcpXG5cdC8vICAgLmNzcygnLS1jdXN0b21Qcm9wZXJ0eSkgKCMzMTQ0KVxuXHRpZiAoIGNvbXB1dGVkICkge1xuXHRcdHJldCA9IGNvbXB1dGVkLmdldFByb3BlcnR5VmFsdWUoIG5hbWUgKSB8fCBjb21wdXRlZFsgbmFtZSBdO1xuXG5cdFx0aWYgKCByZXQgPT09IFwiXCIgJiYgIWpRdWVyeS5jb250YWlucyggZWxlbS5vd25lckRvY3VtZW50LCBlbGVtICkgKSB7XG5cdFx0XHRyZXQgPSBqUXVlcnkuc3R5bGUoIGVsZW0sIG5hbWUgKTtcblx0XHR9XG5cblx0XHQvLyBBIHRyaWJ1dGUgdG8gdGhlIFwiYXdlc29tZSBoYWNrIGJ5IERlYW4gRWR3YXJkc1wiXG5cdFx0Ly8gQW5kcm9pZCBCcm93c2VyIHJldHVybnMgcGVyY2VudGFnZSBmb3Igc29tZSB2YWx1ZXMsXG5cdFx0Ly8gYnV0IHdpZHRoIHNlZW1zIHRvIGJlIHJlbGlhYmx5IHBpeGVscy5cblx0XHQvLyBUaGlzIGlzIGFnYWluc3QgdGhlIENTU09NIGRyYWZ0IHNwZWM6XG5cdFx0Ly8gaHR0cHM6Ly9kcmFmdHMuY3Nzd2cub3JnL2Nzc29tLyNyZXNvbHZlZC12YWx1ZXNcblx0XHRpZiAoICFzdXBwb3J0LnBpeGVsQm94U3R5bGVzKCkgJiYgcm51bW5vbnB4LnRlc3QoIHJldCApICYmIHJib3hTdHlsZS50ZXN0KCBuYW1lICkgKSB7XG5cblx0XHRcdC8vIFJlbWVtYmVyIHRoZSBvcmlnaW5hbCB2YWx1ZXNcblx0XHRcdHdpZHRoID0gc3R5bGUud2lkdGg7XG5cdFx0XHRtaW5XaWR0aCA9IHN0eWxlLm1pbldpZHRoO1xuXHRcdFx0bWF4V2lkdGggPSBzdHlsZS5tYXhXaWR0aDtcblxuXHRcdFx0Ly8gUHV0IGluIHRoZSBuZXcgdmFsdWVzIHRvIGdldCBhIGNvbXB1dGVkIHZhbHVlIG91dFxuXHRcdFx0c3R5bGUubWluV2lkdGggPSBzdHlsZS5tYXhXaWR0aCA9IHN0eWxlLndpZHRoID0gcmV0O1xuXHRcdFx0cmV0ID0gY29tcHV0ZWQud2lkdGg7XG5cblx0XHRcdC8vIFJldmVydCB0aGUgY2hhbmdlZCB2YWx1ZXNcblx0XHRcdHN0eWxlLndpZHRoID0gd2lkdGg7XG5cdFx0XHRzdHlsZS5taW5XaWR0aCA9IG1pbldpZHRoO1xuXHRcdFx0c3R5bGUubWF4V2lkdGggPSBtYXhXaWR0aDtcblx0XHR9XG5cdH1cblxuXHRyZXR1cm4gcmV0ICE9PSB1bmRlZmluZWQgP1xuXG5cdFx0Ly8gU3VwcG9ydDogSUUgPD05IC0gMTEgb25seVxuXHRcdC8vIElFIHJldHVybnMgekluZGV4IHZhbHVlIGFzIGFuIGludGVnZXIuXG5cdFx0cmV0ICsgXCJcIiA6XG5cdFx0cmV0O1xufVxuXG5cbmZ1bmN0aW9uIGFkZEdldEhvb2tJZiggY29uZGl0aW9uRm4sIGhvb2tGbiApIHtcblxuXHQvLyBEZWZpbmUgdGhlIGhvb2ssIHdlJ2xsIGNoZWNrIG9uIHRoZSBmaXJzdCBydW4gaWYgaXQncyByZWFsbHkgbmVlZGVkLlxuXHRyZXR1cm4ge1xuXHRcdGdldDogZnVuY3Rpb24oKSB7XG5cdFx0XHRpZiAoIGNvbmRpdGlvbkZuKCkgKSB7XG5cblx0XHRcdFx0Ly8gSG9vayBub3QgbmVlZGVkIChvciBpdCdzIG5vdCBwb3NzaWJsZSB0byB1c2UgaXQgZHVlXG5cdFx0XHRcdC8vIHRvIG1pc3NpbmcgZGVwZW5kZW5jeSksIHJlbW92ZSBpdC5cblx0XHRcdFx0ZGVsZXRlIHRoaXMuZ2V0O1xuXHRcdFx0XHRyZXR1cm47XG5cdFx0XHR9XG5cblx0XHRcdC8vIEhvb2sgbmVlZGVkOyByZWRlZmluZSBpdCBzbyB0aGF0IHRoZSBzdXBwb3J0IHRlc3QgaXMgbm90IGV4ZWN1dGVkIGFnYWluLlxuXHRcdFx0cmV0dXJuICggdGhpcy5nZXQgPSBob29rRm4gKS5hcHBseSggdGhpcywgYXJndW1lbnRzICk7XG5cdFx0fVxuXHR9O1xufVxuXG5cbnZhclxuXG5cdC8vIFN3YXBwYWJsZSBpZiBkaXNwbGF5IGlzIG5vbmUgb3Igc3RhcnRzIHdpdGggdGFibGVcblx0Ly8gZXhjZXB0IFwidGFibGVcIiwgXCJ0YWJsZS1jZWxsXCIsIG9yIFwidGFibGUtY2FwdGlvblwiXG5cdC8vIFNlZSBoZXJlIGZvciBkaXNwbGF5IHZhbHVlczogaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9DU1MvZGlzcGxheVxuXHRyZGlzcGxheXN3YXAgPSAvXihub25lfHRhYmxlKD8hLWNbZWFdKS4rKS8sXG5cdHJjdXN0b21Qcm9wID0gL14tLS8sXG5cdGNzc1Nob3cgPSB7IHBvc2l0aW9uOiBcImFic29sdXRlXCIsIHZpc2liaWxpdHk6IFwiaGlkZGVuXCIsIGRpc3BsYXk6IFwiYmxvY2tcIiB9LFxuXHRjc3NOb3JtYWxUcmFuc2Zvcm0gPSB7XG5cdFx0bGV0dGVyU3BhY2luZzogXCIwXCIsXG5cdFx0Zm9udFdlaWdodDogXCI0MDBcIlxuXHR9LFxuXG5cdGNzc1ByZWZpeGVzID0gWyBcIldlYmtpdFwiLCBcIk1velwiLCBcIm1zXCIgXSxcblx0ZW1wdHlTdHlsZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoIFwiZGl2XCIgKS5zdHlsZTtcblxuLy8gUmV0dXJuIGEgY3NzIHByb3BlcnR5IG1hcHBlZCB0byBhIHBvdGVudGlhbGx5IHZlbmRvciBwcmVmaXhlZCBwcm9wZXJ0eVxuZnVuY3Rpb24gdmVuZG9yUHJvcE5hbWUoIG5hbWUgKSB7XG5cblx0Ly8gU2hvcnRjdXQgZm9yIG5hbWVzIHRoYXQgYXJlIG5vdCB2ZW5kb3IgcHJlZml4ZWRcblx0aWYgKCBuYW1lIGluIGVtcHR5U3R5bGUgKSB7XG5cdFx0cmV0dXJuIG5hbWU7XG5cdH1cblxuXHQvLyBDaGVjayBmb3IgdmVuZG9yIHByZWZpeGVkIG5hbWVzXG5cdHZhciBjYXBOYW1lID0gbmFtZVsgMCBdLnRvVXBwZXJDYXNlKCkgKyBuYW1lLnNsaWNlKCAxICksXG5cdFx0aSA9IGNzc1ByZWZpeGVzLmxlbmd0aDtcblxuXHR3aGlsZSAoIGktLSApIHtcblx0XHRuYW1lID0gY3NzUHJlZml4ZXNbIGkgXSArIGNhcE5hbWU7XG5cdFx0aWYgKCBuYW1lIGluIGVtcHR5U3R5bGUgKSB7XG5cdFx0XHRyZXR1cm4gbmFtZTtcblx0XHR9XG5cdH1cbn1cblxuLy8gUmV0dXJuIGEgcHJvcGVydHkgbWFwcGVkIGFsb25nIHdoYXQgalF1ZXJ5LmNzc1Byb3BzIHN1Z2dlc3RzIG9yIHRvXG4vLyBhIHZlbmRvciBwcmVmaXhlZCBwcm9wZXJ0eS5cbmZ1bmN0aW9uIGZpbmFsUHJvcE5hbWUoIG5hbWUgKSB7XG5cdHZhciByZXQgPSBqUXVlcnkuY3NzUHJvcHNbIG5hbWUgXTtcblx0aWYgKCAhcmV0ICkge1xuXHRcdHJldCA9IGpRdWVyeS5jc3NQcm9wc1sgbmFtZSBdID0gdmVuZG9yUHJvcE5hbWUoIG5hbWUgKSB8fCBuYW1lO1xuXHR9XG5cdHJldHVybiByZXQ7XG59XG5cbmZ1bmN0aW9uIHNldFBvc2l0aXZlTnVtYmVyKCBlbGVtLCB2YWx1ZSwgc3VidHJhY3QgKSB7XG5cblx0Ly8gQW55IHJlbGF0aXZlICgrLy0pIHZhbHVlcyBoYXZlIGFscmVhZHkgYmVlblxuXHQvLyBub3JtYWxpemVkIGF0IHRoaXMgcG9pbnRcblx0dmFyIG1hdGNoZXMgPSByY3NzTnVtLmV4ZWMoIHZhbHVlICk7XG5cdHJldHVybiBtYXRjaGVzID9cblxuXHRcdC8vIEd1YXJkIGFnYWluc3QgdW5kZWZpbmVkIFwic3VidHJhY3RcIiwgZS5nLiwgd2hlbiB1c2VkIGFzIGluIGNzc0hvb2tzXG5cdFx0TWF0aC5tYXgoIDAsIG1hdGNoZXNbIDIgXSAtICggc3VidHJhY3QgfHwgMCApICkgKyAoIG1hdGNoZXNbIDMgXSB8fCBcInB4XCIgKSA6XG5cdFx0dmFsdWU7XG59XG5cbmZ1bmN0aW9uIGJveE1vZGVsQWRqdXN0bWVudCggZWxlbSwgZGltZW5zaW9uLCBib3gsIGlzQm9yZGVyQm94LCBzdHlsZXMsIGNvbXB1dGVkVmFsICkge1xuXHR2YXIgaSA9IGRpbWVuc2lvbiA9PT0gXCJ3aWR0aFwiID8gMSA6IDAsXG5cdFx0ZXh0cmEgPSAwLFxuXHRcdGRlbHRhID0gMDtcblxuXHQvLyBBZGp1c3RtZW50IG1heSBub3QgYmUgbmVjZXNzYXJ5XG5cdGlmICggYm94ID09PSAoIGlzQm9yZGVyQm94ID8gXCJib3JkZXJcIiA6IFwiY29udGVudFwiICkgKSB7XG5cdFx0cmV0dXJuIDA7XG5cdH1cblxuXHRmb3IgKCA7IGkgPCA0OyBpICs9IDIgKSB7XG5cblx0XHQvLyBCb3RoIGJveCBtb2RlbHMgZXhjbHVkZSBtYXJnaW5cblx0XHRpZiAoIGJveCA9PT0gXCJtYXJnaW5cIiApIHtcblx0XHRcdGRlbHRhICs9IGpRdWVyeS5jc3MoIGVsZW0sIGJveCArIGNzc0V4cGFuZFsgaSBdLCB0cnVlLCBzdHlsZXMgKTtcblx0XHR9XG5cblx0XHQvLyBJZiB3ZSBnZXQgaGVyZSB3aXRoIGEgY29udGVudC1ib3gsIHdlJ3JlIHNlZWtpbmcgXCJwYWRkaW5nXCIgb3IgXCJib3JkZXJcIiBvciBcIm1hcmdpblwiXG5cdFx0aWYgKCAhaXNCb3JkZXJCb3ggKSB7XG5cblx0XHRcdC8vIEFkZCBwYWRkaW5nXG5cdFx0XHRkZWx0YSArPSBqUXVlcnkuY3NzKCBlbGVtLCBcInBhZGRpbmdcIiArIGNzc0V4cGFuZFsgaSBdLCB0cnVlLCBzdHlsZXMgKTtcblxuXHRcdFx0Ly8gRm9yIFwiYm9yZGVyXCIgb3IgXCJtYXJnaW5cIiwgYWRkIGJvcmRlclxuXHRcdFx0aWYgKCBib3ggIT09IFwicGFkZGluZ1wiICkge1xuXHRcdFx0XHRkZWx0YSArPSBqUXVlcnkuY3NzKCBlbGVtLCBcImJvcmRlclwiICsgY3NzRXhwYW5kWyBpIF0gKyBcIldpZHRoXCIsIHRydWUsIHN0eWxlcyApO1xuXG5cdFx0XHQvLyBCdXQgc3RpbGwga2VlcCB0cmFjayBvZiBpdCBvdGhlcndpc2Vcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGV4dHJhICs9IGpRdWVyeS5jc3MoIGVsZW0sIFwiYm9yZGVyXCIgKyBjc3NFeHBhbmRbIGkgXSArIFwiV2lkdGhcIiwgdHJ1ZSwgc3R5bGVzICk7XG5cdFx0XHR9XG5cblx0XHQvLyBJZiB3ZSBnZXQgaGVyZSB3aXRoIGEgYm9yZGVyLWJveCAoY29udGVudCArIHBhZGRpbmcgKyBib3JkZXIpLCB3ZSdyZSBzZWVraW5nIFwiY29udGVudFwiIG9yXG5cdFx0Ly8gXCJwYWRkaW5nXCIgb3IgXCJtYXJnaW5cIlxuXHRcdH0gZWxzZSB7XG5cblx0XHRcdC8vIEZvciBcImNvbnRlbnRcIiwgc3VidHJhY3QgcGFkZGluZ1xuXHRcdFx0aWYgKCBib3ggPT09IFwiY29udGVudFwiICkge1xuXHRcdFx0XHRkZWx0YSAtPSBqUXVlcnkuY3NzKCBlbGVtLCBcInBhZGRpbmdcIiArIGNzc0V4cGFuZFsgaSBdLCB0cnVlLCBzdHlsZXMgKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gRm9yIFwiY29udGVudFwiIG9yIFwicGFkZGluZ1wiLCBzdWJ0cmFjdCBib3JkZXJcblx0XHRcdGlmICggYm94ICE9PSBcIm1hcmdpblwiICkge1xuXHRcdFx0XHRkZWx0YSAtPSBqUXVlcnkuY3NzKCBlbGVtLCBcImJvcmRlclwiICsgY3NzRXhwYW5kWyBpIF0gKyBcIldpZHRoXCIsIHRydWUsIHN0eWxlcyApO1xuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdC8vIEFjY291bnQgZm9yIHBvc2l0aXZlIGNvbnRlbnQtYm94IHNjcm9sbCBndXR0ZXIgd2hlbiByZXF1ZXN0ZWQgYnkgcHJvdmlkaW5nIGNvbXB1dGVkVmFsXG5cdGlmICggIWlzQm9yZGVyQm94ICYmIGNvbXB1dGVkVmFsID49IDAgKSB7XG5cblx0XHQvLyBvZmZzZXRXaWR0aC9vZmZzZXRIZWlnaHQgaXMgYSByb3VuZGVkIHN1bSBvZiBjb250ZW50LCBwYWRkaW5nLCBzY3JvbGwgZ3V0dGVyLCBhbmQgYm9yZGVyXG5cdFx0Ly8gQXNzdW1pbmcgaW50ZWdlciBzY3JvbGwgZ3V0dGVyLCBzdWJ0cmFjdCB0aGUgcmVzdCBhbmQgcm91bmQgZG93blxuXHRcdGRlbHRhICs9IE1hdGgubWF4KCAwLCBNYXRoLmNlaWwoXG5cdFx0XHRlbGVtWyBcIm9mZnNldFwiICsgZGltZW5zaW9uWyAwIF0udG9VcHBlckNhc2UoKSArIGRpbWVuc2lvbi5zbGljZSggMSApIF0gLVxuXHRcdFx0Y29tcHV0ZWRWYWwgLVxuXHRcdFx0ZGVsdGEgLVxuXHRcdFx0ZXh0cmEgLVxuXHRcdFx0MC41XG5cdFx0KSApO1xuXHR9XG5cblx0cmV0dXJuIGRlbHRhO1xufVxuXG5mdW5jdGlvbiBnZXRXaWR0aE9ySGVpZ2h0KCBlbGVtLCBkaW1lbnNpb24sIGV4dHJhICkge1xuXG5cdC8vIFN0YXJ0IHdpdGggY29tcHV0ZWQgc3R5bGVcblx0dmFyIHN0eWxlcyA9IGdldFN0eWxlcyggZWxlbSApLFxuXHRcdHZhbCA9IGN1ckNTUyggZWxlbSwgZGltZW5zaW9uLCBzdHlsZXMgKSxcblx0XHRpc0JvcmRlckJveCA9IGpRdWVyeS5jc3MoIGVsZW0sIFwiYm94U2l6aW5nXCIsIGZhbHNlLCBzdHlsZXMgKSA9PT0gXCJib3JkZXItYm94XCIsXG5cdFx0dmFsdWVJc0JvcmRlckJveCA9IGlzQm9yZGVyQm94O1xuXG5cdC8vIFN1cHBvcnQ6IEZpcmVmb3ggPD01NFxuXHQvLyBSZXR1cm4gYSBjb25mb3VuZGluZyBub24tcGl4ZWwgdmFsdWUgb3IgZmVpZ24gaWdub3JhbmNlLCBhcyBhcHByb3ByaWF0ZS5cblx0aWYgKCBybnVtbm9ucHgudGVzdCggdmFsICkgKSB7XG5cdFx0aWYgKCAhZXh0cmEgKSB7XG5cdFx0XHRyZXR1cm4gdmFsO1xuXHRcdH1cblx0XHR2YWwgPSBcImF1dG9cIjtcblx0fVxuXG5cdC8vIENoZWNrIGZvciBzdHlsZSBpbiBjYXNlIGEgYnJvd3NlciB3aGljaCByZXR1cm5zIHVucmVsaWFibGUgdmFsdWVzXG5cdC8vIGZvciBnZXRDb21wdXRlZFN0eWxlIHNpbGVudGx5IGZhbGxzIGJhY2sgdG8gdGhlIHJlbGlhYmxlIGVsZW0uc3R5bGVcblx0dmFsdWVJc0JvcmRlckJveCA9IHZhbHVlSXNCb3JkZXJCb3ggJiZcblx0XHQoIHN1cHBvcnQuYm94U2l6aW5nUmVsaWFibGUoKSB8fCB2YWwgPT09IGVsZW0uc3R5bGVbIGRpbWVuc2lvbiBdICk7XG5cblx0Ly8gRmFsbCBiYWNrIHRvIG9mZnNldFdpZHRoL29mZnNldEhlaWdodCB3aGVuIHZhbHVlIGlzIFwiYXV0b1wiXG5cdC8vIFRoaXMgaGFwcGVucyBmb3IgaW5saW5lIGVsZW1lbnRzIHdpdGggbm8gZXhwbGljaXQgc2V0dGluZyAoZ2gtMzU3MSlcblx0Ly8gU3VwcG9ydDogQW5kcm9pZCA8PTQuMSAtIDQuMyBvbmx5XG5cdC8vIEFsc28gdXNlIG9mZnNldFdpZHRoL29mZnNldEhlaWdodCBmb3IgbWlzcmVwb3J0ZWQgaW5saW5lIGRpbWVuc2lvbnMgKGdoLTM2MDIpXG5cdGlmICggdmFsID09PSBcImF1dG9cIiB8fFxuXHRcdCFwYXJzZUZsb2F0KCB2YWwgKSAmJiBqUXVlcnkuY3NzKCBlbGVtLCBcImRpc3BsYXlcIiwgZmFsc2UsIHN0eWxlcyApID09PSBcImlubGluZVwiICkge1xuXG5cdFx0dmFsID0gZWxlbVsgXCJvZmZzZXRcIiArIGRpbWVuc2lvblsgMCBdLnRvVXBwZXJDYXNlKCkgKyBkaW1lbnNpb24uc2xpY2UoIDEgKSBdO1xuXG5cdFx0Ly8gb2Zmc2V0V2lkdGgvb2Zmc2V0SGVpZ2h0IHByb3ZpZGUgYm9yZGVyLWJveCB2YWx1ZXNcblx0XHR2YWx1ZUlzQm9yZGVyQm94ID0gdHJ1ZTtcblx0fVxuXG5cdC8vIE5vcm1hbGl6ZSBcIlwiIGFuZCBhdXRvXG5cdHZhbCA9IHBhcnNlRmxvYXQoIHZhbCApIHx8IDA7XG5cblx0Ly8gQWRqdXN0IGZvciB0aGUgZWxlbWVudCdzIGJveCBtb2RlbFxuXHRyZXR1cm4gKCB2YWwgK1xuXHRcdGJveE1vZGVsQWRqdXN0bWVudChcblx0XHRcdGVsZW0sXG5cdFx0XHRkaW1lbnNpb24sXG5cdFx0XHRleHRyYSB8fCAoIGlzQm9yZGVyQm94ID8gXCJib3JkZXJcIiA6IFwiY29udGVudFwiICksXG5cdFx0XHR2YWx1ZUlzQm9yZGVyQm94LFxuXHRcdFx0c3R5bGVzLFxuXG5cdFx0XHQvLyBQcm92aWRlIHRoZSBjdXJyZW50IGNvbXB1dGVkIHNpemUgdG8gcmVxdWVzdCBzY3JvbGwgZ3V0dGVyIGNhbGN1bGF0aW9uIChnaC0zNTg5KVxuXHRcdFx0dmFsXG5cdFx0KVxuXHQpICsgXCJweFwiO1xufVxuXG5qUXVlcnkuZXh0ZW5kKCB7XG5cblx0Ly8gQWRkIGluIHN0eWxlIHByb3BlcnR5IGhvb2tzIGZvciBvdmVycmlkaW5nIHRoZSBkZWZhdWx0XG5cdC8vIGJlaGF2aW9yIG9mIGdldHRpbmcgYW5kIHNldHRpbmcgYSBzdHlsZSBwcm9wZXJ0eVxuXHRjc3NIb29rczoge1xuXHRcdG9wYWNpdHk6IHtcblx0XHRcdGdldDogZnVuY3Rpb24oIGVsZW0sIGNvbXB1dGVkICkge1xuXHRcdFx0XHRpZiAoIGNvbXB1dGVkICkge1xuXG5cdFx0XHRcdFx0Ly8gV2Ugc2hvdWxkIGFsd2F5cyBnZXQgYSBudW1iZXIgYmFjayBmcm9tIG9wYWNpdHlcblx0XHRcdFx0XHR2YXIgcmV0ID0gY3VyQ1NTKCBlbGVtLCBcIm9wYWNpdHlcIiApO1xuXHRcdFx0XHRcdHJldHVybiByZXQgPT09IFwiXCIgPyBcIjFcIiA6IHJldDtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0fSxcblxuXHQvLyBEb24ndCBhdXRvbWF0aWNhbGx5IGFkZCBcInB4XCIgdG8gdGhlc2UgcG9zc2libHktdW5pdGxlc3MgcHJvcGVydGllc1xuXHRjc3NOdW1iZXI6IHtcblx0XHRcImFuaW1hdGlvbkl0ZXJhdGlvbkNvdW50XCI6IHRydWUsXG5cdFx0XCJjb2x1bW5Db3VudFwiOiB0cnVlLFxuXHRcdFwiZmlsbE9wYWNpdHlcIjogdHJ1ZSxcblx0XHRcImZsZXhHcm93XCI6IHRydWUsXG5cdFx0XCJmbGV4U2hyaW5rXCI6IHRydWUsXG5cdFx0XCJmb250V2VpZ2h0XCI6IHRydWUsXG5cdFx0XCJsaW5lSGVpZ2h0XCI6IHRydWUsXG5cdFx0XCJvcGFjaXR5XCI6IHRydWUsXG5cdFx0XCJvcmRlclwiOiB0cnVlLFxuXHRcdFwib3JwaGFuc1wiOiB0cnVlLFxuXHRcdFwid2lkb3dzXCI6IHRydWUsXG5cdFx0XCJ6SW5kZXhcIjogdHJ1ZSxcblx0XHRcInpvb21cIjogdHJ1ZVxuXHR9LFxuXG5cdC8vIEFkZCBpbiBwcm9wZXJ0aWVzIHdob3NlIG5hbWVzIHlvdSB3aXNoIHRvIGZpeCBiZWZvcmVcblx0Ly8gc2V0dGluZyBvciBnZXR0aW5nIHRoZSB2YWx1ZVxuXHRjc3NQcm9wczoge30sXG5cblx0Ly8gR2V0IGFuZCBzZXQgdGhlIHN0eWxlIHByb3BlcnR5IG9uIGEgRE9NIE5vZGVcblx0c3R5bGU6IGZ1bmN0aW9uKCBlbGVtLCBuYW1lLCB2YWx1ZSwgZXh0cmEgKSB7XG5cblx0XHQvLyBEb24ndCBzZXQgc3R5bGVzIG9uIHRleHQgYW5kIGNvbW1lbnQgbm9kZXNcblx0XHRpZiAoICFlbGVtIHx8IGVsZW0ubm9kZVR5cGUgPT09IDMgfHwgZWxlbS5ub2RlVHlwZSA9PT0gOCB8fCAhZWxlbS5zdHlsZSApIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHQvLyBNYWtlIHN1cmUgdGhhdCB3ZSdyZSB3b3JraW5nIHdpdGggdGhlIHJpZ2h0IG5hbWVcblx0XHR2YXIgcmV0LCB0eXBlLCBob29rcyxcblx0XHRcdG9yaWdOYW1lID0gY2FtZWxDYXNlKCBuYW1lICksXG5cdFx0XHRpc0N1c3RvbVByb3AgPSByY3VzdG9tUHJvcC50ZXN0KCBuYW1lICksXG5cdFx0XHRzdHlsZSA9IGVsZW0uc3R5bGU7XG5cblx0XHQvLyBNYWtlIHN1cmUgdGhhdCB3ZSdyZSB3b3JraW5nIHdpdGggdGhlIHJpZ2h0IG5hbWUuIFdlIGRvbid0XG5cdFx0Ly8gd2FudCB0byBxdWVyeSB0aGUgdmFsdWUgaWYgaXQgaXMgYSBDU1MgY3VzdG9tIHByb3BlcnR5XG5cdFx0Ly8gc2luY2UgdGhleSBhcmUgdXNlci1kZWZpbmVkLlxuXHRcdGlmICggIWlzQ3VzdG9tUHJvcCApIHtcblx0XHRcdG5hbWUgPSBmaW5hbFByb3BOYW1lKCBvcmlnTmFtZSApO1xuXHRcdH1cblxuXHRcdC8vIEdldHMgaG9vayBmb3IgdGhlIHByZWZpeGVkIHZlcnNpb24sIHRoZW4gdW5wcmVmaXhlZCB2ZXJzaW9uXG5cdFx0aG9va3MgPSBqUXVlcnkuY3NzSG9va3NbIG5hbWUgXSB8fCBqUXVlcnkuY3NzSG9va3NbIG9yaWdOYW1lIF07XG5cblx0XHQvLyBDaGVjayBpZiB3ZSdyZSBzZXR0aW5nIGEgdmFsdWVcblx0XHRpZiAoIHZhbHVlICE9PSB1bmRlZmluZWQgKSB7XG5cdFx0XHR0eXBlID0gdHlwZW9mIHZhbHVlO1xuXG5cdFx0XHQvLyBDb252ZXJ0IFwiKz1cIiBvciBcIi09XCIgdG8gcmVsYXRpdmUgbnVtYmVycyAoIzczNDUpXG5cdFx0XHRpZiAoIHR5cGUgPT09IFwic3RyaW5nXCIgJiYgKCByZXQgPSByY3NzTnVtLmV4ZWMoIHZhbHVlICkgKSAmJiByZXRbIDEgXSApIHtcblx0XHRcdFx0dmFsdWUgPSBhZGp1c3RDU1MoIGVsZW0sIG5hbWUsIHJldCApO1xuXG5cdFx0XHRcdC8vIEZpeGVzIGJ1ZyAjOTIzN1xuXHRcdFx0XHR0eXBlID0gXCJudW1iZXJcIjtcblx0XHRcdH1cblxuXHRcdFx0Ly8gTWFrZSBzdXJlIHRoYXQgbnVsbCBhbmQgTmFOIHZhbHVlcyBhcmVuJ3Qgc2V0ICgjNzExNilcblx0XHRcdGlmICggdmFsdWUgPT0gbnVsbCB8fCB2YWx1ZSAhPT0gdmFsdWUgKSB7XG5cdFx0XHRcdHJldHVybjtcblx0XHRcdH1cblxuXHRcdFx0Ly8gSWYgYSBudW1iZXIgd2FzIHBhc3NlZCBpbiwgYWRkIHRoZSB1bml0IChleGNlcHQgZm9yIGNlcnRhaW4gQ1NTIHByb3BlcnRpZXMpXG5cdFx0XHRpZiAoIHR5cGUgPT09IFwibnVtYmVyXCIgKSB7XG5cdFx0XHRcdHZhbHVlICs9IHJldCAmJiByZXRbIDMgXSB8fCAoIGpRdWVyeS5jc3NOdW1iZXJbIG9yaWdOYW1lIF0gPyBcIlwiIDogXCJweFwiICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIGJhY2tncm91bmQtKiBwcm9wcyBhZmZlY3Qgb3JpZ2luYWwgY2xvbmUncyB2YWx1ZXNcblx0XHRcdGlmICggIXN1cHBvcnQuY2xlYXJDbG9uZVN0eWxlICYmIHZhbHVlID09PSBcIlwiICYmIG5hbWUuaW5kZXhPZiggXCJiYWNrZ3JvdW5kXCIgKSA9PT0gMCApIHtcblx0XHRcdFx0c3R5bGVbIG5hbWUgXSA9IFwiaW5oZXJpdFwiO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBJZiBhIGhvb2sgd2FzIHByb3ZpZGVkLCB1c2UgdGhhdCB2YWx1ZSwgb3RoZXJ3aXNlIGp1c3Qgc2V0IHRoZSBzcGVjaWZpZWQgdmFsdWVcblx0XHRcdGlmICggIWhvb2tzIHx8ICEoIFwic2V0XCIgaW4gaG9va3MgKSB8fFxuXHRcdFx0XHQoIHZhbHVlID0gaG9va3Muc2V0KCBlbGVtLCB2YWx1ZSwgZXh0cmEgKSApICE9PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdFx0aWYgKCBpc0N1c3RvbVByb3AgKSB7XG5cdFx0XHRcdFx0c3R5bGUuc2V0UHJvcGVydHkoIG5hbWUsIHZhbHVlICk7XG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0c3R5bGVbIG5hbWUgXSA9IHZhbHVlO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHR9IGVsc2Uge1xuXG5cdFx0XHQvLyBJZiBhIGhvb2sgd2FzIHByb3ZpZGVkIGdldCB0aGUgbm9uLWNvbXB1dGVkIHZhbHVlIGZyb20gdGhlcmVcblx0XHRcdGlmICggaG9va3MgJiYgXCJnZXRcIiBpbiBob29rcyAmJlxuXHRcdFx0XHQoIHJldCA9IGhvb2tzLmdldCggZWxlbSwgZmFsc2UsIGV4dHJhICkgKSAhPT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRcdHJldHVybiByZXQ7XG5cdFx0XHR9XG5cblx0XHRcdC8vIE90aGVyd2lzZSBqdXN0IGdldCB0aGUgdmFsdWUgZnJvbSB0aGUgc3R5bGUgb2JqZWN0XG5cdFx0XHRyZXR1cm4gc3R5bGVbIG5hbWUgXTtcblx0XHR9XG5cdH0sXG5cblx0Y3NzOiBmdW5jdGlvbiggZWxlbSwgbmFtZSwgZXh0cmEsIHN0eWxlcyApIHtcblx0XHR2YXIgdmFsLCBudW0sIGhvb2tzLFxuXHRcdFx0b3JpZ05hbWUgPSBjYW1lbENhc2UoIG5hbWUgKSxcblx0XHRcdGlzQ3VzdG9tUHJvcCA9IHJjdXN0b21Qcm9wLnRlc3QoIG5hbWUgKTtcblxuXHRcdC8vIE1ha2Ugc3VyZSB0aGF0IHdlJ3JlIHdvcmtpbmcgd2l0aCB0aGUgcmlnaHQgbmFtZS4gV2UgZG9uJ3Rcblx0XHQvLyB3YW50IHRvIG1vZGlmeSB0aGUgdmFsdWUgaWYgaXQgaXMgYSBDU1MgY3VzdG9tIHByb3BlcnR5XG5cdFx0Ly8gc2luY2UgdGhleSBhcmUgdXNlci1kZWZpbmVkLlxuXHRcdGlmICggIWlzQ3VzdG9tUHJvcCApIHtcblx0XHRcdG5hbWUgPSBmaW5hbFByb3BOYW1lKCBvcmlnTmFtZSApO1xuXHRcdH1cblxuXHRcdC8vIFRyeSBwcmVmaXhlZCBuYW1lIGZvbGxvd2VkIGJ5IHRoZSB1bnByZWZpeGVkIG5hbWVcblx0XHRob29rcyA9IGpRdWVyeS5jc3NIb29rc1sgbmFtZSBdIHx8IGpRdWVyeS5jc3NIb29rc1sgb3JpZ05hbWUgXTtcblxuXHRcdC8vIElmIGEgaG9vayB3YXMgcHJvdmlkZWQgZ2V0IHRoZSBjb21wdXRlZCB2YWx1ZSBmcm9tIHRoZXJlXG5cdFx0aWYgKCBob29rcyAmJiBcImdldFwiIGluIGhvb2tzICkge1xuXHRcdFx0dmFsID0gaG9va3MuZ2V0KCBlbGVtLCB0cnVlLCBleHRyYSApO1xuXHRcdH1cblxuXHRcdC8vIE90aGVyd2lzZSwgaWYgYSB3YXkgdG8gZ2V0IHRoZSBjb21wdXRlZCB2YWx1ZSBleGlzdHMsIHVzZSB0aGF0XG5cdFx0aWYgKCB2YWwgPT09IHVuZGVmaW5lZCApIHtcblx0XHRcdHZhbCA9IGN1ckNTUyggZWxlbSwgbmFtZSwgc3R5bGVzICk7XG5cdFx0fVxuXG5cdFx0Ly8gQ29udmVydCBcIm5vcm1hbFwiIHRvIGNvbXB1dGVkIHZhbHVlXG5cdFx0aWYgKCB2YWwgPT09IFwibm9ybWFsXCIgJiYgbmFtZSBpbiBjc3NOb3JtYWxUcmFuc2Zvcm0gKSB7XG5cdFx0XHR2YWwgPSBjc3NOb3JtYWxUcmFuc2Zvcm1bIG5hbWUgXTtcblx0XHR9XG5cblx0XHQvLyBNYWtlIG51bWVyaWMgaWYgZm9yY2VkIG9yIGEgcXVhbGlmaWVyIHdhcyBwcm92aWRlZCBhbmQgdmFsIGxvb2tzIG51bWVyaWNcblx0XHRpZiAoIGV4dHJhID09PSBcIlwiIHx8IGV4dHJhICkge1xuXHRcdFx0bnVtID0gcGFyc2VGbG9hdCggdmFsICk7XG5cdFx0XHRyZXR1cm4gZXh0cmEgPT09IHRydWUgfHwgaXNGaW5pdGUoIG51bSApID8gbnVtIHx8IDAgOiB2YWw7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHZhbDtcblx0fVxufSApO1xuXG5qUXVlcnkuZWFjaCggWyBcImhlaWdodFwiLCBcIndpZHRoXCIgXSwgZnVuY3Rpb24oIGksIGRpbWVuc2lvbiApIHtcblx0alF1ZXJ5LmNzc0hvb2tzWyBkaW1lbnNpb24gXSA9IHtcblx0XHRnZXQ6IGZ1bmN0aW9uKCBlbGVtLCBjb21wdXRlZCwgZXh0cmEgKSB7XG5cdFx0XHRpZiAoIGNvbXB1dGVkICkge1xuXG5cdFx0XHRcdC8vIENlcnRhaW4gZWxlbWVudHMgY2FuIGhhdmUgZGltZW5zaW9uIGluZm8gaWYgd2UgaW52aXNpYmx5IHNob3cgdGhlbVxuXHRcdFx0XHQvLyBidXQgaXQgbXVzdCBoYXZlIGEgY3VycmVudCBkaXNwbGF5IHN0eWxlIHRoYXQgd291bGQgYmVuZWZpdFxuXHRcdFx0XHRyZXR1cm4gcmRpc3BsYXlzd2FwLnRlc3QoIGpRdWVyeS5jc3MoIGVsZW0sIFwiZGlzcGxheVwiICkgKSAmJlxuXG5cdFx0XHRcdFx0Ly8gU3VwcG9ydDogU2FmYXJpIDgrXG5cdFx0XHRcdFx0Ly8gVGFibGUgY29sdW1ucyBpbiBTYWZhcmkgaGF2ZSBub24temVybyBvZmZzZXRXaWR0aCAmIHplcm9cblx0XHRcdFx0XHQvLyBnZXRCb3VuZGluZ0NsaWVudFJlY3QoKS53aWR0aCB1bmxlc3MgZGlzcGxheSBpcyBjaGFuZ2VkLlxuXHRcdFx0XHRcdC8vIFN1cHBvcnQ6IElFIDw9MTEgb25seVxuXHRcdFx0XHRcdC8vIFJ1bm5pbmcgZ2V0Qm91bmRpbmdDbGllbnRSZWN0IG9uIGEgZGlzY29ubmVjdGVkIG5vZGVcblx0XHRcdFx0XHQvLyBpbiBJRSB0aHJvd3MgYW4gZXJyb3IuXG5cdFx0XHRcdFx0KCAhZWxlbS5nZXRDbGllbnRSZWN0cygpLmxlbmd0aCB8fCAhZWxlbS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKS53aWR0aCApID9cblx0XHRcdFx0XHRcdHN3YXAoIGVsZW0sIGNzc1Nob3csIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdFx0XHRyZXR1cm4gZ2V0V2lkdGhPckhlaWdodCggZWxlbSwgZGltZW5zaW9uLCBleHRyYSApO1xuXHRcdFx0XHRcdFx0fSApIDpcblx0XHRcdFx0XHRcdGdldFdpZHRoT3JIZWlnaHQoIGVsZW0sIGRpbWVuc2lvbiwgZXh0cmEgKTtcblx0XHRcdH1cblx0XHR9LFxuXG5cdFx0c2V0OiBmdW5jdGlvbiggZWxlbSwgdmFsdWUsIGV4dHJhICkge1xuXHRcdFx0dmFyIG1hdGNoZXMsXG5cdFx0XHRcdHN0eWxlcyA9IGdldFN0eWxlcyggZWxlbSApLFxuXHRcdFx0XHRpc0JvcmRlckJveCA9IGpRdWVyeS5jc3MoIGVsZW0sIFwiYm94U2l6aW5nXCIsIGZhbHNlLCBzdHlsZXMgKSA9PT0gXCJib3JkZXItYm94XCIsXG5cdFx0XHRcdHN1YnRyYWN0ID0gZXh0cmEgJiYgYm94TW9kZWxBZGp1c3RtZW50KFxuXHRcdFx0XHRcdGVsZW0sXG5cdFx0XHRcdFx0ZGltZW5zaW9uLFxuXHRcdFx0XHRcdGV4dHJhLFxuXHRcdFx0XHRcdGlzQm9yZGVyQm94LFxuXHRcdFx0XHRcdHN0eWxlc1xuXHRcdFx0XHQpO1xuXG5cdFx0XHQvLyBBY2NvdW50IGZvciB1bnJlbGlhYmxlIGJvcmRlci1ib3ggZGltZW5zaW9ucyBieSBjb21wYXJpbmcgb2Zmc2V0KiB0byBjb21wdXRlZCBhbmRcblx0XHRcdC8vIGZha2luZyBhIGNvbnRlbnQtYm94IHRvIGdldCBib3JkZXIgYW5kIHBhZGRpbmcgKGdoLTM2OTkpXG5cdFx0XHRpZiAoIGlzQm9yZGVyQm94ICYmIHN1cHBvcnQuc2Nyb2xsYm94U2l6ZSgpID09PSBzdHlsZXMucG9zaXRpb24gKSB7XG5cdFx0XHRcdHN1YnRyYWN0IC09IE1hdGguY2VpbChcblx0XHRcdFx0XHRlbGVtWyBcIm9mZnNldFwiICsgZGltZW5zaW9uWyAwIF0udG9VcHBlckNhc2UoKSArIGRpbWVuc2lvbi5zbGljZSggMSApIF0gLVxuXHRcdFx0XHRcdHBhcnNlRmxvYXQoIHN0eWxlc1sgZGltZW5zaW9uIF0gKSAtXG5cdFx0XHRcdFx0Ym94TW9kZWxBZGp1c3RtZW50KCBlbGVtLCBkaW1lbnNpb24sIFwiYm9yZGVyXCIsIGZhbHNlLCBzdHlsZXMgKSAtXG5cdFx0XHRcdFx0MC41XG5cdFx0XHRcdCk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIENvbnZlcnQgdG8gcGl4ZWxzIGlmIHZhbHVlIGFkanVzdG1lbnQgaXMgbmVlZGVkXG5cdFx0XHRpZiAoIHN1YnRyYWN0ICYmICggbWF0Y2hlcyA9IHJjc3NOdW0uZXhlYyggdmFsdWUgKSApICYmXG5cdFx0XHRcdCggbWF0Y2hlc1sgMyBdIHx8IFwicHhcIiApICE9PSBcInB4XCIgKSB7XG5cblx0XHRcdFx0ZWxlbS5zdHlsZVsgZGltZW5zaW9uIF0gPSB2YWx1ZTtcblx0XHRcdFx0dmFsdWUgPSBqUXVlcnkuY3NzKCBlbGVtLCBkaW1lbnNpb24gKTtcblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIHNldFBvc2l0aXZlTnVtYmVyKCBlbGVtLCB2YWx1ZSwgc3VidHJhY3QgKTtcblx0XHR9XG5cdH07XG59ICk7XG5cbmpRdWVyeS5jc3NIb29rcy5tYXJnaW5MZWZ0ID0gYWRkR2V0SG9va0lmKCBzdXBwb3J0LnJlbGlhYmxlTWFyZ2luTGVmdCxcblx0ZnVuY3Rpb24oIGVsZW0sIGNvbXB1dGVkICkge1xuXHRcdGlmICggY29tcHV0ZWQgKSB7XG5cdFx0XHRyZXR1cm4gKCBwYXJzZUZsb2F0KCBjdXJDU1MoIGVsZW0sIFwibWFyZ2luTGVmdFwiICkgKSB8fFxuXHRcdFx0XHRlbGVtLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLmxlZnQgLVxuXHRcdFx0XHRcdHN3YXAoIGVsZW0sIHsgbWFyZ2luTGVmdDogMCB9LCBmdW5jdGlvbigpIHtcblx0XHRcdFx0XHRcdHJldHVybiBlbGVtLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLmxlZnQ7XG5cdFx0XHRcdFx0fSApXG5cdFx0XHRcdCkgKyBcInB4XCI7XG5cdFx0fVxuXHR9XG4pO1xuXG4vLyBUaGVzZSBob29rcyBhcmUgdXNlZCBieSBhbmltYXRlIHRvIGV4cGFuZCBwcm9wZXJ0aWVzXG5qUXVlcnkuZWFjaCgge1xuXHRtYXJnaW46IFwiXCIsXG5cdHBhZGRpbmc6IFwiXCIsXG5cdGJvcmRlcjogXCJXaWR0aFwiXG59LCBmdW5jdGlvbiggcHJlZml4LCBzdWZmaXggKSB7XG5cdGpRdWVyeS5jc3NIb29rc1sgcHJlZml4ICsgc3VmZml4IF0gPSB7XG5cdFx0ZXhwYW5kOiBmdW5jdGlvbiggdmFsdWUgKSB7XG5cdFx0XHR2YXIgaSA9IDAsXG5cdFx0XHRcdGV4cGFuZGVkID0ge30sXG5cblx0XHRcdFx0Ly8gQXNzdW1lcyBhIHNpbmdsZSBudW1iZXIgaWYgbm90IGEgc3RyaW5nXG5cdFx0XHRcdHBhcnRzID0gdHlwZW9mIHZhbHVlID09PSBcInN0cmluZ1wiID8gdmFsdWUuc3BsaXQoIFwiIFwiICkgOiBbIHZhbHVlIF07XG5cblx0XHRcdGZvciAoIDsgaSA8IDQ7IGkrKyApIHtcblx0XHRcdFx0ZXhwYW5kZWRbIHByZWZpeCArIGNzc0V4cGFuZFsgaSBdICsgc3VmZml4IF0gPVxuXHRcdFx0XHRcdHBhcnRzWyBpIF0gfHwgcGFydHNbIGkgLSAyIF0gfHwgcGFydHNbIDAgXTtcblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIGV4cGFuZGVkO1xuXHRcdH1cblx0fTtcblxuXHRpZiAoIHByZWZpeCAhPT0gXCJtYXJnaW5cIiApIHtcblx0XHRqUXVlcnkuY3NzSG9va3NbIHByZWZpeCArIHN1ZmZpeCBdLnNldCA9IHNldFBvc2l0aXZlTnVtYmVyO1xuXHR9XG59ICk7XG5cbmpRdWVyeS5mbi5leHRlbmQoIHtcblx0Y3NzOiBmdW5jdGlvbiggbmFtZSwgdmFsdWUgKSB7XG5cdFx0cmV0dXJuIGFjY2VzcyggdGhpcywgZnVuY3Rpb24oIGVsZW0sIG5hbWUsIHZhbHVlICkge1xuXHRcdFx0dmFyIHN0eWxlcywgbGVuLFxuXHRcdFx0XHRtYXAgPSB7fSxcblx0XHRcdFx0aSA9IDA7XG5cblx0XHRcdGlmICggQXJyYXkuaXNBcnJheSggbmFtZSApICkge1xuXHRcdFx0XHRzdHlsZXMgPSBnZXRTdHlsZXMoIGVsZW0gKTtcblx0XHRcdFx0bGVuID0gbmFtZS5sZW5ndGg7XG5cblx0XHRcdFx0Zm9yICggOyBpIDwgbGVuOyBpKysgKSB7XG5cdFx0XHRcdFx0bWFwWyBuYW1lWyBpIF0gXSA9IGpRdWVyeS5jc3MoIGVsZW0sIG5hbWVbIGkgXSwgZmFsc2UsIHN0eWxlcyApO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0cmV0dXJuIG1hcDtcblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIHZhbHVlICE9PSB1bmRlZmluZWQgP1xuXHRcdFx0XHRqUXVlcnkuc3R5bGUoIGVsZW0sIG5hbWUsIHZhbHVlICkgOlxuXHRcdFx0XHRqUXVlcnkuY3NzKCBlbGVtLCBuYW1lICk7XG5cdFx0fSwgbmFtZSwgdmFsdWUsIGFyZ3VtZW50cy5sZW5ndGggPiAxICk7XG5cdH1cbn0gKTtcblxuXG5mdW5jdGlvbiBUd2VlbiggZWxlbSwgb3B0aW9ucywgcHJvcCwgZW5kLCBlYXNpbmcgKSB7XG5cdHJldHVybiBuZXcgVHdlZW4ucHJvdG90eXBlLmluaXQoIGVsZW0sIG9wdGlvbnMsIHByb3AsIGVuZCwgZWFzaW5nICk7XG59XG5qUXVlcnkuVHdlZW4gPSBUd2VlbjtcblxuVHdlZW4ucHJvdG90eXBlID0ge1xuXHRjb25zdHJ1Y3RvcjogVHdlZW4sXG5cdGluaXQ6IGZ1bmN0aW9uKCBlbGVtLCBvcHRpb25zLCBwcm9wLCBlbmQsIGVhc2luZywgdW5pdCApIHtcblx0XHR0aGlzLmVsZW0gPSBlbGVtO1xuXHRcdHRoaXMucHJvcCA9IHByb3A7XG5cdFx0dGhpcy5lYXNpbmcgPSBlYXNpbmcgfHwgalF1ZXJ5LmVhc2luZy5fZGVmYXVsdDtcblx0XHR0aGlzLm9wdGlvbnMgPSBvcHRpb25zO1xuXHRcdHRoaXMuc3RhcnQgPSB0aGlzLm5vdyA9IHRoaXMuY3VyKCk7XG5cdFx0dGhpcy5lbmQgPSBlbmQ7XG5cdFx0dGhpcy51bml0ID0gdW5pdCB8fCAoIGpRdWVyeS5jc3NOdW1iZXJbIHByb3AgXSA/IFwiXCIgOiBcInB4XCIgKTtcblx0fSxcblx0Y3VyOiBmdW5jdGlvbigpIHtcblx0XHR2YXIgaG9va3MgPSBUd2Vlbi5wcm9wSG9va3NbIHRoaXMucHJvcCBdO1xuXG5cdFx0cmV0dXJuIGhvb2tzICYmIGhvb2tzLmdldCA/XG5cdFx0XHRob29rcy5nZXQoIHRoaXMgKSA6XG5cdFx0XHRUd2Vlbi5wcm9wSG9va3MuX2RlZmF1bHQuZ2V0KCB0aGlzICk7XG5cdH0sXG5cdHJ1bjogZnVuY3Rpb24oIHBlcmNlbnQgKSB7XG5cdFx0dmFyIGVhc2VkLFxuXHRcdFx0aG9va3MgPSBUd2Vlbi5wcm9wSG9va3NbIHRoaXMucHJvcCBdO1xuXG5cdFx0aWYgKCB0aGlzLm9wdGlvbnMuZHVyYXRpb24gKSB7XG5cdFx0XHR0aGlzLnBvcyA9IGVhc2VkID0galF1ZXJ5LmVhc2luZ1sgdGhpcy5lYXNpbmcgXShcblx0XHRcdFx0cGVyY2VudCwgdGhpcy5vcHRpb25zLmR1cmF0aW9uICogcGVyY2VudCwgMCwgMSwgdGhpcy5vcHRpb25zLmR1cmF0aW9uXG5cdFx0XHQpO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHR0aGlzLnBvcyA9IGVhc2VkID0gcGVyY2VudDtcblx0XHR9XG5cdFx0dGhpcy5ub3cgPSAoIHRoaXMuZW5kIC0gdGhpcy5zdGFydCApICogZWFzZWQgKyB0aGlzLnN0YXJ0O1xuXG5cdFx0aWYgKCB0aGlzLm9wdGlvbnMuc3RlcCApIHtcblx0XHRcdHRoaXMub3B0aW9ucy5zdGVwLmNhbGwoIHRoaXMuZWxlbSwgdGhpcy5ub3csIHRoaXMgKTtcblx0XHR9XG5cblx0XHRpZiAoIGhvb2tzICYmIGhvb2tzLnNldCApIHtcblx0XHRcdGhvb2tzLnNldCggdGhpcyApO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRUd2Vlbi5wcm9wSG9va3MuX2RlZmF1bHQuc2V0KCB0aGlzICk7XG5cdFx0fVxuXHRcdHJldHVybiB0aGlzO1xuXHR9XG59O1xuXG5Ud2Vlbi5wcm90b3R5cGUuaW5pdC5wcm90b3R5cGUgPSBUd2Vlbi5wcm90b3R5cGU7XG5cblR3ZWVuLnByb3BIb29rcyA9IHtcblx0X2RlZmF1bHQ6IHtcblx0XHRnZXQ6IGZ1bmN0aW9uKCB0d2VlbiApIHtcblx0XHRcdHZhciByZXN1bHQ7XG5cblx0XHRcdC8vIFVzZSBhIHByb3BlcnR5IG9uIHRoZSBlbGVtZW50IGRpcmVjdGx5IHdoZW4gaXQgaXMgbm90IGEgRE9NIGVsZW1lbnQsXG5cdFx0XHQvLyBvciB3aGVuIHRoZXJlIGlzIG5vIG1hdGNoaW5nIHN0eWxlIHByb3BlcnR5IHRoYXQgZXhpc3RzLlxuXHRcdFx0aWYgKCB0d2Vlbi5lbGVtLm5vZGVUeXBlICE9PSAxIHx8XG5cdFx0XHRcdHR3ZWVuLmVsZW1bIHR3ZWVuLnByb3AgXSAhPSBudWxsICYmIHR3ZWVuLmVsZW0uc3R5bGVbIHR3ZWVuLnByb3AgXSA9PSBudWxsICkge1xuXHRcdFx0XHRyZXR1cm4gdHdlZW4uZWxlbVsgdHdlZW4ucHJvcCBdO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBQYXNzaW5nIGFuIGVtcHR5IHN0cmluZyBhcyBhIDNyZCBwYXJhbWV0ZXIgdG8gLmNzcyB3aWxsIGF1dG9tYXRpY2FsbHlcblx0XHRcdC8vIGF0dGVtcHQgYSBwYXJzZUZsb2F0IGFuZCBmYWxsYmFjayB0byBhIHN0cmluZyBpZiB0aGUgcGFyc2UgZmFpbHMuXG5cdFx0XHQvLyBTaW1wbGUgdmFsdWVzIHN1Y2ggYXMgXCIxMHB4XCIgYXJlIHBhcnNlZCB0byBGbG9hdDtcblx0XHRcdC8vIGNvbXBsZXggdmFsdWVzIHN1Y2ggYXMgXCJyb3RhdGUoMXJhZClcIiBhcmUgcmV0dXJuZWQgYXMtaXMuXG5cdFx0XHRyZXN1bHQgPSBqUXVlcnkuY3NzKCB0d2Vlbi5lbGVtLCB0d2Vlbi5wcm9wLCBcIlwiICk7XG5cblx0XHRcdC8vIEVtcHR5IHN0cmluZ3MsIG51bGwsIHVuZGVmaW5lZCBhbmQgXCJhdXRvXCIgYXJlIGNvbnZlcnRlZCB0byAwLlxuXHRcdFx0cmV0dXJuICFyZXN1bHQgfHwgcmVzdWx0ID09PSBcImF1dG9cIiA/IDAgOiByZXN1bHQ7XG5cdFx0fSxcblx0XHRzZXQ6IGZ1bmN0aW9uKCB0d2VlbiApIHtcblxuXHRcdFx0Ly8gVXNlIHN0ZXAgaG9vayBmb3IgYmFjayBjb21wYXQuXG5cdFx0XHQvLyBVc2UgY3NzSG9vayBpZiBpdHMgdGhlcmUuXG5cdFx0XHQvLyBVc2UgLnN0eWxlIGlmIGF2YWlsYWJsZSBhbmQgdXNlIHBsYWluIHByb3BlcnRpZXMgd2hlcmUgYXZhaWxhYmxlLlxuXHRcdFx0aWYgKCBqUXVlcnkuZnguc3RlcFsgdHdlZW4ucHJvcCBdICkge1xuXHRcdFx0XHRqUXVlcnkuZnguc3RlcFsgdHdlZW4ucHJvcCBdKCB0d2VlbiApO1xuXHRcdFx0fSBlbHNlIGlmICggdHdlZW4uZWxlbS5ub2RlVHlwZSA9PT0gMSAmJlxuXHRcdFx0XHQoIHR3ZWVuLmVsZW0uc3R5bGVbIGpRdWVyeS5jc3NQcm9wc1sgdHdlZW4ucHJvcCBdIF0gIT0gbnVsbCB8fFxuXHRcdFx0XHRcdGpRdWVyeS5jc3NIb29rc1sgdHdlZW4ucHJvcCBdICkgKSB7XG5cdFx0XHRcdGpRdWVyeS5zdHlsZSggdHdlZW4uZWxlbSwgdHdlZW4ucHJvcCwgdHdlZW4ubm93ICsgdHdlZW4udW5pdCApO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0dHdlZW4uZWxlbVsgdHdlZW4ucHJvcCBdID0gdHdlZW4ubm93O1xuXHRcdFx0fVxuXHRcdH1cblx0fVxufTtcblxuLy8gU3VwcG9ydDogSUUgPD05IG9ubHlcbi8vIFBhbmljIGJhc2VkIGFwcHJvYWNoIHRvIHNldHRpbmcgdGhpbmdzIG9uIGRpc2Nvbm5lY3RlZCBub2Rlc1xuVHdlZW4ucHJvcEhvb2tzLnNjcm9sbFRvcCA9IFR3ZWVuLnByb3BIb29rcy5zY3JvbGxMZWZ0ID0ge1xuXHRzZXQ6IGZ1bmN0aW9uKCB0d2VlbiApIHtcblx0XHRpZiAoIHR3ZWVuLmVsZW0ubm9kZVR5cGUgJiYgdHdlZW4uZWxlbS5wYXJlbnROb2RlICkge1xuXHRcdFx0dHdlZW4uZWxlbVsgdHdlZW4ucHJvcCBdID0gdHdlZW4ubm93O1xuXHRcdH1cblx0fVxufTtcblxualF1ZXJ5LmVhc2luZyA9IHtcblx0bGluZWFyOiBmdW5jdGlvbiggcCApIHtcblx0XHRyZXR1cm4gcDtcblx0fSxcblx0c3dpbmc6IGZ1bmN0aW9uKCBwICkge1xuXHRcdHJldHVybiAwLjUgLSBNYXRoLmNvcyggcCAqIE1hdGguUEkgKSAvIDI7XG5cdH0sXG5cdF9kZWZhdWx0OiBcInN3aW5nXCJcbn07XG5cbmpRdWVyeS5meCA9IFR3ZWVuLnByb3RvdHlwZS5pbml0O1xuXG4vLyBCYWNrIGNvbXBhdCA8MS44IGV4dGVuc2lvbiBwb2ludFxualF1ZXJ5LmZ4LnN0ZXAgPSB7fTtcblxuXG5cblxudmFyXG5cdGZ4Tm93LCBpblByb2dyZXNzLFxuXHRyZnh0eXBlcyA9IC9eKD86dG9nZ2xlfHNob3d8aGlkZSkkLyxcblx0cnJ1biA9IC9xdWV1ZUhvb2tzJC87XG5cbmZ1bmN0aW9uIHNjaGVkdWxlKCkge1xuXHRpZiAoIGluUHJvZ3Jlc3MgKSB7XG5cdFx0aWYgKCBkb2N1bWVudC5oaWRkZW4gPT09IGZhbHNlICYmIHdpbmRvdy5yZXF1ZXN0QW5pbWF0aW9uRnJhbWUgKSB7XG5cdFx0XHR3aW5kb3cucmVxdWVzdEFuaW1hdGlvbkZyYW1lKCBzY2hlZHVsZSApO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHR3aW5kb3cuc2V0VGltZW91dCggc2NoZWR1bGUsIGpRdWVyeS5meC5pbnRlcnZhbCApO1xuXHRcdH1cblxuXHRcdGpRdWVyeS5meC50aWNrKCk7XG5cdH1cbn1cblxuLy8gQW5pbWF0aW9ucyBjcmVhdGVkIHN5bmNocm9ub3VzbHkgd2lsbCBydW4gc3luY2hyb25vdXNseVxuZnVuY3Rpb24gY3JlYXRlRnhOb3coKSB7XG5cdHdpbmRvdy5zZXRUaW1lb3V0KCBmdW5jdGlvbigpIHtcblx0XHRmeE5vdyA9IHVuZGVmaW5lZDtcblx0fSApO1xuXHRyZXR1cm4gKCBmeE5vdyA9IERhdGUubm93KCkgKTtcbn1cblxuLy8gR2VuZXJhdGUgcGFyYW1ldGVycyB0byBjcmVhdGUgYSBzdGFuZGFyZCBhbmltYXRpb25cbmZ1bmN0aW9uIGdlbkZ4KCB0eXBlLCBpbmNsdWRlV2lkdGggKSB7XG5cdHZhciB3aGljaCxcblx0XHRpID0gMCxcblx0XHRhdHRycyA9IHsgaGVpZ2h0OiB0eXBlIH07XG5cblx0Ly8gSWYgd2UgaW5jbHVkZSB3aWR0aCwgc3RlcCB2YWx1ZSBpcyAxIHRvIGRvIGFsbCBjc3NFeHBhbmQgdmFsdWVzLFxuXHQvLyBvdGhlcndpc2Ugc3RlcCB2YWx1ZSBpcyAyIHRvIHNraXAgb3ZlciBMZWZ0IGFuZCBSaWdodFxuXHRpbmNsdWRlV2lkdGggPSBpbmNsdWRlV2lkdGggPyAxIDogMDtcblx0Zm9yICggOyBpIDwgNDsgaSArPSAyIC0gaW5jbHVkZVdpZHRoICkge1xuXHRcdHdoaWNoID0gY3NzRXhwYW5kWyBpIF07XG5cdFx0YXR0cnNbIFwibWFyZ2luXCIgKyB3aGljaCBdID0gYXR0cnNbIFwicGFkZGluZ1wiICsgd2hpY2ggXSA9IHR5cGU7XG5cdH1cblxuXHRpZiAoIGluY2x1ZGVXaWR0aCApIHtcblx0XHRhdHRycy5vcGFjaXR5ID0gYXR0cnMud2lkdGggPSB0eXBlO1xuXHR9XG5cblx0cmV0dXJuIGF0dHJzO1xufVxuXG5mdW5jdGlvbiBjcmVhdGVUd2VlbiggdmFsdWUsIHByb3AsIGFuaW1hdGlvbiApIHtcblx0dmFyIHR3ZWVuLFxuXHRcdGNvbGxlY3Rpb24gPSAoIEFuaW1hdGlvbi50d2VlbmVyc1sgcHJvcCBdIHx8IFtdICkuY29uY2F0KCBBbmltYXRpb24udHdlZW5lcnNbIFwiKlwiIF0gKSxcblx0XHRpbmRleCA9IDAsXG5cdFx0bGVuZ3RoID0gY29sbGVjdGlvbi5sZW5ndGg7XG5cdGZvciAoIDsgaW5kZXggPCBsZW5ndGg7IGluZGV4KysgKSB7XG5cdFx0aWYgKCAoIHR3ZWVuID0gY29sbGVjdGlvblsgaW5kZXggXS5jYWxsKCBhbmltYXRpb24sIHByb3AsIHZhbHVlICkgKSApIHtcblxuXHRcdFx0Ly8gV2UncmUgZG9uZSB3aXRoIHRoaXMgcHJvcGVydHlcblx0XHRcdHJldHVybiB0d2Vlbjtcblx0XHR9XG5cdH1cbn1cblxuZnVuY3Rpb24gZGVmYXVsdFByZWZpbHRlciggZWxlbSwgcHJvcHMsIG9wdHMgKSB7XG5cdHZhciBwcm9wLCB2YWx1ZSwgdG9nZ2xlLCBob29rcywgb2xkZmlyZSwgcHJvcFR3ZWVuLCByZXN0b3JlRGlzcGxheSwgZGlzcGxheSxcblx0XHRpc0JveCA9IFwid2lkdGhcIiBpbiBwcm9wcyB8fCBcImhlaWdodFwiIGluIHByb3BzLFxuXHRcdGFuaW0gPSB0aGlzLFxuXHRcdG9yaWcgPSB7fSxcblx0XHRzdHlsZSA9IGVsZW0uc3R5bGUsXG5cdFx0aGlkZGVuID0gZWxlbS5ub2RlVHlwZSAmJiBpc0hpZGRlbldpdGhpblRyZWUoIGVsZW0gKSxcblx0XHRkYXRhU2hvdyA9IGRhdGFQcml2LmdldCggZWxlbSwgXCJmeHNob3dcIiApO1xuXG5cdC8vIFF1ZXVlLXNraXBwaW5nIGFuaW1hdGlvbnMgaGlqYWNrIHRoZSBmeCBob29rc1xuXHRpZiAoICFvcHRzLnF1ZXVlICkge1xuXHRcdGhvb2tzID0galF1ZXJ5Ll9xdWV1ZUhvb2tzKCBlbGVtLCBcImZ4XCIgKTtcblx0XHRpZiAoIGhvb2tzLnVucXVldWVkID09IG51bGwgKSB7XG5cdFx0XHRob29rcy51bnF1ZXVlZCA9IDA7XG5cdFx0XHRvbGRmaXJlID0gaG9va3MuZW1wdHkuZmlyZTtcblx0XHRcdGhvb2tzLmVtcHR5LmZpcmUgPSBmdW5jdGlvbigpIHtcblx0XHRcdFx0aWYgKCAhaG9va3MudW5xdWV1ZWQgKSB7XG5cdFx0XHRcdFx0b2xkZmlyZSgpO1xuXHRcdFx0XHR9XG5cdFx0XHR9O1xuXHRcdH1cblx0XHRob29rcy51bnF1ZXVlZCsrO1xuXG5cdFx0YW5pbS5hbHdheXMoIGZ1bmN0aW9uKCkge1xuXG5cdFx0XHQvLyBFbnN1cmUgdGhlIGNvbXBsZXRlIGhhbmRsZXIgaXMgY2FsbGVkIGJlZm9yZSB0aGlzIGNvbXBsZXRlc1xuXHRcdFx0YW5pbS5hbHdheXMoIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRob29rcy51bnF1ZXVlZC0tO1xuXHRcdFx0XHRpZiAoICFqUXVlcnkucXVldWUoIGVsZW0sIFwiZnhcIiApLmxlbmd0aCApIHtcblx0XHRcdFx0XHRob29rcy5lbXB0eS5maXJlKCk7XG5cdFx0XHRcdH1cblx0XHRcdH0gKTtcblx0XHR9ICk7XG5cdH1cblxuXHQvLyBEZXRlY3Qgc2hvdy9oaWRlIGFuaW1hdGlvbnNcblx0Zm9yICggcHJvcCBpbiBwcm9wcyApIHtcblx0XHR2YWx1ZSA9IHByb3BzWyBwcm9wIF07XG5cdFx0aWYgKCByZnh0eXBlcy50ZXN0KCB2YWx1ZSApICkge1xuXHRcdFx0ZGVsZXRlIHByb3BzWyBwcm9wIF07XG5cdFx0XHR0b2dnbGUgPSB0b2dnbGUgfHwgdmFsdWUgPT09IFwidG9nZ2xlXCI7XG5cdFx0XHRpZiAoIHZhbHVlID09PSAoIGhpZGRlbiA/IFwiaGlkZVwiIDogXCJzaG93XCIgKSApIHtcblxuXHRcdFx0XHQvLyBQcmV0ZW5kIHRvIGJlIGhpZGRlbiBpZiB0aGlzIGlzIGEgXCJzaG93XCIgYW5kXG5cdFx0XHRcdC8vIHRoZXJlIGlzIHN0aWxsIGRhdGEgZnJvbSBhIHN0b3BwZWQgc2hvdy9oaWRlXG5cdFx0XHRcdGlmICggdmFsdWUgPT09IFwic2hvd1wiICYmIGRhdGFTaG93ICYmIGRhdGFTaG93WyBwcm9wIF0gIT09IHVuZGVmaW5lZCApIHtcblx0XHRcdFx0XHRoaWRkZW4gPSB0cnVlO1xuXG5cdFx0XHRcdC8vIElnbm9yZSBhbGwgb3RoZXIgbm8tb3Agc2hvdy9oaWRlIGRhdGFcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRjb250aW51ZTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdFx0b3JpZ1sgcHJvcCBdID0gZGF0YVNob3cgJiYgZGF0YVNob3dbIHByb3AgXSB8fCBqUXVlcnkuc3R5bGUoIGVsZW0sIHByb3AgKTtcblx0XHR9XG5cdH1cblxuXHQvLyBCYWlsIG91dCBpZiB0aGlzIGlzIGEgbm8tb3AgbGlrZSAuaGlkZSgpLmhpZGUoKVxuXHRwcm9wVHdlZW4gPSAhalF1ZXJ5LmlzRW1wdHlPYmplY3QoIHByb3BzICk7XG5cdGlmICggIXByb3BUd2VlbiAmJiBqUXVlcnkuaXNFbXB0eU9iamVjdCggb3JpZyApICkge1xuXHRcdHJldHVybjtcblx0fVxuXG5cdC8vIFJlc3RyaWN0IFwib3ZlcmZsb3dcIiBhbmQgXCJkaXNwbGF5XCIgc3R5bGVzIGR1cmluZyBib3ggYW5pbWF0aW9uc1xuXHRpZiAoIGlzQm94ICYmIGVsZW0ubm9kZVR5cGUgPT09IDEgKSB7XG5cblx0XHQvLyBTdXBwb3J0OiBJRSA8PTkgLSAxMSwgRWRnZSAxMiAtIDE1XG5cdFx0Ly8gUmVjb3JkIGFsbCAzIG92ZXJmbG93IGF0dHJpYnV0ZXMgYmVjYXVzZSBJRSBkb2VzIG5vdCBpbmZlciB0aGUgc2hvcnRoYW5kXG5cdFx0Ly8gZnJvbSBpZGVudGljYWxseS12YWx1ZWQgb3ZlcmZsb3dYIGFuZCBvdmVyZmxvd1kgYW5kIEVkZ2UganVzdCBtaXJyb3JzXG5cdFx0Ly8gdGhlIG92ZXJmbG93WCB2YWx1ZSB0aGVyZS5cblx0XHRvcHRzLm92ZXJmbG93ID0gWyBzdHlsZS5vdmVyZmxvdywgc3R5bGUub3ZlcmZsb3dYLCBzdHlsZS5vdmVyZmxvd1kgXTtcblxuXHRcdC8vIElkZW50aWZ5IGEgZGlzcGxheSB0eXBlLCBwcmVmZXJyaW5nIG9sZCBzaG93L2hpZGUgZGF0YSBvdmVyIHRoZSBDU1MgY2FzY2FkZVxuXHRcdHJlc3RvcmVEaXNwbGF5ID0gZGF0YVNob3cgJiYgZGF0YVNob3cuZGlzcGxheTtcblx0XHRpZiAoIHJlc3RvcmVEaXNwbGF5ID09IG51bGwgKSB7XG5cdFx0XHRyZXN0b3JlRGlzcGxheSA9IGRhdGFQcml2LmdldCggZWxlbSwgXCJkaXNwbGF5XCIgKTtcblx0XHR9XG5cdFx0ZGlzcGxheSA9IGpRdWVyeS5jc3MoIGVsZW0sIFwiZGlzcGxheVwiICk7XG5cdFx0aWYgKCBkaXNwbGF5ID09PSBcIm5vbmVcIiApIHtcblx0XHRcdGlmICggcmVzdG9yZURpc3BsYXkgKSB7XG5cdFx0XHRcdGRpc3BsYXkgPSByZXN0b3JlRGlzcGxheTtcblx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0Ly8gR2V0IG5vbmVtcHR5IHZhbHVlKHMpIGJ5IHRlbXBvcmFyaWx5IGZvcmNpbmcgdmlzaWJpbGl0eVxuXHRcdFx0XHRzaG93SGlkZSggWyBlbGVtIF0sIHRydWUgKTtcblx0XHRcdFx0cmVzdG9yZURpc3BsYXkgPSBlbGVtLnN0eWxlLmRpc3BsYXkgfHwgcmVzdG9yZURpc3BsYXk7XG5cdFx0XHRcdGRpc3BsYXkgPSBqUXVlcnkuY3NzKCBlbGVtLCBcImRpc3BsYXlcIiApO1xuXHRcdFx0XHRzaG93SGlkZSggWyBlbGVtIF0gKTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHQvLyBBbmltYXRlIGlubGluZSBlbGVtZW50cyBhcyBpbmxpbmUtYmxvY2tcblx0XHRpZiAoIGRpc3BsYXkgPT09IFwiaW5saW5lXCIgfHwgZGlzcGxheSA9PT0gXCJpbmxpbmUtYmxvY2tcIiAmJiByZXN0b3JlRGlzcGxheSAhPSBudWxsICkge1xuXHRcdFx0aWYgKCBqUXVlcnkuY3NzKCBlbGVtLCBcImZsb2F0XCIgKSA9PT0gXCJub25lXCIgKSB7XG5cblx0XHRcdFx0Ly8gUmVzdG9yZSB0aGUgb3JpZ2luYWwgZGlzcGxheSB2YWx1ZSBhdCB0aGUgZW5kIG9mIHB1cmUgc2hvdy9oaWRlIGFuaW1hdGlvbnNcblx0XHRcdFx0aWYgKCAhcHJvcFR3ZWVuICkge1xuXHRcdFx0XHRcdGFuaW0uZG9uZSggZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0XHRzdHlsZS5kaXNwbGF5ID0gcmVzdG9yZURpc3BsYXk7XG5cdFx0XHRcdFx0fSApO1xuXHRcdFx0XHRcdGlmICggcmVzdG9yZURpc3BsYXkgPT0gbnVsbCApIHtcblx0XHRcdFx0XHRcdGRpc3BsYXkgPSBzdHlsZS5kaXNwbGF5O1xuXHRcdFx0XHRcdFx0cmVzdG9yZURpc3BsYXkgPSBkaXNwbGF5ID09PSBcIm5vbmVcIiA/IFwiXCIgOiBkaXNwbGF5O1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0XHRzdHlsZS5kaXNwbGF5ID0gXCJpbmxpbmUtYmxvY2tcIjtcblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHRpZiAoIG9wdHMub3ZlcmZsb3cgKSB7XG5cdFx0c3R5bGUub3ZlcmZsb3cgPSBcImhpZGRlblwiO1xuXHRcdGFuaW0uYWx3YXlzKCBmdW5jdGlvbigpIHtcblx0XHRcdHN0eWxlLm92ZXJmbG93ID0gb3B0cy5vdmVyZmxvd1sgMCBdO1xuXHRcdFx0c3R5bGUub3ZlcmZsb3dYID0gb3B0cy5vdmVyZmxvd1sgMSBdO1xuXHRcdFx0c3R5bGUub3ZlcmZsb3dZID0gb3B0cy5vdmVyZmxvd1sgMiBdO1xuXHRcdH0gKTtcblx0fVxuXG5cdC8vIEltcGxlbWVudCBzaG93L2hpZGUgYW5pbWF0aW9uc1xuXHRwcm9wVHdlZW4gPSBmYWxzZTtcblx0Zm9yICggcHJvcCBpbiBvcmlnICkge1xuXG5cdFx0Ly8gR2VuZXJhbCBzaG93L2hpZGUgc2V0dXAgZm9yIHRoaXMgZWxlbWVudCBhbmltYXRpb25cblx0XHRpZiAoICFwcm9wVHdlZW4gKSB7XG5cdFx0XHRpZiAoIGRhdGFTaG93ICkge1xuXHRcdFx0XHRpZiAoIFwiaGlkZGVuXCIgaW4gZGF0YVNob3cgKSB7XG5cdFx0XHRcdFx0aGlkZGVuID0gZGF0YVNob3cuaGlkZGVuO1xuXHRcdFx0XHR9XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRkYXRhU2hvdyA9IGRhdGFQcml2LmFjY2VzcyggZWxlbSwgXCJmeHNob3dcIiwgeyBkaXNwbGF5OiByZXN0b3JlRGlzcGxheSB9ICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIFN0b3JlIGhpZGRlbi92aXNpYmxlIGZvciB0b2dnbGUgc28gYC5zdG9wKCkudG9nZ2xlKClgIFwicmV2ZXJzZXNcIlxuXHRcdFx0aWYgKCB0b2dnbGUgKSB7XG5cdFx0XHRcdGRhdGFTaG93LmhpZGRlbiA9ICFoaWRkZW47XG5cdFx0XHR9XG5cblx0XHRcdC8vIFNob3cgZWxlbWVudHMgYmVmb3JlIGFuaW1hdGluZyB0aGVtXG5cdFx0XHRpZiAoIGhpZGRlbiApIHtcblx0XHRcdFx0c2hvd0hpZGUoIFsgZWxlbSBdLCB0cnVlICk7XG5cdFx0XHR9XG5cblx0XHRcdC8qIGVzbGludC1kaXNhYmxlIG5vLWxvb3AtZnVuYyAqL1xuXG5cdFx0XHRhbmltLmRvbmUoIGZ1bmN0aW9uKCkge1xuXG5cdFx0XHQvKiBlc2xpbnQtZW5hYmxlIG5vLWxvb3AtZnVuYyAqL1xuXG5cdFx0XHRcdC8vIFRoZSBmaW5hbCBzdGVwIG9mIGEgXCJoaWRlXCIgYW5pbWF0aW9uIGlzIGFjdHVhbGx5IGhpZGluZyB0aGUgZWxlbWVudFxuXHRcdFx0XHRpZiAoICFoaWRkZW4gKSB7XG5cdFx0XHRcdFx0c2hvd0hpZGUoIFsgZWxlbSBdICk7XG5cdFx0XHRcdH1cblx0XHRcdFx0ZGF0YVByaXYucmVtb3ZlKCBlbGVtLCBcImZ4c2hvd1wiICk7XG5cdFx0XHRcdGZvciAoIHByb3AgaW4gb3JpZyApIHtcblx0XHRcdFx0XHRqUXVlcnkuc3R5bGUoIGVsZW0sIHByb3AsIG9yaWdbIHByb3AgXSApO1xuXHRcdFx0XHR9XG5cdFx0XHR9ICk7XG5cdFx0fVxuXG5cdFx0Ly8gUGVyLXByb3BlcnR5IHNldHVwXG5cdFx0cHJvcFR3ZWVuID0gY3JlYXRlVHdlZW4oIGhpZGRlbiA/IGRhdGFTaG93WyBwcm9wIF0gOiAwLCBwcm9wLCBhbmltICk7XG5cdFx0aWYgKCAhKCBwcm9wIGluIGRhdGFTaG93ICkgKSB7XG5cdFx0XHRkYXRhU2hvd1sgcHJvcCBdID0gcHJvcFR3ZWVuLnN0YXJ0O1xuXHRcdFx0aWYgKCBoaWRkZW4gKSB7XG5cdFx0XHRcdHByb3BUd2Vlbi5lbmQgPSBwcm9wVHdlZW4uc3RhcnQ7XG5cdFx0XHRcdHByb3BUd2Vlbi5zdGFydCA9IDA7XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG59XG5cbmZ1bmN0aW9uIHByb3BGaWx0ZXIoIHByb3BzLCBzcGVjaWFsRWFzaW5nICkge1xuXHR2YXIgaW5kZXgsIG5hbWUsIGVhc2luZywgdmFsdWUsIGhvb2tzO1xuXG5cdC8vIGNhbWVsQ2FzZSwgc3BlY2lhbEVhc2luZyBhbmQgZXhwYW5kIGNzc0hvb2sgcGFzc1xuXHRmb3IgKCBpbmRleCBpbiBwcm9wcyApIHtcblx0XHRuYW1lID0gY2FtZWxDYXNlKCBpbmRleCApO1xuXHRcdGVhc2luZyA9IHNwZWNpYWxFYXNpbmdbIG5hbWUgXTtcblx0XHR2YWx1ZSA9IHByb3BzWyBpbmRleCBdO1xuXHRcdGlmICggQXJyYXkuaXNBcnJheSggdmFsdWUgKSApIHtcblx0XHRcdGVhc2luZyA9IHZhbHVlWyAxIF07XG5cdFx0XHR2YWx1ZSA9IHByb3BzWyBpbmRleCBdID0gdmFsdWVbIDAgXTtcblx0XHR9XG5cblx0XHRpZiAoIGluZGV4ICE9PSBuYW1lICkge1xuXHRcdFx0cHJvcHNbIG5hbWUgXSA9IHZhbHVlO1xuXHRcdFx0ZGVsZXRlIHByb3BzWyBpbmRleCBdO1xuXHRcdH1cblxuXHRcdGhvb2tzID0galF1ZXJ5LmNzc0hvb2tzWyBuYW1lIF07XG5cdFx0aWYgKCBob29rcyAmJiBcImV4cGFuZFwiIGluIGhvb2tzICkge1xuXHRcdFx0dmFsdWUgPSBob29rcy5leHBhbmQoIHZhbHVlICk7XG5cdFx0XHRkZWxldGUgcHJvcHNbIG5hbWUgXTtcblxuXHRcdFx0Ly8gTm90IHF1aXRlICQuZXh0ZW5kLCB0aGlzIHdvbid0IG92ZXJ3cml0ZSBleGlzdGluZyBrZXlzLlxuXHRcdFx0Ly8gUmV1c2luZyAnaW5kZXgnIGJlY2F1c2Ugd2UgaGF2ZSB0aGUgY29ycmVjdCBcIm5hbWVcIlxuXHRcdFx0Zm9yICggaW5kZXggaW4gdmFsdWUgKSB7XG5cdFx0XHRcdGlmICggISggaW5kZXggaW4gcHJvcHMgKSApIHtcblx0XHRcdFx0XHRwcm9wc1sgaW5kZXggXSA9IHZhbHVlWyBpbmRleCBdO1xuXHRcdFx0XHRcdHNwZWNpYWxFYXNpbmdbIGluZGV4IF0gPSBlYXNpbmc7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9IGVsc2Uge1xuXHRcdFx0c3BlY2lhbEVhc2luZ1sgbmFtZSBdID0gZWFzaW5nO1xuXHRcdH1cblx0fVxufVxuXG5mdW5jdGlvbiBBbmltYXRpb24oIGVsZW0sIHByb3BlcnRpZXMsIG9wdGlvbnMgKSB7XG5cdHZhciByZXN1bHQsXG5cdFx0c3RvcHBlZCxcblx0XHRpbmRleCA9IDAsXG5cdFx0bGVuZ3RoID0gQW5pbWF0aW9uLnByZWZpbHRlcnMubGVuZ3RoLFxuXHRcdGRlZmVycmVkID0galF1ZXJ5LkRlZmVycmVkKCkuYWx3YXlzKCBmdW5jdGlvbigpIHtcblxuXHRcdFx0Ly8gRG9uJ3QgbWF0Y2ggZWxlbSBpbiB0aGUgOmFuaW1hdGVkIHNlbGVjdG9yXG5cdFx0XHRkZWxldGUgdGljay5lbGVtO1xuXHRcdH0gKSxcblx0XHR0aWNrID0gZnVuY3Rpb24oKSB7XG5cdFx0XHRpZiAoIHN0b3BwZWQgKSB7XG5cdFx0XHRcdHJldHVybiBmYWxzZTtcblx0XHRcdH1cblx0XHRcdHZhciBjdXJyZW50VGltZSA9IGZ4Tm93IHx8IGNyZWF0ZUZ4Tm93KCksXG5cdFx0XHRcdHJlbWFpbmluZyA9IE1hdGgubWF4KCAwLCBhbmltYXRpb24uc3RhcnRUaW1lICsgYW5pbWF0aW9uLmR1cmF0aW9uIC0gY3VycmVudFRpbWUgKSxcblxuXHRcdFx0XHQvLyBTdXBwb3J0OiBBbmRyb2lkIDIuMyBvbmx5XG5cdFx0XHRcdC8vIEFyY2hhaWMgY3Jhc2ggYnVnIHdvbid0IGFsbG93IHVzIHRvIHVzZSBgMSAtICggMC41IHx8IDAgKWAgKCMxMjQ5Nylcblx0XHRcdFx0dGVtcCA9IHJlbWFpbmluZyAvIGFuaW1hdGlvbi5kdXJhdGlvbiB8fCAwLFxuXHRcdFx0XHRwZXJjZW50ID0gMSAtIHRlbXAsXG5cdFx0XHRcdGluZGV4ID0gMCxcblx0XHRcdFx0bGVuZ3RoID0gYW5pbWF0aW9uLnR3ZWVucy5sZW5ndGg7XG5cblx0XHRcdGZvciAoIDsgaW5kZXggPCBsZW5ndGg7IGluZGV4KysgKSB7XG5cdFx0XHRcdGFuaW1hdGlvbi50d2VlbnNbIGluZGV4IF0ucnVuKCBwZXJjZW50ICk7XG5cdFx0XHR9XG5cblx0XHRcdGRlZmVycmVkLm5vdGlmeVdpdGgoIGVsZW0sIFsgYW5pbWF0aW9uLCBwZXJjZW50LCByZW1haW5pbmcgXSApO1xuXG5cdFx0XHQvLyBJZiB0aGVyZSdzIG1vcmUgdG8gZG8sIHlpZWxkXG5cdFx0XHRpZiAoIHBlcmNlbnQgPCAxICYmIGxlbmd0aCApIHtcblx0XHRcdFx0cmV0dXJuIHJlbWFpbmluZztcblx0XHRcdH1cblxuXHRcdFx0Ly8gSWYgdGhpcyB3YXMgYW4gZW1wdHkgYW5pbWF0aW9uLCBzeW50aGVzaXplIGEgZmluYWwgcHJvZ3Jlc3Mgbm90aWZpY2F0aW9uXG5cdFx0XHRpZiAoICFsZW5ndGggKSB7XG5cdFx0XHRcdGRlZmVycmVkLm5vdGlmeVdpdGgoIGVsZW0sIFsgYW5pbWF0aW9uLCAxLCAwIF0gKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gUmVzb2x2ZSB0aGUgYW5pbWF0aW9uIGFuZCByZXBvcnQgaXRzIGNvbmNsdXNpb25cblx0XHRcdGRlZmVycmVkLnJlc29sdmVXaXRoKCBlbGVtLCBbIGFuaW1hdGlvbiBdICk7XG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fSxcblx0XHRhbmltYXRpb24gPSBkZWZlcnJlZC5wcm9taXNlKCB7XG5cdFx0XHRlbGVtOiBlbGVtLFxuXHRcdFx0cHJvcHM6IGpRdWVyeS5leHRlbmQoIHt9LCBwcm9wZXJ0aWVzICksXG5cdFx0XHRvcHRzOiBqUXVlcnkuZXh0ZW5kKCB0cnVlLCB7XG5cdFx0XHRcdHNwZWNpYWxFYXNpbmc6IHt9LFxuXHRcdFx0XHRlYXNpbmc6IGpRdWVyeS5lYXNpbmcuX2RlZmF1bHRcblx0XHRcdH0sIG9wdGlvbnMgKSxcblx0XHRcdG9yaWdpbmFsUHJvcGVydGllczogcHJvcGVydGllcyxcblx0XHRcdG9yaWdpbmFsT3B0aW9uczogb3B0aW9ucyxcblx0XHRcdHN0YXJ0VGltZTogZnhOb3cgfHwgY3JlYXRlRnhOb3coKSxcblx0XHRcdGR1cmF0aW9uOiBvcHRpb25zLmR1cmF0aW9uLFxuXHRcdFx0dHdlZW5zOiBbXSxcblx0XHRcdGNyZWF0ZVR3ZWVuOiBmdW5jdGlvbiggcHJvcCwgZW5kICkge1xuXHRcdFx0XHR2YXIgdHdlZW4gPSBqUXVlcnkuVHdlZW4oIGVsZW0sIGFuaW1hdGlvbi5vcHRzLCBwcm9wLCBlbmQsXG5cdFx0XHRcdFx0XHRhbmltYXRpb24ub3B0cy5zcGVjaWFsRWFzaW5nWyBwcm9wIF0gfHwgYW5pbWF0aW9uLm9wdHMuZWFzaW5nICk7XG5cdFx0XHRcdGFuaW1hdGlvbi50d2VlbnMucHVzaCggdHdlZW4gKTtcblx0XHRcdFx0cmV0dXJuIHR3ZWVuO1xuXHRcdFx0fSxcblx0XHRcdHN0b3A6IGZ1bmN0aW9uKCBnb3RvRW5kICkge1xuXHRcdFx0XHR2YXIgaW5kZXggPSAwLFxuXG5cdFx0XHRcdFx0Ly8gSWYgd2UgYXJlIGdvaW5nIHRvIHRoZSBlbmQsIHdlIHdhbnQgdG8gcnVuIGFsbCB0aGUgdHdlZW5zXG5cdFx0XHRcdFx0Ly8gb3RoZXJ3aXNlIHdlIHNraXAgdGhpcyBwYXJ0XG5cdFx0XHRcdFx0bGVuZ3RoID0gZ290b0VuZCA/IGFuaW1hdGlvbi50d2VlbnMubGVuZ3RoIDogMDtcblx0XHRcdFx0aWYgKCBzdG9wcGVkICkge1xuXHRcdFx0XHRcdHJldHVybiB0aGlzO1xuXHRcdFx0XHR9XG5cdFx0XHRcdHN0b3BwZWQgPSB0cnVlO1xuXHRcdFx0XHRmb3IgKCA7IGluZGV4IDwgbGVuZ3RoOyBpbmRleCsrICkge1xuXHRcdFx0XHRcdGFuaW1hdGlvbi50d2VlbnNbIGluZGV4IF0ucnVuKCAxICk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBSZXNvbHZlIHdoZW4gd2UgcGxheWVkIHRoZSBsYXN0IGZyYW1lOyBvdGhlcndpc2UsIHJlamVjdFxuXHRcdFx0XHRpZiAoIGdvdG9FbmQgKSB7XG5cdFx0XHRcdFx0ZGVmZXJyZWQubm90aWZ5V2l0aCggZWxlbSwgWyBhbmltYXRpb24sIDEsIDAgXSApO1xuXHRcdFx0XHRcdGRlZmVycmVkLnJlc29sdmVXaXRoKCBlbGVtLCBbIGFuaW1hdGlvbiwgZ290b0VuZCBdICk7XG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0ZGVmZXJyZWQucmVqZWN0V2l0aCggZWxlbSwgWyBhbmltYXRpb24sIGdvdG9FbmQgXSApO1xuXHRcdFx0XHR9XG5cdFx0XHRcdHJldHVybiB0aGlzO1xuXHRcdFx0fVxuXHRcdH0gKSxcblx0XHRwcm9wcyA9IGFuaW1hdGlvbi5wcm9wcztcblxuXHRwcm9wRmlsdGVyKCBwcm9wcywgYW5pbWF0aW9uLm9wdHMuc3BlY2lhbEVhc2luZyApO1xuXG5cdGZvciAoIDsgaW5kZXggPCBsZW5ndGg7IGluZGV4KysgKSB7XG5cdFx0cmVzdWx0ID0gQW5pbWF0aW9uLnByZWZpbHRlcnNbIGluZGV4IF0uY2FsbCggYW5pbWF0aW9uLCBlbGVtLCBwcm9wcywgYW5pbWF0aW9uLm9wdHMgKTtcblx0XHRpZiAoIHJlc3VsdCApIHtcblx0XHRcdGlmICggaXNGdW5jdGlvbiggcmVzdWx0LnN0b3AgKSApIHtcblx0XHRcdFx0alF1ZXJ5Ll9xdWV1ZUhvb2tzKCBhbmltYXRpb24uZWxlbSwgYW5pbWF0aW9uLm9wdHMucXVldWUgKS5zdG9wID1cblx0XHRcdFx0XHRyZXN1bHQuc3RvcC5iaW5kKCByZXN1bHQgKTtcblx0XHRcdH1cblx0XHRcdHJldHVybiByZXN1bHQ7XG5cdFx0fVxuXHR9XG5cblx0alF1ZXJ5Lm1hcCggcHJvcHMsIGNyZWF0ZVR3ZWVuLCBhbmltYXRpb24gKTtcblxuXHRpZiAoIGlzRnVuY3Rpb24oIGFuaW1hdGlvbi5vcHRzLnN0YXJ0ICkgKSB7XG5cdFx0YW5pbWF0aW9uLm9wdHMuc3RhcnQuY2FsbCggZWxlbSwgYW5pbWF0aW9uICk7XG5cdH1cblxuXHQvLyBBdHRhY2ggY2FsbGJhY2tzIGZyb20gb3B0aW9uc1xuXHRhbmltYXRpb25cblx0XHQucHJvZ3Jlc3MoIGFuaW1hdGlvbi5vcHRzLnByb2dyZXNzIClcblx0XHQuZG9uZSggYW5pbWF0aW9uLm9wdHMuZG9uZSwgYW5pbWF0aW9uLm9wdHMuY29tcGxldGUgKVxuXHRcdC5mYWlsKCBhbmltYXRpb24ub3B0cy5mYWlsIClcblx0XHQuYWx3YXlzKCBhbmltYXRpb24ub3B0cy5hbHdheXMgKTtcblxuXHRqUXVlcnkuZngudGltZXIoXG5cdFx0alF1ZXJ5LmV4dGVuZCggdGljaywge1xuXHRcdFx0ZWxlbTogZWxlbSxcblx0XHRcdGFuaW06IGFuaW1hdGlvbixcblx0XHRcdHF1ZXVlOiBhbmltYXRpb24ub3B0cy5xdWV1ZVxuXHRcdH0gKVxuXHQpO1xuXG5cdHJldHVybiBhbmltYXRpb247XG59XG5cbmpRdWVyeS5BbmltYXRpb24gPSBqUXVlcnkuZXh0ZW5kKCBBbmltYXRpb24sIHtcblxuXHR0d2VlbmVyczoge1xuXHRcdFwiKlwiOiBbIGZ1bmN0aW9uKCBwcm9wLCB2YWx1ZSApIHtcblx0XHRcdHZhciB0d2VlbiA9IHRoaXMuY3JlYXRlVHdlZW4oIHByb3AsIHZhbHVlICk7XG5cdFx0XHRhZGp1c3RDU1MoIHR3ZWVuLmVsZW0sIHByb3AsIHJjc3NOdW0uZXhlYyggdmFsdWUgKSwgdHdlZW4gKTtcblx0XHRcdHJldHVybiB0d2Vlbjtcblx0XHR9IF1cblx0fSxcblxuXHR0d2VlbmVyOiBmdW5jdGlvbiggcHJvcHMsIGNhbGxiYWNrICkge1xuXHRcdGlmICggaXNGdW5jdGlvbiggcHJvcHMgKSApIHtcblx0XHRcdGNhbGxiYWNrID0gcHJvcHM7XG5cdFx0XHRwcm9wcyA9IFsgXCIqXCIgXTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0cHJvcHMgPSBwcm9wcy5tYXRjaCggcm5vdGh0bWx3aGl0ZSApO1xuXHRcdH1cblxuXHRcdHZhciBwcm9wLFxuXHRcdFx0aW5kZXggPSAwLFxuXHRcdFx0bGVuZ3RoID0gcHJvcHMubGVuZ3RoO1xuXG5cdFx0Zm9yICggOyBpbmRleCA8IGxlbmd0aDsgaW5kZXgrKyApIHtcblx0XHRcdHByb3AgPSBwcm9wc1sgaW5kZXggXTtcblx0XHRcdEFuaW1hdGlvbi50d2VlbmVyc1sgcHJvcCBdID0gQW5pbWF0aW9uLnR3ZWVuZXJzWyBwcm9wIF0gfHwgW107XG5cdFx0XHRBbmltYXRpb24udHdlZW5lcnNbIHByb3AgXS51bnNoaWZ0KCBjYWxsYmFjayApO1xuXHRcdH1cblx0fSxcblxuXHRwcmVmaWx0ZXJzOiBbIGRlZmF1bHRQcmVmaWx0ZXIgXSxcblxuXHRwcmVmaWx0ZXI6IGZ1bmN0aW9uKCBjYWxsYmFjaywgcHJlcGVuZCApIHtcblx0XHRpZiAoIHByZXBlbmQgKSB7XG5cdFx0XHRBbmltYXRpb24ucHJlZmlsdGVycy51bnNoaWZ0KCBjYWxsYmFjayApO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRBbmltYXRpb24ucHJlZmlsdGVycy5wdXNoKCBjYWxsYmFjayApO1xuXHRcdH1cblx0fVxufSApO1xuXG5qUXVlcnkuc3BlZWQgPSBmdW5jdGlvbiggc3BlZWQsIGVhc2luZywgZm4gKSB7XG5cdHZhciBvcHQgPSBzcGVlZCAmJiB0eXBlb2Ygc3BlZWQgPT09IFwib2JqZWN0XCIgPyBqUXVlcnkuZXh0ZW5kKCB7fSwgc3BlZWQgKSA6IHtcblx0XHRjb21wbGV0ZTogZm4gfHwgIWZuICYmIGVhc2luZyB8fFxuXHRcdFx0aXNGdW5jdGlvbiggc3BlZWQgKSAmJiBzcGVlZCxcblx0XHRkdXJhdGlvbjogc3BlZWQsXG5cdFx0ZWFzaW5nOiBmbiAmJiBlYXNpbmcgfHwgZWFzaW5nICYmICFpc0Z1bmN0aW9uKCBlYXNpbmcgKSAmJiBlYXNpbmdcblx0fTtcblxuXHQvLyBHbyB0byB0aGUgZW5kIHN0YXRlIGlmIGZ4IGFyZSBvZmZcblx0aWYgKCBqUXVlcnkuZngub2ZmICkge1xuXHRcdG9wdC5kdXJhdGlvbiA9IDA7XG5cblx0fSBlbHNlIHtcblx0XHRpZiAoIHR5cGVvZiBvcHQuZHVyYXRpb24gIT09IFwibnVtYmVyXCIgKSB7XG5cdFx0XHRpZiAoIG9wdC5kdXJhdGlvbiBpbiBqUXVlcnkuZnguc3BlZWRzICkge1xuXHRcdFx0XHRvcHQuZHVyYXRpb24gPSBqUXVlcnkuZnguc3BlZWRzWyBvcHQuZHVyYXRpb24gXTtcblxuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0b3B0LmR1cmF0aW9uID0galF1ZXJ5LmZ4LnNwZWVkcy5fZGVmYXVsdDtcblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHQvLyBOb3JtYWxpemUgb3B0LnF1ZXVlIC0gdHJ1ZS91bmRlZmluZWQvbnVsbCAtPiBcImZ4XCJcblx0aWYgKCBvcHQucXVldWUgPT0gbnVsbCB8fCBvcHQucXVldWUgPT09IHRydWUgKSB7XG5cdFx0b3B0LnF1ZXVlID0gXCJmeFwiO1xuXHR9XG5cblx0Ly8gUXVldWVpbmdcblx0b3B0Lm9sZCA9IG9wdC5jb21wbGV0ZTtcblxuXHRvcHQuY29tcGxldGUgPSBmdW5jdGlvbigpIHtcblx0XHRpZiAoIGlzRnVuY3Rpb24oIG9wdC5vbGQgKSApIHtcblx0XHRcdG9wdC5vbGQuY2FsbCggdGhpcyApO1xuXHRcdH1cblxuXHRcdGlmICggb3B0LnF1ZXVlICkge1xuXHRcdFx0alF1ZXJ5LmRlcXVldWUoIHRoaXMsIG9wdC5xdWV1ZSApO1xuXHRcdH1cblx0fTtcblxuXHRyZXR1cm4gb3B0O1xufTtcblxualF1ZXJ5LmZuLmV4dGVuZCgge1xuXHRmYWRlVG86IGZ1bmN0aW9uKCBzcGVlZCwgdG8sIGVhc2luZywgY2FsbGJhY2sgKSB7XG5cblx0XHQvLyBTaG93IGFueSBoaWRkZW4gZWxlbWVudHMgYWZ0ZXIgc2V0dGluZyBvcGFjaXR5IHRvIDBcblx0XHRyZXR1cm4gdGhpcy5maWx0ZXIoIGlzSGlkZGVuV2l0aGluVHJlZSApLmNzcyggXCJvcGFjaXR5XCIsIDAgKS5zaG93KClcblxuXHRcdFx0Ly8gQW5pbWF0ZSB0byB0aGUgdmFsdWUgc3BlY2lmaWVkXG5cdFx0XHQuZW5kKCkuYW5pbWF0ZSggeyBvcGFjaXR5OiB0byB9LCBzcGVlZCwgZWFzaW5nLCBjYWxsYmFjayApO1xuXHR9LFxuXHRhbmltYXRlOiBmdW5jdGlvbiggcHJvcCwgc3BlZWQsIGVhc2luZywgY2FsbGJhY2sgKSB7XG5cdFx0dmFyIGVtcHR5ID0galF1ZXJ5LmlzRW1wdHlPYmplY3QoIHByb3AgKSxcblx0XHRcdG9wdGFsbCA9IGpRdWVyeS5zcGVlZCggc3BlZWQsIGVhc2luZywgY2FsbGJhY2sgKSxcblx0XHRcdGRvQW5pbWF0aW9uID0gZnVuY3Rpb24oKSB7XG5cblx0XHRcdFx0Ly8gT3BlcmF0ZSBvbiBhIGNvcHkgb2YgcHJvcCBzbyBwZXItcHJvcGVydHkgZWFzaW5nIHdvbid0IGJlIGxvc3Rcblx0XHRcdFx0dmFyIGFuaW0gPSBBbmltYXRpb24oIHRoaXMsIGpRdWVyeS5leHRlbmQoIHt9LCBwcm9wICksIG9wdGFsbCApO1xuXG5cdFx0XHRcdC8vIEVtcHR5IGFuaW1hdGlvbnMsIG9yIGZpbmlzaGluZyByZXNvbHZlcyBpbW1lZGlhdGVseVxuXHRcdFx0XHRpZiAoIGVtcHR5IHx8IGRhdGFQcml2LmdldCggdGhpcywgXCJmaW5pc2hcIiApICkge1xuXHRcdFx0XHRcdGFuaW0uc3RvcCggdHJ1ZSApO1xuXHRcdFx0XHR9XG5cdFx0XHR9O1xuXHRcdFx0ZG9BbmltYXRpb24uZmluaXNoID0gZG9BbmltYXRpb247XG5cblx0XHRyZXR1cm4gZW1wdHkgfHwgb3B0YWxsLnF1ZXVlID09PSBmYWxzZSA/XG5cdFx0XHR0aGlzLmVhY2goIGRvQW5pbWF0aW9uICkgOlxuXHRcdFx0dGhpcy5xdWV1ZSggb3B0YWxsLnF1ZXVlLCBkb0FuaW1hdGlvbiApO1xuXHR9LFxuXHRzdG9wOiBmdW5jdGlvbiggdHlwZSwgY2xlYXJRdWV1ZSwgZ290b0VuZCApIHtcblx0XHR2YXIgc3RvcFF1ZXVlID0gZnVuY3Rpb24oIGhvb2tzICkge1xuXHRcdFx0dmFyIHN0b3AgPSBob29rcy5zdG9wO1xuXHRcdFx0ZGVsZXRlIGhvb2tzLnN0b3A7XG5cdFx0XHRzdG9wKCBnb3RvRW5kICk7XG5cdFx0fTtcblxuXHRcdGlmICggdHlwZW9mIHR5cGUgIT09IFwic3RyaW5nXCIgKSB7XG5cdFx0XHRnb3RvRW5kID0gY2xlYXJRdWV1ZTtcblx0XHRcdGNsZWFyUXVldWUgPSB0eXBlO1xuXHRcdFx0dHlwZSA9IHVuZGVmaW5lZDtcblx0XHR9XG5cdFx0aWYgKCBjbGVhclF1ZXVlICYmIHR5cGUgIT09IGZhbHNlICkge1xuXHRcdFx0dGhpcy5xdWV1ZSggdHlwZSB8fCBcImZ4XCIsIFtdICk7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXMuZWFjaCggZnVuY3Rpb24oKSB7XG5cdFx0XHR2YXIgZGVxdWV1ZSA9IHRydWUsXG5cdFx0XHRcdGluZGV4ID0gdHlwZSAhPSBudWxsICYmIHR5cGUgKyBcInF1ZXVlSG9va3NcIixcblx0XHRcdFx0dGltZXJzID0galF1ZXJ5LnRpbWVycyxcblx0XHRcdFx0ZGF0YSA9IGRhdGFQcml2LmdldCggdGhpcyApO1xuXG5cdFx0XHRpZiAoIGluZGV4ICkge1xuXHRcdFx0XHRpZiAoIGRhdGFbIGluZGV4IF0gJiYgZGF0YVsgaW5kZXggXS5zdG9wICkge1xuXHRcdFx0XHRcdHN0b3BRdWV1ZSggZGF0YVsgaW5kZXggXSApO1xuXHRcdFx0XHR9XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRmb3IgKCBpbmRleCBpbiBkYXRhICkge1xuXHRcdFx0XHRcdGlmICggZGF0YVsgaW5kZXggXSAmJiBkYXRhWyBpbmRleCBdLnN0b3AgJiYgcnJ1bi50ZXN0KCBpbmRleCApICkge1xuXHRcdFx0XHRcdFx0c3RvcFF1ZXVlKCBkYXRhWyBpbmRleCBdICk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdGZvciAoIGluZGV4ID0gdGltZXJzLmxlbmd0aDsgaW5kZXgtLTsgKSB7XG5cdFx0XHRcdGlmICggdGltZXJzWyBpbmRleCBdLmVsZW0gPT09IHRoaXMgJiZcblx0XHRcdFx0XHQoIHR5cGUgPT0gbnVsbCB8fCB0aW1lcnNbIGluZGV4IF0ucXVldWUgPT09IHR5cGUgKSApIHtcblxuXHRcdFx0XHRcdHRpbWVyc1sgaW5kZXggXS5hbmltLnN0b3AoIGdvdG9FbmQgKTtcblx0XHRcdFx0XHRkZXF1ZXVlID0gZmFsc2U7XG5cdFx0XHRcdFx0dGltZXJzLnNwbGljZSggaW5kZXgsIDEgKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHQvLyBTdGFydCB0aGUgbmV4dCBpbiB0aGUgcXVldWUgaWYgdGhlIGxhc3Qgc3RlcCB3YXNuJ3QgZm9yY2VkLlxuXHRcdFx0Ly8gVGltZXJzIGN1cnJlbnRseSB3aWxsIGNhbGwgdGhlaXIgY29tcGxldGUgY2FsbGJhY2tzLCB3aGljaFxuXHRcdFx0Ly8gd2lsbCBkZXF1ZXVlIGJ1dCBvbmx5IGlmIHRoZXkgd2VyZSBnb3RvRW5kLlxuXHRcdFx0aWYgKCBkZXF1ZXVlIHx8ICFnb3RvRW5kICkge1xuXHRcdFx0XHRqUXVlcnkuZGVxdWV1ZSggdGhpcywgdHlwZSApO1xuXHRcdFx0fVxuXHRcdH0gKTtcblx0fSxcblx0ZmluaXNoOiBmdW5jdGlvbiggdHlwZSApIHtcblx0XHRpZiAoIHR5cGUgIT09IGZhbHNlICkge1xuXHRcdFx0dHlwZSA9IHR5cGUgfHwgXCJmeFwiO1xuXHRcdH1cblx0XHRyZXR1cm4gdGhpcy5lYWNoKCBmdW5jdGlvbigpIHtcblx0XHRcdHZhciBpbmRleCxcblx0XHRcdFx0ZGF0YSA9IGRhdGFQcml2LmdldCggdGhpcyApLFxuXHRcdFx0XHRxdWV1ZSA9IGRhdGFbIHR5cGUgKyBcInF1ZXVlXCIgXSxcblx0XHRcdFx0aG9va3MgPSBkYXRhWyB0eXBlICsgXCJxdWV1ZUhvb2tzXCIgXSxcblx0XHRcdFx0dGltZXJzID0galF1ZXJ5LnRpbWVycyxcblx0XHRcdFx0bGVuZ3RoID0gcXVldWUgPyBxdWV1ZS5sZW5ndGggOiAwO1xuXG5cdFx0XHQvLyBFbmFibGUgZmluaXNoaW5nIGZsYWcgb24gcHJpdmF0ZSBkYXRhXG5cdFx0XHRkYXRhLmZpbmlzaCA9IHRydWU7XG5cblx0XHRcdC8vIEVtcHR5IHRoZSBxdWV1ZSBmaXJzdFxuXHRcdFx0alF1ZXJ5LnF1ZXVlKCB0aGlzLCB0eXBlLCBbXSApO1xuXG5cdFx0XHRpZiAoIGhvb2tzICYmIGhvb2tzLnN0b3AgKSB7XG5cdFx0XHRcdGhvb2tzLnN0b3AuY2FsbCggdGhpcywgdHJ1ZSApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBMb29rIGZvciBhbnkgYWN0aXZlIGFuaW1hdGlvbnMsIGFuZCBmaW5pc2ggdGhlbVxuXHRcdFx0Zm9yICggaW5kZXggPSB0aW1lcnMubGVuZ3RoOyBpbmRleC0tOyApIHtcblx0XHRcdFx0aWYgKCB0aW1lcnNbIGluZGV4IF0uZWxlbSA9PT0gdGhpcyAmJiB0aW1lcnNbIGluZGV4IF0ucXVldWUgPT09IHR5cGUgKSB7XG5cdFx0XHRcdFx0dGltZXJzWyBpbmRleCBdLmFuaW0uc3RvcCggdHJ1ZSApO1xuXHRcdFx0XHRcdHRpbWVycy5zcGxpY2UoIGluZGV4LCAxICk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0Ly8gTG9vayBmb3IgYW55IGFuaW1hdGlvbnMgaW4gdGhlIG9sZCBxdWV1ZSBhbmQgZmluaXNoIHRoZW1cblx0XHRcdGZvciAoIGluZGV4ID0gMDsgaW5kZXggPCBsZW5ndGg7IGluZGV4KysgKSB7XG5cdFx0XHRcdGlmICggcXVldWVbIGluZGV4IF0gJiYgcXVldWVbIGluZGV4IF0uZmluaXNoICkge1xuXHRcdFx0XHRcdHF1ZXVlWyBpbmRleCBdLmZpbmlzaC5jYWxsKCB0aGlzICk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0Ly8gVHVybiBvZmYgZmluaXNoaW5nIGZsYWdcblx0XHRcdGRlbGV0ZSBkYXRhLmZpbmlzaDtcblx0XHR9ICk7XG5cdH1cbn0gKTtcblxualF1ZXJ5LmVhY2goIFsgXCJ0b2dnbGVcIiwgXCJzaG93XCIsIFwiaGlkZVwiIF0sIGZ1bmN0aW9uKCBpLCBuYW1lICkge1xuXHR2YXIgY3NzRm4gPSBqUXVlcnkuZm5bIG5hbWUgXTtcblx0alF1ZXJ5LmZuWyBuYW1lIF0gPSBmdW5jdGlvbiggc3BlZWQsIGVhc2luZywgY2FsbGJhY2sgKSB7XG5cdFx0cmV0dXJuIHNwZWVkID09IG51bGwgfHwgdHlwZW9mIHNwZWVkID09PSBcImJvb2xlYW5cIiA/XG5cdFx0XHRjc3NGbi5hcHBseSggdGhpcywgYXJndW1lbnRzICkgOlxuXHRcdFx0dGhpcy5hbmltYXRlKCBnZW5GeCggbmFtZSwgdHJ1ZSApLCBzcGVlZCwgZWFzaW5nLCBjYWxsYmFjayApO1xuXHR9O1xufSApO1xuXG4vLyBHZW5lcmF0ZSBzaG9ydGN1dHMgZm9yIGN1c3RvbSBhbmltYXRpb25zXG5qUXVlcnkuZWFjaCgge1xuXHRzbGlkZURvd246IGdlbkZ4KCBcInNob3dcIiApLFxuXHRzbGlkZVVwOiBnZW5GeCggXCJoaWRlXCIgKSxcblx0c2xpZGVUb2dnbGU6IGdlbkZ4KCBcInRvZ2dsZVwiICksXG5cdGZhZGVJbjogeyBvcGFjaXR5OiBcInNob3dcIiB9LFxuXHRmYWRlT3V0OiB7IG9wYWNpdHk6IFwiaGlkZVwiIH0sXG5cdGZhZGVUb2dnbGU6IHsgb3BhY2l0eTogXCJ0b2dnbGVcIiB9XG59LCBmdW5jdGlvbiggbmFtZSwgcHJvcHMgKSB7XG5cdGpRdWVyeS5mblsgbmFtZSBdID0gZnVuY3Rpb24oIHNwZWVkLCBlYXNpbmcsIGNhbGxiYWNrICkge1xuXHRcdHJldHVybiB0aGlzLmFuaW1hdGUoIHByb3BzLCBzcGVlZCwgZWFzaW5nLCBjYWxsYmFjayApO1xuXHR9O1xufSApO1xuXG5qUXVlcnkudGltZXJzID0gW107XG5qUXVlcnkuZngudGljayA9IGZ1bmN0aW9uKCkge1xuXHR2YXIgdGltZXIsXG5cdFx0aSA9IDAsXG5cdFx0dGltZXJzID0galF1ZXJ5LnRpbWVycztcblxuXHRmeE5vdyA9IERhdGUubm93KCk7XG5cblx0Zm9yICggOyBpIDwgdGltZXJzLmxlbmd0aDsgaSsrICkge1xuXHRcdHRpbWVyID0gdGltZXJzWyBpIF07XG5cblx0XHQvLyBSdW4gdGhlIHRpbWVyIGFuZCBzYWZlbHkgcmVtb3ZlIGl0IHdoZW4gZG9uZSAoYWxsb3dpbmcgZm9yIGV4dGVybmFsIHJlbW92YWwpXG5cdFx0aWYgKCAhdGltZXIoKSAmJiB0aW1lcnNbIGkgXSA9PT0gdGltZXIgKSB7XG5cdFx0XHR0aW1lcnMuc3BsaWNlKCBpLS0sIDEgKTtcblx0XHR9XG5cdH1cblxuXHRpZiAoICF0aW1lcnMubGVuZ3RoICkge1xuXHRcdGpRdWVyeS5meC5zdG9wKCk7XG5cdH1cblx0ZnhOb3cgPSB1bmRlZmluZWQ7XG59O1xuXG5qUXVlcnkuZngudGltZXIgPSBmdW5jdGlvbiggdGltZXIgKSB7XG5cdGpRdWVyeS50aW1lcnMucHVzaCggdGltZXIgKTtcblx0alF1ZXJ5LmZ4LnN0YXJ0KCk7XG59O1xuXG5qUXVlcnkuZnguaW50ZXJ2YWwgPSAxMztcbmpRdWVyeS5meC5zdGFydCA9IGZ1bmN0aW9uKCkge1xuXHRpZiAoIGluUHJvZ3Jlc3MgKSB7XG5cdFx0cmV0dXJuO1xuXHR9XG5cblx0aW5Qcm9ncmVzcyA9IHRydWU7XG5cdHNjaGVkdWxlKCk7XG59O1xuXG5qUXVlcnkuZnguc3RvcCA9IGZ1bmN0aW9uKCkge1xuXHRpblByb2dyZXNzID0gbnVsbDtcbn07XG5cbmpRdWVyeS5meC5zcGVlZHMgPSB7XG5cdHNsb3c6IDYwMCxcblx0ZmFzdDogMjAwLFxuXG5cdC8vIERlZmF1bHQgc3BlZWRcblx0X2RlZmF1bHQ6IDQwMFxufTtcblxuXG4vLyBCYXNlZCBvZmYgb2YgdGhlIHBsdWdpbiBieSBDbGludCBIZWxmZXJzLCB3aXRoIHBlcm1pc3Npb24uXG4vLyBodHRwczovL3dlYi5hcmNoaXZlLm9yZy93ZWIvMjAxMDAzMjQwMTQ3NDcvaHR0cDovL2JsaW5kc2lnbmFscy5jb20vaW5kZXgucGhwLzIwMDkvMDcvanF1ZXJ5LWRlbGF5L1xualF1ZXJ5LmZuLmRlbGF5ID0gZnVuY3Rpb24oIHRpbWUsIHR5cGUgKSB7XG5cdHRpbWUgPSBqUXVlcnkuZnggPyBqUXVlcnkuZnguc3BlZWRzWyB0aW1lIF0gfHwgdGltZSA6IHRpbWU7XG5cdHR5cGUgPSB0eXBlIHx8IFwiZnhcIjtcblxuXHRyZXR1cm4gdGhpcy5xdWV1ZSggdHlwZSwgZnVuY3Rpb24oIG5leHQsIGhvb2tzICkge1xuXHRcdHZhciB0aW1lb3V0ID0gd2luZG93LnNldFRpbWVvdXQoIG5leHQsIHRpbWUgKTtcblx0XHRob29rcy5zdG9wID0gZnVuY3Rpb24oKSB7XG5cdFx0XHR3aW5kb3cuY2xlYXJUaW1lb3V0KCB0aW1lb3V0ICk7XG5cdFx0fTtcblx0fSApO1xufTtcblxuXG4oIGZ1bmN0aW9uKCkge1xuXHR2YXIgaW5wdXQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCBcImlucHV0XCIgKSxcblx0XHRzZWxlY3QgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCBcInNlbGVjdFwiICksXG5cdFx0b3B0ID0gc2VsZWN0LmFwcGVuZENoaWxkKCBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCBcIm9wdGlvblwiICkgKTtcblxuXHRpbnB1dC50eXBlID0gXCJjaGVja2JveFwiO1xuXG5cdC8vIFN1cHBvcnQ6IEFuZHJvaWQgPD00LjMgb25seVxuXHQvLyBEZWZhdWx0IHZhbHVlIGZvciBhIGNoZWNrYm94IHNob3VsZCBiZSBcIm9uXCJcblx0c3VwcG9ydC5jaGVja09uID0gaW5wdXQudmFsdWUgIT09IFwiXCI7XG5cblx0Ly8gU3VwcG9ydDogSUUgPD0xMSBvbmx5XG5cdC8vIE11c3QgYWNjZXNzIHNlbGVjdGVkSW5kZXggdG8gbWFrZSBkZWZhdWx0IG9wdGlvbnMgc2VsZWN0XG5cdHN1cHBvcnQub3B0U2VsZWN0ZWQgPSBvcHQuc2VsZWN0ZWQ7XG5cblx0Ly8gU3VwcG9ydDogSUUgPD0xMSBvbmx5XG5cdC8vIEFuIGlucHV0IGxvc2VzIGl0cyB2YWx1ZSBhZnRlciBiZWNvbWluZyBhIHJhZGlvXG5cdGlucHV0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCggXCJpbnB1dFwiICk7XG5cdGlucHV0LnZhbHVlID0gXCJ0XCI7XG5cdGlucHV0LnR5cGUgPSBcInJhZGlvXCI7XG5cdHN1cHBvcnQucmFkaW9WYWx1ZSA9IGlucHV0LnZhbHVlID09PSBcInRcIjtcbn0gKSgpO1xuXG5cbnZhciBib29sSG9vayxcblx0YXR0ckhhbmRsZSA9IGpRdWVyeS5leHByLmF0dHJIYW5kbGU7XG5cbmpRdWVyeS5mbi5leHRlbmQoIHtcblx0YXR0cjogZnVuY3Rpb24oIG5hbWUsIHZhbHVlICkge1xuXHRcdHJldHVybiBhY2Nlc3MoIHRoaXMsIGpRdWVyeS5hdHRyLCBuYW1lLCB2YWx1ZSwgYXJndW1lbnRzLmxlbmd0aCA+IDEgKTtcblx0fSxcblxuXHRyZW1vdmVBdHRyOiBmdW5jdGlvbiggbmFtZSApIHtcblx0XHRyZXR1cm4gdGhpcy5lYWNoKCBmdW5jdGlvbigpIHtcblx0XHRcdGpRdWVyeS5yZW1vdmVBdHRyKCB0aGlzLCBuYW1lICk7XG5cdFx0fSApO1xuXHR9XG59ICk7XG5cbmpRdWVyeS5leHRlbmQoIHtcblx0YXR0cjogZnVuY3Rpb24oIGVsZW0sIG5hbWUsIHZhbHVlICkge1xuXHRcdHZhciByZXQsIGhvb2tzLFxuXHRcdFx0blR5cGUgPSBlbGVtLm5vZGVUeXBlO1xuXG5cdFx0Ly8gRG9uJ3QgZ2V0L3NldCBhdHRyaWJ1dGVzIG9uIHRleHQsIGNvbW1lbnQgYW5kIGF0dHJpYnV0ZSBub2Rlc1xuXHRcdGlmICggblR5cGUgPT09IDMgfHwgblR5cGUgPT09IDggfHwgblR5cGUgPT09IDIgKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0Ly8gRmFsbGJhY2sgdG8gcHJvcCB3aGVuIGF0dHJpYnV0ZXMgYXJlIG5vdCBzdXBwb3J0ZWRcblx0XHRpZiAoIHR5cGVvZiBlbGVtLmdldEF0dHJpYnV0ZSA9PT0gXCJ1bmRlZmluZWRcIiApIHtcblx0XHRcdHJldHVybiBqUXVlcnkucHJvcCggZWxlbSwgbmFtZSwgdmFsdWUgKTtcblx0XHR9XG5cblx0XHQvLyBBdHRyaWJ1dGUgaG9va3MgYXJlIGRldGVybWluZWQgYnkgdGhlIGxvd2VyY2FzZSB2ZXJzaW9uXG5cdFx0Ly8gR3JhYiBuZWNlc3NhcnkgaG9vayBpZiBvbmUgaXMgZGVmaW5lZFxuXHRcdGlmICggblR5cGUgIT09IDEgfHwgIWpRdWVyeS5pc1hNTERvYyggZWxlbSApICkge1xuXHRcdFx0aG9va3MgPSBqUXVlcnkuYXR0ckhvb2tzWyBuYW1lLnRvTG93ZXJDYXNlKCkgXSB8fFxuXHRcdFx0XHQoIGpRdWVyeS5leHByLm1hdGNoLmJvb2wudGVzdCggbmFtZSApID8gYm9vbEhvb2sgOiB1bmRlZmluZWQgKTtcblx0XHR9XG5cblx0XHRpZiAoIHZhbHVlICE9PSB1bmRlZmluZWQgKSB7XG5cdFx0XHRpZiAoIHZhbHVlID09PSBudWxsICkge1xuXHRcdFx0XHRqUXVlcnkucmVtb3ZlQXR0ciggZWxlbSwgbmFtZSApO1xuXHRcdFx0XHRyZXR1cm47XG5cdFx0XHR9XG5cblx0XHRcdGlmICggaG9va3MgJiYgXCJzZXRcIiBpbiBob29rcyAmJlxuXHRcdFx0XHQoIHJldCA9IGhvb2tzLnNldCggZWxlbSwgdmFsdWUsIG5hbWUgKSApICE9PSB1bmRlZmluZWQgKSB7XG5cdFx0XHRcdHJldHVybiByZXQ7XG5cdFx0XHR9XG5cblx0XHRcdGVsZW0uc2V0QXR0cmlidXRlKCBuYW1lLCB2YWx1ZSArIFwiXCIgKTtcblx0XHRcdHJldHVybiB2YWx1ZTtcblx0XHR9XG5cblx0XHRpZiAoIGhvb2tzICYmIFwiZ2V0XCIgaW4gaG9va3MgJiYgKCByZXQgPSBob29rcy5nZXQoIGVsZW0sIG5hbWUgKSApICE9PSBudWxsICkge1xuXHRcdFx0cmV0dXJuIHJldDtcblx0XHR9XG5cblx0XHRyZXQgPSBqUXVlcnkuZmluZC5hdHRyKCBlbGVtLCBuYW1lICk7XG5cblx0XHQvLyBOb24tZXhpc3RlbnQgYXR0cmlidXRlcyByZXR1cm4gbnVsbCwgd2Ugbm9ybWFsaXplIHRvIHVuZGVmaW5lZFxuXHRcdHJldHVybiByZXQgPT0gbnVsbCA/IHVuZGVmaW5lZCA6IHJldDtcblx0fSxcblxuXHRhdHRySG9va3M6IHtcblx0XHR0eXBlOiB7XG5cdFx0XHRzZXQ6IGZ1bmN0aW9uKCBlbGVtLCB2YWx1ZSApIHtcblx0XHRcdFx0aWYgKCAhc3VwcG9ydC5yYWRpb1ZhbHVlICYmIHZhbHVlID09PSBcInJhZGlvXCIgJiZcblx0XHRcdFx0XHRub2RlTmFtZSggZWxlbSwgXCJpbnB1dFwiICkgKSB7XG5cdFx0XHRcdFx0dmFyIHZhbCA9IGVsZW0udmFsdWU7XG5cdFx0XHRcdFx0ZWxlbS5zZXRBdHRyaWJ1dGUoIFwidHlwZVwiLCB2YWx1ZSApO1xuXHRcdFx0XHRcdGlmICggdmFsICkge1xuXHRcdFx0XHRcdFx0ZWxlbS52YWx1ZSA9IHZhbDtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0cmV0dXJuIHZhbHVlO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHR9LFxuXG5cdHJlbW92ZUF0dHI6IGZ1bmN0aW9uKCBlbGVtLCB2YWx1ZSApIHtcblx0XHR2YXIgbmFtZSxcblx0XHRcdGkgPSAwLFxuXG5cdFx0XHQvLyBBdHRyaWJ1dGUgbmFtZXMgY2FuIGNvbnRhaW4gbm9uLUhUTUwgd2hpdGVzcGFjZSBjaGFyYWN0ZXJzXG5cdFx0XHQvLyBodHRwczovL2h0bWwuc3BlYy53aGF0d2cub3JnL211bHRpcGFnZS9zeW50YXguaHRtbCNhdHRyaWJ1dGVzLTJcblx0XHRcdGF0dHJOYW1lcyA9IHZhbHVlICYmIHZhbHVlLm1hdGNoKCBybm90aHRtbHdoaXRlICk7XG5cblx0XHRpZiAoIGF0dHJOYW1lcyAmJiBlbGVtLm5vZGVUeXBlID09PSAxICkge1xuXHRcdFx0d2hpbGUgKCAoIG5hbWUgPSBhdHRyTmFtZXNbIGkrKyBdICkgKSB7XG5cdFx0XHRcdGVsZW0ucmVtb3ZlQXR0cmlidXRlKCBuYW1lICk7XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG59ICk7XG5cbi8vIEhvb2tzIGZvciBib29sZWFuIGF0dHJpYnV0ZXNcbmJvb2xIb29rID0ge1xuXHRzZXQ6IGZ1bmN0aW9uKCBlbGVtLCB2YWx1ZSwgbmFtZSApIHtcblx0XHRpZiAoIHZhbHVlID09PSBmYWxzZSApIHtcblxuXHRcdFx0Ly8gUmVtb3ZlIGJvb2xlYW4gYXR0cmlidXRlcyB3aGVuIHNldCB0byBmYWxzZVxuXHRcdFx0alF1ZXJ5LnJlbW92ZUF0dHIoIGVsZW0sIG5hbWUgKTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0ZWxlbS5zZXRBdHRyaWJ1dGUoIG5hbWUsIG5hbWUgKTtcblx0XHR9XG5cdFx0cmV0dXJuIG5hbWU7XG5cdH1cbn07XG5cbmpRdWVyeS5lYWNoKCBqUXVlcnkuZXhwci5tYXRjaC5ib29sLnNvdXJjZS5tYXRjaCggL1xcdysvZyApLCBmdW5jdGlvbiggaSwgbmFtZSApIHtcblx0dmFyIGdldHRlciA9IGF0dHJIYW5kbGVbIG5hbWUgXSB8fCBqUXVlcnkuZmluZC5hdHRyO1xuXG5cdGF0dHJIYW5kbGVbIG5hbWUgXSA9IGZ1bmN0aW9uKCBlbGVtLCBuYW1lLCBpc1hNTCApIHtcblx0XHR2YXIgcmV0LCBoYW5kbGUsXG5cdFx0XHRsb3dlcmNhc2VOYW1lID0gbmFtZS50b0xvd2VyQ2FzZSgpO1xuXG5cdFx0aWYgKCAhaXNYTUwgKSB7XG5cblx0XHRcdC8vIEF2b2lkIGFuIGluZmluaXRlIGxvb3AgYnkgdGVtcG9yYXJpbHkgcmVtb3ZpbmcgdGhpcyBmdW5jdGlvbiBmcm9tIHRoZSBnZXR0ZXJcblx0XHRcdGhhbmRsZSA9IGF0dHJIYW5kbGVbIGxvd2VyY2FzZU5hbWUgXTtcblx0XHRcdGF0dHJIYW5kbGVbIGxvd2VyY2FzZU5hbWUgXSA9IHJldDtcblx0XHRcdHJldCA9IGdldHRlciggZWxlbSwgbmFtZSwgaXNYTUwgKSAhPSBudWxsID9cblx0XHRcdFx0bG93ZXJjYXNlTmFtZSA6XG5cdFx0XHRcdG51bGw7XG5cdFx0XHRhdHRySGFuZGxlWyBsb3dlcmNhc2VOYW1lIF0gPSBoYW5kbGU7XG5cdFx0fVxuXHRcdHJldHVybiByZXQ7XG5cdH07XG59ICk7XG5cblxuXG5cbnZhciByZm9jdXNhYmxlID0gL14oPzppbnB1dHxzZWxlY3R8dGV4dGFyZWF8YnV0dG9uKSQvaSxcblx0cmNsaWNrYWJsZSA9IC9eKD86YXxhcmVhKSQvaTtcblxualF1ZXJ5LmZuLmV4dGVuZCgge1xuXHRwcm9wOiBmdW5jdGlvbiggbmFtZSwgdmFsdWUgKSB7XG5cdFx0cmV0dXJuIGFjY2VzcyggdGhpcywgalF1ZXJ5LnByb3AsIG5hbWUsIHZhbHVlLCBhcmd1bWVudHMubGVuZ3RoID4gMSApO1xuXHR9LFxuXG5cdHJlbW92ZVByb3A6IGZ1bmN0aW9uKCBuYW1lICkge1xuXHRcdHJldHVybiB0aGlzLmVhY2goIGZ1bmN0aW9uKCkge1xuXHRcdFx0ZGVsZXRlIHRoaXNbIGpRdWVyeS5wcm9wRml4WyBuYW1lIF0gfHwgbmFtZSBdO1xuXHRcdH0gKTtcblx0fVxufSApO1xuXG5qUXVlcnkuZXh0ZW5kKCB7XG5cdHByb3A6IGZ1bmN0aW9uKCBlbGVtLCBuYW1lLCB2YWx1ZSApIHtcblx0XHR2YXIgcmV0LCBob29rcyxcblx0XHRcdG5UeXBlID0gZWxlbS5ub2RlVHlwZTtcblxuXHRcdC8vIERvbid0IGdldC9zZXQgcHJvcGVydGllcyBvbiB0ZXh0LCBjb21tZW50IGFuZCBhdHRyaWJ1dGUgbm9kZXNcblx0XHRpZiAoIG5UeXBlID09PSAzIHx8IG5UeXBlID09PSA4IHx8IG5UeXBlID09PSAyICkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdGlmICggblR5cGUgIT09IDEgfHwgIWpRdWVyeS5pc1hNTERvYyggZWxlbSApICkge1xuXG5cdFx0XHQvLyBGaXggbmFtZSBhbmQgYXR0YWNoIGhvb2tzXG5cdFx0XHRuYW1lID0galF1ZXJ5LnByb3BGaXhbIG5hbWUgXSB8fCBuYW1lO1xuXHRcdFx0aG9va3MgPSBqUXVlcnkucHJvcEhvb2tzWyBuYW1lIF07XG5cdFx0fVxuXG5cdFx0aWYgKCB2YWx1ZSAhPT0gdW5kZWZpbmVkICkge1xuXHRcdFx0aWYgKCBob29rcyAmJiBcInNldFwiIGluIGhvb2tzICYmXG5cdFx0XHRcdCggcmV0ID0gaG9va3Muc2V0KCBlbGVtLCB2YWx1ZSwgbmFtZSApICkgIT09IHVuZGVmaW5lZCApIHtcblx0XHRcdFx0cmV0dXJuIHJldDtcblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuICggZWxlbVsgbmFtZSBdID0gdmFsdWUgKTtcblx0XHR9XG5cblx0XHRpZiAoIGhvb2tzICYmIFwiZ2V0XCIgaW4gaG9va3MgJiYgKCByZXQgPSBob29rcy5nZXQoIGVsZW0sIG5hbWUgKSApICE9PSBudWxsICkge1xuXHRcdFx0cmV0dXJuIHJldDtcblx0XHR9XG5cblx0XHRyZXR1cm4gZWxlbVsgbmFtZSBdO1xuXHR9LFxuXG5cdHByb3BIb29rczoge1xuXHRcdHRhYkluZGV4OiB7XG5cdFx0XHRnZXQ6IGZ1bmN0aW9uKCBlbGVtICkge1xuXG5cdFx0XHRcdC8vIFN1cHBvcnQ6IElFIDw9OSAtIDExIG9ubHlcblx0XHRcdFx0Ly8gZWxlbS50YWJJbmRleCBkb2Vzbid0IGFsd2F5cyByZXR1cm4gdGhlXG5cdFx0XHRcdC8vIGNvcnJlY3QgdmFsdWUgd2hlbiBpdCBoYXNuJ3QgYmVlbiBleHBsaWNpdGx5IHNldFxuXHRcdFx0XHQvLyBodHRwczovL3dlYi5hcmNoaXZlLm9yZy93ZWIvMjAxNDExMTYyMzMzNDcvaHR0cDovL2ZsdWlkcHJvamVjdC5vcmcvYmxvZy8yMDA4LzAxLzA5L2dldHRpbmctc2V0dGluZy1hbmQtcmVtb3ZpbmctdGFiaW5kZXgtdmFsdWVzLXdpdGgtamF2YXNjcmlwdC9cblx0XHRcdFx0Ly8gVXNlIHByb3BlciBhdHRyaWJ1dGUgcmV0cmlldmFsKCMxMjA3Milcblx0XHRcdFx0dmFyIHRhYmluZGV4ID0galF1ZXJ5LmZpbmQuYXR0ciggZWxlbSwgXCJ0YWJpbmRleFwiICk7XG5cblx0XHRcdFx0aWYgKCB0YWJpbmRleCApIHtcblx0XHRcdFx0XHRyZXR1cm4gcGFyc2VJbnQoIHRhYmluZGV4LCAxMCApO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0aWYgKFxuXHRcdFx0XHRcdHJmb2N1c2FibGUudGVzdCggZWxlbS5ub2RlTmFtZSApIHx8XG5cdFx0XHRcdFx0cmNsaWNrYWJsZS50ZXN0KCBlbGVtLm5vZGVOYW1lICkgJiZcblx0XHRcdFx0XHRlbGVtLmhyZWZcblx0XHRcdFx0KSB7XG5cdFx0XHRcdFx0cmV0dXJuIDA7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRyZXR1cm4gLTE7XG5cdFx0XHR9XG5cdFx0fVxuXHR9LFxuXG5cdHByb3BGaXg6IHtcblx0XHRcImZvclwiOiBcImh0bWxGb3JcIixcblx0XHRcImNsYXNzXCI6IFwiY2xhc3NOYW1lXCJcblx0fVxufSApO1xuXG4vLyBTdXBwb3J0OiBJRSA8PTExIG9ubHlcbi8vIEFjY2Vzc2luZyB0aGUgc2VsZWN0ZWRJbmRleCBwcm9wZXJ0eVxuLy8gZm9yY2VzIHRoZSBicm93c2VyIHRvIHJlc3BlY3Qgc2V0dGluZyBzZWxlY3RlZFxuLy8gb24gdGhlIG9wdGlvblxuLy8gVGhlIGdldHRlciBlbnN1cmVzIGEgZGVmYXVsdCBvcHRpb24gaXMgc2VsZWN0ZWRcbi8vIHdoZW4gaW4gYW4gb3B0Z3JvdXBcbi8vIGVzbGludCBydWxlIFwibm8tdW51c2VkLWV4cHJlc3Npb25zXCIgaXMgZGlzYWJsZWQgZm9yIHRoaXMgY29kZVxuLy8gc2luY2UgaXQgY29uc2lkZXJzIHN1Y2ggYWNjZXNzaW9ucyBub29wXG5pZiAoICFzdXBwb3J0Lm9wdFNlbGVjdGVkICkge1xuXHRqUXVlcnkucHJvcEhvb2tzLnNlbGVjdGVkID0ge1xuXHRcdGdldDogZnVuY3Rpb24oIGVsZW0gKSB7XG5cblx0XHRcdC8qIGVzbGludCBuby11bnVzZWQtZXhwcmVzc2lvbnM6IFwib2ZmXCIgKi9cblxuXHRcdFx0dmFyIHBhcmVudCA9IGVsZW0ucGFyZW50Tm9kZTtcblx0XHRcdGlmICggcGFyZW50ICYmIHBhcmVudC5wYXJlbnROb2RlICkge1xuXHRcdFx0XHRwYXJlbnQucGFyZW50Tm9kZS5zZWxlY3RlZEluZGV4O1xuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIG51bGw7XG5cdFx0fSxcblx0XHRzZXQ6IGZ1bmN0aW9uKCBlbGVtICkge1xuXG5cdFx0XHQvKiBlc2xpbnQgbm8tdW51c2VkLWV4cHJlc3Npb25zOiBcIm9mZlwiICovXG5cblx0XHRcdHZhciBwYXJlbnQgPSBlbGVtLnBhcmVudE5vZGU7XG5cdFx0XHRpZiAoIHBhcmVudCApIHtcblx0XHRcdFx0cGFyZW50LnNlbGVjdGVkSW5kZXg7XG5cblx0XHRcdFx0aWYgKCBwYXJlbnQucGFyZW50Tm9kZSApIHtcblx0XHRcdFx0XHRwYXJlbnQucGFyZW50Tm9kZS5zZWxlY3RlZEluZGV4O1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHR9O1xufVxuXG5qUXVlcnkuZWFjaCggW1xuXHRcInRhYkluZGV4XCIsXG5cdFwicmVhZE9ubHlcIixcblx0XCJtYXhMZW5ndGhcIixcblx0XCJjZWxsU3BhY2luZ1wiLFxuXHRcImNlbGxQYWRkaW5nXCIsXG5cdFwicm93U3BhblwiLFxuXHRcImNvbFNwYW5cIixcblx0XCJ1c2VNYXBcIixcblx0XCJmcmFtZUJvcmRlclwiLFxuXHRcImNvbnRlbnRFZGl0YWJsZVwiXG5dLCBmdW5jdGlvbigpIHtcblx0alF1ZXJ5LnByb3BGaXhbIHRoaXMudG9Mb3dlckNhc2UoKSBdID0gdGhpcztcbn0gKTtcblxuXG5cblxuXHQvLyBTdHJpcCBhbmQgY29sbGFwc2Ugd2hpdGVzcGFjZSBhY2NvcmRpbmcgdG8gSFRNTCBzcGVjXG5cdC8vIGh0dHBzOi8vaW5mcmEuc3BlYy53aGF0d2cub3JnLyNzdHJpcC1hbmQtY29sbGFwc2UtYXNjaWktd2hpdGVzcGFjZVxuXHRmdW5jdGlvbiBzdHJpcEFuZENvbGxhcHNlKCB2YWx1ZSApIHtcblx0XHR2YXIgdG9rZW5zID0gdmFsdWUubWF0Y2goIHJub3RodG1sd2hpdGUgKSB8fCBbXTtcblx0XHRyZXR1cm4gdG9rZW5zLmpvaW4oIFwiIFwiICk7XG5cdH1cblxuXG5mdW5jdGlvbiBnZXRDbGFzcyggZWxlbSApIHtcblx0cmV0dXJuIGVsZW0uZ2V0QXR0cmlidXRlICYmIGVsZW0uZ2V0QXR0cmlidXRlKCBcImNsYXNzXCIgKSB8fCBcIlwiO1xufVxuXG5mdW5jdGlvbiBjbGFzc2VzVG9BcnJheSggdmFsdWUgKSB7XG5cdGlmICggQXJyYXkuaXNBcnJheSggdmFsdWUgKSApIHtcblx0XHRyZXR1cm4gdmFsdWU7XG5cdH1cblx0aWYgKCB0eXBlb2YgdmFsdWUgPT09IFwic3RyaW5nXCIgKSB7XG5cdFx0cmV0dXJuIHZhbHVlLm1hdGNoKCBybm90aHRtbHdoaXRlICkgfHwgW107XG5cdH1cblx0cmV0dXJuIFtdO1xufVxuXG5qUXVlcnkuZm4uZXh0ZW5kKCB7XG5cdGFkZENsYXNzOiBmdW5jdGlvbiggdmFsdWUgKSB7XG5cdFx0dmFyIGNsYXNzZXMsIGVsZW0sIGN1ciwgY3VyVmFsdWUsIGNsYXp6LCBqLCBmaW5hbFZhbHVlLFxuXHRcdFx0aSA9IDA7XG5cblx0XHRpZiAoIGlzRnVuY3Rpb24oIHZhbHVlICkgKSB7XG5cdFx0XHRyZXR1cm4gdGhpcy5lYWNoKCBmdW5jdGlvbiggaiApIHtcblx0XHRcdFx0alF1ZXJ5KCB0aGlzICkuYWRkQ2xhc3MoIHZhbHVlLmNhbGwoIHRoaXMsIGosIGdldENsYXNzKCB0aGlzICkgKSApO1xuXHRcdFx0fSApO1xuXHRcdH1cblxuXHRcdGNsYXNzZXMgPSBjbGFzc2VzVG9BcnJheSggdmFsdWUgKTtcblxuXHRcdGlmICggY2xhc3Nlcy5sZW5ndGggKSB7XG5cdFx0XHR3aGlsZSAoICggZWxlbSA9IHRoaXNbIGkrKyBdICkgKSB7XG5cdFx0XHRcdGN1clZhbHVlID0gZ2V0Q2xhc3MoIGVsZW0gKTtcblx0XHRcdFx0Y3VyID0gZWxlbS5ub2RlVHlwZSA9PT0gMSAmJiAoIFwiIFwiICsgc3RyaXBBbmRDb2xsYXBzZSggY3VyVmFsdWUgKSArIFwiIFwiICk7XG5cblx0XHRcdFx0aWYgKCBjdXIgKSB7XG5cdFx0XHRcdFx0aiA9IDA7XG5cdFx0XHRcdFx0d2hpbGUgKCAoIGNsYXp6ID0gY2xhc3Nlc1sgaisrIF0gKSApIHtcblx0XHRcdFx0XHRcdGlmICggY3VyLmluZGV4T2YoIFwiIFwiICsgY2xhenogKyBcIiBcIiApIDwgMCApIHtcblx0XHRcdFx0XHRcdFx0Y3VyICs9IGNsYXp6ICsgXCIgXCI7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0Ly8gT25seSBhc3NpZ24gaWYgZGlmZmVyZW50IHRvIGF2b2lkIHVubmVlZGVkIHJlbmRlcmluZy5cblx0XHRcdFx0XHRmaW5hbFZhbHVlID0gc3RyaXBBbmRDb2xsYXBzZSggY3VyICk7XG5cdFx0XHRcdFx0aWYgKCBjdXJWYWx1ZSAhPT0gZmluYWxWYWx1ZSApIHtcblx0XHRcdFx0XHRcdGVsZW0uc2V0QXR0cmlidXRlKCBcImNsYXNzXCIsIGZpbmFsVmFsdWUgKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cblx0XHRyZXR1cm4gdGhpcztcblx0fSxcblxuXHRyZW1vdmVDbGFzczogZnVuY3Rpb24oIHZhbHVlICkge1xuXHRcdHZhciBjbGFzc2VzLCBlbGVtLCBjdXIsIGN1clZhbHVlLCBjbGF6eiwgaiwgZmluYWxWYWx1ZSxcblx0XHRcdGkgPSAwO1xuXG5cdFx0aWYgKCBpc0Z1bmN0aW9uKCB2YWx1ZSApICkge1xuXHRcdFx0cmV0dXJuIHRoaXMuZWFjaCggZnVuY3Rpb24oIGogKSB7XG5cdFx0XHRcdGpRdWVyeSggdGhpcyApLnJlbW92ZUNsYXNzKCB2YWx1ZS5jYWxsKCB0aGlzLCBqLCBnZXRDbGFzcyggdGhpcyApICkgKTtcblx0XHRcdH0gKTtcblx0XHR9XG5cblx0XHRpZiAoICFhcmd1bWVudHMubGVuZ3RoICkge1xuXHRcdFx0cmV0dXJuIHRoaXMuYXR0ciggXCJjbGFzc1wiLCBcIlwiICk7XG5cdFx0fVxuXG5cdFx0Y2xhc3NlcyA9IGNsYXNzZXNUb0FycmF5KCB2YWx1ZSApO1xuXG5cdFx0aWYgKCBjbGFzc2VzLmxlbmd0aCApIHtcblx0XHRcdHdoaWxlICggKCBlbGVtID0gdGhpc1sgaSsrIF0gKSApIHtcblx0XHRcdFx0Y3VyVmFsdWUgPSBnZXRDbGFzcyggZWxlbSApO1xuXG5cdFx0XHRcdC8vIFRoaXMgZXhwcmVzc2lvbiBpcyBoZXJlIGZvciBiZXR0ZXIgY29tcHJlc3NpYmlsaXR5IChzZWUgYWRkQ2xhc3MpXG5cdFx0XHRcdGN1ciA9IGVsZW0ubm9kZVR5cGUgPT09IDEgJiYgKCBcIiBcIiArIHN0cmlwQW5kQ29sbGFwc2UoIGN1clZhbHVlICkgKyBcIiBcIiApO1xuXG5cdFx0XHRcdGlmICggY3VyICkge1xuXHRcdFx0XHRcdGogPSAwO1xuXHRcdFx0XHRcdHdoaWxlICggKCBjbGF6eiA9IGNsYXNzZXNbIGorKyBdICkgKSB7XG5cblx0XHRcdFx0XHRcdC8vIFJlbW92ZSAqYWxsKiBpbnN0YW5jZXNcblx0XHRcdFx0XHRcdHdoaWxlICggY3VyLmluZGV4T2YoIFwiIFwiICsgY2xhenogKyBcIiBcIiApID4gLTEgKSB7XG5cdFx0XHRcdFx0XHRcdGN1ciA9IGN1ci5yZXBsYWNlKCBcIiBcIiArIGNsYXp6ICsgXCIgXCIsIFwiIFwiICk7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0Ly8gT25seSBhc3NpZ24gaWYgZGlmZmVyZW50IHRvIGF2b2lkIHVubmVlZGVkIHJlbmRlcmluZy5cblx0XHRcdFx0XHRmaW5hbFZhbHVlID0gc3RyaXBBbmRDb2xsYXBzZSggY3VyICk7XG5cdFx0XHRcdFx0aWYgKCBjdXJWYWx1ZSAhPT0gZmluYWxWYWx1ZSApIHtcblx0XHRcdFx0XHRcdGVsZW0uc2V0QXR0cmlidXRlKCBcImNsYXNzXCIsIGZpbmFsVmFsdWUgKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cblx0XHRyZXR1cm4gdGhpcztcblx0fSxcblxuXHR0b2dnbGVDbGFzczogZnVuY3Rpb24oIHZhbHVlLCBzdGF0ZVZhbCApIHtcblx0XHR2YXIgdHlwZSA9IHR5cGVvZiB2YWx1ZSxcblx0XHRcdGlzVmFsaWRWYWx1ZSA9IHR5cGUgPT09IFwic3RyaW5nXCIgfHwgQXJyYXkuaXNBcnJheSggdmFsdWUgKTtcblxuXHRcdGlmICggdHlwZW9mIHN0YXRlVmFsID09PSBcImJvb2xlYW5cIiAmJiBpc1ZhbGlkVmFsdWUgKSB7XG5cdFx0XHRyZXR1cm4gc3RhdGVWYWwgPyB0aGlzLmFkZENsYXNzKCB2YWx1ZSApIDogdGhpcy5yZW1vdmVDbGFzcyggdmFsdWUgKTtcblx0XHR9XG5cblx0XHRpZiAoIGlzRnVuY3Rpb24oIHZhbHVlICkgKSB7XG5cdFx0XHRyZXR1cm4gdGhpcy5lYWNoKCBmdW5jdGlvbiggaSApIHtcblx0XHRcdFx0alF1ZXJ5KCB0aGlzICkudG9nZ2xlQ2xhc3MoXG5cdFx0XHRcdFx0dmFsdWUuY2FsbCggdGhpcywgaSwgZ2V0Q2xhc3MoIHRoaXMgKSwgc3RhdGVWYWwgKSxcblx0XHRcdFx0XHRzdGF0ZVZhbFxuXHRcdFx0XHQpO1xuXHRcdFx0fSApO1xuXHRcdH1cblxuXHRcdHJldHVybiB0aGlzLmVhY2goIGZ1bmN0aW9uKCkge1xuXHRcdFx0dmFyIGNsYXNzTmFtZSwgaSwgc2VsZiwgY2xhc3NOYW1lcztcblxuXHRcdFx0aWYgKCBpc1ZhbGlkVmFsdWUgKSB7XG5cblx0XHRcdFx0Ly8gVG9nZ2xlIGluZGl2aWR1YWwgY2xhc3MgbmFtZXNcblx0XHRcdFx0aSA9IDA7XG5cdFx0XHRcdHNlbGYgPSBqUXVlcnkoIHRoaXMgKTtcblx0XHRcdFx0Y2xhc3NOYW1lcyA9IGNsYXNzZXNUb0FycmF5KCB2YWx1ZSApO1xuXG5cdFx0XHRcdHdoaWxlICggKCBjbGFzc05hbWUgPSBjbGFzc05hbWVzWyBpKysgXSApICkge1xuXG5cdFx0XHRcdFx0Ly8gQ2hlY2sgZWFjaCBjbGFzc05hbWUgZ2l2ZW4sIHNwYWNlIHNlcGFyYXRlZCBsaXN0XG5cdFx0XHRcdFx0aWYgKCBzZWxmLmhhc0NsYXNzKCBjbGFzc05hbWUgKSApIHtcblx0XHRcdFx0XHRcdHNlbGYucmVtb3ZlQ2xhc3MoIGNsYXNzTmFtZSApO1xuXHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRzZWxmLmFkZENsYXNzKCBjbGFzc05hbWUgKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblxuXHRcdFx0Ly8gVG9nZ2xlIHdob2xlIGNsYXNzIG5hbWVcblx0XHRcdH0gZWxzZSBpZiAoIHZhbHVlID09PSB1bmRlZmluZWQgfHwgdHlwZSA9PT0gXCJib29sZWFuXCIgKSB7XG5cdFx0XHRcdGNsYXNzTmFtZSA9IGdldENsYXNzKCB0aGlzICk7XG5cdFx0XHRcdGlmICggY2xhc3NOYW1lICkge1xuXG5cdFx0XHRcdFx0Ly8gU3RvcmUgY2xhc3NOYW1lIGlmIHNldFxuXHRcdFx0XHRcdGRhdGFQcml2LnNldCggdGhpcywgXCJfX2NsYXNzTmFtZV9fXCIsIGNsYXNzTmFtZSApO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gSWYgdGhlIGVsZW1lbnQgaGFzIGEgY2xhc3MgbmFtZSBvciBpZiB3ZSdyZSBwYXNzZWQgYGZhbHNlYCxcblx0XHRcdFx0Ly8gdGhlbiByZW1vdmUgdGhlIHdob2xlIGNsYXNzbmFtZSAoaWYgdGhlcmUgd2FzIG9uZSwgdGhlIGFib3ZlIHNhdmVkIGl0KS5cblx0XHRcdFx0Ly8gT3RoZXJ3aXNlIGJyaW5nIGJhY2sgd2hhdGV2ZXIgd2FzIHByZXZpb3VzbHkgc2F2ZWQgKGlmIGFueXRoaW5nKSxcblx0XHRcdFx0Ly8gZmFsbGluZyBiYWNrIHRvIHRoZSBlbXB0eSBzdHJpbmcgaWYgbm90aGluZyB3YXMgc3RvcmVkLlxuXHRcdFx0XHRpZiAoIHRoaXMuc2V0QXR0cmlidXRlICkge1xuXHRcdFx0XHRcdHRoaXMuc2V0QXR0cmlidXRlKCBcImNsYXNzXCIsXG5cdFx0XHRcdFx0XHRjbGFzc05hbWUgfHwgdmFsdWUgPT09IGZhbHNlID9cblx0XHRcdFx0XHRcdFwiXCIgOlxuXHRcdFx0XHRcdFx0ZGF0YVByaXYuZ2V0KCB0aGlzLCBcIl9fY2xhc3NOYW1lX19cIiApIHx8IFwiXCJcblx0XHRcdFx0XHQpO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fSApO1xuXHR9LFxuXG5cdGhhc0NsYXNzOiBmdW5jdGlvbiggc2VsZWN0b3IgKSB7XG5cdFx0dmFyIGNsYXNzTmFtZSwgZWxlbSxcblx0XHRcdGkgPSAwO1xuXG5cdFx0Y2xhc3NOYW1lID0gXCIgXCIgKyBzZWxlY3RvciArIFwiIFwiO1xuXHRcdHdoaWxlICggKCBlbGVtID0gdGhpc1sgaSsrIF0gKSApIHtcblx0XHRcdGlmICggZWxlbS5ub2RlVHlwZSA9PT0gMSAmJlxuXHRcdFx0XHQoIFwiIFwiICsgc3RyaXBBbmRDb2xsYXBzZSggZ2V0Q2xhc3MoIGVsZW0gKSApICsgXCIgXCIgKS5pbmRleE9mKCBjbGFzc05hbWUgKSA+IC0xICkge1xuXHRcdFx0XHRcdHJldHVybiB0cnVlO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHJldHVybiBmYWxzZTtcblx0fVxufSApO1xuXG5cblxuXG52YXIgcnJldHVybiA9IC9cXHIvZztcblxualF1ZXJ5LmZuLmV4dGVuZCgge1xuXHR2YWw6IGZ1bmN0aW9uKCB2YWx1ZSApIHtcblx0XHR2YXIgaG9va3MsIHJldCwgdmFsdWVJc0Z1bmN0aW9uLFxuXHRcdFx0ZWxlbSA9IHRoaXNbIDAgXTtcblxuXHRcdGlmICggIWFyZ3VtZW50cy5sZW5ndGggKSB7XG5cdFx0XHRpZiAoIGVsZW0gKSB7XG5cdFx0XHRcdGhvb2tzID0galF1ZXJ5LnZhbEhvb2tzWyBlbGVtLnR5cGUgXSB8fFxuXHRcdFx0XHRcdGpRdWVyeS52YWxIb29rc1sgZWxlbS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpIF07XG5cblx0XHRcdFx0aWYgKCBob29rcyAmJlxuXHRcdFx0XHRcdFwiZ2V0XCIgaW4gaG9va3MgJiZcblx0XHRcdFx0XHQoIHJldCA9IGhvb2tzLmdldCggZWxlbSwgXCJ2YWx1ZVwiICkgKSAhPT0gdW5kZWZpbmVkXG5cdFx0XHRcdCkge1xuXHRcdFx0XHRcdHJldHVybiByZXQ7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRyZXQgPSBlbGVtLnZhbHVlO1xuXG5cdFx0XHRcdC8vIEhhbmRsZSBtb3N0IGNvbW1vbiBzdHJpbmcgY2FzZXNcblx0XHRcdFx0aWYgKCB0eXBlb2YgcmV0ID09PSBcInN0cmluZ1wiICkge1xuXHRcdFx0XHRcdHJldHVybiByZXQucmVwbGFjZSggcnJldHVybiwgXCJcIiApO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gSGFuZGxlIGNhc2VzIHdoZXJlIHZhbHVlIGlzIG51bGwvdW5kZWYgb3IgbnVtYmVyXG5cdFx0XHRcdHJldHVybiByZXQgPT0gbnVsbCA/IFwiXCIgOiByZXQ7XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHR2YWx1ZUlzRnVuY3Rpb24gPSBpc0Z1bmN0aW9uKCB2YWx1ZSApO1xuXG5cdFx0cmV0dXJuIHRoaXMuZWFjaCggZnVuY3Rpb24oIGkgKSB7XG5cdFx0XHR2YXIgdmFsO1xuXG5cdFx0XHRpZiAoIHRoaXMubm9kZVR5cGUgIT09IDEgKSB7XG5cdFx0XHRcdHJldHVybjtcblx0XHRcdH1cblxuXHRcdFx0aWYgKCB2YWx1ZUlzRnVuY3Rpb24gKSB7XG5cdFx0XHRcdHZhbCA9IHZhbHVlLmNhbGwoIHRoaXMsIGksIGpRdWVyeSggdGhpcyApLnZhbCgpICk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHR2YWwgPSB2YWx1ZTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gVHJlYXQgbnVsbC91bmRlZmluZWQgYXMgXCJcIjsgY29udmVydCBudW1iZXJzIHRvIHN0cmluZ1xuXHRcdFx0aWYgKCB2YWwgPT0gbnVsbCApIHtcblx0XHRcdFx0dmFsID0gXCJcIjtcblxuXHRcdFx0fSBlbHNlIGlmICggdHlwZW9mIHZhbCA9PT0gXCJudW1iZXJcIiApIHtcblx0XHRcdFx0dmFsICs9IFwiXCI7XG5cblx0XHRcdH0gZWxzZSBpZiAoIEFycmF5LmlzQXJyYXkoIHZhbCApICkge1xuXHRcdFx0XHR2YWwgPSBqUXVlcnkubWFwKCB2YWwsIGZ1bmN0aW9uKCB2YWx1ZSApIHtcblx0XHRcdFx0XHRyZXR1cm4gdmFsdWUgPT0gbnVsbCA/IFwiXCIgOiB2YWx1ZSArIFwiXCI7XG5cdFx0XHRcdH0gKTtcblx0XHRcdH1cblxuXHRcdFx0aG9va3MgPSBqUXVlcnkudmFsSG9va3NbIHRoaXMudHlwZSBdIHx8IGpRdWVyeS52YWxIb29rc1sgdGhpcy5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpIF07XG5cblx0XHRcdC8vIElmIHNldCByZXR1cm5zIHVuZGVmaW5lZCwgZmFsbCBiYWNrIHRvIG5vcm1hbCBzZXR0aW5nXG5cdFx0XHRpZiAoICFob29rcyB8fCAhKCBcInNldFwiIGluIGhvb2tzICkgfHwgaG9va3Muc2V0KCB0aGlzLCB2YWwsIFwidmFsdWVcIiApID09PSB1bmRlZmluZWQgKSB7XG5cdFx0XHRcdHRoaXMudmFsdWUgPSB2YWw7XG5cdFx0XHR9XG5cdFx0fSApO1xuXHR9XG59ICk7XG5cbmpRdWVyeS5leHRlbmQoIHtcblx0dmFsSG9va3M6IHtcblx0XHRvcHRpb246IHtcblx0XHRcdGdldDogZnVuY3Rpb24oIGVsZW0gKSB7XG5cblx0XHRcdFx0dmFyIHZhbCA9IGpRdWVyeS5maW5kLmF0dHIoIGVsZW0sIFwidmFsdWVcIiApO1xuXHRcdFx0XHRyZXR1cm4gdmFsICE9IG51bGwgP1xuXHRcdFx0XHRcdHZhbCA6XG5cblx0XHRcdFx0XHQvLyBTdXBwb3J0OiBJRSA8PTEwIC0gMTEgb25seVxuXHRcdFx0XHRcdC8vIG9wdGlvbi50ZXh0IHRocm93cyBleGNlcHRpb25zICgjMTQ2ODYsICMxNDg1OClcblx0XHRcdFx0XHQvLyBTdHJpcCBhbmQgY29sbGFwc2Ugd2hpdGVzcGFjZVxuXHRcdFx0XHRcdC8vIGh0dHBzOi8vaHRtbC5zcGVjLndoYXR3Zy5vcmcvI3N0cmlwLWFuZC1jb2xsYXBzZS13aGl0ZXNwYWNlXG5cdFx0XHRcdFx0c3RyaXBBbmRDb2xsYXBzZSggalF1ZXJ5LnRleHQoIGVsZW0gKSApO1xuXHRcdFx0fVxuXHRcdH0sXG5cdFx0c2VsZWN0OiB7XG5cdFx0XHRnZXQ6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0XHR2YXIgdmFsdWUsIG9wdGlvbiwgaSxcblx0XHRcdFx0XHRvcHRpb25zID0gZWxlbS5vcHRpb25zLFxuXHRcdFx0XHRcdGluZGV4ID0gZWxlbS5zZWxlY3RlZEluZGV4LFxuXHRcdFx0XHRcdG9uZSA9IGVsZW0udHlwZSA9PT0gXCJzZWxlY3Qtb25lXCIsXG5cdFx0XHRcdFx0dmFsdWVzID0gb25lID8gbnVsbCA6IFtdLFxuXHRcdFx0XHRcdG1heCA9IG9uZSA/IGluZGV4ICsgMSA6IG9wdGlvbnMubGVuZ3RoO1xuXG5cdFx0XHRcdGlmICggaW5kZXggPCAwICkge1xuXHRcdFx0XHRcdGkgPSBtYXg7XG5cblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRpID0gb25lID8gaW5kZXggOiAwO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gTG9vcCB0aHJvdWdoIGFsbCB0aGUgc2VsZWN0ZWQgb3B0aW9uc1xuXHRcdFx0XHRmb3IgKCA7IGkgPCBtYXg7IGkrKyApIHtcblx0XHRcdFx0XHRvcHRpb24gPSBvcHRpb25zWyBpIF07XG5cblx0XHRcdFx0XHQvLyBTdXBwb3J0OiBJRSA8PTkgb25seVxuXHRcdFx0XHRcdC8vIElFOC05IGRvZXNuJ3QgdXBkYXRlIHNlbGVjdGVkIGFmdGVyIGZvcm0gcmVzZXQgKCMyNTUxKVxuXHRcdFx0XHRcdGlmICggKCBvcHRpb24uc2VsZWN0ZWQgfHwgaSA9PT0gaW5kZXggKSAmJlxuXG5cdFx0XHRcdFx0XHRcdC8vIERvbid0IHJldHVybiBvcHRpb25zIHRoYXQgYXJlIGRpc2FibGVkIG9yIGluIGEgZGlzYWJsZWQgb3B0Z3JvdXBcblx0XHRcdFx0XHRcdFx0IW9wdGlvbi5kaXNhYmxlZCAmJlxuXHRcdFx0XHRcdFx0XHQoICFvcHRpb24ucGFyZW50Tm9kZS5kaXNhYmxlZCB8fFxuXHRcdFx0XHRcdFx0XHRcdCFub2RlTmFtZSggb3B0aW9uLnBhcmVudE5vZGUsIFwib3B0Z3JvdXBcIiApICkgKSB7XG5cblx0XHRcdFx0XHRcdC8vIEdldCB0aGUgc3BlY2lmaWMgdmFsdWUgZm9yIHRoZSBvcHRpb25cblx0XHRcdFx0XHRcdHZhbHVlID0galF1ZXJ5KCBvcHRpb24gKS52YWwoKTtcblxuXHRcdFx0XHRcdFx0Ly8gV2UgZG9uJ3QgbmVlZCBhbiBhcnJheSBmb3Igb25lIHNlbGVjdHNcblx0XHRcdFx0XHRcdGlmICggb25lICkge1xuXHRcdFx0XHRcdFx0XHRyZXR1cm4gdmFsdWU7XG5cdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdC8vIE11bHRpLVNlbGVjdHMgcmV0dXJuIGFuIGFycmF5XG5cdFx0XHRcdFx0XHR2YWx1ZXMucHVzaCggdmFsdWUgKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRyZXR1cm4gdmFsdWVzO1xuXHRcdFx0fSxcblxuXHRcdFx0c2V0OiBmdW5jdGlvbiggZWxlbSwgdmFsdWUgKSB7XG5cdFx0XHRcdHZhciBvcHRpb25TZXQsIG9wdGlvbixcblx0XHRcdFx0XHRvcHRpb25zID0gZWxlbS5vcHRpb25zLFxuXHRcdFx0XHRcdHZhbHVlcyA9IGpRdWVyeS5tYWtlQXJyYXkoIHZhbHVlICksXG5cdFx0XHRcdFx0aSA9IG9wdGlvbnMubGVuZ3RoO1xuXG5cdFx0XHRcdHdoaWxlICggaS0tICkge1xuXHRcdFx0XHRcdG9wdGlvbiA9IG9wdGlvbnNbIGkgXTtcblxuXHRcdFx0XHRcdC8qIGVzbGludC1kaXNhYmxlIG5vLWNvbmQtYXNzaWduICovXG5cblx0XHRcdFx0XHRpZiAoIG9wdGlvbi5zZWxlY3RlZCA9XG5cdFx0XHRcdFx0XHRqUXVlcnkuaW5BcnJheSggalF1ZXJ5LnZhbEhvb2tzLm9wdGlvbi5nZXQoIG9wdGlvbiApLCB2YWx1ZXMgKSA+IC0xXG5cdFx0XHRcdFx0KSB7XG5cdFx0XHRcdFx0XHRvcHRpb25TZXQgPSB0cnVlO1xuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdC8qIGVzbGludC1lbmFibGUgbm8tY29uZC1hc3NpZ24gKi9cblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIEZvcmNlIGJyb3dzZXJzIHRvIGJlaGF2ZSBjb25zaXN0ZW50bHkgd2hlbiBub24tbWF0Y2hpbmcgdmFsdWUgaXMgc2V0XG5cdFx0XHRcdGlmICggIW9wdGlvblNldCApIHtcblx0XHRcdFx0XHRlbGVtLnNlbGVjdGVkSW5kZXggPSAtMTtcblx0XHRcdFx0fVxuXHRcdFx0XHRyZXR1cm4gdmFsdWVzO1xuXHRcdFx0fVxuXHRcdH1cblx0fVxufSApO1xuXG4vLyBSYWRpb3MgYW5kIGNoZWNrYm94ZXMgZ2V0dGVyL3NldHRlclxualF1ZXJ5LmVhY2goIFsgXCJyYWRpb1wiLCBcImNoZWNrYm94XCIgXSwgZnVuY3Rpb24oKSB7XG5cdGpRdWVyeS52YWxIb29rc1sgdGhpcyBdID0ge1xuXHRcdHNldDogZnVuY3Rpb24oIGVsZW0sIHZhbHVlICkge1xuXHRcdFx0aWYgKCBBcnJheS5pc0FycmF5KCB2YWx1ZSApICkge1xuXHRcdFx0XHRyZXR1cm4gKCBlbGVtLmNoZWNrZWQgPSBqUXVlcnkuaW5BcnJheSggalF1ZXJ5KCBlbGVtICkudmFsKCksIHZhbHVlICkgPiAtMSApO1xuXHRcdFx0fVxuXHRcdH1cblx0fTtcblx0aWYgKCAhc3VwcG9ydC5jaGVja09uICkge1xuXHRcdGpRdWVyeS52YWxIb29rc1sgdGhpcyBdLmdldCA9IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0cmV0dXJuIGVsZW0uZ2V0QXR0cmlidXRlKCBcInZhbHVlXCIgKSA9PT0gbnVsbCA/IFwib25cIiA6IGVsZW0udmFsdWU7XG5cdFx0fTtcblx0fVxufSApO1xuXG5cblxuXG4vLyBSZXR1cm4galF1ZXJ5IGZvciBhdHRyaWJ1dGVzLW9ubHkgaW5jbHVzaW9uXG5cblxuc3VwcG9ydC5mb2N1c2luID0gXCJvbmZvY3VzaW5cIiBpbiB3aW5kb3c7XG5cblxudmFyIHJmb2N1c01vcnBoID0gL14oPzpmb2N1c2luZm9jdXN8Zm9jdXNvdXRibHVyKSQvLFxuXHRzdG9wUHJvcGFnYXRpb25DYWxsYmFjayA9IGZ1bmN0aW9uKCBlICkge1xuXHRcdGUuc3RvcFByb3BhZ2F0aW9uKCk7XG5cdH07XG5cbmpRdWVyeS5leHRlbmQoIGpRdWVyeS5ldmVudCwge1xuXG5cdHRyaWdnZXI6IGZ1bmN0aW9uKCBldmVudCwgZGF0YSwgZWxlbSwgb25seUhhbmRsZXJzICkge1xuXG5cdFx0dmFyIGksIGN1ciwgdG1wLCBidWJibGVUeXBlLCBvbnR5cGUsIGhhbmRsZSwgc3BlY2lhbCwgbGFzdEVsZW1lbnQsXG5cdFx0XHRldmVudFBhdGggPSBbIGVsZW0gfHwgZG9jdW1lbnQgXSxcblx0XHRcdHR5cGUgPSBoYXNPd24uY2FsbCggZXZlbnQsIFwidHlwZVwiICkgPyBldmVudC50eXBlIDogZXZlbnQsXG5cdFx0XHRuYW1lc3BhY2VzID0gaGFzT3duLmNhbGwoIGV2ZW50LCBcIm5hbWVzcGFjZVwiICkgPyBldmVudC5uYW1lc3BhY2Uuc3BsaXQoIFwiLlwiICkgOiBbXTtcblxuXHRcdGN1ciA9IGxhc3RFbGVtZW50ID0gdG1wID0gZWxlbSA9IGVsZW0gfHwgZG9jdW1lbnQ7XG5cblx0XHQvLyBEb24ndCBkbyBldmVudHMgb24gdGV4dCBhbmQgY29tbWVudCBub2Rlc1xuXHRcdGlmICggZWxlbS5ub2RlVHlwZSA9PT0gMyB8fCBlbGVtLm5vZGVUeXBlID09PSA4ICkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdC8vIGZvY3VzL2JsdXIgbW9ycGhzIHRvIGZvY3VzaW4vb3V0OyBlbnN1cmUgd2UncmUgbm90IGZpcmluZyB0aGVtIHJpZ2h0IG5vd1xuXHRcdGlmICggcmZvY3VzTW9ycGgudGVzdCggdHlwZSArIGpRdWVyeS5ldmVudC50cmlnZ2VyZWQgKSApIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHRpZiAoIHR5cGUuaW5kZXhPZiggXCIuXCIgKSA+IC0xICkge1xuXG5cdFx0XHQvLyBOYW1lc3BhY2VkIHRyaWdnZXI7IGNyZWF0ZSBhIHJlZ2V4cCB0byBtYXRjaCBldmVudCB0eXBlIGluIGhhbmRsZSgpXG5cdFx0XHRuYW1lc3BhY2VzID0gdHlwZS5zcGxpdCggXCIuXCIgKTtcblx0XHRcdHR5cGUgPSBuYW1lc3BhY2VzLnNoaWZ0KCk7XG5cdFx0XHRuYW1lc3BhY2VzLnNvcnQoKTtcblx0XHR9XG5cdFx0b250eXBlID0gdHlwZS5pbmRleE9mKCBcIjpcIiApIDwgMCAmJiBcIm9uXCIgKyB0eXBlO1xuXG5cdFx0Ly8gQ2FsbGVyIGNhbiBwYXNzIGluIGEgalF1ZXJ5LkV2ZW50IG9iamVjdCwgT2JqZWN0LCBvciBqdXN0IGFuIGV2ZW50IHR5cGUgc3RyaW5nXG5cdFx0ZXZlbnQgPSBldmVudFsgalF1ZXJ5LmV4cGFuZG8gXSA/XG5cdFx0XHRldmVudCA6XG5cdFx0XHRuZXcgalF1ZXJ5LkV2ZW50KCB0eXBlLCB0eXBlb2YgZXZlbnQgPT09IFwib2JqZWN0XCIgJiYgZXZlbnQgKTtcblxuXHRcdC8vIFRyaWdnZXIgYml0bWFzazogJiAxIGZvciBuYXRpdmUgaGFuZGxlcnM7ICYgMiBmb3IgalF1ZXJ5IChhbHdheXMgdHJ1ZSlcblx0XHRldmVudC5pc1RyaWdnZXIgPSBvbmx5SGFuZGxlcnMgPyAyIDogMztcblx0XHRldmVudC5uYW1lc3BhY2UgPSBuYW1lc3BhY2VzLmpvaW4oIFwiLlwiICk7XG5cdFx0ZXZlbnQucm5hbWVzcGFjZSA9IGV2ZW50Lm5hbWVzcGFjZSA/XG5cdFx0XHRuZXcgUmVnRXhwKCBcIihefFxcXFwuKVwiICsgbmFtZXNwYWNlcy5qb2luKCBcIlxcXFwuKD86LipcXFxcLnwpXCIgKSArIFwiKFxcXFwufCQpXCIgKSA6XG5cdFx0XHRudWxsO1xuXG5cdFx0Ly8gQ2xlYW4gdXAgdGhlIGV2ZW50IGluIGNhc2UgaXQgaXMgYmVpbmcgcmV1c2VkXG5cdFx0ZXZlbnQucmVzdWx0ID0gdW5kZWZpbmVkO1xuXHRcdGlmICggIWV2ZW50LnRhcmdldCApIHtcblx0XHRcdGV2ZW50LnRhcmdldCA9IGVsZW07XG5cdFx0fVxuXG5cdFx0Ly8gQ2xvbmUgYW55IGluY29taW5nIGRhdGEgYW5kIHByZXBlbmQgdGhlIGV2ZW50LCBjcmVhdGluZyB0aGUgaGFuZGxlciBhcmcgbGlzdFxuXHRcdGRhdGEgPSBkYXRhID09IG51bGwgP1xuXHRcdFx0WyBldmVudCBdIDpcblx0XHRcdGpRdWVyeS5tYWtlQXJyYXkoIGRhdGEsIFsgZXZlbnQgXSApO1xuXG5cdFx0Ly8gQWxsb3cgc3BlY2lhbCBldmVudHMgdG8gZHJhdyBvdXRzaWRlIHRoZSBsaW5lc1xuXHRcdHNwZWNpYWwgPSBqUXVlcnkuZXZlbnQuc3BlY2lhbFsgdHlwZSBdIHx8IHt9O1xuXHRcdGlmICggIW9ubHlIYW5kbGVycyAmJiBzcGVjaWFsLnRyaWdnZXIgJiYgc3BlY2lhbC50cmlnZ2VyLmFwcGx5KCBlbGVtLCBkYXRhICkgPT09IGZhbHNlICkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdC8vIERldGVybWluZSBldmVudCBwcm9wYWdhdGlvbiBwYXRoIGluIGFkdmFuY2UsIHBlciBXM0MgZXZlbnRzIHNwZWMgKCM5OTUxKVxuXHRcdC8vIEJ1YmJsZSB1cCB0byBkb2N1bWVudCwgdGhlbiB0byB3aW5kb3c7IHdhdGNoIGZvciBhIGdsb2JhbCBvd25lckRvY3VtZW50IHZhciAoIzk3MjQpXG5cdFx0aWYgKCAhb25seUhhbmRsZXJzICYmICFzcGVjaWFsLm5vQnViYmxlICYmICFpc1dpbmRvdyggZWxlbSApICkge1xuXG5cdFx0XHRidWJibGVUeXBlID0gc3BlY2lhbC5kZWxlZ2F0ZVR5cGUgfHwgdHlwZTtcblx0XHRcdGlmICggIXJmb2N1c01vcnBoLnRlc3QoIGJ1YmJsZVR5cGUgKyB0eXBlICkgKSB7XG5cdFx0XHRcdGN1ciA9IGN1ci5wYXJlbnROb2RlO1xuXHRcdFx0fVxuXHRcdFx0Zm9yICggOyBjdXI7IGN1ciA9IGN1ci5wYXJlbnROb2RlICkge1xuXHRcdFx0XHRldmVudFBhdGgucHVzaCggY3VyICk7XG5cdFx0XHRcdHRtcCA9IGN1cjtcblx0XHRcdH1cblxuXHRcdFx0Ly8gT25seSBhZGQgd2luZG93IGlmIHdlIGdvdCB0byBkb2N1bWVudCAoZS5nLiwgbm90IHBsYWluIG9iaiBvciBkZXRhY2hlZCBET00pXG5cdFx0XHRpZiAoIHRtcCA9PT0gKCBlbGVtLm93bmVyRG9jdW1lbnQgfHwgZG9jdW1lbnQgKSApIHtcblx0XHRcdFx0ZXZlbnRQYXRoLnB1c2goIHRtcC5kZWZhdWx0VmlldyB8fCB0bXAucGFyZW50V2luZG93IHx8IHdpbmRvdyApO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdC8vIEZpcmUgaGFuZGxlcnMgb24gdGhlIGV2ZW50IHBhdGhcblx0XHRpID0gMDtcblx0XHR3aGlsZSAoICggY3VyID0gZXZlbnRQYXRoWyBpKysgXSApICYmICFldmVudC5pc1Byb3BhZ2F0aW9uU3RvcHBlZCgpICkge1xuXHRcdFx0bGFzdEVsZW1lbnQgPSBjdXI7XG5cdFx0XHRldmVudC50eXBlID0gaSA+IDEgP1xuXHRcdFx0XHRidWJibGVUeXBlIDpcblx0XHRcdFx0c3BlY2lhbC5iaW5kVHlwZSB8fCB0eXBlO1xuXG5cdFx0XHQvLyBqUXVlcnkgaGFuZGxlclxuXHRcdFx0aGFuZGxlID0gKCBkYXRhUHJpdi5nZXQoIGN1ciwgXCJldmVudHNcIiApIHx8IHt9IClbIGV2ZW50LnR5cGUgXSAmJlxuXHRcdFx0XHRkYXRhUHJpdi5nZXQoIGN1ciwgXCJoYW5kbGVcIiApO1xuXHRcdFx0aWYgKCBoYW5kbGUgKSB7XG5cdFx0XHRcdGhhbmRsZS5hcHBseSggY3VyLCBkYXRhICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIE5hdGl2ZSBoYW5kbGVyXG5cdFx0XHRoYW5kbGUgPSBvbnR5cGUgJiYgY3VyWyBvbnR5cGUgXTtcblx0XHRcdGlmICggaGFuZGxlICYmIGhhbmRsZS5hcHBseSAmJiBhY2NlcHREYXRhKCBjdXIgKSApIHtcblx0XHRcdFx0ZXZlbnQucmVzdWx0ID0gaGFuZGxlLmFwcGx5KCBjdXIsIGRhdGEgKTtcblx0XHRcdFx0aWYgKCBldmVudC5yZXN1bHQgPT09IGZhbHNlICkge1xuXHRcdFx0XHRcdGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdFx0ZXZlbnQudHlwZSA9IHR5cGU7XG5cblx0XHQvLyBJZiBub2JvZHkgcHJldmVudGVkIHRoZSBkZWZhdWx0IGFjdGlvbiwgZG8gaXQgbm93XG5cdFx0aWYgKCAhb25seUhhbmRsZXJzICYmICFldmVudC5pc0RlZmF1bHRQcmV2ZW50ZWQoKSApIHtcblxuXHRcdFx0aWYgKCAoICFzcGVjaWFsLl9kZWZhdWx0IHx8XG5cdFx0XHRcdHNwZWNpYWwuX2RlZmF1bHQuYXBwbHkoIGV2ZW50UGF0aC5wb3AoKSwgZGF0YSApID09PSBmYWxzZSApICYmXG5cdFx0XHRcdGFjY2VwdERhdGEoIGVsZW0gKSApIHtcblxuXHRcdFx0XHQvLyBDYWxsIGEgbmF0aXZlIERPTSBtZXRob2Qgb24gdGhlIHRhcmdldCB3aXRoIHRoZSBzYW1lIG5hbWUgYXMgdGhlIGV2ZW50LlxuXHRcdFx0XHQvLyBEb24ndCBkbyBkZWZhdWx0IGFjdGlvbnMgb24gd2luZG93LCB0aGF0J3Mgd2hlcmUgZ2xvYmFsIHZhcmlhYmxlcyBiZSAoIzYxNzApXG5cdFx0XHRcdGlmICggb250eXBlICYmIGlzRnVuY3Rpb24oIGVsZW1bIHR5cGUgXSApICYmICFpc1dpbmRvdyggZWxlbSApICkge1xuXG5cdFx0XHRcdFx0Ly8gRG9uJ3QgcmUtdHJpZ2dlciBhbiBvbkZPTyBldmVudCB3aGVuIHdlIGNhbGwgaXRzIEZPTygpIG1ldGhvZFxuXHRcdFx0XHRcdHRtcCA9IGVsZW1bIG9udHlwZSBdO1xuXG5cdFx0XHRcdFx0aWYgKCB0bXAgKSB7XG5cdFx0XHRcdFx0XHRlbGVtWyBvbnR5cGUgXSA9IG51bGw7XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0Ly8gUHJldmVudCByZS10cmlnZ2VyaW5nIG9mIHRoZSBzYW1lIGV2ZW50LCBzaW5jZSB3ZSBhbHJlYWR5IGJ1YmJsZWQgaXQgYWJvdmVcblx0XHRcdFx0XHRqUXVlcnkuZXZlbnQudHJpZ2dlcmVkID0gdHlwZTtcblxuXHRcdFx0XHRcdGlmICggZXZlbnQuaXNQcm9wYWdhdGlvblN0b3BwZWQoKSApIHtcblx0XHRcdFx0XHRcdGxhc3RFbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoIHR5cGUsIHN0b3BQcm9wYWdhdGlvbkNhbGxiYWNrICk7XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0ZWxlbVsgdHlwZSBdKCk7XG5cblx0XHRcdFx0XHRpZiAoIGV2ZW50LmlzUHJvcGFnYXRpb25TdG9wcGVkKCkgKSB7XG5cdFx0XHRcdFx0XHRsYXN0RWxlbWVudC5yZW1vdmVFdmVudExpc3RlbmVyKCB0eXBlLCBzdG9wUHJvcGFnYXRpb25DYWxsYmFjayApO1xuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdGpRdWVyeS5ldmVudC50cmlnZ2VyZWQgPSB1bmRlZmluZWQ7XG5cblx0XHRcdFx0XHRpZiAoIHRtcCApIHtcblx0XHRcdFx0XHRcdGVsZW1bIG9udHlwZSBdID0gdG1wO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHJldHVybiBldmVudC5yZXN1bHQ7XG5cdH0sXG5cblx0Ly8gUGlnZ3liYWNrIG9uIGEgZG9ub3IgZXZlbnQgdG8gc2ltdWxhdGUgYSBkaWZmZXJlbnQgb25lXG5cdC8vIFVzZWQgb25seSBmb3IgYGZvY3VzKGluIHwgb3V0KWAgZXZlbnRzXG5cdHNpbXVsYXRlOiBmdW5jdGlvbiggdHlwZSwgZWxlbSwgZXZlbnQgKSB7XG5cdFx0dmFyIGUgPSBqUXVlcnkuZXh0ZW5kKFxuXHRcdFx0bmV3IGpRdWVyeS5FdmVudCgpLFxuXHRcdFx0ZXZlbnQsXG5cdFx0XHR7XG5cdFx0XHRcdHR5cGU6IHR5cGUsXG5cdFx0XHRcdGlzU2ltdWxhdGVkOiB0cnVlXG5cdFx0XHR9XG5cdFx0KTtcblxuXHRcdGpRdWVyeS5ldmVudC50cmlnZ2VyKCBlLCBudWxsLCBlbGVtICk7XG5cdH1cblxufSApO1xuXG5qUXVlcnkuZm4uZXh0ZW5kKCB7XG5cblx0dHJpZ2dlcjogZnVuY3Rpb24oIHR5cGUsIGRhdGEgKSB7XG5cdFx0cmV0dXJuIHRoaXMuZWFjaCggZnVuY3Rpb24oKSB7XG5cdFx0XHRqUXVlcnkuZXZlbnQudHJpZ2dlciggdHlwZSwgZGF0YSwgdGhpcyApO1xuXHRcdH0gKTtcblx0fSxcblx0dHJpZ2dlckhhbmRsZXI6IGZ1bmN0aW9uKCB0eXBlLCBkYXRhICkge1xuXHRcdHZhciBlbGVtID0gdGhpc1sgMCBdO1xuXHRcdGlmICggZWxlbSApIHtcblx0XHRcdHJldHVybiBqUXVlcnkuZXZlbnQudHJpZ2dlciggdHlwZSwgZGF0YSwgZWxlbSwgdHJ1ZSApO1xuXHRcdH1cblx0fVxufSApO1xuXG5cbi8vIFN1cHBvcnQ6IEZpcmVmb3ggPD00NFxuLy8gRmlyZWZveCBkb2Vzbid0IGhhdmUgZm9jdXMoaW4gfCBvdXQpIGV2ZW50c1xuLy8gUmVsYXRlZCB0aWNrZXQgLSBodHRwczovL2J1Z3ppbGxhLm1vemlsbGEub3JnL3Nob3dfYnVnLmNnaT9pZD02ODc3ODdcbi8vXG4vLyBTdXBwb3J0OiBDaHJvbWUgPD00OCAtIDQ5LCBTYWZhcmkgPD05LjAgLSA5LjFcbi8vIGZvY3VzKGluIHwgb3V0KSBldmVudHMgZmlyZSBhZnRlciBmb2N1cyAmIGJsdXIgZXZlbnRzLFxuLy8gd2hpY2ggaXMgc3BlYyB2aW9sYXRpb24gLSBodHRwOi8vd3d3LnczLm9yZy9UUi9ET00tTGV2ZWwtMy1FdmVudHMvI2V2ZW50cy1mb2N1c2V2ZW50LWV2ZW50LW9yZGVyXG4vLyBSZWxhdGVkIHRpY2tldCAtIGh0dHBzOi8vYnVncy5jaHJvbWl1bS5vcmcvcC9jaHJvbWl1bS9pc3N1ZXMvZGV0YWlsP2lkPTQ0OTg1N1xuaWYgKCAhc3VwcG9ydC5mb2N1c2luICkge1xuXHRqUXVlcnkuZWFjaCggeyBmb2N1czogXCJmb2N1c2luXCIsIGJsdXI6IFwiZm9jdXNvdXRcIiB9LCBmdW5jdGlvbiggb3JpZywgZml4ICkge1xuXG5cdFx0Ly8gQXR0YWNoIGEgc2luZ2xlIGNhcHR1cmluZyBoYW5kbGVyIG9uIHRoZSBkb2N1bWVudCB3aGlsZSBzb21lb25lIHdhbnRzIGZvY3VzaW4vZm9jdXNvdXRcblx0XHR2YXIgaGFuZGxlciA9IGZ1bmN0aW9uKCBldmVudCApIHtcblx0XHRcdGpRdWVyeS5ldmVudC5zaW11bGF0ZSggZml4LCBldmVudC50YXJnZXQsIGpRdWVyeS5ldmVudC5maXgoIGV2ZW50ICkgKTtcblx0XHR9O1xuXG5cdFx0alF1ZXJ5LmV2ZW50LnNwZWNpYWxbIGZpeCBdID0ge1xuXHRcdFx0c2V0dXA6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHR2YXIgZG9jID0gdGhpcy5vd25lckRvY3VtZW50IHx8IHRoaXMsXG5cdFx0XHRcdFx0YXR0YWNoZXMgPSBkYXRhUHJpdi5hY2Nlc3MoIGRvYywgZml4ICk7XG5cblx0XHRcdFx0aWYgKCAhYXR0YWNoZXMgKSB7XG5cdFx0XHRcdFx0ZG9jLmFkZEV2ZW50TGlzdGVuZXIoIG9yaWcsIGhhbmRsZXIsIHRydWUgKTtcblx0XHRcdFx0fVxuXHRcdFx0XHRkYXRhUHJpdi5hY2Nlc3MoIGRvYywgZml4LCAoIGF0dGFjaGVzIHx8IDAgKSArIDEgKTtcblx0XHRcdH0sXG5cdFx0XHR0ZWFyZG93bjogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdHZhciBkb2MgPSB0aGlzLm93bmVyRG9jdW1lbnQgfHwgdGhpcyxcblx0XHRcdFx0XHRhdHRhY2hlcyA9IGRhdGFQcml2LmFjY2VzcyggZG9jLCBmaXggKSAtIDE7XG5cblx0XHRcdFx0aWYgKCAhYXR0YWNoZXMgKSB7XG5cdFx0XHRcdFx0ZG9jLnJlbW92ZUV2ZW50TGlzdGVuZXIoIG9yaWcsIGhhbmRsZXIsIHRydWUgKTtcblx0XHRcdFx0XHRkYXRhUHJpdi5yZW1vdmUoIGRvYywgZml4ICk7XG5cblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRkYXRhUHJpdi5hY2Nlc3MoIGRvYywgZml4LCBhdHRhY2hlcyApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fTtcblx0fSApO1xufVxudmFyIGxvY2F0aW9uID0gd2luZG93LmxvY2F0aW9uO1xuXG52YXIgbm9uY2UgPSBEYXRlLm5vdygpO1xuXG52YXIgcnF1ZXJ5ID0gKCAvXFw/LyApO1xuXG5cblxuLy8gQ3Jvc3MtYnJvd3NlciB4bWwgcGFyc2luZ1xualF1ZXJ5LnBhcnNlWE1MID0gZnVuY3Rpb24oIGRhdGEgKSB7XG5cdHZhciB4bWw7XG5cdGlmICggIWRhdGEgfHwgdHlwZW9mIGRhdGEgIT09IFwic3RyaW5nXCIgKSB7XG5cdFx0cmV0dXJuIG51bGw7XG5cdH1cblxuXHQvLyBTdXBwb3J0OiBJRSA5IC0gMTEgb25seVxuXHQvLyBJRSB0aHJvd3Mgb24gcGFyc2VGcm9tU3RyaW5nIHdpdGggaW52YWxpZCBpbnB1dC5cblx0dHJ5IHtcblx0XHR4bWwgPSAoIG5ldyB3aW5kb3cuRE9NUGFyc2VyKCkgKS5wYXJzZUZyb21TdHJpbmcoIGRhdGEsIFwidGV4dC94bWxcIiApO1xuXHR9IGNhdGNoICggZSApIHtcblx0XHR4bWwgPSB1bmRlZmluZWQ7XG5cdH1cblxuXHRpZiAoICF4bWwgfHwgeG1sLmdldEVsZW1lbnRzQnlUYWdOYW1lKCBcInBhcnNlcmVycm9yXCIgKS5sZW5ndGggKSB7XG5cdFx0alF1ZXJ5LmVycm9yKCBcIkludmFsaWQgWE1MOiBcIiArIGRhdGEgKTtcblx0fVxuXHRyZXR1cm4geG1sO1xufTtcblxuXG52YXJcblx0cmJyYWNrZXQgPSAvXFxbXFxdJC8sXG5cdHJDUkxGID0gL1xccj9cXG4vZyxcblx0cnN1Ym1pdHRlclR5cGVzID0gL14oPzpzdWJtaXR8YnV0dG9ufGltYWdlfHJlc2V0fGZpbGUpJC9pLFxuXHRyc3VibWl0dGFibGUgPSAvXig/OmlucHV0fHNlbGVjdHx0ZXh0YXJlYXxrZXlnZW4pL2k7XG5cbmZ1bmN0aW9uIGJ1aWxkUGFyYW1zKCBwcmVmaXgsIG9iaiwgdHJhZGl0aW9uYWwsIGFkZCApIHtcblx0dmFyIG5hbWU7XG5cblx0aWYgKCBBcnJheS5pc0FycmF5KCBvYmogKSApIHtcblxuXHRcdC8vIFNlcmlhbGl6ZSBhcnJheSBpdGVtLlxuXHRcdGpRdWVyeS5lYWNoKCBvYmosIGZ1bmN0aW9uKCBpLCB2ICkge1xuXHRcdFx0aWYgKCB0cmFkaXRpb25hbCB8fCByYnJhY2tldC50ZXN0KCBwcmVmaXggKSApIHtcblxuXHRcdFx0XHQvLyBUcmVhdCBlYWNoIGFycmF5IGl0ZW0gYXMgYSBzY2FsYXIuXG5cdFx0XHRcdGFkZCggcHJlZml4LCB2ICk7XG5cblx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0Ly8gSXRlbSBpcyBub24tc2NhbGFyIChhcnJheSBvciBvYmplY3QpLCBlbmNvZGUgaXRzIG51bWVyaWMgaW5kZXguXG5cdFx0XHRcdGJ1aWxkUGFyYW1zKFxuXHRcdFx0XHRcdHByZWZpeCArIFwiW1wiICsgKCB0eXBlb2YgdiA9PT0gXCJvYmplY3RcIiAmJiB2ICE9IG51bGwgPyBpIDogXCJcIiApICsgXCJdXCIsXG5cdFx0XHRcdFx0dixcblx0XHRcdFx0XHR0cmFkaXRpb25hbCxcblx0XHRcdFx0XHRhZGRcblx0XHRcdFx0KTtcblx0XHRcdH1cblx0XHR9ICk7XG5cblx0fSBlbHNlIGlmICggIXRyYWRpdGlvbmFsICYmIHRvVHlwZSggb2JqICkgPT09IFwib2JqZWN0XCIgKSB7XG5cblx0XHQvLyBTZXJpYWxpemUgb2JqZWN0IGl0ZW0uXG5cdFx0Zm9yICggbmFtZSBpbiBvYmogKSB7XG5cdFx0XHRidWlsZFBhcmFtcyggcHJlZml4ICsgXCJbXCIgKyBuYW1lICsgXCJdXCIsIG9ialsgbmFtZSBdLCB0cmFkaXRpb25hbCwgYWRkICk7XG5cdFx0fVxuXG5cdH0gZWxzZSB7XG5cblx0XHQvLyBTZXJpYWxpemUgc2NhbGFyIGl0ZW0uXG5cdFx0YWRkKCBwcmVmaXgsIG9iaiApO1xuXHR9XG59XG5cbi8vIFNlcmlhbGl6ZSBhbiBhcnJheSBvZiBmb3JtIGVsZW1lbnRzIG9yIGEgc2V0IG9mXG4vLyBrZXkvdmFsdWVzIGludG8gYSBxdWVyeSBzdHJpbmdcbmpRdWVyeS5wYXJhbSA9IGZ1bmN0aW9uKCBhLCB0cmFkaXRpb25hbCApIHtcblx0dmFyIHByZWZpeCxcblx0XHRzID0gW10sXG5cdFx0YWRkID0gZnVuY3Rpb24oIGtleSwgdmFsdWVPckZ1bmN0aW9uICkge1xuXG5cdFx0XHQvLyBJZiB2YWx1ZSBpcyBhIGZ1bmN0aW9uLCBpbnZva2UgaXQgYW5kIHVzZSBpdHMgcmV0dXJuIHZhbHVlXG5cdFx0XHR2YXIgdmFsdWUgPSBpc0Z1bmN0aW9uKCB2YWx1ZU9yRnVuY3Rpb24gKSA/XG5cdFx0XHRcdHZhbHVlT3JGdW5jdGlvbigpIDpcblx0XHRcdFx0dmFsdWVPckZ1bmN0aW9uO1xuXG5cdFx0XHRzWyBzLmxlbmd0aCBdID0gZW5jb2RlVVJJQ29tcG9uZW50KCBrZXkgKSArIFwiPVwiICtcblx0XHRcdFx0ZW5jb2RlVVJJQ29tcG9uZW50KCB2YWx1ZSA9PSBudWxsID8gXCJcIiA6IHZhbHVlICk7XG5cdFx0fTtcblxuXHQvLyBJZiBhbiBhcnJheSB3YXMgcGFzc2VkIGluLCBhc3N1bWUgdGhhdCBpdCBpcyBhbiBhcnJheSBvZiBmb3JtIGVsZW1lbnRzLlxuXHRpZiAoIEFycmF5LmlzQXJyYXkoIGEgKSB8fCAoIGEuanF1ZXJ5ICYmICFqUXVlcnkuaXNQbGFpbk9iamVjdCggYSApICkgKSB7XG5cblx0XHQvLyBTZXJpYWxpemUgdGhlIGZvcm0gZWxlbWVudHNcblx0XHRqUXVlcnkuZWFjaCggYSwgZnVuY3Rpb24oKSB7XG5cdFx0XHRhZGQoIHRoaXMubmFtZSwgdGhpcy52YWx1ZSApO1xuXHRcdH0gKTtcblxuXHR9IGVsc2Uge1xuXG5cdFx0Ly8gSWYgdHJhZGl0aW9uYWwsIGVuY29kZSB0aGUgXCJvbGRcIiB3YXkgKHRoZSB3YXkgMS4zLjIgb3Igb2xkZXJcblx0XHQvLyBkaWQgaXQpLCBvdGhlcndpc2UgZW5jb2RlIHBhcmFtcyByZWN1cnNpdmVseS5cblx0XHRmb3IgKCBwcmVmaXggaW4gYSApIHtcblx0XHRcdGJ1aWxkUGFyYW1zKCBwcmVmaXgsIGFbIHByZWZpeCBdLCB0cmFkaXRpb25hbCwgYWRkICk7XG5cdFx0fVxuXHR9XG5cblx0Ly8gUmV0dXJuIHRoZSByZXN1bHRpbmcgc2VyaWFsaXphdGlvblxuXHRyZXR1cm4gcy5qb2luKCBcIiZcIiApO1xufTtcblxualF1ZXJ5LmZuLmV4dGVuZCgge1xuXHRzZXJpYWxpemU6IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiBqUXVlcnkucGFyYW0oIHRoaXMuc2VyaWFsaXplQXJyYXkoKSApO1xuXHR9LFxuXHRzZXJpYWxpemVBcnJheTogZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIHRoaXMubWFwKCBmdW5jdGlvbigpIHtcblxuXHRcdFx0Ly8gQ2FuIGFkZCBwcm9wSG9vayBmb3IgXCJlbGVtZW50c1wiIHRvIGZpbHRlciBvciBhZGQgZm9ybSBlbGVtZW50c1xuXHRcdFx0dmFyIGVsZW1lbnRzID0galF1ZXJ5LnByb3AoIHRoaXMsIFwiZWxlbWVudHNcIiApO1xuXHRcdFx0cmV0dXJuIGVsZW1lbnRzID8galF1ZXJ5Lm1ha2VBcnJheSggZWxlbWVudHMgKSA6IHRoaXM7XG5cdFx0fSApXG5cdFx0LmZpbHRlciggZnVuY3Rpb24oKSB7XG5cdFx0XHR2YXIgdHlwZSA9IHRoaXMudHlwZTtcblxuXHRcdFx0Ly8gVXNlIC5pcyggXCI6ZGlzYWJsZWRcIiApIHNvIHRoYXQgZmllbGRzZXRbZGlzYWJsZWRdIHdvcmtzXG5cdFx0XHRyZXR1cm4gdGhpcy5uYW1lICYmICFqUXVlcnkoIHRoaXMgKS5pcyggXCI6ZGlzYWJsZWRcIiApICYmXG5cdFx0XHRcdHJzdWJtaXR0YWJsZS50ZXN0KCB0aGlzLm5vZGVOYW1lICkgJiYgIXJzdWJtaXR0ZXJUeXBlcy50ZXN0KCB0eXBlICkgJiZcblx0XHRcdFx0KCB0aGlzLmNoZWNrZWQgfHwgIXJjaGVja2FibGVUeXBlLnRlc3QoIHR5cGUgKSApO1xuXHRcdH0gKVxuXHRcdC5tYXAoIGZ1bmN0aW9uKCBpLCBlbGVtICkge1xuXHRcdFx0dmFyIHZhbCA9IGpRdWVyeSggdGhpcyApLnZhbCgpO1xuXG5cdFx0XHRpZiAoIHZhbCA9PSBudWxsICkge1xuXHRcdFx0XHRyZXR1cm4gbnVsbDtcblx0XHRcdH1cblxuXHRcdFx0aWYgKCBBcnJheS5pc0FycmF5KCB2YWwgKSApIHtcblx0XHRcdFx0cmV0dXJuIGpRdWVyeS5tYXAoIHZhbCwgZnVuY3Rpb24oIHZhbCApIHtcblx0XHRcdFx0XHRyZXR1cm4geyBuYW1lOiBlbGVtLm5hbWUsIHZhbHVlOiB2YWwucmVwbGFjZSggckNSTEYsIFwiXFxyXFxuXCIgKSB9O1xuXHRcdFx0XHR9ICk7XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiB7IG5hbWU6IGVsZW0ubmFtZSwgdmFsdWU6IHZhbC5yZXBsYWNlKCByQ1JMRiwgXCJcXHJcXG5cIiApIH07XG5cdFx0fSApLmdldCgpO1xuXHR9XG59ICk7XG5cblxudmFyXG5cdHIyMCA9IC8lMjAvZyxcblx0cmhhc2ggPSAvIy4qJC8sXG5cdHJhbnRpQ2FjaGUgPSAvKFs/Jl0pXz1bXiZdKi8sXG5cdHJoZWFkZXJzID0gL14oLio/KTpbIFxcdF0qKFteXFxyXFxuXSopJC9tZyxcblxuXHQvLyAjNzY1MywgIzgxMjUsICM4MTUyOiBsb2NhbCBwcm90b2NvbCBkZXRlY3Rpb25cblx0cmxvY2FsUHJvdG9jb2wgPSAvXig/OmFib3V0fGFwcHxhcHAtc3RvcmFnZXwuKy1leHRlbnNpb258ZmlsZXxyZXN8d2lkZ2V0KTokLyxcblx0cm5vQ29udGVudCA9IC9eKD86R0VUfEhFQUQpJC8sXG5cdHJwcm90b2NvbCA9IC9eXFwvXFwvLyxcblxuXHQvKiBQcmVmaWx0ZXJzXG5cdCAqIDEpIFRoZXkgYXJlIHVzZWZ1bCB0byBpbnRyb2R1Y2UgY3VzdG9tIGRhdGFUeXBlcyAoc2VlIGFqYXgvanNvbnAuanMgZm9yIGFuIGV4YW1wbGUpXG5cdCAqIDIpIFRoZXNlIGFyZSBjYWxsZWQ6XG5cdCAqICAgIC0gQkVGT1JFIGFza2luZyBmb3IgYSB0cmFuc3BvcnRcblx0ICogICAgLSBBRlRFUiBwYXJhbSBzZXJpYWxpemF0aW9uIChzLmRhdGEgaXMgYSBzdHJpbmcgaWYgcy5wcm9jZXNzRGF0YSBpcyB0cnVlKVxuXHQgKiAzKSBrZXkgaXMgdGhlIGRhdGFUeXBlXG5cdCAqIDQpIHRoZSBjYXRjaGFsbCBzeW1ib2wgXCIqXCIgY2FuIGJlIHVzZWRcblx0ICogNSkgZXhlY3V0aW9uIHdpbGwgc3RhcnQgd2l0aCB0cmFuc3BvcnQgZGF0YVR5cGUgYW5kIFRIRU4gY29udGludWUgZG93biB0byBcIipcIiBpZiBuZWVkZWRcblx0ICovXG5cdHByZWZpbHRlcnMgPSB7fSxcblxuXHQvKiBUcmFuc3BvcnRzIGJpbmRpbmdzXG5cdCAqIDEpIGtleSBpcyB0aGUgZGF0YVR5cGVcblx0ICogMikgdGhlIGNhdGNoYWxsIHN5bWJvbCBcIipcIiBjYW4gYmUgdXNlZFxuXHQgKiAzKSBzZWxlY3Rpb24gd2lsbCBzdGFydCB3aXRoIHRyYW5zcG9ydCBkYXRhVHlwZSBhbmQgVEhFTiBnbyB0byBcIipcIiBpZiBuZWVkZWRcblx0ICovXG5cdHRyYW5zcG9ydHMgPSB7fSxcblxuXHQvLyBBdm9pZCBjb21tZW50LXByb2xvZyBjaGFyIHNlcXVlbmNlICgjMTAwOTgpOyBtdXN0IGFwcGVhc2UgbGludCBhbmQgZXZhZGUgY29tcHJlc3Npb25cblx0YWxsVHlwZXMgPSBcIiovXCIuY29uY2F0KCBcIipcIiApLFxuXG5cdC8vIEFuY2hvciB0YWcgZm9yIHBhcnNpbmcgdGhlIGRvY3VtZW50IG9yaWdpblxuXHRvcmlnaW5BbmNob3IgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCBcImFcIiApO1xuXHRvcmlnaW5BbmNob3IuaHJlZiA9IGxvY2F0aW9uLmhyZWY7XG5cbi8vIEJhc2UgXCJjb25zdHJ1Y3RvclwiIGZvciBqUXVlcnkuYWpheFByZWZpbHRlciBhbmQgalF1ZXJ5LmFqYXhUcmFuc3BvcnRcbmZ1bmN0aW9uIGFkZFRvUHJlZmlsdGVyc09yVHJhbnNwb3J0cyggc3RydWN0dXJlICkge1xuXG5cdC8vIGRhdGFUeXBlRXhwcmVzc2lvbiBpcyBvcHRpb25hbCBhbmQgZGVmYXVsdHMgdG8gXCIqXCJcblx0cmV0dXJuIGZ1bmN0aW9uKCBkYXRhVHlwZUV4cHJlc3Npb24sIGZ1bmMgKSB7XG5cblx0XHRpZiAoIHR5cGVvZiBkYXRhVHlwZUV4cHJlc3Npb24gIT09IFwic3RyaW5nXCIgKSB7XG5cdFx0XHRmdW5jID0gZGF0YVR5cGVFeHByZXNzaW9uO1xuXHRcdFx0ZGF0YVR5cGVFeHByZXNzaW9uID0gXCIqXCI7XG5cdFx0fVxuXG5cdFx0dmFyIGRhdGFUeXBlLFxuXHRcdFx0aSA9IDAsXG5cdFx0XHRkYXRhVHlwZXMgPSBkYXRhVHlwZUV4cHJlc3Npb24udG9Mb3dlckNhc2UoKS5tYXRjaCggcm5vdGh0bWx3aGl0ZSApIHx8IFtdO1xuXG5cdFx0aWYgKCBpc0Z1bmN0aW9uKCBmdW5jICkgKSB7XG5cblx0XHRcdC8vIEZvciBlYWNoIGRhdGFUeXBlIGluIHRoZSBkYXRhVHlwZUV4cHJlc3Npb25cblx0XHRcdHdoaWxlICggKCBkYXRhVHlwZSA9IGRhdGFUeXBlc1sgaSsrIF0gKSApIHtcblxuXHRcdFx0XHQvLyBQcmVwZW5kIGlmIHJlcXVlc3RlZFxuXHRcdFx0XHRpZiAoIGRhdGFUeXBlWyAwIF0gPT09IFwiK1wiICkge1xuXHRcdFx0XHRcdGRhdGFUeXBlID0gZGF0YVR5cGUuc2xpY2UoIDEgKSB8fCBcIipcIjtcblx0XHRcdFx0XHQoIHN0cnVjdHVyZVsgZGF0YVR5cGUgXSA9IHN0cnVjdHVyZVsgZGF0YVR5cGUgXSB8fCBbXSApLnVuc2hpZnQoIGZ1bmMgKTtcblxuXHRcdFx0XHQvLyBPdGhlcndpc2UgYXBwZW5kXG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0KCBzdHJ1Y3R1cmVbIGRhdGFUeXBlIF0gPSBzdHJ1Y3R1cmVbIGRhdGFUeXBlIF0gfHwgW10gKS5wdXNoKCBmdW5jICk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdH07XG59XG5cbi8vIEJhc2UgaW5zcGVjdGlvbiBmdW5jdGlvbiBmb3IgcHJlZmlsdGVycyBhbmQgdHJhbnNwb3J0c1xuZnVuY3Rpb24gaW5zcGVjdFByZWZpbHRlcnNPclRyYW5zcG9ydHMoIHN0cnVjdHVyZSwgb3B0aW9ucywgb3JpZ2luYWxPcHRpb25zLCBqcVhIUiApIHtcblxuXHR2YXIgaW5zcGVjdGVkID0ge30sXG5cdFx0c2Vla2luZ1RyYW5zcG9ydCA9ICggc3RydWN0dXJlID09PSB0cmFuc3BvcnRzICk7XG5cblx0ZnVuY3Rpb24gaW5zcGVjdCggZGF0YVR5cGUgKSB7XG5cdFx0dmFyIHNlbGVjdGVkO1xuXHRcdGluc3BlY3RlZFsgZGF0YVR5cGUgXSA9IHRydWU7XG5cdFx0alF1ZXJ5LmVhY2goIHN0cnVjdHVyZVsgZGF0YVR5cGUgXSB8fCBbXSwgZnVuY3Rpb24oIF8sIHByZWZpbHRlck9yRmFjdG9yeSApIHtcblx0XHRcdHZhciBkYXRhVHlwZU9yVHJhbnNwb3J0ID0gcHJlZmlsdGVyT3JGYWN0b3J5KCBvcHRpb25zLCBvcmlnaW5hbE9wdGlvbnMsIGpxWEhSICk7XG5cdFx0XHRpZiAoIHR5cGVvZiBkYXRhVHlwZU9yVHJhbnNwb3J0ID09PSBcInN0cmluZ1wiICYmXG5cdFx0XHRcdCFzZWVraW5nVHJhbnNwb3J0ICYmICFpbnNwZWN0ZWRbIGRhdGFUeXBlT3JUcmFuc3BvcnQgXSApIHtcblxuXHRcdFx0XHRvcHRpb25zLmRhdGFUeXBlcy51bnNoaWZ0KCBkYXRhVHlwZU9yVHJhbnNwb3J0ICk7XG5cdFx0XHRcdGluc3BlY3QoIGRhdGFUeXBlT3JUcmFuc3BvcnQgKTtcblx0XHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdFx0fSBlbHNlIGlmICggc2Vla2luZ1RyYW5zcG9ydCApIHtcblx0XHRcdFx0cmV0dXJuICEoIHNlbGVjdGVkID0gZGF0YVR5cGVPclRyYW5zcG9ydCApO1xuXHRcdFx0fVxuXHRcdH0gKTtcblx0XHRyZXR1cm4gc2VsZWN0ZWQ7XG5cdH1cblxuXHRyZXR1cm4gaW5zcGVjdCggb3B0aW9ucy5kYXRhVHlwZXNbIDAgXSApIHx8ICFpbnNwZWN0ZWRbIFwiKlwiIF0gJiYgaW5zcGVjdCggXCIqXCIgKTtcbn1cblxuLy8gQSBzcGVjaWFsIGV4dGVuZCBmb3IgYWpheCBvcHRpb25zXG4vLyB0aGF0IHRha2VzIFwiZmxhdFwiIG9wdGlvbnMgKG5vdCB0byBiZSBkZWVwIGV4dGVuZGVkKVxuLy8gRml4ZXMgIzk4ODdcbmZ1bmN0aW9uIGFqYXhFeHRlbmQoIHRhcmdldCwgc3JjICkge1xuXHR2YXIga2V5LCBkZWVwLFxuXHRcdGZsYXRPcHRpb25zID0galF1ZXJ5LmFqYXhTZXR0aW5ncy5mbGF0T3B0aW9ucyB8fCB7fTtcblxuXHRmb3IgKCBrZXkgaW4gc3JjICkge1xuXHRcdGlmICggc3JjWyBrZXkgXSAhPT0gdW5kZWZpbmVkICkge1xuXHRcdFx0KCBmbGF0T3B0aW9uc1sga2V5IF0gPyB0YXJnZXQgOiAoIGRlZXAgfHwgKCBkZWVwID0ge30gKSApIClbIGtleSBdID0gc3JjWyBrZXkgXTtcblx0XHR9XG5cdH1cblx0aWYgKCBkZWVwICkge1xuXHRcdGpRdWVyeS5leHRlbmQoIHRydWUsIHRhcmdldCwgZGVlcCApO1xuXHR9XG5cblx0cmV0dXJuIHRhcmdldDtcbn1cblxuLyogSGFuZGxlcyByZXNwb25zZXMgdG8gYW4gYWpheCByZXF1ZXN0OlxuICogLSBmaW5kcyB0aGUgcmlnaHQgZGF0YVR5cGUgKG1lZGlhdGVzIGJldHdlZW4gY29udGVudC10eXBlIGFuZCBleHBlY3RlZCBkYXRhVHlwZSlcbiAqIC0gcmV0dXJucyB0aGUgY29ycmVzcG9uZGluZyByZXNwb25zZVxuICovXG5mdW5jdGlvbiBhamF4SGFuZGxlUmVzcG9uc2VzKCBzLCBqcVhIUiwgcmVzcG9uc2VzICkge1xuXG5cdHZhciBjdCwgdHlwZSwgZmluYWxEYXRhVHlwZSwgZmlyc3REYXRhVHlwZSxcblx0XHRjb250ZW50cyA9IHMuY29udGVudHMsXG5cdFx0ZGF0YVR5cGVzID0gcy5kYXRhVHlwZXM7XG5cblx0Ly8gUmVtb3ZlIGF1dG8gZGF0YVR5cGUgYW5kIGdldCBjb250ZW50LXR5cGUgaW4gdGhlIHByb2Nlc3Ncblx0d2hpbGUgKCBkYXRhVHlwZXNbIDAgXSA9PT0gXCIqXCIgKSB7XG5cdFx0ZGF0YVR5cGVzLnNoaWZ0KCk7XG5cdFx0aWYgKCBjdCA9PT0gdW5kZWZpbmVkICkge1xuXHRcdFx0Y3QgPSBzLm1pbWVUeXBlIHx8IGpxWEhSLmdldFJlc3BvbnNlSGVhZGVyKCBcIkNvbnRlbnQtVHlwZVwiICk7XG5cdFx0fVxuXHR9XG5cblx0Ly8gQ2hlY2sgaWYgd2UncmUgZGVhbGluZyB3aXRoIGEga25vd24gY29udGVudC10eXBlXG5cdGlmICggY3QgKSB7XG5cdFx0Zm9yICggdHlwZSBpbiBjb250ZW50cyApIHtcblx0XHRcdGlmICggY29udGVudHNbIHR5cGUgXSAmJiBjb250ZW50c1sgdHlwZSBdLnRlc3QoIGN0ICkgKSB7XG5cdFx0XHRcdGRhdGFUeXBlcy51bnNoaWZ0KCB0eXBlICk7XG5cdFx0XHRcdGJyZWFrO1xuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdC8vIENoZWNrIHRvIHNlZSBpZiB3ZSBoYXZlIGEgcmVzcG9uc2UgZm9yIHRoZSBleHBlY3RlZCBkYXRhVHlwZVxuXHRpZiAoIGRhdGFUeXBlc1sgMCBdIGluIHJlc3BvbnNlcyApIHtcblx0XHRmaW5hbERhdGFUeXBlID0gZGF0YVR5cGVzWyAwIF07XG5cdH0gZWxzZSB7XG5cblx0XHQvLyBUcnkgY29udmVydGlibGUgZGF0YVR5cGVzXG5cdFx0Zm9yICggdHlwZSBpbiByZXNwb25zZXMgKSB7XG5cdFx0XHRpZiAoICFkYXRhVHlwZXNbIDAgXSB8fCBzLmNvbnZlcnRlcnNbIHR5cGUgKyBcIiBcIiArIGRhdGFUeXBlc1sgMCBdIF0gKSB7XG5cdFx0XHRcdGZpbmFsRGF0YVR5cGUgPSB0eXBlO1xuXHRcdFx0XHRicmVhaztcblx0XHRcdH1cblx0XHRcdGlmICggIWZpcnN0RGF0YVR5cGUgKSB7XG5cdFx0XHRcdGZpcnN0RGF0YVR5cGUgPSB0eXBlO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdC8vIE9yIGp1c3QgdXNlIGZpcnN0IG9uZVxuXHRcdGZpbmFsRGF0YVR5cGUgPSBmaW5hbERhdGFUeXBlIHx8IGZpcnN0RGF0YVR5cGU7XG5cdH1cblxuXHQvLyBJZiB3ZSBmb3VuZCBhIGRhdGFUeXBlXG5cdC8vIFdlIGFkZCB0aGUgZGF0YVR5cGUgdG8gdGhlIGxpc3QgaWYgbmVlZGVkXG5cdC8vIGFuZCByZXR1cm4gdGhlIGNvcnJlc3BvbmRpbmcgcmVzcG9uc2Vcblx0aWYgKCBmaW5hbERhdGFUeXBlICkge1xuXHRcdGlmICggZmluYWxEYXRhVHlwZSAhPT0gZGF0YVR5cGVzWyAwIF0gKSB7XG5cdFx0XHRkYXRhVHlwZXMudW5zaGlmdCggZmluYWxEYXRhVHlwZSApO1xuXHRcdH1cblx0XHRyZXR1cm4gcmVzcG9uc2VzWyBmaW5hbERhdGFUeXBlIF07XG5cdH1cbn1cblxuLyogQ2hhaW4gY29udmVyc2lvbnMgZ2l2ZW4gdGhlIHJlcXVlc3QgYW5kIHRoZSBvcmlnaW5hbCByZXNwb25zZVxuICogQWxzbyBzZXRzIHRoZSByZXNwb25zZVhYWCBmaWVsZHMgb24gdGhlIGpxWEhSIGluc3RhbmNlXG4gKi9cbmZ1bmN0aW9uIGFqYXhDb252ZXJ0KCBzLCByZXNwb25zZSwganFYSFIsIGlzU3VjY2VzcyApIHtcblx0dmFyIGNvbnYyLCBjdXJyZW50LCBjb252LCB0bXAsIHByZXYsXG5cdFx0Y29udmVydGVycyA9IHt9LFxuXG5cdFx0Ly8gV29yayB3aXRoIGEgY29weSBvZiBkYXRhVHlwZXMgaW4gY2FzZSB3ZSBuZWVkIHRvIG1vZGlmeSBpdCBmb3IgY29udmVyc2lvblxuXHRcdGRhdGFUeXBlcyA9IHMuZGF0YVR5cGVzLnNsaWNlKCk7XG5cblx0Ly8gQ3JlYXRlIGNvbnZlcnRlcnMgbWFwIHdpdGggbG93ZXJjYXNlZCBrZXlzXG5cdGlmICggZGF0YVR5cGVzWyAxIF0gKSB7XG5cdFx0Zm9yICggY29udiBpbiBzLmNvbnZlcnRlcnMgKSB7XG5cdFx0XHRjb252ZXJ0ZXJzWyBjb252LnRvTG93ZXJDYXNlKCkgXSA9IHMuY29udmVydGVyc1sgY29udiBdO1xuXHRcdH1cblx0fVxuXG5cdGN1cnJlbnQgPSBkYXRhVHlwZXMuc2hpZnQoKTtcblxuXHQvLyBDb252ZXJ0IHRvIGVhY2ggc2VxdWVudGlhbCBkYXRhVHlwZVxuXHR3aGlsZSAoIGN1cnJlbnQgKSB7XG5cblx0XHRpZiAoIHMucmVzcG9uc2VGaWVsZHNbIGN1cnJlbnQgXSApIHtcblx0XHRcdGpxWEhSWyBzLnJlc3BvbnNlRmllbGRzWyBjdXJyZW50IF0gXSA9IHJlc3BvbnNlO1xuXHRcdH1cblxuXHRcdC8vIEFwcGx5IHRoZSBkYXRhRmlsdGVyIGlmIHByb3ZpZGVkXG5cdFx0aWYgKCAhcHJldiAmJiBpc1N1Y2Nlc3MgJiYgcy5kYXRhRmlsdGVyICkge1xuXHRcdFx0cmVzcG9uc2UgPSBzLmRhdGFGaWx0ZXIoIHJlc3BvbnNlLCBzLmRhdGFUeXBlICk7XG5cdFx0fVxuXG5cdFx0cHJldiA9IGN1cnJlbnQ7XG5cdFx0Y3VycmVudCA9IGRhdGFUeXBlcy5zaGlmdCgpO1xuXG5cdFx0aWYgKCBjdXJyZW50ICkge1xuXG5cdFx0XHQvLyBUaGVyZSdzIG9ubHkgd29yayB0byBkbyBpZiBjdXJyZW50IGRhdGFUeXBlIGlzIG5vbi1hdXRvXG5cdFx0XHRpZiAoIGN1cnJlbnQgPT09IFwiKlwiICkge1xuXG5cdFx0XHRcdGN1cnJlbnQgPSBwcmV2O1xuXG5cdFx0XHQvLyBDb252ZXJ0IHJlc3BvbnNlIGlmIHByZXYgZGF0YVR5cGUgaXMgbm9uLWF1dG8gYW5kIGRpZmZlcnMgZnJvbSBjdXJyZW50XG5cdFx0XHR9IGVsc2UgaWYgKCBwcmV2ICE9PSBcIipcIiAmJiBwcmV2ICE9PSBjdXJyZW50ICkge1xuXG5cdFx0XHRcdC8vIFNlZWsgYSBkaXJlY3QgY29udmVydGVyXG5cdFx0XHRcdGNvbnYgPSBjb252ZXJ0ZXJzWyBwcmV2ICsgXCIgXCIgKyBjdXJyZW50IF0gfHwgY29udmVydGVyc1sgXCIqIFwiICsgY3VycmVudCBdO1xuXG5cdFx0XHRcdC8vIElmIG5vbmUgZm91bmQsIHNlZWsgYSBwYWlyXG5cdFx0XHRcdGlmICggIWNvbnYgKSB7XG5cdFx0XHRcdFx0Zm9yICggY29udjIgaW4gY29udmVydGVycyApIHtcblxuXHRcdFx0XHRcdFx0Ly8gSWYgY29udjIgb3V0cHV0cyBjdXJyZW50XG5cdFx0XHRcdFx0XHR0bXAgPSBjb252Mi5zcGxpdCggXCIgXCIgKTtcblx0XHRcdFx0XHRcdGlmICggdG1wWyAxIF0gPT09IGN1cnJlbnQgKSB7XG5cblx0XHRcdFx0XHRcdFx0Ly8gSWYgcHJldiBjYW4gYmUgY29udmVydGVkIHRvIGFjY2VwdGVkIGlucHV0XG5cdFx0XHRcdFx0XHRcdGNvbnYgPSBjb252ZXJ0ZXJzWyBwcmV2ICsgXCIgXCIgKyB0bXBbIDAgXSBdIHx8XG5cdFx0XHRcdFx0XHRcdFx0Y29udmVydGVyc1sgXCIqIFwiICsgdG1wWyAwIF0gXTtcblx0XHRcdFx0XHRcdFx0aWYgKCBjb252ICkge1xuXG5cdFx0XHRcdFx0XHRcdFx0Ly8gQ29uZGVuc2UgZXF1aXZhbGVuY2UgY29udmVydGVyc1xuXHRcdFx0XHRcdFx0XHRcdGlmICggY29udiA9PT0gdHJ1ZSApIHtcblx0XHRcdFx0XHRcdFx0XHRcdGNvbnYgPSBjb252ZXJ0ZXJzWyBjb252MiBdO1xuXG5cdFx0XHRcdFx0XHRcdFx0Ly8gT3RoZXJ3aXNlLCBpbnNlcnQgdGhlIGludGVybWVkaWF0ZSBkYXRhVHlwZVxuXHRcdFx0XHRcdFx0XHRcdH0gZWxzZSBpZiAoIGNvbnZlcnRlcnNbIGNvbnYyIF0gIT09IHRydWUgKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRjdXJyZW50ID0gdG1wWyAwIF07XG5cdFx0XHRcdFx0XHRcdFx0XHRkYXRhVHlwZXMudW5zaGlmdCggdG1wWyAxIF0gKTtcblx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBBcHBseSBjb252ZXJ0ZXIgKGlmIG5vdCBhbiBlcXVpdmFsZW5jZSlcblx0XHRcdFx0aWYgKCBjb252ICE9PSB0cnVlICkge1xuXG5cdFx0XHRcdFx0Ly8gVW5sZXNzIGVycm9ycyBhcmUgYWxsb3dlZCB0byBidWJibGUsIGNhdGNoIGFuZCByZXR1cm4gdGhlbVxuXHRcdFx0XHRcdGlmICggY29udiAmJiBzLnRocm93cyApIHtcblx0XHRcdFx0XHRcdHJlc3BvbnNlID0gY29udiggcmVzcG9uc2UgKTtcblx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0dHJ5IHtcblx0XHRcdFx0XHRcdFx0cmVzcG9uc2UgPSBjb252KCByZXNwb25zZSApO1xuXHRcdFx0XHRcdFx0fSBjYXRjaCAoIGUgKSB7XG5cdFx0XHRcdFx0XHRcdHJldHVybiB7XG5cdFx0XHRcdFx0XHRcdFx0c3RhdGU6IFwicGFyc2VyZXJyb3JcIixcblx0XHRcdFx0XHRcdFx0XHRlcnJvcjogY29udiA/IGUgOiBcIk5vIGNvbnZlcnNpb24gZnJvbSBcIiArIHByZXYgKyBcIiB0byBcIiArIGN1cnJlbnRcblx0XHRcdFx0XHRcdFx0fTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHRyZXR1cm4geyBzdGF0ZTogXCJzdWNjZXNzXCIsIGRhdGE6IHJlc3BvbnNlIH07XG59XG5cbmpRdWVyeS5leHRlbmQoIHtcblxuXHQvLyBDb3VudGVyIGZvciBob2xkaW5nIHRoZSBudW1iZXIgb2YgYWN0aXZlIHF1ZXJpZXNcblx0YWN0aXZlOiAwLFxuXG5cdC8vIExhc3QtTW9kaWZpZWQgaGVhZGVyIGNhY2hlIGZvciBuZXh0IHJlcXVlc3Rcblx0bGFzdE1vZGlmaWVkOiB7fSxcblx0ZXRhZzoge30sXG5cblx0YWpheFNldHRpbmdzOiB7XG5cdFx0dXJsOiBsb2NhdGlvbi5ocmVmLFxuXHRcdHR5cGU6IFwiR0VUXCIsXG5cdFx0aXNMb2NhbDogcmxvY2FsUHJvdG9jb2wudGVzdCggbG9jYXRpb24ucHJvdG9jb2wgKSxcblx0XHRnbG9iYWw6IHRydWUsXG5cdFx0cHJvY2Vzc0RhdGE6IHRydWUsXG5cdFx0YXN5bmM6IHRydWUsXG5cdFx0Y29udGVudFR5cGU6IFwiYXBwbGljYXRpb24veC13d3ctZm9ybS11cmxlbmNvZGVkOyBjaGFyc2V0PVVURi04XCIsXG5cblx0XHQvKlxuXHRcdHRpbWVvdXQ6IDAsXG5cdFx0ZGF0YTogbnVsbCxcblx0XHRkYXRhVHlwZTogbnVsbCxcblx0XHR1c2VybmFtZTogbnVsbCxcblx0XHRwYXNzd29yZDogbnVsbCxcblx0XHRjYWNoZTogbnVsbCxcblx0XHR0aHJvd3M6IGZhbHNlLFxuXHRcdHRyYWRpdGlvbmFsOiBmYWxzZSxcblx0XHRoZWFkZXJzOiB7fSxcblx0XHQqL1xuXG5cdFx0YWNjZXB0czoge1xuXHRcdFx0XCIqXCI6IGFsbFR5cGVzLFxuXHRcdFx0dGV4dDogXCJ0ZXh0L3BsYWluXCIsXG5cdFx0XHRodG1sOiBcInRleHQvaHRtbFwiLFxuXHRcdFx0eG1sOiBcImFwcGxpY2F0aW9uL3htbCwgdGV4dC94bWxcIixcblx0XHRcdGpzb246IFwiYXBwbGljYXRpb24vanNvbiwgdGV4dC9qYXZhc2NyaXB0XCJcblx0XHR9LFxuXG5cdFx0Y29udGVudHM6IHtcblx0XHRcdHhtbDogL1xcYnhtbFxcYi8sXG5cdFx0XHRodG1sOiAvXFxiaHRtbC8sXG5cdFx0XHRqc29uOiAvXFxianNvblxcYi9cblx0XHR9LFxuXG5cdFx0cmVzcG9uc2VGaWVsZHM6IHtcblx0XHRcdHhtbDogXCJyZXNwb25zZVhNTFwiLFxuXHRcdFx0dGV4dDogXCJyZXNwb25zZVRleHRcIixcblx0XHRcdGpzb246IFwicmVzcG9uc2VKU09OXCJcblx0XHR9LFxuXG5cdFx0Ly8gRGF0YSBjb252ZXJ0ZXJzXG5cdFx0Ly8gS2V5cyBzZXBhcmF0ZSBzb3VyY2UgKG9yIGNhdGNoYWxsIFwiKlwiKSBhbmQgZGVzdGluYXRpb24gdHlwZXMgd2l0aCBhIHNpbmdsZSBzcGFjZVxuXHRcdGNvbnZlcnRlcnM6IHtcblxuXHRcdFx0Ly8gQ29udmVydCBhbnl0aGluZyB0byB0ZXh0XG5cdFx0XHRcIiogdGV4dFwiOiBTdHJpbmcsXG5cblx0XHRcdC8vIFRleHQgdG8gaHRtbCAodHJ1ZSA9IG5vIHRyYW5zZm9ybWF0aW9uKVxuXHRcdFx0XCJ0ZXh0IGh0bWxcIjogdHJ1ZSxcblxuXHRcdFx0Ly8gRXZhbHVhdGUgdGV4dCBhcyBhIGpzb24gZXhwcmVzc2lvblxuXHRcdFx0XCJ0ZXh0IGpzb25cIjogSlNPTi5wYXJzZSxcblxuXHRcdFx0Ly8gUGFyc2UgdGV4dCBhcyB4bWxcblx0XHRcdFwidGV4dCB4bWxcIjogalF1ZXJ5LnBhcnNlWE1MXG5cdFx0fSxcblxuXHRcdC8vIEZvciBvcHRpb25zIHRoYXQgc2hvdWxkbid0IGJlIGRlZXAgZXh0ZW5kZWQ6XG5cdFx0Ly8geW91IGNhbiBhZGQgeW91ciBvd24gY3VzdG9tIG9wdGlvbnMgaGVyZSBpZlxuXHRcdC8vIGFuZCB3aGVuIHlvdSBjcmVhdGUgb25lIHRoYXQgc2hvdWxkbid0IGJlXG5cdFx0Ly8gZGVlcCBleHRlbmRlZCAoc2VlIGFqYXhFeHRlbmQpXG5cdFx0ZmxhdE9wdGlvbnM6IHtcblx0XHRcdHVybDogdHJ1ZSxcblx0XHRcdGNvbnRleHQ6IHRydWVcblx0XHR9XG5cdH0sXG5cblx0Ly8gQ3JlYXRlcyBhIGZ1bGwgZmxlZGdlZCBzZXR0aW5ncyBvYmplY3QgaW50byB0YXJnZXRcblx0Ly8gd2l0aCBib3RoIGFqYXhTZXR0aW5ncyBhbmQgc2V0dGluZ3MgZmllbGRzLlxuXHQvLyBJZiB0YXJnZXQgaXMgb21pdHRlZCwgd3JpdGVzIGludG8gYWpheFNldHRpbmdzLlxuXHRhamF4U2V0dXA6IGZ1bmN0aW9uKCB0YXJnZXQsIHNldHRpbmdzICkge1xuXHRcdHJldHVybiBzZXR0aW5ncyA/XG5cblx0XHRcdC8vIEJ1aWxkaW5nIGEgc2V0dGluZ3Mgb2JqZWN0XG5cdFx0XHRhamF4RXh0ZW5kKCBhamF4RXh0ZW5kKCB0YXJnZXQsIGpRdWVyeS5hamF4U2V0dGluZ3MgKSwgc2V0dGluZ3MgKSA6XG5cblx0XHRcdC8vIEV4dGVuZGluZyBhamF4U2V0dGluZ3Ncblx0XHRcdGFqYXhFeHRlbmQoIGpRdWVyeS5hamF4U2V0dGluZ3MsIHRhcmdldCApO1xuXHR9LFxuXG5cdGFqYXhQcmVmaWx0ZXI6IGFkZFRvUHJlZmlsdGVyc09yVHJhbnNwb3J0cyggcHJlZmlsdGVycyApLFxuXHRhamF4VHJhbnNwb3J0OiBhZGRUb1ByZWZpbHRlcnNPclRyYW5zcG9ydHMoIHRyYW5zcG9ydHMgKSxcblxuXHQvLyBNYWluIG1ldGhvZFxuXHRhamF4OiBmdW5jdGlvbiggdXJsLCBvcHRpb25zICkge1xuXG5cdFx0Ly8gSWYgdXJsIGlzIGFuIG9iamVjdCwgc2ltdWxhdGUgcHJlLTEuNSBzaWduYXR1cmVcblx0XHRpZiAoIHR5cGVvZiB1cmwgPT09IFwib2JqZWN0XCIgKSB7XG5cdFx0XHRvcHRpb25zID0gdXJsO1xuXHRcdFx0dXJsID0gdW5kZWZpbmVkO1xuXHRcdH1cblxuXHRcdC8vIEZvcmNlIG9wdGlvbnMgdG8gYmUgYW4gb2JqZWN0XG5cdFx0b3B0aW9ucyA9IG9wdGlvbnMgfHwge307XG5cblx0XHR2YXIgdHJhbnNwb3J0LFxuXG5cdFx0XHQvLyBVUkwgd2l0aG91dCBhbnRpLWNhY2hlIHBhcmFtXG5cdFx0XHRjYWNoZVVSTCxcblxuXHRcdFx0Ly8gUmVzcG9uc2UgaGVhZGVyc1xuXHRcdFx0cmVzcG9uc2VIZWFkZXJzU3RyaW5nLFxuXHRcdFx0cmVzcG9uc2VIZWFkZXJzLFxuXG5cdFx0XHQvLyB0aW1lb3V0IGhhbmRsZVxuXHRcdFx0dGltZW91dFRpbWVyLFxuXG5cdFx0XHQvLyBVcmwgY2xlYW51cCB2YXJcblx0XHRcdHVybEFuY2hvcixcblxuXHRcdFx0Ly8gUmVxdWVzdCBzdGF0ZSAoYmVjb21lcyBmYWxzZSB1cG9uIHNlbmQgYW5kIHRydWUgdXBvbiBjb21wbGV0aW9uKVxuXHRcdFx0Y29tcGxldGVkLFxuXG5cdFx0XHQvLyBUbyBrbm93IGlmIGdsb2JhbCBldmVudHMgYXJlIHRvIGJlIGRpc3BhdGNoZWRcblx0XHRcdGZpcmVHbG9iYWxzLFxuXG5cdFx0XHQvLyBMb29wIHZhcmlhYmxlXG5cdFx0XHRpLFxuXG5cdFx0XHQvLyB1bmNhY2hlZCBwYXJ0IG9mIHRoZSB1cmxcblx0XHRcdHVuY2FjaGVkLFxuXG5cdFx0XHQvLyBDcmVhdGUgdGhlIGZpbmFsIG9wdGlvbnMgb2JqZWN0XG5cdFx0XHRzID0galF1ZXJ5LmFqYXhTZXR1cCgge30sIG9wdGlvbnMgKSxcblxuXHRcdFx0Ly8gQ2FsbGJhY2tzIGNvbnRleHRcblx0XHRcdGNhbGxiYWNrQ29udGV4dCA9IHMuY29udGV4dCB8fCBzLFxuXG5cdFx0XHQvLyBDb250ZXh0IGZvciBnbG9iYWwgZXZlbnRzIGlzIGNhbGxiYWNrQ29udGV4dCBpZiBpdCBpcyBhIERPTSBub2RlIG9yIGpRdWVyeSBjb2xsZWN0aW9uXG5cdFx0XHRnbG9iYWxFdmVudENvbnRleHQgPSBzLmNvbnRleHQgJiZcblx0XHRcdFx0KCBjYWxsYmFja0NvbnRleHQubm9kZVR5cGUgfHwgY2FsbGJhY2tDb250ZXh0LmpxdWVyeSApID9cblx0XHRcdFx0XHRqUXVlcnkoIGNhbGxiYWNrQ29udGV4dCApIDpcblx0XHRcdFx0XHRqUXVlcnkuZXZlbnQsXG5cblx0XHRcdC8vIERlZmVycmVkc1xuXHRcdFx0ZGVmZXJyZWQgPSBqUXVlcnkuRGVmZXJyZWQoKSxcblx0XHRcdGNvbXBsZXRlRGVmZXJyZWQgPSBqUXVlcnkuQ2FsbGJhY2tzKCBcIm9uY2UgbWVtb3J5XCIgKSxcblxuXHRcdFx0Ly8gU3RhdHVzLWRlcGVuZGVudCBjYWxsYmFja3Ncblx0XHRcdHN0YXR1c0NvZGUgPSBzLnN0YXR1c0NvZGUgfHwge30sXG5cblx0XHRcdC8vIEhlYWRlcnMgKHRoZXkgYXJlIHNlbnQgYWxsIGF0IG9uY2UpXG5cdFx0XHRyZXF1ZXN0SGVhZGVycyA9IHt9LFxuXHRcdFx0cmVxdWVzdEhlYWRlcnNOYW1lcyA9IHt9LFxuXG5cdFx0XHQvLyBEZWZhdWx0IGFib3J0IG1lc3NhZ2Vcblx0XHRcdHN0ckFib3J0ID0gXCJjYW5jZWxlZFwiLFxuXG5cdFx0XHQvLyBGYWtlIHhoclxuXHRcdFx0anFYSFIgPSB7XG5cdFx0XHRcdHJlYWR5U3RhdGU6IDAsXG5cblx0XHRcdFx0Ly8gQnVpbGRzIGhlYWRlcnMgaGFzaHRhYmxlIGlmIG5lZWRlZFxuXHRcdFx0XHRnZXRSZXNwb25zZUhlYWRlcjogZnVuY3Rpb24oIGtleSApIHtcblx0XHRcdFx0XHR2YXIgbWF0Y2g7XG5cdFx0XHRcdFx0aWYgKCBjb21wbGV0ZWQgKSB7XG5cdFx0XHRcdFx0XHRpZiAoICFyZXNwb25zZUhlYWRlcnMgKSB7XG5cdFx0XHRcdFx0XHRcdHJlc3BvbnNlSGVhZGVycyA9IHt9O1xuXHRcdFx0XHRcdFx0XHR3aGlsZSAoICggbWF0Y2ggPSByaGVhZGVycy5leGVjKCByZXNwb25zZUhlYWRlcnNTdHJpbmcgKSApICkge1xuXHRcdFx0XHRcdFx0XHRcdHJlc3BvbnNlSGVhZGVyc1sgbWF0Y2hbIDEgXS50b0xvd2VyQ2FzZSgpIF0gPSBtYXRjaFsgMiBdO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRtYXRjaCA9IHJlc3BvbnNlSGVhZGVyc1sga2V5LnRvTG93ZXJDYXNlKCkgXTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0cmV0dXJuIG1hdGNoID09IG51bGwgPyBudWxsIDogbWF0Y2g7XG5cdFx0XHRcdH0sXG5cblx0XHRcdFx0Ly8gUmF3IHN0cmluZ1xuXHRcdFx0XHRnZXRBbGxSZXNwb25zZUhlYWRlcnM6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdHJldHVybiBjb21wbGV0ZWQgPyByZXNwb25zZUhlYWRlcnNTdHJpbmcgOiBudWxsO1xuXHRcdFx0XHR9LFxuXG5cdFx0XHRcdC8vIENhY2hlcyB0aGUgaGVhZGVyXG5cdFx0XHRcdHNldFJlcXVlc3RIZWFkZXI6IGZ1bmN0aW9uKCBuYW1lLCB2YWx1ZSApIHtcblx0XHRcdFx0XHRpZiAoIGNvbXBsZXRlZCA9PSBudWxsICkge1xuXHRcdFx0XHRcdFx0bmFtZSA9IHJlcXVlc3RIZWFkZXJzTmFtZXNbIG5hbWUudG9Mb3dlckNhc2UoKSBdID1cblx0XHRcdFx0XHRcdFx0cmVxdWVzdEhlYWRlcnNOYW1lc1sgbmFtZS50b0xvd2VyQ2FzZSgpIF0gfHwgbmFtZTtcblx0XHRcdFx0XHRcdHJlcXVlc3RIZWFkZXJzWyBuYW1lIF0gPSB2YWx1ZTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0XHRcdH0sXG5cblx0XHRcdFx0Ly8gT3ZlcnJpZGVzIHJlc3BvbnNlIGNvbnRlbnQtdHlwZSBoZWFkZXJcblx0XHRcdFx0b3ZlcnJpZGVNaW1lVHlwZTogZnVuY3Rpb24oIHR5cGUgKSB7XG5cdFx0XHRcdFx0aWYgKCBjb21wbGV0ZWQgPT0gbnVsbCApIHtcblx0XHRcdFx0XHRcdHMubWltZVR5cGUgPSB0eXBlO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRyZXR1cm4gdGhpcztcblx0XHRcdFx0fSxcblxuXHRcdFx0XHQvLyBTdGF0dXMtZGVwZW5kZW50IGNhbGxiYWNrc1xuXHRcdFx0XHRzdGF0dXNDb2RlOiBmdW5jdGlvbiggbWFwICkge1xuXHRcdFx0XHRcdHZhciBjb2RlO1xuXHRcdFx0XHRcdGlmICggbWFwICkge1xuXHRcdFx0XHRcdFx0aWYgKCBjb21wbGV0ZWQgKSB7XG5cblx0XHRcdFx0XHRcdFx0Ly8gRXhlY3V0ZSB0aGUgYXBwcm9wcmlhdGUgY2FsbGJhY2tzXG5cdFx0XHRcdFx0XHRcdGpxWEhSLmFsd2F5cyggbWFwWyBqcVhIUi5zdGF0dXMgXSApO1xuXHRcdFx0XHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRcdFx0XHQvLyBMYXp5LWFkZCB0aGUgbmV3IGNhbGxiYWNrcyBpbiBhIHdheSB0aGF0IHByZXNlcnZlcyBvbGQgb25lc1xuXHRcdFx0XHRcdFx0XHRmb3IgKCBjb2RlIGluIG1hcCApIHtcblx0XHRcdFx0XHRcdFx0XHRzdGF0dXNDb2RlWyBjb2RlIF0gPSBbIHN0YXR1c0NvZGVbIGNvZGUgXSwgbWFwWyBjb2RlIF0gXTtcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRyZXR1cm4gdGhpcztcblx0XHRcdFx0fSxcblxuXHRcdFx0XHQvLyBDYW5jZWwgdGhlIHJlcXVlc3Rcblx0XHRcdFx0YWJvcnQ6IGZ1bmN0aW9uKCBzdGF0dXNUZXh0ICkge1xuXHRcdFx0XHRcdHZhciBmaW5hbFRleHQgPSBzdGF0dXNUZXh0IHx8IHN0ckFib3J0O1xuXHRcdFx0XHRcdGlmICggdHJhbnNwb3J0ICkge1xuXHRcdFx0XHRcdFx0dHJhbnNwb3J0LmFib3J0KCBmaW5hbFRleHQgKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0ZG9uZSggMCwgZmluYWxUZXh0ICk7XG5cdFx0XHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0XHRcdH1cblx0XHRcdH07XG5cblx0XHQvLyBBdHRhY2ggZGVmZXJyZWRzXG5cdFx0ZGVmZXJyZWQucHJvbWlzZSgganFYSFIgKTtcblxuXHRcdC8vIEFkZCBwcm90b2NvbCBpZiBub3QgcHJvdmlkZWQgKHByZWZpbHRlcnMgbWlnaHQgZXhwZWN0IGl0KVxuXHRcdC8vIEhhbmRsZSBmYWxzeSB1cmwgaW4gdGhlIHNldHRpbmdzIG9iamVjdCAoIzEwMDkzOiBjb25zaXN0ZW5jeSB3aXRoIG9sZCBzaWduYXR1cmUpXG5cdFx0Ly8gV2UgYWxzbyB1c2UgdGhlIHVybCBwYXJhbWV0ZXIgaWYgYXZhaWxhYmxlXG5cdFx0cy51cmwgPSAoICggdXJsIHx8IHMudXJsIHx8IGxvY2F0aW9uLmhyZWYgKSArIFwiXCIgKVxuXHRcdFx0LnJlcGxhY2UoIHJwcm90b2NvbCwgbG9jYXRpb24ucHJvdG9jb2wgKyBcIi8vXCIgKTtcblxuXHRcdC8vIEFsaWFzIG1ldGhvZCBvcHRpb24gdG8gdHlwZSBhcyBwZXIgdGlja2V0ICMxMjAwNFxuXHRcdHMudHlwZSA9IG9wdGlvbnMubWV0aG9kIHx8IG9wdGlvbnMudHlwZSB8fCBzLm1ldGhvZCB8fCBzLnR5cGU7XG5cblx0XHQvLyBFeHRyYWN0IGRhdGFUeXBlcyBsaXN0XG5cdFx0cy5kYXRhVHlwZXMgPSAoIHMuZGF0YVR5cGUgfHwgXCIqXCIgKS50b0xvd2VyQ2FzZSgpLm1hdGNoKCBybm90aHRtbHdoaXRlICkgfHwgWyBcIlwiIF07XG5cblx0XHQvLyBBIGNyb3NzLWRvbWFpbiByZXF1ZXN0IGlzIGluIG9yZGVyIHdoZW4gdGhlIG9yaWdpbiBkb2Vzbid0IG1hdGNoIHRoZSBjdXJyZW50IG9yaWdpbi5cblx0XHRpZiAoIHMuY3Jvc3NEb21haW4gPT0gbnVsbCApIHtcblx0XHRcdHVybEFuY2hvciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoIFwiYVwiICk7XG5cblx0XHRcdC8vIFN1cHBvcnQ6IElFIDw9OCAtIDExLCBFZGdlIDEyIC0gMTVcblx0XHRcdC8vIElFIHRocm93cyBleGNlcHRpb24gb24gYWNjZXNzaW5nIHRoZSBocmVmIHByb3BlcnR5IGlmIHVybCBpcyBtYWxmb3JtZWQsXG5cdFx0XHQvLyBlLmcuIGh0dHA6Ly9leGFtcGxlLmNvbTo4MHgvXG5cdFx0XHR0cnkge1xuXHRcdFx0XHR1cmxBbmNob3IuaHJlZiA9IHMudXJsO1xuXG5cdFx0XHRcdC8vIFN1cHBvcnQ6IElFIDw9OCAtIDExIG9ubHlcblx0XHRcdFx0Ly8gQW5jaG9yJ3MgaG9zdCBwcm9wZXJ0eSBpc24ndCBjb3JyZWN0bHkgc2V0IHdoZW4gcy51cmwgaXMgcmVsYXRpdmVcblx0XHRcdFx0dXJsQW5jaG9yLmhyZWYgPSB1cmxBbmNob3IuaHJlZjtcblx0XHRcdFx0cy5jcm9zc0RvbWFpbiA9IG9yaWdpbkFuY2hvci5wcm90b2NvbCArIFwiLy9cIiArIG9yaWdpbkFuY2hvci5ob3N0ICE9PVxuXHRcdFx0XHRcdHVybEFuY2hvci5wcm90b2NvbCArIFwiLy9cIiArIHVybEFuY2hvci5ob3N0O1xuXHRcdFx0fSBjYXRjaCAoIGUgKSB7XG5cblx0XHRcdFx0Ly8gSWYgdGhlcmUgaXMgYW4gZXJyb3IgcGFyc2luZyB0aGUgVVJMLCBhc3N1bWUgaXQgaXMgY3Jvc3NEb21haW4sXG5cdFx0XHRcdC8vIGl0IGNhbiBiZSByZWplY3RlZCBieSB0aGUgdHJhbnNwb3J0IGlmIGl0IGlzIGludmFsaWRcblx0XHRcdFx0cy5jcm9zc0RvbWFpbiA9IHRydWU7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Ly8gQ29udmVydCBkYXRhIGlmIG5vdCBhbHJlYWR5IGEgc3RyaW5nXG5cdFx0aWYgKCBzLmRhdGEgJiYgcy5wcm9jZXNzRGF0YSAmJiB0eXBlb2Ygcy5kYXRhICE9PSBcInN0cmluZ1wiICkge1xuXHRcdFx0cy5kYXRhID0galF1ZXJ5LnBhcmFtKCBzLmRhdGEsIHMudHJhZGl0aW9uYWwgKTtcblx0XHR9XG5cblx0XHQvLyBBcHBseSBwcmVmaWx0ZXJzXG5cdFx0aW5zcGVjdFByZWZpbHRlcnNPclRyYW5zcG9ydHMoIHByZWZpbHRlcnMsIHMsIG9wdGlvbnMsIGpxWEhSICk7XG5cblx0XHQvLyBJZiByZXF1ZXN0IHdhcyBhYm9ydGVkIGluc2lkZSBhIHByZWZpbHRlciwgc3RvcCB0aGVyZVxuXHRcdGlmICggY29tcGxldGVkICkge1xuXHRcdFx0cmV0dXJuIGpxWEhSO1xuXHRcdH1cblxuXHRcdC8vIFdlIGNhbiBmaXJlIGdsb2JhbCBldmVudHMgYXMgb2Ygbm93IGlmIGFza2VkIHRvXG5cdFx0Ly8gRG9uJ3QgZmlyZSBldmVudHMgaWYgalF1ZXJ5LmV2ZW50IGlzIHVuZGVmaW5lZCBpbiBhbiBBTUQtdXNhZ2Ugc2NlbmFyaW8gKCMxNTExOClcblx0XHRmaXJlR2xvYmFscyA9IGpRdWVyeS5ldmVudCAmJiBzLmdsb2JhbDtcblxuXHRcdC8vIFdhdGNoIGZvciBhIG5ldyBzZXQgb2YgcmVxdWVzdHNcblx0XHRpZiAoIGZpcmVHbG9iYWxzICYmIGpRdWVyeS5hY3RpdmUrKyA9PT0gMCApIHtcblx0XHRcdGpRdWVyeS5ldmVudC50cmlnZ2VyKCBcImFqYXhTdGFydFwiICk7XG5cdFx0fVxuXG5cdFx0Ly8gVXBwZXJjYXNlIHRoZSB0eXBlXG5cdFx0cy50eXBlID0gcy50eXBlLnRvVXBwZXJDYXNlKCk7XG5cblx0XHQvLyBEZXRlcm1pbmUgaWYgcmVxdWVzdCBoYXMgY29udGVudFxuXHRcdHMuaGFzQ29udGVudCA9ICFybm9Db250ZW50LnRlc3QoIHMudHlwZSApO1xuXG5cdFx0Ly8gU2F2ZSB0aGUgVVJMIGluIGNhc2Ugd2UncmUgdG95aW5nIHdpdGggdGhlIElmLU1vZGlmaWVkLVNpbmNlXG5cdFx0Ly8gYW5kL29yIElmLU5vbmUtTWF0Y2ggaGVhZGVyIGxhdGVyIG9uXG5cdFx0Ly8gUmVtb3ZlIGhhc2ggdG8gc2ltcGxpZnkgdXJsIG1hbmlwdWxhdGlvblxuXHRcdGNhY2hlVVJMID0gcy51cmwucmVwbGFjZSggcmhhc2gsIFwiXCIgKTtcblxuXHRcdC8vIE1vcmUgb3B0aW9ucyBoYW5kbGluZyBmb3IgcmVxdWVzdHMgd2l0aCBubyBjb250ZW50XG5cdFx0aWYgKCAhcy5oYXNDb250ZW50ICkge1xuXG5cdFx0XHQvLyBSZW1lbWJlciB0aGUgaGFzaCBzbyB3ZSBjYW4gcHV0IGl0IGJhY2tcblx0XHRcdHVuY2FjaGVkID0gcy51cmwuc2xpY2UoIGNhY2hlVVJMLmxlbmd0aCApO1xuXG5cdFx0XHQvLyBJZiBkYXRhIGlzIGF2YWlsYWJsZSBhbmQgc2hvdWxkIGJlIHByb2Nlc3NlZCwgYXBwZW5kIGRhdGEgdG8gdXJsXG5cdFx0XHRpZiAoIHMuZGF0YSAmJiAoIHMucHJvY2Vzc0RhdGEgfHwgdHlwZW9mIHMuZGF0YSA9PT0gXCJzdHJpbmdcIiApICkge1xuXHRcdFx0XHRjYWNoZVVSTCArPSAoIHJxdWVyeS50ZXN0KCBjYWNoZVVSTCApID8gXCImXCIgOiBcIj9cIiApICsgcy5kYXRhO1xuXG5cdFx0XHRcdC8vICM5NjgyOiByZW1vdmUgZGF0YSBzbyB0aGF0IGl0J3Mgbm90IHVzZWQgaW4gYW4gZXZlbnR1YWwgcmV0cnlcblx0XHRcdFx0ZGVsZXRlIHMuZGF0YTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gQWRkIG9yIHVwZGF0ZSBhbnRpLWNhY2hlIHBhcmFtIGlmIG5lZWRlZFxuXHRcdFx0aWYgKCBzLmNhY2hlID09PSBmYWxzZSApIHtcblx0XHRcdFx0Y2FjaGVVUkwgPSBjYWNoZVVSTC5yZXBsYWNlKCByYW50aUNhY2hlLCBcIiQxXCIgKTtcblx0XHRcdFx0dW5jYWNoZWQgPSAoIHJxdWVyeS50ZXN0KCBjYWNoZVVSTCApID8gXCImXCIgOiBcIj9cIiApICsgXCJfPVwiICsgKCBub25jZSsrICkgKyB1bmNhY2hlZDtcblx0XHRcdH1cblxuXHRcdFx0Ly8gUHV0IGhhc2ggYW5kIGFudGktY2FjaGUgb24gdGhlIFVSTCB0aGF0IHdpbGwgYmUgcmVxdWVzdGVkIChnaC0xNzMyKVxuXHRcdFx0cy51cmwgPSBjYWNoZVVSTCArIHVuY2FjaGVkO1xuXG5cdFx0Ly8gQ2hhbmdlICclMjAnIHRvICcrJyBpZiB0aGlzIGlzIGVuY29kZWQgZm9ybSBib2R5IGNvbnRlbnQgKGdoLTI2NTgpXG5cdFx0fSBlbHNlIGlmICggcy5kYXRhICYmIHMucHJvY2Vzc0RhdGEgJiZcblx0XHRcdCggcy5jb250ZW50VHlwZSB8fCBcIlwiICkuaW5kZXhPZiggXCJhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWRcIiApID09PSAwICkge1xuXHRcdFx0cy5kYXRhID0gcy5kYXRhLnJlcGxhY2UoIHIyMCwgXCIrXCIgKTtcblx0XHR9XG5cblx0XHQvLyBTZXQgdGhlIElmLU1vZGlmaWVkLVNpbmNlIGFuZC9vciBJZi1Ob25lLU1hdGNoIGhlYWRlciwgaWYgaW4gaWZNb2RpZmllZCBtb2RlLlxuXHRcdGlmICggcy5pZk1vZGlmaWVkICkge1xuXHRcdFx0aWYgKCBqUXVlcnkubGFzdE1vZGlmaWVkWyBjYWNoZVVSTCBdICkge1xuXHRcdFx0XHRqcVhIUi5zZXRSZXF1ZXN0SGVhZGVyKCBcIklmLU1vZGlmaWVkLVNpbmNlXCIsIGpRdWVyeS5sYXN0TW9kaWZpZWRbIGNhY2hlVVJMIF0gKTtcblx0XHRcdH1cblx0XHRcdGlmICggalF1ZXJ5LmV0YWdbIGNhY2hlVVJMIF0gKSB7XG5cdFx0XHRcdGpxWEhSLnNldFJlcXVlc3RIZWFkZXIoIFwiSWYtTm9uZS1NYXRjaFwiLCBqUXVlcnkuZXRhZ1sgY2FjaGVVUkwgXSApO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdC8vIFNldCB0aGUgY29ycmVjdCBoZWFkZXIsIGlmIGRhdGEgaXMgYmVpbmcgc2VudFxuXHRcdGlmICggcy5kYXRhICYmIHMuaGFzQ29udGVudCAmJiBzLmNvbnRlbnRUeXBlICE9PSBmYWxzZSB8fCBvcHRpb25zLmNvbnRlbnRUeXBlICkge1xuXHRcdFx0anFYSFIuc2V0UmVxdWVzdEhlYWRlciggXCJDb250ZW50LVR5cGVcIiwgcy5jb250ZW50VHlwZSApO1xuXHRcdH1cblxuXHRcdC8vIFNldCB0aGUgQWNjZXB0cyBoZWFkZXIgZm9yIHRoZSBzZXJ2ZXIsIGRlcGVuZGluZyBvbiB0aGUgZGF0YVR5cGVcblx0XHRqcVhIUi5zZXRSZXF1ZXN0SGVhZGVyKFxuXHRcdFx0XCJBY2NlcHRcIixcblx0XHRcdHMuZGF0YVR5cGVzWyAwIF0gJiYgcy5hY2NlcHRzWyBzLmRhdGFUeXBlc1sgMCBdIF0gP1xuXHRcdFx0XHRzLmFjY2VwdHNbIHMuZGF0YVR5cGVzWyAwIF0gXSArXG5cdFx0XHRcdFx0KCBzLmRhdGFUeXBlc1sgMCBdICE9PSBcIipcIiA/IFwiLCBcIiArIGFsbFR5cGVzICsgXCI7IHE9MC4wMVwiIDogXCJcIiApIDpcblx0XHRcdFx0cy5hY2NlcHRzWyBcIipcIiBdXG5cdFx0KTtcblxuXHRcdC8vIENoZWNrIGZvciBoZWFkZXJzIG9wdGlvblxuXHRcdGZvciAoIGkgaW4gcy5oZWFkZXJzICkge1xuXHRcdFx0anFYSFIuc2V0UmVxdWVzdEhlYWRlciggaSwgcy5oZWFkZXJzWyBpIF0gKTtcblx0XHR9XG5cblx0XHQvLyBBbGxvdyBjdXN0b20gaGVhZGVycy9taW1ldHlwZXMgYW5kIGVhcmx5IGFib3J0XG5cdFx0aWYgKCBzLmJlZm9yZVNlbmQgJiZcblx0XHRcdCggcy5iZWZvcmVTZW5kLmNhbGwoIGNhbGxiYWNrQ29udGV4dCwganFYSFIsIHMgKSA9PT0gZmFsc2UgfHwgY29tcGxldGVkICkgKSB7XG5cblx0XHRcdC8vIEFib3J0IGlmIG5vdCBkb25lIGFscmVhZHkgYW5kIHJldHVyblxuXHRcdFx0cmV0dXJuIGpxWEhSLmFib3J0KCk7XG5cdFx0fVxuXG5cdFx0Ly8gQWJvcnRpbmcgaXMgbm8gbG9uZ2VyIGEgY2FuY2VsbGF0aW9uXG5cdFx0c3RyQWJvcnQgPSBcImFib3J0XCI7XG5cblx0XHQvLyBJbnN0YWxsIGNhbGxiYWNrcyBvbiBkZWZlcnJlZHNcblx0XHRjb21wbGV0ZURlZmVycmVkLmFkZCggcy5jb21wbGV0ZSApO1xuXHRcdGpxWEhSLmRvbmUoIHMuc3VjY2VzcyApO1xuXHRcdGpxWEhSLmZhaWwoIHMuZXJyb3IgKTtcblxuXHRcdC8vIEdldCB0cmFuc3BvcnRcblx0XHR0cmFuc3BvcnQgPSBpbnNwZWN0UHJlZmlsdGVyc09yVHJhbnNwb3J0cyggdHJhbnNwb3J0cywgcywgb3B0aW9ucywganFYSFIgKTtcblxuXHRcdC8vIElmIG5vIHRyYW5zcG9ydCwgd2UgYXV0by1hYm9ydFxuXHRcdGlmICggIXRyYW5zcG9ydCApIHtcblx0XHRcdGRvbmUoIC0xLCBcIk5vIFRyYW5zcG9ydFwiICk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdGpxWEhSLnJlYWR5U3RhdGUgPSAxO1xuXG5cdFx0XHQvLyBTZW5kIGdsb2JhbCBldmVudFxuXHRcdFx0aWYgKCBmaXJlR2xvYmFscyApIHtcblx0XHRcdFx0Z2xvYmFsRXZlbnRDb250ZXh0LnRyaWdnZXIoIFwiYWpheFNlbmRcIiwgWyBqcVhIUiwgcyBdICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIElmIHJlcXVlc3Qgd2FzIGFib3J0ZWQgaW5zaWRlIGFqYXhTZW5kLCBzdG9wIHRoZXJlXG5cdFx0XHRpZiAoIGNvbXBsZXRlZCApIHtcblx0XHRcdFx0cmV0dXJuIGpxWEhSO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBUaW1lb3V0XG5cdFx0XHRpZiAoIHMuYXN5bmMgJiYgcy50aW1lb3V0ID4gMCApIHtcblx0XHRcdFx0dGltZW91dFRpbWVyID0gd2luZG93LnNldFRpbWVvdXQoIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdGpxWEhSLmFib3J0KCBcInRpbWVvdXRcIiApO1xuXHRcdFx0XHR9LCBzLnRpbWVvdXQgKTtcblx0XHRcdH1cblxuXHRcdFx0dHJ5IHtcblx0XHRcdFx0Y29tcGxldGVkID0gZmFsc2U7XG5cdFx0XHRcdHRyYW5zcG9ydC5zZW5kKCByZXF1ZXN0SGVhZGVycywgZG9uZSApO1xuXHRcdFx0fSBjYXRjaCAoIGUgKSB7XG5cblx0XHRcdFx0Ly8gUmV0aHJvdyBwb3N0LWNvbXBsZXRpb24gZXhjZXB0aW9uc1xuXHRcdFx0XHRpZiAoIGNvbXBsZXRlZCApIHtcblx0XHRcdFx0XHR0aHJvdyBlO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gUHJvcGFnYXRlIG90aGVycyBhcyByZXN1bHRzXG5cdFx0XHRcdGRvbmUoIC0xLCBlICk7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Ly8gQ2FsbGJhY2sgZm9yIHdoZW4gZXZlcnl0aGluZyBpcyBkb25lXG5cdFx0ZnVuY3Rpb24gZG9uZSggc3RhdHVzLCBuYXRpdmVTdGF0dXNUZXh0LCByZXNwb25zZXMsIGhlYWRlcnMgKSB7XG5cdFx0XHR2YXIgaXNTdWNjZXNzLCBzdWNjZXNzLCBlcnJvciwgcmVzcG9uc2UsIG1vZGlmaWVkLFxuXHRcdFx0XHRzdGF0dXNUZXh0ID0gbmF0aXZlU3RhdHVzVGV4dDtcblxuXHRcdFx0Ly8gSWdub3JlIHJlcGVhdCBpbnZvY2F0aW9uc1xuXHRcdFx0aWYgKCBjb21wbGV0ZWQgKSB7XG5cdFx0XHRcdHJldHVybjtcblx0XHRcdH1cblxuXHRcdFx0Y29tcGxldGVkID0gdHJ1ZTtcblxuXHRcdFx0Ly8gQ2xlYXIgdGltZW91dCBpZiBpdCBleGlzdHNcblx0XHRcdGlmICggdGltZW91dFRpbWVyICkge1xuXHRcdFx0XHR3aW5kb3cuY2xlYXJUaW1lb3V0KCB0aW1lb3V0VGltZXIgKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gRGVyZWZlcmVuY2UgdHJhbnNwb3J0IGZvciBlYXJseSBnYXJiYWdlIGNvbGxlY3Rpb25cblx0XHRcdC8vIChubyBtYXR0ZXIgaG93IGxvbmcgdGhlIGpxWEhSIG9iamVjdCB3aWxsIGJlIHVzZWQpXG5cdFx0XHR0cmFuc3BvcnQgPSB1bmRlZmluZWQ7XG5cblx0XHRcdC8vIENhY2hlIHJlc3BvbnNlIGhlYWRlcnNcblx0XHRcdHJlc3BvbnNlSGVhZGVyc1N0cmluZyA9IGhlYWRlcnMgfHwgXCJcIjtcblxuXHRcdFx0Ly8gU2V0IHJlYWR5U3RhdGVcblx0XHRcdGpxWEhSLnJlYWR5U3RhdGUgPSBzdGF0dXMgPiAwID8gNCA6IDA7XG5cblx0XHRcdC8vIERldGVybWluZSBpZiBzdWNjZXNzZnVsXG5cdFx0XHRpc1N1Y2Nlc3MgPSBzdGF0dXMgPj0gMjAwICYmIHN0YXR1cyA8IDMwMCB8fCBzdGF0dXMgPT09IDMwNDtcblxuXHRcdFx0Ly8gR2V0IHJlc3BvbnNlIGRhdGFcblx0XHRcdGlmICggcmVzcG9uc2VzICkge1xuXHRcdFx0XHRyZXNwb25zZSA9IGFqYXhIYW5kbGVSZXNwb25zZXMoIHMsIGpxWEhSLCByZXNwb25zZXMgKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gQ29udmVydCBubyBtYXR0ZXIgd2hhdCAodGhhdCB3YXkgcmVzcG9uc2VYWFggZmllbGRzIGFyZSBhbHdheXMgc2V0KVxuXHRcdFx0cmVzcG9uc2UgPSBhamF4Q29udmVydCggcywgcmVzcG9uc2UsIGpxWEhSLCBpc1N1Y2Nlc3MgKTtcblxuXHRcdFx0Ly8gSWYgc3VjY2Vzc2Z1bCwgaGFuZGxlIHR5cGUgY2hhaW5pbmdcblx0XHRcdGlmICggaXNTdWNjZXNzICkge1xuXG5cdFx0XHRcdC8vIFNldCB0aGUgSWYtTW9kaWZpZWQtU2luY2UgYW5kL29yIElmLU5vbmUtTWF0Y2ggaGVhZGVyLCBpZiBpbiBpZk1vZGlmaWVkIG1vZGUuXG5cdFx0XHRcdGlmICggcy5pZk1vZGlmaWVkICkge1xuXHRcdFx0XHRcdG1vZGlmaWVkID0ganFYSFIuZ2V0UmVzcG9uc2VIZWFkZXIoIFwiTGFzdC1Nb2RpZmllZFwiICk7XG5cdFx0XHRcdFx0aWYgKCBtb2RpZmllZCApIHtcblx0XHRcdFx0XHRcdGpRdWVyeS5sYXN0TW9kaWZpZWRbIGNhY2hlVVJMIF0gPSBtb2RpZmllZDtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0bW9kaWZpZWQgPSBqcVhIUi5nZXRSZXNwb25zZUhlYWRlciggXCJldGFnXCIgKTtcblx0XHRcdFx0XHRpZiAoIG1vZGlmaWVkICkge1xuXHRcdFx0XHRcdFx0alF1ZXJ5LmV0YWdbIGNhY2hlVVJMIF0gPSBtb2RpZmllZDtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBpZiBubyBjb250ZW50XG5cdFx0XHRcdGlmICggc3RhdHVzID09PSAyMDQgfHwgcy50eXBlID09PSBcIkhFQURcIiApIHtcblx0XHRcdFx0XHRzdGF0dXNUZXh0ID0gXCJub2NvbnRlbnRcIjtcblxuXHRcdFx0XHQvLyBpZiBub3QgbW9kaWZpZWRcblx0XHRcdFx0fSBlbHNlIGlmICggc3RhdHVzID09PSAzMDQgKSB7XG5cdFx0XHRcdFx0c3RhdHVzVGV4dCA9IFwibm90bW9kaWZpZWRcIjtcblxuXHRcdFx0XHQvLyBJZiB3ZSBoYXZlIGRhdGEsIGxldCdzIGNvbnZlcnQgaXRcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRzdGF0dXNUZXh0ID0gcmVzcG9uc2Uuc3RhdGU7XG5cdFx0XHRcdFx0c3VjY2VzcyA9IHJlc3BvbnNlLmRhdGE7XG5cdFx0XHRcdFx0ZXJyb3IgPSByZXNwb25zZS5lcnJvcjtcblx0XHRcdFx0XHRpc1N1Y2Nlc3MgPSAhZXJyb3I7XG5cdFx0XHRcdH1cblx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0Ly8gRXh0cmFjdCBlcnJvciBmcm9tIHN0YXR1c1RleHQgYW5kIG5vcm1hbGl6ZSBmb3Igbm9uLWFib3J0c1xuXHRcdFx0XHRlcnJvciA9IHN0YXR1c1RleHQ7XG5cdFx0XHRcdGlmICggc3RhdHVzIHx8ICFzdGF0dXNUZXh0ICkge1xuXHRcdFx0XHRcdHN0YXR1c1RleHQgPSBcImVycm9yXCI7XG5cdFx0XHRcdFx0aWYgKCBzdGF0dXMgPCAwICkge1xuXHRcdFx0XHRcdFx0c3RhdHVzID0gMDtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0Ly8gU2V0IGRhdGEgZm9yIHRoZSBmYWtlIHhociBvYmplY3Rcblx0XHRcdGpxWEhSLnN0YXR1cyA9IHN0YXR1cztcblx0XHRcdGpxWEhSLnN0YXR1c1RleHQgPSAoIG5hdGl2ZVN0YXR1c1RleHQgfHwgc3RhdHVzVGV4dCApICsgXCJcIjtcblxuXHRcdFx0Ly8gU3VjY2Vzcy9FcnJvclxuXHRcdFx0aWYgKCBpc1N1Y2Nlc3MgKSB7XG5cdFx0XHRcdGRlZmVycmVkLnJlc29sdmVXaXRoKCBjYWxsYmFja0NvbnRleHQsIFsgc3VjY2Vzcywgc3RhdHVzVGV4dCwganFYSFIgXSApO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0ZGVmZXJyZWQucmVqZWN0V2l0aCggY2FsbGJhY2tDb250ZXh0LCBbIGpxWEhSLCBzdGF0dXNUZXh0LCBlcnJvciBdICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIFN0YXR1cy1kZXBlbmRlbnQgY2FsbGJhY2tzXG5cdFx0XHRqcVhIUi5zdGF0dXNDb2RlKCBzdGF0dXNDb2RlICk7XG5cdFx0XHRzdGF0dXNDb2RlID0gdW5kZWZpbmVkO1xuXG5cdFx0XHRpZiAoIGZpcmVHbG9iYWxzICkge1xuXHRcdFx0XHRnbG9iYWxFdmVudENvbnRleHQudHJpZ2dlciggaXNTdWNjZXNzID8gXCJhamF4U3VjY2Vzc1wiIDogXCJhamF4RXJyb3JcIixcblx0XHRcdFx0XHRbIGpxWEhSLCBzLCBpc1N1Y2Nlc3MgPyBzdWNjZXNzIDogZXJyb3IgXSApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBDb21wbGV0ZVxuXHRcdFx0Y29tcGxldGVEZWZlcnJlZC5maXJlV2l0aCggY2FsbGJhY2tDb250ZXh0LCBbIGpxWEhSLCBzdGF0dXNUZXh0IF0gKTtcblxuXHRcdFx0aWYgKCBmaXJlR2xvYmFscyApIHtcblx0XHRcdFx0Z2xvYmFsRXZlbnRDb250ZXh0LnRyaWdnZXIoIFwiYWpheENvbXBsZXRlXCIsIFsganFYSFIsIHMgXSApO1xuXG5cdFx0XHRcdC8vIEhhbmRsZSB0aGUgZ2xvYmFsIEFKQVggY291bnRlclxuXHRcdFx0XHRpZiAoICEoIC0talF1ZXJ5LmFjdGl2ZSApICkge1xuXHRcdFx0XHRcdGpRdWVyeS5ldmVudC50cmlnZ2VyKCBcImFqYXhTdG9wXCIgKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHJldHVybiBqcVhIUjtcblx0fSxcblxuXHRnZXRKU09OOiBmdW5jdGlvbiggdXJsLCBkYXRhLCBjYWxsYmFjayApIHtcblx0XHRyZXR1cm4galF1ZXJ5LmdldCggdXJsLCBkYXRhLCBjYWxsYmFjaywgXCJqc29uXCIgKTtcblx0fSxcblxuXHRnZXRTY3JpcHQ6IGZ1bmN0aW9uKCB1cmwsIGNhbGxiYWNrICkge1xuXHRcdHJldHVybiBqUXVlcnkuZ2V0KCB1cmwsIHVuZGVmaW5lZCwgY2FsbGJhY2ssIFwic2NyaXB0XCIgKTtcblx0fVxufSApO1xuXG5qUXVlcnkuZWFjaCggWyBcImdldFwiLCBcInBvc3RcIiBdLCBmdW5jdGlvbiggaSwgbWV0aG9kICkge1xuXHRqUXVlcnlbIG1ldGhvZCBdID0gZnVuY3Rpb24oIHVybCwgZGF0YSwgY2FsbGJhY2ssIHR5cGUgKSB7XG5cblx0XHQvLyBTaGlmdCBhcmd1bWVudHMgaWYgZGF0YSBhcmd1bWVudCB3YXMgb21pdHRlZFxuXHRcdGlmICggaXNGdW5jdGlvbiggZGF0YSApICkge1xuXHRcdFx0dHlwZSA9IHR5cGUgfHwgY2FsbGJhY2s7XG5cdFx0XHRjYWxsYmFjayA9IGRhdGE7XG5cdFx0XHRkYXRhID0gdW5kZWZpbmVkO1xuXHRcdH1cblxuXHRcdC8vIFRoZSB1cmwgY2FuIGJlIGFuIG9wdGlvbnMgb2JqZWN0ICh3aGljaCB0aGVuIG11c3QgaGF2ZSAudXJsKVxuXHRcdHJldHVybiBqUXVlcnkuYWpheCggalF1ZXJ5LmV4dGVuZCgge1xuXHRcdFx0dXJsOiB1cmwsXG5cdFx0XHR0eXBlOiBtZXRob2QsXG5cdFx0XHRkYXRhVHlwZTogdHlwZSxcblx0XHRcdGRhdGE6IGRhdGEsXG5cdFx0XHRzdWNjZXNzOiBjYWxsYmFja1xuXHRcdH0sIGpRdWVyeS5pc1BsYWluT2JqZWN0KCB1cmwgKSAmJiB1cmwgKSApO1xuXHR9O1xufSApO1xuXG5cbmpRdWVyeS5fZXZhbFVybCA9IGZ1bmN0aW9uKCB1cmwgKSB7XG5cdHJldHVybiBqUXVlcnkuYWpheCgge1xuXHRcdHVybDogdXJsLFxuXG5cdFx0Ly8gTWFrZSB0aGlzIGV4cGxpY2l0LCBzaW5jZSB1c2VyIGNhbiBvdmVycmlkZSB0aGlzIHRocm91Z2ggYWpheFNldHVwICgjMTEyNjQpXG5cdFx0dHlwZTogXCJHRVRcIixcblx0XHRkYXRhVHlwZTogXCJzY3JpcHRcIixcblx0XHRjYWNoZTogdHJ1ZSxcblx0XHRhc3luYzogZmFsc2UsXG5cdFx0Z2xvYmFsOiBmYWxzZSxcblx0XHRcInRocm93c1wiOiB0cnVlXG5cdH0gKTtcbn07XG5cblxualF1ZXJ5LmZuLmV4dGVuZCgge1xuXHR3cmFwQWxsOiBmdW5jdGlvbiggaHRtbCApIHtcblx0XHR2YXIgd3JhcDtcblxuXHRcdGlmICggdGhpc1sgMCBdICkge1xuXHRcdFx0aWYgKCBpc0Z1bmN0aW9uKCBodG1sICkgKSB7XG5cdFx0XHRcdGh0bWwgPSBodG1sLmNhbGwoIHRoaXNbIDAgXSApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBUaGUgZWxlbWVudHMgdG8gd3JhcCB0aGUgdGFyZ2V0IGFyb3VuZFxuXHRcdFx0d3JhcCA9IGpRdWVyeSggaHRtbCwgdGhpc1sgMCBdLm93bmVyRG9jdW1lbnQgKS5lcSggMCApLmNsb25lKCB0cnVlICk7XG5cblx0XHRcdGlmICggdGhpc1sgMCBdLnBhcmVudE5vZGUgKSB7XG5cdFx0XHRcdHdyYXAuaW5zZXJ0QmVmb3JlKCB0aGlzWyAwIF0gKTtcblx0XHRcdH1cblxuXHRcdFx0d3JhcC5tYXAoIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHR2YXIgZWxlbSA9IHRoaXM7XG5cblx0XHRcdFx0d2hpbGUgKCBlbGVtLmZpcnN0RWxlbWVudENoaWxkICkge1xuXHRcdFx0XHRcdGVsZW0gPSBlbGVtLmZpcnN0RWxlbWVudENoaWxkO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0cmV0dXJuIGVsZW07XG5cdFx0XHR9ICkuYXBwZW5kKCB0aGlzICk7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXM7XG5cdH0sXG5cblx0d3JhcElubmVyOiBmdW5jdGlvbiggaHRtbCApIHtcblx0XHRpZiAoIGlzRnVuY3Rpb24oIGh0bWwgKSApIHtcblx0XHRcdHJldHVybiB0aGlzLmVhY2goIGZ1bmN0aW9uKCBpICkge1xuXHRcdFx0XHRqUXVlcnkoIHRoaXMgKS53cmFwSW5uZXIoIGh0bWwuY2FsbCggdGhpcywgaSApICk7XG5cdFx0XHR9ICk7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXMuZWFjaCggZnVuY3Rpb24oKSB7XG5cdFx0XHR2YXIgc2VsZiA9IGpRdWVyeSggdGhpcyApLFxuXHRcdFx0XHRjb250ZW50cyA9IHNlbGYuY29udGVudHMoKTtcblxuXHRcdFx0aWYgKCBjb250ZW50cy5sZW5ndGggKSB7XG5cdFx0XHRcdGNvbnRlbnRzLndyYXBBbGwoIGh0bWwgKTtcblxuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0c2VsZi5hcHBlbmQoIGh0bWwgKTtcblx0XHRcdH1cblx0XHR9ICk7XG5cdH0sXG5cblx0d3JhcDogZnVuY3Rpb24oIGh0bWwgKSB7XG5cdFx0dmFyIGh0bWxJc0Z1bmN0aW9uID0gaXNGdW5jdGlvbiggaHRtbCApO1xuXG5cdFx0cmV0dXJuIHRoaXMuZWFjaCggZnVuY3Rpb24oIGkgKSB7XG5cdFx0XHRqUXVlcnkoIHRoaXMgKS53cmFwQWxsKCBodG1sSXNGdW5jdGlvbiA/IGh0bWwuY2FsbCggdGhpcywgaSApIDogaHRtbCApO1xuXHRcdH0gKTtcblx0fSxcblxuXHR1bndyYXA6IGZ1bmN0aW9uKCBzZWxlY3RvciApIHtcblx0XHR0aGlzLnBhcmVudCggc2VsZWN0b3IgKS5ub3QoIFwiYm9keVwiICkuZWFjaCggZnVuY3Rpb24oKSB7XG5cdFx0XHRqUXVlcnkoIHRoaXMgKS5yZXBsYWNlV2l0aCggdGhpcy5jaGlsZE5vZGVzICk7XG5cdFx0fSApO1xuXHRcdHJldHVybiB0aGlzO1xuXHR9XG59ICk7XG5cblxualF1ZXJ5LmV4cHIucHNldWRvcy5oaWRkZW4gPSBmdW5jdGlvbiggZWxlbSApIHtcblx0cmV0dXJuICFqUXVlcnkuZXhwci5wc2V1ZG9zLnZpc2libGUoIGVsZW0gKTtcbn07XG5qUXVlcnkuZXhwci5wc2V1ZG9zLnZpc2libGUgPSBmdW5jdGlvbiggZWxlbSApIHtcblx0cmV0dXJuICEhKCBlbGVtLm9mZnNldFdpZHRoIHx8IGVsZW0ub2Zmc2V0SGVpZ2h0IHx8IGVsZW0uZ2V0Q2xpZW50UmVjdHMoKS5sZW5ndGggKTtcbn07XG5cblxuXG5cbmpRdWVyeS5hamF4U2V0dGluZ3MueGhyID0gZnVuY3Rpb24oKSB7XG5cdHRyeSB7XG5cdFx0cmV0dXJuIG5ldyB3aW5kb3cuWE1MSHR0cFJlcXVlc3QoKTtcblx0fSBjYXRjaCAoIGUgKSB7fVxufTtcblxudmFyIHhoclN1Y2Nlc3NTdGF0dXMgPSB7XG5cblx0XHQvLyBGaWxlIHByb3RvY29sIGFsd2F5cyB5aWVsZHMgc3RhdHVzIGNvZGUgMCwgYXNzdW1lIDIwMFxuXHRcdDA6IDIwMCxcblxuXHRcdC8vIFN1cHBvcnQ6IElFIDw9OSBvbmx5XG5cdFx0Ly8gIzE0NTA6IHNvbWV0aW1lcyBJRSByZXR1cm5zIDEyMjMgd2hlbiBpdCBzaG91bGQgYmUgMjA0XG5cdFx0MTIyMzogMjA0XG5cdH0sXG5cdHhoclN1cHBvcnRlZCA9IGpRdWVyeS5hamF4U2V0dGluZ3MueGhyKCk7XG5cbnN1cHBvcnQuY29ycyA9ICEheGhyU3VwcG9ydGVkICYmICggXCJ3aXRoQ3JlZGVudGlhbHNcIiBpbiB4aHJTdXBwb3J0ZWQgKTtcbnN1cHBvcnQuYWpheCA9IHhoclN1cHBvcnRlZCA9ICEheGhyU3VwcG9ydGVkO1xuXG5qUXVlcnkuYWpheFRyYW5zcG9ydCggZnVuY3Rpb24oIG9wdGlvbnMgKSB7XG5cdHZhciBjYWxsYmFjaywgZXJyb3JDYWxsYmFjaztcblxuXHQvLyBDcm9zcyBkb21haW4gb25seSBhbGxvd2VkIGlmIHN1cHBvcnRlZCB0aHJvdWdoIFhNTEh0dHBSZXF1ZXN0XG5cdGlmICggc3VwcG9ydC5jb3JzIHx8IHhoclN1cHBvcnRlZCAmJiAhb3B0aW9ucy5jcm9zc0RvbWFpbiApIHtcblx0XHRyZXR1cm4ge1xuXHRcdFx0c2VuZDogZnVuY3Rpb24oIGhlYWRlcnMsIGNvbXBsZXRlICkge1xuXHRcdFx0XHR2YXIgaSxcblx0XHRcdFx0XHR4aHIgPSBvcHRpb25zLnhocigpO1xuXG5cdFx0XHRcdHhoci5vcGVuKFxuXHRcdFx0XHRcdG9wdGlvbnMudHlwZSxcblx0XHRcdFx0XHRvcHRpb25zLnVybCxcblx0XHRcdFx0XHRvcHRpb25zLmFzeW5jLFxuXHRcdFx0XHRcdG9wdGlvbnMudXNlcm5hbWUsXG5cdFx0XHRcdFx0b3B0aW9ucy5wYXNzd29yZFxuXHRcdFx0XHQpO1xuXG5cdFx0XHRcdC8vIEFwcGx5IGN1c3RvbSBmaWVsZHMgaWYgcHJvdmlkZWRcblx0XHRcdFx0aWYgKCBvcHRpb25zLnhockZpZWxkcyApIHtcblx0XHRcdFx0XHRmb3IgKCBpIGluIG9wdGlvbnMueGhyRmllbGRzICkge1xuXHRcdFx0XHRcdFx0eGhyWyBpIF0gPSBvcHRpb25zLnhockZpZWxkc1sgaSBdO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIE92ZXJyaWRlIG1pbWUgdHlwZSBpZiBuZWVkZWRcblx0XHRcdFx0aWYgKCBvcHRpb25zLm1pbWVUeXBlICYmIHhoci5vdmVycmlkZU1pbWVUeXBlICkge1xuXHRcdFx0XHRcdHhoci5vdmVycmlkZU1pbWVUeXBlKCBvcHRpb25zLm1pbWVUeXBlICk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBYLVJlcXVlc3RlZC1XaXRoIGhlYWRlclxuXHRcdFx0XHQvLyBGb3IgY3Jvc3MtZG9tYWluIHJlcXVlc3RzLCBzZWVpbmcgYXMgY29uZGl0aW9ucyBmb3IgYSBwcmVmbGlnaHQgYXJlXG5cdFx0XHRcdC8vIGFraW4gdG8gYSBqaWdzYXcgcHV6emxlLCB3ZSBzaW1wbHkgbmV2ZXIgc2V0IGl0IHRvIGJlIHN1cmUuXG5cdFx0XHRcdC8vIChpdCBjYW4gYWx3YXlzIGJlIHNldCBvbiBhIHBlci1yZXF1ZXN0IGJhc2lzIG9yIGV2ZW4gdXNpbmcgYWpheFNldHVwKVxuXHRcdFx0XHQvLyBGb3Igc2FtZS1kb21haW4gcmVxdWVzdHMsIHdvbid0IGNoYW5nZSBoZWFkZXIgaWYgYWxyZWFkeSBwcm92aWRlZC5cblx0XHRcdFx0aWYgKCAhb3B0aW9ucy5jcm9zc0RvbWFpbiAmJiAhaGVhZGVyc1sgXCJYLVJlcXVlc3RlZC1XaXRoXCIgXSApIHtcblx0XHRcdFx0XHRoZWFkZXJzWyBcIlgtUmVxdWVzdGVkLVdpdGhcIiBdID0gXCJYTUxIdHRwUmVxdWVzdFwiO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gU2V0IGhlYWRlcnNcblx0XHRcdFx0Zm9yICggaSBpbiBoZWFkZXJzICkge1xuXHRcdFx0XHRcdHhoci5zZXRSZXF1ZXN0SGVhZGVyKCBpLCBoZWFkZXJzWyBpIF0gKTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIENhbGxiYWNrXG5cdFx0XHRcdGNhbGxiYWNrID0gZnVuY3Rpb24oIHR5cGUgKSB7XG5cdFx0XHRcdFx0cmV0dXJuIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdFx0aWYgKCBjYWxsYmFjayApIHtcblx0XHRcdFx0XHRcdFx0Y2FsbGJhY2sgPSBlcnJvckNhbGxiYWNrID0geGhyLm9ubG9hZCA9XG5cdFx0XHRcdFx0XHRcdFx0eGhyLm9uZXJyb3IgPSB4aHIub25hYm9ydCA9IHhoci5vbnRpbWVvdXQgPVxuXHRcdFx0XHRcdFx0XHRcdFx0eGhyLm9ucmVhZHlzdGF0ZWNoYW5nZSA9IG51bGw7XG5cblx0XHRcdFx0XHRcdFx0aWYgKCB0eXBlID09PSBcImFib3J0XCIgKSB7XG5cdFx0XHRcdFx0XHRcdFx0eGhyLmFib3J0KCk7XG5cdFx0XHRcdFx0XHRcdH0gZWxzZSBpZiAoIHR5cGUgPT09IFwiZXJyb3JcIiApIHtcblxuXHRcdFx0XHRcdFx0XHRcdC8vIFN1cHBvcnQ6IElFIDw9OSBvbmx5XG5cdFx0XHRcdFx0XHRcdFx0Ly8gT24gYSBtYW51YWwgbmF0aXZlIGFib3J0LCBJRTkgdGhyb3dzXG5cdFx0XHRcdFx0XHRcdFx0Ly8gZXJyb3JzIG9uIGFueSBwcm9wZXJ0eSBhY2Nlc3MgdGhhdCBpcyBub3QgcmVhZHlTdGF0ZVxuXHRcdFx0XHRcdFx0XHRcdGlmICggdHlwZW9mIHhoci5zdGF0dXMgIT09IFwibnVtYmVyXCIgKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRjb21wbGV0ZSggMCwgXCJlcnJvclwiICk7XG5cdFx0XHRcdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdFx0XHRcdGNvbXBsZXRlKFxuXG5cdFx0XHRcdFx0XHRcdFx0XHRcdC8vIEZpbGU6IHByb3RvY29sIGFsd2F5cyB5aWVsZHMgc3RhdHVzIDA7IHNlZSAjODYwNSwgIzE0MjA3XG5cdFx0XHRcdFx0XHRcdFx0XHRcdHhoci5zdGF0dXMsXG5cdFx0XHRcdFx0XHRcdFx0XHRcdHhoci5zdGF0dXNUZXh0XG5cdFx0XHRcdFx0XHRcdFx0XHQpO1xuXHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdFx0XHRjb21wbGV0ZShcblx0XHRcdFx0XHRcdFx0XHRcdHhoclN1Y2Nlc3NTdGF0dXNbIHhoci5zdGF0dXMgXSB8fCB4aHIuc3RhdHVzLFxuXHRcdFx0XHRcdFx0XHRcdFx0eGhyLnN0YXR1c1RleHQsXG5cblx0XHRcdFx0XHRcdFx0XHRcdC8vIFN1cHBvcnQ6IElFIDw9OSBvbmx5XG5cdFx0XHRcdFx0XHRcdFx0XHQvLyBJRTkgaGFzIG5vIFhIUjIgYnV0IHRocm93cyBvbiBiaW5hcnkgKHRyYWMtMTE0MjYpXG5cdFx0XHRcdFx0XHRcdFx0XHQvLyBGb3IgWEhSMiBub24tdGV4dCwgbGV0IHRoZSBjYWxsZXIgaGFuZGxlIGl0IChnaC0yNDk4KVxuXHRcdFx0XHRcdFx0XHRcdFx0KCB4aHIucmVzcG9uc2VUeXBlIHx8IFwidGV4dFwiICkgIT09IFwidGV4dFwiICB8fFxuXHRcdFx0XHRcdFx0XHRcdFx0dHlwZW9mIHhoci5yZXNwb25zZVRleHQgIT09IFwic3RyaW5nXCIgP1xuXHRcdFx0XHRcdFx0XHRcdFx0XHR7IGJpbmFyeTogeGhyLnJlc3BvbnNlIH0gOlxuXHRcdFx0XHRcdFx0XHRcdFx0XHR7IHRleHQ6IHhoci5yZXNwb25zZVRleHQgfSxcblx0XHRcdFx0XHRcdFx0XHRcdHhoci5nZXRBbGxSZXNwb25zZUhlYWRlcnMoKVxuXHRcdFx0XHRcdFx0XHRcdCk7XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9O1xuXHRcdFx0XHR9O1xuXG5cdFx0XHRcdC8vIExpc3RlbiB0byBldmVudHNcblx0XHRcdFx0eGhyLm9ubG9hZCA9IGNhbGxiYWNrKCk7XG5cdFx0XHRcdGVycm9yQ2FsbGJhY2sgPSB4aHIub25lcnJvciA9IHhoci5vbnRpbWVvdXQgPSBjYWxsYmFjayggXCJlcnJvclwiICk7XG5cblx0XHRcdFx0Ly8gU3VwcG9ydDogSUUgOSBvbmx5XG5cdFx0XHRcdC8vIFVzZSBvbnJlYWR5c3RhdGVjaGFuZ2UgdG8gcmVwbGFjZSBvbmFib3J0XG5cdFx0XHRcdC8vIHRvIGhhbmRsZSB1bmNhdWdodCBhYm9ydHNcblx0XHRcdFx0aWYgKCB4aHIub25hYm9ydCAhPT0gdW5kZWZpbmVkICkge1xuXHRcdFx0XHRcdHhoci5vbmFib3J0ID0gZXJyb3JDYWxsYmFjaztcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHR4aHIub25yZWFkeXN0YXRlY2hhbmdlID0gZnVuY3Rpb24oKSB7XG5cblx0XHRcdFx0XHRcdC8vIENoZWNrIHJlYWR5U3RhdGUgYmVmb3JlIHRpbWVvdXQgYXMgaXQgY2hhbmdlc1xuXHRcdFx0XHRcdFx0aWYgKCB4aHIucmVhZHlTdGF0ZSA9PT0gNCApIHtcblxuXHRcdFx0XHRcdFx0XHQvLyBBbGxvdyBvbmVycm9yIHRvIGJlIGNhbGxlZCBmaXJzdCxcblx0XHRcdFx0XHRcdFx0Ly8gYnV0IHRoYXQgd2lsbCBub3QgaGFuZGxlIGEgbmF0aXZlIGFib3J0XG5cdFx0XHRcdFx0XHRcdC8vIEFsc28sIHNhdmUgZXJyb3JDYWxsYmFjayB0byBhIHZhcmlhYmxlXG5cdFx0XHRcdFx0XHRcdC8vIGFzIHhoci5vbmVycm9yIGNhbm5vdCBiZSBhY2Nlc3NlZFxuXHRcdFx0XHRcdFx0XHR3aW5kb3cuc2V0VGltZW91dCggZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0XHRcdFx0aWYgKCBjYWxsYmFjayApIHtcblx0XHRcdFx0XHRcdFx0XHRcdGVycm9yQ2FsbGJhY2soKTtcblx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdH0gKTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9O1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gQ3JlYXRlIHRoZSBhYm9ydCBjYWxsYmFja1xuXHRcdFx0XHRjYWxsYmFjayA9IGNhbGxiYWNrKCBcImFib3J0XCIgKTtcblxuXHRcdFx0XHR0cnkge1xuXG5cdFx0XHRcdFx0Ly8gRG8gc2VuZCB0aGUgcmVxdWVzdCAodGhpcyBtYXkgcmFpc2UgYW4gZXhjZXB0aW9uKVxuXHRcdFx0XHRcdHhoci5zZW5kKCBvcHRpb25zLmhhc0NvbnRlbnQgJiYgb3B0aW9ucy5kYXRhIHx8IG51bGwgKTtcblx0XHRcdFx0fSBjYXRjaCAoIGUgKSB7XG5cblx0XHRcdFx0XHQvLyAjMTQ2ODM6IE9ubHkgcmV0aHJvdyBpZiB0aGlzIGhhc24ndCBiZWVuIG5vdGlmaWVkIGFzIGFuIGVycm9yIHlldFxuXHRcdFx0XHRcdGlmICggY2FsbGJhY2sgKSB7XG5cdFx0XHRcdFx0XHR0aHJvdyBlO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fSxcblxuXHRcdFx0YWJvcnQ6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRpZiAoIGNhbGxiYWNrICkge1xuXHRcdFx0XHRcdGNhbGxiYWNrKCk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9O1xuXHR9XG59ICk7XG5cblxuXG5cbi8vIFByZXZlbnQgYXV0by1leGVjdXRpb24gb2Ygc2NyaXB0cyB3aGVuIG5vIGV4cGxpY2l0IGRhdGFUeXBlIHdhcyBwcm92aWRlZCAoU2VlIGdoLTI0MzIpXG5qUXVlcnkuYWpheFByZWZpbHRlciggZnVuY3Rpb24oIHMgKSB7XG5cdGlmICggcy5jcm9zc0RvbWFpbiApIHtcblx0XHRzLmNvbnRlbnRzLnNjcmlwdCA9IGZhbHNlO1xuXHR9XG59ICk7XG5cbi8vIEluc3RhbGwgc2NyaXB0IGRhdGFUeXBlXG5qUXVlcnkuYWpheFNldHVwKCB7XG5cdGFjY2VwdHM6IHtcblx0XHRzY3JpcHQ6IFwidGV4dC9qYXZhc2NyaXB0LCBhcHBsaWNhdGlvbi9qYXZhc2NyaXB0LCBcIiArXG5cdFx0XHRcImFwcGxpY2F0aW9uL2VjbWFzY3JpcHQsIGFwcGxpY2F0aW9uL3gtZWNtYXNjcmlwdFwiXG5cdH0sXG5cdGNvbnRlbnRzOiB7XG5cdFx0c2NyaXB0OiAvXFxiKD86amF2YXxlY21hKXNjcmlwdFxcYi9cblx0fSxcblx0Y29udmVydGVyczoge1xuXHRcdFwidGV4dCBzY3JpcHRcIjogZnVuY3Rpb24oIHRleHQgKSB7XG5cdFx0XHRqUXVlcnkuZ2xvYmFsRXZhbCggdGV4dCApO1xuXHRcdFx0cmV0dXJuIHRleHQ7XG5cdFx0fVxuXHR9XG59ICk7XG5cbi8vIEhhbmRsZSBjYWNoZSdzIHNwZWNpYWwgY2FzZSBhbmQgY3Jvc3NEb21haW5cbmpRdWVyeS5hamF4UHJlZmlsdGVyKCBcInNjcmlwdFwiLCBmdW5jdGlvbiggcyApIHtcblx0aWYgKCBzLmNhY2hlID09PSB1bmRlZmluZWQgKSB7XG5cdFx0cy5jYWNoZSA9IGZhbHNlO1xuXHR9XG5cdGlmICggcy5jcm9zc0RvbWFpbiApIHtcblx0XHRzLnR5cGUgPSBcIkdFVFwiO1xuXHR9XG59ICk7XG5cbi8vIEJpbmQgc2NyaXB0IHRhZyBoYWNrIHRyYW5zcG9ydFxualF1ZXJ5LmFqYXhUcmFuc3BvcnQoIFwic2NyaXB0XCIsIGZ1bmN0aW9uKCBzICkge1xuXG5cdC8vIFRoaXMgdHJhbnNwb3J0IG9ubHkgZGVhbHMgd2l0aCBjcm9zcyBkb21haW4gcmVxdWVzdHNcblx0aWYgKCBzLmNyb3NzRG9tYWluICkge1xuXHRcdHZhciBzY3JpcHQsIGNhbGxiYWNrO1xuXHRcdHJldHVybiB7XG5cdFx0XHRzZW5kOiBmdW5jdGlvbiggXywgY29tcGxldGUgKSB7XG5cdFx0XHRcdHNjcmlwdCA9IGpRdWVyeSggXCI8c2NyaXB0PlwiICkucHJvcCgge1xuXHRcdFx0XHRcdGNoYXJzZXQ6IHMuc2NyaXB0Q2hhcnNldCxcblx0XHRcdFx0XHRzcmM6IHMudXJsXG5cdFx0XHRcdH0gKS5vbihcblx0XHRcdFx0XHRcImxvYWQgZXJyb3JcIixcblx0XHRcdFx0XHRjYWxsYmFjayA9IGZ1bmN0aW9uKCBldnQgKSB7XG5cdFx0XHRcdFx0XHRzY3JpcHQucmVtb3ZlKCk7XG5cdFx0XHRcdFx0XHRjYWxsYmFjayA9IG51bGw7XG5cdFx0XHRcdFx0XHRpZiAoIGV2dCApIHtcblx0XHRcdFx0XHRcdFx0Y29tcGxldGUoIGV2dC50eXBlID09PSBcImVycm9yXCIgPyA0MDQgOiAyMDAsIGV2dC50eXBlICk7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHQpO1xuXG5cdFx0XHRcdC8vIFVzZSBuYXRpdmUgRE9NIG1hbmlwdWxhdGlvbiB0byBhdm9pZCBvdXIgZG9tTWFuaXAgQUpBWCB0cmlja2VyeVxuXHRcdFx0XHRkb2N1bWVudC5oZWFkLmFwcGVuZENoaWxkKCBzY3JpcHRbIDAgXSApO1xuXHRcdFx0fSxcblx0XHRcdGFib3J0OiBmdW5jdGlvbigpIHtcblx0XHRcdFx0aWYgKCBjYWxsYmFjayApIHtcblx0XHRcdFx0XHRjYWxsYmFjaygpO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fTtcblx0fVxufSApO1xuXG5cblxuXG52YXIgb2xkQ2FsbGJhY2tzID0gW10sXG5cdHJqc29ucCA9IC8oPSlcXD8oPz0mfCQpfFxcP1xcPy87XG5cbi8vIERlZmF1bHQganNvbnAgc2V0dGluZ3NcbmpRdWVyeS5hamF4U2V0dXAoIHtcblx0anNvbnA6IFwiY2FsbGJhY2tcIixcblx0anNvbnBDYWxsYmFjazogZnVuY3Rpb24oKSB7XG5cdFx0dmFyIGNhbGxiYWNrID0gb2xkQ2FsbGJhY2tzLnBvcCgpIHx8ICggalF1ZXJ5LmV4cGFuZG8gKyBcIl9cIiArICggbm9uY2UrKyApICk7XG5cdFx0dGhpc1sgY2FsbGJhY2sgXSA9IHRydWU7XG5cdFx0cmV0dXJuIGNhbGxiYWNrO1xuXHR9XG59ICk7XG5cbi8vIERldGVjdCwgbm9ybWFsaXplIG9wdGlvbnMgYW5kIGluc3RhbGwgY2FsbGJhY2tzIGZvciBqc29ucCByZXF1ZXN0c1xualF1ZXJ5LmFqYXhQcmVmaWx0ZXIoIFwianNvbiBqc29ucFwiLCBmdW5jdGlvbiggcywgb3JpZ2luYWxTZXR0aW5ncywganFYSFIgKSB7XG5cblx0dmFyIGNhbGxiYWNrTmFtZSwgb3ZlcndyaXR0ZW4sIHJlc3BvbnNlQ29udGFpbmVyLFxuXHRcdGpzb25Qcm9wID0gcy5qc29ucCAhPT0gZmFsc2UgJiYgKCByanNvbnAudGVzdCggcy51cmwgKSA/XG5cdFx0XHRcInVybFwiIDpcblx0XHRcdHR5cGVvZiBzLmRhdGEgPT09IFwic3RyaW5nXCIgJiZcblx0XHRcdFx0KCBzLmNvbnRlbnRUeXBlIHx8IFwiXCIgKVxuXHRcdFx0XHRcdC5pbmRleE9mKCBcImFwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZFwiICkgPT09IDAgJiZcblx0XHRcdFx0cmpzb25wLnRlc3QoIHMuZGF0YSApICYmIFwiZGF0YVwiXG5cdFx0KTtcblxuXHQvLyBIYW5kbGUgaWZmIHRoZSBleHBlY3RlZCBkYXRhIHR5cGUgaXMgXCJqc29ucFwiIG9yIHdlIGhhdmUgYSBwYXJhbWV0ZXIgdG8gc2V0XG5cdGlmICgganNvblByb3AgfHwgcy5kYXRhVHlwZXNbIDAgXSA9PT0gXCJqc29ucFwiICkge1xuXG5cdFx0Ly8gR2V0IGNhbGxiYWNrIG5hbWUsIHJlbWVtYmVyaW5nIHByZWV4aXN0aW5nIHZhbHVlIGFzc29jaWF0ZWQgd2l0aCBpdFxuXHRcdGNhbGxiYWNrTmFtZSA9IHMuanNvbnBDYWxsYmFjayA9IGlzRnVuY3Rpb24oIHMuanNvbnBDYWxsYmFjayApID9cblx0XHRcdHMuanNvbnBDYWxsYmFjaygpIDpcblx0XHRcdHMuanNvbnBDYWxsYmFjaztcblxuXHRcdC8vIEluc2VydCBjYWxsYmFjayBpbnRvIHVybCBvciBmb3JtIGRhdGFcblx0XHRpZiAoIGpzb25Qcm9wICkge1xuXHRcdFx0c1sganNvblByb3AgXSA9IHNbIGpzb25Qcm9wIF0ucmVwbGFjZSggcmpzb25wLCBcIiQxXCIgKyBjYWxsYmFja05hbWUgKTtcblx0XHR9IGVsc2UgaWYgKCBzLmpzb25wICE9PSBmYWxzZSApIHtcblx0XHRcdHMudXJsICs9ICggcnF1ZXJ5LnRlc3QoIHMudXJsICkgPyBcIiZcIiA6IFwiP1wiICkgKyBzLmpzb25wICsgXCI9XCIgKyBjYWxsYmFja05hbWU7XG5cdFx0fVxuXG5cdFx0Ly8gVXNlIGRhdGEgY29udmVydGVyIHRvIHJldHJpZXZlIGpzb24gYWZ0ZXIgc2NyaXB0IGV4ZWN1dGlvblxuXHRcdHMuY29udmVydGVyc1sgXCJzY3JpcHQganNvblwiIF0gPSBmdW5jdGlvbigpIHtcblx0XHRcdGlmICggIXJlc3BvbnNlQ29udGFpbmVyICkge1xuXHRcdFx0XHRqUXVlcnkuZXJyb3IoIGNhbGxiYWNrTmFtZSArIFwiIHdhcyBub3QgY2FsbGVkXCIgKTtcblx0XHRcdH1cblx0XHRcdHJldHVybiByZXNwb25zZUNvbnRhaW5lclsgMCBdO1xuXHRcdH07XG5cblx0XHQvLyBGb3JjZSBqc29uIGRhdGFUeXBlXG5cdFx0cy5kYXRhVHlwZXNbIDAgXSA9IFwianNvblwiO1xuXG5cdFx0Ly8gSW5zdGFsbCBjYWxsYmFja1xuXHRcdG92ZXJ3cml0dGVuID0gd2luZG93WyBjYWxsYmFja05hbWUgXTtcblx0XHR3aW5kb3dbIGNhbGxiYWNrTmFtZSBdID0gZnVuY3Rpb24oKSB7XG5cdFx0XHRyZXNwb25zZUNvbnRhaW5lciA9IGFyZ3VtZW50cztcblx0XHR9O1xuXG5cdFx0Ly8gQ2xlYW4tdXAgZnVuY3Rpb24gKGZpcmVzIGFmdGVyIGNvbnZlcnRlcnMpXG5cdFx0anFYSFIuYWx3YXlzKCBmdW5jdGlvbigpIHtcblxuXHRcdFx0Ly8gSWYgcHJldmlvdXMgdmFsdWUgZGlkbid0IGV4aXN0IC0gcmVtb3ZlIGl0XG5cdFx0XHRpZiAoIG92ZXJ3cml0dGVuID09PSB1bmRlZmluZWQgKSB7XG5cdFx0XHRcdGpRdWVyeSggd2luZG93ICkucmVtb3ZlUHJvcCggY2FsbGJhY2tOYW1lICk7XG5cblx0XHRcdC8vIE90aGVyd2lzZSByZXN0b3JlIHByZWV4aXN0aW5nIHZhbHVlXG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHR3aW5kb3dbIGNhbGxiYWNrTmFtZSBdID0gb3ZlcndyaXR0ZW47XG5cdFx0XHR9XG5cblx0XHRcdC8vIFNhdmUgYmFjayBhcyBmcmVlXG5cdFx0XHRpZiAoIHNbIGNhbGxiYWNrTmFtZSBdICkge1xuXG5cdFx0XHRcdC8vIE1ha2Ugc3VyZSB0aGF0IHJlLXVzaW5nIHRoZSBvcHRpb25zIGRvZXNuJ3Qgc2NyZXcgdGhpbmdzIGFyb3VuZFxuXHRcdFx0XHRzLmpzb25wQ2FsbGJhY2sgPSBvcmlnaW5hbFNldHRpbmdzLmpzb25wQ2FsbGJhY2s7XG5cblx0XHRcdFx0Ly8gU2F2ZSB0aGUgY2FsbGJhY2sgbmFtZSBmb3IgZnV0dXJlIHVzZVxuXHRcdFx0XHRvbGRDYWxsYmFja3MucHVzaCggY2FsbGJhY2tOYW1lICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIENhbGwgaWYgaXQgd2FzIGEgZnVuY3Rpb24gYW5kIHdlIGhhdmUgYSByZXNwb25zZVxuXHRcdFx0aWYgKCByZXNwb25zZUNvbnRhaW5lciAmJiBpc0Z1bmN0aW9uKCBvdmVyd3JpdHRlbiApICkge1xuXHRcdFx0XHRvdmVyd3JpdHRlbiggcmVzcG9uc2VDb250YWluZXJbIDAgXSApO1xuXHRcdFx0fVxuXG5cdFx0XHRyZXNwb25zZUNvbnRhaW5lciA9IG92ZXJ3cml0dGVuID0gdW5kZWZpbmVkO1xuXHRcdH0gKTtcblxuXHRcdC8vIERlbGVnYXRlIHRvIHNjcmlwdFxuXHRcdHJldHVybiBcInNjcmlwdFwiO1xuXHR9XG59ICk7XG5cblxuXG5cbi8vIFN1cHBvcnQ6IFNhZmFyaSA4IG9ubHlcbi8vIEluIFNhZmFyaSA4IGRvY3VtZW50cyBjcmVhdGVkIHZpYSBkb2N1bWVudC5pbXBsZW1lbnRhdGlvbi5jcmVhdGVIVE1MRG9jdW1lbnRcbi8vIGNvbGxhcHNlIHNpYmxpbmcgZm9ybXM6IHRoZSBzZWNvbmQgb25lIGJlY29tZXMgYSBjaGlsZCBvZiB0aGUgZmlyc3Qgb25lLlxuLy8gQmVjYXVzZSBvZiB0aGF0LCB0aGlzIHNlY3VyaXR5IG1lYXN1cmUgaGFzIHRvIGJlIGRpc2FibGVkIGluIFNhZmFyaSA4LlxuLy8gaHR0cHM6Ly9idWdzLndlYmtpdC5vcmcvc2hvd19idWcuY2dpP2lkPTEzNzMzN1xuc3VwcG9ydC5jcmVhdGVIVE1MRG9jdW1lbnQgPSAoIGZ1bmN0aW9uKCkge1xuXHR2YXIgYm9keSA9IGRvY3VtZW50LmltcGxlbWVudGF0aW9uLmNyZWF0ZUhUTUxEb2N1bWVudCggXCJcIiApLmJvZHk7XG5cdGJvZHkuaW5uZXJIVE1MID0gXCI8Zm9ybT48L2Zvcm0+PGZvcm0+PC9mb3JtPlwiO1xuXHRyZXR1cm4gYm9keS5jaGlsZE5vZGVzLmxlbmd0aCA9PT0gMjtcbn0gKSgpO1xuXG5cbi8vIEFyZ3VtZW50IFwiZGF0YVwiIHNob3VsZCBiZSBzdHJpbmcgb2YgaHRtbFxuLy8gY29udGV4dCAob3B0aW9uYWwpOiBJZiBzcGVjaWZpZWQsIHRoZSBmcmFnbWVudCB3aWxsIGJlIGNyZWF0ZWQgaW4gdGhpcyBjb250ZXh0LFxuLy8gZGVmYXVsdHMgdG8gZG9jdW1lbnRcbi8vIGtlZXBTY3JpcHRzIChvcHRpb25hbCk6IElmIHRydWUsIHdpbGwgaW5jbHVkZSBzY3JpcHRzIHBhc3NlZCBpbiB0aGUgaHRtbCBzdHJpbmdcbmpRdWVyeS5wYXJzZUhUTUwgPSBmdW5jdGlvbiggZGF0YSwgY29udGV4dCwga2VlcFNjcmlwdHMgKSB7XG5cdGlmICggdHlwZW9mIGRhdGEgIT09IFwic3RyaW5nXCIgKSB7XG5cdFx0cmV0dXJuIFtdO1xuXHR9XG5cdGlmICggdHlwZW9mIGNvbnRleHQgPT09IFwiYm9vbGVhblwiICkge1xuXHRcdGtlZXBTY3JpcHRzID0gY29udGV4dDtcblx0XHRjb250ZXh0ID0gZmFsc2U7XG5cdH1cblxuXHR2YXIgYmFzZSwgcGFyc2VkLCBzY3JpcHRzO1xuXG5cdGlmICggIWNvbnRleHQgKSB7XG5cblx0XHQvLyBTdG9wIHNjcmlwdHMgb3IgaW5saW5lIGV2ZW50IGhhbmRsZXJzIGZyb20gYmVpbmcgZXhlY3V0ZWQgaW1tZWRpYXRlbHlcblx0XHQvLyBieSB1c2luZyBkb2N1bWVudC5pbXBsZW1lbnRhdGlvblxuXHRcdGlmICggc3VwcG9ydC5jcmVhdGVIVE1MRG9jdW1lbnQgKSB7XG5cdFx0XHRjb250ZXh0ID0gZG9jdW1lbnQuaW1wbGVtZW50YXRpb24uY3JlYXRlSFRNTERvY3VtZW50KCBcIlwiICk7XG5cblx0XHRcdC8vIFNldCB0aGUgYmFzZSBocmVmIGZvciB0aGUgY3JlYXRlZCBkb2N1bWVudFxuXHRcdFx0Ly8gc28gYW55IHBhcnNlZCBlbGVtZW50cyB3aXRoIFVSTHNcblx0XHRcdC8vIGFyZSBiYXNlZCBvbiB0aGUgZG9jdW1lbnQncyBVUkwgKGdoLTI5NjUpXG5cdFx0XHRiYXNlID0gY29udGV4dC5jcmVhdGVFbGVtZW50KCBcImJhc2VcIiApO1xuXHRcdFx0YmFzZS5ocmVmID0gZG9jdW1lbnQubG9jYXRpb24uaHJlZjtcblx0XHRcdGNvbnRleHQuaGVhZC5hcHBlbmRDaGlsZCggYmFzZSApO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRjb250ZXh0ID0gZG9jdW1lbnQ7XG5cdFx0fVxuXHR9XG5cblx0cGFyc2VkID0gcnNpbmdsZVRhZy5leGVjKCBkYXRhICk7XG5cdHNjcmlwdHMgPSAha2VlcFNjcmlwdHMgJiYgW107XG5cblx0Ly8gU2luZ2xlIHRhZ1xuXHRpZiAoIHBhcnNlZCApIHtcblx0XHRyZXR1cm4gWyBjb250ZXh0LmNyZWF0ZUVsZW1lbnQoIHBhcnNlZFsgMSBdICkgXTtcblx0fVxuXG5cdHBhcnNlZCA9IGJ1aWxkRnJhZ21lbnQoIFsgZGF0YSBdLCBjb250ZXh0LCBzY3JpcHRzICk7XG5cblx0aWYgKCBzY3JpcHRzICYmIHNjcmlwdHMubGVuZ3RoICkge1xuXHRcdGpRdWVyeSggc2NyaXB0cyApLnJlbW92ZSgpO1xuXHR9XG5cblx0cmV0dXJuIGpRdWVyeS5tZXJnZSggW10sIHBhcnNlZC5jaGlsZE5vZGVzICk7XG59O1xuXG5cbi8qKlxuICogTG9hZCBhIHVybCBpbnRvIGEgcGFnZVxuICovXG5qUXVlcnkuZm4ubG9hZCA9IGZ1bmN0aW9uKCB1cmwsIHBhcmFtcywgY2FsbGJhY2sgKSB7XG5cdHZhciBzZWxlY3RvciwgdHlwZSwgcmVzcG9uc2UsXG5cdFx0c2VsZiA9IHRoaXMsXG5cdFx0b2ZmID0gdXJsLmluZGV4T2YoIFwiIFwiICk7XG5cblx0aWYgKCBvZmYgPiAtMSApIHtcblx0XHRzZWxlY3RvciA9IHN0cmlwQW5kQ29sbGFwc2UoIHVybC5zbGljZSggb2ZmICkgKTtcblx0XHR1cmwgPSB1cmwuc2xpY2UoIDAsIG9mZiApO1xuXHR9XG5cblx0Ly8gSWYgaXQncyBhIGZ1bmN0aW9uXG5cdGlmICggaXNGdW5jdGlvbiggcGFyYW1zICkgKSB7XG5cblx0XHQvLyBXZSBhc3N1bWUgdGhhdCBpdCdzIHRoZSBjYWxsYmFja1xuXHRcdGNhbGxiYWNrID0gcGFyYW1zO1xuXHRcdHBhcmFtcyA9IHVuZGVmaW5lZDtcblxuXHQvLyBPdGhlcndpc2UsIGJ1aWxkIGEgcGFyYW0gc3RyaW5nXG5cdH0gZWxzZSBpZiAoIHBhcmFtcyAmJiB0eXBlb2YgcGFyYW1zID09PSBcIm9iamVjdFwiICkge1xuXHRcdHR5cGUgPSBcIlBPU1RcIjtcblx0fVxuXG5cdC8vIElmIHdlIGhhdmUgZWxlbWVudHMgdG8gbW9kaWZ5LCBtYWtlIHRoZSByZXF1ZXN0XG5cdGlmICggc2VsZi5sZW5ndGggPiAwICkge1xuXHRcdGpRdWVyeS5hamF4KCB7XG5cdFx0XHR1cmw6IHVybCxcblxuXHRcdFx0Ly8gSWYgXCJ0eXBlXCIgdmFyaWFibGUgaXMgdW5kZWZpbmVkLCB0aGVuIFwiR0VUXCIgbWV0aG9kIHdpbGwgYmUgdXNlZC5cblx0XHRcdC8vIE1ha2UgdmFsdWUgb2YgdGhpcyBmaWVsZCBleHBsaWNpdCBzaW5jZVxuXHRcdFx0Ly8gdXNlciBjYW4gb3ZlcnJpZGUgaXQgdGhyb3VnaCBhamF4U2V0dXAgbWV0aG9kXG5cdFx0XHR0eXBlOiB0eXBlIHx8IFwiR0VUXCIsXG5cdFx0XHRkYXRhVHlwZTogXCJodG1sXCIsXG5cdFx0XHRkYXRhOiBwYXJhbXNcblx0XHR9ICkuZG9uZSggZnVuY3Rpb24oIHJlc3BvbnNlVGV4dCApIHtcblxuXHRcdFx0Ly8gU2F2ZSByZXNwb25zZSBmb3IgdXNlIGluIGNvbXBsZXRlIGNhbGxiYWNrXG5cdFx0XHRyZXNwb25zZSA9IGFyZ3VtZW50cztcblxuXHRcdFx0c2VsZi5odG1sKCBzZWxlY3RvciA/XG5cblx0XHRcdFx0Ly8gSWYgYSBzZWxlY3RvciB3YXMgc3BlY2lmaWVkLCBsb2NhdGUgdGhlIHJpZ2h0IGVsZW1lbnRzIGluIGEgZHVtbXkgZGl2XG5cdFx0XHRcdC8vIEV4Y2x1ZGUgc2NyaXB0cyB0byBhdm9pZCBJRSAnUGVybWlzc2lvbiBEZW5pZWQnIGVycm9yc1xuXHRcdFx0XHRqUXVlcnkoIFwiPGRpdj5cIiApLmFwcGVuZCggalF1ZXJ5LnBhcnNlSFRNTCggcmVzcG9uc2VUZXh0ICkgKS5maW5kKCBzZWxlY3RvciApIDpcblxuXHRcdFx0XHQvLyBPdGhlcndpc2UgdXNlIHRoZSBmdWxsIHJlc3VsdFxuXHRcdFx0XHRyZXNwb25zZVRleHQgKTtcblxuXHRcdC8vIElmIHRoZSByZXF1ZXN0IHN1Y2NlZWRzLCB0aGlzIGZ1bmN0aW9uIGdldHMgXCJkYXRhXCIsIFwic3RhdHVzXCIsIFwianFYSFJcIlxuXHRcdC8vIGJ1dCB0aGV5IGFyZSBpZ25vcmVkIGJlY2F1c2UgcmVzcG9uc2Ugd2FzIHNldCBhYm92ZS5cblx0XHQvLyBJZiBpdCBmYWlscywgdGhpcyBmdW5jdGlvbiBnZXRzIFwianFYSFJcIiwgXCJzdGF0dXNcIiwgXCJlcnJvclwiXG5cdFx0fSApLmFsd2F5cyggY2FsbGJhY2sgJiYgZnVuY3Rpb24oIGpxWEhSLCBzdGF0dXMgKSB7XG5cdFx0XHRzZWxmLmVhY2goIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRjYWxsYmFjay5hcHBseSggdGhpcywgcmVzcG9uc2UgfHwgWyBqcVhIUi5yZXNwb25zZVRleHQsIHN0YXR1cywganFYSFIgXSApO1xuXHRcdFx0fSApO1xuXHRcdH0gKTtcblx0fVxuXG5cdHJldHVybiB0aGlzO1xufTtcblxuXG5cblxuLy8gQXR0YWNoIGEgYnVuY2ggb2YgZnVuY3Rpb25zIGZvciBoYW5kbGluZyBjb21tb24gQUpBWCBldmVudHNcbmpRdWVyeS5lYWNoKCBbXG5cdFwiYWpheFN0YXJ0XCIsXG5cdFwiYWpheFN0b3BcIixcblx0XCJhamF4Q29tcGxldGVcIixcblx0XCJhamF4RXJyb3JcIixcblx0XCJhamF4U3VjY2Vzc1wiLFxuXHRcImFqYXhTZW5kXCJcbl0sIGZ1bmN0aW9uKCBpLCB0eXBlICkge1xuXHRqUXVlcnkuZm5bIHR5cGUgXSA9IGZ1bmN0aW9uKCBmbiApIHtcblx0XHRyZXR1cm4gdGhpcy5vbiggdHlwZSwgZm4gKTtcblx0fTtcbn0gKTtcblxuXG5cblxualF1ZXJ5LmV4cHIucHNldWRvcy5hbmltYXRlZCA9IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRyZXR1cm4galF1ZXJ5LmdyZXAoIGpRdWVyeS50aW1lcnMsIGZ1bmN0aW9uKCBmbiApIHtcblx0XHRyZXR1cm4gZWxlbSA9PT0gZm4uZWxlbTtcblx0fSApLmxlbmd0aDtcbn07XG5cblxuXG5cbmpRdWVyeS5vZmZzZXQgPSB7XG5cdHNldE9mZnNldDogZnVuY3Rpb24oIGVsZW0sIG9wdGlvbnMsIGkgKSB7XG5cdFx0dmFyIGN1clBvc2l0aW9uLCBjdXJMZWZ0LCBjdXJDU1NUb3AsIGN1clRvcCwgY3VyT2Zmc2V0LCBjdXJDU1NMZWZ0LCBjYWxjdWxhdGVQb3NpdGlvbixcblx0XHRcdHBvc2l0aW9uID0galF1ZXJ5LmNzcyggZWxlbSwgXCJwb3NpdGlvblwiICksXG5cdFx0XHRjdXJFbGVtID0galF1ZXJ5KCBlbGVtICksXG5cdFx0XHRwcm9wcyA9IHt9O1xuXG5cdFx0Ly8gU2V0IHBvc2l0aW9uIGZpcnN0LCBpbi1jYXNlIHRvcC9sZWZ0IGFyZSBzZXQgZXZlbiBvbiBzdGF0aWMgZWxlbVxuXHRcdGlmICggcG9zaXRpb24gPT09IFwic3RhdGljXCIgKSB7XG5cdFx0XHRlbGVtLnN0eWxlLnBvc2l0aW9uID0gXCJyZWxhdGl2ZVwiO1xuXHRcdH1cblxuXHRcdGN1ck9mZnNldCA9IGN1ckVsZW0ub2Zmc2V0KCk7XG5cdFx0Y3VyQ1NTVG9wID0galF1ZXJ5LmNzcyggZWxlbSwgXCJ0b3BcIiApO1xuXHRcdGN1ckNTU0xlZnQgPSBqUXVlcnkuY3NzKCBlbGVtLCBcImxlZnRcIiApO1xuXHRcdGNhbGN1bGF0ZVBvc2l0aW9uID0gKCBwb3NpdGlvbiA9PT0gXCJhYnNvbHV0ZVwiIHx8IHBvc2l0aW9uID09PSBcImZpeGVkXCIgKSAmJlxuXHRcdFx0KCBjdXJDU1NUb3AgKyBjdXJDU1NMZWZ0ICkuaW5kZXhPZiggXCJhdXRvXCIgKSA+IC0xO1xuXG5cdFx0Ly8gTmVlZCB0byBiZSBhYmxlIHRvIGNhbGN1bGF0ZSBwb3NpdGlvbiBpZiBlaXRoZXJcblx0XHQvLyB0b3Agb3IgbGVmdCBpcyBhdXRvIGFuZCBwb3NpdGlvbiBpcyBlaXRoZXIgYWJzb2x1dGUgb3IgZml4ZWRcblx0XHRpZiAoIGNhbGN1bGF0ZVBvc2l0aW9uICkge1xuXHRcdFx0Y3VyUG9zaXRpb24gPSBjdXJFbGVtLnBvc2l0aW9uKCk7XG5cdFx0XHRjdXJUb3AgPSBjdXJQb3NpdGlvbi50b3A7XG5cdFx0XHRjdXJMZWZ0ID0gY3VyUG9zaXRpb24ubGVmdDtcblxuXHRcdH0gZWxzZSB7XG5cdFx0XHRjdXJUb3AgPSBwYXJzZUZsb2F0KCBjdXJDU1NUb3AgKSB8fCAwO1xuXHRcdFx0Y3VyTGVmdCA9IHBhcnNlRmxvYXQoIGN1ckNTU0xlZnQgKSB8fCAwO1xuXHRcdH1cblxuXHRcdGlmICggaXNGdW5jdGlvbiggb3B0aW9ucyApICkge1xuXG5cdFx0XHQvLyBVc2UgalF1ZXJ5LmV4dGVuZCBoZXJlIHRvIGFsbG93IG1vZGlmaWNhdGlvbiBvZiBjb29yZGluYXRlcyBhcmd1bWVudCAoZ2gtMTg0OClcblx0XHRcdG9wdGlvbnMgPSBvcHRpb25zLmNhbGwoIGVsZW0sIGksIGpRdWVyeS5leHRlbmQoIHt9LCBjdXJPZmZzZXQgKSApO1xuXHRcdH1cblxuXHRcdGlmICggb3B0aW9ucy50b3AgIT0gbnVsbCApIHtcblx0XHRcdHByb3BzLnRvcCA9ICggb3B0aW9ucy50b3AgLSBjdXJPZmZzZXQudG9wICkgKyBjdXJUb3A7XG5cdFx0fVxuXHRcdGlmICggb3B0aW9ucy5sZWZ0ICE9IG51bGwgKSB7XG5cdFx0XHRwcm9wcy5sZWZ0ID0gKCBvcHRpb25zLmxlZnQgLSBjdXJPZmZzZXQubGVmdCApICsgY3VyTGVmdDtcblx0XHR9XG5cblx0XHRpZiAoIFwidXNpbmdcIiBpbiBvcHRpb25zICkge1xuXHRcdFx0b3B0aW9ucy51c2luZy5jYWxsKCBlbGVtLCBwcm9wcyApO1xuXG5cdFx0fSBlbHNlIHtcblx0XHRcdGN1ckVsZW0uY3NzKCBwcm9wcyApO1xuXHRcdH1cblx0fVxufTtcblxualF1ZXJ5LmZuLmV4dGVuZCgge1xuXG5cdC8vIG9mZnNldCgpIHJlbGF0ZXMgYW4gZWxlbWVudCdzIGJvcmRlciBib3ggdG8gdGhlIGRvY3VtZW50IG9yaWdpblxuXHRvZmZzZXQ6IGZ1bmN0aW9uKCBvcHRpb25zICkge1xuXG5cdFx0Ly8gUHJlc2VydmUgY2hhaW5pbmcgZm9yIHNldHRlclxuXHRcdGlmICggYXJndW1lbnRzLmxlbmd0aCApIHtcblx0XHRcdHJldHVybiBvcHRpb25zID09PSB1bmRlZmluZWQgP1xuXHRcdFx0XHR0aGlzIDpcblx0XHRcdFx0dGhpcy5lYWNoKCBmdW5jdGlvbiggaSApIHtcblx0XHRcdFx0XHRqUXVlcnkub2Zmc2V0LnNldE9mZnNldCggdGhpcywgb3B0aW9ucywgaSApO1xuXHRcdFx0XHR9ICk7XG5cdFx0fVxuXG5cdFx0dmFyIHJlY3QsIHdpbixcblx0XHRcdGVsZW0gPSB0aGlzWyAwIF07XG5cblx0XHRpZiAoICFlbGVtICkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdC8vIFJldHVybiB6ZXJvcyBmb3IgZGlzY29ubmVjdGVkIGFuZCBoaWRkZW4gKGRpc3BsYXk6IG5vbmUpIGVsZW1lbnRzIChnaC0yMzEwKVxuXHRcdC8vIFN1cHBvcnQ6IElFIDw9MTEgb25seVxuXHRcdC8vIFJ1bm5pbmcgZ2V0Qm91bmRpbmdDbGllbnRSZWN0IG9uIGFcblx0XHQvLyBkaXNjb25uZWN0ZWQgbm9kZSBpbiBJRSB0aHJvd3MgYW4gZXJyb3Jcblx0XHRpZiAoICFlbGVtLmdldENsaWVudFJlY3RzKCkubGVuZ3RoICkge1xuXHRcdFx0cmV0dXJuIHsgdG9wOiAwLCBsZWZ0OiAwIH07XG5cdFx0fVxuXG5cdFx0Ly8gR2V0IGRvY3VtZW50LXJlbGF0aXZlIHBvc2l0aW9uIGJ5IGFkZGluZyB2aWV3cG9ydCBzY3JvbGwgdG8gdmlld3BvcnQtcmVsYXRpdmUgZ0JDUlxuXHRcdHJlY3QgPSBlbGVtLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuXHRcdHdpbiA9IGVsZW0ub3duZXJEb2N1bWVudC5kZWZhdWx0Vmlldztcblx0XHRyZXR1cm4ge1xuXHRcdFx0dG9wOiByZWN0LnRvcCArIHdpbi5wYWdlWU9mZnNldCxcblx0XHRcdGxlZnQ6IHJlY3QubGVmdCArIHdpbi5wYWdlWE9mZnNldFxuXHRcdH07XG5cdH0sXG5cblx0Ly8gcG9zaXRpb24oKSByZWxhdGVzIGFuIGVsZW1lbnQncyBtYXJnaW4gYm94IHRvIGl0cyBvZmZzZXQgcGFyZW50J3MgcGFkZGluZyBib3hcblx0Ly8gVGhpcyBjb3JyZXNwb25kcyB0byB0aGUgYmVoYXZpb3Igb2YgQ1NTIGFic29sdXRlIHBvc2l0aW9uaW5nXG5cdHBvc2l0aW9uOiBmdW5jdGlvbigpIHtcblx0XHRpZiAoICF0aGlzWyAwIF0gKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0dmFyIG9mZnNldFBhcmVudCwgb2Zmc2V0LCBkb2MsXG5cdFx0XHRlbGVtID0gdGhpc1sgMCBdLFxuXHRcdFx0cGFyZW50T2Zmc2V0ID0geyB0b3A6IDAsIGxlZnQ6IDAgfTtcblxuXHRcdC8vIHBvc2l0aW9uOmZpeGVkIGVsZW1lbnRzIGFyZSBvZmZzZXQgZnJvbSB0aGUgdmlld3BvcnQsIHdoaWNoIGl0c2VsZiBhbHdheXMgaGFzIHplcm8gb2Zmc2V0XG5cdFx0aWYgKCBqUXVlcnkuY3NzKCBlbGVtLCBcInBvc2l0aW9uXCIgKSA9PT0gXCJmaXhlZFwiICkge1xuXG5cdFx0XHQvLyBBc3N1bWUgcG9zaXRpb246Zml4ZWQgaW1wbGllcyBhdmFpbGFiaWxpdHkgb2YgZ2V0Qm91bmRpbmdDbGllbnRSZWN0XG5cdFx0XHRvZmZzZXQgPSBlbGVtLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuXG5cdFx0fSBlbHNlIHtcblx0XHRcdG9mZnNldCA9IHRoaXMub2Zmc2V0KCk7XG5cblx0XHRcdC8vIEFjY291bnQgZm9yIHRoZSAqcmVhbCogb2Zmc2V0IHBhcmVudCwgd2hpY2ggY2FuIGJlIHRoZSBkb2N1bWVudCBvciBpdHMgcm9vdCBlbGVtZW50XG5cdFx0XHQvLyB3aGVuIGEgc3RhdGljYWxseSBwb3NpdGlvbmVkIGVsZW1lbnQgaXMgaWRlbnRpZmllZFxuXHRcdFx0ZG9jID0gZWxlbS5vd25lckRvY3VtZW50O1xuXHRcdFx0b2Zmc2V0UGFyZW50ID0gZWxlbS5vZmZzZXRQYXJlbnQgfHwgZG9jLmRvY3VtZW50RWxlbWVudDtcblx0XHRcdHdoaWxlICggb2Zmc2V0UGFyZW50ICYmXG5cdFx0XHRcdCggb2Zmc2V0UGFyZW50ID09PSBkb2MuYm9keSB8fCBvZmZzZXRQYXJlbnQgPT09IGRvYy5kb2N1bWVudEVsZW1lbnQgKSAmJlxuXHRcdFx0XHRqUXVlcnkuY3NzKCBvZmZzZXRQYXJlbnQsIFwicG9zaXRpb25cIiApID09PSBcInN0YXRpY1wiICkge1xuXG5cdFx0XHRcdG9mZnNldFBhcmVudCA9IG9mZnNldFBhcmVudC5wYXJlbnROb2RlO1xuXHRcdFx0fVxuXHRcdFx0aWYgKCBvZmZzZXRQYXJlbnQgJiYgb2Zmc2V0UGFyZW50ICE9PSBlbGVtICYmIG9mZnNldFBhcmVudC5ub2RlVHlwZSA9PT0gMSApIHtcblxuXHRcdFx0XHQvLyBJbmNvcnBvcmF0ZSBib3JkZXJzIGludG8gaXRzIG9mZnNldCwgc2luY2UgdGhleSBhcmUgb3V0c2lkZSBpdHMgY29udGVudCBvcmlnaW5cblx0XHRcdFx0cGFyZW50T2Zmc2V0ID0galF1ZXJ5KCBvZmZzZXRQYXJlbnQgKS5vZmZzZXQoKTtcblx0XHRcdFx0cGFyZW50T2Zmc2V0LnRvcCArPSBqUXVlcnkuY3NzKCBvZmZzZXRQYXJlbnQsIFwiYm9yZGVyVG9wV2lkdGhcIiwgdHJ1ZSApO1xuXHRcdFx0XHRwYXJlbnRPZmZzZXQubGVmdCArPSBqUXVlcnkuY3NzKCBvZmZzZXRQYXJlbnQsIFwiYm9yZGVyTGVmdFdpZHRoXCIsIHRydWUgKTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHQvLyBTdWJ0cmFjdCBwYXJlbnQgb2Zmc2V0cyBhbmQgZWxlbWVudCBtYXJnaW5zXG5cdFx0cmV0dXJuIHtcblx0XHRcdHRvcDogb2Zmc2V0LnRvcCAtIHBhcmVudE9mZnNldC50b3AgLSBqUXVlcnkuY3NzKCBlbGVtLCBcIm1hcmdpblRvcFwiLCB0cnVlICksXG5cdFx0XHRsZWZ0OiBvZmZzZXQubGVmdCAtIHBhcmVudE9mZnNldC5sZWZ0IC0galF1ZXJ5LmNzcyggZWxlbSwgXCJtYXJnaW5MZWZ0XCIsIHRydWUgKVxuXHRcdH07XG5cdH0sXG5cblx0Ly8gVGhpcyBtZXRob2Qgd2lsbCByZXR1cm4gZG9jdW1lbnRFbGVtZW50IGluIHRoZSBmb2xsb3dpbmcgY2FzZXM6XG5cdC8vIDEpIEZvciB0aGUgZWxlbWVudCBpbnNpZGUgdGhlIGlmcmFtZSB3aXRob3V0IG9mZnNldFBhcmVudCwgdGhpcyBtZXRob2Qgd2lsbCByZXR1cm5cblx0Ly8gICAgZG9jdW1lbnRFbGVtZW50IG9mIHRoZSBwYXJlbnQgd2luZG93XG5cdC8vIDIpIEZvciB0aGUgaGlkZGVuIG9yIGRldGFjaGVkIGVsZW1lbnRcblx0Ly8gMykgRm9yIGJvZHkgb3IgaHRtbCBlbGVtZW50LCBpLmUuIGluIGNhc2Ugb2YgdGhlIGh0bWwgbm9kZSAtIGl0IHdpbGwgcmV0dXJuIGl0c2VsZlxuXHQvL1xuXHQvLyBidXQgdGhvc2UgZXhjZXB0aW9ucyB3ZXJlIG5ldmVyIHByZXNlbnRlZCBhcyBhIHJlYWwgbGlmZSB1c2UtY2FzZXNcblx0Ly8gYW5kIG1pZ2h0IGJlIGNvbnNpZGVyZWQgYXMgbW9yZSBwcmVmZXJhYmxlIHJlc3VsdHMuXG5cdC8vXG5cdC8vIFRoaXMgbG9naWMsIGhvd2V2ZXIsIGlzIG5vdCBndWFyYW50ZWVkIGFuZCBjYW4gY2hhbmdlIGF0IGFueSBwb2ludCBpbiB0aGUgZnV0dXJlXG5cdG9mZnNldFBhcmVudDogZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIHRoaXMubWFwKCBmdW5jdGlvbigpIHtcblx0XHRcdHZhciBvZmZzZXRQYXJlbnQgPSB0aGlzLm9mZnNldFBhcmVudDtcblxuXHRcdFx0d2hpbGUgKCBvZmZzZXRQYXJlbnQgJiYgalF1ZXJ5LmNzcyggb2Zmc2V0UGFyZW50LCBcInBvc2l0aW9uXCIgKSA9PT0gXCJzdGF0aWNcIiApIHtcblx0XHRcdFx0b2Zmc2V0UGFyZW50ID0gb2Zmc2V0UGFyZW50Lm9mZnNldFBhcmVudDtcblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIG9mZnNldFBhcmVudCB8fCBkb2N1bWVudEVsZW1lbnQ7XG5cdFx0fSApO1xuXHR9XG59ICk7XG5cbi8vIENyZWF0ZSBzY3JvbGxMZWZ0IGFuZCBzY3JvbGxUb3AgbWV0aG9kc1xualF1ZXJ5LmVhY2goIHsgc2Nyb2xsTGVmdDogXCJwYWdlWE9mZnNldFwiLCBzY3JvbGxUb3A6IFwicGFnZVlPZmZzZXRcIiB9LCBmdW5jdGlvbiggbWV0aG9kLCBwcm9wICkge1xuXHR2YXIgdG9wID0gXCJwYWdlWU9mZnNldFwiID09PSBwcm9wO1xuXG5cdGpRdWVyeS5mblsgbWV0aG9kIF0gPSBmdW5jdGlvbiggdmFsICkge1xuXHRcdHJldHVybiBhY2Nlc3MoIHRoaXMsIGZ1bmN0aW9uKCBlbGVtLCBtZXRob2QsIHZhbCApIHtcblxuXHRcdFx0Ly8gQ29hbGVzY2UgZG9jdW1lbnRzIGFuZCB3aW5kb3dzXG5cdFx0XHR2YXIgd2luO1xuXHRcdFx0aWYgKCBpc1dpbmRvdyggZWxlbSApICkge1xuXHRcdFx0XHR3aW4gPSBlbGVtO1xuXHRcdFx0fSBlbHNlIGlmICggZWxlbS5ub2RlVHlwZSA9PT0gOSApIHtcblx0XHRcdFx0d2luID0gZWxlbS5kZWZhdWx0Vmlldztcblx0XHRcdH1cblxuXHRcdFx0aWYgKCB2YWwgPT09IHVuZGVmaW5lZCApIHtcblx0XHRcdFx0cmV0dXJuIHdpbiA/IHdpblsgcHJvcCBdIDogZWxlbVsgbWV0aG9kIF07XG5cdFx0XHR9XG5cblx0XHRcdGlmICggd2luICkge1xuXHRcdFx0XHR3aW4uc2Nyb2xsVG8oXG5cdFx0XHRcdFx0IXRvcCA/IHZhbCA6IHdpbi5wYWdlWE9mZnNldCxcblx0XHRcdFx0XHR0b3AgPyB2YWwgOiB3aW4ucGFnZVlPZmZzZXRcblx0XHRcdFx0KTtcblxuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0ZWxlbVsgbWV0aG9kIF0gPSB2YWw7XG5cdFx0XHR9XG5cdFx0fSwgbWV0aG9kLCB2YWwsIGFyZ3VtZW50cy5sZW5ndGggKTtcblx0fTtcbn0gKTtcblxuLy8gU3VwcG9ydDogU2FmYXJpIDw9NyAtIDkuMSwgQ2hyb21lIDw9MzcgLSA0OVxuLy8gQWRkIHRoZSB0b3AvbGVmdCBjc3NIb29rcyB1c2luZyBqUXVlcnkuZm4ucG9zaXRpb25cbi8vIFdlYmtpdCBidWc6IGh0dHBzOi8vYnVncy53ZWJraXQub3JnL3Nob3dfYnVnLmNnaT9pZD0yOTA4NFxuLy8gQmxpbmsgYnVnOiBodHRwczovL2J1Z3MuY2hyb21pdW0ub3JnL3AvY2hyb21pdW0vaXNzdWVzL2RldGFpbD9pZD01ODkzNDdcbi8vIGdldENvbXB1dGVkU3R5bGUgcmV0dXJucyBwZXJjZW50IHdoZW4gc3BlY2lmaWVkIGZvciB0b3AvbGVmdC9ib3R0b20vcmlnaHQ7XG4vLyByYXRoZXIgdGhhbiBtYWtlIHRoZSBjc3MgbW9kdWxlIGRlcGVuZCBvbiB0aGUgb2Zmc2V0IG1vZHVsZSwganVzdCBjaGVjayBmb3IgaXQgaGVyZVxualF1ZXJ5LmVhY2goIFsgXCJ0b3BcIiwgXCJsZWZ0XCIgXSwgZnVuY3Rpb24oIGksIHByb3AgKSB7XG5cdGpRdWVyeS5jc3NIb29rc1sgcHJvcCBdID0gYWRkR2V0SG9va0lmKCBzdXBwb3J0LnBpeGVsUG9zaXRpb24sXG5cdFx0ZnVuY3Rpb24oIGVsZW0sIGNvbXB1dGVkICkge1xuXHRcdFx0aWYgKCBjb21wdXRlZCApIHtcblx0XHRcdFx0Y29tcHV0ZWQgPSBjdXJDU1MoIGVsZW0sIHByb3AgKTtcblxuXHRcdFx0XHQvLyBJZiBjdXJDU1MgcmV0dXJucyBwZXJjZW50YWdlLCBmYWxsYmFjayB0byBvZmZzZXRcblx0XHRcdFx0cmV0dXJuIHJudW1ub25weC50ZXN0KCBjb21wdXRlZCApID9cblx0XHRcdFx0XHRqUXVlcnkoIGVsZW0gKS5wb3NpdGlvbigpWyBwcm9wIF0gKyBcInB4XCIgOlxuXHRcdFx0XHRcdGNvbXB1dGVkO1xuXHRcdFx0fVxuXHRcdH1cblx0KTtcbn0gKTtcblxuXG4vLyBDcmVhdGUgaW5uZXJIZWlnaHQsIGlubmVyV2lkdGgsIGhlaWdodCwgd2lkdGgsIG91dGVySGVpZ2h0IGFuZCBvdXRlcldpZHRoIG1ldGhvZHNcbmpRdWVyeS5lYWNoKCB7IEhlaWdodDogXCJoZWlnaHRcIiwgV2lkdGg6IFwid2lkdGhcIiB9LCBmdW5jdGlvbiggbmFtZSwgdHlwZSApIHtcblx0alF1ZXJ5LmVhY2goIHsgcGFkZGluZzogXCJpbm5lclwiICsgbmFtZSwgY29udGVudDogdHlwZSwgXCJcIjogXCJvdXRlclwiICsgbmFtZSB9LFxuXHRcdGZ1bmN0aW9uKCBkZWZhdWx0RXh0cmEsIGZ1bmNOYW1lICkge1xuXG5cdFx0Ly8gTWFyZ2luIGlzIG9ubHkgZm9yIG91dGVySGVpZ2h0LCBvdXRlcldpZHRoXG5cdFx0alF1ZXJ5LmZuWyBmdW5jTmFtZSBdID0gZnVuY3Rpb24oIG1hcmdpbiwgdmFsdWUgKSB7XG5cdFx0XHR2YXIgY2hhaW5hYmxlID0gYXJndW1lbnRzLmxlbmd0aCAmJiAoIGRlZmF1bHRFeHRyYSB8fCB0eXBlb2YgbWFyZ2luICE9PSBcImJvb2xlYW5cIiApLFxuXHRcdFx0XHRleHRyYSA9IGRlZmF1bHRFeHRyYSB8fCAoIG1hcmdpbiA9PT0gdHJ1ZSB8fCB2YWx1ZSA9PT0gdHJ1ZSA/IFwibWFyZ2luXCIgOiBcImJvcmRlclwiICk7XG5cblx0XHRcdHJldHVybiBhY2Nlc3MoIHRoaXMsIGZ1bmN0aW9uKCBlbGVtLCB0eXBlLCB2YWx1ZSApIHtcblx0XHRcdFx0dmFyIGRvYztcblxuXHRcdFx0XHRpZiAoIGlzV2luZG93KCBlbGVtICkgKSB7XG5cblx0XHRcdFx0XHQvLyAkKCB3aW5kb3cgKS5vdXRlcldpZHRoL0hlaWdodCByZXR1cm4gdy9oIGluY2x1ZGluZyBzY3JvbGxiYXJzIChnaC0xNzI5KVxuXHRcdFx0XHRcdHJldHVybiBmdW5jTmFtZS5pbmRleE9mKCBcIm91dGVyXCIgKSA9PT0gMCA/XG5cdFx0XHRcdFx0XHRlbGVtWyBcImlubmVyXCIgKyBuYW1lIF0gOlxuXHRcdFx0XHRcdFx0ZWxlbS5kb2N1bWVudC5kb2N1bWVudEVsZW1lbnRbIFwiY2xpZW50XCIgKyBuYW1lIF07XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBHZXQgZG9jdW1lbnQgd2lkdGggb3IgaGVpZ2h0XG5cdFx0XHRcdGlmICggZWxlbS5ub2RlVHlwZSA9PT0gOSApIHtcblx0XHRcdFx0XHRkb2MgPSBlbGVtLmRvY3VtZW50RWxlbWVudDtcblxuXHRcdFx0XHRcdC8vIEVpdGhlciBzY3JvbGxbV2lkdGgvSGVpZ2h0XSBvciBvZmZzZXRbV2lkdGgvSGVpZ2h0XSBvciBjbGllbnRbV2lkdGgvSGVpZ2h0XSxcblx0XHRcdFx0XHQvLyB3aGljaGV2ZXIgaXMgZ3JlYXRlc3Rcblx0XHRcdFx0XHRyZXR1cm4gTWF0aC5tYXgoXG5cdFx0XHRcdFx0XHRlbGVtLmJvZHlbIFwic2Nyb2xsXCIgKyBuYW1lIF0sIGRvY1sgXCJzY3JvbGxcIiArIG5hbWUgXSxcblx0XHRcdFx0XHRcdGVsZW0uYm9keVsgXCJvZmZzZXRcIiArIG5hbWUgXSwgZG9jWyBcIm9mZnNldFwiICsgbmFtZSBdLFxuXHRcdFx0XHRcdFx0ZG9jWyBcImNsaWVudFwiICsgbmFtZSBdXG5cdFx0XHRcdFx0KTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdHJldHVybiB2YWx1ZSA9PT0gdW5kZWZpbmVkID9cblxuXHRcdFx0XHRcdC8vIEdldCB3aWR0aCBvciBoZWlnaHQgb24gdGhlIGVsZW1lbnQsIHJlcXVlc3RpbmcgYnV0IG5vdCBmb3JjaW5nIHBhcnNlRmxvYXRcblx0XHRcdFx0XHRqUXVlcnkuY3NzKCBlbGVtLCB0eXBlLCBleHRyYSApIDpcblxuXHRcdFx0XHRcdC8vIFNldCB3aWR0aCBvciBoZWlnaHQgb24gdGhlIGVsZW1lbnRcblx0XHRcdFx0XHRqUXVlcnkuc3R5bGUoIGVsZW0sIHR5cGUsIHZhbHVlLCBleHRyYSApO1xuXHRcdFx0fSwgdHlwZSwgY2hhaW5hYmxlID8gbWFyZ2luIDogdW5kZWZpbmVkLCBjaGFpbmFibGUgKTtcblx0XHR9O1xuXHR9ICk7XG59ICk7XG5cblxualF1ZXJ5LmVhY2goICggXCJibHVyIGZvY3VzIGZvY3VzaW4gZm9jdXNvdXQgcmVzaXplIHNjcm9sbCBjbGljayBkYmxjbGljayBcIiArXG5cdFwibW91c2Vkb3duIG1vdXNldXAgbW91c2Vtb3ZlIG1vdXNlb3ZlciBtb3VzZW91dCBtb3VzZWVudGVyIG1vdXNlbGVhdmUgXCIgK1xuXHRcImNoYW5nZSBzZWxlY3Qgc3VibWl0IGtleWRvd24ga2V5cHJlc3Mga2V5dXAgY29udGV4dG1lbnVcIiApLnNwbGl0KCBcIiBcIiApLFxuXHRmdW5jdGlvbiggaSwgbmFtZSApIHtcblxuXHQvLyBIYW5kbGUgZXZlbnQgYmluZGluZ1xuXHRqUXVlcnkuZm5bIG5hbWUgXSA9IGZ1bmN0aW9uKCBkYXRhLCBmbiApIHtcblx0XHRyZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA+IDAgP1xuXHRcdFx0dGhpcy5vbiggbmFtZSwgbnVsbCwgZGF0YSwgZm4gKSA6XG5cdFx0XHR0aGlzLnRyaWdnZXIoIG5hbWUgKTtcblx0fTtcbn0gKTtcblxualF1ZXJ5LmZuLmV4dGVuZCgge1xuXHRob3ZlcjogZnVuY3Rpb24oIGZuT3ZlciwgZm5PdXQgKSB7XG5cdFx0cmV0dXJuIHRoaXMubW91c2VlbnRlciggZm5PdmVyICkubW91c2VsZWF2ZSggZm5PdXQgfHwgZm5PdmVyICk7XG5cdH1cbn0gKTtcblxuXG5cblxualF1ZXJ5LmZuLmV4dGVuZCgge1xuXG5cdGJpbmQ6IGZ1bmN0aW9uKCB0eXBlcywgZGF0YSwgZm4gKSB7XG5cdFx0cmV0dXJuIHRoaXMub24oIHR5cGVzLCBudWxsLCBkYXRhLCBmbiApO1xuXHR9LFxuXHR1bmJpbmQ6IGZ1bmN0aW9uKCB0eXBlcywgZm4gKSB7XG5cdFx0cmV0dXJuIHRoaXMub2ZmKCB0eXBlcywgbnVsbCwgZm4gKTtcblx0fSxcblxuXHRkZWxlZ2F0ZTogZnVuY3Rpb24oIHNlbGVjdG9yLCB0eXBlcywgZGF0YSwgZm4gKSB7XG5cdFx0cmV0dXJuIHRoaXMub24oIHR5cGVzLCBzZWxlY3RvciwgZGF0YSwgZm4gKTtcblx0fSxcblx0dW5kZWxlZ2F0ZTogZnVuY3Rpb24oIHNlbGVjdG9yLCB0eXBlcywgZm4gKSB7XG5cblx0XHQvLyAoIG5hbWVzcGFjZSApIG9yICggc2VsZWN0b3IsIHR5cGVzIFssIGZuXSApXG5cdFx0cmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPT09IDEgP1xuXHRcdFx0dGhpcy5vZmYoIHNlbGVjdG9yLCBcIioqXCIgKSA6XG5cdFx0XHR0aGlzLm9mZiggdHlwZXMsIHNlbGVjdG9yIHx8IFwiKipcIiwgZm4gKTtcblx0fVxufSApO1xuXG4vLyBCaW5kIGEgZnVuY3Rpb24gdG8gYSBjb250ZXh0LCBvcHRpb25hbGx5IHBhcnRpYWxseSBhcHBseWluZyBhbnlcbi8vIGFyZ3VtZW50cy5cbi8vIGpRdWVyeS5wcm94eSBpcyBkZXByZWNhdGVkIHRvIHByb21vdGUgc3RhbmRhcmRzIChzcGVjaWZpY2FsbHkgRnVuY3Rpb24jYmluZClcbi8vIEhvd2V2ZXIsIGl0IGlzIG5vdCBzbGF0ZWQgZm9yIHJlbW92YWwgYW55IHRpbWUgc29vblxualF1ZXJ5LnByb3h5ID0gZnVuY3Rpb24oIGZuLCBjb250ZXh0ICkge1xuXHR2YXIgdG1wLCBhcmdzLCBwcm94eTtcblxuXHRpZiAoIHR5cGVvZiBjb250ZXh0ID09PSBcInN0cmluZ1wiICkge1xuXHRcdHRtcCA9IGZuWyBjb250ZXh0IF07XG5cdFx0Y29udGV4dCA9IGZuO1xuXHRcdGZuID0gdG1wO1xuXHR9XG5cblx0Ly8gUXVpY2sgY2hlY2sgdG8gZGV0ZXJtaW5lIGlmIHRhcmdldCBpcyBjYWxsYWJsZSwgaW4gdGhlIHNwZWNcblx0Ly8gdGhpcyB0aHJvd3MgYSBUeXBlRXJyb3IsIGJ1dCB3ZSB3aWxsIGp1c3QgcmV0dXJuIHVuZGVmaW5lZC5cblx0aWYgKCAhaXNGdW5jdGlvbiggZm4gKSApIHtcblx0XHRyZXR1cm4gdW5kZWZpbmVkO1xuXHR9XG5cblx0Ly8gU2ltdWxhdGVkIGJpbmRcblx0YXJncyA9IHNsaWNlLmNhbGwoIGFyZ3VtZW50cywgMiApO1xuXHRwcm94eSA9IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiBmbi5hcHBseSggY29udGV4dCB8fCB0aGlzLCBhcmdzLmNvbmNhdCggc2xpY2UuY2FsbCggYXJndW1lbnRzICkgKSApO1xuXHR9O1xuXG5cdC8vIFNldCB0aGUgZ3VpZCBvZiB1bmlxdWUgaGFuZGxlciB0byB0aGUgc2FtZSBvZiBvcmlnaW5hbCBoYW5kbGVyLCBzbyBpdCBjYW4gYmUgcmVtb3ZlZFxuXHRwcm94eS5ndWlkID0gZm4uZ3VpZCA9IGZuLmd1aWQgfHwgalF1ZXJ5Lmd1aWQrKztcblxuXHRyZXR1cm4gcHJveHk7XG59O1xuXG5qUXVlcnkuaG9sZFJlYWR5ID0gZnVuY3Rpb24oIGhvbGQgKSB7XG5cdGlmICggaG9sZCApIHtcblx0XHRqUXVlcnkucmVhZHlXYWl0Kys7XG5cdH0gZWxzZSB7XG5cdFx0alF1ZXJ5LnJlYWR5KCB0cnVlICk7XG5cdH1cbn07XG5qUXVlcnkuaXNBcnJheSA9IEFycmF5LmlzQXJyYXk7XG5qUXVlcnkucGFyc2VKU09OID0gSlNPTi5wYXJzZTtcbmpRdWVyeS5ub2RlTmFtZSA9IG5vZGVOYW1lO1xualF1ZXJ5LmlzRnVuY3Rpb24gPSBpc0Z1bmN0aW9uO1xualF1ZXJ5LmlzV2luZG93ID0gaXNXaW5kb3c7XG5qUXVlcnkuY2FtZWxDYXNlID0gY2FtZWxDYXNlO1xualF1ZXJ5LnR5cGUgPSB0b1R5cGU7XG5cbmpRdWVyeS5ub3cgPSBEYXRlLm5vdztcblxualF1ZXJ5LmlzTnVtZXJpYyA9IGZ1bmN0aW9uKCBvYmogKSB7XG5cblx0Ly8gQXMgb2YgalF1ZXJ5IDMuMCwgaXNOdW1lcmljIGlzIGxpbWl0ZWQgdG9cblx0Ly8gc3RyaW5ncyBhbmQgbnVtYmVycyAocHJpbWl0aXZlcyBvciBvYmplY3RzKVxuXHQvLyB0aGF0IGNhbiBiZSBjb2VyY2VkIHRvIGZpbml0ZSBudW1iZXJzIChnaC0yNjYyKVxuXHR2YXIgdHlwZSA9IGpRdWVyeS50eXBlKCBvYmogKTtcblx0cmV0dXJuICggdHlwZSA9PT0gXCJudW1iZXJcIiB8fCB0eXBlID09PSBcInN0cmluZ1wiICkgJiZcblxuXHRcdC8vIHBhcnNlRmxvYXQgTmFOcyBudW1lcmljLWNhc3QgZmFsc2UgcG9zaXRpdmVzIChcIlwiKVxuXHRcdC8vIC4uLmJ1dCBtaXNpbnRlcnByZXRzIGxlYWRpbmctbnVtYmVyIHN0cmluZ3MsIHBhcnRpY3VsYXJseSBoZXggbGl0ZXJhbHMgKFwiMHguLi5cIilcblx0XHQvLyBzdWJ0cmFjdGlvbiBmb3JjZXMgaW5maW5pdGllcyB0byBOYU5cblx0XHQhaXNOYU4oIG9iaiAtIHBhcnNlRmxvYXQoIG9iaiApICk7XG59O1xuXG5cblxuXG4vLyBSZWdpc3RlciBhcyBhIG5hbWVkIEFNRCBtb2R1bGUsIHNpbmNlIGpRdWVyeSBjYW4gYmUgY29uY2F0ZW5hdGVkIHdpdGggb3RoZXJcbi8vIGZpbGVzIHRoYXQgbWF5IHVzZSBkZWZpbmUsIGJ1dCBub3QgdmlhIGEgcHJvcGVyIGNvbmNhdGVuYXRpb24gc2NyaXB0IHRoYXRcbi8vIHVuZGVyc3RhbmRzIGFub255bW91cyBBTUQgbW9kdWxlcy4gQSBuYW1lZCBBTUQgaXMgc2FmZXN0IGFuZCBtb3N0IHJvYnVzdFxuLy8gd2F5IHRvIHJlZ2lzdGVyLiBMb3dlcmNhc2UganF1ZXJ5IGlzIHVzZWQgYmVjYXVzZSBBTUQgbW9kdWxlIG5hbWVzIGFyZVxuLy8gZGVyaXZlZCBmcm9tIGZpbGUgbmFtZXMsIGFuZCBqUXVlcnkgaXMgbm9ybWFsbHkgZGVsaXZlcmVkIGluIGEgbG93ZXJjYXNlXG4vLyBmaWxlIG5hbWUuIERvIHRoaXMgYWZ0ZXIgY3JlYXRpbmcgdGhlIGdsb2JhbCBzbyB0aGF0IGlmIGFuIEFNRCBtb2R1bGUgd2FudHNcbi8vIHRvIGNhbGwgbm9Db25mbGljdCB0byBoaWRlIHRoaXMgdmVyc2lvbiBvZiBqUXVlcnksIGl0IHdpbGwgd29yay5cblxuLy8gTm90ZSB0aGF0IGZvciBtYXhpbXVtIHBvcnRhYmlsaXR5LCBsaWJyYXJpZXMgdGhhdCBhcmUgbm90IGpRdWVyeSBzaG91bGRcbi8vIGRlY2xhcmUgdGhlbXNlbHZlcyBhcyBhbm9ueW1vdXMgbW9kdWxlcywgYW5kIGF2b2lkIHNldHRpbmcgYSBnbG9iYWwgaWYgYW5cbi8vIEFNRCBsb2FkZXIgaXMgcHJlc2VudC4galF1ZXJ5IGlzIGEgc3BlY2lhbCBjYXNlLiBGb3IgbW9yZSBpbmZvcm1hdGlvbiwgc2VlXG4vLyBodHRwczovL2dpdGh1Yi5jb20vanJidXJrZS9yZXF1aXJlanMvd2lraS9VcGRhdGluZy1leGlzdGluZy1saWJyYXJpZXMjd2lraS1hbm9uXG5cbmlmICggdHlwZW9mIGRlZmluZSA9PT0gXCJmdW5jdGlvblwiICYmIGRlZmluZS5hbWQgKSB7XG5cdGRlZmluZSggXCJqcXVlcnlcIiwgW10sIGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiBqUXVlcnk7XG5cdH0gKTtcbn1cblxuXG5cblxudmFyXG5cblx0Ly8gTWFwIG92ZXIgalF1ZXJ5IGluIGNhc2Ugb2Ygb3ZlcndyaXRlXG5cdF9qUXVlcnkgPSB3aW5kb3cualF1ZXJ5LFxuXG5cdC8vIE1hcCBvdmVyIHRoZSAkIGluIGNhc2Ugb2Ygb3ZlcndyaXRlXG5cdF8kID0gd2luZG93LiQ7XG5cbmpRdWVyeS5ub0NvbmZsaWN0ID0gZnVuY3Rpb24oIGRlZXAgKSB7XG5cdGlmICggd2luZG93LiQgPT09IGpRdWVyeSApIHtcblx0XHR3aW5kb3cuJCA9IF8kO1xuXHR9XG5cblx0aWYgKCBkZWVwICYmIHdpbmRvdy5qUXVlcnkgPT09IGpRdWVyeSApIHtcblx0XHR3aW5kb3cualF1ZXJ5ID0gX2pRdWVyeTtcblx0fVxuXG5cdHJldHVybiBqUXVlcnk7XG59O1xuXG4vLyBFeHBvc2UgalF1ZXJ5IGFuZCAkIGlkZW50aWZpZXJzLCBldmVuIGluIEFNRFxuLy8gKCM3MTAyI2NvbW1lbnQ6MTAsIGh0dHBzOi8vZ2l0aHViLmNvbS9qcXVlcnkvanF1ZXJ5L3B1bGwvNTU3KVxuLy8gYW5kIENvbW1vbkpTIGZvciBicm93c2VyIGVtdWxhdG9ycyAoIzEzNTY2KVxuaWYgKCAhbm9HbG9iYWwgKSB7XG5cdHdpbmRvdy5qUXVlcnkgPSB3aW5kb3cuJCA9IGpRdWVyeTtcbn1cblxuXG5cblxucmV0dXJuIGpRdWVyeTtcbn0gKTtcbiIsIm1vZHVsZS5leHBvcnRzPXtcbiAgXCJuYW1lXCI6IFwicGFyc2xleWpzXCIsXG4gIFwidmVyc2lvblwiOiBcIjIuOC4xXCIsXG4gIFwiaG9tZXBhZ2VcIjogXCJodHRwOi8vcGFyc2xleWpzLm9yZ1wiLFxuICBcImxpY2Vuc2VcIjogXCJNSVRcIixcbiAgXCJkZXNjcmlwdGlvblwiOiBcIlZhbGlkYXRlIHlvdXIgZm9ybXMsIGZyb250ZW5kLCB3aXRob3V0IHdyaXRpbmcgYSBzaW5nbGUgbGluZSBvZiBqYXZhc2NyaXB0IVwiLFxuICBcIm1haW5cIjogXCJkaXN0L3BhcnNsZXkuanNcIixcbiAgXCJzY3JpcHRzXCI6IHtcbiAgICBcInRlc3RcIjogXCJndWxwXCIsXG4gICAgXCJ0ZXN0LWJyb3dzZXJcIjogXCJndWxwIHRlc3QtYnJvd3NlclwiLFxuICAgIFwiYnVpbGRcIjogXCJndWxwIGJ1aWxkXCIsXG4gICAgXCJjb3ZlcmFnZVwiOiBcImd1bHAgY292ZXJhZ2VcIlxuICB9LFxuICBcInJlcG9zaXRvcnlcIjoge1xuICAgIFwidHlwZVwiOiBcImdpdFwiLFxuICAgIFwidXJsXCI6IFwiaHR0cHM6Ly9naXRodWIuY29tL2d1aWxsYXVtZXBvdGllci9QYXJzbGV5LmpzLmdpdFwiXG4gIH0sXG4gIFwia2V5d29yZHNcIjogW1xuICAgIFwicGFyc2xleVwiLFxuICAgIFwiZm9ybVwiLFxuICAgIFwidmFsaWRhdGlvblwiLFxuICAgIFwiaHRtbDVcIixcbiAgICBcInBvbHlmaWxsXCIsXG4gICAgXCJlczZcIlxuICBdLFxuICBcImF1dGhvclwiOiB7XG4gICAgXCJuYW1lXCI6IFwiR3VpbGxhdW1lIFBvdGllclwiLFxuICAgIFwiZW1haWxcIjogXCJndWlsbGF1bWVAd2lzZW1ibHkuY29tXCIsXG4gICAgXCJ1cmxcIjogXCJodHRwOi8vZ3VpbGxhdW1lcG90aWVyLmNvbS9cIlxuICB9LFxuICBcImJ1Z3NcIjoge1xuICAgIFwidXJsXCI6IFwiaHR0cHM6Ly9naXRodWIuY29tL2d1aWxsYXVtZXBvdGllci9QYXJzbGV5LmpzL2lzc3Vlc1wiXG4gIH0sXG4gIFwiZGVwZW5kZW5jaWVzXCI6IHtcbiAgICBcImpxdWVyeVwiOiBcIj49MS44LjBcIlxuICB9LFxuICBcImRldkRlcGVuZGVuY2llc1wiOiB7XG4gICAgXCJiYWJlbC1jb3JlXCI6IFwiXjYuMjYuM1wiLFxuICAgIFwiYmFiZWwtZXNsaW50XCI6IFwiXjQuMC41XCIsXG4gICAgXCJiYWJlbC1wbHVnaW4tb2JqZWN0LWFzc2lnblwiOiBcIl4xLjIuMVwiLFxuICAgIFwiYmFiZWwtcHJlc2V0LWVudlwiOiBcIl4xLjcuMFwiLFxuICAgIFwiYmFiZWxpZnlcIjogXCJeOC4wLjBcIixcbiAgICBcImJyb3dzZXJpZnlcIjogXCJeMTEuMC4xXCIsXG4gICAgXCJleHBlY3QuanNcIjogXCIqXCIsXG4gICAgXCJkZWxcIjogXCJeMS4xLjFcIixcbiAgICBcImVzcGVyYW50b1wiOiBcIl4wLjcuNFwiLFxuICAgIFwiZ2xvYlwiOiBcIl41LjAuMTRcIixcbiAgICBcImd1bHBcIjogXCJeMy45LjBcIixcbiAgICBcImRvY2NvXCI6IFwifjAuNi4zXCIsXG4gICAgXCJndWxwLWJhYmVsXCI6IFwiXjcuMC4xXCIsXG4gICAgXCJndWxwLWVzbGludFwiOiBcIl4xLjAuMFwiLFxuICAgIFwiZ3VscC1maWxlXCI6IFwiXjAuMi4wXCIsXG4gICAgXCJndWxwLWZpbHRlclwiOiBcIl4zLjAuMFwiLFxuICAgIFwiZ3VscC1oZWFkZXJcIjogXCIqXCIsXG4gICAgXCJndWxwLWlzdGFuYnVsXCI6IFwiXjAuMTAuMFwiLFxuICAgIFwiZ3VscC1qc2NzXCI6IFwiXjIuMC4wXCIsXG4gICAgXCJndWxwLWxpdmVyZWxvYWRcIjogXCJeMy40LjBcIixcbiAgICBcImd1bHAtbG9hZC1wbHVnaW5zXCI6IFwiXjAuMTAuMFwiLFxuICAgIFwiZ3VscC1tb2NoYVwiOiBcIl4yLjAuMFwiLFxuICAgIFwiZ3VscC1ub3RpZnlcIjogXCJeMi4xLjBcIixcbiAgICBcImd1bHAtcGx1bWJlclwiOiBcIl4xLjAuMVwiLFxuICAgIFwiZ3VscC1yZW5hbWVcIjogXCJeMS4yLjBcIixcbiAgICBcImd1bHAtcmVwbGFjZVwiOiBcIipcIixcbiAgICBcImd1bHAtc291cmNlbWFwc1wiOiBcIl4xLjMuMFwiLFxuICAgIFwiZ3VscC11Z2xpZnlcIjogXCJeMS4yLjBcIixcbiAgICBcImd1bHAtZ2l0XCI6IFwiXjEuNy4wXCIsXG4gICAgXCJpbnB1dGV2ZW50XCI6IFwiKlwiLFxuICAgIFwiaXNwYXJ0YVwiOiBcIn4zLjAuM1wiLFxuICAgIFwibW9jaGFcIjogXCJeMi4xLjBcIixcbiAgICBcIm1vbWVudFwiOiBcIipcIixcbiAgICBcInJ1bi1zZXF1ZW5jZVwiOiBcIl4xLjAuMlwiLFxuICAgIFwianNkb21cIjogXCJeOS4yXCIsXG4gICAgXCJzaW5vblwiOiBcIl4xLjEyLjJcIixcbiAgICBcInZpbnlsLWJ1ZmZlclwiOiBcIl4xLjAuMFwiLFxuICAgIFwidmlueWwtc291cmNlLXN0cmVhbVwiOiBcIl4xLjAuMFwiLFxuICAgIFwid2F0Y2hpZnlcIjogXCJeMy4zLjFcIlxuICB9LFxuICBcImJhYmVsQm9pbGVycGxhdGVPcHRpb25zXCI6IHtcbiAgICBcImVudHJ5RmlsZU5hbWVcIjogXCJwYXJzbGV5XCIsXG4gICAgXCJtYWluVmFyTmFtZVwiOiBcInBhcnNsZXlcIixcbiAgICBcIm1vY2hhR2xvYmFsc1wiOiBbXG4gICAgICBcIiRcIixcbiAgICAgIFwic3R1YlwiLFxuICAgICAgXCJzcHlcIixcbiAgICAgIFwiZXhwZWN0XCIsXG4gICAgICBcImV4cGVjdFdhcm5pbmdcIlxuICAgIF1cbiAgfSxcbiAgXCJqc3BtXCI6IHtcbiAgICBcIm1haW5cIjogXCJkaXN0L3BhcnNsZXkuanNcIixcbiAgICBcImRlcGVuZGVuY2llc1wiOiB7XG4gICAgICBcImpxdWVyeVwiOiBcIm5wbTpqcXVlcnlcIlxuICAgIH1cbiAgfVxufVxuIiwiLy8gVGhpcyBwbHVnaW4gcmVwbGFjZSBQYXJzbGV5IGRlZmF1bHQgZm9ybSBiZWhhdmlvciB0aGF0IGF1dG8gYmluZCBpdHMgZmllbGRzIGNoaWxkcmVuXG4vLyBXaXRoIHRoaXMgcGx1Z2luIHlvdSBtdXN0IHJlZ2lzdGVyIGluIGNvbnN0cnVjdG9yIHlvdXIgZm9ybSdzIGZpZWxkcyBhbmQgdGhlaXIgY29uc3RyYWludHNcbi8vIFlvdSBoYXZlIHRoaXMgd2F5IGEgdG90YWwgamF2YXNjcmlwdCBjb250cm9sIG92ZXIgeW91ciBmb3JtIHZhbGlkYXRpb24sIGFuZCBub3RoaW5nIG5lZWRlZCBpbiBET01cblxuaW1wb3J0IGpRdWVyeSBmcm9tICdqcXVlcnknOyAvLyBSZW1vdmUgdGhpcyBsaW5lIGluIEVTM1xuXG4oZnVuY3Rpb24gKCQpIHtcblxuICB3aW5kb3cuUGFyc2xleUNvbmZpZyA9ICQuZXh0ZW5kKHRydWUsIHdpbmRvdy5QYXJzbGV5Q29uZmlnLCB7YXV0b0JpbmQ6IGZhbHNlfSk7XG4gIHdpbmRvdy5QYXJzbGV5RXh0ZW5kID0gd2luZG93LlBhcnNsZXlFeHRlbmQgfHwge307XG5cbiAgd2luZG93LlBhcnNsZXlFeHRlbmQgPSBPYmplY3QuYXNzaWduKHdpbmRvdy5QYXJzbGV5RXh0ZW5kLCB7XG4gICAgLy8geyAnI3NlbGVjdG9yJyA6IHsgY29uc3RyYWludE5hbWUxOiB2YWx1ZSwgY29uc3RyYWludE5hbWUyOiB2YWx1ZTIgfSwgI3NlbGVjdG9yMjogeyBjb25zdHJhaW50TmFtZTogdmFsdWUgfSB9XG4gICAgLy8geyAnI3NlbGVjdG9yJyA6IHsgY29uc3RyYWludE5hbWUxOiB7IHJlcXVpcmVtZW50czogdmFsdWUsIHByaW9yaXR5OiB2YWx1ZSB9LCBjb25zdHJhaW50TmFtZTI6IHZhbHVlMiB9IH1cbiAgICBfYmluZEZpZWxkczogZnVuY3Rpb24gKCkge1xuICAgICAgd2luZG93LlBhcnNsZXkuVXRpbHMud2Fybk9uY2UoXCJQYXJzbGV5J3MgZXh0cmEvYmluZCBpcyBkZXByZWNhdGVkLiBQbGVhc2Ugc2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9ndWlsbGF1bWVwb3RpZXIvUGFyc2xleS5qcy9pc3N1ZXMvMTE4MFwiKTtcbiAgICAgIGlmICgnRm9ybScgIT09IHRoaXMuX19jbGFzc19fKVxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ2BfYmluZEZpZWxkc2AgbXVzdCBiZSBjYWxsZWQgb24gYSBmb3JtIGluc3RhbmNlJyk7XG5cbiAgICAgIGlmICgndW5kZWZpbmVkJyA9PT0gdHlwZW9mIHRoaXMub3B0aW9ucy5maWVsZHMpXG4gICAgICAgIHRocm93IG5ldyBFcnJvcignYmluZC5qcyBwbHVnaW4gbmVlZHMgdG8gaGF2ZSBQYXJzbGV5IGluc3RhbnRpYXRlZCB3aXRoIGZpZWxkcycpO1xuXG4gICAgICB2YXIgZmllbGQ7XG4gICAgICB0aGlzLmZpZWxkcyA9IFtdO1xuXG4gICAgICBmb3IgKHZhciBzZWxlY3RvciBpbiB0aGlzLm9wdGlvbnMuZmllbGRzKSB7XG4gICAgICAgIGlmICgwID09PSAkKHNlbGVjdG9yKS5sZW5ndGgpXG4gICAgICAgICAgY29udGludWU7XG5cbiAgICAgICAgZmllbGQgPSAkKHNlbGVjdG9yKS5wYXJzbGV5KCk7XG5cbiAgICAgICAgZm9yICh2YXIgbmFtZSBpbiB0aGlzLm9wdGlvbnMuZmllbGRzW3NlbGVjdG9yXSkge1xuICAgICAgICAgIGlmICgnb2JqZWN0JyA9PT0gdHlwZW9mIHRoaXMub3B0aW9ucy5maWVsZHNbc2VsZWN0b3JdW25hbWVdICYmICEodGhpcy5vcHRpb25zLmZpZWxkc1tzZWxlY3Rvcl1bbmFtZV0gaW5zdGFuY2VvZiBBcnJheSkpXG4gICAgICAgICAgICBmaWVsZC5hZGRDb25zdHJhaW50KG5hbWUudG9Mb3dlckNhc2UoKSwgdGhpcy5vcHRpb25zLmZpZWxkc1tzZWxlY3Rvcl1bbmFtZV0ucmVxdWlyZW1lbnRzLCB0aGlzLm9wdGlvbnMuZmllbGRzW3NlbGVjdG9yXVtuYW1lXS5wcmlvcml0eSB8fCAzMik7XG4gICAgICAgICAgZWxzZVxuICAgICAgICAgICAgZmllbGQuYWRkQ29uc3RyYWludChuYW1lLnRvTG93ZXJDYXNlKCksIHRoaXMub3B0aW9ucy5maWVsZHNbc2VsZWN0b3JdW25hbWVdKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICB0aGlzLmZpZWxkcy5wdXNoKGZpZWxkKTtcblxuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfSxcblxuICAgIC8vIERvIG5vdGhpbmdcbiAgICBfYmluZENvbnN0cmFpbnRzOiBmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9XG4gIH0pO1xuXG59KShqUXVlcnkpO1xuIiwiLy8gTG9hZCB0aGlzIGFmdGVyIFBhcnNsZXkgZm9yIGFkZGl0aW9uYWwgY29tcGFyaXNvbiB2YWxpZGF0b3JzXG4vLyBOb3RlOiBjb21wYXJpbmcgd2l0aCBhIHJlZmVyZW5jZSBpc24ndCB3ZWxsIHN1cHBvcnRlZCBhbmQgbm90IHJlY29tbWVuZGVkLlxuaW1wb3J0IGpRdWVyeSBmcm9tICdqcXVlcnknOyAvLyBSZW1vdmUgdGhpcyBsaW5lIGluIEVTM1xuXG4vLyBndCwgZ3RlLCBsdCwgbHRlLCBub3RlcXVhbHRvIGV4dHJhIHZhbGlkYXRvcnNcbnZhciBwYXJzZVJlcXVpcmVtZW50ID0gZnVuY3Rpb24gKHJlcXVpcmVtZW50KSB7XG4gIGlmIChpc05hTigrcmVxdWlyZW1lbnQpKVxuICAgIHJldHVybiBwYXJzZUZsb2F0KGpRdWVyeShyZXF1aXJlbWVudCkudmFsKCkpO1xuICBlbHNlXG4gICAgcmV0dXJuICtyZXF1aXJlbWVudDtcbn07XG5cbi8vIEdyZWF0ZXIgdGhhbiB2YWxpZGF0b3JcbndpbmRvdy5QYXJzbGV5LmFkZFZhbGlkYXRvcignZ3QnLCB7XG4gIHZhbGlkYXRlU3RyaW5nOiBmdW5jdGlvbiAodmFsdWUsIHJlcXVpcmVtZW50KSB7XG4gICAgcmV0dXJuIHBhcnNlRmxvYXQodmFsdWUpID4gcGFyc2VSZXF1aXJlbWVudChyZXF1aXJlbWVudCk7XG4gIH0sXG4gIHByaW9yaXR5OiAzMlxufSk7XG5cbi8vIEdyZWF0ZXIgdGhhbiBvciBlcXVhbCB0byB2YWxpZGF0b3JcbndpbmRvdy5QYXJzbGV5LmFkZFZhbGlkYXRvcignZ3RlJywge1xuICB2YWxpZGF0ZVN0cmluZzogZnVuY3Rpb24gKHZhbHVlLCByZXF1aXJlbWVudCkge1xuICAgIHJldHVybiBwYXJzZUZsb2F0KHZhbHVlKSA+PSBwYXJzZVJlcXVpcmVtZW50KHJlcXVpcmVtZW50KTtcbiAgfSxcbiAgcHJpb3JpdHk6IDMyXG59KTtcblxuLy8gTGVzcyB0aGFuIHZhbGlkYXRvclxud2luZG93LlBhcnNsZXkuYWRkVmFsaWRhdG9yKCdsdCcsIHtcbiAgdmFsaWRhdGVTdHJpbmc6IGZ1bmN0aW9uICh2YWx1ZSwgcmVxdWlyZW1lbnQpIHtcbiAgICByZXR1cm4gcGFyc2VGbG9hdCh2YWx1ZSkgPCBwYXJzZVJlcXVpcmVtZW50KHJlcXVpcmVtZW50KTtcbiAgfSxcbiAgcHJpb3JpdHk6IDMyXG59KTtcblxuLy8gTGVzcyB0aGFuIG9yIGVxdWFsIHRvIHZhbGlkYXRvclxud2luZG93LlBhcnNsZXkuYWRkVmFsaWRhdG9yKCdsdGUnLCB7XG4gIHZhbGlkYXRlU3RyaW5nOiBmdW5jdGlvbiAodmFsdWUsIHJlcXVpcmVtZW50KSB7XG4gICAgcmV0dXJuIHBhcnNlRmxvYXQodmFsdWUpIDw9IHBhcnNlUmVxdWlyZW1lbnQocmVxdWlyZW1lbnQpO1xuICB9LFxuICBwcmlvcml0eTogMzJcbn0pO1xuIiwiLy8gTG9hZCB0aGlzIGFmdGVyIFBhcnNsZXkgZm9yIGFkZGl0aW9uYWwgY29tcGFyaXNvbiB2YWxpZGF0b3JzXG5cbndpbmRvdy5QYXJzbGV5LmFkZFZhbGlkYXRvcignZGF0ZWlzbycsIHtcbiAgdmFsaWRhdGVTdHJpbmc6IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgIHJldHVybiAvXihcXGR7NH0pXFxEPygwWzEtOV18MVswLTJdKVxcRD8oWzEyXVxcZHwwWzEtOV18M1swMV0pJC8udGVzdCh2YWx1ZSk7XG4gIH0sXG4gIHByaW9yaXR5OiAyNTZcbn0pO1xuIiwiKGZ1bmN0aW9uICgpIHtcbi8vIG1pbndvcmRzLCBtYXh3b3Jkcywgd29yZHMgZXh0cmEgdmFsaWRhdG9yc1xudmFyIGNvdW50V29yZHMgPSBmdW5jdGlvbiAoc3RyaW5nKSB7XG4gIHJldHVybiBzdHJpbmdcbiAgICAgIC5yZXBsYWNlKCAvKF5cXHMqKXwoXFxzKiQpL2dpLCBcIlwiIClcbiAgICAgIC5yZXBsYWNlKCAvXFxzKy9naSwgXCIgXCIgKVxuICAgICAgLnNwbGl0KCcgJykubGVuZ3RoO1xufTtcblxud2luZG93LlBhcnNsZXkuYWRkVmFsaWRhdG9yKFxuICAnbWlud29yZHMnLFxuICBmdW5jdGlvbiAodmFsdWUsIG5iV29yZHMpIHtcbiAgICByZXR1cm4gY291bnRXb3Jkcyh2YWx1ZSkgPj0gbmJXb3JkcztcbiAgfSwgMzIpXG4gIC5hZGRNZXNzYWdlKCdlbicsICdtaW53b3JkcycsICdUaGlzIHZhbHVlIG5lZWRzIG1vcmUgd29yZHMnKTtcblxud2luZG93LlBhcnNsZXkuYWRkVmFsaWRhdG9yKFxuICAnbWF4d29yZHMnLFxuICBmdW5jdGlvbiAodmFsdWUsIG5iV29yZHMpIHtcbiAgICByZXR1cm4gY291bnRXb3Jkcyh2YWx1ZSkgPD0gbmJXb3JkcztcbiAgfSwgMzIpXG4gIC5hZGRNZXNzYWdlKCdlbicsICdtYXh3b3JkcycsICdUaGlzIHZhbHVlIG5lZWRzIGZld2VyIHdvcmRzJyk7XG5cbndpbmRvdy5QYXJzbGV5LmFkZFZhbGlkYXRvcihcbiAgJ3dvcmRzJyxcbiAgZnVuY3Rpb24gKHZhbHVlLCBhcnJheVJhbmdlKSB7XG4gICAgdmFyIGxlbmd0aCA9IGNvdW50V29yZHModmFsdWUpO1xuICAgIHJldHVybiBsZW5ndGggPj0gYXJyYXlSYW5nZVswXSAmJiBsZW5ndGggPD0gYXJyYXlSYW5nZVsxXTtcbiAgfSwgMzIpXG4gIC5hZGRNZXNzYWdlKCdlbicsICd3b3JkcycsICdUaGlzIHZhbHVlIGhhcyB0aGUgaW5jb3JyZWN0IG51bWJlciBvZiB3b3JkcycpO1xufSkoKTtcbiIsIi8vIFRoaXMgaXMgaW5jbHVkZWQgd2l0aCB0aGUgUGFyc2xleSBsaWJyYXJ5IGl0c2VsZixcbi8vIHRodXMgdGhlcmUgaXMgbm8gdXNlIGluIGFkZGluZyBpdCB0byB5b3VyIHByb2plY3QuXG5pbXBvcnQgUGFyc2xleSBmcm9tICcuLi9wYXJzbGV5L21haW4nO1xuXG5QYXJzbGV5LmFkZE1lc3NhZ2VzKCdlbicsIHtcbiAgZGVmYXVsdE1lc3NhZ2U6IFwiVGhpcyB2YWx1ZSBzZWVtcyB0byBiZSBpbnZhbGlkLlwiLFxuICB0eXBlOiB7XG4gICAgZW1haWw6ICAgICAgICBcIlRoaXMgdmFsdWUgc2hvdWxkIGJlIGEgdmFsaWQgZW1haWwuXCIsXG4gICAgdXJsOiAgICAgICAgICBcIlRoaXMgdmFsdWUgc2hvdWxkIGJlIGEgdmFsaWQgdXJsLlwiLFxuICAgIG51bWJlcjogICAgICAgXCJUaGlzIHZhbHVlIHNob3VsZCBiZSBhIHZhbGlkIG51bWJlci5cIixcbiAgICBpbnRlZ2VyOiAgICAgIFwiVGhpcyB2YWx1ZSBzaG91bGQgYmUgYSB2YWxpZCBpbnRlZ2VyLlwiLFxuICAgIGRpZ2l0czogICAgICAgXCJUaGlzIHZhbHVlIHNob3VsZCBiZSBkaWdpdHMuXCIsXG4gICAgYWxwaGFudW06ICAgICBcIlRoaXMgdmFsdWUgc2hvdWxkIGJlIGFscGhhbnVtZXJpYy5cIlxuICB9LFxuICBub3RibGFuazogICAgICAgXCJUaGlzIHZhbHVlIHNob3VsZCBub3QgYmUgYmxhbmsuXCIsXG4gIHJlcXVpcmVkOiAgICAgICBcIlRoaXMgdmFsdWUgaXMgcmVxdWlyZWQuXCIsXG4gIHBhdHRlcm46ICAgICAgICBcIlRoaXMgdmFsdWUgc2VlbXMgdG8gYmUgaW52YWxpZC5cIixcbiAgbWluOiAgICAgICAgICAgIFwiVGhpcyB2YWx1ZSBzaG91bGQgYmUgZ3JlYXRlciB0aGFuIG9yIGVxdWFsIHRvICVzLlwiLFxuICBtYXg6ICAgICAgICAgICAgXCJUaGlzIHZhbHVlIHNob3VsZCBiZSBsb3dlciB0aGFuIG9yIGVxdWFsIHRvICVzLlwiLFxuICByYW5nZTogICAgICAgICAgXCJUaGlzIHZhbHVlIHNob3VsZCBiZSBiZXR3ZWVuICVzIGFuZCAlcy5cIixcbiAgbWlubGVuZ3RoOiAgICAgIFwiVGhpcyB2YWx1ZSBpcyB0b28gc2hvcnQuIEl0IHNob3VsZCBoYXZlICVzIGNoYXJhY3RlcnMgb3IgbW9yZS5cIixcbiAgbWF4bGVuZ3RoOiAgICAgIFwiVGhpcyB2YWx1ZSBpcyB0b28gbG9uZy4gSXQgc2hvdWxkIGhhdmUgJXMgY2hhcmFjdGVycyBvciBmZXdlci5cIixcbiAgbGVuZ3RoOiAgICAgICAgIFwiVGhpcyB2YWx1ZSBsZW5ndGggaXMgaW52YWxpZC4gSXQgc2hvdWxkIGJlIGJldHdlZW4gJXMgYW5kICVzIGNoYXJhY3RlcnMgbG9uZy5cIixcbiAgbWluY2hlY2s6ICAgICAgIFwiWW91IG11c3Qgc2VsZWN0IGF0IGxlYXN0ICVzIGNob2ljZXMuXCIsXG4gIG1heGNoZWNrOiAgICAgICBcIllvdSBtdXN0IHNlbGVjdCAlcyBjaG9pY2VzIG9yIGZld2VyLlwiLFxuICBjaGVjazogICAgICAgICAgXCJZb3UgbXVzdCBzZWxlY3QgYmV0d2VlbiAlcyBhbmQgJXMgY2hvaWNlcy5cIixcbiAgZXF1YWx0bzogICAgICAgIFwiVGhpcyB2YWx1ZSBzaG91bGQgYmUgdGhlIHNhbWUuXCJcbn0pO1xuXG5QYXJzbGV5LnNldExvY2FsZSgnZW4nKTtcbiIsIi8vIFZhbGlkYXRpb24gZXJyb3JzIG1lc3NhZ2VzIGZvciBQYXJzbGV5XG5pbXBvcnQgUGFyc2xleSBmcm9tICcuLi9wYXJzbGV5JztcblxuUGFyc2xleS5hZGRNZXNzYWdlcygnZnInLCB7XG4gIGRlZmF1bHRNZXNzYWdlOiBcIkNldHRlIHZhbGV1ciBzZW1ibGUgbm9uIHZhbGlkZS5cIixcbiAgdHlwZToge1xuICAgIGVtYWlsOiAgICAgICAgXCJDZXR0ZSB2YWxldXIgbidlc3QgcGFzIHVuZSBhZHJlc3NlIGVtYWlsIHZhbGlkZS5cIixcbiAgICB1cmw6ICAgICAgICAgIFwiQ2V0dGUgdmFsZXVyIG4nZXN0IHBhcyB1bmUgVVJMIHZhbGlkZS5cIixcbiAgICBudW1iZXI6ICAgICAgIFwiQ2V0dGUgdmFsZXVyIGRvaXQgw6p0cmUgdW4gbm9tYnJlLlwiLFxuICAgIGludGVnZXI6ICAgICAgXCJDZXR0ZSB2YWxldXIgZG9pdCDDqnRyZSB1biBlbnRpZXIuXCIsXG4gICAgZGlnaXRzOiAgICAgICBcIkNldHRlIHZhbGV1ciBkb2l0IMOqdHJlIG51bcOpcmlxdWUuXCIsXG4gICAgYWxwaGFudW06ICAgICBcIkNldHRlIHZhbGV1ciBkb2l0IMOqdHJlIGFscGhhbnVtw6lyaXF1ZS5cIlxuICB9LFxuICBub3RibGFuazogICAgICAgXCJDZXR0ZSB2YWxldXIgbmUgcGV1dCBwYXMgw6p0cmUgdmlkZS5cIixcbiAgcmVxdWlyZWQ6ICAgICAgIFwiQ2UgY2hhbXAgZXN0IHJlcXVpcy5cIixcbiAgcGF0dGVybjogICAgICAgIFwiQ2V0dGUgdmFsZXVyIHNlbWJsZSBub24gdmFsaWRlLlwiLFxuICBtaW46ICAgICAgICAgICAgXCJDZXR0ZSB2YWxldXIgbmUgZG9pdCBwYXMgw6p0cmUgaW5mw6lyaWV1cmUgw6AgJXMuXCIsXG4gIG1heDogICAgICAgICAgICBcIkNldHRlIHZhbGV1ciBuZSBkb2l0IHBhcyBleGPDqWRlciAlcy5cIixcbiAgcmFuZ2U6ICAgICAgICAgIFwiQ2V0dGUgdmFsZXVyIGRvaXQgw6p0cmUgY29tcHJpc2UgZW50cmUgJXMgZXQgJXMuXCIsXG4gIG1pbmxlbmd0aDogICAgICBcIkNldHRlIGNoYcOubmUgZXN0IHRyb3AgY291cnRlLiBFbGxlIGRvaXQgYXZvaXIgYXUgbWluaW11bSAlcyBjYXJhY3TDqHJlcy5cIixcbiAgbWF4bGVuZ3RoOiAgICAgIFwiQ2V0dGUgY2hhw65uZSBlc3QgdHJvcCBsb25ndWUuIEVsbGUgZG9pdCBhdm9pciBhdSBtYXhpbXVtICVzIGNhcmFjdMOocmVzLlwiLFxuICBsZW5ndGg6ICAgICAgICAgXCJDZXR0ZSB2YWxldXIgZG9pdCBjb250ZW5pciBlbnRyZSAlcyBldCAlcyBjYXJhY3TDqHJlcy5cIixcbiAgbWluY2hlY2s6ICAgICAgIFwiVm91cyBkZXZleiBzw6lsZWN0aW9ubmVyIGF1IG1vaW5zICVzIGNob2l4LlwiLFxuICBtYXhjaGVjazogICAgICAgXCJWb3VzIGRldmV6IHPDqWxlY3Rpb25uZXIgJXMgY2hvaXggbWF4aW11bS5cIixcbiAgY2hlY2s6ICAgICAgICAgIFwiVm91cyBkZXZleiBzw6lsZWN0aW9ubmVyIGVudHJlICVzIGV0ICVzIGNob2l4LlwiLFxuICBlcXVhbHRvOiAgICAgICAgXCJDZXR0ZSB2YWxldXIgZGV2cmFpdCDDqnRyZSBpZGVudGlxdWUuXCJcbn0pO1xuXG5QYXJzbGV5LnNldExvY2FsZSgnZnInKTtcbiIsImltcG9ydCAkIGZyb20gJ2pxdWVyeSc7XG5pbXBvcnQgUGFyc2xleSBmcm9tICcuL3BhcnNsZXkvbWFpbic7XG5pbXBvcnQgJy4vcGFyc2xleS9wdWJzdWInO1xuaW1wb3J0ICcuL3BhcnNsZXkvcmVtb3RlJztcbmltcG9ydCAnLi9pMThuL2VuJztcbmltcG9ydCBpbnB1dGV2ZW50IGZyb20gJy4vdmVuZG9yL2lucHV0ZXZlbnQnO1xuXG5pbnB1dGV2ZW50Lmluc3RhbGwoKTtcblxuZXhwb3J0IGRlZmF1bHQgUGFyc2xleTtcbiIsImltcG9ydCAkIGZyb20gJ2pxdWVyeSc7XG5pbXBvcnQgVXRpbHMgZnJvbSAnLi91dGlscyc7XG5cbnZhciBCYXNlID0gZnVuY3Rpb24gKCkge1xuICB0aGlzLl9faWRfXyA9IFV0aWxzLmdlbmVyYXRlSUQoKTtcbn07XG5cbkJhc2UucHJvdG90eXBlID0ge1xuICBhc3luY1N1cHBvcnQ6IHRydWUsIC8vIERlcHJlY2F0ZWRcblxuICBfcGlwZUFjY29yZGluZ1RvVmFsaWRhdGlvblJlc3VsdDogZnVuY3Rpb24gKCkge1xuICAgIHZhciBwaXBlID0gKCkgPT4ge1xuICAgICAgdmFyIHIgPSAkLkRlZmVycmVkKCk7XG4gICAgICBpZiAodHJ1ZSAhPT0gdGhpcy52YWxpZGF0aW9uUmVzdWx0KVxuICAgICAgICByLnJlamVjdCgpO1xuICAgICAgcmV0dXJuIHIucmVzb2x2ZSgpLnByb21pc2UoKTtcbiAgICB9O1xuICAgIHJldHVybiBbcGlwZSwgcGlwZV07XG4gIH0sXG5cbiAgYWN0dWFsaXplT3B0aW9uczogZnVuY3Rpb24gKCkge1xuICAgIFV0aWxzLmF0dHIodGhpcy5lbGVtZW50LCB0aGlzLm9wdGlvbnMubmFtZXNwYWNlLCB0aGlzLmRvbU9wdGlvbnMpO1xuICAgIGlmICh0aGlzLnBhcmVudCAmJiB0aGlzLnBhcmVudC5hY3R1YWxpemVPcHRpb25zKVxuICAgICAgdGhpcy5wYXJlbnQuYWN0dWFsaXplT3B0aW9ucygpO1xuICAgIHJldHVybiB0aGlzO1xuICB9LFxuXG4gIF9yZXNldE9wdGlvbnM6IGZ1bmN0aW9uIChpbml0T3B0aW9ucykge1xuICAgIHRoaXMuZG9tT3B0aW9ucyA9IFV0aWxzLm9iamVjdENyZWF0ZSh0aGlzLnBhcmVudC5vcHRpb25zKTtcbiAgICB0aGlzLm9wdGlvbnMgPSBVdGlscy5vYmplY3RDcmVhdGUodGhpcy5kb21PcHRpb25zKTtcbiAgICAvLyBTaGFsbG93IGNvcHkgb2Ygb3duUHJvcGVydGllcyBvZiBpbml0T3B0aW9uczpcbiAgICBmb3IgKHZhciBpIGluIGluaXRPcHRpb25zKSB7XG4gICAgICBpZiAoaW5pdE9wdGlvbnMuaGFzT3duUHJvcGVydHkoaSkpXG4gICAgICAgIHRoaXMub3B0aW9uc1tpXSA9IGluaXRPcHRpb25zW2ldO1xuICAgIH1cbiAgICB0aGlzLmFjdHVhbGl6ZU9wdGlvbnMoKTtcbiAgfSxcblxuICBfbGlzdGVuZXJzOiBudWxsLFxuXG4gIC8vIFJlZ2lzdGVyIGEgY2FsbGJhY2sgZm9yIHRoZSBnaXZlbiBldmVudCBuYW1lXG4gIC8vIENhbGxiYWNrIGlzIGNhbGxlZCB3aXRoIGNvbnRleHQgYXMgdGhlIGZpcnN0IGFyZ3VtZW50IGFuZCB0aGUgYHRoaXNgXG4gIC8vIFRoZSBjb250ZXh0IGlzIHRoZSBjdXJyZW50IHBhcnNsZXkgaW5zdGFuY2UsIG9yIHdpbmRvdy5QYXJzbGV5IGlmIGdsb2JhbFxuICAvLyBBIHJldHVybiB2YWx1ZSBvZiBgZmFsc2VgIHdpbGwgaW50ZXJydXB0IHRoZSBjYWxsc1xuICBvbjogZnVuY3Rpb24gKG5hbWUsIGZuKSB7XG4gICAgdGhpcy5fbGlzdGVuZXJzID0gdGhpcy5fbGlzdGVuZXJzIHx8IHt9O1xuICAgIHZhciBxdWV1ZSA9IHRoaXMuX2xpc3RlbmVyc1tuYW1lXSA9IHRoaXMuX2xpc3RlbmVyc1tuYW1lXSB8fCBbXTtcbiAgICBxdWV1ZS5wdXNoKGZuKTtcblxuICAgIHJldHVybiB0aGlzO1xuICB9LFxuXG4gIC8vIERlcHJlY2F0ZWQuIFVzZSBgb25gIGluc3RlYWRcbiAgc3Vic2NyaWJlOiBmdW5jdGlvbihuYW1lLCBmbikge1xuICAgICQubGlzdGVuVG8odGhpcywgbmFtZS50b0xvd2VyQ2FzZSgpLCBmbik7XG4gIH0sXG5cbiAgLy8gVW5yZWdpc3RlciBhIGNhbGxiYWNrIChvciBhbGwgaWYgbm9uZSBpcyBnaXZlbikgZm9yIHRoZSBnaXZlbiBldmVudCBuYW1lXG4gIG9mZjogZnVuY3Rpb24gKG5hbWUsIGZuKSB7XG4gICAgdmFyIHF1ZXVlID0gdGhpcy5fbGlzdGVuZXJzICYmIHRoaXMuX2xpc3RlbmVyc1tuYW1lXTtcbiAgICBpZiAocXVldWUpIHtcbiAgICAgIGlmICghZm4pIHtcbiAgICAgICAgZGVsZXRlIHRoaXMuX2xpc3RlbmVyc1tuYW1lXTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGZvciAodmFyIGkgPSBxdWV1ZS5sZW5ndGg7IGktLTsgKVxuICAgICAgICAgIGlmIChxdWV1ZVtpXSA9PT0gZm4pXG4gICAgICAgICAgICBxdWV1ZS5zcGxpY2UoaSwgMSk7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiB0aGlzO1xuICB9LFxuXG4gIC8vIERlcHJlY2F0ZWQuIFVzZSBgb2ZmYFxuICB1bnN1YnNjcmliZTogZnVuY3Rpb24obmFtZSwgZm4pIHtcbiAgICAkLnVuc3Vic2NyaWJlVG8odGhpcywgbmFtZS50b0xvd2VyQ2FzZSgpKTtcbiAgfSxcblxuICAvLyBUcmlnZ2VyIGFuIGV2ZW50IG9mIHRoZSBnaXZlbiBuYW1lXG4gIC8vIEEgcmV0dXJuIHZhbHVlIG9mIGBmYWxzZWAgaW50ZXJydXB0cyB0aGUgY2FsbGJhY2sgY2hhaW5cbiAgLy8gUmV0dXJucyBmYWxzZSBpZiBleGVjdXRpb24gd2FzIGludGVycnVwdGVkXG4gIHRyaWdnZXI6IGZ1bmN0aW9uIChuYW1lLCB0YXJnZXQsIGV4dHJhQXJnKSB7XG4gICAgdGFyZ2V0ID0gdGFyZ2V0IHx8IHRoaXM7XG4gICAgdmFyIHF1ZXVlID0gdGhpcy5fbGlzdGVuZXJzICYmIHRoaXMuX2xpc3RlbmVyc1tuYW1lXTtcbiAgICB2YXIgcmVzdWx0O1xuICAgIHZhciBwYXJlbnRSZXN1bHQ7XG4gICAgaWYgKHF1ZXVlKSB7XG4gICAgICBmb3IgKHZhciBpID0gcXVldWUubGVuZ3RoOyBpLS07ICkge1xuICAgICAgICByZXN1bHQgPSBxdWV1ZVtpXS5jYWxsKHRhcmdldCwgdGFyZ2V0LCBleHRyYUFyZyk7XG4gICAgICAgIGlmIChyZXN1bHQgPT09IGZhbHNlKSByZXR1cm4gcmVzdWx0O1xuICAgICAgfVxuICAgIH1cbiAgICBpZiAodGhpcy5wYXJlbnQpIHtcbiAgICAgIHJldHVybiB0aGlzLnBhcmVudC50cmlnZ2VyKG5hbWUsIHRhcmdldCwgZXh0cmFBcmcpO1xuICAgIH1cbiAgICByZXR1cm4gdHJ1ZTtcbiAgfSxcblxuICBhc3luY0lzVmFsaWQ6IGZ1bmN0aW9uIChncm91cCwgZm9yY2UpIHtcbiAgICBVdGlscy53YXJuT25jZShcImFzeW5jSXNWYWxpZCBpcyBkZXByZWNhdGVkOyBwbGVhc2UgdXNlIHdoZW5WYWxpZCBpbnN0ZWFkXCIpO1xuICAgIHJldHVybiB0aGlzLndoZW5WYWxpZCh7Z3JvdXAsIGZvcmNlfSk7XG4gIH0sXG5cbiAgX2ZpbmRSZWxhdGVkOiBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIHRoaXMub3B0aW9ucy5tdWx0aXBsZSA/XG4gICAgICAkKHRoaXMucGFyZW50LmVsZW1lbnQucXVlcnlTZWxlY3RvckFsbChgWyR7dGhpcy5vcHRpb25zLm5hbWVzcGFjZX1tdWx0aXBsZT1cIiR7dGhpcy5vcHRpb25zLm11bHRpcGxlfVwiXWApKVxuICAgIDogdGhpcy4kZWxlbWVudDtcbiAgfVxufTtcblxuZXhwb3J0IGRlZmF1bHQgQmFzZTtcbiIsImltcG9ydCBVdGlscyBmcm9tICcuL3V0aWxzJztcbmltcG9ydCBWYWxpZGF0b3IgZnJvbSAnLi92YWxpZGF0b3InO1xuXG5jb25zdCBDb25zdHJhaW50ID0gZnVuY3Rpb24ocGFyc2xleUZpZWxkLCBuYW1lLCByZXF1aXJlbWVudHMsIHByaW9yaXR5LCBpc0RvbUNvbnN0cmFpbnQpIHtcbiAgY29uc3QgdmFsaWRhdG9yU3BlYyA9IHdpbmRvdy5QYXJzbGV5Ll92YWxpZGF0b3JSZWdpc3RyeS52YWxpZGF0b3JzW25hbWVdO1xuICBjb25zdCB2YWxpZGF0b3IgPSBuZXcgVmFsaWRhdG9yKHZhbGlkYXRvclNwZWMpO1xuICBwcmlvcml0eSA9IHByaW9yaXR5IHx8IHBhcnNsZXlGaWVsZC5vcHRpb25zW25hbWUgKyAnUHJpb3JpdHknXSB8fCB2YWxpZGF0b3IucHJpb3JpdHk7XG4gIGlzRG9tQ29uc3RyYWludCA9ICh0cnVlID09PSBpc0RvbUNvbnN0cmFpbnQpO1xuXG4gIE9iamVjdC5hc3NpZ24odGhpcywge1xuICAgIHZhbGlkYXRvcixcbiAgICBuYW1lLFxuICAgIHJlcXVpcmVtZW50cyxcbiAgICBwcmlvcml0eSxcbiAgICBpc0RvbUNvbnN0cmFpbnRcbiAgfSk7XG4gIHRoaXMuX3BhcnNlUmVxdWlyZW1lbnRzKHBhcnNsZXlGaWVsZC5vcHRpb25zKTtcbn07XG5cbmNvbnN0IGNhcGl0YWxpemUgPSBmdW5jdGlvbihzdHIpIHtcbiAgY29uc3QgY2FwID0gc3RyWzBdLnRvVXBwZXJDYXNlKCk7XG4gIHJldHVybiBjYXAgKyBzdHIuc2xpY2UoMSk7XG59O1xuXG5Db25zdHJhaW50LnByb3RvdHlwZSA9IHtcbiAgdmFsaWRhdGU6IGZ1bmN0aW9uKHZhbHVlLCBpbnN0YW5jZSkge1xuICAgIHJldHVybiB0aGlzLnZhbGlkYXRvci52YWxpZGF0ZSh2YWx1ZSwgLi4udGhpcy5yZXF1aXJlbWVudExpc3QsIGluc3RhbmNlKTtcbiAgfSxcblxuICBfcGFyc2VSZXF1aXJlbWVudHM6IGZ1bmN0aW9uKG9wdGlvbnMpIHtcbiAgICB0aGlzLnJlcXVpcmVtZW50TGlzdCA9IHRoaXMudmFsaWRhdG9yLnBhcnNlUmVxdWlyZW1lbnRzKHRoaXMucmVxdWlyZW1lbnRzLFxuICAgICAga2V5ID0+IG9wdGlvbnNbdGhpcy5uYW1lICsgY2FwaXRhbGl6ZShrZXkpXVxuICAgICk7XG4gIH1cbn07XG5cbmV4cG9ydCBkZWZhdWx0IENvbnN0cmFpbnQ7XG4iLCIvLyBBbGwgdGhlc2Ugb3B0aW9ucyBjb3VsZCBiZSBvdmVycmlkZW4gYW5kIHNwZWNpZmllZCBkaXJlY3RseSBpbiBET00gdXNpbmdcbi8vIGBkYXRhLXBhcnNsZXktYCBkZWZhdWx0IERPTS1BUElcbi8vIGVnOiBgaW5wdXRzYCBjYW4gYmUgc2V0IGluIERPTSB1c2luZyBgZGF0YS1wYXJzbGV5LWlucHV0cz1cImlucHV0LCB0ZXh0YXJlYVwiYFxuLy8gZWc6IGBkYXRhLXBhcnNsZXktc3RvcC1vbi1maXJzdC1mYWlsaW5nLWNvbnN0cmFpbnQ9XCJmYWxzZVwiYFxuXG52YXIgRGVmYXVsdHMgPSB7XG4gIC8vICMjIyBHZW5lcmFsXG5cbiAgLy8gRGVmYXVsdCBkYXRhLW5hbWVzcGFjZSBmb3IgRE9NIEFQSVxuICBuYW1lc3BhY2U6ICdkYXRhLXBhcnNsZXktJyxcblxuICAvLyBTdXBwb3J0ZWQgaW5wdXRzIGJ5IGRlZmF1bHRcbiAgaW5wdXRzOiAnaW5wdXQsIHRleHRhcmVhLCBzZWxlY3QnLFxuXG4gIC8vIEV4Y2x1ZGVkIGlucHV0cyBieSBkZWZhdWx0XG4gIGV4Y2x1ZGVkOiAnaW5wdXRbdHlwZT1idXR0b25dLCBpbnB1dFt0eXBlPXN1Ym1pdF0sIGlucHV0W3R5cGU9cmVzZXRdLCBpbnB1dFt0eXBlPWhpZGRlbl0nLFxuXG4gIC8vIFN0b3AgdmFsaWRhdGluZyBmaWVsZCBvbiBoaWdoZXN0IHByaW9yaXR5IGZhaWxpbmcgY29uc3RyYWludFxuICBwcmlvcml0eUVuYWJsZWQ6IHRydWUsXG5cbiAgLy8gIyMjIEZpZWxkIG9ubHlcblxuICAvLyBpZGVudGlmaWVyIHVzZWQgdG8gZ3JvdXAgdG9nZXRoZXIgaW5wdXRzIChlLmcuIHJhZGlvIGJ1dHRvbnMuLi4pXG4gIG11bHRpcGxlOiBudWxsLFxuXG4gIC8vIGlkZW50aWZpZXIgKG9yIGFycmF5IG9mIGlkZW50aWZpZXJzKSB1c2VkIHRvIHZhbGlkYXRlIG9ubHkgYSBzZWxlY3QgZ3JvdXAgb2YgaW5wdXRzXG4gIGdyb3VwOiBudWxsLFxuXG4gIC8vICMjIyBVSVxuICAvLyBFbmFibGVcXERpc2FibGUgZXJyb3IgbWVzc2FnZXNcbiAgdWlFbmFibGVkOiB0cnVlLFxuXG4gIC8vIEtleSBldmVudHMgdGhyZXNob2xkIGJlZm9yZSB2YWxpZGF0aW9uXG4gIHZhbGlkYXRpb25UaHJlc2hvbGQ6IDMsXG5cbiAgLy8gRm9jdXNlZCBmaWVsZCBvbiBmb3JtIHZhbGlkYXRpb24gZXJyb3IuICdmaXJzdCd8J2xhc3QnfCdub25lJ1xuICBmb2N1czogJ2ZpcnN0JyxcblxuICAvLyBldmVudChzKSB0aGF0IHdpbGwgdHJpZ2dlciB2YWxpZGF0aW9uIGJlZm9yZSBmaXJzdCBmYWlsdXJlLiBlZzogYGlucHV0YC4uLlxuICB0cmlnZ2VyOiBmYWxzZSxcblxuICAvLyBldmVudChzKSB0aGF0IHdpbGwgdHJpZ2dlciB2YWxpZGF0aW9uIGFmdGVyIGZpcnN0IGZhaWx1cmUuXG4gIHRyaWdnZXJBZnRlckZhaWx1cmU6ICdpbnB1dCcsXG5cbiAgLy8gQ2xhc3MgdGhhdCB3b3VsZCBiZSBhZGRlZCBvbiBldmVyeSBmYWlsaW5nIHZhbGlkYXRpb24gUGFyc2xleSBmaWVsZFxuICBlcnJvckNsYXNzOiAncGFyc2xleS1lcnJvcicsXG5cbiAgLy8gU2FtZSBmb3Igc3VjY2VzcyB2YWxpZGF0aW9uXG4gIHN1Y2Nlc3NDbGFzczogJ3BhcnNsZXktc3VjY2VzcycsXG5cbiAgLy8gUmV0dXJuIHRoZSBgJGVsZW1lbnRgIHRoYXQgd2lsbCByZWNlaXZlIHRoZXNlIGFib3ZlIHN1Y2Nlc3Mgb3IgZXJyb3IgY2xhc3Nlc1xuICAvLyBDb3VsZCBhbHNvIGJlIChhbmQgZ2l2ZW4gZGlyZWN0bHkgZnJvbSBET00pIGEgdmFsaWQgc2VsZWN0b3IgbGlrZSBgJyNkaXYnYFxuICBjbGFzc0hhbmRsZXI6IGZ1bmN0aW9uIChGaWVsZCkge30sXG5cbiAgLy8gUmV0dXJuIHRoZSBgJGVsZW1lbnRgIHdoZXJlIGVycm9ycyB3aWxsIGJlIGFwcGVuZGVkXG4gIC8vIENvdWxkIGFsc28gYmUgKGFuZCBnaXZlbiBkaXJlY3RseSBmcm9tIERPTSkgYSB2YWxpZCBzZWxlY3RvciBsaWtlIGAnI2RpdidgXG4gIGVycm9yc0NvbnRhaW5lcjogZnVuY3Rpb24gKEZpZWxkKSB7fSxcblxuICAvLyB1bCBlbGVtIHRoYXQgd291bGQgcmVjZWl2ZSBlcnJvcnMnIGxpc3RcbiAgZXJyb3JzV3JhcHBlcjogJzx1bCBjbGFzcz1cInBhcnNsZXktZXJyb3JzLWxpc3RcIj48L3VsPicsXG5cbiAgLy8gbGkgZWxlbSB0aGF0IHdvdWxkIHJlY2VpdmUgZXJyb3IgbWVzc2FnZVxuICBlcnJvclRlbXBsYXRlOiAnPGxpPjwvbGk+J1xufTtcblxuZXhwb3J0IGRlZmF1bHQgRGVmYXVsdHM7XG4iLCJpbXBvcnQgJCBmcm9tICdqcXVlcnknO1xuaW1wb3J0IFV0aWxzIGZyb20gJy4vdXRpbHMnO1xuaW1wb3J0IEJhc2UgZnJvbSAnLi9iYXNlJztcbmltcG9ydCBGb3JtIGZyb20gJy4vZm9ybSc7XG5pbXBvcnQgRmllbGQgZnJvbSAnLi9maWVsZCc7XG5pbXBvcnQgTXVsdGlwbGUgZnJvbSAnLi9tdWx0aXBsZSc7XG5cbnZhciBGYWN0b3J5ID0gZnVuY3Rpb24gKGVsZW1lbnQsIG9wdGlvbnMsIHBhcnNsZXlGb3JtSW5zdGFuY2UpIHtcbiAgdGhpcy5lbGVtZW50ID0gZWxlbWVudDtcbiAgdGhpcy4kZWxlbWVudCA9ICQoZWxlbWVudCk7XG5cbiAgLy8gSWYgdGhlIGVsZW1lbnQgaGFzIGFscmVhZHkgYmVlbiBib3VuZCwgcmV0dXJucyBpdHMgc2F2ZWQgUGFyc2xleSBpbnN0YW5jZVxuICB2YXIgc2F2ZWRwYXJzbGV5Rm9ybUluc3RhbmNlID0gdGhpcy4kZWxlbWVudC5kYXRhKCdQYXJzbGV5Jyk7XG4gIGlmIChzYXZlZHBhcnNsZXlGb3JtSW5zdGFuY2UpIHtcblxuICAgIC8vIElmIHRoZSBzYXZlZCBpbnN0YW5jZSBoYXMgYmVlbiBib3VuZCB3aXRob3V0IGEgRm9ybSBwYXJlbnQgYW5kIHRoZXJlIGlzIG9uZSBnaXZlbiBpbiB0aGlzIGNhbGwsIGFkZCBpdFxuICAgIGlmICgndW5kZWZpbmVkJyAhPT0gdHlwZW9mIHBhcnNsZXlGb3JtSW5zdGFuY2UgJiYgc2F2ZWRwYXJzbGV5Rm9ybUluc3RhbmNlLnBhcmVudCA9PT0gd2luZG93LlBhcnNsZXkpIHtcbiAgICAgIHNhdmVkcGFyc2xleUZvcm1JbnN0YW5jZS5wYXJlbnQgPSBwYXJzbGV5Rm9ybUluc3RhbmNlO1xuICAgICAgc2F2ZWRwYXJzbGV5Rm9ybUluc3RhbmNlLl9yZXNldE9wdGlvbnMoc2F2ZWRwYXJzbGV5Rm9ybUluc3RhbmNlLm9wdGlvbnMpO1xuICAgIH1cblxuICAgIGlmICgnb2JqZWN0JyA9PT0gdHlwZW9mIG9wdGlvbnMpIHtcbiAgICAgIE9iamVjdC5hc3NpZ24oc2F2ZWRwYXJzbGV5Rm9ybUluc3RhbmNlLm9wdGlvbnMsIG9wdGlvbnMpO1xuICAgIH1cblxuICAgIHJldHVybiBzYXZlZHBhcnNsZXlGb3JtSW5zdGFuY2U7XG4gIH1cblxuICAvLyBQYXJzbGV5IG11c3QgYmUgaW5zdGFudGlhdGVkIHdpdGggYSBET00gZWxlbWVudCBvciBqUXVlcnkgJGVsZW1lbnRcbiAgaWYgKCF0aGlzLiRlbGVtZW50Lmxlbmd0aClcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ1lvdSBtdXN0IGJpbmQgUGFyc2xleSBvbiBhbiBleGlzdGluZyBlbGVtZW50LicpO1xuXG4gIGlmICgndW5kZWZpbmVkJyAhPT0gdHlwZW9mIHBhcnNsZXlGb3JtSW5zdGFuY2UgJiYgJ0Zvcm0nICE9PSBwYXJzbGV5Rm9ybUluc3RhbmNlLl9fY2xhc3NfXylcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ1BhcmVudCBpbnN0YW5jZSBtdXN0IGJlIGEgRm9ybSBpbnN0YW5jZScpO1xuXG4gIHRoaXMucGFyZW50ID0gcGFyc2xleUZvcm1JbnN0YW5jZSB8fCB3aW5kb3cuUGFyc2xleTtcbiAgcmV0dXJuIHRoaXMuaW5pdChvcHRpb25zKTtcbn07XG5cbkZhY3RvcnkucHJvdG90eXBlID0ge1xuICBpbml0OiBmdW5jdGlvbiAob3B0aW9ucykge1xuICAgIHRoaXMuX19jbGFzc19fID0gJ1BhcnNsZXknO1xuICAgIHRoaXMuX192ZXJzaW9uX18gPSAnQEB2ZXJzaW9uJztcbiAgICB0aGlzLl9faWRfXyA9IFV0aWxzLmdlbmVyYXRlSUQoKTtcblxuICAgIC8vIFByZS1jb21wdXRlIG9wdGlvbnNcbiAgICB0aGlzLl9yZXNldE9wdGlvbnMob3B0aW9ucyk7XG5cbiAgICAvLyBBIEZvcm0gaW5zdGFuY2UgaXMgb2J2aW91c2x5IGEgYDxmb3JtPmAgZWxlbWVudCBidXQgYWxzbyBldmVyeSBub2RlIHRoYXQgaXMgbm90IGFuIGlucHV0IGFuZCBoYXMgdGhlIGBkYXRhLXBhcnNsZXktdmFsaWRhdGVgIGF0dHJpYnV0ZVxuICAgIGlmICh0aGlzLmVsZW1lbnQubm9kZU5hbWUgPT09ICdGT1JNJyB8fCAoVXRpbHMuY2hlY2tBdHRyKHRoaXMuZWxlbWVudCwgdGhpcy5vcHRpb25zLm5hbWVzcGFjZSwgJ3ZhbGlkYXRlJykgJiYgIXRoaXMuJGVsZW1lbnQuaXModGhpcy5vcHRpb25zLmlucHV0cykpKVxuICAgICAgcmV0dXJuIHRoaXMuYmluZCgncGFyc2xleUZvcm0nKTtcblxuICAgIC8vIEV2ZXJ5IG90aGVyIGVsZW1lbnQgaXMgYm91bmQgYXMgYSBgRmllbGRgIG9yIGBGaWVsZE11bHRpcGxlYFxuICAgIHJldHVybiB0aGlzLmlzTXVsdGlwbGUoKSA/IHRoaXMuaGFuZGxlTXVsdGlwbGUoKSA6IHRoaXMuYmluZCgncGFyc2xleUZpZWxkJyk7XG4gIH0sXG5cbiAgaXNNdWx0aXBsZTogZnVuY3Rpb24gKCkge1xuICAgIHZhciB0eXBlID0gVXRpbHMuZ2V0VHlwZSh0aGlzLmVsZW1lbnQpO1xuICAgIHJldHVybiAoKHR5cGUgPT09ICdyYWRpbycgfHwgdHlwZSA9PT0gJ2NoZWNrYm94JykgfHxcbiAgICAgICh0aGlzLmVsZW1lbnQubm9kZU5hbWUgPT09ICdTRUxFQ1QnICYmIG51bGwgIT09IHRoaXMuZWxlbWVudC5nZXRBdHRyaWJ1dGUoJ211bHRpcGxlJykpKTtcbiAgfSxcblxuICAvLyBNdWx0aXBsZXMgZmllbGRzIGFyZSBhIHJlYWwgbmlnaHRtYXJlIDooXG4gIC8vIE1heWJlIHNvbWUgcmVmYWN0b3Jpbmcgd291bGQgYmUgYXBwcmVjaWF0ZWQgaGVyZS4uLlxuICBoYW5kbGVNdWx0aXBsZTogZnVuY3Rpb24gKCkge1xuICAgIHZhciBuYW1lO1xuICAgIHZhciBtdWx0aXBsZTtcbiAgICB2YXIgcGFyc2xleU11bHRpcGxlSW5zdGFuY2U7XG5cbiAgICAvLyBIYW5kbGUgbXVsdGlwbGUgbmFtZVxuICAgIHRoaXMub3B0aW9ucy5tdWx0aXBsZSA9IHRoaXMub3B0aW9ucy5tdWx0aXBsZSB8fFxuICAgICAgKG5hbWUgPSB0aGlzLmVsZW1lbnQuZ2V0QXR0cmlidXRlKCduYW1lJykpIHx8XG4gICAgICB0aGlzLmVsZW1lbnQuZ2V0QXR0cmlidXRlKCdpZCcpO1xuXG4gICAgLy8gU3BlY2lhbCBzZWxlY3QgbXVsdGlwbGUgaW5wdXRcbiAgICBpZiAodGhpcy5lbGVtZW50Lm5vZGVOYW1lID09PSAnU0VMRUNUJyAmJiBudWxsICE9PSB0aGlzLmVsZW1lbnQuZ2V0QXR0cmlidXRlKCdtdWx0aXBsZScpKSB7XG4gICAgICB0aGlzLm9wdGlvbnMubXVsdGlwbGUgPSB0aGlzLm9wdGlvbnMubXVsdGlwbGUgfHwgdGhpcy5fX2lkX187XG4gICAgICByZXR1cm4gdGhpcy5iaW5kKCdwYXJzbGV5RmllbGRNdWx0aXBsZScpO1xuXG4gICAgLy8gRWxzZSBmb3IgcmFkaW8gLyBjaGVja2JveGVzLCB3ZSBuZWVkIGEgYG5hbWVgIG9yIGBkYXRhLXBhcnNsZXktbXVsdGlwbGVgIHRvIHByb3Blcmx5IGJpbmQgaXRcbiAgICB9IGVsc2UgaWYgKCF0aGlzLm9wdGlvbnMubXVsdGlwbGUpIHtcbiAgICAgIFV0aWxzLndhcm4oJ1RvIGJlIGJvdW5kIGJ5IFBhcnNsZXksIGEgcmFkaW8sIGEgY2hlY2tib3ggYW5kIGEgbXVsdGlwbGUgc2VsZWN0IGlucHV0IG11c3QgaGF2ZSBlaXRoZXIgYSBuYW1lIG9yIGEgbXVsdGlwbGUgb3B0aW9uLicsIHRoaXMuJGVsZW1lbnQpO1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgLy8gUmVtb3ZlIHNwZWNpYWwgY2hhcnNcbiAgICB0aGlzLm9wdGlvbnMubXVsdGlwbGUgPSB0aGlzLm9wdGlvbnMubXVsdGlwbGUucmVwbGFjZSgvKDp8XFwufFxcW3xcXF18XFx7fFxcfXxcXCQpL2csICcnKTtcblxuICAgIC8vIEFkZCBwcm9wZXIgYGRhdGEtcGFyc2xleS1tdWx0aXBsZWAgdG8gc2libGluZ3MgaWYgd2UgaGF2ZSBhIHZhbGlkIG11bHRpcGxlIG5hbWVcbiAgICBpZiAobmFtZSkge1xuICAgICAgJCgnaW5wdXRbbmFtZT1cIicgKyBuYW1lICsgJ1wiXScpLmVhY2goKGksIGlucHV0KSA9PiB7XG4gICAgICAgIHZhciB0eXBlID0gVXRpbHMuZ2V0VHlwZShpbnB1dCk7XG4gICAgICAgIGlmICgodHlwZSA9PT0gJ3JhZGlvJyB8fCB0eXBlID09PSAnY2hlY2tib3gnKSlcbiAgICAgICAgICBpbnB1dC5zZXRBdHRyaWJ1dGUodGhpcy5vcHRpb25zLm5hbWVzcGFjZSArICdtdWx0aXBsZScsIHRoaXMub3B0aW9ucy5tdWx0aXBsZSk7XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICAvLyBDaGVjayBoZXJlIGlmIHdlIGRvbid0IGFscmVhZHkgaGF2ZSBhIHJlbGF0ZWQgbXVsdGlwbGUgaW5zdGFuY2Ugc2F2ZWRcbiAgICB2YXIgJHByZXZpb3VzbHlSZWxhdGVkID0gdGhpcy5fZmluZFJlbGF0ZWQoKTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8ICRwcmV2aW91c2x5UmVsYXRlZC5sZW5ndGg7IGkrKykge1xuICAgICAgcGFyc2xleU11bHRpcGxlSW5zdGFuY2UgPSAkKCRwcmV2aW91c2x5UmVsYXRlZC5nZXQoaSkpLmRhdGEoJ1BhcnNsZXknKTtcbiAgICAgIGlmICgndW5kZWZpbmVkJyAhPT0gdHlwZW9mIHBhcnNsZXlNdWx0aXBsZUluc3RhbmNlKSB7XG5cbiAgICAgICAgaWYgKCF0aGlzLiRlbGVtZW50LmRhdGEoJ0ZpZWxkTXVsdGlwbGUnKSkge1xuICAgICAgICAgIHBhcnNsZXlNdWx0aXBsZUluc3RhbmNlLmFkZEVsZW1lbnQodGhpcy4kZWxlbWVudCk7XG4gICAgICAgIH1cblxuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBDcmVhdGUgYSBzZWNyZXQgRmllbGQgaW5zdGFuY2UgZm9yIGV2ZXJ5IG11bHRpcGxlIGZpZWxkLiBJdCB3aWxsIGJlIHN0b3JlZCBpbiBgZGF0YSgnRmllbGRNdWx0aXBsZScpYFxuICAgIC8vIEFuZCB3aWxsIGJlIHVzZWZ1bCBsYXRlciB0byBhY2Nlc3MgY2xhc3NpYyBgRmllbGRgIHN0dWZmIHdoaWxlIGJlaW5nIGluIGEgYEZpZWxkTXVsdGlwbGVgIGluc3RhbmNlXG4gICAgdGhpcy5iaW5kKCdwYXJzbGV5RmllbGQnLCB0cnVlKTtcblxuICAgIHJldHVybiBwYXJzbGV5TXVsdGlwbGVJbnN0YW5jZSB8fCB0aGlzLmJpbmQoJ3BhcnNsZXlGaWVsZE11bHRpcGxlJyk7XG4gIH0sXG5cbiAgLy8gUmV0dXJuIHByb3BlciBgRm9ybWAsIGBGaWVsZGAgb3IgYEZpZWxkTXVsdGlwbGVgXG4gIGJpbmQ6IGZ1bmN0aW9uICh0eXBlLCBkb05vdFN0b3JlKSB7XG4gICAgdmFyIHBhcnNsZXlJbnN0YW5jZTtcblxuICAgIHN3aXRjaCAodHlwZSkge1xuICAgICAgY2FzZSAncGFyc2xleUZvcm0nOlxuICAgICAgICBwYXJzbGV5SW5zdGFuY2UgPSAkLmV4dGVuZChcbiAgICAgICAgICBuZXcgRm9ybSh0aGlzLmVsZW1lbnQsIHRoaXMuZG9tT3B0aW9ucywgdGhpcy5vcHRpb25zKSxcbiAgICAgICAgICBuZXcgQmFzZSgpLFxuICAgICAgICAgIHdpbmRvdy5QYXJzbGV5RXh0ZW5kXG4gICAgICAgICkuX2JpbmRGaWVsZHMoKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlICdwYXJzbGV5RmllbGQnOlxuICAgICAgICBwYXJzbGV5SW5zdGFuY2UgPSAkLmV4dGVuZChcbiAgICAgICAgICBuZXcgRmllbGQodGhpcy5lbGVtZW50LCB0aGlzLmRvbU9wdGlvbnMsIHRoaXMub3B0aW9ucywgdGhpcy5wYXJlbnQpLFxuICAgICAgICAgIG5ldyBCYXNlKCksXG4gICAgICAgICAgd2luZG93LlBhcnNsZXlFeHRlbmRcbiAgICAgICAgKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlICdwYXJzbGV5RmllbGRNdWx0aXBsZSc6XG4gICAgICAgIHBhcnNsZXlJbnN0YW5jZSA9ICQuZXh0ZW5kKFxuICAgICAgICAgIG5ldyBGaWVsZCh0aGlzLmVsZW1lbnQsIHRoaXMuZG9tT3B0aW9ucywgdGhpcy5vcHRpb25zLCB0aGlzLnBhcmVudCksXG4gICAgICAgICAgbmV3IE11bHRpcGxlKCksXG4gICAgICAgICAgbmV3IEJhc2UoKSxcbiAgICAgICAgICB3aW5kb3cuUGFyc2xleUV4dGVuZFxuICAgICAgICApLl9pbml0KCk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgZGVmYXVsdDpcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKHR5cGUgKyAnaXMgbm90IGEgc3VwcG9ydGVkIFBhcnNsZXkgdHlwZScpO1xuICAgIH1cblxuICAgIGlmICh0aGlzLm9wdGlvbnMubXVsdGlwbGUpXG4gICAgICBVdGlscy5zZXRBdHRyKHRoaXMuZWxlbWVudCwgdGhpcy5vcHRpb25zLm5hbWVzcGFjZSwgJ211bHRpcGxlJywgdGhpcy5vcHRpb25zLm11bHRpcGxlKTtcblxuICAgIGlmICgndW5kZWZpbmVkJyAhPT0gdHlwZW9mIGRvTm90U3RvcmUpIHtcbiAgICAgIHRoaXMuJGVsZW1lbnQuZGF0YSgnRmllbGRNdWx0aXBsZScsIHBhcnNsZXlJbnN0YW5jZSk7XG5cbiAgICAgIHJldHVybiBwYXJzbGV5SW5zdGFuY2U7XG4gICAgfVxuXG4gICAgLy8gU3RvcmUgdGhlIGZyZXNobHkgYm91bmQgaW5zdGFuY2UgaW4gYSBET00gZWxlbWVudCBmb3IgbGF0ZXIgYWNjZXNzIHVzaW5nIGpRdWVyeSBgZGF0YSgpYFxuICAgIHRoaXMuJGVsZW1lbnQuZGF0YSgnUGFyc2xleScsIHBhcnNsZXlJbnN0YW5jZSk7XG5cbiAgICAvLyBUZWxsIHRoZSB3b3JsZCB3ZSBoYXZlIGEgbmV3IEZvcm0gb3IgRmllbGQgaW5zdGFuY2UhXG4gICAgcGFyc2xleUluc3RhbmNlLl9hY3R1YWxpemVUcmlnZ2VycygpO1xuICAgIHBhcnNsZXlJbnN0YW5jZS5fdHJpZ2dlcignaW5pdCcpO1xuXG4gICAgcmV0dXJuIHBhcnNsZXlJbnN0YW5jZTtcbiAgfVxufTtcblxuZXhwb3J0IGRlZmF1bHQgRmFjdG9yeTtcbiIsImltcG9ydCAkIGZyb20gJ2pxdWVyeSc7XG5pbXBvcnQgQ29uc3RyYWludCBmcm9tICcuL2NvbnN0cmFpbnQnO1xuaW1wb3J0IFVJIGZyb20gJy4vdWknO1xuaW1wb3J0IFV0aWxzIGZyb20gJy4vdXRpbHMnO1xuXG52YXIgRmllbGQgPSBmdW5jdGlvbiAoZmllbGQsIGRvbU9wdGlvbnMsIG9wdGlvbnMsIHBhcnNsZXlGb3JtSW5zdGFuY2UpIHtcbiAgdGhpcy5fX2NsYXNzX18gPSAnRmllbGQnO1xuXG4gIHRoaXMuZWxlbWVudCA9IGZpZWxkO1xuICB0aGlzLiRlbGVtZW50ID0gJChmaWVsZCk7XG5cbiAgLy8gU2V0IHBhcmVudCBpZiB3ZSBoYXZlIG9uZVxuICBpZiAoJ3VuZGVmaW5lZCcgIT09IHR5cGVvZiBwYXJzbGV5Rm9ybUluc3RhbmNlKSB7XG4gICAgdGhpcy5wYXJlbnQgPSBwYXJzbGV5Rm9ybUluc3RhbmNlO1xuICB9XG5cbiAgdGhpcy5vcHRpb25zID0gb3B0aW9ucztcbiAgdGhpcy5kb21PcHRpb25zID0gZG9tT3B0aW9ucztcblxuICAvLyBJbml0aWFsaXplIHNvbWUgcHJvcGVydGllc1xuICB0aGlzLmNvbnN0cmFpbnRzID0gW107XG4gIHRoaXMuY29uc3RyYWludHNCeU5hbWUgPSB7fTtcbiAgdGhpcy52YWxpZGF0aW9uUmVzdWx0ID0gdHJ1ZTtcblxuICAvLyBCaW5kIGNvbnN0cmFpbnRzXG4gIHRoaXMuX2JpbmRDb25zdHJhaW50cygpO1xufTtcblxudmFyIHN0YXR1c01hcHBpbmcgPSB7cGVuZGluZzogbnVsbCwgcmVzb2x2ZWQ6IHRydWUsIHJlamVjdGVkOiBmYWxzZX07XG5cbkZpZWxkLnByb3RvdHlwZSA9IHtcbiAgLy8gIyBQdWJsaWMgQVBJXG4gIC8vIFZhbGlkYXRlIGZpZWxkIGFuZCB0cmlnZ2VyIHNvbWUgZXZlbnRzIGZvciBtYWlubHkgYFVJYFxuICAvLyBAcmV0dXJucyBgdHJ1ZWAsIGFuIGFycmF5IG9mIHRoZSB2YWxpZGF0b3JzIHRoYXQgZmFpbGVkLCBvclxuICAvLyBgbnVsbGAgaWYgdmFsaWRhdGlvbiBpcyBub3QgZmluaXNoZWQuIFByZWZlciB1c2luZyB3aGVuVmFsaWRhdGVcbiAgdmFsaWRhdGU6IGZ1bmN0aW9uIChvcHRpb25zKSB7XG4gICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPj0gMSAmJiAhJC5pc1BsYWluT2JqZWN0KG9wdGlvbnMpKSB7XG4gICAgICBVdGlscy53YXJuT25jZSgnQ2FsbGluZyB2YWxpZGF0ZSBvbiBhIHBhcnNsZXkgZmllbGQgd2l0aG91dCBwYXNzaW5nIGFyZ3VtZW50cyBhcyBhbiBvYmplY3QgaXMgZGVwcmVjYXRlZC4nKTtcbiAgICAgIG9wdGlvbnMgPSB7b3B0aW9uc307XG4gICAgfVxuICAgIHZhciBwcm9taXNlID0gdGhpcy53aGVuVmFsaWRhdGUob3B0aW9ucyk7XG4gICAgaWYgKCFwcm9taXNlKSAgLy8gSWYgZXhjbHVkZWQgd2l0aCBgZ3JvdXBgIG9wdGlvblxuICAgICAgcmV0dXJuIHRydWU7XG4gICAgc3dpdGNoIChwcm9taXNlLnN0YXRlKCkpIHtcbiAgICAgIGNhc2UgJ3BlbmRpbmcnOiByZXR1cm4gbnVsbDtcbiAgICAgIGNhc2UgJ3Jlc29sdmVkJzogcmV0dXJuIHRydWU7XG4gICAgICBjYXNlICdyZWplY3RlZCc6IHJldHVybiB0aGlzLnZhbGlkYXRpb25SZXN1bHQ7XG4gICAgfVxuICB9LFxuXG4gIC8vIFZhbGlkYXRlIGZpZWxkIGFuZCB0cmlnZ2VyIHNvbWUgZXZlbnRzIGZvciBtYWlubHkgYFVJYFxuICAvLyBAcmV0dXJucyBhIHByb21pc2UgdGhhdCBzdWNjZWVkcyBvbmx5IHdoZW4gYWxsIHZhbGlkYXRpb25zIGRvXG4gIC8vIG9yIGB1bmRlZmluZWRgIGlmIGZpZWxkIGlzIG5vdCBpbiB0aGUgZ2l2ZW4gYGdyb3VwYC5cbiAgd2hlblZhbGlkYXRlOiBmdW5jdGlvbiAoe2ZvcmNlLCBncm91cH0gPSAge30pIHtcbiAgICAvLyBkbyBub3QgdmFsaWRhdGUgYSBmaWVsZCBpZiBub3QgdGhlIHNhbWUgYXMgZ2l2ZW4gdmFsaWRhdGlvbiBncm91cFxuICAgIHRoaXMucmVmcmVzaCgpO1xuICAgIGlmIChncm91cCAmJiAhdGhpcy5faXNJbkdyb3VwKGdyb3VwKSlcbiAgICAgIHJldHVybjtcblxuICAgIHRoaXMudmFsdWUgPSB0aGlzLmdldFZhbHVlKCk7XG5cbiAgICAvLyBGaWVsZCBWYWxpZGF0ZSBldmVudC4gYHRoaXMudmFsdWVgIGNvdWxkIGJlIGFsdGVyZWQgZm9yIGN1c3RvbSBuZWVkc1xuICAgIHRoaXMuX3RyaWdnZXIoJ3ZhbGlkYXRlJyk7XG5cbiAgICByZXR1cm4gdGhpcy53aGVuVmFsaWQoe2ZvcmNlLCB2YWx1ZTogdGhpcy52YWx1ZSwgX3JlZnJlc2hlZDogdHJ1ZX0pXG4gICAgICAuYWx3YXlzKCgpID0+IHsgdGhpcy5fcmVmbG93VUkoKTsgfSlcbiAgICAgIC5kb25lKCgpID0+ICAgeyB0aGlzLl90cmlnZ2VyKCdzdWNjZXNzJyk7IH0pXG4gICAgICAuZmFpbCgoKSA9PiAgIHsgdGhpcy5fdHJpZ2dlcignZXJyb3InKTsgfSlcbiAgICAgIC5hbHdheXMoKCkgPT4geyB0aGlzLl90cmlnZ2VyKCd2YWxpZGF0ZWQnKTsgfSlcbiAgICAgIC5waXBlKC4uLnRoaXMuX3BpcGVBY2NvcmRpbmdUb1ZhbGlkYXRpb25SZXN1bHQoKSk7XG4gIH0sXG5cbiAgaGFzQ29uc3RyYWludHM6IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gMCAhPT0gdGhpcy5jb25zdHJhaW50cy5sZW5ndGg7XG4gIH0sXG5cbiAgLy8gQW4gZW1wdHkgb3B0aW9uYWwgZmllbGQgZG9lcyBub3QgbmVlZCB2YWxpZGF0aW9uXG4gIG5lZWRzVmFsaWRhdGlvbjogZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgaWYgKCd1bmRlZmluZWQnID09PSB0eXBlb2YgdmFsdWUpXG4gICAgICB2YWx1ZSA9IHRoaXMuZ2V0VmFsdWUoKTtcblxuICAgIC8vIElmIGEgZmllbGQgaXMgZW1wdHkgYW5kIG5vdCByZXF1aXJlZCwgaXQgaXMgdmFsaWRcbiAgICAvLyBFeGNlcHQgaWYgYGRhdGEtcGFyc2xleS12YWxpZGF0ZS1pZi1lbXB0eWAgZXhwbGljaXRlbHkgYWRkZWQsIHVzZWZ1bCBmb3Igc29tZSBjdXN0b20gdmFsaWRhdG9yc1xuICAgIGlmICghdmFsdWUubGVuZ3RoICYmICF0aGlzLl9pc1JlcXVpcmVkKCkgJiYgJ3VuZGVmaW5lZCcgPT09IHR5cGVvZiB0aGlzLm9wdGlvbnMudmFsaWRhdGVJZkVtcHR5KVxuICAgICAgcmV0dXJuIGZhbHNlO1xuXG4gICAgcmV0dXJuIHRydWU7XG4gIH0sXG5cbiAgX2lzSW5Hcm91cDogZnVuY3Rpb24gKGdyb3VwKSB7XG4gICAgaWYgKEFycmF5LmlzQXJyYXkodGhpcy5vcHRpb25zLmdyb3VwKSlcbiAgICAgIHJldHVybiAtMSAhPT0gJC5pbkFycmF5KGdyb3VwLCB0aGlzLm9wdGlvbnMuZ3JvdXApO1xuICAgIHJldHVybiB0aGlzLm9wdGlvbnMuZ3JvdXAgPT09IGdyb3VwO1xuICB9LFxuXG4gIC8vIEp1c3QgdmFsaWRhdGUgZmllbGQuIERvIG5vdCB0cmlnZ2VyIGFueSBldmVudC5cbiAgLy8gUmV0dXJucyBgdHJ1ZWAgaWZmIGFsbCBjb25zdHJhaW50cyBwYXNzLCBgZmFsc2VgIGlmIHRoZXJlIGFyZSBmYWlsdXJlcyxcbiAgLy8gb3IgYG51bGxgIGlmIHRoZSByZXN1bHQgY2FuIG5vdCBiZSBkZXRlcm1pbmVkIHlldCAoZGVwZW5kcyBvbiBhIHByb21pc2UpXG4gIC8vIFNlZSBhbHNvIGB3aGVuVmFsaWRgLlxuICBpc1ZhbGlkOiBmdW5jdGlvbiAob3B0aW9ucykge1xuICAgIGlmIChhcmd1bWVudHMubGVuZ3RoID49IDEgJiYgISQuaXNQbGFpbk9iamVjdChvcHRpb25zKSkge1xuICAgICAgVXRpbHMud2Fybk9uY2UoJ0NhbGxpbmcgaXNWYWxpZCBvbiBhIHBhcnNsZXkgZmllbGQgd2l0aG91dCBwYXNzaW5nIGFyZ3VtZW50cyBhcyBhbiBvYmplY3QgaXMgZGVwcmVjYXRlZC4nKTtcbiAgICAgIHZhciBbZm9yY2UsIHZhbHVlXSA9IGFyZ3VtZW50cztcbiAgICAgIG9wdGlvbnMgPSB7Zm9yY2UsIHZhbHVlfTtcbiAgICB9XG4gICAgdmFyIHByb21pc2UgPSB0aGlzLndoZW5WYWxpZChvcHRpb25zKTtcbiAgICBpZiAoIXByb21pc2UpIC8vIEV4Y2x1ZGVkIHZpYSBgZ3JvdXBgXG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICByZXR1cm4gc3RhdHVzTWFwcGluZ1twcm9taXNlLnN0YXRlKCldO1xuICB9LFxuXG4gIC8vIEp1c3QgdmFsaWRhdGUgZmllbGQuIERvIG5vdCB0cmlnZ2VyIGFueSBldmVudC5cbiAgLy8gQHJldHVybnMgYSBwcm9taXNlIHRoYXQgc3VjY2VlZHMgb25seSB3aGVuIGFsbCB2YWxpZGF0aW9ucyBkb1xuICAvLyBvciBgdW5kZWZpbmVkYCBpZiB0aGUgZmllbGQgaXMgbm90IGluIHRoZSBnaXZlbiBgZ3JvdXBgLlxuICAvLyBUaGUgYXJndW1lbnQgYGZvcmNlYCB3aWxsIGZvcmNlIHZhbGlkYXRpb24gb2YgZW1wdHkgZmllbGRzLlxuICAvLyBJZiBhIGB2YWx1ZWAgaXMgZ2l2ZW4sIGl0IHdpbGwgYmUgdmFsaWRhdGVkIGluc3RlYWQgb2YgdGhlIHZhbHVlIG9mIHRoZSBpbnB1dC5cbiAgd2hlblZhbGlkOiBmdW5jdGlvbiAoe2ZvcmNlID0gZmFsc2UsIHZhbHVlLCBncm91cCwgX3JlZnJlc2hlZH0gPSB7fSkge1xuICAgIC8vIFJlY29tcHV0ZSBvcHRpb25zIGFuZCByZWJpbmQgY29uc3RyYWludHMgdG8gaGF2ZSBsYXRlc3QgY2hhbmdlc1xuICAgIGlmICghX3JlZnJlc2hlZClcbiAgICAgIHRoaXMucmVmcmVzaCgpO1xuICAgIC8vIGRvIG5vdCB2YWxpZGF0ZSBhIGZpZWxkIGlmIG5vdCB0aGUgc2FtZSBhcyBnaXZlbiB2YWxpZGF0aW9uIGdyb3VwXG4gICAgaWYgKGdyb3VwICYmICF0aGlzLl9pc0luR3JvdXAoZ3JvdXApKVxuICAgICAgcmV0dXJuO1xuXG4gICAgdGhpcy52YWxpZGF0aW9uUmVzdWx0ID0gdHJ1ZTtcblxuICAgIC8vIEEgZmllbGQgd2l0aG91dCBjb25zdHJhaW50IGlzIHZhbGlkXG4gICAgaWYgKCF0aGlzLmhhc0NvbnN0cmFpbnRzKCkpXG4gICAgICByZXR1cm4gJC53aGVuKCk7XG5cbiAgICAvLyBWYWx1ZSBjb3VsZCBiZSBwYXNzZWQgYXMgYXJndW1lbnQsIG5lZWRlZCB0byBhZGQgbW9yZSBwb3dlciB0byAnZmllbGQ6dmFsaWRhdGUnXG4gICAgaWYgKCd1bmRlZmluZWQnID09PSB0eXBlb2YgdmFsdWUgfHwgbnVsbCA9PT0gdmFsdWUpXG4gICAgICB2YWx1ZSA9IHRoaXMuZ2V0VmFsdWUoKTtcblxuICAgIGlmICghdGhpcy5uZWVkc1ZhbGlkYXRpb24odmFsdWUpICYmIHRydWUgIT09IGZvcmNlKVxuICAgICAgcmV0dXJuICQud2hlbigpO1xuXG4gICAgdmFyIGdyb3VwZWRDb25zdHJhaW50cyA9IHRoaXMuX2dldEdyb3VwZWRDb25zdHJhaW50cygpO1xuICAgIHZhciBwcm9taXNlcyA9IFtdO1xuICAgICQuZWFjaChncm91cGVkQ29uc3RyYWludHMsIChfLCBjb25zdHJhaW50cykgPT4ge1xuICAgICAgLy8gUHJvY2VzcyBvbmUgZ3JvdXAgb2YgY29uc3RyYWludHMgYXQgYSB0aW1lLCB3ZSB2YWxpZGF0ZSB0aGUgY29uc3RyYWludHNcbiAgICAgIC8vIGFuZCBjb21iaW5lIHRoZSBwcm9taXNlcyB0b2dldGhlci5cbiAgICAgIHZhciBwcm9taXNlID0gVXRpbHMuYWxsKFxuICAgICAgICAkLm1hcChjb25zdHJhaW50cywgY29uc3RyYWludCA9PiB0aGlzLl92YWxpZGF0ZUNvbnN0cmFpbnQodmFsdWUsIGNvbnN0cmFpbnQpKVxuICAgICAgKTtcbiAgICAgIHByb21pc2VzLnB1c2gocHJvbWlzZSk7XG4gICAgICBpZiAocHJvbWlzZS5zdGF0ZSgpID09PSAncmVqZWN0ZWQnKVxuICAgICAgICByZXR1cm4gZmFsc2U7IC8vIEludGVycnVwdCBwcm9jZXNzaW5nIGlmIGEgZ3JvdXAgaGFzIGFscmVhZHkgZmFpbGVkXG4gICAgfSk7XG4gICAgcmV0dXJuIFV0aWxzLmFsbChwcm9taXNlcyk7XG4gIH0sXG5cbiAgLy8gQHJldHVybnMgYSBwcm9taXNlXG4gIF92YWxpZGF0ZUNvbnN0cmFpbnQ6IGZ1bmN0aW9uKHZhbHVlLCBjb25zdHJhaW50KSB7XG4gICAgdmFyIHJlc3VsdCA9IGNvbnN0cmFpbnQudmFsaWRhdGUodmFsdWUsIHRoaXMpO1xuICAgIC8vIE1hcCBmYWxzZSB0byBhIGZhaWxlZCBwcm9taXNlXG4gICAgaWYgKGZhbHNlID09PSByZXN1bHQpXG4gICAgICByZXN1bHQgPSAkLkRlZmVycmVkKCkucmVqZWN0KCk7XG4gICAgLy8gTWFrZSBzdXJlIHdlIHJldHVybiBhIHByb21pc2UgYW5kIHRoYXQgd2UgcmVjb3JkIGZhaWx1cmVzXG4gICAgcmV0dXJuIFV0aWxzLmFsbChbcmVzdWx0XSkuZmFpbChlcnJvck1lc3NhZ2UgPT4ge1xuICAgICAgaWYgKCEodGhpcy52YWxpZGF0aW9uUmVzdWx0IGluc3RhbmNlb2YgQXJyYXkpKVxuICAgICAgICB0aGlzLnZhbGlkYXRpb25SZXN1bHQgPSBbXTtcbiAgICAgIHRoaXMudmFsaWRhdGlvblJlc3VsdC5wdXNoKHtcbiAgICAgICAgYXNzZXJ0OiBjb25zdHJhaW50LFxuICAgICAgICBlcnJvck1lc3NhZ2U6ICdzdHJpbmcnID09PSB0eXBlb2YgZXJyb3JNZXNzYWdlICYmIGVycm9yTWVzc2FnZVxuICAgICAgfSk7XG4gICAgfSk7XG4gIH0sXG5cbiAgLy8gQHJldHVybnMgUGFyc2xleSBmaWVsZCBjb21wdXRlZCB2YWx1ZSB0aGF0IGNvdWxkIGJlIG92ZXJyaWRlZCBvciBjb25maWd1cmVkIGluIERPTVxuICBnZXRWYWx1ZTogZnVuY3Rpb24gKCkge1xuICAgIHZhciB2YWx1ZTtcblxuICAgIC8vIFZhbHVlIGNvdWxkIGJlIG92ZXJyaWRlbiBpbiBET00gb3Igd2l0aCBleHBsaWNpdCBvcHRpb25zXG4gICAgaWYgKCdmdW5jdGlvbicgPT09IHR5cGVvZiB0aGlzLm9wdGlvbnMudmFsdWUpXG4gICAgICB2YWx1ZSA9IHRoaXMub3B0aW9ucy52YWx1ZSh0aGlzKTtcbiAgICBlbHNlIGlmICgndW5kZWZpbmVkJyAhPT0gdHlwZW9mIHRoaXMub3B0aW9ucy52YWx1ZSlcbiAgICAgIHZhbHVlID0gdGhpcy5vcHRpb25zLnZhbHVlO1xuICAgIGVsc2VcbiAgICAgIHZhbHVlID0gdGhpcy4kZWxlbWVudC52YWwoKTtcblxuICAgIC8vIEhhbmRsZSB3cm9uZyBET00gb3IgY29uZmlndXJhdGlvbnNcbiAgICBpZiAoJ3VuZGVmaW5lZCcgPT09IHR5cGVvZiB2YWx1ZSB8fCBudWxsID09PSB2YWx1ZSlcbiAgICAgIHJldHVybiAnJztcblxuICAgIHJldHVybiB0aGlzLl9oYW5kbGVXaGl0ZXNwYWNlKHZhbHVlKTtcbiAgfSxcblxuICAvLyBSZXNldCBVSVxuICByZXNldDogZnVuY3Rpb24gKCkge1xuICAgIHRoaXMuX3Jlc2V0VUkoKTtcbiAgICByZXR1cm4gdGhpcy5fdHJpZ2dlcigncmVzZXQnKTtcbiAgfSxcblxuICAvLyBEZXN0cm95IFBhcnNsZXkgaW5zdGFuY2UgKCsgVUkpXG4gIGRlc3Ryb3k6IGZ1bmN0aW9uICgpIHtcbiAgICAvLyBGaWVsZCBjYXNlOiBlbWl0IGRlc3Ryb3kgZXZlbnQgdG8gY2xlYW4gVUkgYW5kIHRoZW4gZGVzdHJveSBzdG9yZWQgaW5zdGFuY2VcbiAgICB0aGlzLl9kZXN0cm95VUkoKTtcbiAgICB0aGlzLiRlbGVtZW50LnJlbW92ZURhdGEoJ1BhcnNsZXknKTtcbiAgICB0aGlzLiRlbGVtZW50LnJlbW92ZURhdGEoJ0ZpZWxkTXVsdGlwbGUnKTtcbiAgICB0aGlzLl90cmlnZ2VyKCdkZXN0cm95Jyk7XG4gIH0sXG5cbiAgLy8gQWN0dWFsaXplIG9wdGlvbnMgYW5kIHJlYmluZCBjb25zdHJhaW50c1xuICByZWZyZXNoOiBmdW5jdGlvbiAoKSB7XG4gICAgdGhpcy5fcmVmcmVzaENvbnN0cmFpbnRzKCk7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH0sXG5cbiAgX3JlZnJlc2hDb25zdHJhaW50czogZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiB0aGlzLmFjdHVhbGl6ZU9wdGlvbnMoKS5fYmluZENvbnN0cmFpbnRzKCk7XG4gIH0sXG5cbiAgcmVmcmVzaENvbnN0cmFpbnRzOiBmdW5jdGlvbigpIHtcbiAgICBVdGlscy53YXJuT25jZShcIlBhcnNsZXkncyByZWZyZXNoQ29uc3RyYWludHMgaXMgZGVwcmVjYXRlZC4gUGxlYXNlIHVzZSByZWZyZXNoXCIpO1xuICAgIHJldHVybiB0aGlzLnJlZnJlc2goKTtcbiAgfSxcblxuICAvKipcbiAgKiBBZGQgYSBuZXcgY29uc3RyYWludCB0byBhIGZpZWxkXG4gICpcbiAgKiBAcGFyYW0ge1N0cmluZ30gICBuYW1lXG4gICogQHBhcmFtIHtNaXhlZH0gICAgcmVxdWlyZW1lbnRzICAgICAgb3B0aW9uYWxcbiAgKiBAcGFyYW0ge051bWJlcn0gICBwcmlvcml0eSAgICAgICAgICBvcHRpb25hbFxuICAqIEBwYXJhbSB7Qm9vbGVhbn0gIGlzRG9tQ29uc3RyYWludCAgIG9wdGlvbmFsXG4gICovXG4gIGFkZENvbnN0cmFpbnQ6IGZ1bmN0aW9uIChuYW1lLCByZXF1aXJlbWVudHMsIHByaW9yaXR5LCBpc0RvbUNvbnN0cmFpbnQpIHtcblxuICAgIGlmICh3aW5kb3cuUGFyc2xleS5fdmFsaWRhdG9yUmVnaXN0cnkudmFsaWRhdG9yc1tuYW1lXSkge1xuICAgICAgdmFyIGNvbnN0cmFpbnQgPSBuZXcgQ29uc3RyYWludCh0aGlzLCBuYW1lLCByZXF1aXJlbWVudHMsIHByaW9yaXR5LCBpc0RvbUNvbnN0cmFpbnQpO1xuXG4gICAgICAvLyBpZiBjb25zdHJhaW50IGFscmVhZHkgZXhpc3QsIGRlbGV0ZSBpdCBhbmQgcHVzaCBuZXcgdmVyc2lvblxuICAgICAgaWYgKCd1bmRlZmluZWQnICE9PSB0aGlzLmNvbnN0cmFpbnRzQnlOYW1lW2NvbnN0cmFpbnQubmFtZV0pXG4gICAgICAgIHRoaXMucmVtb3ZlQ29uc3RyYWludChjb25zdHJhaW50Lm5hbWUpO1xuXG4gICAgICB0aGlzLmNvbnN0cmFpbnRzLnB1c2goY29uc3RyYWludCk7XG4gICAgICB0aGlzLmNvbnN0cmFpbnRzQnlOYW1lW2NvbnN0cmFpbnQubmFtZV0gPSBjb25zdHJhaW50O1xuICAgIH1cblxuICAgIHJldHVybiB0aGlzO1xuICB9LFxuXG4gIC8vIFJlbW92ZSBhIGNvbnN0cmFpbnRcbiAgcmVtb3ZlQ29uc3RyYWludDogZnVuY3Rpb24gKG5hbWUpIHtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMuY29uc3RyYWludHMubGVuZ3RoOyBpKyspXG4gICAgICBpZiAobmFtZSA9PT0gdGhpcy5jb25zdHJhaW50c1tpXS5uYW1lKSB7XG4gICAgICAgIHRoaXMuY29uc3RyYWludHMuc3BsaWNlKGksIDEpO1xuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICBkZWxldGUgdGhpcy5jb25zdHJhaW50c0J5TmFtZVtuYW1lXTtcbiAgICByZXR1cm4gdGhpcztcbiAgfSxcblxuICAvLyBVcGRhdGUgYSBjb25zdHJhaW50IChSZW1vdmUgKyByZS1hZGQpXG4gIHVwZGF0ZUNvbnN0cmFpbnQ6IGZ1bmN0aW9uIChuYW1lLCBwYXJhbWV0ZXJzLCBwcmlvcml0eSkge1xuICAgIHJldHVybiB0aGlzLnJlbW92ZUNvbnN0cmFpbnQobmFtZSlcbiAgICAgIC5hZGRDb25zdHJhaW50KG5hbWUsIHBhcmFtZXRlcnMsIHByaW9yaXR5KTtcbiAgfSxcblxuICAvLyAjIEludGVybmFsc1xuXG4gIC8vIEludGVybmFsIG9ubHkuXG4gIC8vIEJpbmQgY29uc3RyYWludHMgZnJvbSBjb25maWcgKyBvcHRpb25zICsgRE9NXG4gIF9iaW5kQ29uc3RyYWludHM6IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgY29uc3RyYWludHMgPSBbXTtcbiAgICB2YXIgY29uc3RyYWludHNCeU5hbWUgPSB7fTtcblxuICAgIC8vIGNsZWFuIGFsbCBleGlzdGluZyBET00gY29uc3RyYWludHMgdG8gb25seSBrZWVwIGphdmFzY3JpcHQgdXNlciBjb25zdHJhaW50c1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy5jb25zdHJhaW50cy5sZW5ndGg7IGkrKylcbiAgICAgIGlmIChmYWxzZSA9PT0gdGhpcy5jb25zdHJhaW50c1tpXS5pc0RvbUNvbnN0cmFpbnQpIHtcbiAgICAgICAgY29uc3RyYWludHMucHVzaCh0aGlzLmNvbnN0cmFpbnRzW2ldKTtcbiAgICAgICAgY29uc3RyYWludHNCeU5hbWVbdGhpcy5jb25zdHJhaW50c1tpXS5uYW1lXSA9IHRoaXMuY29uc3RyYWludHNbaV07XG4gICAgICB9XG5cbiAgICB0aGlzLmNvbnN0cmFpbnRzID0gY29uc3RyYWludHM7XG4gICAgdGhpcy5jb25zdHJhaW50c0J5TmFtZSA9IGNvbnN0cmFpbnRzQnlOYW1lO1xuXG4gICAgLy8gdGhlbiByZS1hZGQgUGFyc2xleSBET00tQVBJIGNvbnN0cmFpbnRzXG4gICAgZm9yICh2YXIgbmFtZSBpbiB0aGlzLm9wdGlvbnMpXG4gICAgICB0aGlzLmFkZENvbnN0cmFpbnQobmFtZSwgdGhpcy5vcHRpb25zW25hbWVdLCB1bmRlZmluZWQsIHRydWUpO1xuXG4gICAgLy8gZmluYWxseSwgYmluZCBzcGVjaWFsIEhUTUw1IGNvbnN0cmFpbnRzXG4gICAgcmV0dXJuIHRoaXMuX2JpbmRIdG1sNUNvbnN0cmFpbnRzKCk7XG4gIH0sXG5cbiAgLy8gSW50ZXJuYWwgb25seS5cbiAgLy8gQmluZCBzcGVjaWZpYyBIVE1MNSBjb25zdHJhaW50cyB0byBiZSBIVE1MNSBjb21wbGlhbnRcbiAgX2JpbmRIdG1sNUNvbnN0cmFpbnRzOiBmdW5jdGlvbiAoKSB7XG4gICAgLy8gaHRtbDUgcmVxdWlyZWRcbiAgICBpZiAobnVsbCAhPT0gdGhpcy5lbGVtZW50LmdldEF0dHJpYnV0ZSgncmVxdWlyZWQnKSlcbiAgICAgIHRoaXMuYWRkQ29uc3RyYWludCgncmVxdWlyZWQnLCB0cnVlLCB1bmRlZmluZWQsIHRydWUpO1xuXG4gICAgLy8gaHRtbDUgcGF0dGVyblxuICAgIGlmIChudWxsICE9PSB0aGlzLmVsZW1lbnQuZ2V0QXR0cmlidXRlKCdwYXR0ZXJuJykpXG4gICAgICB0aGlzLmFkZENvbnN0cmFpbnQoJ3BhdHRlcm4nLCB0aGlzLmVsZW1lbnQuZ2V0QXR0cmlidXRlKCdwYXR0ZXJuJyksIHVuZGVmaW5lZCwgdHJ1ZSk7XG5cbiAgICAvLyByYW5nZVxuICAgIGxldCBtaW4gPSB0aGlzLmVsZW1lbnQuZ2V0QXR0cmlidXRlKCdtaW4nKTtcbiAgICBsZXQgbWF4ID0gdGhpcy5lbGVtZW50LmdldEF0dHJpYnV0ZSgnbWF4Jyk7XG4gICAgaWYgKG51bGwgIT09IG1pbiAmJiBudWxsICE9PSBtYXgpXG4gICAgICB0aGlzLmFkZENvbnN0cmFpbnQoJ3JhbmdlJywgW21pbiwgbWF4XSwgdW5kZWZpbmVkLCB0cnVlKTtcblxuICAgIC8vIEhUTUw1IG1pblxuICAgIGVsc2UgaWYgKG51bGwgIT09IG1pbilcbiAgICAgIHRoaXMuYWRkQ29uc3RyYWludCgnbWluJywgbWluLCB1bmRlZmluZWQsIHRydWUpO1xuXG4gICAgLy8gSFRNTDUgbWF4XG4gICAgZWxzZSBpZiAobnVsbCAhPT0gbWF4KVxuICAgICAgdGhpcy5hZGRDb25zdHJhaW50KCdtYXgnLCBtYXgsIHVuZGVmaW5lZCwgdHJ1ZSk7XG5cblxuICAgIC8vIGxlbmd0aFxuICAgIGlmIChudWxsICE9PSB0aGlzLmVsZW1lbnQuZ2V0QXR0cmlidXRlKCdtaW5sZW5ndGgnKSAmJiBudWxsICE9PSB0aGlzLmVsZW1lbnQuZ2V0QXR0cmlidXRlKCdtYXhsZW5ndGgnKSlcbiAgICAgIHRoaXMuYWRkQ29uc3RyYWludCgnbGVuZ3RoJywgW3RoaXMuZWxlbWVudC5nZXRBdHRyaWJ1dGUoJ21pbmxlbmd0aCcpLCB0aGlzLmVsZW1lbnQuZ2V0QXR0cmlidXRlKCdtYXhsZW5ndGgnKV0sIHVuZGVmaW5lZCwgdHJ1ZSk7XG5cbiAgICAvLyBIVE1MNSBtaW5sZW5ndGhcbiAgICBlbHNlIGlmIChudWxsICE9PSB0aGlzLmVsZW1lbnQuZ2V0QXR0cmlidXRlKCdtaW5sZW5ndGgnKSlcbiAgICAgIHRoaXMuYWRkQ29uc3RyYWludCgnbWlubGVuZ3RoJywgdGhpcy5lbGVtZW50LmdldEF0dHJpYnV0ZSgnbWlubGVuZ3RoJyksIHVuZGVmaW5lZCwgdHJ1ZSk7XG5cbiAgICAvLyBIVE1MNSBtYXhsZW5ndGhcbiAgICBlbHNlIGlmIChudWxsICE9PSB0aGlzLmVsZW1lbnQuZ2V0QXR0cmlidXRlKCdtYXhsZW5ndGgnKSlcbiAgICAgIHRoaXMuYWRkQ29uc3RyYWludCgnbWF4bGVuZ3RoJywgdGhpcy5lbGVtZW50LmdldEF0dHJpYnV0ZSgnbWF4bGVuZ3RoJyksIHVuZGVmaW5lZCwgdHJ1ZSk7XG5cblxuICAgIC8vIGh0bWw1IHR5cGVzXG4gICAgdmFyIHR5cGUgPSBVdGlscy5nZXRUeXBlKHRoaXMuZWxlbWVudCk7XG5cbiAgICAvLyBTbWFsbCBzcGVjaWFsIGNhc2UgaGVyZSBmb3IgSFRNTDUgbnVtYmVyOiBpbnRlZ2VyIHZhbGlkYXRvciBpZiBzdGVwIGF0dHJpYnV0ZSBpcyB1bmRlZmluZWQgb3IgYW4gaW50ZWdlciB2YWx1ZSwgbnVtYmVyIG90aGVyd2lzZVxuICAgIGlmICgnbnVtYmVyJyA9PT0gdHlwZSkge1xuICAgICAgcmV0dXJuIHRoaXMuYWRkQ29uc3RyYWludCgndHlwZScsIFsnbnVtYmVyJywge1xuICAgICAgICBzdGVwOiB0aGlzLmVsZW1lbnQuZ2V0QXR0cmlidXRlKCdzdGVwJykgfHwgJzEnLFxuICAgICAgICBiYXNlOiBtaW4gfHwgdGhpcy5lbGVtZW50LmdldEF0dHJpYnV0ZSgndmFsdWUnKVxuICAgICAgfV0sIHVuZGVmaW5lZCwgdHJ1ZSk7XG4gICAgLy8gUmVndWxhciBvdGhlciBIVE1MNSBzdXBwb3J0ZWQgdHlwZXNcbiAgICB9IGVsc2UgaWYgKC9eKGVtYWlsfHVybHxyYW5nZXxkYXRlKSQvaS50ZXN0KHR5cGUpKSB7XG4gICAgICByZXR1cm4gdGhpcy5hZGRDb25zdHJhaW50KCd0eXBlJywgdHlwZSwgdW5kZWZpbmVkLCB0cnVlKTtcbiAgICB9XG4gICAgcmV0dXJuIHRoaXM7XG4gIH0sXG5cbiAgLy8gSW50ZXJuYWwgb25seS5cbiAgLy8gRmllbGQgaXMgcmVxdWlyZWQgaWYgaGF2ZSByZXF1aXJlZCBjb25zdHJhaW50IHdpdGhvdXQgYGZhbHNlYCB2YWx1ZVxuICBfaXNSZXF1aXJlZDogZnVuY3Rpb24gKCkge1xuICAgIGlmICgndW5kZWZpbmVkJyA9PT0gdHlwZW9mIHRoaXMuY29uc3RyYWludHNCeU5hbWUucmVxdWlyZWQpXG4gICAgICByZXR1cm4gZmFsc2U7XG5cbiAgICByZXR1cm4gZmFsc2UgIT09IHRoaXMuY29uc3RyYWludHNCeU5hbWUucmVxdWlyZWQucmVxdWlyZW1lbnRzO1xuICB9LFxuXG4gIC8vIEludGVybmFsIG9ubHkuXG4gIC8vIFNob3J0Y3V0IHRvIHRyaWdnZXIgYW4gZXZlbnRcbiAgX3RyaWdnZXI6IGZ1bmN0aW9uIChldmVudE5hbWUpIHtcbiAgICByZXR1cm4gdGhpcy50cmlnZ2VyKCdmaWVsZDonICsgZXZlbnROYW1lKTtcbiAgfSxcblxuICAvLyBJbnRlcm5hbCBvbmx5XG4gIC8vIEhhbmRsZXMgd2hpdGVzcGFjZSBpbiBhIHZhbHVlXG4gIC8vIFVzZSBgZGF0YS1wYXJzbGV5LXdoaXRlc3BhY2U9XCJzcXVpc2hcImAgdG8gYXV0byBzcXVpc2ggaW5wdXQgdmFsdWVcbiAgLy8gVXNlIGBkYXRhLXBhcnNsZXktd2hpdGVzcGFjZT1cInRyaW1cImAgdG8gYXV0byB0cmltIGlucHV0IHZhbHVlXG4gIF9oYW5kbGVXaGl0ZXNwYWNlOiBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICBpZiAodHJ1ZSA9PT0gdGhpcy5vcHRpb25zLnRyaW1WYWx1ZSlcbiAgICAgIFV0aWxzLndhcm5PbmNlKCdkYXRhLXBhcnNsZXktdHJpbS12YWx1ZT1cInRydWVcIiBpcyBkZXByZWNhdGVkLCBwbGVhc2UgdXNlIGRhdGEtcGFyc2xleS13aGl0ZXNwYWNlPVwidHJpbVwiJyk7XG5cbiAgICBpZiAoJ3NxdWlzaCcgPT09IHRoaXMub3B0aW9ucy53aGl0ZXNwYWNlKVxuICAgICAgdmFsdWUgPSB2YWx1ZS5yZXBsYWNlKC9cXHN7Mix9L2csICcgJyk7XG5cbiAgICBpZiAoKCd0cmltJyA9PT0gdGhpcy5vcHRpb25zLndoaXRlc3BhY2UpIHx8ICgnc3F1aXNoJyA9PT0gdGhpcy5vcHRpb25zLndoaXRlc3BhY2UpIHx8ICh0cnVlID09PSB0aGlzLm9wdGlvbnMudHJpbVZhbHVlKSlcbiAgICAgIHZhbHVlID0gVXRpbHMudHJpbVN0cmluZyh2YWx1ZSk7XG5cbiAgICByZXR1cm4gdmFsdWU7XG4gIH0sXG5cbiAgX2lzRGF0ZUlucHV0OiBmdW5jdGlvbigpIHtcbiAgICB2YXIgYyA9IHRoaXMuY29uc3RyYWludHNCeU5hbWUudHlwZTtcbiAgICByZXR1cm4gYyAmJiBjLnJlcXVpcmVtZW50cyA9PT0gJ2RhdGUnO1xuICB9LFxuXG4gIC8vIEludGVybmFsIG9ubHkuXG4gIC8vIFJldHVybnMgdGhlIGNvbnN0cmFpbnRzLCBncm91cGVkIGJ5IGRlc2NlbmRpbmcgcHJpb3JpdHkuXG4gIC8vIFRoZSByZXN1bHQgaXMgdGh1cyBhbiBhcnJheSBvZiBhcnJheXMgb2YgY29uc3RyYWludHMuXG4gIF9nZXRHcm91cGVkQ29uc3RyYWludHM6IGZ1bmN0aW9uICgpIHtcbiAgICBpZiAoZmFsc2UgPT09IHRoaXMub3B0aW9ucy5wcmlvcml0eUVuYWJsZWQpXG4gICAgICByZXR1cm4gW3RoaXMuY29uc3RyYWludHNdO1xuXG4gICAgdmFyIGdyb3VwZWRDb25zdHJhaW50cyA9IFtdO1xuICAgIHZhciBpbmRleCA9IHt9O1xuXG4gICAgLy8gQ3JlYXRlIGFycmF5IHVuaXF1ZSBvZiBwcmlvcml0aWVzXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLmNvbnN0cmFpbnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgcCA9IHRoaXMuY29uc3RyYWludHNbaV0ucHJpb3JpdHk7XG4gICAgICBpZiAoIWluZGV4W3BdKVxuICAgICAgICBncm91cGVkQ29uc3RyYWludHMucHVzaChpbmRleFtwXSA9IFtdKTtcbiAgICAgIGluZGV4W3BdLnB1c2godGhpcy5jb25zdHJhaW50c1tpXSk7XG4gICAgfVxuICAgIC8vIFNvcnQgdGhlbSBieSBwcmlvcml0eSBERVNDXG4gICAgZ3JvdXBlZENvbnN0cmFpbnRzLnNvcnQoZnVuY3Rpb24gKGEsIGIpIHsgcmV0dXJuIGJbMF0ucHJpb3JpdHkgLSBhWzBdLnByaW9yaXR5OyB9KTtcblxuICAgIHJldHVybiBncm91cGVkQ29uc3RyYWludHM7XG4gIH1cblxufTtcblxuZXhwb3J0IGRlZmF1bHQgRmllbGQ7XG4iLCJpbXBvcnQgJCBmcm9tICdqcXVlcnknO1xuaW1wb3J0IEJhc2UgZnJvbSAnLi9iYXNlJztcbmltcG9ydCBVdGlscyBmcm9tICcuL3V0aWxzJztcblxudmFyIEZvcm0gPSBmdW5jdGlvbiAoZWxlbWVudCwgZG9tT3B0aW9ucywgb3B0aW9ucykge1xuICB0aGlzLl9fY2xhc3NfXyA9ICdGb3JtJztcblxuICB0aGlzLmVsZW1lbnQgPSBlbGVtZW50O1xuICB0aGlzLiRlbGVtZW50ID0gJChlbGVtZW50KTtcbiAgdGhpcy5kb21PcHRpb25zID0gZG9tT3B0aW9ucztcbiAgdGhpcy5vcHRpb25zID0gb3B0aW9ucztcbiAgdGhpcy5wYXJlbnQgPSB3aW5kb3cuUGFyc2xleTtcblxuICB0aGlzLmZpZWxkcyA9IFtdO1xuICB0aGlzLnZhbGlkYXRpb25SZXN1bHQgPSBudWxsO1xufTtcblxudmFyIHN0YXR1c01hcHBpbmcgPSB7cGVuZGluZzogbnVsbCwgcmVzb2x2ZWQ6IHRydWUsIHJlamVjdGVkOiBmYWxzZX07XG5cbkZvcm0ucHJvdG90eXBlID0ge1xuICBvblN1Ym1pdFZhbGlkYXRlOiBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAvLyBUaGlzIGlzIGEgUGFyc2xleSBnZW5lcmF0ZWQgc3VibWl0IGV2ZW50LCBkbyBub3QgdmFsaWRhdGUsIGRvIG5vdCBwcmV2ZW50LCBzaW1wbHkgZXhpdCBhbmQga2VlcCBub3JtYWwgYmVoYXZpb3JcbiAgICBpZiAodHJ1ZSA9PT0gZXZlbnQucGFyc2xleSlcbiAgICAgIHJldHVybjtcblxuICAgIC8vIElmIHdlIGRpZG4ndCBjb21lIGhlcmUgdGhyb3VnaCBhIHN1Ym1pdCBidXR0b24sIHVzZSB0aGUgZmlyc3Qgb25lIGluIHRoZSBmb3JtXG4gICAgdmFyIHN1Ym1pdFNvdXJjZSA9IHRoaXMuX3N1Ym1pdFNvdXJjZSB8fCB0aGlzLiRlbGVtZW50LmZpbmQoVXRpbHMuX1N1Ym1pdFNlbGVjdG9yKVswXTtcbiAgICB0aGlzLl9zdWJtaXRTb3VyY2UgPSBudWxsO1xuICAgIHRoaXMuJGVsZW1lbnQuZmluZCgnLnBhcnNsZXktc3ludGhldGljLXN1Ym1pdC1idXR0b24nKS5wcm9wKCdkaXNhYmxlZCcsIHRydWUpO1xuICAgIGlmIChzdWJtaXRTb3VyY2UgJiYgbnVsbCAhPT0gc3VibWl0U291cmNlLmdldEF0dHJpYnV0ZSgnZm9ybW5vdmFsaWRhdGUnKSlcbiAgICAgIHJldHVybjtcblxuICAgIHdpbmRvdy5QYXJzbGV5Ll9yZW1vdGVDYWNoZSA9IHt9O1xuXG4gICAgdmFyIHByb21pc2UgPSB0aGlzLndoZW5WYWxpZGF0ZSh7ZXZlbnR9KTtcblxuICAgIGlmICgncmVzb2x2ZWQnID09PSBwcm9taXNlLnN0YXRlKCkgJiYgZmFsc2UgIT09IHRoaXMuX3RyaWdnZXIoJ3N1Ym1pdCcpKSB7XG4gICAgICAvLyBBbGwgZ29vZCwgbGV0IGV2ZW50IGdvIHRocm91Z2guIFdlIG1ha2UgdGhpcyBkaXN0aW5jdGlvbiBiZWNhdXNlIGJyb3dzZXJzXG4gICAgICAvLyBkaWZmZXIgaW4gdGhlaXIgaGFuZGxpbmcgb2YgYHN1Ym1pdGAgYmVpbmcgY2FsbGVkIGZyb20gaW5zaWRlIGEgc3VibWl0IGV2ZW50IFsjMTA0N11cbiAgICB9IGVsc2Uge1xuICAgICAgLy8gUmVqZWN0ZWQgb3IgcGVuZGluZzogY2FuY2VsIHRoaXMgc3VibWl0XG4gICAgICBldmVudC5zdG9wSW1tZWRpYXRlUHJvcGFnYXRpb24oKTtcbiAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICBpZiAoJ3BlbmRpbmcnID09PSBwcm9taXNlLnN0YXRlKCkpXG4gICAgICAgIHByb21pc2UuZG9uZSgoKSA9PiB7IHRoaXMuX3N1Ym1pdChzdWJtaXRTb3VyY2UpOyB9KTtcbiAgICB9XG4gIH0sXG5cbiAgb25TdWJtaXRCdXR0b246IGZ1bmN0aW9uKGV2ZW50KSB7XG4gICAgdGhpcy5fc3VibWl0U291cmNlID0gZXZlbnQuY3VycmVudFRhcmdldDtcbiAgfSxcbiAgLy8gaW50ZXJuYWxcbiAgLy8gX3N1Ym1pdCBzdWJtaXRzIHRoZSBmb3JtLCB0aGlzIHRpbWUgd2l0aG91dCBnb2luZyB0aHJvdWdoIHRoZSB2YWxpZGF0aW9ucy5cbiAgLy8gQ2FyZSBtdXN0IGJlIHRha2VuIHRvIFwiZmFrZVwiIHRoZSBhY3R1YWwgc3VibWl0IGJ1dHRvbiBiZWluZyBjbGlja2VkLlxuICBfc3VibWl0OiBmdW5jdGlvbiAoc3VibWl0U291cmNlKSB7XG4gICAgaWYgKGZhbHNlID09PSB0aGlzLl90cmlnZ2VyKCdzdWJtaXQnKSlcbiAgICAgIHJldHVybjtcbiAgICAvLyBBZGQgc3VibWl0IGJ1dHRvbidzIGRhdGFcbiAgICBpZiAoc3VibWl0U291cmNlKSB7XG4gICAgICB2YXIgJHN5bnRoZXRpYyA9IHRoaXMuJGVsZW1lbnQuZmluZCgnLnBhcnNsZXktc3ludGhldGljLXN1Ym1pdC1idXR0b24nKS5wcm9wKCdkaXNhYmxlZCcsIGZhbHNlKTtcbiAgICAgIGlmICgwID09PSAkc3ludGhldGljLmxlbmd0aClcbiAgICAgICAgJHN5bnRoZXRpYyA9ICQoJzxpbnB1dCBjbGFzcz1cInBhcnNsZXktc3ludGhldGljLXN1Ym1pdC1idXR0b25cIiB0eXBlPVwiaGlkZGVuXCI+JykuYXBwZW5kVG8odGhpcy4kZWxlbWVudCk7XG4gICAgICAkc3ludGhldGljLmF0dHIoe1xuICAgICAgICBuYW1lOiBzdWJtaXRTb3VyY2UuZ2V0QXR0cmlidXRlKCduYW1lJyksXG4gICAgICAgIHZhbHVlOiBzdWJtaXRTb3VyY2UuZ2V0QXR0cmlidXRlKCd2YWx1ZScpXG4gICAgICB9KTtcbiAgICB9XG5cbiAgICB0aGlzLiRlbGVtZW50LnRyaWdnZXIoT2JqZWN0LmFzc2lnbigkLkV2ZW50KCdzdWJtaXQnKSwge3BhcnNsZXk6IHRydWV9KSk7XG4gIH0sXG5cbiAgLy8gUGVyZm9ybXMgdmFsaWRhdGlvbiBvbiBmaWVsZHMgd2hpbGUgdHJpZ2dlcmluZyBldmVudHMuXG4gIC8vIEByZXR1cm5zIGB0cnVlYCBpZiBhbGwgdmFsaWRhdGlvbnMgc3VjY2VlZHMsIGBmYWxzZWBcbiAgLy8gaWYgYSBmYWlsdXJlIGlzIGltbWVkaWF0ZWx5IGRldGVjdGVkLCBvciBgbnVsbGBcbiAgLy8gaWYgZGVwZW5kYW50IG9uIGEgcHJvbWlzZS5cbiAgLy8gQ29uc2lkZXIgdXNpbmcgYHdoZW5WYWxpZGF0ZWAgaW5zdGVhZC5cbiAgdmFsaWRhdGU6IGZ1bmN0aW9uIChvcHRpb25zKSB7XG4gICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPj0gMSAmJiAhJC5pc1BsYWluT2JqZWN0KG9wdGlvbnMpKSB7XG4gICAgICBVdGlscy53YXJuT25jZSgnQ2FsbGluZyB2YWxpZGF0ZSBvbiBhIHBhcnNsZXkgZm9ybSB3aXRob3V0IHBhc3NpbmcgYXJndW1lbnRzIGFzIGFuIG9iamVjdCBpcyBkZXByZWNhdGVkLicpO1xuICAgICAgdmFyIFtncm91cCwgZm9yY2UsIGV2ZW50XSA9IGFyZ3VtZW50cztcbiAgICAgIG9wdGlvbnMgPSB7Z3JvdXAsIGZvcmNlLCBldmVudH07XG4gICAgfVxuICAgIHJldHVybiBzdGF0dXNNYXBwaW5nWyB0aGlzLndoZW5WYWxpZGF0ZShvcHRpb25zKS5zdGF0ZSgpIF07XG4gIH0sXG5cbiAgd2hlblZhbGlkYXRlOiBmdW5jdGlvbiAoe2dyb3VwLCBmb3JjZSwgZXZlbnR9ID0ge30pIHtcbiAgICB0aGlzLnN1Ym1pdEV2ZW50ID0gZXZlbnQ7XG4gICAgaWYgKGV2ZW50KSB7XG4gICAgICB0aGlzLnN1Ym1pdEV2ZW50ID0gT2JqZWN0LmFzc2lnbih7fSwgZXZlbnQsIHtwcmV2ZW50RGVmYXVsdDogKCkgPT4ge1xuICAgICAgICBVdGlscy53YXJuT25jZShcIlVzaW5nIGB0aGlzLnN1Ym1pdEV2ZW50LnByZXZlbnREZWZhdWx0KClgIGlzIGRlcHJlY2F0ZWQ7IGluc3RlYWQsIGNhbGwgYHRoaXMudmFsaWRhdGlvblJlc3VsdCA9IGZhbHNlYFwiKTtcbiAgICAgICAgdGhpcy52YWxpZGF0aW9uUmVzdWx0ID0gZmFsc2U7XG4gICAgICB9fSk7XG4gICAgfVxuICAgIHRoaXMudmFsaWRhdGlvblJlc3VsdCA9IHRydWU7XG5cbiAgICAvLyBmaXJlIHZhbGlkYXRlIGV2ZW50IHRvIGV2ZW50dWFsbHkgbW9kaWZ5IHRoaW5ncyBiZWZvcmUgZXZlcnkgdmFsaWRhdGlvblxuICAgIHRoaXMuX3RyaWdnZXIoJ3ZhbGlkYXRlJyk7XG5cbiAgICAvLyBSZWZyZXNoIGZvcm0gRE9NIG9wdGlvbnMgYW5kIGZvcm0ncyBmaWVsZHMgdGhhdCBjb3VsZCBoYXZlIGNoYW5nZWRcbiAgICB0aGlzLl9yZWZyZXNoRmllbGRzKCk7XG5cbiAgICB2YXIgcHJvbWlzZXMgPSB0aGlzLl93aXRob3V0UmVhY3R1YWxpemluZ0Zvcm1PcHRpb25zKCgpID0+IHtcbiAgICAgIHJldHVybiAkLm1hcCh0aGlzLmZpZWxkcywgZmllbGQgPT4gZmllbGQud2hlblZhbGlkYXRlKHtmb3JjZSwgZ3JvdXB9KSk7XG4gICAgfSk7XG5cbiAgICByZXR1cm4gVXRpbHMuYWxsKHByb21pc2VzKVxuICAgICAgLmRvbmUoICAoKSA9PiB7IHRoaXMuX3RyaWdnZXIoJ3N1Y2Nlc3MnKTsgfSlcbiAgICAgIC5mYWlsKCAgKCkgPT4ge1xuICAgICAgICB0aGlzLnZhbGlkYXRpb25SZXN1bHQgPSBmYWxzZTtcbiAgICAgICAgdGhpcy5mb2N1cygpO1xuICAgICAgICB0aGlzLl90cmlnZ2VyKCdlcnJvcicpO1xuICAgICAgfSlcbiAgICAgIC5hbHdheXMoKCkgPT4geyB0aGlzLl90cmlnZ2VyKCd2YWxpZGF0ZWQnKTsgfSlcbiAgICAgIC5waXBlKC4uLnRoaXMuX3BpcGVBY2NvcmRpbmdUb1ZhbGlkYXRpb25SZXN1bHQoKSk7XG4gIH0sXG5cbiAgLy8gSXRlcmF0ZSBvdmVyIHJlZnJlc2hlZCBmaWVsZHMsIGFuZCBzdG9wIG9uIGZpcnN0IGZhaWx1cmUuXG4gIC8vIFJldHVybnMgYHRydWVgIGlmIGFsbCBmaWVsZHMgYXJlIHZhbGlkLCBgZmFsc2VgIGlmIGEgZmFpbHVyZSBpcyBkZXRlY3RlZFxuICAvLyBvciBgbnVsbGAgaWYgdGhlIHJlc3VsdCBkZXBlbmRzIG9uIGFuIHVucmVzb2x2ZWQgcHJvbWlzZS5cbiAgLy8gUHJlZmVyIHVzaW5nIGB3aGVuVmFsaWRgIGluc3RlYWQuXG4gIGlzVmFsaWQ6IGZ1bmN0aW9uIChvcHRpb25zKSB7XG4gICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPj0gMSAmJiAhJC5pc1BsYWluT2JqZWN0KG9wdGlvbnMpKSB7XG4gICAgICBVdGlscy53YXJuT25jZSgnQ2FsbGluZyBpc1ZhbGlkIG9uIGEgcGFyc2xleSBmb3JtIHdpdGhvdXQgcGFzc2luZyBhcmd1bWVudHMgYXMgYW4gb2JqZWN0IGlzIGRlcHJlY2F0ZWQuJyk7XG4gICAgICB2YXIgW2dyb3VwLCBmb3JjZV0gPSBhcmd1bWVudHM7XG4gICAgICBvcHRpb25zID0ge2dyb3VwLCBmb3JjZX07XG4gICAgfVxuICAgIHJldHVybiBzdGF0dXNNYXBwaW5nWyB0aGlzLndoZW5WYWxpZChvcHRpb25zKS5zdGF0ZSgpIF07XG4gIH0sXG5cbiAgLy8gSXRlcmF0ZSBvdmVyIHJlZnJlc2hlZCBmaWVsZHMgYW5kIHZhbGlkYXRlIHRoZW0uXG4gIC8vIFJldHVybnMgYSBwcm9taXNlLlxuICAvLyBBIHZhbGlkYXRpb24gdGhhdCBpbW1lZGlhdGVseSBmYWlscyB3aWxsIGludGVycnVwdCB0aGUgdmFsaWRhdGlvbnMuXG4gIHdoZW5WYWxpZDogZnVuY3Rpb24gKHtncm91cCwgZm9yY2V9ID0ge30pIHtcbiAgICB0aGlzLl9yZWZyZXNoRmllbGRzKCk7XG5cbiAgICB2YXIgcHJvbWlzZXMgPSB0aGlzLl93aXRob3V0UmVhY3R1YWxpemluZ0Zvcm1PcHRpb25zKCgpID0+IHtcbiAgICAgIHJldHVybiAkLm1hcCh0aGlzLmZpZWxkcywgZmllbGQgPT4gZmllbGQud2hlblZhbGlkKHtncm91cCwgZm9yY2V9KSk7XG4gICAgfSk7XG4gICAgcmV0dXJuIFV0aWxzLmFsbChwcm9taXNlcyk7XG4gIH0sXG5cbiAgcmVmcmVzaDogZnVuY3Rpb24oKSB7XG4gICAgdGhpcy5fcmVmcmVzaEZpZWxkcygpO1xuICAgIHJldHVybiB0aGlzO1xuICB9LFxuXG4gIC8vIFJlc2V0IFVJXG4gIHJlc2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgLy8gRm9ybSBjYXNlOiBlbWl0IGEgcmVzZXQgZXZlbnQgZm9yIGVhY2ggZmllbGRcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMuZmllbGRzLmxlbmd0aDsgaSsrKVxuICAgICAgdGhpcy5maWVsZHNbaV0ucmVzZXQoKTtcblxuICAgIHRoaXMuX3RyaWdnZXIoJ3Jlc2V0Jyk7XG4gIH0sXG5cbiAgLy8gRGVzdHJveSBQYXJzbGV5IGluc3RhbmNlICgrIFVJKVxuICBkZXN0cm95OiBmdW5jdGlvbiAoKSB7XG4gICAgLy8gRmllbGQgY2FzZTogZW1pdCBkZXN0cm95IGV2ZW50IHRvIGNsZWFuIFVJIGFuZCB0aGVuIGRlc3Ryb3kgc3RvcmVkIGluc3RhbmNlXG4gICAgdGhpcy5fZGVzdHJveVVJKCk7XG5cbiAgICAvLyBGb3JtIGNhc2U6IGRlc3Ryb3kgYWxsIGl0cyBmaWVsZHMgYW5kIHRoZW4gZGVzdHJveSBzdG9yZWQgaW5zdGFuY2VcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMuZmllbGRzLmxlbmd0aDsgaSsrKVxuICAgICAgdGhpcy5maWVsZHNbaV0uZGVzdHJveSgpO1xuXG4gICAgdGhpcy4kZWxlbWVudC5yZW1vdmVEYXRhKCdQYXJzbGV5Jyk7XG4gICAgdGhpcy5fdHJpZ2dlcignZGVzdHJveScpO1xuICB9LFxuXG4gIF9yZWZyZXNoRmllbGRzOiBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIHRoaXMuYWN0dWFsaXplT3B0aW9ucygpLl9iaW5kRmllbGRzKCk7XG4gIH0sXG5cbiAgX2JpbmRGaWVsZHM6IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgb2xkRmllbGRzID0gdGhpcy5maWVsZHM7XG5cbiAgICB0aGlzLmZpZWxkcyA9IFtdO1xuICAgIHRoaXMuZmllbGRzTWFwcGVkQnlJZCA9IHt9O1xuXG4gICAgdGhpcy5fd2l0aG91dFJlYWN0dWFsaXppbmdGb3JtT3B0aW9ucygoKSA9PiB7XG4gICAgICB0aGlzLiRlbGVtZW50XG4gICAgICAuZmluZCh0aGlzLm9wdGlvbnMuaW5wdXRzKVxuICAgICAgLm5vdCh0aGlzLm9wdGlvbnMuZXhjbHVkZWQpXG4gICAgICAuZWFjaCgoXywgZWxlbWVudCkgPT4ge1xuICAgICAgICB2YXIgZmllbGRJbnN0YW5jZSA9IG5ldyB3aW5kb3cuUGFyc2xleS5GYWN0b3J5KGVsZW1lbnQsIHt9LCB0aGlzKTtcblxuICAgICAgICAvLyBPbmx5IGFkZCB2YWxpZCBhbmQgbm90IGV4Y2x1ZGVkIGBGaWVsZGAgYW5kIGBGaWVsZE11bHRpcGxlYCBjaGlsZHJlblxuICAgICAgICBpZiAoKCdGaWVsZCcgPT09IGZpZWxkSW5zdGFuY2UuX19jbGFzc19fIHx8ICdGaWVsZE11bHRpcGxlJyA9PT0gZmllbGRJbnN0YW5jZS5fX2NsYXNzX18pICYmICh0cnVlICE9PSBmaWVsZEluc3RhbmNlLm9wdGlvbnMuZXhjbHVkZWQpKSB7XG4gICAgICAgICAgbGV0IHVuaXF1ZUlkID0gZmllbGRJbnN0YW5jZS5fX2NsYXNzX18gKyAnLScgKyBmaWVsZEluc3RhbmNlLl9faWRfXztcbiAgICAgICAgICBpZiAoJ3VuZGVmaW5lZCcgPT09IHR5cGVvZiB0aGlzLmZpZWxkc01hcHBlZEJ5SWRbdW5pcXVlSWRdKSB7XG4gICAgICAgICAgICB0aGlzLmZpZWxkc01hcHBlZEJ5SWRbdW5pcXVlSWRdID0gZmllbGRJbnN0YW5jZTtcbiAgICAgICAgICAgIHRoaXMuZmllbGRzLnB1c2goZmllbGRJbnN0YW5jZSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9KTtcblxuICAgICAgJC5lYWNoKFV0aWxzLmRpZmZlcmVuY2Uob2xkRmllbGRzLCB0aGlzLmZpZWxkcyksIChfLCBmaWVsZCkgPT4ge1xuICAgICAgICBmaWVsZC5yZXNldCgpO1xuICAgICAgfSk7XG4gICAgfSk7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH0sXG5cbiAgLy8gSW50ZXJuYWwgb25seS5cbiAgLy8gTG9vcGluZyBvbiBhIGZvcm0ncyBmaWVsZHMgdG8gZG8gdmFsaWRhdGlvbiBvciBzaW1pbGFyXG4gIC8vIHdpbGwgdHJpZ2dlciByZWFjdHVhbGl6aW5nIG9wdGlvbnMgb24gYWxsIG9mIHRoZW0sIHdoaWNoXG4gIC8vIGluIHR1cm4gd2lsbCByZWFjdHVhbGl6ZSB0aGUgZm9ybSdzIG9wdGlvbnMuXG4gIC8vIFRvIGF2b2lkIGNhbGxpbmcgYWN0dWFsaXplT3B0aW9ucyBzbyBtYW55IHRpbWVzIG9uIHRoZSBmb3JtXG4gIC8vIGZvciBub3RoaW5nLCBfd2l0aG91dFJlYWN0dWFsaXppbmdGb3JtT3B0aW9ucyB0ZW1wb3JhcmlseSBkaXNhYmxlc1xuICAvLyB0aGUgbWV0aG9kIGFjdHVhbGl6ZU9wdGlvbnMgb24gdGhpcyBmb3JtIHdoaWxlIGBmbmAgaXMgY2FsbGVkLlxuICBfd2l0aG91dFJlYWN0dWFsaXppbmdGb3JtT3B0aW9uczogZnVuY3Rpb24gKGZuKSB7XG4gICAgdmFyIG9sZEFjdHVhbGl6ZU9wdGlvbnMgPSB0aGlzLmFjdHVhbGl6ZU9wdGlvbnM7XG4gICAgdGhpcy5hY3R1YWxpemVPcHRpb25zID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gdGhpczsgfTtcbiAgICB2YXIgcmVzdWx0ID0gZm4oKTtcbiAgICB0aGlzLmFjdHVhbGl6ZU9wdGlvbnMgPSBvbGRBY3R1YWxpemVPcHRpb25zO1xuICAgIHJldHVybiByZXN1bHQ7XG4gIH0sXG5cbiAgLy8gSW50ZXJuYWwgb25seS5cbiAgLy8gU2hvcnRjdXQgdG8gdHJpZ2dlciBhbiBldmVudFxuICAvLyBSZXR1cm5zIHRydWUgaWZmIGV2ZW50IGlzIG5vdCBpbnRlcnJ1cHRlZCBhbmQgZGVmYXVsdCBub3QgcHJldmVudGVkLlxuICBfdHJpZ2dlcjogZnVuY3Rpb24gKGV2ZW50TmFtZSkge1xuICAgIHJldHVybiB0aGlzLnRyaWdnZXIoJ2Zvcm06JyArIGV2ZW50TmFtZSk7XG4gIH1cblxufTtcblxuZXhwb3J0IGRlZmF1bHQgRm9ybTtcbiIsImltcG9ydCAkIGZyb20gJ2pxdWVyeSc7XG5pbXBvcnQgVXRpbHMgZnJvbSAnLi91dGlscyc7XG5pbXBvcnQgRGVmYXVsdHMgZnJvbSAnLi9kZWZhdWx0cyc7XG5pbXBvcnQgQmFzZSBmcm9tICcuL2Jhc2UnO1xuaW1wb3J0IFZhbGlkYXRvclJlZ2lzdHJ5IGZyb20gJy4vdmFsaWRhdG9yX3JlZ2lzdHJ5JztcbmltcG9ydCBVSSBmcm9tICcuL3VpJztcbmltcG9ydCBGb3JtIGZyb20gJy4vZm9ybSc7XG5pbXBvcnQgRmllbGQgZnJvbSAnLi9maWVsZCc7XG5pbXBvcnQgTXVsdGlwbGUgZnJvbSAnLi9tdWx0aXBsZSc7XG5pbXBvcnQgRmFjdG9yeSBmcm9tICcuL2ZhY3RvcnknO1xuXG52YXIgdmVybnVtcyA9ICQuZm4uanF1ZXJ5LnNwbGl0KCcuJyk7XG5pZiAocGFyc2VJbnQodmVybnVtc1swXSkgPD0gMSAmJiBwYXJzZUludCh2ZXJudW1zWzFdKSA8IDgpIHtcbiAgdGhyb3cgXCJUaGUgbG9hZGVkIHZlcnNpb24gb2YgalF1ZXJ5IGlzIHRvbyBvbGQuIFBsZWFzZSB1cGdyYWRlIHRvIDEuOC54IG9yIGJldHRlci5cIjtcbn1cbmlmICghdmVybnVtcy5mb3JFYWNoKSB7XG4gIFV0aWxzLndhcm4oJ1BhcnNsZXkgcmVxdWlyZXMgRVM1IHRvIHJ1biBwcm9wZXJseS4gUGxlYXNlIGluY2x1ZGUgaHR0cHM6Ly9naXRodWIuY29tL2VzLXNoaW1zL2VzNS1zaGltJyk7XG59XG4vLyBJbmhlcml0IGBvbmAsIGBvZmZgICYgYHRyaWdnZXJgIHRvIFBhcnNsZXk6XG52YXIgUGFyc2xleSA9IE9iamVjdC5hc3NpZ24obmV3IEJhc2UoKSwge1xuICAgIGVsZW1lbnQ6IGRvY3VtZW50LFxuICAgICRlbGVtZW50OiAkKGRvY3VtZW50KSxcbiAgICBhY3R1YWxpemVPcHRpb25zOiBudWxsLFxuICAgIF9yZXNldE9wdGlvbnM6IG51bGwsXG4gICAgRmFjdG9yeTogRmFjdG9yeSxcbiAgICB2ZXJzaW9uOiAnQEB2ZXJzaW9uJ1xuICB9KTtcblxuLy8gU3VwcGxlbWVudCBGaWVsZCBhbmQgRm9ybSB3aXRoIEJhc2Vcbi8vIFRoaXMgd2F5LCB0aGUgY29uc3RydWN0b3JzIHdpbGwgaGF2ZSBhY2Nlc3MgdG8gdGhvc2UgbWV0aG9kc1xuT2JqZWN0LmFzc2lnbihGaWVsZC5wcm90b3R5cGUsIFVJLkZpZWxkLCBCYXNlLnByb3RvdHlwZSk7XG5PYmplY3QuYXNzaWduKEZvcm0ucHJvdG90eXBlLCBVSS5Gb3JtLCBCYXNlLnByb3RvdHlwZSk7XG4vLyBJbmhlcml0IGFjdHVhbGl6ZU9wdGlvbnMgYW5kIF9yZXNldE9wdGlvbnM6XG5PYmplY3QuYXNzaWduKEZhY3RvcnkucHJvdG90eXBlLCBCYXNlLnByb3RvdHlwZSk7XG5cbi8vICMjIyBqUXVlcnkgQVBJXG4vLyBgJCgnLmVsZW0nKS5wYXJzbGV5KG9wdGlvbnMpYCBvciBgJCgnLmVsZW0nKS5wc2x5KG9wdGlvbnMpYFxuJC5mbi5wYXJzbGV5ID0gJC5mbi5wc2x5ID0gZnVuY3Rpb24gKG9wdGlvbnMpIHtcbiAgaWYgKHRoaXMubGVuZ3RoID4gMSkge1xuICAgIHZhciBpbnN0YW5jZXMgPSBbXTtcblxuICAgIHRoaXMuZWFjaChmdW5jdGlvbiAoKSB7XG4gICAgICBpbnN0YW5jZXMucHVzaCgkKHRoaXMpLnBhcnNsZXkob3B0aW9ucykpO1xuICAgIH0pO1xuXG4gICAgcmV0dXJuIGluc3RhbmNlcztcbiAgfVxuXG4gIC8vIFJldHVybiB1bmRlZmluZWQgaWYgYXBwbGllZCB0byBub24gZXhpc3RpbmcgRE9NIGVsZW1lbnRcbiAgaWYgKHRoaXMubGVuZ3RoID09IDApIHtcbiAgICByZXR1cm47XG4gIH1cblxuICByZXR1cm4gbmV3IEZhY3RvcnkodGhpc1swXSwgb3B0aW9ucyk7XG59O1xuXG4vLyAjIyMgRmllbGQgYW5kIEZvcm0gZXh0ZW5zaW9uXG4vLyBFbnN1cmUgdGhlIGV4dGVuc2lvbiBpcyBub3cgZGVmaW5lZCBpZiBpdCB3YXNuJ3QgcHJldmlvdXNseVxuaWYgKCd1bmRlZmluZWQnID09PSB0eXBlb2Ygd2luZG93LlBhcnNsZXlFeHRlbmQpXG4gIHdpbmRvdy5QYXJzbGV5RXh0ZW5kID0ge307XG5cbi8vICMjIyBQYXJzbGV5IGNvbmZpZ1xuLy8gSW5oZXJpdCBmcm9tIFBhcnNsZXlEZWZhdWx0LCBhbmQgY29weSBvdmVyIGFueSBleGlzdGluZyB2YWx1ZXNcblBhcnNsZXkub3B0aW9ucyA9IE9iamVjdC5hc3NpZ24oVXRpbHMub2JqZWN0Q3JlYXRlKERlZmF1bHRzKSwgd2luZG93LlBhcnNsZXlDb25maWcpO1xud2luZG93LlBhcnNsZXlDb25maWcgPSBQYXJzbGV5Lm9wdGlvbnM7IC8vIE9sZCB3YXkgb2YgYWNjZXNzaW5nIGdsb2JhbCBvcHRpb25zXG5cbi8vICMjIyBHbG9iYWxzXG53aW5kb3cuUGFyc2xleSA9IHdpbmRvdy5wc2x5ID0gUGFyc2xleTtcblBhcnNsZXkuVXRpbHMgPSBVdGlscztcbndpbmRvdy5QYXJzbGV5VXRpbHMgPSB7fTtcbiQuZWFjaChVdGlscywgKGtleSwgdmFsdWUpID0+IHtcbiAgaWYgKCdmdW5jdGlvbicgPT09IHR5cGVvZiB2YWx1ZSkge1xuICAgIHdpbmRvdy5QYXJzbGV5VXRpbHNba2V5XSA9ICguLi5hcmdzKSA9PiB7XG4gICAgICBVdGlscy53YXJuT25jZSgnQWNjZXNzaW5nIGB3aW5kb3cuUGFyc2xleVV0aWxzYCBpcyBkZXByZWNhdGVkLiBVc2UgYHdpbmRvdy5QYXJzbGV5LlV0aWxzYCBpbnN0ZWFkLicpO1xuICAgICAgcmV0dXJuIFV0aWxzW2tleV0oLi4uYXJncyk7XG4gICAgfTtcbiAgfVxufSk7XG5cbi8vICMjIyBEZWZpbmUgbWV0aG9kcyB0aGF0IGZvcndhcmQgdG8gdGhlIHJlZ2lzdHJ5LCBhbmQgZGVwcmVjYXRlIGFsbCBhY2Nlc3MgZXhjZXB0IHRocm91Z2ggd2luZG93LlBhcnNsZXlcbnZhciByZWdpc3RyeSA9IHdpbmRvdy5QYXJzbGV5Ll92YWxpZGF0b3JSZWdpc3RyeSA9IG5ldyBWYWxpZGF0b3JSZWdpc3RyeSh3aW5kb3cuUGFyc2xleUNvbmZpZy52YWxpZGF0b3JzLCB3aW5kb3cuUGFyc2xleUNvbmZpZy5pMThuKTtcbndpbmRvdy5QYXJzbGV5VmFsaWRhdG9yID0ge307XG4kLmVhY2goJ3NldExvY2FsZSBhZGRDYXRhbG9nIGFkZE1lc3NhZ2UgYWRkTWVzc2FnZXMgZ2V0RXJyb3JNZXNzYWdlIGZvcm1hdE1lc3NhZ2UgYWRkVmFsaWRhdG9yIHVwZGF0ZVZhbGlkYXRvciByZW1vdmVWYWxpZGF0b3IgaGFzVmFsaWRhdG9yJy5zcGxpdCgnICcpLCBmdW5jdGlvbiAoaSwgbWV0aG9kKSB7XG4gIHdpbmRvdy5QYXJzbGV5W21ldGhvZF0gPSAoLi4uYXJncykgPT4gcmVnaXN0cnlbbWV0aG9kXSguLi5hcmdzKTtcbiAgd2luZG93LlBhcnNsZXlWYWxpZGF0b3JbbWV0aG9kXSA9IGZ1bmN0aW9uICgpIHtcbiAgICBVdGlscy53YXJuT25jZShgQWNjZXNzaW5nIHRoZSBtZXRob2QgJyR7bWV0aG9kfScgdGhyb3VnaCBWYWxpZGF0b3IgaXMgZGVwcmVjYXRlZC4gU2ltcGx5IGNhbGwgJ3dpbmRvdy5QYXJzbGV5LiR7bWV0aG9kfSguLi4pJ2ApO1xuICAgIHJldHVybiB3aW5kb3cuUGFyc2xleVttZXRob2RdKC4uLmFyZ3VtZW50cyk7XG4gIH07XG59KTtcblxuLy8gIyMjIFVJXG4vLyBEZXByZWNhdGVkIGdsb2JhbCBvYmplY3RcbndpbmRvdy5QYXJzbGV5LlVJID0gVUk7XG53aW5kb3cuUGFyc2xleVVJID0ge1xuICByZW1vdmVFcnJvcjogZnVuY3Rpb24gKGluc3RhbmNlLCBuYW1lLCBkb05vdFVwZGF0ZUNsYXNzKSB7XG4gICAgdmFyIHVwZGF0ZUNsYXNzID0gdHJ1ZSAhPT0gZG9Ob3RVcGRhdGVDbGFzcztcbiAgICBVdGlscy53YXJuT25jZShgQWNjZXNzaW5nIFVJIGlzIGRlcHJlY2F0ZWQuIENhbGwgJ3JlbW92ZUVycm9yJyBvbiB0aGUgaW5zdGFuY2UgZGlyZWN0bHkuIFBsZWFzZSBjb21tZW50IGluIGlzc3VlIDEwNzMgYXMgdG8geW91ciBuZWVkIHRvIGNhbGwgdGhpcyBtZXRob2QuYCk7XG4gICAgcmV0dXJuIGluc3RhbmNlLnJlbW92ZUVycm9yKG5hbWUsIHt1cGRhdGVDbGFzc30pO1xuICB9LFxuICBnZXRFcnJvcnNNZXNzYWdlczogZnVuY3Rpb24gKGluc3RhbmNlKSB7XG4gICAgVXRpbHMud2Fybk9uY2UoYEFjY2Vzc2luZyBVSSBpcyBkZXByZWNhdGVkLiBDYWxsICdnZXRFcnJvcnNNZXNzYWdlcycgb24gdGhlIGluc3RhbmNlIGRpcmVjdGx5LmApO1xuICAgIHJldHVybiBpbnN0YW5jZS5nZXRFcnJvcnNNZXNzYWdlcygpO1xuICB9XG59O1xuJC5lYWNoKCdhZGRFcnJvciB1cGRhdGVFcnJvcicuc3BsaXQoJyAnKSwgZnVuY3Rpb24gKGksIG1ldGhvZCkge1xuICB3aW5kb3cuUGFyc2xleVVJW21ldGhvZF0gPSBmdW5jdGlvbiAoaW5zdGFuY2UsIG5hbWUsIG1lc3NhZ2UsIGFzc2VydCwgZG9Ob3RVcGRhdGVDbGFzcykge1xuICAgIHZhciB1cGRhdGVDbGFzcyA9IHRydWUgIT09IGRvTm90VXBkYXRlQ2xhc3M7XG4gICAgVXRpbHMud2Fybk9uY2UoYEFjY2Vzc2luZyBVSSBpcyBkZXByZWNhdGVkLiBDYWxsICcke21ldGhvZH0nIG9uIHRoZSBpbnN0YW5jZSBkaXJlY3RseS4gUGxlYXNlIGNvbW1lbnQgaW4gaXNzdWUgMTA3MyBhcyB0byB5b3VyIG5lZWQgdG8gY2FsbCB0aGlzIG1ldGhvZC5gKTtcbiAgICByZXR1cm4gaW5zdGFuY2VbbWV0aG9kXShuYW1lLCB7bWVzc2FnZSwgYXNzZXJ0LCB1cGRhdGVDbGFzc30pO1xuICB9O1xufSk7XG5cbi8vICMjIyBQQVJTTEVZIGF1dG8tYmluZGluZ1xuLy8gUHJldmVudCBpdCBieSBzZXR0aW5nIGBQYXJzbGV5Q29uZmlnLmF1dG9CaW5kYCB0byBgZmFsc2VgXG5pZiAoZmFsc2UgIT09IHdpbmRvdy5QYXJzbGV5Q29uZmlnLmF1dG9CaW5kKSB7XG4gICQoZnVuY3Rpb24gKCkge1xuICAgIC8vIFdvcmtzIG9ubHkgb24gYGRhdGEtcGFyc2xleS12YWxpZGF0ZWAuXG4gICAgaWYgKCQoJ1tkYXRhLXBhcnNsZXktdmFsaWRhdGVdJykubGVuZ3RoKVxuICAgICAgJCgnW2RhdGEtcGFyc2xleS12YWxpZGF0ZV0nKS5wYXJzbGV5KCk7XG4gIH0pO1xufVxuXG5leHBvcnQgZGVmYXVsdCBQYXJzbGV5O1xuIiwiaW1wb3J0ICQgZnJvbSAnanF1ZXJ5JztcbmltcG9ydCBVdGlscyBmcm9tICcuL3V0aWxzJztcblxudmFyIE11bHRpcGxlID0gZnVuY3Rpb24gKCkge1xuICB0aGlzLl9fY2xhc3NfXyA9ICdGaWVsZE11bHRpcGxlJztcbn07XG5cbk11bHRpcGxlLnByb3RvdHlwZSA9IHtcbiAgLy8gQWRkIG5ldyBgJGVsZW1lbnRgIHNpYmxpbmcgZm9yIG11bHRpcGxlIGZpZWxkXG4gIGFkZEVsZW1lbnQ6IGZ1bmN0aW9uICgkZWxlbWVudCkge1xuICAgIHRoaXMuJGVsZW1lbnRzLnB1c2goJGVsZW1lbnQpO1xuXG4gICAgcmV0dXJuIHRoaXM7XG4gIH0sXG5cbiAgLy8gU2VlIGBGaWVsZC5fcmVmcmVzaENvbnN0cmFpbnRzKClgXG4gIF9yZWZyZXNoQ29uc3RyYWludHM6IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgZmllbGRDb25zdHJhaW50cztcblxuICAgIHRoaXMuY29uc3RyYWludHMgPSBbXTtcblxuICAgIC8vIFNlbGVjdCBtdWx0aXBsZSBzcGVjaWFsIHRyZWF0bWVudFxuICAgIGlmICh0aGlzLmVsZW1lbnQubm9kZU5hbWUgPT09ICdTRUxFQ1QnKSB7XG4gICAgICB0aGlzLmFjdHVhbGl6ZU9wdGlvbnMoKS5fYmluZENvbnN0cmFpbnRzKCk7XG5cbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIC8vIEdhdGhlciBhbGwgY29uc3RyYWludHMgZm9yIGVhY2ggaW5wdXQgaW4gdGhlIG11bHRpcGxlIGdyb3VwXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLiRlbGVtZW50cy5sZW5ndGg7IGkrKykge1xuXG4gICAgICAvLyBDaGVjayBpZiBlbGVtZW50IGhhdmUgbm90IGJlZW4gZHluYW1pY2FsbHkgcmVtb3ZlZCBzaW5jZSBsYXN0IGJpbmRpbmdcbiAgICAgIGlmICghJCgnaHRtbCcpLmhhcyh0aGlzLiRlbGVtZW50c1tpXSkubGVuZ3RoKSB7XG4gICAgICAgIHRoaXMuJGVsZW1lbnRzLnNwbGljZShpLCAxKTtcbiAgICAgICAgY29udGludWU7XG4gICAgICB9XG5cbiAgICAgIGZpZWxkQ29uc3RyYWludHMgPSB0aGlzLiRlbGVtZW50c1tpXS5kYXRhKCdGaWVsZE11bHRpcGxlJykuX3JlZnJlc2hDb25zdHJhaW50cygpLmNvbnN0cmFpbnRzO1xuXG4gICAgICBmb3IgKHZhciBqID0gMDsgaiA8IGZpZWxkQ29uc3RyYWludHMubGVuZ3RoOyBqKyspXG4gICAgICAgIHRoaXMuYWRkQ29uc3RyYWludChmaWVsZENvbnN0cmFpbnRzW2pdLm5hbWUsIGZpZWxkQ29uc3RyYWludHNbal0ucmVxdWlyZW1lbnRzLCBmaWVsZENvbnN0cmFpbnRzW2pdLnByaW9yaXR5LCBmaWVsZENvbnN0cmFpbnRzW2pdLmlzRG9tQ29uc3RyYWludCk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXM7XG4gIH0sXG5cbiAgLy8gU2VlIGBGaWVsZC5nZXRWYWx1ZSgpYFxuICBnZXRWYWx1ZTogZnVuY3Rpb24gKCkge1xuICAgIC8vIFZhbHVlIGNvdWxkIGJlIG92ZXJyaWRlbiBpbiBET01cbiAgICBpZiAoJ2Z1bmN0aW9uJyA9PT0gdHlwZW9mIHRoaXMub3B0aW9ucy52YWx1ZSlcbiAgICAgIHJldHVybiB0aGlzLm9wdGlvbnMudmFsdWUodGhpcyk7XG4gICAgZWxzZSBpZiAoJ3VuZGVmaW5lZCcgIT09IHR5cGVvZiB0aGlzLm9wdGlvbnMudmFsdWUpXG4gICAgICByZXR1cm4gdGhpcy5vcHRpb25zLnZhbHVlO1xuXG4gICAgLy8gUmFkaW8gaW5wdXQgY2FzZVxuICAgIGlmICh0aGlzLmVsZW1lbnQubm9kZU5hbWUgPT09ICdJTlBVVCcpIHtcbiAgICAgIHZhciB0eXBlID0gVXRpbHMuZ2V0VHlwZSh0aGlzLmVsZW1lbnQpO1xuICAgICAgaWYgKHR5cGUgPT09ICdyYWRpbycpXG4gICAgICAgIHJldHVybiB0aGlzLl9maW5kUmVsYXRlZCgpLmZpbHRlcignOmNoZWNrZWQnKS52YWwoKSB8fCAnJztcblxuICAgICAgLy8gY2hlY2tib3ggaW5wdXQgY2FzZVxuICAgICAgaWYgKHR5cGUgPT09ICdjaGVja2JveCcpIHtcbiAgICAgICAgdmFyIHZhbHVlcyA9IFtdO1xuXG4gICAgICAgIHRoaXMuX2ZpbmRSZWxhdGVkKCkuZmlsdGVyKCc6Y2hlY2tlZCcpLmVhY2goZnVuY3Rpb24gKCkge1xuICAgICAgICAgIHZhbHVlcy5wdXNoKCQodGhpcykudmFsKCkpO1xuICAgICAgICB9KTtcblxuICAgICAgICByZXR1cm4gdmFsdWVzO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8vIFNlbGVjdCBtdWx0aXBsZSBjYXNlXG4gICAgaWYgKHRoaXMuZWxlbWVudC5ub2RlTmFtZSA9PT0gJ1NFTEVDVCcgJiYgbnVsbCA9PT0gdGhpcy4kZWxlbWVudC52YWwoKSlcbiAgICAgIHJldHVybiBbXTtcblxuICAgIC8vIERlZmF1bHQgY2FzZSB0aGF0IHNob3VsZCBuZXZlciBoYXBwZW5cbiAgICByZXR1cm4gdGhpcy4kZWxlbWVudC52YWwoKTtcbiAgfSxcblxuICBfaW5pdDogZnVuY3Rpb24gKCkge1xuICAgIHRoaXMuJGVsZW1lbnRzID0gW3RoaXMuJGVsZW1lbnRdO1xuXG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cbn07XG5cbmV4cG9ydCBkZWZhdWx0IE11bHRpcGxlO1xuIiwiaW1wb3J0ICQgZnJvbSAnanF1ZXJ5JztcbmltcG9ydCBGaWVsZCBmcm9tICcuL2ZpZWxkJztcbmltcG9ydCBGb3JtIGZyb20gJy4vZm9ybSc7XG5pbXBvcnQgVXRpbHMgZnJvbSAnLi91dGlscyc7XG5cbnZhciBvID0gJCh7fSk7XG52YXIgZGVwcmVjYXRlZCA9IGZ1bmN0aW9uICgpIHtcbiAgVXRpbHMud2Fybk9uY2UoXCJQYXJzbGV5J3MgcHVic3ViIG1vZHVsZSBpcyBkZXByZWNhdGVkOyB1c2UgdGhlICdvbicgYW5kICdvZmYnIG1ldGhvZHMgb24gcGFyc2xleSBpbnN0YW5jZXMgb3Igd2luZG93LlBhcnNsZXlcIik7XG59O1xuXG4vLyBSZXR1cm5zIGFuIGV2ZW50IGhhbmRsZXIgdGhhdCBjYWxscyBgZm5gIHdpdGggdGhlIGFyZ3VtZW50cyBpdCBleHBlY3RzXG5mdW5jdGlvbiBhZGFwdChmbiwgY29udGV4dCkge1xuICAvLyBTdG9yZSB0byBhbGxvdyB1bmJpbmRpbmdcbiAgaWYgKCFmbi5wYXJzbGV5QWRhcHRlZENhbGxiYWNrKSB7XG4gICAgZm4ucGFyc2xleUFkYXB0ZWRDYWxsYmFjayA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIHZhciBhcmdzID0gQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoYXJndW1lbnRzLCAwKTtcbiAgICAgIGFyZ3MudW5zaGlmdCh0aGlzKTtcbiAgICAgIGZuLmFwcGx5KGNvbnRleHQgfHwgbywgYXJncyk7XG4gICAgfTtcbiAgfVxuICByZXR1cm4gZm4ucGFyc2xleUFkYXB0ZWRDYWxsYmFjaztcbn1cblxudmFyIGV2ZW50UHJlZml4ID0gJ3BhcnNsZXk6Jztcbi8vIENvbnZlcnRzICdwYXJzbGV5OmZvcm06dmFsaWRhdGUnIGludG8gJ2Zvcm06dmFsaWRhdGUnXG5mdW5jdGlvbiBldmVudE5hbWUobmFtZSkge1xuICBpZiAobmFtZS5sYXN0SW5kZXhPZihldmVudFByZWZpeCwgMCkgPT09IDApXG4gICAgcmV0dXJuIG5hbWUuc3Vic3RyKGV2ZW50UHJlZml4Lmxlbmd0aCk7XG4gIHJldHVybiBuYW1lO1xufVxuXG4vLyAkLmxpc3RlbiBpcyBkZXByZWNhdGVkLiBVc2UgUGFyc2xleS5vbiBpbnN0ZWFkLlxuJC5saXN0ZW4gPSBmdW5jdGlvbiAobmFtZSwgY2FsbGJhY2spIHtcbiAgdmFyIGNvbnRleHQ7XG4gIGRlcHJlY2F0ZWQoKTtcbiAgaWYgKCdvYmplY3QnID09PSB0eXBlb2YgYXJndW1lbnRzWzFdICYmICdmdW5jdGlvbicgPT09IHR5cGVvZiBhcmd1bWVudHNbMl0pIHtcbiAgICBjb250ZXh0ID0gYXJndW1lbnRzWzFdO1xuICAgIGNhbGxiYWNrID0gYXJndW1lbnRzWzJdO1xuICB9XG5cbiAgaWYgKCdmdW5jdGlvbicgIT09IHR5cGVvZiBjYWxsYmFjaylcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ1dyb25nIHBhcmFtZXRlcnMnKTtcblxuICB3aW5kb3cuUGFyc2xleS5vbihldmVudE5hbWUobmFtZSksIGFkYXB0KGNhbGxiYWNrLCBjb250ZXh0KSk7XG59O1xuXG4kLmxpc3RlblRvID0gZnVuY3Rpb24gKGluc3RhbmNlLCBuYW1lLCBmbikge1xuICBkZXByZWNhdGVkKCk7XG4gIGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgRmllbGQpICYmICEoaW5zdGFuY2UgaW5zdGFuY2VvZiBGb3JtKSlcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ011c3QgZ2l2ZSBQYXJzbGV5IGluc3RhbmNlJyk7XG5cbiAgaWYgKCdzdHJpbmcnICE9PSB0eXBlb2YgbmFtZSB8fCAnZnVuY3Rpb24nICE9PSB0eXBlb2YgZm4pXG4gICAgdGhyb3cgbmV3IEVycm9yKCdXcm9uZyBwYXJhbWV0ZXJzJyk7XG5cbiAgaW5zdGFuY2Uub24oZXZlbnROYW1lKG5hbWUpLCBhZGFwdChmbikpO1xufTtcblxuJC51bnN1YnNjcmliZSA9IGZ1bmN0aW9uIChuYW1lLCBmbikge1xuICBkZXByZWNhdGVkKCk7XG4gIGlmICgnc3RyaW5nJyAhPT0gdHlwZW9mIG5hbWUgfHwgJ2Z1bmN0aW9uJyAhPT0gdHlwZW9mIGZuKVxuICAgIHRocm93IG5ldyBFcnJvcignV3JvbmcgYXJndW1lbnRzJyk7XG4gIHdpbmRvdy5QYXJzbGV5Lm9mZihldmVudE5hbWUobmFtZSksIGZuLnBhcnNsZXlBZGFwdGVkQ2FsbGJhY2spO1xufTtcblxuJC51bnN1YnNjcmliZVRvID0gZnVuY3Rpb24gKGluc3RhbmNlLCBuYW1lKSB7XG4gIGRlcHJlY2F0ZWQoKTtcbiAgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBGaWVsZCkgJiYgIShpbnN0YW5jZSBpbnN0YW5jZW9mIEZvcm0pKVxuICAgIHRocm93IG5ldyBFcnJvcignTXVzdCBnaXZlIFBhcnNsZXkgaW5zdGFuY2UnKTtcbiAgaW5zdGFuY2Uub2ZmKGV2ZW50TmFtZShuYW1lKSk7XG59O1xuXG4kLnVuc3Vic2NyaWJlQWxsID0gZnVuY3Rpb24gKG5hbWUpIHtcbiAgZGVwcmVjYXRlZCgpO1xuICB3aW5kb3cuUGFyc2xleS5vZmYoZXZlbnROYW1lKG5hbWUpKTtcbiAgJCgnZm9ybSxpbnB1dCx0ZXh0YXJlYSxzZWxlY3QnKS5lYWNoKGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgaW5zdGFuY2UgPSAkKHRoaXMpLmRhdGEoJ1BhcnNsZXknKTtcbiAgICBpZiAoaW5zdGFuY2UpIHtcbiAgICAgIGluc3RhbmNlLm9mZihldmVudE5hbWUobmFtZSkpO1xuICAgIH1cbiAgfSk7XG59O1xuXG4vLyAkLmVtaXQgaXMgZGVwcmVjYXRlZC4gVXNlIGpRdWVyeSBldmVudHMgaW5zdGVhZC5cbiQuZW1pdCA9IGZ1bmN0aW9uIChuYW1lLCBpbnN0YW5jZSkge1xuICBkZXByZWNhdGVkKCk7XG4gIHZhciBpbnN0YW5jZUdpdmVuID0gKGluc3RhbmNlIGluc3RhbmNlb2YgRmllbGQpIHx8IChpbnN0YW5jZSBpbnN0YW5jZW9mIEZvcm0pO1xuICB2YXIgYXJncyA9IEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGFyZ3VtZW50cywgaW5zdGFuY2VHaXZlbiA/IDIgOiAxKTtcbiAgYXJncy51bnNoaWZ0KGV2ZW50TmFtZShuYW1lKSk7XG4gIGlmICghaW5zdGFuY2VHaXZlbikge1xuICAgIGluc3RhbmNlID0gd2luZG93LlBhcnNsZXk7XG4gIH1cbiAgaW5zdGFuY2UudHJpZ2dlciguLi5hcmdzKTtcbn07XG5cbmV4cG9ydCBkZWZhdWx0IHt9O1xuIiwiaW1wb3J0ICQgZnJvbSAnanF1ZXJ5JztcbmltcG9ydCBVdGlscyBmcm9tICcuL3V0aWxzJztcbmltcG9ydCBCYXNlIGZyb20gJy4vYmFzZSc7XG5cbmltcG9ydCBQYXJzbGV5IGZyb20gJy4vbWFpbic7XG5cbiQuZXh0ZW5kKHRydWUsIFBhcnNsZXksIHtcbiAgYXN5bmNWYWxpZGF0b3JzOiB7XG4gICAgJ2RlZmF1bHQnOiB7XG4gICAgICBmbjogZnVuY3Rpb24gKHhocikge1xuICAgICAgICAvLyBCeSBkZWZhdWx0LCBvbmx5IHN0YXR1cyAyeHggYXJlIGRlZW1lZCBzdWNjZXNzZnVsLlxuICAgICAgICAvLyBOb3RlOiB3ZSB1c2Ugc3RhdHVzIGluc3RlYWQgb2Ygc3RhdGUoKSBiZWNhdXNlIHJlc3BvbnNlcyB3aXRoIHN0YXR1cyAyMDBcbiAgICAgICAgLy8gYnV0IGludmFsaWQgbWVzc2FnZXMgKGUuZy4gYW4gZW1wdHkgYm9keSBmb3IgY29udGVudCB0eXBlIHNldCB0byBKU09OKSB3aWxsXG4gICAgICAgIC8vIHJlc3VsdCBpbiBzdGF0ZSgpID09PSAncmVqZWN0ZWQnLlxuICAgICAgICByZXR1cm4geGhyLnN0YXR1cyA+PSAyMDAgJiYgeGhyLnN0YXR1cyA8IDMwMDtcbiAgICAgIH0sXG4gICAgICB1cmw6IGZhbHNlXG4gICAgfSxcbiAgICByZXZlcnNlOiB7XG4gICAgICBmbjogZnVuY3Rpb24gKHhocikge1xuICAgICAgICAvLyBJZiByZXZlcnNlIG9wdGlvbiBpcyBzZXQsIGEgZmFpbGluZyBhamF4IHJlcXVlc3QgaXMgY29uc2lkZXJlZCBzdWNjZXNzZnVsXG4gICAgICAgIHJldHVybiB4aHIuc3RhdHVzIDwgMjAwIHx8IHhoci5zdGF0dXMgPj0gMzAwO1xuICAgICAgfSxcbiAgICAgIHVybDogZmFsc2VcbiAgICB9XG4gIH0sXG5cbiAgYWRkQXN5bmNWYWxpZGF0b3I6IGZ1bmN0aW9uIChuYW1lLCBmbiwgdXJsLCBvcHRpb25zKSB7XG4gICAgUGFyc2xleS5hc3luY1ZhbGlkYXRvcnNbbmFtZV0gPSB7XG4gICAgICBmbjogZm4sXG4gICAgICB1cmw6IHVybCB8fCBmYWxzZSxcbiAgICAgIG9wdGlvbnM6IG9wdGlvbnMgfHwge31cbiAgICB9O1xuXG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cblxufSk7XG5cblBhcnNsZXkuYWRkVmFsaWRhdG9yKCdyZW1vdGUnLCB7XG4gIHJlcXVpcmVtZW50VHlwZToge1xuICAgICcnOiAnc3RyaW5nJyxcbiAgICAndmFsaWRhdG9yJzogJ3N0cmluZycsXG4gICAgJ3JldmVyc2UnOiAnYm9vbGVhbicsXG4gICAgJ29wdGlvbnMnOiAnb2JqZWN0J1xuICB9LFxuXG4gIHZhbGlkYXRlU3RyaW5nOiBmdW5jdGlvbiAodmFsdWUsIHVybCwgb3B0aW9ucywgaW5zdGFuY2UpIHtcbiAgICB2YXIgZGF0YSA9IHt9O1xuICAgIHZhciBhamF4T3B0aW9ucztcbiAgICB2YXIgY3NyO1xuICAgIHZhciB2YWxpZGF0b3IgPSBvcHRpb25zLnZhbGlkYXRvciB8fCAodHJ1ZSA9PT0gb3B0aW9ucy5yZXZlcnNlID8gJ3JldmVyc2UnIDogJ2RlZmF1bHQnKTtcblxuICAgIGlmICgndW5kZWZpbmVkJyA9PT0gdHlwZW9mIFBhcnNsZXkuYXN5bmNWYWxpZGF0b3JzW3ZhbGlkYXRvcl0pXG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ0NhbGxpbmcgYW4gdW5kZWZpbmVkIGFzeW5jIHZhbGlkYXRvcjogYCcgKyB2YWxpZGF0b3IgKyAnYCcpO1xuXG4gICAgdXJsID0gUGFyc2xleS5hc3luY1ZhbGlkYXRvcnNbdmFsaWRhdG9yXS51cmwgfHwgdXJsO1xuXG4gICAgLy8gRmlsbCBjdXJyZW50IHZhbHVlXG4gICAgaWYgKHVybC5pbmRleE9mKCd7dmFsdWV9JykgPiAtMSkge1xuICAgICAgdXJsID0gdXJsLnJlcGxhY2UoJ3t2YWx1ZX0nLCBlbmNvZGVVUklDb21wb25lbnQodmFsdWUpKTtcbiAgICB9IGVsc2Uge1xuICAgICAgZGF0YVtpbnN0YW5jZS5lbGVtZW50LmdldEF0dHJpYnV0ZSgnbmFtZScpIHx8IGluc3RhbmNlLmVsZW1lbnQuZ2V0QXR0cmlidXRlKCdpZCcpXSA9IHZhbHVlO1xuICAgIH1cblxuICAgIC8vIE1lcmdlIG9wdGlvbnMgcGFzc2VkIGluIGZyb20gdGhlIGZ1bmN0aW9uIHdpdGggdGhlIG9uZXMgaW4gdGhlIGF0dHJpYnV0ZVxuICAgIHZhciByZW1vdGVPcHRpb25zID0gJC5leHRlbmQodHJ1ZSwgb3B0aW9ucy5vcHRpb25zIHx8IHt9ICwgUGFyc2xleS5hc3luY1ZhbGlkYXRvcnNbdmFsaWRhdG9yXS5vcHRpb25zKTtcblxuICAgIC8vIEFsbCBgJC5hamF4KG9wdGlvbnMpYCBjb3VsZCBiZSBvdmVycmlkZGVuIG9yIGV4dGVuZGVkIGRpcmVjdGx5IGZyb20gRE9NIGluIGBkYXRhLXBhcnNsZXktcmVtb3RlLW9wdGlvbnNgXG4gICAgYWpheE9wdGlvbnMgPSAkLmV4dGVuZCh0cnVlLCB7fSwge1xuICAgICAgdXJsOiB1cmwsXG4gICAgICBkYXRhOiBkYXRhLFxuICAgICAgdHlwZTogJ0dFVCdcbiAgICB9LCByZW1vdGVPcHRpb25zKTtcblxuICAgIC8vIEdlbmVyYXRlIHN0b3JlIGtleSBiYXNlZCBvbiBhamF4IG9wdGlvbnNcbiAgICBpbnN0YW5jZS50cmlnZ2VyKCdmaWVsZDphamF4b3B0aW9ucycsIGluc3RhbmNlLCBhamF4T3B0aW9ucyk7XG5cbiAgICBjc3IgPSAkLnBhcmFtKGFqYXhPcHRpb25zKTtcblxuICAgIC8vIEluaXRpYWxpc2UgcXVlcnJ5IGNhY2hlXG4gICAgaWYgKCd1bmRlZmluZWQnID09PSB0eXBlb2YgUGFyc2xleS5fcmVtb3RlQ2FjaGUpXG4gICAgICBQYXJzbGV5Ll9yZW1vdGVDYWNoZSA9IHt9O1xuXG4gICAgLy8gVHJ5IHRvIHJldHJpZXZlIHN0b3JlZCB4aHJcbiAgICB2YXIgeGhyID0gUGFyc2xleS5fcmVtb3RlQ2FjaGVbY3NyXSA9IFBhcnNsZXkuX3JlbW90ZUNhY2hlW2Nzcl0gfHwgJC5hamF4KGFqYXhPcHRpb25zKTtcblxuICAgIHZhciBoYW5kbGVYaHIgPSBmdW5jdGlvbiAoKSB7XG4gICAgICB2YXIgcmVzdWx0ID0gUGFyc2xleS5hc3luY1ZhbGlkYXRvcnNbdmFsaWRhdG9yXS5mbi5jYWxsKGluc3RhbmNlLCB4aHIsIHVybCwgb3B0aW9ucyk7XG4gICAgICBpZiAoIXJlc3VsdCkgLy8gTWFwIGZhbHN5IHJlc3VsdHMgdG8gcmVqZWN0ZWQgcHJvbWlzZVxuICAgICAgICByZXN1bHQgPSAkLkRlZmVycmVkKCkucmVqZWN0KCk7XG4gICAgICByZXR1cm4gJC53aGVuKHJlc3VsdCk7XG4gICAgfTtcblxuICAgIHJldHVybiB4aHIudGhlbihoYW5kbGVYaHIsIGhhbmRsZVhocik7XG4gIH0sXG5cbiAgcHJpb3JpdHk6IC0xXG59KTtcblxuUGFyc2xleS5vbignZm9ybTpzdWJtaXQnLCBmdW5jdGlvbiAoKSB7XG4gIFBhcnNsZXkuX3JlbW90ZUNhY2hlID0ge307XG59KTtcblxuQmFzZS5wcm90b3R5cGUuYWRkQXN5bmNWYWxpZGF0b3IgPSBmdW5jdGlvbiAoKSB7XG4gIFV0aWxzLndhcm5PbmNlKCdBY2Nlc3NpbmcgdGhlIG1ldGhvZCBgYWRkQXN5bmNWYWxpZGF0b3JgIHRocm91Z2ggYW4gaW5zdGFuY2UgaXMgZGVwcmVjYXRlZC4gU2ltcGx5IGNhbGwgYFBhcnNsZXkuYWRkQXN5bmNWYWxpZGF0b3IoLi4uKWAnKTtcbiAgcmV0dXJuIFBhcnNsZXkuYWRkQXN5bmNWYWxpZGF0b3IoLi4uYXJndW1lbnRzKTtcbn07XG4iLCJpbXBvcnQgJCBmcm9tICdqcXVlcnknO1xuaW1wb3J0IFV0aWxzIGZyb20gJy4vdXRpbHMnO1xuXG52YXIgVUkgPSB7fTtcblxudmFyIGRpZmZSZXN1bHRzID0gZnVuY3Rpb24gKG5ld1Jlc3VsdCwgb2xkUmVzdWx0LCBkZWVwKSB7XG4gIHZhciBhZGRlZCA9IFtdO1xuICB2YXIga2VwdCA9IFtdO1xuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgbmV3UmVzdWx0Lmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIGZvdW5kID0gZmFsc2U7XG5cbiAgICBmb3IgKHZhciBqID0gMDsgaiA8IG9sZFJlc3VsdC5sZW5ndGg7IGorKylcbiAgICAgIGlmIChuZXdSZXN1bHRbaV0uYXNzZXJ0Lm5hbWUgPT09IG9sZFJlc3VsdFtqXS5hc3NlcnQubmFtZSkge1xuICAgICAgICBmb3VuZCA9IHRydWU7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuXG4gICAgaWYgKGZvdW5kKVxuICAgICAga2VwdC5wdXNoKG5ld1Jlc3VsdFtpXSk7XG4gICAgZWxzZVxuICAgICAgYWRkZWQucHVzaChuZXdSZXN1bHRbaV0pO1xuICB9XG5cbiAgcmV0dXJuIHtcbiAgICBrZXB0OiBrZXB0LFxuICAgIGFkZGVkOiBhZGRlZCxcbiAgICByZW1vdmVkOiAhZGVlcCA/IGRpZmZSZXN1bHRzKG9sZFJlc3VsdCwgbmV3UmVzdWx0LCB0cnVlKS5hZGRlZCA6IFtdXG4gIH07XG59O1xuXG5VSS5Gb3JtID0ge1xuXG4gIF9hY3R1YWxpemVUcmlnZ2VyczogZnVuY3Rpb24gKCkge1xuICAgIHRoaXMuJGVsZW1lbnQub24oJ3N1Ym1pdC5QYXJzbGV5JywgZXZ0ID0+IHsgdGhpcy5vblN1Ym1pdFZhbGlkYXRlKGV2dCk7IH0pO1xuICAgIHRoaXMuJGVsZW1lbnQub24oJ2NsaWNrLlBhcnNsZXknLCBVdGlscy5fU3VibWl0U2VsZWN0b3IsIGV2dCA9PiB7IHRoaXMub25TdWJtaXRCdXR0b24oZXZ0KTsgfSk7XG5cbiAgICAvLyBVSSBjb3VsZCBiZSBkaXNhYmxlZFxuICAgIGlmIChmYWxzZSA9PT0gdGhpcy5vcHRpb25zLnVpRW5hYmxlZClcbiAgICAgIHJldHVybjtcblxuICAgIHRoaXMuZWxlbWVudC5zZXRBdHRyaWJ1dGUoJ25vdmFsaWRhdGUnLCAnJyk7XG4gIH0sXG5cbiAgZm9jdXM6IGZ1bmN0aW9uICgpIHtcbiAgICB0aGlzLl9mb2N1c2VkRmllbGQgPSBudWxsO1xuXG4gICAgaWYgKHRydWUgPT09IHRoaXMudmFsaWRhdGlvblJlc3VsdCB8fCAnbm9uZScgPT09IHRoaXMub3B0aW9ucy5mb2N1cylcbiAgICAgIHJldHVybiBudWxsO1xuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLmZpZWxkcy5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIGZpZWxkID0gdGhpcy5maWVsZHNbaV07XG4gICAgICBpZiAodHJ1ZSAhPT0gZmllbGQudmFsaWRhdGlvblJlc3VsdCAmJiBmaWVsZC52YWxpZGF0aW9uUmVzdWx0Lmxlbmd0aCA+IDAgJiYgJ3VuZGVmaW5lZCcgPT09IHR5cGVvZiBmaWVsZC5vcHRpb25zLm5vRm9jdXMpIHtcbiAgICAgICAgdGhpcy5fZm9jdXNlZEZpZWxkID0gZmllbGQuJGVsZW1lbnQ7XG4gICAgICAgIGlmICgnZmlyc3QnID09PSB0aGlzLm9wdGlvbnMuZm9jdXMpXG4gICAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKG51bGwgPT09IHRoaXMuX2ZvY3VzZWRGaWVsZClcbiAgICAgIHJldHVybiBudWxsO1xuXG4gICAgcmV0dXJuIHRoaXMuX2ZvY3VzZWRGaWVsZC5mb2N1cygpO1xuICB9LFxuXG4gIF9kZXN0cm95VUk6IGZ1bmN0aW9uICgpIHtcbiAgICAvLyBSZXNldCBhbGwgZXZlbnQgbGlzdGVuZXJzXG4gICAgdGhpcy4kZWxlbWVudC5vZmYoJy5QYXJzbGV5Jyk7XG4gIH1cblxufTtcblxuVUkuRmllbGQgPSB7XG5cbiAgX3JlZmxvd1VJOiBmdW5jdGlvbiAoKSB7XG4gICAgdGhpcy5fYnVpbGRVSSgpO1xuXG4gICAgLy8gSWYgdGhpcyBmaWVsZCBkb2Vzbid0IGhhdmUgYW4gYWN0aXZlIFVJIGRvbid0IGJvdGhlciBkb2luZyBzb21ldGhpbmdcbiAgICBpZiAoIXRoaXMuX3VpKVxuICAgICAgcmV0dXJuO1xuXG4gICAgLy8gRGlmZiBiZXR3ZWVuIHR3byB2YWxpZGF0aW9uIHJlc3VsdHNcbiAgICB2YXIgZGlmZiA9IGRpZmZSZXN1bHRzKHRoaXMudmFsaWRhdGlvblJlc3VsdCwgdGhpcy5fdWkubGFzdFZhbGlkYXRpb25SZXN1bHQpO1xuXG4gICAgLy8gVGhlbiBzdG9yZSBjdXJyZW50IHZhbGlkYXRpb24gcmVzdWx0IGZvciBuZXh0IHJlZmxvd1xuICAgIHRoaXMuX3VpLmxhc3RWYWxpZGF0aW9uUmVzdWx0ID0gdGhpcy52YWxpZGF0aW9uUmVzdWx0O1xuXG4gICAgLy8gSGFuZGxlIHZhbGlkIC8gaW52YWxpZCAvIG5vbmUgZmllbGQgY2xhc3NcbiAgICB0aGlzLl9tYW5hZ2VTdGF0dXNDbGFzcygpO1xuXG4gICAgLy8gQWRkLCByZW1vdmUsIHVwZGF0ZWQgZXJyb3JzIG1lc3NhZ2VzXG4gICAgdGhpcy5fbWFuYWdlRXJyb3JzTWVzc2FnZXMoZGlmZik7XG5cbiAgICAvLyBUcmlnZ2VycyBpbXBsXG4gICAgdGhpcy5fYWN0dWFsaXplVHJpZ2dlcnMoKTtcblxuICAgIC8vIElmIGZpZWxkIGlzIG5vdCB2YWxpZCBmb3IgdGhlIGZpcnN0IHRpbWUsIGJpbmQga2V5dXAgdHJpZ2dlciB0byBlYXNlIFVYIGFuZCBxdWlja2x5IGluZm9ybSB1c2VyXG4gICAgaWYgKChkaWZmLmtlcHQubGVuZ3RoIHx8IGRpZmYuYWRkZWQubGVuZ3RoKSAmJiAhdGhpcy5fZmFpbGVkT25jZSkge1xuICAgICAgdGhpcy5fZmFpbGVkT25jZSA9IHRydWU7XG4gICAgICB0aGlzLl9hY3R1YWxpemVUcmlnZ2VycygpO1xuICAgIH1cbiAgfSxcblxuICAvLyBSZXR1cm5zIGFuIGFycmF5IG9mIGZpZWxkJ3MgZXJyb3IgbWVzc2FnZShzKVxuICBnZXRFcnJvcnNNZXNzYWdlczogZnVuY3Rpb24gKCkge1xuICAgIC8vIE5vIGVycm9yIG1lc3NhZ2UsIGZpZWxkIGlzIHZhbGlkXG4gICAgaWYgKHRydWUgPT09IHRoaXMudmFsaWRhdGlvblJlc3VsdClcbiAgICAgIHJldHVybiBbXTtcblxuICAgIHZhciBtZXNzYWdlcyA9IFtdO1xuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLnZhbGlkYXRpb25SZXN1bHQubGVuZ3RoOyBpKyspXG4gICAgICBtZXNzYWdlcy5wdXNoKHRoaXMudmFsaWRhdGlvblJlc3VsdFtpXS5lcnJvck1lc3NhZ2UgfHxcbiAgICAgICB0aGlzLl9nZXRFcnJvck1lc3NhZ2UodGhpcy52YWxpZGF0aW9uUmVzdWx0W2ldLmFzc2VydCkpO1xuXG4gICAgcmV0dXJuIG1lc3NhZ2VzO1xuICB9LFxuXG4gIC8vIEl0J3MgYSBnb2FsIG9mIFBhcnNsZXkgdGhhdCB0aGlzIG1ldGhvZCBpcyBubyBsb25nZXIgcmVxdWlyZWQgWyMxMDczXVxuICBhZGRFcnJvcjogZnVuY3Rpb24gKG5hbWUsIHttZXNzYWdlLCBhc3NlcnQsIHVwZGF0ZUNsYXNzID0gdHJ1ZX0gPSB7fSkge1xuICAgIHRoaXMuX2J1aWxkVUkoKTtcbiAgICB0aGlzLl9hZGRFcnJvcihuYW1lLCB7bWVzc2FnZSwgYXNzZXJ0fSk7XG5cbiAgICBpZiAodXBkYXRlQ2xhc3MpXG4gICAgICB0aGlzLl9lcnJvckNsYXNzKCk7XG4gIH0sXG5cbiAgLy8gSXQncyBhIGdvYWwgb2YgUGFyc2xleSB0aGF0IHRoaXMgbWV0aG9kIGlzIG5vIGxvbmdlciByZXF1aXJlZCBbIzEwNzNdXG4gIHVwZGF0ZUVycm9yOiBmdW5jdGlvbiAobmFtZSwge21lc3NhZ2UsIGFzc2VydCwgdXBkYXRlQ2xhc3MgPSB0cnVlfSA9IHt9KSB7XG4gICAgdGhpcy5fYnVpbGRVSSgpO1xuICAgIHRoaXMuX3VwZGF0ZUVycm9yKG5hbWUsIHttZXNzYWdlLCBhc3NlcnR9KTtcblxuICAgIGlmICh1cGRhdGVDbGFzcylcbiAgICAgIHRoaXMuX2Vycm9yQ2xhc3MoKTtcbiAgfSxcblxuICAvLyBJdCdzIGEgZ29hbCBvZiBQYXJzbGV5IHRoYXQgdGhpcyBtZXRob2QgaXMgbm8gbG9uZ2VyIHJlcXVpcmVkIFsjMTA3M11cbiAgcmVtb3ZlRXJyb3I6IGZ1bmN0aW9uIChuYW1lLCB7dXBkYXRlQ2xhc3MgPSB0cnVlfSA9IHt9KSB7XG4gICAgdGhpcy5fYnVpbGRVSSgpO1xuICAgIHRoaXMuX3JlbW92ZUVycm9yKG5hbWUpO1xuXG4gICAgLy8gZWRnZSBjYXNlIHBvc3NpYmxlIGhlcmU6IHJlbW92ZSBhIHN0YW5kYXJkIFBhcnNsZXkgZXJyb3IgdGhhdCBpcyBzdGlsbCBmYWlsaW5nIGluIHRoaXMudmFsaWRhdGlvblJlc3VsdFxuICAgIC8vIGJ1dCBoaWdobHkgaW1wcm9iYWJsZSBjdXonIG1hbnVhbGx5IHJlbW92aW5nIGEgd2VsbCBQYXJzbGV5IGhhbmRsZWQgZXJyb3IgbWFrZXMgbm8gc2Vuc2UuXG4gICAgaWYgKHVwZGF0ZUNsYXNzKVxuICAgICAgdGhpcy5fbWFuYWdlU3RhdHVzQ2xhc3MoKTtcbiAgfSxcblxuICBfbWFuYWdlU3RhdHVzQ2xhc3M6IGZ1bmN0aW9uICgpIHtcbiAgICBpZiAodGhpcy5oYXNDb25zdHJhaW50cygpICYmIHRoaXMubmVlZHNWYWxpZGF0aW9uKCkgJiYgdHJ1ZSA9PT0gdGhpcy52YWxpZGF0aW9uUmVzdWx0KVxuICAgICAgdGhpcy5fc3VjY2Vzc0NsYXNzKCk7XG4gICAgZWxzZSBpZiAodGhpcy52YWxpZGF0aW9uUmVzdWx0Lmxlbmd0aCA+IDApXG4gICAgICB0aGlzLl9lcnJvckNsYXNzKCk7XG4gICAgZWxzZVxuICAgICAgdGhpcy5fcmVzZXRDbGFzcygpO1xuICB9LFxuXG4gIF9tYW5hZ2VFcnJvcnNNZXNzYWdlczogZnVuY3Rpb24gKGRpZmYpIHtcbiAgICBpZiAoJ3VuZGVmaW5lZCcgIT09IHR5cGVvZiB0aGlzLm9wdGlvbnMuZXJyb3JzTWVzc2FnZXNEaXNhYmxlZClcbiAgICAgIHJldHVybjtcblxuICAgIC8vIENhc2Ugd2hlcmUgd2UgaGF2ZSBlcnJvck1lc3NhZ2Ugb3B0aW9uIHRoYXQgY29uZmlndXJlIGFuIHVuaXF1ZSBmaWVsZCBlcnJvciBtZXNzYWdlLCByZWdhcmRsZXNzIGZhaWxpbmcgdmFsaWRhdG9yc1xuICAgIGlmICgndW5kZWZpbmVkJyAhPT0gdHlwZW9mIHRoaXMub3B0aW9ucy5lcnJvck1lc3NhZ2UpIHtcbiAgICAgIGlmICgoZGlmZi5hZGRlZC5sZW5ndGggfHwgZGlmZi5rZXB0Lmxlbmd0aCkpIHtcbiAgICAgICAgdGhpcy5faW5zZXJ0RXJyb3JXcmFwcGVyKCk7XG5cbiAgICAgICAgaWYgKDAgPT09IHRoaXMuX3VpLiRlcnJvcnNXcmFwcGVyLmZpbmQoJy5wYXJzbGV5LWN1c3RvbS1lcnJvci1tZXNzYWdlJykubGVuZ3RoKVxuICAgICAgICAgIHRoaXMuX3VpLiRlcnJvcnNXcmFwcGVyXG4gICAgICAgICAgICAuYXBwZW5kKFxuICAgICAgICAgICAgICAkKHRoaXMub3B0aW9ucy5lcnJvclRlbXBsYXRlKVxuICAgICAgICAgICAgICAuYWRkQ2xhc3MoJ3BhcnNsZXktY3VzdG9tLWVycm9yLW1lc3NhZ2UnKVxuICAgICAgICAgICAgKTtcblxuICAgICAgICByZXR1cm4gdGhpcy5fdWkuJGVycm9yc1dyYXBwZXJcbiAgICAgICAgICAuYWRkQ2xhc3MoJ2ZpbGxlZCcpXG4gICAgICAgICAgLmZpbmQoJy5wYXJzbGV5LWN1c3RvbS1lcnJvci1tZXNzYWdlJylcbiAgICAgICAgICAuaHRtbCh0aGlzLm9wdGlvbnMuZXJyb3JNZXNzYWdlKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHRoaXMuX3VpLiRlcnJvcnNXcmFwcGVyXG4gICAgICAgIC5yZW1vdmVDbGFzcygnZmlsbGVkJylcbiAgICAgICAgLmZpbmQoJy5wYXJzbGV5LWN1c3RvbS1lcnJvci1tZXNzYWdlJylcbiAgICAgICAgLnJlbW92ZSgpO1xuICAgIH1cblxuICAgIC8vIFNob3csIGhpZGUsIHVwZGF0ZSBmYWlsaW5nIGNvbnN0cmFpbnRzIG1lc3NhZ2VzXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBkaWZmLnJlbW92ZWQubGVuZ3RoOyBpKyspXG4gICAgICB0aGlzLl9yZW1vdmVFcnJvcihkaWZmLnJlbW92ZWRbaV0uYXNzZXJ0Lm5hbWUpO1xuXG4gICAgZm9yIChpID0gMDsgaSA8IGRpZmYuYWRkZWQubGVuZ3RoOyBpKyspXG4gICAgICB0aGlzLl9hZGRFcnJvcihkaWZmLmFkZGVkW2ldLmFzc2VydC5uYW1lLCB7bWVzc2FnZTogZGlmZi5hZGRlZFtpXS5lcnJvck1lc3NhZ2UsIGFzc2VydDogZGlmZi5hZGRlZFtpXS5hc3NlcnR9KTtcblxuICAgIGZvciAoaSA9IDA7IGkgPCBkaWZmLmtlcHQubGVuZ3RoOyBpKyspXG4gICAgICB0aGlzLl91cGRhdGVFcnJvcihkaWZmLmtlcHRbaV0uYXNzZXJ0Lm5hbWUsIHttZXNzYWdlOiBkaWZmLmtlcHRbaV0uZXJyb3JNZXNzYWdlLCBhc3NlcnQ6IGRpZmYua2VwdFtpXS5hc3NlcnR9KTtcbiAgfSxcblxuXG4gIF9hZGRFcnJvcjogZnVuY3Rpb24gKG5hbWUsIHttZXNzYWdlLCBhc3NlcnR9KSB7XG4gICAgdGhpcy5faW5zZXJ0RXJyb3JXcmFwcGVyKCk7XG4gICAgdGhpcy5fdWkuJGVycm9yQ2xhc3NIYW5kbGVyXG4gICAgICAuYXR0cignYXJpYS1kZXNjcmliZWRieScsIHRoaXMuX3VpLmVycm9yc1dyYXBwZXJJZCk7XG4gICAgdGhpcy5fdWkuJGVycm9yc1dyYXBwZXJcbiAgICAgIC5hZGRDbGFzcygnZmlsbGVkJylcbiAgICAgIC5hcHBlbmQoXG4gICAgICAgICQodGhpcy5vcHRpb25zLmVycm9yVGVtcGxhdGUpXG4gICAgICAgIC5hZGRDbGFzcygncGFyc2xleS0nICsgbmFtZSlcbiAgICAgICAgLmh0bWwobWVzc2FnZSB8fCB0aGlzLl9nZXRFcnJvck1lc3NhZ2UoYXNzZXJ0KSlcbiAgICAgICk7XG4gIH0sXG5cbiAgX3VwZGF0ZUVycm9yOiBmdW5jdGlvbiAobmFtZSwge21lc3NhZ2UsIGFzc2VydH0pIHtcbiAgICB0aGlzLl91aS4kZXJyb3JzV3JhcHBlclxuICAgICAgLmFkZENsYXNzKCdmaWxsZWQnKVxuICAgICAgLmZpbmQoJy5wYXJzbGV5LScgKyBuYW1lKVxuICAgICAgLmh0bWwobWVzc2FnZSB8fCB0aGlzLl9nZXRFcnJvck1lc3NhZ2UoYXNzZXJ0KSk7XG4gIH0sXG5cbiAgX3JlbW92ZUVycm9yOiBmdW5jdGlvbiAobmFtZSkge1xuICAgIHRoaXMuX3VpLiRlcnJvckNsYXNzSGFuZGxlclxuICAgICAgLnJlbW92ZUF0dHIoJ2FyaWEtZGVzY3JpYmVkYnknKTtcbiAgICB0aGlzLl91aS4kZXJyb3JzV3JhcHBlclxuICAgICAgLnJlbW92ZUNsYXNzKCdmaWxsZWQnKVxuICAgICAgLmZpbmQoJy5wYXJzbGV5LScgKyBuYW1lKVxuICAgICAgLnJlbW92ZSgpO1xuICB9LFxuXG4gIF9nZXRFcnJvck1lc3NhZ2U6IGZ1bmN0aW9uIChjb25zdHJhaW50KSB7XG4gICAgdmFyIGN1c3RvbUNvbnN0cmFpbnRFcnJvck1lc3NhZ2UgPSBjb25zdHJhaW50Lm5hbWUgKyAnTWVzc2FnZSc7XG5cbiAgICBpZiAoJ3VuZGVmaW5lZCcgIT09IHR5cGVvZiB0aGlzLm9wdGlvbnNbY3VzdG9tQ29uc3RyYWludEVycm9yTWVzc2FnZV0pXG4gICAgICByZXR1cm4gd2luZG93LlBhcnNsZXkuZm9ybWF0TWVzc2FnZSh0aGlzLm9wdGlvbnNbY3VzdG9tQ29uc3RyYWludEVycm9yTWVzc2FnZV0sIGNvbnN0cmFpbnQucmVxdWlyZW1lbnRzKTtcblxuICAgIHJldHVybiB3aW5kb3cuUGFyc2xleS5nZXRFcnJvck1lc3NhZ2UoY29uc3RyYWludCk7XG4gIH0sXG5cbiAgX2J1aWxkVUk6IGZ1bmN0aW9uICgpIHtcbiAgICAvLyBVSSBjb3VsZCBiZSBhbHJlYWR5IGJ1aWx0IG9yIGRpc2FibGVkXG4gICAgaWYgKHRoaXMuX3VpIHx8IGZhbHNlID09PSB0aGlzLm9wdGlvbnMudWlFbmFibGVkKVxuICAgICAgcmV0dXJuO1xuXG4gICAgdmFyIF91aSA9IHt9O1xuXG4gICAgLy8gR2l2ZSBmaWVsZCBpdHMgUGFyc2xleSBpZCBpbiBET01cbiAgICB0aGlzLmVsZW1lbnQuc2V0QXR0cmlidXRlKHRoaXMub3B0aW9ucy5uYW1lc3BhY2UgKyAnaWQnLCB0aGlzLl9faWRfXyk7XG5cbiAgICAvKiogR2VuZXJhdGUgaW1wb3J0YW50IFVJIGVsZW1lbnRzIGFuZCBzdG9yZSB0aGVtIGluIHRoaXMgKiovXG4gICAgLy8gJGVycm9yQ2xhc3NIYW5kbGVyIGlzIHRoZSAkZWxlbWVudCB0aGF0IHdvdWwgaGF2ZSBwYXJzbGV5LWVycm9yIGFuZCBwYXJzbGV5LXN1Y2Nlc3MgY2xhc3Nlc1xuICAgIF91aS4kZXJyb3JDbGFzc0hhbmRsZXIgPSB0aGlzLl9tYW5hZ2VDbGFzc0hhbmRsZXIoKTtcblxuICAgIC8vICRlcnJvcnNXcmFwcGVyIGlzIGEgZGl2IHRoYXQgd291bGQgY29udGFpbiB0aGUgdmFyaW91cyBmaWVsZCBlcnJvcnMsIGl0IHdpbGwgYmUgYXBwZW5kZWQgaW50byAkZXJyb3JzQ29udGFpbmVyXG4gICAgX3VpLmVycm9yc1dyYXBwZXJJZCA9ICdwYXJzbGV5LWlkLScgKyAodGhpcy5vcHRpb25zLm11bHRpcGxlID8gJ211bHRpcGxlLScgKyB0aGlzLm9wdGlvbnMubXVsdGlwbGUgOiB0aGlzLl9faWRfXyk7XG4gICAgX3VpLiRlcnJvcnNXcmFwcGVyID0gJCh0aGlzLm9wdGlvbnMuZXJyb3JzV3JhcHBlcikuYXR0cignaWQnLCBfdWkuZXJyb3JzV3JhcHBlcklkKTtcblxuICAgIC8vIFZhbGlkYXRpb25SZXN1bHQgVUkgc3RvcmFnZSB0byBkZXRlY3Qgd2hhdCBoYXZlIGNoYW5nZWQgYnd0IHR3byB2YWxpZGF0aW9ucywgYW5kIHVwZGF0ZSBET00gYWNjb3JkaW5nbHlcbiAgICBfdWkubGFzdFZhbGlkYXRpb25SZXN1bHQgPSBbXTtcbiAgICBfdWkudmFsaWRhdGlvbkluZm9ybWF0aW9uVmlzaWJsZSA9IGZhbHNlO1xuXG4gICAgLy8gU3RvcmUgaXQgaW4gdGhpcyBmb3IgbGF0ZXJcbiAgICB0aGlzLl91aSA9IF91aTtcbiAgfSxcblxuICAvLyBEZXRlcm1pbmUgd2hpY2ggZWxlbWVudCB3aWxsIGhhdmUgYHBhcnNsZXktZXJyb3JgIGFuZCBgcGFyc2xleS1zdWNjZXNzYCBjbGFzc2VzXG4gIF9tYW5hZ2VDbGFzc0hhbmRsZXI6IGZ1bmN0aW9uICgpIHtcbiAgICAvLyBDbGFzcyBoYW5kbGVkIGNvdWxkIGFsc28gYmUgZGV0ZXJtaW5lZCBieSBmdW5jdGlvbiBnaXZlbiBpbiBQYXJzbGV5IG9wdGlvbnNcbiAgICBpZiAoJ3N0cmluZycgPT09IHR5cGVvZiB0aGlzLm9wdGlvbnMuY2xhc3NIYW5kbGVyICYmICQodGhpcy5vcHRpb25zLmNsYXNzSGFuZGxlcikubGVuZ3RoKVxuICAgICAgcmV0dXJuICQodGhpcy5vcHRpb25zLmNsYXNzSGFuZGxlcik7XG5cbiAgICAvLyBDbGFzcyBoYW5kbGVkIGNvdWxkIGFsc28gYmUgZGV0ZXJtaW5lZCBieSBmdW5jdGlvbiBnaXZlbiBpbiBQYXJzbGV5IG9wdGlvbnNcbiAgICB2YXIgJGhhbmRsZXJGdW5jdGlvbiA9IHRoaXMub3B0aW9ucy5jbGFzc0hhbmRsZXI7XG5cbiAgICAvLyBJdCBtaWdodCBhbHNvIGJlIHRoZSBmdW5jdGlvbiBuYW1lIG9mIGEgZ2xvYmFsIGZ1bmN0aW9uXG4gICAgaWYgKCdzdHJpbmcnID09PSB0eXBlb2YgdGhpcy5vcHRpb25zLmNsYXNzSGFuZGxlciAmJiAnZnVuY3Rpb24nID09PSB0eXBlb2Ygd2luZG93W3RoaXMub3B0aW9ucy5jbGFzc0hhbmRsZXJdKVxuICAgICAgJGhhbmRsZXJGdW5jdGlvbiA9IHdpbmRvd1t0aGlzLm9wdGlvbnMuY2xhc3NIYW5kbGVyXTtcblxuICAgIGlmICgnZnVuY3Rpb24nID09PSB0eXBlb2YgJGhhbmRsZXJGdW5jdGlvbikge1xuICAgICAgdmFyICRoYW5kbGVyID0gJGhhbmRsZXJGdW5jdGlvbi5jYWxsKHRoaXMsIHRoaXMpO1xuXG4gICAgICAvLyBJZiB0aGlzIGZ1bmN0aW9uIHJldHVybmVkIGEgdmFsaWQgZXhpc3RpbmcgRE9NIGVsZW1lbnQsIGdvIGZvciBpdFxuICAgICAgaWYgKCd1bmRlZmluZWQnICE9PSB0eXBlb2YgJGhhbmRsZXIgJiYgJGhhbmRsZXIubGVuZ3RoKVxuICAgICAgICByZXR1cm4gJGhhbmRsZXI7XG4gICAgfSBlbHNlIGlmICgnb2JqZWN0JyA9PT0gdHlwZW9mICRoYW5kbGVyRnVuY3Rpb24gJiYgJGhhbmRsZXJGdW5jdGlvbiBpbnN0YW5jZW9mIGpRdWVyeSAmJiAkaGFuZGxlckZ1bmN0aW9uLmxlbmd0aCkge1xuICAgICAgcmV0dXJuICRoYW5kbGVyRnVuY3Rpb247XG4gICAgfSBlbHNlIGlmICgkaGFuZGxlckZ1bmN0aW9uKSB7XG4gICAgICBVdGlscy53YXJuKCdUaGUgY2xhc3MgaGFuZGxlciBgJyArICRoYW5kbGVyRnVuY3Rpb24gKyAnYCBkb2VzIG5vdCBleGlzdCBpbiBET00gbm9yIGFzIGEgZ2xvYmFsIEpTIGZ1bmN0aW9uJyk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXMuX2lucHV0SG9sZGVyKCk7XG4gIH0sXG5cbiAgX2lucHV0SG9sZGVyOiBmdW5jdGlvbigpIHtcbiAgICAvLyBpZiBzaW1wbGUgZWxlbWVudCAoaW5wdXQsIHRleGF0cmVhLCBzZWxlY3QuLi4pIGl0IHdpbGwgcGVyZmVjdGx5IGhvc3QgdGhlIGNsYXNzZXMgYW5kIHByZWNlZGUgdGhlIGVycm9yIGNvbnRhaW5lclxuICAgIGlmICghdGhpcy5vcHRpb25zLm11bHRpcGxlIHx8IHRoaXMuZWxlbWVudC5ub2RlTmFtZSA9PT0gJ1NFTEVDVCcpXG4gICAgICByZXR1cm4gdGhpcy4kZWxlbWVudDtcblxuICAgIC8vIEJ1dCBpZiBtdWx0aXBsZSBlbGVtZW50IChyYWRpbywgY2hlY2tib3gpLCB0aGF0IHdvdWxkIGJlIHRoZWlyIHBhcmVudFxuICAgIHJldHVybiB0aGlzLiRlbGVtZW50LnBhcmVudCgpO1xuICB9LFxuXG4gIF9pbnNlcnRFcnJvcldyYXBwZXI6IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgJGVycm9yc0NvbnRhaW5lciA9IHRoaXMub3B0aW9ucy5lcnJvcnNDb250YWluZXI7XG5cbiAgICAvLyBOb3RoaW5nIHRvIGRvIGlmIGFscmVhZHkgaW5zZXJ0ZWRcbiAgICBpZiAoMCAhPT0gdGhpcy5fdWkuJGVycm9yc1dyYXBwZXIucGFyZW50KCkubGVuZ3RoKVxuICAgICAgcmV0dXJuIHRoaXMuX3VpLiRlcnJvcnNXcmFwcGVyLnBhcmVudCgpO1xuXG4gICAgaWYgKCdzdHJpbmcnID09PSB0eXBlb2YgJGVycm9yc0NvbnRhaW5lcikge1xuICAgICAgaWYgKCQoJGVycm9yc0NvbnRhaW5lcikubGVuZ3RoKVxuICAgICAgICByZXR1cm4gJCgkZXJyb3JzQ29udGFpbmVyKS5hcHBlbmQodGhpcy5fdWkuJGVycm9yc1dyYXBwZXIpO1xuICAgICAgZWxzZSBpZiAoJ2Z1bmN0aW9uJyA9PT0gdHlwZW9mIHdpbmRvd1skZXJyb3JzQ29udGFpbmVyXSlcbiAgICAgICAgJGVycm9yc0NvbnRhaW5lciA9IHdpbmRvd1skZXJyb3JzQ29udGFpbmVyXTtcbiAgICAgIGVsc2VcbiAgICAgICAgVXRpbHMud2FybignVGhlIGVycm9ycyBjb250YWluZXIgYCcgKyAkZXJyb3JzQ29udGFpbmVyICsgJ2AgZG9lcyBub3QgZXhpc3QgaW4gRE9NIG5vciBhcyBhIGdsb2JhbCBKUyBmdW5jdGlvbicpO1xuICAgIH1cblxuICAgIGlmICgnZnVuY3Rpb24nID09PSB0eXBlb2YgJGVycm9yc0NvbnRhaW5lcilcbiAgICAgICRlcnJvcnNDb250YWluZXIgPSAkZXJyb3JzQ29udGFpbmVyLmNhbGwodGhpcywgdGhpcyk7XG5cbiAgICBpZiAoJ29iamVjdCcgPT09IHR5cGVvZiAkZXJyb3JzQ29udGFpbmVyICYmICRlcnJvcnNDb250YWluZXIubGVuZ3RoKVxuICAgICAgcmV0dXJuICRlcnJvcnNDb250YWluZXIuYXBwZW5kKHRoaXMuX3VpLiRlcnJvcnNXcmFwcGVyKTtcblxuICAgIHJldHVybiB0aGlzLl9pbnB1dEhvbGRlcigpLmFmdGVyKHRoaXMuX3VpLiRlcnJvcnNXcmFwcGVyKTtcbiAgfSxcblxuICBfYWN0dWFsaXplVHJpZ2dlcnM6IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgJHRvQmluZCA9IHRoaXMuX2ZpbmRSZWxhdGVkKCk7XG4gICAgdmFyIHRyaWdnZXI7XG5cbiAgICAvLyBSZW1vdmUgUGFyc2xleSBldmVudHMgYWxyZWFkeSBib3VuZCBvbiB0aGlzIGZpZWxkXG4gICAgJHRvQmluZC5vZmYoJy5QYXJzbGV5Jyk7XG4gICAgaWYgKHRoaXMuX2ZhaWxlZE9uY2UpXG4gICAgICAkdG9CaW5kLm9uKFV0aWxzLm5hbWVzcGFjZUV2ZW50cyh0aGlzLm9wdGlvbnMudHJpZ2dlckFmdGVyRmFpbHVyZSwgJ1BhcnNsZXknKSwgKCkgPT4ge1xuICAgICAgICB0aGlzLl92YWxpZGF0ZUlmTmVlZGVkKCk7XG4gICAgICB9KTtcbiAgICBlbHNlIGlmICh0cmlnZ2VyID0gVXRpbHMubmFtZXNwYWNlRXZlbnRzKHRoaXMub3B0aW9ucy50cmlnZ2VyLCAnUGFyc2xleScpKSB7XG4gICAgICAkdG9CaW5kLm9uKHRyaWdnZXIsIGV2ZW50ID0+IHtcbiAgICAgICAgdGhpcy5fdmFsaWRhdGVJZk5lZWRlZChldmVudCk7XG4gICAgICB9KTtcbiAgICB9XG4gIH0sXG5cbiAgX3ZhbGlkYXRlSWZOZWVkZWQ6IGZ1bmN0aW9uIChldmVudCkge1xuICAgIC8vIEZvciBrZXl1cCwga2V5cHJlc3MsIGtleWRvd24sIGlucHV0Li4uIGV2ZW50cyB0aGF0IGNvdWxkIGJlIGEgbGl0dGxlIGJpdCBvYnN0cnVzaXZlXG4gICAgLy8gZG8gbm90IHZhbGlkYXRlIGlmIHZhbCBsZW5ndGggPCBtaW4gdGhyZXNob2xkIG9uIGZpcnN0IHZhbGlkYXRpb24uIE9uY2UgZmllbGQgaGF2ZSBiZWVuIHZhbGlkYXRlZCBvbmNlIGFuZCBpbmZvXG4gICAgLy8gYWJvdXQgc3VjY2VzcyBvciBmYWlsdXJlIGhhdmUgYmVlbiBkaXNwbGF5ZWQsIGFsd2F5cyB2YWxpZGF0ZSB3aXRoIHRoaXMgdHJpZ2dlciB0byByZWZsZWN0IGV2ZXJ5IHlhbGlkYXRpb24gY2hhbmdlLlxuICAgIGlmIChldmVudCAmJiAva2V5fGlucHV0Ly50ZXN0KGV2ZW50LnR5cGUpKVxuICAgICAgaWYgKCEodGhpcy5fdWkgJiYgdGhpcy5fdWkudmFsaWRhdGlvbkluZm9ybWF0aW9uVmlzaWJsZSkgJiYgdGhpcy5nZXRWYWx1ZSgpLmxlbmd0aCA8PSB0aGlzLm9wdGlvbnMudmFsaWRhdGlvblRocmVzaG9sZClcbiAgICAgICAgcmV0dXJuO1xuXG4gICAgaWYgKHRoaXMub3B0aW9ucy5kZWJvdW5jZSkge1xuICAgICAgd2luZG93LmNsZWFyVGltZW91dCh0aGlzLl9kZWJvdW5jZWQpO1xuICAgICAgdGhpcy5fZGVib3VuY2VkID0gd2luZG93LnNldFRpbWVvdXQoKCkgPT4gdGhpcy52YWxpZGF0ZSgpLCB0aGlzLm9wdGlvbnMuZGVib3VuY2UpO1xuICAgIH0gZWxzZVxuICAgICAgdGhpcy52YWxpZGF0ZSgpO1xuICB9LFxuXG4gIF9yZXNldFVJOiBmdW5jdGlvbiAoKSB7XG4gICAgLy8gUmVzZXQgYWxsIGV2ZW50IGxpc3RlbmVyc1xuICAgIHRoaXMuX2ZhaWxlZE9uY2UgPSBmYWxzZTtcbiAgICB0aGlzLl9hY3R1YWxpemVUcmlnZ2VycygpO1xuXG4gICAgLy8gTm90aGluZyB0byBkbyBpZiBVSSBuZXZlciBpbml0aWFsaXplZCBmb3IgdGhpcyBmaWVsZFxuICAgIGlmICgndW5kZWZpbmVkJyA9PT0gdHlwZW9mIHRoaXMuX3VpKVxuICAgICAgcmV0dXJuO1xuXG4gICAgLy8gUmVzZXQgYWxsIGVycm9ycycgbGlcbiAgICB0aGlzLl91aS4kZXJyb3JzV3JhcHBlclxuICAgICAgLnJlbW92ZUNsYXNzKCdmaWxsZWQnKVxuICAgICAgLmNoaWxkcmVuKClcbiAgICAgIC5yZW1vdmUoKTtcblxuICAgIC8vIFJlc2V0IHZhbGlkYXRpb24gY2xhc3NcbiAgICB0aGlzLl9yZXNldENsYXNzKCk7XG5cbiAgICAvLyBSZXNldCB2YWxpZGF0aW9uIGZsYWdzIGFuZCBsYXN0IHZhbGlkYXRpb24gcmVzdWx0XG4gICAgdGhpcy5fdWkubGFzdFZhbGlkYXRpb25SZXN1bHQgPSBbXTtcbiAgICB0aGlzLl91aS52YWxpZGF0aW9uSW5mb3JtYXRpb25WaXNpYmxlID0gZmFsc2U7XG4gIH0sXG5cbiAgX2Rlc3Ryb3lVSTogZnVuY3Rpb24gKCkge1xuICAgIHRoaXMuX3Jlc2V0VUkoKTtcblxuICAgIGlmICgndW5kZWZpbmVkJyAhPT0gdHlwZW9mIHRoaXMuX3VpKVxuICAgICAgdGhpcy5fdWkuJGVycm9yc1dyYXBwZXIucmVtb3ZlKCk7XG5cbiAgICBkZWxldGUgdGhpcy5fdWk7XG4gIH0sXG5cbiAgX3N1Y2Nlc3NDbGFzczogZnVuY3Rpb24gKCkge1xuICAgIHRoaXMuX3VpLnZhbGlkYXRpb25JbmZvcm1hdGlvblZpc2libGUgPSB0cnVlO1xuICAgIHRoaXMuX3VpLiRlcnJvckNsYXNzSGFuZGxlci5yZW1vdmVDbGFzcyh0aGlzLm9wdGlvbnMuZXJyb3JDbGFzcykuYWRkQ2xhc3ModGhpcy5vcHRpb25zLnN1Y2Nlc3NDbGFzcyk7XG4gIH0sXG4gIF9lcnJvckNsYXNzOiBmdW5jdGlvbiAoKSB7XG4gICAgdGhpcy5fdWkudmFsaWRhdGlvbkluZm9ybWF0aW9uVmlzaWJsZSA9IHRydWU7XG4gICAgdGhpcy5fdWkuJGVycm9yQ2xhc3NIYW5kbGVyLnJlbW92ZUNsYXNzKHRoaXMub3B0aW9ucy5zdWNjZXNzQ2xhc3MpLmFkZENsYXNzKHRoaXMub3B0aW9ucy5lcnJvckNsYXNzKTtcbiAgfSxcbiAgX3Jlc2V0Q2xhc3M6IGZ1bmN0aW9uICgpIHtcbiAgICB0aGlzLl91aS4kZXJyb3JDbGFzc0hhbmRsZXIucmVtb3ZlQ2xhc3ModGhpcy5vcHRpb25zLnN1Y2Nlc3NDbGFzcykucmVtb3ZlQ2xhc3ModGhpcy5vcHRpb25zLmVycm9yQ2xhc3MpO1xuICB9XG59O1xuXG5leHBvcnQgZGVmYXVsdCBVSTtcbiIsImltcG9ydCAkIGZyb20gJ2pxdWVyeSc7XG5cbnZhciBnbG9iYWxJRCA9IDE7XG52YXIgcGFzdFdhcm5pbmdzID0ge307XG5cbnZhciBVdGlscyA9IHtcbiAgLy8gUGFyc2xleSBET00tQVBJXG4gIC8vIHJldHVybnMgb2JqZWN0IGZyb20gZG9tIGF0dHJpYnV0ZXMgYW5kIHZhbHVlc1xuICBhdHRyOiBmdW5jdGlvbiAoZWxlbWVudCwgbmFtZXNwYWNlLCBvYmopIHtcbiAgICB2YXIgaTtcbiAgICB2YXIgYXR0cmlidXRlO1xuICAgIHZhciBhdHRyaWJ1dGVzO1xuICAgIHZhciByZWdleCA9IG5ldyBSZWdFeHAoJ14nICsgbmFtZXNwYWNlLCAnaScpO1xuXG4gICAgaWYgKCd1bmRlZmluZWQnID09PSB0eXBlb2Ygb2JqKVxuICAgICAgb2JqID0ge307XG4gICAgZWxzZSB7XG4gICAgICAvLyBDbGVhciBhbGwgb3duIHByb3BlcnRpZXMuIFRoaXMgd29uJ3QgYWZmZWN0IHByb3RvdHlwZSdzIHZhbHVlc1xuICAgICAgZm9yIChpIGluIG9iaikge1xuICAgICAgICBpZiAob2JqLmhhc093blByb3BlcnR5KGkpKVxuICAgICAgICAgIGRlbGV0ZSBvYmpbaV07XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKCFlbGVtZW50KVxuICAgICAgcmV0dXJuIG9iajtcblxuICAgIGF0dHJpYnV0ZXMgPSBlbGVtZW50LmF0dHJpYnV0ZXM7XG4gICAgZm9yIChpID0gYXR0cmlidXRlcy5sZW5ndGg7IGktLTsgKSB7XG4gICAgICBhdHRyaWJ1dGUgPSBhdHRyaWJ1dGVzW2ldO1xuXG4gICAgICBpZiAoYXR0cmlidXRlICYmIGF0dHJpYnV0ZS5zcGVjaWZpZWQgJiYgcmVnZXgudGVzdChhdHRyaWJ1dGUubmFtZSkpIHtcbiAgICAgICAgb2JqW3RoaXMuY2FtZWxpemUoYXR0cmlidXRlLm5hbWUuc2xpY2UobmFtZXNwYWNlLmxlbmd0aCkpXSA9IHRoaXMuZGVzZXJpYWxpemVWYWx1ZShhdHRyaWJ1dGUudmFsdWUpO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBvYmo7XG4gIH0sXG5cbiAgY2hlY2tBdHRyOiBmdW5jdGlvbiAoZWxlbWVudCwgbmFtZXNwYWNlLCBjaGVja0F0dHIpIHtcbiAgICByZXR1cm4gZWxlbWVudC5oYXNBdHRyaWJ1dGUobmFtZXNwYWNlICsgY2hlY2tBdHRyKTtcbiAgfSxcblxuICBzZXRBdHRyOiBmdW5jdGlvbiAoZWxlbWVudCwgbmFtZXNwYWNlLCBhdHRyLCB2YWx1ZSkge1xuICAgIGVsZW1lbnQuc2V0QXR0cmlidXRlKHRoaXMuZGFzaGVyaXplKG5hbWVzcGFjZSArIGF0dHIpLCBTdHJpbmcodmFsdWUpKTtcbiAgfSxcblxuICBnZXRUeXBlOiBmdW5jdGlvbihlbGVtZW50KSB7XG4gICAgcmV0dXJuIGVsZW1lbnQuZ2V0QXR0cmlidXRlKCd0eXBlJykgfHwgJ3RleHQnO1xuICB9LFxuXG4gIGdlbmVyYXRlSUQ6IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gJycgKyBnbG9iYWxJRCsrO1xuICB9LFxuXG4gIC8qKiBUaGlyZCBwYXJ0eSBmdW5jdGlvbnMgKiovXG4gIGRlc2VyaWFsaXplVmFsdWU6IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgIHZhciBudW07XG5cbiAgICB0cnkge1xuICAgICAgcmV0dXJuIHZhbHVlID9cbiAgICAgICAgdmFsdWUgPT0gXCJ0cnVlXCIgfHxcbiAgICAgICAgKHZhbHVlID09IFwiZmFsc2VcIiA/IGZhbHNlIDpcbiAgICAgICAgdmFsdWUgPT0gXCJudWxsXCIgPyBudWxsIDpcbiAgICAgICAgIWlzTmFOKG51bSA9IE51bWJlcih2YWx1ZSkpID8gbnVtIDpcbiAgICAgICAgL15bXFxbXFx7XS8udGVzdCh2YWx1ZSkgPyBKU09OLnBhcnNlKHZhbHVlKSA6XG4gICAgICAgIHZhbHVlKVxuICAgICAgICA6IHZhbHVlO1xuICAgIH0gY2F0Y2ggKGUpIHsgcmV0dXJuIHZhbHVlOyB9XG4gIH0sXG5cbiAgLy8gWmVwdG8gY2FtZWxpemUgZnVuY3Rpb25cbiAgY2FtZWxpemU6IGZ1bmN0aW9uIChzdHIpIHtcbiAgICByZXR1cm4gc3RyLnJlcGxhY2UoLy0rKC4pPy9nLCBmdW5jdGlvbiAobWF0Y2gsIGNocikge1xuICAgICAgcmV0dXJuIGNociA/IGNoci50b1VwcGVyQ2FzZSgpIDogJyc7XG4gICAgfSk7XG4gIH0sXG5cbiAgLy8gWmVwdG8gZGFzaGVyaXplIGZ1bmN0aW9uXG4gIGRhc2hlcml6ZTogZnVuY3Rpb24gKHN0cikge1xuICAgIHJldHVybiBzdHIucmVwbGFjZSgvOjovZywgJy8nKVxuICAgICAgLnJlcGxhY2UoLyhbQS1aXSspKFtBLVpdW2Etel0pL2csICckMV8kMicpXG4gICAgICAucmVwbGFjZSgvKFthLXpcXGRdKShbQS1aXSkvZywgJyQxXyQyJylcbiAgICAgIC5yZXBsYWNlKC9fL2csICctJylcbiAgICAgIC50b0xvd2VyQ2FzZSgpO1xuICB9LFxuXG4gIHdhcm46IGZ1bmN0aW9uICgpIHtcbiAgICBpZiAod2luZG93LmNvbnNvbGUgJiYgJ2Z1bmN0aW9uJyA9PT0gdHlwZW9mIHdpbmRvdy5jb25zb2xlLndhcm4pXG4gICAgICB3aW5kb3cuY29uc29sZS53YXJuKC4uLmFyZ3VtZW50cyk7XG4gIH0sXG5cbiAgd2Fybk9uY2U6IGZ1bmN0aW9uKG1zZykge1xuICAgIGlmICghcGFzdFdhcm5pbmdzW21zZ10pIHtcbiAgICAgIHBhc3RXYXJuaW5nc1ttc2ddID0gdHJ1ZTtcbiAgICAgIHRoaXMud2FybiguLi5hcmd1bWVudHMpO1xuICAgIH1cbiAgfSxcblxuICBfcmVzZXRXYXJuaW5nczogZnVuY3Rpb24gKCkge1xuICAgIHBhc3RXYXJuaW5ncyA9IHt9O1xuICB9LFxuXG4gIHRyaW1TdHJpbmc6IGZ1bmN0aW9uKHN0cmluZykge1xuICAgIHJldHVybiBzdHJpbmcucmVwbGFjZSgvXlxccyt8XFxzKyQvZywgJycpO1xuICB9LFxuXG4gIHBhcnNlOiB7XG4gICAgZGF0ZTogZnVuY3Rpb24oc3RyaW5nKSB7XG4gICAgICBsZXQgcGFyc2VkID0gc3RyaW5nLm1hdGNoKC9eKFxcZHs0LH0pLShcXGRcXGQpLShcXGRcXGQpJC8pO1xuICAgICAgaWYgKCFwYXJzZWQpXG4gICAgICAgIHJldHVybiBudWxsO1xuICAgICAgbGV0IFtfLCB5ZWFyLCBtb250aCwgZGF5XSA9IHBhcnNlZC5tYXAoeCA9PiBwYXJzZUludCh4LCAxMCkpO1xuICAgICAgbGV0IGRhdGUgPSBuZXcgRGF0ZSh5ZWFyLCBtb250aCAtIDEsIGRheSk7XG4gICAgICBpZiAoZGF0ZS5nZXRGdWxsWWVhcigpICE9PSB5ZWFyIHx8IGRhdGUuZ2V0TW9udGgoKSArIDEgIT09IG1vbnRoIHx8IGRhdGUuZ2V0RGF0ZSgpICE9PSBkYXkpXG4gICAgICAgIHJldHVybiBudWxsO1xuICAgICAgcmV0dXJuIGRhdGU7XG4gICAgfSxcbiAgICBzdHJpbmc6IGZ1bmN0aW9uKHN0cmluZykge1xuICAgICAgcmV0dXJuIHN0cmluZztcbiAgICB9LFxuICAgIGludGVnZXI6IGZ1bmN0aW9uKHN0cmluZykge1xuICAgICAgaWYgKGlzTmFOKHN0cmluZykpXG4gICAgICAgIHJldHVybiBudWxsO1xuICAgICAgcmV0dXJuIHBhcnNlSW50KHN0cmluZywgMTApO1xuICAgIH0sXG4gICAgbnVtYmVyOiBmdW5jdGlvbihzdHJpbmcpIHtcbiAgICAgIGlmIChpc05hTihzdHJpbmcpKVxuICAgICAgICB0aHJvdyBudWxsO1xuICAgICAgcmV0dXJuIHBhcnNlRmxvYXQoc3RyaW5nKTtcbiAgICB9LFxuICAgICdib29sZWFuJzogZnVuY3Rpb24gX2Jvb2xlYW4oc3RyaW5nKSB7XG4gICAgICByZXR1cm4gISgvXlxccypmYWxzZVxccyokL2kudGVzdChzdHJpbmcpKTtcbiAgICB9LFxuICAgIG9iamVjdDogZnVuY3Rpb24oc3RyaW5nKSB7XG4gICAgICByZXR1cm4gVXRpbHMuZGVzZXJpYWxpemVWYWx1ZShzdHJpbmcpO1xuICAgIH0sXG4gICAgcmVnZXhwOiBmdW5jdGlvbihyZWdleHApIHtcbiAgICAgIHZhciBmbGFncyA9ICcnO1xuXG4gICAgICAvLyBUZXN0IGlmIFJlZ0V4cCBpcyBsaXRlcmFsLCBpZiBub3QsIG5vdGhpbmcgdG8gYmUgZG9uZSwgb3RoZXJ3aXNlLCB3ZSBuZWVkIHRvIGlzb2xhdGUgZmxhZ3MgYW5kIHBhdHRlcm5cbiAgICAgIGlmICgvXlxcLy4qXFwvKD86W2dpbXldKikkLy50ZXN0KHJlZ2V4cCkpIHtcbiAgICAgICAgLy8gUmVwbGFjZSB0aGUgcmVnZXhwIGxpdGVyYWwgc3RyaW5nIHdpdGggdGhlIGZpcnN0IG1hdGNoIGdyb3VwOiAoW2dpbXldKilcbiAgICAgICAgLy8gSWYgbm8gZmxhZyBpcyBwcmVzZW50LCB0aGlzIHdpbGwgYmUgYSBibGFuayBzdHJpbmdcbiAgICAgICAgZmxhZ3MgPSByZWdleHAucmVwbGFjZSgvLipcXC8oW2dpbXldKikkLywgJyQxJyk7XG4gICAgICAgIC8vIEFnYWluLCByZXBsYWNlIHRoZSByZWdleHAgbGl0ZXJhbCBzdHJpbmcgd2l0aCB0aGUgZmlyc3QgbWF0Y2ggZ3JvdXA6XG4gICAgICAgIC8vIGV2ZXJ5dGhpbmcgZXhjbHVkaW5nIHRoZSBvcGVuaW5nIGFuZCBjbG9zaW5nIHNsYXNoZXMgYW5kIHRoZSBmbGFnc1xuICAgICAgICByZWdleHAgPSByZWdleHAucmVwbGFjZShuZXcgUmVnRXhwKCdeLyguKj8pLycgKyBmbGFncyArICckJyksICckMScpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLy8gQW5jaG9yIHJlZ2V4cDpcbiAgICAgICAgcmVnZXhwID0gJ14nICsgcmVnZXhwICsgJyQnO1xuICAgICAgfVxuICAgICAgcmV0dXJuIG5ldyBSZWdFeHAocmVnZXhwLCBmbGFncyk7XG4gICAgfVxuICB9LFxuXG4gIHBhcnNlUmVxdWlyZW1lbnQ6IGZ1bmN0aW9uKHJlcXVpcmVtZW50VHlwZSwgc3RyaW5nKSB7XG4gICAgdmFyIGNvbnZlcnRlciA9IHRoaXMucGFyc2VbcmVxdWlyZW1lbnRUeXBlIHx8ICdzdHJpbmcnXTtcbiAgICBpZiAoIWNvbnZlcnRlcilcbiAgICAgIHRocm93ICdVbmtub3duIHJlcXVpcmVtZW50IHNwZWNpZmljYXRpb246IFwiJyArIHJlcXVpcmVtZW50VHlwZSArICdcIic7XG4gICAgbGV0IGNvbnZlcnRlZCA9IGNvbnZlcnRlcihzdHJpbmcpO1xuICAgIGlmIChjb252ZXJ0ZWQgPT09IG51bGwpXG4gICAgICB0aHJvdyBgUmVxdWlyZW1lbnQgaXMgbm90IGEgJHtyZXF1aXJlbWVudFR5cGV9OiBcIiR7c3RyaW5nfVwiYDtcbiAgICByZXR1cm4gY29udmVydGVkO1xuICB9LFxuXG4gIG5hbWVzcGFjZUV2ZW50czogZnVuY3Rpb24oZXZlbnRzLCBuYW1lc3BhY2UpIHtcbiAgICBldmVudHMgPSB0aGlzLnRyaW1TdHJpbmcoZXZlbnRzIHx8ICcnKS5zcGxpdCgvXFxzKy8pO1xuICAgIGlmICghZXZlbnRzWzBdKVxuICAgICAgcmV0dXJuICcnO1xuICAgIHJldHVybiAkLm1hcChldmVudHMsIGV2dCA9PiBgJHtldnR9LiR7bmFtZXNwYWNlfWApLmpvaW4oJyAnKTtcbiAgfSxcblxuICBkaWZmZXJlbmNlOiBmdW5jdGlvbihhcnJheSwgcmVtb3ZlKSB7XG4gICAgLy8gVGhpcyBpcyBPKE5eMiksIHNob3VsZCBiZSBvcHRpbWl6ZWRcbiAgICBsZXQgcmVzdWx0ID0gW107XG4gICAgJC5lYWNoKGFycmF5LCAoXywgZWxlbSkgPT4ge1xuICAgICAgaWYgKHJlbW92ZS5pbmRleE9mKGVsZW0pID09IC0xKVxuICAgICAgICByZXN1bHQucHVzaChlbGVtKTtcbiAgICB9KTtcbiAgICByZXR1cm4gcmVzdWx0O1xuICB9LFxuXG4gIC8vIEFsdGVyLWVnbyB0byBuYXRpdmUgUHJvbWlzZS5hbGwsIGJ1dCBmb3IgalF1ZXJ5XG4gIGFsbDogZnVuY3Rpb24ocHJvbWlzZXMpIHtcbiAgICAvLyBqUXVlcnkgdHJlYXRzICQud2hlbigpIGFuZCAkLndoZW4oc2luZ2xlUHJvbWlzZSkgZGlmZmVyZW50bHk7IGxldCdzIGF2b2lkIHRoYXQgYW5kIGFkZCBzcHVyaW91cyBlbGVtZW50c1xuICAgIHJldHVybiAkLndoZW4oLi4ucHJvbWlzZXMsIDQyLCA0Mik7XG4gIH0sXG5cbiAgLy8gT2JqZWN0LmNyZWF0ZSBwb2x5ZmlsbCwgc2VlIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0phdmFTY3JpcHQvUmVmZXJlbmNlL0dsb2JhbF9PYmplY3RzL09iamVjdC9jcmVhdGUjUG9seWZpbGxcbiAgb2JqZWN0Q3JlYXRlOiBPYmplY3QuY3JlYXRlIHx8IChmdW5jdGlvbiAoKSB7XG4gICAgdmFyIE9iamVjdCA9IGZ1bmN0aW9uICgpIHt9O1xuICAgIHJldHVybiBmdW5jdGlvbiAocHJvdG90eXBlKSB7XG4gICAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA+IDEpIHtcbiAgICAgICAgdGhyb3cgRXJyb3IoJ1NlY29uZCBhcmd1bWVudCBub3Qgc3VwcG9ydGVkJyk7XG4gICAgICB9XG4gICAgICBpZiAodHlwZW9mIHByb3RvdHlwZSAhPSAnb2JqZWN0Jykge1xuICAgICAgICB0aHJvdyBUeXBlRXJyb3IoJ0FyZ3VtZW50IG11c3QgYmUgYW4gb2JqZWN0Jyk7XG4gICAgICB9XG4gICAgICBPYmplY3QucHJvdG90eXBlID0gcHJvdG90eXBlO1xuICAgICAgdmFyIHJlc3VsdCA9IG5ldyBPYmplY3QoKTtcbiAgICAgIE9iamVjdC5wcm90b3R5cGUgPSBudWxsO1xuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9O1xuICB9KSgpLFxuXG4gIF9TdWJtaXRTZWxlY3RvcjogJ2lucHV0W3R5cGU9XCJzdWJtaXRcIl0sIGJ1dHRvbjpzdWJtaXQnXG59O1xuXG5leHBvcnQgZGVmYXVsdCBVdGlscztcbiIsImltcG9ydCAkIGZyb20gJ2pxdWVyeSc7XG5pbXBvcnQgVXRpbHMgZnJvbSAnLi91dGlscyc7XG5cbnZhciBjb252ZXJ0QXJyYXlSZXF1aXJlbWVudCA9IGZ1bmN0aW9uKHN0cmluZywgbGVuZ3RoKSB7XG4gIHZhciBtID0gc3RyaW5nLm1hdGNoKC9eXFxzKlxcWyguKilcXF1cXHMqJC8pO1xuICBpZiAoIW0pXG4gICAgdGhyb3cgJ1JlcXVpcmVtZW50IGlzIG5vdCBhbiBhcnJheTogXCInICsgc3RyaW5nICsgJ1wiJztcbiAgdmFyIHZhbHVlcyA9IG1bMV0uc3BsaXQoJywnKS5tYXAoVXRpbHMudHJpbVN0cmluZyk7XG4gIGlmICh2YWx1ZXMubGVuZ3RoICE9PSBsZW5ndGgpXG4gICAgdGhyb3cgJ1JlcXVpcmVtZW50IGhhcyAnICsgdmFsdWVzLmxlbmd0aCArICcgdmFsdWVzIHdoZW4gJyArIGxlbmd0aCArICcgYXJlIG5lZWRlZCc7XG4gIHJldHVybiB2YWx1ZXM7XG59O1xuXG52YXIgY29udmVydEV4dHJhT3B0aW9uUmVxdWlyZW1lbnQgPSBmdW5jdGlvbihyZXF1aXJlbWVudFNwZWMsIHN0cmluZywgZXh0cmFPcHRpb25SZWFkZXIpIHtcbiAgdmFyIG1haW4gPSBudWxsO1xuICB2YXIgZXh0cmEgPSB7fTtcbiAgZm9yICh2YXIga2V5IGluIHJlcXVpcmVtZW50U3BlYykge1xuICAgIGlmIChrZXkpIHtcbiAgICAgIHZhciB2YWx1ZSA9IGV4dHJhT3B0aW9uUmVhZGVyKGtleSk7XG4gICAgICBpZiAoJ3N0cmluZycgPT09IHR5cGVvZiB2YWx1ZSlcbiAgICAgICAgdmFsdWUgPSBVdGlscy5wYXJzZVJlcXVpcmVtZW50KHJlcXVpcmVtZW50U3BlY1trZXldLCB2YWx1ZSk7XG4gICAgICBleHRyYVtrZXldID0gdmFsdWU7XG4gICAgfSBlbHNlIHtcbiAgICAgIG1haW4gPSBVdGlscy5wYXJzZVJlcXVpcmVtZW50KHJlcXVpcmVtZW50U3BlY1trZXldLCBzdHJpbmcpO1xuICAgIH1cbiAgfVxuICByZXR1cm4gW21haW4sIGV4dHJhXTtcbn07XG5cbi8vIEEgVmFsaWRhdG9yIG5lZWRzIHRvIGltcGxlbWVudCB0aGUgbWV0aG9kcyBgdmFsaWRhdGVgIGFuZCBgcGFyc2VSZXF1aXJlbWVudHNgXG5cbnZhciBWYWxpZGF0b3IgPSBmdW5jdGlvbihzcGVjKSB7XG4gICQuZXh0ZW5kKHRydWUsIHRoaXMsIHNwZWMpO1xufTtcblxuVmFsaWRhdG9yLnByb3RvdHlwZSA9IHtcbiAgLy8gUmV0dXJucyBgdHJ1ZWAgaWZmIHRoZSBnaXZlbiBgdmFsdWVgIGlzIHZhbGlkIGFjY29yZGluZyB0aGUgZ2l2ZW4gcmVxdWlyZW1lbnRzLlxuICB2YWxpZGF0ZTogZnVuY3Rpb24odmFsdWUsIHJlcXVpcmVtZW50Rmlyc3RBcmcpIHtcbiAgICBpZiAodGhpcy5mbikgeyAvLyBMZWdhY3kgc3R5bGUgdmFsaWRhdG9yXG5cbiAgICAgIGlmIChhcmd1bWVudHMubGVuZ3RoID4gMykgIC8vIElmIG1vcmUgYXJncyB0aGVuIHZhbHVlLCByZXF1aXJlbWVudCwgaW5zdGFuY2UuLi5cbiAgICAgICAgcmVxdWlyZW1lbnRGaXJzdEFyZyA9IFtdLnNsaWNlLmNhbGwoYXJndW1lbnRzLCAxLCAtMSk7ICAvLyBTa2lwIGZpcnN0IGFyZyAodmFsdWUpIGFuZCBsYXN0IChpbnN0YW5jZSksIGNvbWJpbmluZyB0aGUgcmVzdFxuICAgICAgcmV0dXJuIHRoaXMuZm4odmFsdWUsIHJlcXVpcmVtZW50Rmlyc3RBcmcpO1xuICAgIH1cblxuICAgIGlmIChBcnJheS5pc0FycmF5KHZhbHVlKSkge1xuICAgICAgaWYgKCF0aGlzLnZhbGlkYXRlTXVsdGlwbGUpXG4gICAgICAgIHRocm93ICdWYWxpZGF0b3IgYCcgKyB0aGlzLm5hbWUgKyAnYCBkb2VzIG5vdCBoYW5kbGUgbXVsdGlwbGUgdmFsdWVzJztcbiAgICAgIHJldHVybiB0aGlzLnZhbGlkYXRlTXVsdGlwbGUoLi4uYXJndW1lbnRzKTtcbiAgICB9IGVsc2Uge1xuICAgICAgbGV0IGluc3RhbmNlID0gYXJndW1lbnRzW2FyZ3VtZW50cy5sZW5ndGggLSAxXTtcbiAgICAgIGlmICh0aGlzLnZhbGlkYXRlRGF0ZSAmJiBpbnN0YW5jZS5faXNEYXRlSW5wdXQoKSkge1xuICAgICAgICBhcmd1bWVudHNbMF0gPSBVdGlscy5wYXJzZS5kYXRlKGFyZ3VtZW50c1swXSk7XG4gICAgICAgIGlmIChhcmd1bWVudHNbMF0gPT09IG51bGwpXG4gICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICByZXR1cm4gdGhpcy52YWxpZGF0ZURhdGUoLi4uYXJndW1lbnRzKTtcbiAgICAgIH1cbiAgICAgIGlmICh0aGlzLnZhbGlkYXRlTnVtYmVyKSB7XG4gICAgICAgIGlmIChpc05hTih2YWx1ZSkpXG4gICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICBhcmd1bWVudHNbMF0gPSBwYXJzZUZsb2F0KGFyZ3VtZW50c1swXSk7XG4gICAgICAgIHJldHVybiB0aGlzLnZhbGlkYXRlTnVtYmVyKC4uLmFyZ3VtZW50cyk7XG4gICAgICB9XG4gICAgICBpZiAodGhpcy52YWxpZGF0ZVN0cmluZykge1xuICAgICAgICByZXR1cm4gdGhpcy52YWxpZGF0ZVN0cmluZyguLi5hcmd1bWVudHMpO1xuICAgICAgfVxuICAgICAgdGhyb3cgJ1ZhbGlkYXRvciBgJyArIHRoaXMubmFtZSArICdgIG9ubHkgaGFuZGxlcyBtdWx0aXBsZSB2YWx1ZXMnO1xuICAgIH1cbiAgfSxcblxuICAvLyBQYXJzZXMgYHJlcXVpcmVtZW50c2AgaW50byBhbiBhcnJheSBvZiBhcmd1bWVudHMsXG4gIC8vIGFjY29yZGluZyB0byBgdGhpcy5yZXF1aXJlbWVudFR5cGVgXG4gIHBhcnNlUmVxdWlyZW1lbnRzOiBmdW5jdGlvbihyZXF1aXJlbWVudHMsIGV4dHJhT3B0aW9uUmVhZGVyKSB7XG4gICAgaWYgKCdzdHJpbmcnICE9PSB0eXBlb2YgcmVxdWlyZW1lbnRzKSB7XG4gICAgICAvLyBBc3N1bWUgcmVxdWlyZW1lbnQgYWxyZWFkeSBwYXJzZWRcbiAgICAgIC8vIGJ1dCBtYWtlIHN1cmUgd2UgcmV0dXJuIGFuIGFycmF5XG4gICAgICByZXR1cm4gQXJyYXkuaXNBcnJheShyZXF1aXJlbWVudHMpID8gcmVxdWlyZW1lbnRzIDogW3JlcXVpcmVtZW50c107XG4gICAgfVxuICAgIHZhciB0eXBlID0gdGhpcy5yZXF1aXJlbWVudFR5cGU7XG4gICAgaWYgKEFycmF5LmlzQXJyYXkodHlwZSkpIHtcbiAgICAgIHZhciB2YWx1ZXMgPSBjb252ZXJ0QXJyYXlSZXF1aXJlbWVudChyZXF1aXJlbWVudHMsIHR5cGUubGVuZ3RoKTtcbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdmFsdWVzLmxlbmd0aDsgaSsrKVxuICAgICAgICB2YWx1ZXNbaV0gPSBVdGlscy5wYXJzZVJlcXVpcmVtZW50KHR5cGVbaV0sIHZhbHVlc1tpXSk7XG4gICAgICByZXR1cm4gdmFsdWVzO1xuICAgIH0gZWxzZSBpZiAoJC5pc1BsYWluT2JqZWN0KHR5cGUpKSB7XG4gICAgICByZXR1cm4gY29udmVydEV4dHJhT3B0aW9uUmVxdWlyZW1lbnQodHlwZSwgcmVxdWlyZW1lbnRzLCBleHRyYU9wdGlvblJlYWRlcik7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBbVXRpbHMucGFyc2VSZXF1aXJlbWVudCh0eXBlLCByZXF1aXJlbWVudHMpXTtcbiAgICB9XG4gIH0sXG4gIC8vIERlZmF1bHRzOlxuICByZXF1aXJlbWVudFR5cGU6ICdzdHJpbmcnLFxuXG4gIHByaW9yaXR5OiAyXG5cbn07XG5cbmV4cG9ydCBkZWZhdWx0IFZhbGlkYXRvcjtcbiIsImltcG9ydCAkIGZyb20gJ2pxdWVyeSc7XG5pbXBvcnQgVXRpbHMgZnJvbSAnLi91dGlscyc7XG5pbXBvcnQgRGVmYXVsdHMgZnJvbSAnLi9kZWZhdWx0cyc7XG5pbXBvcnQgVmFsaWRhdG9yIGZyb20gJy4vdmFsaWRhdG9yJztcblxudmFyIFZhbGlkYXRvclJlZ2lzdHJ5ID0gZnVuY3Rpb24gKHZhbGlkYXRvcnMsIGNhdGFsb2cpIHtcbiAgdGhpcy5fX2NsYXNzX18gPSAnVmFsaWRhdG9yUmVnaXN0cnknO1xuXG4gIC8vIERlZmF1bHQgUGFyc2xleSBsb2NhbGUgaXMgZW5cbiAgdGhpcy5sb2NhbGUgPSAnZW4nO1xuXG4gIHRoaXMuaW5pdCh2YWxpZGF0b3JzIHx8IHt9LCBjYXRhbG9nIHx8IHt9KTtcbn07XG5cbnZhciB0eXBlVGVzdGVycyA9ICB7XG4gIGVtYWlsOiAvXigoKFthLXpBLVpdfFxcZHxbISNcXCQlJidcXCpcXCtcXC1cXC89XFw/XFxeX2B7XFx8fX5dfFtcXHUwMEEwLVxcdUQ3RkZcXHVGOTAwLVxcdUZEQ0ZcXHVGREYwLVxcdUZGRUZdKSsoXFwuKFthLXpBLVpdfFxcZHxbISNcXCQlJidcXCpcXCtcXC1cXC89XFw/XFxeX2B7XFx8fX5dfFtcXHUwMEEwLVxcdUQ3RkZcXHVGOTAwLVxcdUZEQ0ZcXHVGREYwLVxcdUZGRUZdKSspKil8KChcXHgyMikoKCgoXFx4MjB8XFx4MDkpKihcXHgwZFxceDBhKSk/KFxceDIwfFxceDA5KSspPygoW1xceDAxLVxceDA4XFx4MGJcXHgwY1xceDBlLVxceDFmXFx4N2ZdfFxceDIxfFtcXHgyMy1cXHg1Yl18W1xceDVkLVxceDdlXXxbXFx1MDBBMC1cXHVEN0ZGXFx1RjkwMC1cXHVGRENGXFx1RkRGMC1cXHVGRkVGXSl8KFxcXFwoW1xceDAxLVxceDA5XFx4MGJcXHgwY1xceDBkLVxceDdmXXxbXFx1MDBBMC1cXHVEN0ZGXFx1RjkwMC1cXHVGRENGXFx1RkRGMC1cXHVGRkVGXSkpKSkqKCgoXFx4MjB8XFx4MDkpKihcXHgwZFxceDBhKSk/KFxceDIwfFxceDA5KSspPyhcXHgyMikpKUAoKChbYS16QS1aXXxcXGR8W1xcdTAwQTAtXFx1RDdGRlxcdUY5MDAtXFx1RkRDRlxcdUZERjAtXFx1RkZFRl0pfCgoW2EtekEtWl18XFxkfFtcXHUwMEEwLVxcdUQ3RkZcXHVGOTAwLVxcdUZEQ0ZcXHVGREYwLVxcdUZGRUZdKShbYS16QS1aXXxcXGR8LXxffH58W1xcdTAwQTAtXFx1RDdGRlxcdUY5MDAtXFx1RkRDRlxcdUZERjAtXFx1RkZFRl0pKihbYS16QS1aXXxcXGR8W1xcdTAwQTAtXFx1RDdGRlxcdUY5MDAtXFx1RkRDRlxcdUZERjAtXFx1RkZFRl0pKSlcXC4pKygoW2EtekEtWl18W1xcdTAwQTAtXFx1RDdGRlxcdUY5MDAtXFx1RkRDRlxcdUZERjAtXFx1RkZFRl0pfCgoW2EtekEtWl18W1xcdTAwQTAtXFx1RDdGRlxcdUY5MDAtXFx1RkRDRlxcdUZERjAtXFx1RkZFRl0pKFthLXpBLVpdfFxcZHwtfF98fnxbXFx1MDBBMC1cXHVEN0ZGXFx1RjkwMC1cXHVGRENGXFx1RkRGMC1cXHVGRkVGXSkqKFthLXpBLVpdfFtcXHUwMEEwLVxcdUQ3RkZcXHVGOTAwLVxcdUZEQ0ZcXHVGREYwLVxcdUZGRUZdKSkpJC8sXG5cbiAgLy8gRm9sbG93IGh0dHBzOi8vd3d3LnczLm9yZy9UUi9odG1sNS9pbmZyYXN0cnVjdHVyZS5odG1sI2Zsb2F0aW5nLXBvaW50LW51bWJlcnNcbiAgbnVtYmVyOiAvXi0/KFxcZCpcXC4pP1xcZCsoZVstK10/XFxkKyk/JC9pLFxuXG4gIGludGVnZXI6IC9eLT9cXGQrJC8sXG5cbiAgZGlnaXRzOiAvXlxcZCskLyxcblxuICBhbHBoYW51bTogL15cXHcrJC9pLFxuXG4gIGRhdGU6IHtcbiAgICB0ZXN0OiB2YWx1ZSA9PiBVdGlscy5wYXJzZS5kYXRlKHZhbHVlKSAhPT0gbnVsbFxuICB9LFxuXG4gIHVybDogbmV3IFJlZ0V4cChcbiAgICAgIFwiXlwiICtcbiAgICAgICAgLy8gcHJvdG9jb2wgaWRlbnRpZmllclxuICAgICAgICBcIig/Oig/Omh0dHBzP3xmdHApOi8vKT9cIiArIC8vICoqIG1vZDogbWFrZSBzY2hlbWUgb3B0aW9uYWxcbiAgICAgICAgLy8gdXNlcjpwYXNzIGF1dGhlbnRpY2F0aW9uXG4gICAgICAgIFwiKD86XFxcXFMrKD86OlxcXFxTKik/QCk/XCIgK1xuICAgICAgICBcIig/OlwiICtcbiAgICAgICAgICAvLyBJUCBhZGRyZXNzIGV4Y2x1c2lvblxuICAgICAgICAgIC8vIHByaXZhdGUgJiBsb2NhbCBuZXR3b3Jrc1xuICAgICAgICAgIC8vIFwiKD8hKD86MTB8MTI3KSg/OlxcXFwuXFxcXGR7MSwzfSl7M30pXCIgKyAgIC8vICoqIG1vZDogYWxsb3cgbG9jYWwgbmV0d29ya3NcbiAgICAgICAgICAvLyBcIig/ISg/OjE2OVxcXFwuMjU0fDE5MlxcXFwuMTY4KSg/OlxcXFwuXFxcXGR7MSwzfSl7Mn0pXCIgKyAgLy8gKiogbW9kOiBhbGxvdyBsb2NhbCBuZXR3b3Jrc1xuICAgICAgICAgIC8vIFwiKD8hMTcyXFxcXC4oPzoxWzYtOV18MlxcXFxkfDNbMC0xXSkoPzpcXFxcLlxcXFxkezEsM30pezJ9KVwiICsgIC8vICoqIG1vZDogYWxsb3cgbG9jYWwgbmV0d29ya3NcbiAgICAgICAgICAvLyBJUCBhZGRyZXNzIGRvdHRlZCBub3RhdGlvbiBvY3RldHNcbiAgICAgICAgICAvLyBleGNsdWRlcyBsb29wYmFjayBuZXR3b3JrIDAuMC4wLjBcbiAgICAgICAgICAvLyBleGNsdWRlcyByZXNlcnZlZCBzcGFjZSA+PSAyMjQuMC4wLjBcbiAgICAgICAgICAvLyBleGNsdWRlcyBuZXR3b3JrICYgYnJvYWNhc3QgYWRkcmVzc2VzXG4gICAgICAgICAgLy8gKGZpcnN0ICYgbGFzdCBJUCBhZGRyZXNzIG9mIGVhY2ggY2xhc3MpXG4gICAgICAgICAgXCIoPzpbMS05XVxcXFxkP3wxXFxcXGRcXFxcZHwyWzAxXVxcXFxkfDIyWzAtM10pXCIgK1xuICAgICAgICAgIFwiKD86XFxcXC4oPzoxP1xcXFxkezEsMn18MlswLTRdXFxcXGR8MjVbMC01XSkpezJ9XCIgK1xuICAgICAgICAgIFwiKD86XFxcXC4oPzpbMS05XVxcXFxkP3wxXFxcXGRcXFxcZHwyWzAtNF1cXFxcZHwyNVswLTRdKSlcIiArXG4gICAgICAgIFwifFwiICtcbiAgICAgICAgICAvLyBob3N0IG5hbWVcbiAgICAgICAgICBcIig/Oig/OlthLXpBLVpcXFxcdTAwYTEtXFxcXHVmZmZmMC05XS0qKSpbYS16QS1aXFxcXHUwMGExLVxcXFx1ZmZmZjAtOV0rKVwiICtcbiAgICAgICAgICAvLyBkb21haW4gbmFtZVxuICAgICAgICAgIFwiKD86XFxcXC4oPzpbYS16QS1aXFxcXHUwMGExLVxcXFx1ZmZmZjAtOV0tKikqW2EtekEtWlxcXFx1MDBhMS1cXFxcdWZmZmYwLTldKykqXCIgK1xuICAgICAgICAgIC8vIFRMRCBpZGVudGlmaWVyXG4gICAgICAgICAgXCIoPzpcXFxcLig/OlthLXpBLVpcXFxcdTAwYTEtXFxcXHVmZmZmXXsyLH0pKVwiICtcbiAgICAgICAgXCIpXCIgK1xuICAgICAgICAvLyBwb3J0IG51bWJlclxuICAgICAgICBcIig/OjpcXFxcZHsyLDV9KT9cIiArXG4gICAgICAgIC8vIHJlc291cmNlIHBhdGhcbiAgICAgICAgXCIoPzovXFxcXFMqKT9cIiArXG4gICAgICBcIiRcIlxuICAgIClcbn07XG50eXBlVGVzdGVycy5yYW5nZSA9IHR5cGVUZXN0ZXJzLm51bWJlcjtcblxuLy8gU2VlIGh0dHA6Ly9zdGFja292ZXJmbG93LmNvbS9hLzEwNDU0NTYwLzgyNzlcbnZhciBkZWNpbWFsUGxhY2VzID0gbnVtID0+IHtcbiAgdmFyIG1hdGNoID0gKCcnICsgbnVtKS5tYXRjaCgvKD86XFwuKFxcZCspKT8oPzpbZUVdKFsrLV0/XFxkKykpPyQvKTtcbiAgaWYgKCFtYXRjaCkgeyByZXR1cm4gMDsgfVxuICByZXR1cm4gTWF0aC5tYXgoXG4gICAgICAgMCxcbiAgICAgICAvLyBOdW1iZXIgb2YgZGlnaXRzIHJpZ2h0IG9mIGRlY2ltYWwgcG9pbnQuXG4gICAgICAgKG1hdGNoWzFdID8gbWF0Y2hbMV0ubGVuZ3RoIDogMCkgLVxuICAgICAgIC8vIEFkanVzdCBmb3Igc2NpZW50aWZpYyBub3RhdGlvbi5cbiAgICAgICAobWF0Y2hbMl0gPyArbWF0Y2hbMl0gOiAwKSk7XG59O1xuXG4vLyBwYXJzZUFyZ3VtZW50cygnbnVtYmVyJywgWycxJywgJzInXSkgPT4gWzEsIDJdXG5sZXQgcGFyc2VBcmd1bWVudHMgPSAodHlwZSwgYXJncykgPT4gYXJncy5tYXAoVXRpbHMucGFyc2VbdHlwZV0pO1xuLy8gb3BlcmF0b3JUb1ZhbGlkYXRvciByZXR1cm5zIGEgdmFsaWRhdGluZyBmdW5jdGlvbiBmb3IgYW4gb3BlcmF0b3IgZnVuY3Rpb24sIGFwcGxpZWQgdG8gdGhlIGdpdmVuIHR5cGVcbmxldCBvcGVyYXRvclRvVmFsaWRhdG9yID0gKHR5cGUsIG9wZXJhdG9yKSA9PiB7XG4gIHJldHVybiAodmFsdWUsIC4uLnJlcXVpcmVtZW50c0FuZElucHV0KSA9PiB7XG4gICAgcmVxdWlyZW1lbnRzQW5kSW5wdXQucG9wKCk7IC8vIEdldCByaWQgb2YgYGlucHV0YCBhcmd1bWVudFxuICAgIGlmICghdmFsdWUpXG4gICAgICByZXR1cm4gdHJ1ZTsgIC8vIEJ1aWx0aW4gdmFsaWRhdG9ycyBhbGwgYWNjZXB0IGVtcHR5IHN0cmluZ3MsIGV4Y2VwdCBgcmVxdWlyZWRgIG9mIGNvdXJzZVxuICAgIHJldHVybiBvcGVyYXRvcih2YWx1ZSwgLi4ucGFyc2VBcmd1bWVudHModHlwZSwgcmVxdWlyZW1lbnRzQW5kSW5wdXQpKTtcbiAgfTtcbn07XG5cbmxldCBjb21wYXJpc29uT3BlcmF0b3IgPSBvcGVyYXRvciA9PiAoe1xuICB2YWxpZGF0ZURhdGU6IG9wZXJhdG9yVG9WYWxpZGF0b3IoJ2RhdGUnLCBvcGVyYXRvciksXG4gIHZhbGlkYXRlTnVtYmVyOiBvcGVyYXRvclRvVmFsaWRhdG9yKCdudW1iZXInLCBvcGVyYXRvciksXG4gIHJlcXVpcmVtZW50VHlwZTogb3BlcmF0b3IubGVuZ3RoIDw9IDIgPyAnc3RyaW5nJyA6IFsnc3RyaW5nJywgJ3N0cmluZyddLCAvLyBTdXBwb3J0IG9wZXJhdG9ycyB3aXRoIGEgMSBvciAyIHJlcXVpcmVtZW50KHMpXG4gIHByaW9yaXR5OiAzMFxufSk7XG5cblZhbGlkYXRvclJlZ2lzdHJ5LnByb3RvdHlwZSA9IHtcbiAgaW5pdDogZnVuY3Rpb24gKHZhbGlkYXRvcnMsIGNhdGFsb2cpIHtcbiAgICB0aGlzLmNhdGFsb2cgPSBjYXRhbG9nO1xuICAgIC8vIENvcHkgcHJvdG90eXBlJ3MgdmFsaWRhdG9yczpcbiAgICB0aGlzLnZhbGlkYXRvcnMgPSBPYmplY3QuYXNzaWduKHt9LCB0aGlzLnZhbGlkYXRvcnMpO1xuXG4gICAgZm9yICh2YXIgbmFtZSBpbiB2YWxpZGF0b3JzKVxuICAgICAgdGhpcy5hZGRWYWxpZGF0b3IobmFtZSwgdmFsaWRhdG9yc1tuYW1lXS5mbiwgdmFsaWRhdG9yc1tuYW1lXS5wcmlvcml0eSk7XG5cbiAgICB3aW5kb3cuUGFyc2xleS50cmlnZ2VyKCdwYXJzbGV5OnZhbGlkYXRvcjppbml0Jyk7XG4gIH0sXG5cbiAgLy8gU2V0IG5ldyBtZXNzYWdlcyBsb2NhbGUgaWYgd2UgaGF2ZSBkaWN0aW9uYXJ5IGxvYWRlZCBpbiBQYXJzbGV5Q29uZmlnLmkxOG5cbiAgc2V0TG9jYWxlOiBmdW5jdGlvbiAobG9jYWxlKSB7XG4gICAgaWYgKCd1bmRlZmluZWQnID09PSB0eXBlb2YgdGhpcy5jYXRhbG9nW2xvY2FsZV0pXG4gICAgICB0aHJvdyBuZXcgRXJyb3IobG9jYWxlICsgJyBpcyBub3QgYXZhaWxhYmxlIGluIHRoZSBjYXRhbG9nJyk7XG5cbiAgICB0aGlzLmxvY2FsZSA9IGxvY2FsZTtcblxuICAgIHJldHVybiB0aGlzO1xuICB9LFxuXG4gIC8vIEFkZCBhIG5ldyBtZXNzYWdlcyBjYXRhbG9nIGZvciBhIGdpdmVuIGxvY2FsZS4gU2V0IGxvY2FsZSBmb3IgdGhpcyBjYXRhbG9nIGlmIHNldCA9PT0gYHRydWVgXG4gIGFkZENhdGFsb2c6IGZ1bmN0aW9uIChsb2NhbGUsIG1lc3NhZ2VzLCBzZXQpIHtcbiAgICBpZiAoJ29iamVjdCcgPT09IHR5cGVvZiBtZXNzYWdlcylcbiAgICAgIHRoaXMuY2F0YWxvZ1tsb2NhbGVdID0gbWVzc2FnZXM7XG5cbiAgICBpZiAodHJ1ZSA9PT0gc2V0KVxuICAgICAgcmV0dXJuIHRoaXMuc2V0TG9jYWxlKGxvY2FsZSk7XG5cbiAgICByZXR1cm4gdGhpcztcbiAgfSxcblxuICAvLyBBZGQgYSBzcGVjaWZpYyBtZXNzYWdlIGZvciBhIGdpdmVuIGNvbnN0cmFpbnQgaW4gYSBnaXZlbiBsb2NhbGVcbiAgYWRkTWVzc2FnZTogZnVuY3Rpb24gKGxvY2FsZSwgbmFtZSwgbWVzc2FnZSkge1xuICAgIGlmICgndW5kZWZpbmVkJyA9PT0gdHlwZW9mIHRoaXMuY2F0YWxvZ1tsb2NhbGVdKVxuICAgICAgdGhpcy5jYXRhbG9nW2xvY2FsZV0gPSB7fTtcblxuICAgIHRoaXMuY2F0YWxvZ1tsb2NhbGVdW25hbWVdID0gbWVzc2FnZTtcblxuICAgIHJldHVybiB0aGlzO1xuICB9LFxuXG4gIC8vIEFkZCBtZXNzYWdlcyBmb3IgYSBnaXZlbiBsb2NhbGVcbiAgYWRkTWVzc2FnZXM6IGZ1bmN0aW9uIChsb2NhbGUsIG5hbWVNZXNzYWdlT2JqZWN0KSB7XG4gICAgZm9yICh2YXIgbmFtZSBpbiBuYW1lTWVzc2FnZU9iamVjdClcbiAgICAgIHRoaXMuYWRkTWVzc2FnZShsb2NhbGUsIG5hbWUsIG5hbWVNZXNzYWdlT2JqZWN0W25hbWVdKTtcblxuICAgIHJldHVybiB0aGlzO1xuICB9LFxuXG4gIC8vIEFkZCBhIG5ldyB2YWxpZGF0b3JcbiAgLy9cbiAgLy8gICAgYWRkVmFsaWRhdG9yKCdjdXN0b20nLCB7XG4gIC8vICAgICAgICByZXF1aXJlbWVudFR5cGU6IFsnaW50ZWdlcicsICdpbnRlZ2VyJ10sXG4gIC8vICAgICAgICB2YWxpZGF0ZVN0cmluZzogZnVuY3Rpb24odmFsdWUsIGZyb20sIHRvKSB7fSxcbiAgLy8gICAgICAgIHByaW9yaXR5OiAyMixcbiAgLy8gICAgICAgIG1lc3NhZ2VzOiB7XG4gIC8vICAgICAgICAgIGVuOiBcIkhleSwgdGhhdCdzIG5vIGdvb2RcIixcbiAgLy8gICAgICAgICAgZnI6IFwiQXllIGF5ZSwgcGFzIGJvbiBkdSB0b3V0XCIsXG4gIC8vICAgICAgICB9XG4gIC8vICAgIH0pXG4gIC8vXG4gIC8vIE9sZCBBUEkgd2FzIGFkZFZhbGlkYXRvcihuYW1lLCBmdW5jdGlvbiwgcHJpb3JpdHkpXG4gIC8vXG4gIGFkZFZhbGlkYXRvcjogZnVuY3Rpb24gKG5hbWUsIGFyZzEsIGFyZzIpIHtcbiAgICBpZiAodGhpcy52YWxpZGF0b3JzW25hbWVdKVxuICAgICAgVXRpbHMud2FybignVmFsaWRhdG9yIFwiJyArIG5hbWUgKyAnXCIgaXMgYWxyZWFkeSBkZWZpbmVkLicpO1xuICAgIGVsc2UgaWYgKERlZmF1bHRzLmhhc093blByb3BlcnR5KG5hbWUpKSB7XG4gICAgICBVdGlscy53YXJuKCdcIicgKyBuYW1lICsgJ1wiIGlzIGEgcmVzdHJpY3RlZCBrZXl3b3JkIGFuZCBpcyBub3QgYSB2YWxpZCB2YWxpZGF0b3IgbmFtZS4nKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgcmV0dXJuIHRoaXMuX3NldFZhbGlkYXRvciguLi5hcmd1bWVudHMpO1xuICB9LFxuXG4gIGhhc1ZhbGlkYXRvcjogZnVuY3Rpb24gKG5hbWUpIHtcbiAgICByZXR1cm4gISF0aGlzLnZhbGlkYXRvcnNbbmFtZV07XG4gIH0sXG5cbiAgdXBkYXRlVmFsaWRhdG9yOiBmdW5jdGlvbiAobmFtZSwgYXJnMSwgYXJnMikge1xuICAgIGlmICghdGhpcy52YWxpZGF0b3JzW25hbWVdKSB7XG4gICAgICBVdGlscy53YXJuKCdWYWxpZGF0b3IgXCInICsgbmFtZSArICdcIiBpcyBub3QgYWxyZWFkeSBkZWZpbmVkLicpO1xuICAgICAgcmV0dXJuIHRoaXMuYWRkVmFsaWRhdG9yKC4uLmFyZ3VtZW50cyk7XG4gICAgfVxuICAgIHJldHVybiB0aGlzLl9zZXRWYWxpZGF0b3IoLi4uYXJndW1lbnRzKTtcbiAgfSxcblxuICByZW1vdmVWYWxpZGF0b3I6IGZ1bmN0aW9uIChuYW1lKSB7XG4gICAgaWYgKCF0aGlzLnZhbGlkYXRvcnNbbmFtZV0pXG4gICAgICBVdGlscy53YXJuKCdWYWxpZGF0b3IgXCInICsgbmFtZSArICdcIiBpcyBub3QgZGVmaW5lZC4nKTtcblxuICAgIGRlbGV0ZSB0aGlzLnZhbGlkYXRvcnNbbmFtZV07XG5cbiAgICByZXR1cm4gdGhpcztcbiAgfSxcblxuICBfc2V0VmFsaWRhdG9yOiBmdW5jdGlvbiAobmFtZSwgdmFsaWRhdG9yLCBwcmlvcml0eSkge1xuICAgIGlmICgnb2JqZWN0JyAhPT0gdHlwZW9mIHZhbGlkYXRvcikge1xuICAgICAgLy8gT2xkIHN0eWxlIHZhbGlkYXRvciwgd2l0aCBgZm5gIGFuZCBgcHJpb3JpdHlgXG4gICAgICB2YWxpZGF0b3IgPSB7XG4gICAgICAgIGZuOiB2YWxpZGF0b3IsXG4gICAgICAgIHByaW9yaXR5OiBwcmlvcml0eVxuICAgICAgfTtcbiAgICB9XG4gICAgaWYgKCF2YWxpZGF0b3IudmFsaWRhdGUpIHtcbiAgICAgIHZhbGlkYXRvciA9IG5ldyBWYWxpZGF0b3IodmFsaWRhdG9yKTtcbiAgICB9XG4gICAgdGhpcy52YWxpZGF0b3JzW25hbWVdID0gdmFsaWRhdG9yO1xuXG4gICAgZm9yICh2YXIgbG9jYWxlIGluIHZhbGlkYXRvci5tZXNzYWdlcyB8fCB7fSlcbiAgICAgIHRoaXMuYWRkTWVzc2FnZShsb2NhbGUsIG5hbWUsIHZhbGlkYXRvci5tZXNzYWdlc1tsb2NhbGVdKTtcblxuICAgIHJldHVybiB0aGlzO1xuICB9LFxuXG4gIGdldEVycm9yTWVzc2FnZTogZnVuY3Rpb24gKGNvbnN0cmFpbnQpIHtcbiAgICB2YXIgbWVzc2FnZTtcblxuICAgIC8vIFR5cGUgY29uc3RyYWludHMgYXJlIGEgYml0IGRpZmZlcmVudCwgd2UgaGF2ZSB0byBtYXRjaCB0aGVpciByZXF1aXJlbWVudHMgdG9vIHRvIGZpbmQgcmlnaHQgZXJyb3IgbWVzc2FnZVxuICAgIGlmICgndHlwZScgPT09IGNvbnN0cmFpbnQubmFtZSkge1xuICAgICAgdmFyIHR5cGVNZXNzYWdlcyA9IHRoaXMuY2F0YWxvZ1t0aGlzLmxvY2FsZV1bY29uc3RyYWludC5uYW1lXSB8fCB7fTtcbiAgICAgIG1lc3NhZ2UgPSB0eXBlTWVzc2FnZXNbY29uc3RyYWludC5yZXF1aXJlbWVudHNdO1xuICAgIH0gZWxzZVxuICAgICAgbWVzc2FnZSA9IHRoaXMuZm9ybWF0TWVzc2FnZSh0aGlzLmNhdGFsb2dbdGhpcy5sb2NhbGVdW2NvbnN0cmFpbnQubmFtZV0sIGNvbnN0cmFpbnQucmVxdWlyZW1lbnRzKTtcblxuICAgIHJldHVybiBtZXNzYWdlIHx8IHRoaXMuY2F0YWxvZ1t0aGlzLmxvY2FsZV0uZGVmYXVsdE1lc3NhZ2UgfHwgdGhpcy5jYXRhbG9nLmVuLmRlZmF1bHRNZXNzYWdlO1xuICB9LFxuXG4gIC8vIEtpbmQgb2YgbGlnaHQgYHNwcmludGYoKWAgaW1wbGVtZW50YXRpb25cbiAgZm9ybWF0TWVzc2FnZTogZnVuY3Rpb24gKHN0cmluZywgcGFyYW1ldGVycykge1xuICAgIGlmICgnb2JqZWN0JyA9PT0gdHlwZW9mIHBhcmFtZXRlcnMpIHtcbiAgICAgIGZvciAodmFyIGkgaW4gcGFyYW1ldGVycylcbiAgICAgICAgc3RyaW5nID0gdGhpcy5mb3JtYXRNZXNzYWdlKHN0cmluZywgcGFyYW1ldGVyc1tpXSk7XG5cbiAgICAgIHJldHVybiBzdHJpbmc7XG4gICAgfVxuXG4gICAgcmV0dXJuICdzdHJpbmcnID09PSB0eXBlb2Ygc3RyaW5nID8gc3RyaW5nLnJlcGxhY2UoLyVzL2ksIHBhcmFtZXRlcnMpIDogJyc7XG4gIH0sXG5cbiAgLy8gSGVyZSBpcyB0aGUgUGFyc2xleSBkZWZhdWx0IHZhbGlkYXRvcnMgbGlzdC5cbiAgLy8gQSB2YWxpZGF0b3IgaXMgYW4gb2JqZWN0IHdpdGggdGhlIGZvbGxvd2luZyBrZXkgdmFsdWVzOlxuICAvLyAgLSBwcmlvcml0eTogYW4gaW50ZWdlclxuICAvLyAgLSByZXF1aXJlbWVudDogJ3N0cmluZycgKGRlZmF1bHQpLCAnaW50ZWdlcicsICdudW1iZXInLCAncmVnZXhwJyBvciBhbiBBcnJheSBvZiB0aGVzZVxuICAvLyAgLSB2YWxpZGF0ZVN0cmluZywgdmFsaWRhdGVNdWx0aXBsZSwgdmFsaWRhdGVOdW1iZXI6IGZ1bmN0aW9ucyByZXR1cm5pbmcgYHRydWVgLCBgZmFsc2VgIG9yIGEgcHJvbWlzZVxuICAvLyBBbHRlcm5hdGl2ZWx5LCBhIHZhbGlkYXRvciBjYW4gYmUgYSBmdW5jdGlvbiB0aGF0IHJldHVybnMgc3VjaCBhbiBvYmplY3RcbiAgLy9cbiAgdmFsaWRhdG9yczoge1xuICAgIG5vdGJsYW5rOiB7XG4gICAgICB2YWxpZGF0ZVN0cmluZzogZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgICAgcmV0dXJuIC9cXFMvLnRlc3QodmFsdWUpO1xuICAgICAgfSxcbiAgICAgIHByaW9yaXR5OiAyXG4gICAgfSxcbiAgICByZXF1aXJlZDoge1xuICAgICAgdmFsaWRhdGVNdWx0aXBsZTogZnVuY3Rpb24odmFsdWVzKSB7XG4gICAgICAgIHJldHVybiB2YWx1ZXMubGVuZ3RoID4gMDtcbiAgICAgIH0sXG4gICAgICB2YWxpZGF0ZVN0cmluZzogZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgICAgcmV0dXJuIC9cXFMvLnRlc3QodmFsdWUpO1xuICAgICAgfSxcbiAgICAgIHByaW9yaXR5OiA1MTJcbiAgICB9LFxuICAgIHR5cGU6IHtcbiAgICAgIHZhbGlkYXRlU3RyaW5nOiBmdW5jdGlvbih2YWx1ZSwgdHlwZSwge3N0ZXAgPSAnYW55JywgYmFzZSA9IDB9ID0ge30pIHtcbiAgICAgICAgdmFyIHRlc3RlciA9IHR5cGVUZXN0ZXJzW3R5cGVdO1xuICAgICAgICBpZiAoIXRlc3Rlcikge1xuICAgICAgICAgIHRocm93IG5ldyBFcnJvcigndmFsaWRhdG9yIHR5cGUgYCcgKyB0eXBlICsgJ2AgaXMgbm90IHN1cHBvcnRlZCcpO1xuICAgICAgICB9XG4gICAgICAgIGlmICghdmFsdWUpXG4gICAgICAgICAgcmV0dXJuIHRydWU7ICAvLyBCdWlsdGluIHZhbGlkYXRvcnMgYWxsIGFjY2VwdCBlbXB0eSBzdHJpbmdzLCBleGNlcHQgYHJlcXVpcmVkYCBvZiBjb3Vyc2VcbiAgICAgICAgaWYgKCF0ZXN0ZXIudGVzdCh2YWx1ZSkpXG4gICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICBpZiAoJ251bWJlcicgPT09IHR5cGUpIHtcbiAgICAgICAgICBpZiAoIS9eYW55JC9pLnRlc3Qoc3RlcCB8fCAnJykpIHtcbiAgICAgICAgICAgIHZhciBuYiA9IE51bWJlcih2YWx1ZSk7XG4gICAgICAgICAgICB2YXIgZGVjaW1hbHMgPSBNYXRoLm1heChkZWNpbWFsUGxhY2VzKHN0ZXApLCBkZWNpbWFsUGxhY2VzKGJhc2UpKTtcbiAgICAgICAgICAgIGlmIChkZWNpbWFsUGxhY2VzKG5iKSA+IGRlY2ltYWxzKSAvLyBWYWx1ZSBjYW4ndCBoYXZlIHRvbyBtYW55IGRlY2ltYWxzXG4gICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgIC8vIEJlIGNhcmVmdWwgb2Ygcm91bmRpbmcgZXJyb3JzIGJ5IHVzaW5nIGludGVnZXJzLlxuICAgICAgICAgICAgdmFyIHRvSW50ID0gZiA9PiBNYXRoLnJvdW5kKGYgKiBNYXRoLnBvdygxMCwgZGVjaW1hbHMpKTtcbiAgICAgICAgICAgIGlmICgodG9JbnQobmIpIC0gdG9JbnQoYmFzZSkpICUgdG9JbnQoc3RlcCkgIT0gMClcbiAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH0sXG4gICAgICByZXF1aXJlbWVudFR5cGU6IHtcbiAgICAgICAgJyc6ICdzdHJpbmcnLFxuICAgICAgICBzdGVwOiAnc3RyaW5nJyxcbiAgICAgICAgYmFzZTogJ251bWJlcidcbiAgICAgIH0sXG4gICAgICBwcmlvcml0eTogMjU2XG4gICAgfSxcbiAgICBwYXR0ZXJuOiB7XG4gICAgICB2YWxpZGF0ZVN0cmluZzogZnVuY3Rpb24odmFsdWUsIHJlZ2V4cCkge1xuICAgICAgICBpZiAoIXZhbHVlKVxuICAgICAgICAgIHJldHVybiB0cnVlOyAgLy8gQnVpbHRpbiB2YWxpZGF0b3JzIGFsbCBhY2NlcHQgZW1wdHkgc3RyaW5ncywgZXhjZXB0IGByZXF1aXJlZGAgb2YgY291cnNlXG4gICAgICAgIHJldHVybiByZWdleHAudGVzdCh2YWx1ZSk7XG4gICAgICB9LFxuICAgICAgcmVxdWlyZW1lbnRUeXBlOiAncmVnZXhwJyxcbiAgICAgIHByaW9yaXR5OiA2NFxuICAgIH0sXG4gICAgbWlubGVuZ3RoOiB7XG4gICAgICB2YWxpZGF0ZVN0cmluZzogZnVuY3Rpb24gKHZhbHVlLCByZXF1aXJlbWVudCkge1xuICAgICAgICBpZiAoIXZhbHVlKVxuICAgICAgICAgIHJldHVybiB0cnVlOyAgLy8gQnVpbHRpbiB2YWxpZGF0b3JzIGFsbCBhY2NlcHQgZW1wdHkgc3RyaW5ncywgZXhjZXB0IGByZXF1aXJlZGAgb2YgY291cnNlXG4gICAgICAgIHJldHVybiB2YWx1ZS5sZW5ndGggPj0gcmVxdWlyZW1lbnQ7XG4gICAgICB9LFxuICAgICAgcmVxdWlyZW1lbnRUeXBlOiAnaW50ZWdlcicsXG4gICAgICBwcmlvcml0eTogMzBcbiAgICB9LFxuICAgIG1heGxlbmd0aDoge1xuICAgICAgdmFsaWRhdGVTdHJpbmc6IGZ1bmN0aW9uICh2YWx1ZSwgcmVxdWlyZW1lbnQpIHtcbiAgICAgICAgcmV0dXJuIHZhbHVlLmxlbmd0aCA8PSByZXF1aXJlbWVudDtcbiAgICAgIH0sXG4gICAgICByZXF1aXJlbWVudFR5cGU6ICdpbnRlZ2VyJyxcbiAgICAgIHByaW9yaXR5OiAzMFxuICAgIH0sXG4gICAgbGVuZ3RoOiB7XG4gICAgICB2YWxpZGF0ZVN0cmluZzogZnVuY3Rpb24gKHZhbHVlLCBtaW4sIG1heCkge1xuICAgICAgICBpZiAoIXZhbHVlKVxuICAgICAgICAgIHJldHVybiB0cnVlOyAgLy8gQnVpbHRpbiB2YWxpZGF0b3JzIGFsbCBhY2NlcHQgZW1wdHkgc3RyaW5ncywgZXhjZXB0IGByZXF1aXJlZGAgb2YgY291cnNlXG4gICAgICAgIHJldHVybiB2YWx1ZS5sZW5ndGggPj0gbWluICYmIHZhbHVlLmxlbmd0aCA8PSBtYXg7XG4gICAgICB9LFxuICAgICAgcmVxdWlyZW1lbnRUeXBlOiBbJ2ludGVnZXInLCAnaW50ZWdlciddLFxuICAgICAgcHJpb3JpdHk6IDMwXG4gICAgfSxcbiAgICBtaW5jaGVjazoge1xuICAgICAgdmFsaWRhdGVNdWx0aXBsZTogZnVuY3Rpb24gKHZhbHVlcywgcmVxdWlyZW1lbnQpIHtcbiAgICAgICAgcmV0dXJuIHZhbHVlcy5sZW5ndGggPj0gcmVxdWlyZW1lbnQ7XG4gICAgICB9LFxuICAgICAgcmVxdWlyZW1lbnRUeXBlOiAnaW50ZWdlcicsXG4gICAgICBwcmlvcml0eTogMzBcbiAgICB9LFxuICAgIG1heGNoZWNrOiB7XG4gICAgICB2YWxpZGF0ZU11bHRpcGxlOiBmdW5jdGlvbiAodmFsdWVzLCByZXF1aXJlbWVudCkge1xuICAgICAgICByZXR1cm4gdmFsdWVzLmxlbmd0aCA8PSByZXF1aXJlbWVudDtcbiAgICAgIH0sXG4gICAgICByZXF1aXJlbWVudFR5cGU6ICdpbnRlZ2VyJyxcbiAgICAgIHByaW9yaXR5OiAzMFxuICAgIH0sXG4gICAgY2hlY2s6IHtcbiAgICAgIHZhbGlkYXRlTXVsdGlwbGU6IGZ1bmN0aW9uICh2YWx1ZXMsIG1pbiwgbWF4KSB7XG4gICAgICAgIHJldHVybiB2YWx1ZXMubGVuZ3RoID49IG1pbiAmJiB2YWx1ZXMubGVuZ3RoIDw9IG1heDtcbiAgICAgIH0sXG4gICAgICByZXF1aXJlbWVudFR5cGU6IFsnaW50ZWdlcicsICdpbnRlZ2VyJ10sXG4gICAgICBwcmlvcml0eTogMzBcbiAgICB9LFxuICAgIG1pbjogY29tcGFyaXNvbk9wZXJhdG9yKCh2YWx1ZSwgcmVxdWlyZW1lbnQpID0+IHZhbHVlID49IHJlcXVpcmVtZW50KSxcbiAgICBtYXg6IGNvbXBhcmlzb25PcGVyYXRvcigodmFsdWUsIHJlcXVpcmVtZW50KSA9PiB2YWx1ZSA8PSByZXF1aXJlbWVudCksXG4gICAgcmFuZ2U6IGNvbXBhcmlzb25PcGVyYXRvcigodmFsdWUsIG1pbiwgbWF4KSA9PiB2YWx1ZSA+PSBtaW4gJiYgdmFsdWUgPD0gbWF4KSxcbiAgICBlcXVhbHRvOiB7XG4gICAgICB2YWxpZGF0ZVN0cmluZzogZnVuY3Rpb24gKHZhbHVlLCByZWZPclZhbHVlKSB7XG4gICAgICAgIGlmICghdmFsdWUpXG4gICAgICAgICAgcmV0dXJuIHRydWU7ICAvLyBCdWlsdGluIHZhbGlkYXRvcnMgYWxsIGFjY2VwdCBlbXB0eSBzdHJpbmdzLCBleGNlcHQgYHJlcXVpcmVkYCBvZiBjb3Vyc2VcbiAgICAgICAgdmFyICRyZWZlcmVuY2UgPSAkKHJlZk9yVmFsdWUpO1xuICAgICAgICBpZiAoJHJlZmVyZW5jZS5sZW5ndGgpXG4gICAgICAgICAgcmV0dXJuIHZhbHVlID09PSAkcmVmZXJlbmNlLnZhbCgpO1xuICAgICAgICBlbHNlXG4gICAgICAgICAgcmV0dXJuIHZhbHVlID09PSByZWZPclZhbHVlO1xuICAgICAgfSxcbiAgICAgIHByaW9yaXR5OiAyNTZcbiAgICB9XG4gIH1cbn07XG5cbmV4cG9ydCBkZWZhdWx0IFZhbGlkYXRvclJlZ2lzdHJ5O1xuIiwiLyoqXG4gKiBpbnB1dGV2ZW50IC0gQWxsZXZpYXRlIGJyb3dzZXIgYnVncyBmb3IgaW5wdXQgZXZlbnRzXG4gKiBodHRwczovL2dpdGh1Yi5jb20vbWFyY2FuZHJlL2lucHV0ZXZlbnRcbiAqIEB2ZXJzaW9uIHYwLjAuMyAtIChidWlsdCBUaHUsIEFwciAxNHRoIDIwMTYsIDU6NTggcG0pXG4gKiBAYXV0aG9yIE1hcmMtQW5kcmUgTGFmb3J0dW5lIDxnaXRodWJAbWFyYy1hbmRyZS5jYT5cbiAqIEBsaWNlbnNlIE1JVFxuICovXG5cbmltcG9ydCAkIGZyb20gJ2pxdWVyeSc7XG5cbmZ1bmN0aW9uIElucHV0RXZlbnQoKSB7XG4gIGxldCBnbG9iYWxzID0gd2luZG93IHx8IGdsb2JhbDtcblxuICAvLyBTbGlnaHRseSBvZGQgd2F5IGNvbnN0cnVjdCBvdXIgb2JqZWN0LiBUaGlzIHdheSBtZXRob2RzIGFyZSBmb3JjZSBib3VuZC5cbiAgLy8gVXNlZCB0byB0ZXN0IGZvciBkdXBsaWNhdGUgbGlicmFyeS5cbiAgT2JqZWN0LmFzc2lnbih0aGlzLCB7XG5cbiAgICAvLyBGb3IgYnJvd3NlcnMgdGhhdCBkbyBub3Qgc3VwcG9ydCBpc1RydXN0ZWQsIGFzc3VtZXMgZXZlbnQgaXMgbmF0aXZlLlxuICAgIGlzTmF0aXZlRXZlbnQ6IGV2dCA9PiB7XG4gICAgICByZXR1cm4gZXZ0Lm9yaWdpbmFsRXZlbnQgJiYgZXZ0Lm9yaWdpbmFsRXZlbnQuaXNUcnVzdGVkICE9PSBmYWxzZTtcbiAgICB9LFxuXG4gICAgZmFrZUlucHV0RXZlbnQ6IGV2dCA9PiB7XG4gICAgICBpZiAodGhpcy5pc05hdGl2ZUV2ZW50KGV2dCkpIHtcbiAgICAgICAgJChldnQudGFyZ2V0KS50cmlnZ2VyKCdpbnB1dCcpO1xuICAgICAgfVxuICAgIH0sXG5cbiAgICBtaXNiZWhhdmVzOiBldnQgPT4ge1xuICAgICAgaWYgKHRoaXMuaXNOYXRpdmVFdmVudChldnQpKSB7XG4gICAgICAgIHRoaXMuYmVoYXZlc09rKGV2dCk7XG4gICAgICAgICQoZG9jdW1lbnQpXG4gICAgICAgICAgLm9uKCdjaGFuZ2UuaW5wdXRldmVudCcsIGV2dC5kYXRhLnNlbGVjdG9yLCB0aGlzLmZha2VJbnB1dEV2ZW50KTtcbiAgICAgICAgdGhpcy5mYWtlSW5wdXRFdmVudChldnQpO1xuICAgICAgfVxuICAgIH0sXG5cbiAgICBiZWhhdmVzT2s6IGV2dCA9PiB7XG4gICAgICBpZiAodGhpcy5pc05hdGl2ZUV2ZW50KGV2dCkpIHtcbiAgICAgICAgJChkb2N1bWVudCkgLy8gU2ltcGx5IHVuYmluZHMgdGhlIHRlc3RpbmcgaGFuZGxlclxuICAgICAgICAgIC5vZmYoJ2lucHV0LmlucHV0ZXZlbnQnLCBldnQuZGF0YS5zZWxlY3RvciwgdGhpcy5iZWhhdmVzT2spXG4gICAgICAgICAgLm9mZignY2hhbmdlLmlucHV0ZXZlbnQnLCBldnQuZGF0YS5zZWxlY3RvciwgdGhpcy5taXNiZWhhdmVzKTtcbiAgICAgIH1cbiAgICB9LFxuXG4gICAgLy8gQmluZCB0aGUgdGVzdGluZyBoYW5kbGVyc1xuICAgIGluc3RhbGw6ICgpID0+IHtcbiAgICAgIGlmIChnbG9iYWxzLmlucHV0RXZlbnRQYXRjaGVkKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIGdsb2JhbHMuaW5wdXRFdmVudFBhdGNoZWQgPSAnMC4wLjMnO1xuICAgICAgZm9yIChsZXQgc2VsZWN0b3Igb2YgWydzZWxlY3QnLCAnaW5wdXRbdHlwZT1cImNoZWNrYm94XCJdJywgJ2lucHV0W3R5cGU9XCJyYWRpb1wiXScsICdpbnB1dFt0eXBlPVwiZmlsZVwiXSddKSB7XG4gICAgICAgICQoZG9jdW1lbnQpXG4gICAgICAgICAgLm9uKCdpbnB1dC5pbnB1dGV2ZW50Jywgc2VsZWN0b3IsIHtzZWxlY3Rvcn0sIHRoaXMuYmVoYXZlc09rKVxuICAgICAgICAgIC5vbignY2hhbmdlLmlucHV0ZXZlbnQnLCBzZWxlY3Rvciwge3NlbGVjdG9yfSwgdGhpcy5taXNiZWhhdmVzKTtcbiAgICAgIH1cbiAgICB9LFxuXG4gICAgdW5pbnN0YWxsOiAoKSA9PiB7XG4gICAgICBkZWxldGUgZ2xvYmFscy5pbnB1dEV2ZW50UGF0Y2hlZDtcbiAgICAgICQoZG9jdW1lbnQpLm9mZignLmlucHV0ZXZlbnQnKTtcbiAgICB9XG5cbiAgfSk7XG59O1xuXG5leHBvcnQgZGVmYXVsdCBuZXcgSW5wdXRFdmVudCgpO1xuIiwidmFyIGNvbmZpZyA9IHJlcXVpcmUoJy4uLy4uL3BhY2thZ2UuanNvbicpLmJhYmVsQm9pbGVycGxhdGVPcHRpb25zO1xuXG5nbG9iYWwudHJhdmlzID0gZmFsc2U7XG5nbG9iYWwubW9jaGEuc2V0dXAoJ2JkZCcpO1xuZ2xvYmFsLm9ubG9hZCA9IGZ1bmN0aW9uKCkge1xuICBnbG9iYWwubW9jaGEuY2hlY2tMZWFrcygpO1xuICBnbG9iYWwubW9jaGEuZ2xvYmFscyhjb25maWcubW9jaGFHbG9iYWxzKTtcbiAgZ2xvYmFsLm1vY2hhLnJ1bigpO1xuICByZXF1aXJlKCcuL3NldHVwJykoKTtcbn07XG4iLCJpbXBvcnQgJCBmcm9tICdqcXVlcnknO1xuXG5hZnRlckVhY2goZnVuY3Rpb24oKSB7XG4gIGV4cGVjdCgkKCdmb3JtIGlucHV0JykubGVuZ3RoKS50by5iZSgwKTtcbn0pO1xuXG53aW5kb3cuJCA9ICQ7IC8vIEV4cG9ydCBmb3IgdGVzdGluZyBwdXJwb3Nlcy4uLlxuIiwibW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbigpIHtcbiAgYmVmb3JlRWFjaChmdW5jdGlvbigpIHtcbiAgICBzaW5vbi5zcHkod2luZG93LmNvbnNvbGUsICd3YXJuJyk7XG4gICAgd2luZG93LmNvbnNvbGUud2Fybi5leHBlY3RlZENhbGxDb3VudCA9IDA7XG4gIH0pO1xuICBhZnRlckVhY2goZnVuY3Rpb24oKSB7XG4gICAgZXhwZWN0KHdpbmRvdy5jb25zb2xlLndhcm4uY2FsbENvdW50KS50by5iZSh3aW5kb3cuY29uc29sZS53YXJuLmV4cGVjdGVkQ2FsbENvdW50KTtcbiAgICB3aW5kb3cuY29uc29sZS53YXJuLnJlc3RvcmUoKTtcbiAgfSk7XG5cbiAgZ2xvYmFsLmV4cGVjdFdhcm5pbmcgPSBmdW5jdGlvbihmbikge1xuICAgIHZhciB3ID0gd2luZG93LmNvbnNvbGUud2FybjtcbiAgICBleHBlY3Qody5jYWxsQ291bnQpLnRvLmJlKHcuZXhwZWN0ZWRDYWxsQ291bnQpO1xuICAgIHZhciByZXN1bHQgPSBmbi5jYWxsKCk7XG4gICAgdy5leHBlY3RlZENhbGxDb3VudCsrO1xuICAgIGV4cGVjdCh3LmNhbGxDb3VudCkudG8uYmUody5leHBlY3RlZENhbGxDb3VudCk7XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfTtcbn07XG4iLCJtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKCkge1xuICBiZWZvcmVFYWNoKGZ1bmN0aW9uKCkge1xuICAgIHRoaXMuc2FuZGJveCA9IGdsb2JhbC5zaW5vbi5zYW5kYm94LmNyZWF0ZSgpO1xuICAgIGdsb2JhbC5zdHViID0gdGhpcy5zYW5kYm94LnN0dWIuYmluZCh0aGlzLnNhbmRib3gpO1xuICAgIGdsb2JhbC5zcHkgPSB0aGlzLnNhbmRib3guc3B5LmJpbmQodGhpcy5zYW5kYm94KTtcbiAgfSk7XG5cbiAgYWZ0ZXJFYWNoKGZ1bmN0aW9uKCkge1xuICAgIGRlbGV0ZSBnbG9iYWwuc3R1YjtcbiAgICBkZWxldGUgZ2xvYmFsLnNweTtcbiAgICB0aGlzLnNhbmRib3gucmVzdG9yZSgpO1xuICB9KTtcblxuICByZXF1aXJlKCcuL2V4cGVjdF93YXJuaW5nJykoKTtcbiAgcmVxdWlyZSgnLi9kb21fbGVha19jaGVjaycpO1xufTtcbiIsImltcG9ydCAkIGZyb20gJ2pxdWVyeSc7XG5pbXBvcnQgUGFyc2xleSBmcm9tICcuLi8uLi9zcmMvcGFyc2xleSc7XG5cbmRlc2NyaWJlKCdCYXNlJywgKCkgPT4ge1xuICBpdCgnc2hvdWxkIHByb3ZpZGUgYSBhY3R1YWxpemVPcHRpb25zKCkgbWV0aG9kJywgKCkgPT4ge1xuICAgICQoJ2JvZHknKS5hcHBlbmQoJzxpbnB1dCB0eXBlPVwiZW1haWxcIiBkYXRhLXBhcnNsZXktcGF0dGVybj1cIltBLUZdWzAtOV17NX1cIiBkYXRhLXBhcnNsZXktcmVxdWlyZWQgaWQ9XCJlbGVtZW50XCIgLz4nKTtcbiAgICB2YXIgcGFyc2xleUZpZWxkID0gJCgnI2VsZW1lbnQnKS5wYXJzbGV5KHtmb286ICdiYXInfSk7XG4gICAgZXhwZWN0KHBhcnNsZXlGaWVsZC5vcHRpb25zLnBhdHRlcm4pLnRvLmVxbCgnW0EtRl1bMC05XXs1fScpO1xuICAgIGV4cGVjdChwYXJzbGV5RmllbGQub3B0aW9ucy5yZXF1aXJlZCkudG8uZXFsKCcnKTtcblxuICAgICQoJyNlbGVtZW50JykucmVtb3ZlQXR0cignZGF0YS1wYXJzbGV5LXBhdHRlcm4nKTtcbiAgICBwYXJzbGV5RmllbGQuYWN0dWFsaXplT3B0aW9ucygpO1xuXG4gICAgZXhwZWN0KHBhcnNsZXlGaWVsZC5vcHRpb25zLnBhdHRlcm4pLnRvLmJlKHVuZGVmaW5lZCk7XG4gICAgZXhwZWN0KHBhcnNsZXlGaWVsZC5vcHRpb25zLnJlcXVpcmVkKS50by5lcWwoJycpO1xuICB9KTtcbiAgaXQoJ3Nob3VsZCB1c2UgcmVzZXQoKSBvbiBmaWVsZCcsICgpID0+IHtcbiAgICAkKCdib2R5JykuYXBwZW5kKCc8aW5wdXQgdHlwZT1cImVtYWlsXCIgZGF0YS1wYXJzbGV5LXBhdHRlcm49XCJbQS1GXVswLTldezV9XCIgZGF0YS1wYXJzbGV5LXJlcXVpcmVkIGlkPVwiZWxlbWVudFwiIC8+Jyk7XG4gICAgdmFyIHBhcnNsZXlGaWVsZCA9ICQoJyNlbGVtZW50JykucGFyc2xleSgpO1xuICAgIHBhcnNsZXlGaWVsZC52YWxpZGF0ZSgpO1xuICAgIGV4cGVjdCgkKCcjcGFyc2xleS1pZC0nICsgcGFyc2xleUZpZWxkLl9faWRfXyArICcgbGknKS5sZW5ndGgpLnRvLmJlKDEpO1xuICAgIHBhcnNsZXlGaWVsZC5yZXNldCgpO1xuICAgIGV4cGVjdCgkKCcjcGFyc2xleS1pZC0nICsgcGFyc2xleUZpZWxkLl9faWRfXyArICcgbGknKS5sZW5ndGgpLnRvLmJlKDApO1xuICB9KTtcbiAgaXQoJ3Nob3VsZCB1c2UgcmVzZXQoKSBvbiBmb3JtJywgZG9uZSA9PiB7XG4gICAgJCgnYm9keScpLmFwcGVuZChcbiAgICAgICc8Zm9ybSBpZD1cImVsZW1lbnRcIj4nICAgICAgICAgICAgICAgICAgICAgICAgICAgK1xuICAgICAgICAnPGlucHV0IGlkPVwiZmllbGQxXCIgdHlwZT1cInRleHRcIiByZXF1aXJlZCAvPicgICtcbiAgICAgICAgJzxkaXYgaWQ9XCJmaWVsZDJcIj48L2Rpdj4nICAgICAgICAgICAgICAgICAgICAgK1xuICAgICAgICAnPHRleHRhcmVhIGlkPVwiZmllbGQyXCI+PC90ZXh0YXJlYT4nICAgICAgICAgICArXG4gICAgICAnPC9mb3JtPicpO1xuICAgIHZhciBwYXJzbGV5Rm9ybSA9ICQoJyNlbGVtZW50JykucGFyc2xleSgpO1xuICAgIHBhcnNsZXlGb3JtLnZhbGlkYXRlKCk7XG4gICAgZXhwZWN0KCQoJyNwYXJzbGV5LWlkLScgKyAkKCcjZmllbGQxJykucHNseSgpLl9faWRfXyArICcgbGknKS5sZW5ndGgpLnRvLmJlKDEpO1xuXG4gICAgJCgnI2VsZW1lbnQnKS5wYXJzbGV5KCkub24oJ2Zvcm06cmVzZXQnLCAoKSA9PiB7XG4gICAgICBkb25lKCk7XG4gICAgfSk7XG4gICAgcGFyc2xleUZvcm0ucmVzZXQoKTtcblxuICAgIGV4cGVjdCgkKCcjcGFyc2xleS1pZC0nICsgJCgnI2ZpZWxkMScpLnBzbHkoKS5fX2lkX18gKyAnIGxpJykubGVuZ3RoKS50by5iZSgwKTtcbiAgfSk7XG4gIGl0KCdzaG91bGQgdXNlIGRlc3Ryb3koKSBvbiBmaWVsZCcsIGRvbmUgPT4ge1xuICAgICQoJ2JvZHknKS5hcHBlbmQoJzxpbnB1dCB0eXBlPVwiZW1haWxcIiBkYXRhLXBhcnNsZXktcGF0dGVybj1cIltBLUZdWzAtOV17NX1cIiBkYXRhLXBhcnNsZXktcmVxdWlyZWQgaWQ9XCJlbGVtZW50XCIgLz4nKTtcbiAgICB2YXIgcGFyc2xleUZpZWxkID0gJCgnI2VsZW1lbnQnKS5wYXJzbGV5KCk7XG5cbiAgICAkKCcjZWxlbWVudCcpLnBhcnNsZXkoKS5vbignZmllbGQ6ZGVzdHJveScsICgpID0+IHtcbiAgICAgIGRvbmUoKTtcbiAgICB9KTtcblxuICAgIGV4cGVjdCgkKCcjZWxlbWVudCcpLmRhdGEoJ1BhcnNsZXknKSkudG8uaGF2ZS5rZXkoJ19fY2xhc3NfXycpO1xuICAgIGV4cGVjdCgkKCcjZWxlbWVudCcpLmRhdGEoJ1BhcnNsZXknKS5fX2NsYXNzX18pLnRvLmJlKCdGaWVsZCcpO1xuICAgIHBhcnNsZXlGaWVsZC5kZXN0cm95KCk7XG4gICAgZXhwZWN0KCQoJyNlbGVtZW50JykuZGF0YSgnUGFyc2xleScpKS50by5iZSh1bmRlZmluZWQpO1xuICB9KTtcbiAgaXQoJ3Nob3VsZCB1c2UgZGVzdHJveSgpIG9uIGZvcm0nLCBkb25lID0+IHtcbiAgICB2YXIgdHJpZ2dlcmVkID0gMDtcblxuICAgICQoJ2JvZHknKS5hcHBlbmQoXG4gICAgICAnPGZvcm0gaWQ9XCJlbGVtZW50XCI+JyAgICAgICAgICAgICAgICAgK1xuICAgICAgICAnPGlucHV0IGlkPVwiZmllbGQxXCIgdHlwZT1cInRleHRcIi8+JyAgK1xuICAgICAgICAnPGRpdiBpZD1cImZpZWxkMlwiPjwvZGl2PicgICAgICAgICAgICtcbiAgICAgICAgJzx0ZXh0YXJlYSBpZD1cImZpZWxkMlwiPjwvdGV4dGFyZWE+JyArXG4gICAgICAnPC9mb3JtPicpO1xuICAgIHZhciBwYXJzbGV5Rm9ybSA9ICQoJyNlbGVtZW50JykucGFyc2xleSgpO1xuICAgIHZhciBmaWVsZEV2ZW50c0NvdW50ID0gMDtcbiAgICB2YXIgZm9ybUV2ZW50c0NvdW50ID0gMDtcblxuICAgIC8vIFRlc3QgdGhhdCBhIHN1YnNjcmliZWQgZmllbGQgZXZlbnQgb24gcGFyZW50IGZvcm0gd291bGQgYmUgdHJpZ2dlcmVkIGJ5IGZpZWxkcyB0b29cbiAgICAvLyBIZXJlIHdlIG9ubHkgaGF2ZSBmaWVsZDEgYW5kIGZpZWxkMiBhcyB2YWxpZCBwYXJzbGV5IGZpZWxkc1xuICAgICQoJyNlbGVtZW50JykucGFyc2xleSgpLm9uKCdmaWVsZDpkZXN0cm95JywgKCkgPT4ge1xuICAgICAgZmllbGRFdmVudHNDb3VudCsrO1xuICAgIH0pO1xuXG4gICAgJCgnI2VsZW1lbnQnKS5wYXJzbGV5KCkub24oJ2Zvcm06ZGVzdHJveScsICgpID0+IHtcbiAgICAgIGZvcm1FdmVudHNDb3VudCsrO1xuICAgIH0pO1xuXG4gICAgZXhwZWN0KCQoJyNlbGVtZW50JykuZGF0YSgnUGFyc2xleScpKS50by5oYXZlLmtleSgnX19jbGFzc19fJyk7XG4gICAgZXhwZWN0KCQoJyNlbGVtZW50JykuZGF0YSgnUGFyc2xleScpLl9fY2xhc3NfXykudG8uYmUoJ0Zvcm0nKTtcbiAgICBleHBlY3QoJCgnI2ZpZWxkMScpLmRhdGEoJ1BhcnNsZXknKSkudG8uaGF2ZS5rZXkoJ19fY2xhc3NfXycpO1xuICAgIGV4cGVjdCgkKCcjZmllbGQxJykuZGF0YSgnUGFyc2xleScpLl9fY2xhc3NfXykudG8uYmUoJ0ZpZWxkJyk7XG5cbiAgICBwYXJzbGV5Rm9ybS5kZXN0cm95KCk7XG5cbiAgICBleHBlY3QoZmllbGRFdmVudHNDb3VudCkudG8uYmUoMik7XG4gICAgZXhwZWN0KGZvcm1FdmVudHNDb3VudCkudG8uYmUoMSk7XG5cbiAgICAvLyB3ZSBzaG91bGQgbmV2ZXIgZW50ZXIgaGVyZSBzaW5jZSBwYXJzbGV5IGZvcm0gaW5zdGFuY2UgaXMgZGVzdHJveWVkXG4gICAgUGFyc2xleS5vbignZm9ybTp2YWxpZGF0ZScsICgpID0+IHtcbiAgICAgIGV4cGVjdCh0cnVlKS50by5iZShmYWxzZSk7XG4gICAgfSk7XG5cbiAgICAvLyB0ZXN0IHRoYXQgYSBzdWJtaXQgZXZlbnQgZG9lcyBub3QgdHJpZ2dlciBwYXJzbGV5IHZhbGlkYXRpb24gYW55bW9yZVxuICAgICQoJyNlbGVtZW50Jykub24oJ3N1Ym1pdCcsIGUgPT4ge1xuICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuXG4gICAgICBleHBlY3QoJCgnI2VsZW1lbnQnKS5kYXRhKCdQYXJzbGV5JykpLnRvLmJlKHVuZGVmaW5lZCk7XG4gICAgICBleHBlY3QoJCgnI2ZpZWxkMScpLmRhdGEoJ1BhcnNsZXknKSkudG8uYmUodW5kZWZpbmVkKTtcbiAgICAgIFBhcnNsZXkub2ZmKCdmb3JtOnZhbGlkYXRlJyk7XG4gICAgICBkb25lKCk7XG4gICAgfSk7XG5cbiAgICAkKCcjZWxlbWVudCcpLnN1Ym1pdCgpO1xuICB9KTtcbiAgYWZ0ZXJFYWNoKCgpID0+IHtcbiAgICAkKCcjZWxlbWVudCwgLnBhcnNsZXktZXJyb3JzLWxpc3QnKS5yZW1vdmUoKTtcbiAgfSk7XG59KTtcbiIsImltcG9ydCAkIGZyb20gJ2pxdWVyeSc7XG5cbmltcG9ydCBQYXJzbGV5IGZyb20gJy4uLy4uLy4uL3NyYy9wYXJzbGV5JztcblxuZGVzY3JpYmUoJ2V4dHJhL3BsdWdpbi9iaW5kJywgKCkgPT4ge1xuICAvLyBIYWNrIHRvIGxvYWQgYW5kIHVuZG8gdGhlIGxvYWRpbmcgb2YgdGhlIHBsdWdpbjpcbiAgYmVmb3JlKCgpID0+IHtcbiAgICByZXF1aXJlKCcuLi8uLi8uLi9zcmMvZXh0cmEvcGx1Z2luL2JpbmQnKTtcbiAgfSk7XG4gIGFmdGVyKCgpID0+IHtcbiAgICB3aW5kb3cuUGFyc2xleUV4dGVuZCA9IHt9OyAvLyBVbmRvIHRoZSBwbHVnaW4uLi5cbiAgfSk7XG5cbiAgaXQoJ3Nob3VsZCBoYXZlIGEgYmluZC5qcyBwbHVnaW4gYWxsb3dpbmcgdG8gZ2l2ZSBwdXJlIGpzb24gdmFsaWRhdGlvbiBjb25maWcgdG8gcGFyc2xleSBjb25zdHJ1Y3RvcicsICgpID0+IHtcbiAgICAkKCdib2R5JykuYXBwZW5kKFxuICAgICAgJzxmb3JtIGlkPVwiZWxlbWVudFwiID4nICtcbiAgICAgICAgJzxpbnB1dCB0eXBlPVwidGV4dFwiIG5hbWU9XCJuYW1lXCIgLz4nICtcbiAgICAgICAgJzxpbnB1dCB0eXBlPVwidGV4dFwiIG5hbWU9XCJlbWFpbFwiIGlkPVwiZW1haWxcIiAvPicgK1xuICAgICAgICAnPGlucHV0IHR5cGU9XCJjaGVja2JveFwiIG5hbWU9XCJzZXhlXCIgaWQ9XCJzZXhlXCIgdmFsdWU9XCJtYWxlXCIgLz4nICtcbiAgICAgICAgJzxpbnB1dCB0eXBlPVwiY2hlY2tib3hcIiBuYW1lPVwic2V4ZVwiIHZhbHVlPVwiZmVtYWxlXCIgLz4nICtcbiAgICAgICc8L2Zvcm0+Jyk7XG5cbiAgICB2YXIgcGFyc2xleUluc3RhbmNlO1xuICAgIGV4cGVjdFdhcm5pbmcoKCkgPT4ge1xuICAgICAgcGFyc2xleUluc3RhbmNlID0gJCgnI2VsZW1lbnQnKS5wYXJzbGV5KHtcbiAgICAgICAgZmllbGRzOiB7XG4gICAgICAgICAgJ1tuYW1lPVwibmFtZVwiXSc6IHtcbiAgICAgICAgICAgIHJlcXVpcmVkOiB0cnVlLFxuICAgICAgICAgICAgbGVuZ3RoOiBbNCwgMjBdXG4gICAgICAgICAgfSxcbiAgICAgICAgICAnI2VtYWlsJzoge1xuICAgICAgICAgICAgdHlwZTogJ2VtYWlsJ1xuICAgICAgICAgIH0sXG4gICAgICAgICAgJyNzZXhlJzoge1xuICAgICAgICAgICAgcmVxdWlyZWQ6IHRydWVcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH0pO1xuICAgIGV4cGVjdCgkKCdbbmFtZT1cIm5hbWVcIl0nKS5wYXJzbGV5KCkuY29uc3RyYWludHMubGVuZ3RoKS50by5iZSgyKTtcbiAgICBleHBlY3QoJCgnI2VtYWlsJykucGFyc2xleSgpLmNvbnN0cmFpbnRzLmxlbmd0aCkudG8uYmUoMSk7XG4gICAgZXhwZWN0KCQoJyNzZXhlJykucGFyc2xleSgpLmNvbnN0cmFpbnRzLmxlbmd0aCkudG8uYmUoMSk7XG4gICAgZXhwZWN0KCQoJyNzZXhlJykucGFyc2xleSgpLmNvbnN0cmFpbnRzWzBdLm5hbWUpLnRvLmJlKCdyZXF1aXJlZCcpO1xuICB9KTtcblxuICBhZnRlckVhY2goKCkgPT4ge1xuICAgICQoJyNlbGVtZW50LCAuZml4dHVyZSwgLnBhcnNsZXktZXJyb3JzLWxpc3QnKS5yZW1vdmUoKTtcbiAgfSk7XG59KTtcbiIsImltcG9ydCAkIGZyb20gJ2pxdWVyeSc7XG5cbmltcG9ydCBQYXJzbGV5IGZyb20gJy4uLy4uLy4uL3NyYy9wYXJzbGV5JztcblxuaW1wb3J0IGNvbXBhcmlzb24gZnJvbSAnLi4vLi4vLi4vc3JjL2V4dHJhL3ZhbGlkYXRvci9jb21wYXJpc29uJztcblxuZGVzY3JpYmUoJ2V4dHJhL3ZhbGlkYXRvci9jb21wYXJpc29uJywgKCkgPT4ge1xuICBpdCgnc2hvdWxkIGhhdmUgZ3QgdmFsaWRhdG9yJywgKCkgPT4ge1xuICAgIHZhciBudW1iZXIgPSA1O1xuXG4gICAgLy8gQ2hlY2sgd2l0aCBhIHNlbGVjdG9yXG4gICAgJCgnYm9keScpLmFwcGVuZCgnPGlucHV0IHR5cGU9XCJ0ZXh0XCIgaWQ9XCJlbGVtZW50XCIgZGF0YS1wYXJzbGV5LWd0PVwiI2d0XCIgcmVxdWlyZWQgLz48aW5wdXQgdHlwZT1cInRleHRcIiBpZD1cImd0XCIgdmFsdWU9XCInICsgbnVtYmVyICsgJ1wiIC8+Jyk7XG4gICAgZXhwZWN0KCQoJyNlbGVtZW50JykucHNseSgpLmlzVmFsaWQoKSkudG8uYmUoZmFsc2UpO1xuICAgICQoJyNlbGVtZW50JykudmFsKG51bWJlciArIDEpO1xuICAgIGV4cGVjdCgkKCcjZWxlbWVudCcpLnBzbHkoKS5pc1ZhbGlkKCkpLnRvLmJlKHRydWUpO1xuICAgICQoJyNlbGVtZW50JykudmFsKG51bWJlcik7XG4gICAgZXhwZWN0KCQoJyNlbGVtZW50JykucHNseSgpLmlzVmFsaWQoKSkudG8uYmUoZmFsc2UpO1xuICAgICQoJyNlbGVtZW50JykudmFsKG51bWJlciAtIDEpO1xuICAgIGV4cGVjdCgkKCcjZWxlbWVudCcpLnBzbHkoKS5pc1ZhbGlkKCkpLnRvLmJlKGZhbHNlKTtcblxuICAgIC8vIENoZWNrIHdpdGggYSAoZGlmZmVyZW50KSBudW1iZXJcbiAgICBudW1iZXIgPSA0MjtcbiAgICAkKCcjZWxlbWVudCcpLmF0dHIoJ2RhdGEtcGFyc2xleS1ndCcsIG51bWJlcik7XG4gICAgJCgnI2VsZW1lbnQnKS52YWwobnVtYmVyICsgMSk7XG4gICAgZXhwZWN0KCQoJyNlbGVtZW50JykucHNseSgpLmlzVmFsaWQoKSkudG8uYmUodHJ1ZSk7XG4gICAgJCgnI2VsZW1lbnQnKS52YWwobnVtYmVyKTtcbiAgICBleHBlY3QoJCgnI2VsZW1lbnQnKS5wc2x5KCkuaXNWYWxpZCgpKS50by5iZShmYWxzZSk7XG4gICAgJCgnI2VsZW1lbnQnKS52YWwobnVtYmVyIC0gMSk7XG4gICAgZXhwZWN0KCQoJyNlbGVtZW50JykucHNseSgpLmlzVmFsaWQoKSkudG8uYmUoZmFsc2UpO1xuXG4gICAgJCgnI2d0JykucmVtb3ZlKCk7XG4gIH0pO1xuICBpdCgnc2hvdWxkIGhhdmUgZ3RlIHZhbGlkYXRvcicsICgpID0+IHtcbiAgICB2YXIgbnVtYmVyID0gNTtcblxuICAgIC8vIENoZWNrIHdpdGggYSBzZWxlY3RvclxuICAgICQoJ2JvZHknKS5hcHBlbmQoJzxpbnB1dCB0eXBlPVwidGV4dFwiIGlkPVwiZWxlbWVudFwiIGRhdGEtcGFyc2xleS1ndGU9XCIjZ3RlXCIgcmVxdWlyZWQgLz48aW5wdXQgdHlwZT1cInRleHRcIiBpZD1cImd0ZVwiIHZhbHVlPVwiJyArIG51bWJlciArICdcIiAvPicpO1xuICAgIGV4cGVjdCgkKCcjZWxlbWVudCcpLnBzbHkoKS5pc1ZhbGlkKCkpLnRvLmJlKGZhbHNlKTtcbiAgICAkKCcjZWxlbWVudCcpLnZhbChudW1iZXIgKyAxKTtcbiAgICBleHBlY3QoJCgnI2VsZW1lbnQnKS5wc2x5KCkuaXNWYWxpZCgpKS50by5iZSh0cnVlKTtcbiAgICAkKCcjZWxlbWVudCcpLnZhbChudW1iZXIpO1xuICAgIGV4cGVjdCgkKCcjZWxlbWVudCcpLnBzbHkoKS5pc1ZhbGlkKCkpLnRvLmJlKHRydWUpO1xuICAgICQoJyNlbGVtZW50JykudmFsKG51bWJlciAtIDEpO1xuICAgIGV4cGVjdCgkKCcjZWxlbWVudCcpLnBzbHkoKS5pc1ZhbGlkKCkpLnRvLmJlKGZhbHNlKTtcblxuICAgIC8vIENoZWNrIHdpdGggYSAoZGlmZmVyZW50KSBudW1iZXJcbiAgICBudW1iZXIgPSA0MjtcbiAgICAkKCcjZWxlbWVudCcpLmF0dHIoJ2RhdGEtcGFyc2xleS1ndGUnLCBudW1iZXIpO1xuICAgICQoJyNlbGVtZW50JykudmFsKG51bWJlciArIDEpO1xuICAgIGV4cGVjdCgkKCcjZWxlbWVudCcpLnBzbHkoKS5pc1ZhbGlkKCkpLnRvLmJlKHRydWUpO1xuICAgICQoJyNlbGVtZW50JykudmFsKG51bWJlcik7XG4gICAgZXhwZWN0KCQoJyNlbGVtZW50JykucHNseSgpLmlzVmFsaWQoKSkudG8uYmUodHJ1ZSk7XG4gICAgJCgnI2VsZW1lbnQnKS52YWwobnVtYmVyIC0gMSk7XG4gICAgZXhwZWN0KCQoJyNlbGVtZW50JykucHNseSgpLmlzVmFsaWQoKSkudG8uYmUoZmFsc2UpO1xuXG4gICAgJCgnI2d0ZScpLnJlbW92ZSgpO1xuICB9KTtcbiAgaXQoJ3Nob3VsZCBoYXZlIGx0IHZhbGlkYXRvcicsICgpID0+IHtcbiAgICB2YXIgbnVtYmVyID0gNTtcblxuICAgIC8vIENoZWNrIHdpdGggYSBzZWxlY3RvclxuICAgICQoJ2JvZHknKS5hcHBlbmQoJzxpbnB1dCB0eXBlPVwidGV4dFwiIGlkPVwiZWxlbWVudFwiIGRhdGEtcGFyc2xleS1sdD1cIiNsdFwiIHJlcXVpcmVkIC8+PGlucHV0IHR5cGU9XCJ0ZXh0XCIgaWQ9XCJsdFwiIHZhbHVlPVwiJyArIG51bWJlciArICdcIiAvPicpO1xuICAgIGV4cGVjdCgkKCcjZWxlbWVudCcpLnBzbHkoKS5pc1ZhbGlkKCkpLnRvLmJlKGZhbHNlKTtcbiAgICAkKCcjZWxlbWVudCcpLnZhbChudW1iZXIgKyAxKTtcbiAgICBleHBlY3QoJCgnI2VsZW1lbnQnKS5wc2x5KCkuaXNWYWxpZCgpKS50by5iZShmYWxzZSk7XG4gICAgJCgnI2VsZW1lbnQnKS52YWwobnVtYmVyKTtcbiAgICBleHBlY3QoJCgnI2VsZW1lbnQnKS5wc2x5KCkuaXNWYWxpZCgpKS50by5iZShmYWxzZSk7XG4gICAgJCgnI2VsZW1lbnQnKS52YWwobnVtYmVyIC0gMSk7XG4gICAgZXhwZWN0KCQoJyNlbGVtZW50JykucHNseSgpLmlzVmFsaWQoKSkudG8uYmUodHJ1ZSk7XG5cbiAgICAvLyBDaGVjayB3aXRoIGEgKGRpZmZlcmVudCkgbnVtYmVyXG4gICAgbnVtYmVyID0gNDI7XG4gICAgJCgnI2VsZW1lbnQnKS5hdHRyKCdkYXRhLXBhcnNsZXktbHQnLCBudW1iZXIpO1xuICAgICQoJyNlbGVtZW50JykudmFsKG51bWJlciArIDEpO1xuICAgIGV4cGVjdCgkKCcjZWxlbWVudCcpLnBzbHkoKS5pc1ZhbGlkKCkpLnRvLmJlKGZhbHNlKTtcbiAgICAkKCcjZWxlbWVudCcpLnZhbChudW1iZXIpO1xuICAgIGV4cGVjdCgkKCcjZWxlbWVudCcpLnBzbHkoKS5pc1ZhbGlkKCkpLnRvLmJlKGZhbHNlKTtcbiAgICAkKCcjZWxlbWVudCcpLnZhbChudW1iZXIgLSAxKTtcbiAgICBleHBlY3QoJCgnI2VsZW1lbnQnKS5wc2x5KCkuaXNWYWxpZCgpKS50by5iZSh0cnVlKTtcblxuICAgICQoJyNsdCcpLnJlbW92ZSgpO1xuICB9KTtcbiAgaXQoJ3Nob3VsZCBoYXZlIGx0ZSB2YWxpZGF0b3InLCAoKSA9PiB7XG4gICAgdmFyIG51bWJlciA9IDU7XG5cbiAgICAvLyBDaGVjayB3aXRoIGEgc2VsZWN0b3JcbiAgICAkKCdib2R5JykuYXBwZW5kKCc8aW5wdXQgdHlwZT1cInRleHRcIiBpZD1cImVsZW1lbnRcIiBkYXRhLXBhcnNsZXktbHRlPVwiI2x0ZVwiIHJlcXVpcmVkIC8+PGlucHV0IHR5cGU9XCJ0ZXh0XCIgaWQ9XCJsdGVcIiB2YWx1ZT1cIicgKyBudW1iZXIgKyAnXCIgLz4nKTtcbiAgICBleHBlY3QoJCgnI2VsZW1lbnQnKS5wc2x5KCkuaXNWYWxpZCgpKS50by5iZShmYWxzZSk7XG4gICAgJCgnI2VsZW1lbnQnKS52YWwobnVtYmVyICsgMSk7XG4gICAgZXhwZWN0KCQoJyNlbGVtZW50JykucHNseSgpLmlzVmFsaWQoKSkudG8uYmUoZmFsc2UpO1xuICAgICQoJyNlbGVtZW50JykudmFsKG51bWJlcik7XG4gICAgZXhwZWN0KCQoJyNlbGVtZW50JykucHNseSgpLmlzVmFsaWQoKSkudG8uYmUodHJ1ZSk7XG4gICAgJCgnI2VsZW1lbnQnKS52YWwobnVtYmVyIC0gMSk7XG4gICAgZXhwZWN0KCQoJyNlbGVtZW50JykucHNseSgpLmlzVmFsaWQoKSkudG8uYmUodHJ1ZSk7XG5cbiAgICAvLyBDaGVjayB3aXRoIGEgKGRpZmZlcmVudCkgbnVtYmVyXG4gICAgbnVtYmVyID0gNDI7XG4gICAgJCgnI2VsZW1lbnQnKS5hdHRyKCdkYXRhLXBhcnNsZXktbHRlJywgbnVtYmVyKTtcbiAgICAkKCcjZWxlbWVudCcpLnZhbChudW1iZXIgKyAxKTtcbiAgICBleHBlY3QoJCgnI2VsZW1lbnQnKS5wc2x5KCkuaXNWYWxpZCgpKS50by5iZShmYWxzZSk7XG4gICAgJCgnI2VsZW1lbnQnKS52YWwobnVtYmVyKTtcbiAgICBleHBlY3QoJCgnI2VsZW1lbnQnKS5wc2x5KCkuaXNWYWxpZCgpKS50by5iZSh0cnVlKTtcbiAgICAkKCcjZWxlbWVudCcpLnZhbChudW1iZXIgLSAxKTtcbiAgICBleHBlY3QoJCgnI2VsZW1lbnQnKS5wc2x5KCkuaXNWYWxpZCgpKS50by5iZSh0cnVlKTtcblxuICAgICQoJyNsdGUnKS5yZW1vdmUoKTtcbiAgfSk7XG4gIGFmdGVyRWFjaCgoKSA9PiB7XG4gICAgJCgnI2VsZW1lbnQsIC5maXh0dXJlLCAucGFyc2xleS1lcnJvcnMtbGlzdCcpLnJlbW92ZSgpO1xuICB9KTtcbn0pO1xuIiwiaW1wb3J0ICQgZnJvbSAnanF1ZXJ5JztcblxuaW1wb3J0IFBhcnNsZXkgZnJvbSAnLi4vLi4vLi4vc3JjL3BhcnNsZXknO1xuXG5pbXBvcnQgZGF0ZWlzbyBmcm9tICcuLi8uLi8uLi9zcmMvZXh0cmEvdmFsaWRhdG9yL2RhdGVpc28nO1xuXG5kZXNjcmliZSgnZXh0cmEvdmFsaWRhdG9yL2RhdGVpc28nLCAoKSA9PiB7XG5cbiAgaXQoJ3Nob3VsZCBoYXZlIGRhdGVpc28gdmFsaWRhdG9yJywgKCkgPT4ge1xuICAgIHZhciBleHBlY3RWYWxpZGF0aW9uID0gZnVuY3Rpb24odmFsdWUsIG5hbWUsIHJlcXVpcmVtZW50cykge1xuICAgICAgdmFyIGZpZWxkID0gJCgnPGlucHV0PicpLnBhcnNsZXkoKTtcbiAgICAgIGZpZWxkLm9wdGlvbnNbbmFtZV0gPSByZXF1aXJlbWVudHM7XG4gICAgICByZXR1cm4gZXhwZWN0KGZpZWxkLmlzVmFsaWQoe2ZvcmNlOiB0cnVlLCB2YWx1ZTogdmFsdWV9KSk7XG4gICAgfTtcblxuICAgIGV4cGVjdFZhbGlkYXRpb24oJycsICAgICAgICAgICAnZGF0ZWlzbycpLm5vdC50by5iZSh0cnVlKTtcbiAgICBleHBlY3RWYWxpZGF0aW9uKCdmb28nLCAgICAgICAgJ2RhdGVpc28nKS5ub3QudG8uYmUodHJ1ZSk7XG4gICAgZXhwZWN0VmFsaWRhdGlvbignMTk4Ni0zMC0wMScsICdkYXRlaXNvJykubm90LnRvLmJlKHRydWUpO1xuICAgIGV4cGVjdFZhbGlkYXRpb24oJzE5ODYtMTItNDUnLCAnZGF0ZWlzbycpLm5vdC50by5iZSh0cnVlKTtcbiAgICBleHBlY3RWYWxpZGF0aW9uKCcxOTg2LTEyLTAxJywgJ2RhdGVpc28nKS50by5iZSh0cnVlKTtcbiAgfSk7XG59KTtcbiIsImltcG9ydCAkIGZyb20gJ2pxdWVyeSc7XG5cbmltcG9ydCBQYXJzbGV5IGZyb20gJy4uLy4uLy4uL3NyYy9wYXJzbGV5JztcblxuaW1wb3J0IHdvcmRzIGZyb20gJy4uLy4uLy4uL3NyYy9leHRyYS92YWxpZGF0b3Ivd29yZHMnO1xuXG5kZXNjcmliZSgnZXh0cmEvdmFsaWRhdG9yL3dvcmRzJywgKCkgPT4ge1xuICBpdCgnc2hvdWxkIGhhdmUgYSBtaW53b3JkcyB2YWxpZGF0b3InLCAoKSA9PiB7XG4gICAgJCgnYm9keScpLmFwcGVuZCgnPGlucHV0IHR5cGU9XCJ0ZXh0XCIgaWQ9XCJlbGVtZW50XCIgZGF0YS1wYXJzbGV5LW1pbndvcmRzPVwiMlwiIHJlcXVpcmVkIC8+Jyk7XG4gICAgZXhwZWN0KCQoJyNlbGVtZW50JykucHNseSgpLmlzVmFsaWQoKSkudG8uYmUoZmFsc2UpO1xuICAgICQoJyNlbGVtZW50JykudmFsKCdmb28nKTtcbiAgICBleHBlY3QoJCgnI2VsZW1lbnQnKS5wc2x5KCkuaXNWYWxpZCgpKS50by5iZShmYWxzZSk7XG4gICAgJCgnI2VsZW1lbnQnKS52YWwoJ2ZvbyBiYXInKTtcbiAgICBleHBlY3QoJCgnI2VsZW1lbnQnKS5wc2x5KCkuaXNWYWxpZCgpKS50by5iZSh0cnVlKTtcbiAgfSk7XG4gIGl0KCdzaG91bGQgaGF2ZSBhIG1heHdvcmRzIHZhbGlkYXRvcicsICgpID0+IHtcbiAgICAkKCdib2R5JykuYXBwZW5kKCc8aW5wdXQgdHlwZT1cInRleHRcIiBpZD1cImVsZW1lbnRcIiBkYXRhLXBhcnNsZXktbWF4d29yZHM9XCIyXCIgcmVxdWlyZWQgLz4nKTtcbiAgICBleHBlY3QoJCgnI2VsZW1lbnQnKS5wc2x5KCkuaXNWYWxpZCgpKS50by5iZShmYWxzZSk7XG4gICAgJCgnI2VsZW1lbnQnKS52YWwoJ2ZvbyBiYXInKTtcbiAgICBleHBlY3QoJCgnI2VsZW1lbnQnKS5wc2x5KCkuaXNWYWxpZCgpKS50by5iZSh0cnVlKTtcbiAgICAkKCcjZWxlbWVudCcpLnZhbCgnZm9vIGJhciBiYXonKTtcbiAgICBleHBlY3QoJCgnI2VsZW1lbnQnKS5wc2x5KCkuaXNWYWxpZCgpKS50by5iZShmYWxzZSk7XG4gIH0pO1xuICBpdCgnc2hvdWxkIGhhdmUgYSB3b3JkcyB2YWxpZGF0b3InLCAoKSA9PiB7XG4gICAgJCgnYm9keScpLmFwcGVuZCgnPGlucHV0IHR5cGU9XCJ0ZXh0XCIgaWQ9XCJlbGVtZW50XCIgZGF0YS1wYXJzbGV5LXdvcmRzPVwiWzIsIDRdXCIgcmVxdWlyZWQgLz4nKTtcbiAgICBleHBlY3QoJCgnI2VsZW1lbnQnKS5wc2x5KCkuaXNWYWxpZCgpKS50by5iZShmYWxzZSk7XG4gICAgJCgnI2VsZW1lbnQnKS52YWwoJ2ZvbycpO1xuICAgIGV4cGVjdCgkKCcjZWxlbWVudCcpLnBzbHkoKS5pc1ZhbGlkKCkpLnRvLmJlKGZhbHNlKTtcbiAgICAkKCcjZWxlbWVudCcpLnZhbCgnZm9vIGJhciBiYXonKTtcbiAgICBleHBlY3QoJCgnI2VsZW1lbnQnKS5wc2x5KCkuaXNWYWxpZCgpKS50by5iZSh0cnVlKTtcbiAgICAkKCcjZWxlbWVudCcpLnZhbCgnZm9vIGJhciBiYXogcXV4IGJ1eCcpO1xuICAgIGV4cGVjdCgkKCcjZWxlbWVudCcpLnBzbHkoKS5pc1ZhbGlkKCkpLnRvLmJlKGZhbHNlKTtcbiAgfSk7XG4gIGFmdGVyRWFjaCgoKSA9PiB7XG4gICAgJCgnI2VsZW1lbnQsIC5maXh0dXJlLCAucGFyc2xleS1lcnJvcnMtbGlzdCcpLnJlbW92ZSgpO1xuICB9KTtcbn0pO1xuIiwiaW1wb3J0ICQgZnJvbSAnanF1ZXJ5JztcbmltcG9ydCBGaWVsZCBmcm9tICcuLi8uLi9zcmMvcGFyc2xleS9maWVsZCc7XG5pbXBvcnQgUGFyc2xleSBmcm9tICcuLi8uLi9zcmMvcGFyc2xleSc7XG5cbmRlc2NyaWJlKCdGaWVsZCcsICgpID0+IHtcbiAgaXQoJ3Nob3VsZCBiZSBhIGZ1bmN0aW9uJywgKCkgPT4ge1xuICAgIGV4cGVjdChGaWVsZCkudG8uYmUuYSgnZnVuY3Rpb24nKTtcbiAgfSk7XG4gIGl0KCdzaG91bGQgdGhyb3cgYW4gZXJyb3IgaWYgbm8gcGFyc2xleUluc3RhbmNlIGdpdmVuJywgKCkgPT4ge1xuICAgIGV4cGVjdChGaWVsZCkudG8udGhyb3dFeGNlcHRpb24oKTtcbiAgfSk7XG4gIGl0KCdzaG91bGQgcHJvcGVybHkgYmluZCBET00gY29uc3RyYWludHMnLCAoKSA9PiB7XG4gICAgJCgnYm9keScpLmFwcGVuZCgnPGlucHV0IHR5cGU9XCJ0ZXh0XCIgaWQ9XCJlbGVtZW50XCIgZGF0YS1wYXJzbGV5LXJlcXVpcmVkIC8+Jyk7XG4gICAgdmFyIHBhcnNsZXlGaWVsZCA9ICQoJyNlbGVtZW50JykucGFyc2xleSgpO1xuICAgIGV4cGVjdChwYXJzbGV5RmllbGQuY29uc3RyYWludHMubGVuZ3RoKS50by5iZSgxKTtcbiAgICBleHBlY3QocGFyc2xleUZpZWxkLmNvbnN0cmFpbnRzWzBdLm5hbWUpLnRvLmJlKCdyZXF1aXJlZCcpO1xuICAgIGV4cGVjdChwYXJzbGV5RmllbGQuY29uc3RyYWludHNbMF0uaXNEb21Db25zdHJhaW50KS50by5iZSh0cnVlKTtcbiAgfSk7XG4gIGl0KCdzaG91bGQgcHJvcGVybHkgYmluZCBIVE1MIERPTSBzdXBwb3J0ZWQgY29uc3RyYWludHMnLCAoKSA9PiB7XG4gICAgJCgnYm9keScpLmFwcGVuZCgnPGlucHV0IHR5cGU9XCJlbWFpbFwiIGlkPVwiZWxlbWVudFwiIC8+Jyk7XG4gICAgdmFyIHBhcnNsZXlGaWVsZCA9ICQoJyNlbGVtZW50JykucGFyc2xleSgpO1xuICAgIGV4cGVjdChwYXJzbGV5RmllbGQuY29uc3RyYWludHMubGVuZ3RoKS50by5iZSgxKTtcbiAgICBleHBlY3QocGFyc2xleUZpZWxkLmNvbnN0cmFpbnRzWzBdLm5hbWUpLnRvLmJlKCd0eXBlJyk7XG4gICAgZXhwZWN0KHBhcnNsZXlGaWVsZC5jb25zdHJhaW50c1swXS5pc0RvbUNvbnN0cmFpbnQpLnRvLmJlKHRydWUpO1xuICB9KTtcbiAgaXQoJ3Nob3VsZCBpZ25vcmUgdW5rbm93biB0eXBlcycsICgpID0+IHtcbiAgICAkKCdib2R5JykuYXBwZW5kKCc8aW5wdXQgdHlwZT1cIlwiIGlkPVwiZWxlbWVudFwiIC8+Jyk7XG4gICAgdmFyIHBhcnNsZXlGaWVsZCA9ICQoJyNlbGVtZW50JykucGFyc2xleSgpO1xuICAgIGV4cGVjdChwYXJzbGV5RmllbGQuY29uc3RyYWludHMubGVuZ3RoKS50by5iZSgwKTtcbiAgfSk7XG4gIGl0KCdzaG91bGQgaWdub3JlIG1pc3R5cGVkIHR5cGVzJywgKCkgPT4ge1xuICAgICQoJ2JvZHknKS5hcHBlbmQoJzxpbnB1dCB0eXBlPVwiICAgIGVtYWlsXCIgaWQ9XCJlbGVtZW50XCIgLz4nKTtcbiAgICB2YXIgcGFyc2xleUZpZWxkID0gJCgnI2VsZW1lbnQnKS5wYXJzbGV5KCk7XG4gICAgZXhwZWN0KHBhcnNsZXlGaWVsZC5jb25zdHJhaW50cy5sZW5ndGgpLnRvLmJlKDApO1xuICB9KTtcbiAgaXQoJ3Nob3VsZCBoYXZlIGEgcHJvcGVyIGFkZENvbnN0cmFpbnQoKSBqYXZhc2NyaXB0IG1ldGhvZCcsICgpID0+IHtcbiAgICAkKCdib2R5JykuYXBwZW5kKCc8aW5wdXQgdHlwZT1cInRleHRcIiBpZD1cImVsZW1lbnRcIiAvPicpO1xuICAgIHZhciBwYXJzbGV5RmllbGQgPSAkKCcjZWxlbWVudCcpLnBhcnNsZXkoKVxuICAgICAgLmFkZENvbnN0cmFpbnQoJ3JlcXVpcmVkJywgdHJ1ZSk7XG4gICAgZXhwZWN0KHBhcnNsZXlGaWVsZC5jb25zdHJhaW50cy5sZW5ndGgpLnRvLmJlKDEpO1xuICAgIGV4cGVjdChwYXJzbGV5RmllbGQuY29uc3RyYWludHNbMF0ubmFtZSkudG8uYmUoJ3JlcXVpcmVkJyk7XG4gICAgZXhwZWN0KHBhcnNsZXlGaWVsZC5jb25zdHJhaW50c1swXS5yZXF1aXJlbWVudHMpLnRvLmJlKHRydWUpO1xuICAgIGV4cGVjdChwYXJzbGV5RmllbGQuY29uc3RyYWludHNbMF0ucHJpb3JpdHkpLnRvLmJlKDUxMik7XG4gICAgZXhwZWN0KHBhcnNsZXlGaWVsZC5jb25zdHJhaW50c1swXS5pc0RvbUNvbnN0cmFpbnQpLnRvLmJlKGZhbHNlKTtcblxuICAgIC8vIHRyeWluZyB0byBhZGQgYW4gZXhpc3RpbmcgY29uc3RyYWludCByZXN1bHQgaW4gYW4gdXBkYXRlXG4gICAgcGFyc2xleUZpZWxkLmFkZENvbnN0cmFpbnQoJ3JlcXVpcmVkJywgZmFsc2UsIDY0KTtcbiAgICBleHBlY3QocGFyc2xleUZpZWxkLmNvbnN0cmFpbnRzLmxlbmd0aCkudG8uYmUoMSk7XG4gICAgZXhwZWN0KHBhcnNsZXlGaWVsZC5jb25zdHJhaW50c1swXS5uYW1lKS50by5iZSgncmVxdWlyZWQnKTtcbiAgICBleHBlY3QocGFyc2xleUZpZWxkLmNvbnN0cmFpbnRzWzBdLnJlcXVpcmVtZW50cykudG8uYmUoZmFsc2UpO1xuICAgIGV4cGVjdChwYXJzbGV5RmllbGQuY29uc3RyYWludHNbMF0ucHJpb3JpdHkpLnRvLmJlKDY0KTtcbiAgfSk7XG4gIGl0KCdzaG91bGQgaGF2ZSBhIHByb3BlciB1cGRhdGVDb25zdHJhaW50KCkgamF2YXNjcmlwdCBtZXRob2QnLCAoKSA9PiB7XG4gICAgJCgnYm9keScpLmFwcGVuZCgnPGlucHV0IHR5cGU9XCJ0ZXh0XCIgaWQ9XCJlbGVtZW50XCIgLz4nKTtcbiAgICB2YXIgcGFyc2xleUZpZWxkID0gJCgnI2VsZW1lbnQnKS5wYXJzbGV5KClcbiAgICAgIC5hZGRDb25zdHJhaW50KCdyZXF1aXJlZCcsIHRydWUpO1xuXG4gICAgLy8gc2FtZSBhcyBhYm92ZSB0ZXN0IHdoZXJlIGFkZENvbnN0cmFpbnQgcmVzdWx0ZWQgaW4gYW4gdXBkYXRlQ29uc3RyYWludFxuICAgIHBhcnNsZXlGaWVsZC51cGRhdGVDb25zdHJhaW50KCdyZXF1aXJlZCcsIGZhbHNlLCA2NCk7XG4gICAgZXhwZWN0KHBhcnNsZXlGaWVsZC5jb25zdHJhaW50cy5sZW5ndGgpLnRvLmJlKDEpO1xuICAgIGV4cGVjdChwYXJzbGV5RmllbGQuY29uc3RyYWludHNbMF0ubmFtZSkudG8uYmUoJ3JlcXVpcmVkJyk7XG4gICAgZXhwZWN0KHBhcnNsZXlGaWVsZC5jb25zdHJhaW50c1swXS5yZXF1aXJlbWVudHMpLnRvLmJlKGZhbHNlKTtcbiAgICBleHBlY3QocGFyc2xleUZpZWxkLmNvbnN0cmFpbnRzWzBdLnByaW9yaXR5KS50by5iZSg2NCk7XG4gIH0pO1xuICBpdCgnc2hvdWxkIGhhdmUgYSBwcm9wZXIgcmVtb3ZlQ29uc3RyYWludCgpIGphdmFzY3JpcHQgbWV0aG9kJywgKCkgPT4ge1xuICAgICQoJ2JvZHknKS5hcHBlbmQoJzxpbnB1dCB0eXBlPVwidGV4dFwiIGlkPVwiZWxlbWVudFwiIC8+Jyk7XG4gICAgdmFyIHBhcnNsZXlGaWVsZCA9ICQoJyNlbGVtZW50JykucGFyc2xleSgpXG4gICAgICAuYWRkQ29uc3RyYWludCgncmVxdWlyZWQnLCB0cnVlKVxuICAgICAgLmFkZENvbnN0cmFpbnQoJ25vdGJsYW5rJywgdHJ1ZSlcbiAgICAgIC5yZW1vdmVDb25zdHJhaW50KCdyZXF1aXJlZCcpO1xuICAgIGV4cGVjdChwYXJzbGV5RmllbGQuY29uc3RyYWludHMubGVuZ3RoKS50by5iZSgxKTtcbiAgICBleHBlY3QocGFyc2xleUZpZWxkLmNvbnN0cmFpbnRzWzBdLm5hbWUpLnRvLmJlKCdub3RibGFuaycpO1xuICAgIGV4cGVjdChwYXJzbGV5RmllbGQuX2lzUmVxdWlyZWQoKSkudG8uYmUoZmFsc2UpO1xuICB9KTtcbiAgaXQoJ3Nob3VsZCByZXR1cm4gdHJ1ZSBmb3IgZmllbGRzIHdpdGhvdXQgY29uc3RyYWludHMnLCAoKSA9PiB7XG4gICAgJCgnYm9keScpLmFwcGVuZCgnPGlucHV0IHR5cGU9XCJ0ZXh0XCIgaWQ9XCJlbGVtZW50XCIgdmFsdWU9XCJob2xhXCIgZGF0YS1wYXJzbGV5LW1pbmxlbmd0aD1cIjVcIiAvPicpO1xuICAgIHZhciBwYXJzbGV5RmllbGQgPSAkKCcjZWxlbWVudCcpLnBhcnNsZXkoKTtcbiAgICAvLyBTdGFydCB3aXRoIHNvbWUgdmFsaWRhdGlvbiBlcnJvcnM6XG4gICAgZXhwZWN0KHBhcnNsZXlGaWVsZC5pc1ZhbGlkKCkpLnRvLmVxbChmYWxzZSk7XG4gICAgLy8gVGhlIHJlbW92ZSBjb25zdHJhaW50IGFuZCBjaGVjayByZXN1bHQ6XG4gICAgJCgnI2VsZW1lbnQnKS5yZW1vdmVBdHRyKCdkYXRhLXBhcnNsZXktbWlubGVuZ3RoJyk7XG4gICAgZXhwZWN0KHBhcnNsZXlGaWVsZC5pc1ZhbGlkKCkpLnRvLmJlKHRydWUpO1xuICB9KTtcbiAgaXQoJ3Nob3VsZCBwcm9wZXJseSBiaW5kIEhUTUw1IHN1cHBvcnRlZCBjb25zdHJhaW50cycsICgpID0+IHtcbiAgICAkKCdib2R5JykuYXBwZW5kKCc8aW5wdXQgdHlwZT1cImVtYWlsXCIgcGF0dGVybj1cIlxcXFx3K1wiIGlkPVwiZWxlbWVudFwiIHJlcXVpcmVkIG1pbj1cIjVcIiBtYXg9XCIxMDBcIiBtaW5sZW5ndGg9XCIxXCIgbWF4bGVuZ3RoPVwiM1wiIC8+Jyk7XG4gICAgdmFyIHBhcnNsZXlGaWVsZCA9ICQoJyNlbGVtZW50JykucGFyc2xleSgpO1xuICAgIC8vIDUgdmFsaWRhdG9yczogdHlwZT1lbWFpbCwgcGF0dGVybiwgcmVxdWlyZWQsIChtaW4rbWF4ID0+IHJhbmdlKSBhbmQgKG1pbmxlbmd0aCttYXhsZW5ndGggPT4gbGVuZ3RoKVxuICAgIGV4cGVjdChwYXJzbGV5RmllbGQuY29uc3RyYWludHMubGVuZ3RoKS50by5iZSg1KTtcbiAgICAkKCcjZWxlbWVudCcpLnJlbW92ZUF0dHIoJ21pbicpO1xuICAgIC8vIHN0aWxsIDUgdmFsaWRhdG9ycywgd2l0aCBtYXggaW5zdGVhZCBvZiByYW5nZSBub3dcbiAgICBleHBlY3QocGFyc2xleUZpZWxkLmFjdHVhbGl6ZU9wdGlvbnMoKS5jb25zdHJhaW50cy5sZW5ndGgpLnRvLmJlKDUpO1xuICAgICQoJyNlbGVtZW50JykucmVtb3ZlQXR0cignbWlubGVuZ3RoJyk7XG4gICAgLy8gc3RpbGwgNSB2YWxpZGF0b3JzLCB3aXRoIG1heGxlbmd0aCBpbnN0ZWFkIG9mIGxlbmd0aCBub3dcbiAgICBleHBlY3QocGFyc2xleUZpZWxkLmFjdHVhbGl6ZU9wdGlvbnMoKS5jb25zdHJhaW50cy5sZW5ndGgpLnRvLmJlKDUpO1xuICB9KTtcblxuICBpdCgnc2hvdWxkIHByb3Blcmx5IGJpbmQgSFRNTDUgZGF0ZSBpbnB1dHMnLCAoKSA9PiB7XG4gICAgLy8gVXNlcyBSRkMgMzMzOS9JU08gODYwMSBmb3JtYXQgWVlZWS1NTS1ERFxuICAgICQoJ2JvZHknKS5hcHBlbmQoJzxpbnB1dCB0eXBlPVwiZGF0ZVwiIGlkPVwiZWxlbWVudFwiIG1heD1cIjIwMDAtMDEtMDJcIiBtaW49XCIxOTk5LTAxLTAyXCIgdmFsdWU9XCIxOTk4LTEyLTMwXCIgLz4nKTtcbiAgICB2YXIgcGFyc2xleUZpZWxkID0gJCgnI2VsZW1lbnQnKS5wYXJzbGV5KCk7XG4gICAgZXhwZWN0KHBhcnNsZXlGaWVsZC5jb25zdHJhaW50cy5sZW5ndGgpLnRvLmJlKDIpOyAvLyBUeXBlPURhdGUsIFJhbmdlXG4gICAgZXhwZWN0KHBhcnNsZXlGaWVsZC5pc1ZhbGlkKCkpLnRvLmJlKGZhbHNlKTtcbiAgICBleHBlY3QocGFyc2xleUZpZWxkLmlzVmFsaWQoe3ZhbHVlOiAnMTk5OS0wMi0wMyd9KSkudG8uYmUodHJ1ZSk7XG4gICAgJCgnI2VsZW1lbnQnKS5yZW1vdmVBdHRyKCdtaW4nKTtcbiAgICBleHBlY3QocGFyc2xleUZpZWxkLmlzVmFsaWQoKSkudG8uYmUodHJ1ZSk7XG4gICAgZXhwZWN0KHBhcnNsZXlGaWVsZC5jb25zdHJhaW50cy5sZW5ndGgpLnRvLmJlKDIpOyAvLyBUeXBlPURhdGUsIE1heFxuICAgICQoJyNlbGVtZW50JykudmFsKCcyMDAxLTAzLTAzJyk7XG4gICAgZXhwZWN0KHBhcnNsZXlGaWVsZC5pc1ZhbGlkKCkpLnRvLmJlKGZhbHNlKTtcbiAgICAkKCcjZWxlbWVudCcpLnZhbCgnMjAwMS8wMS8wMScpLnJlbW92ZUF0dHIoJ21heCcpO1xuICAgIGV4cGVjdChwYXJzbGV5RmllbGQuaXNWYWxpZCgpKS50by5iZShmYWxzZSk7ICAgICAgLy8gU3RpbGwgaW52YWxpZCBiZWNhdXNlIG9mIGZvcm1hdFxuICAgIGV4cGVjdChwYXJzbGV5RmllbGQuY29uc3RyYWludHMubGVuZ3RoKS50by5iZSgxKTsgLy8gVHlwZT1EYXRlXG4gIH0pO1xuXG4gIHZhciBpdFNob3VsZEZvbGxvd1NwZWNGb3JOdW1iZXIgPSAoc3RlcCwgbWluLCBpbml0aWFsLCB2YWx1ZSwgdmFsaWQpID0+IHtcbiAgICB2YXIgYXR0cnMgPSBbXG4gICAgICBzdGVwID8gYHN0ZXA9XCIke3N0ZXB9XCIgYCA6ICcnLFxuICAgICAgbWluICA/IGBtaW49XCIke21pbn1cIiBgIDogJycsXG4gICAgICBpbml0aWFsID8gYHZhbHVlPVwiJHtpbml0aWFsfVwiIGAgOiAnJ1xuICAgIF0uam9pbignJyk7XG4gICAgaXQoJ3Nob3VsZCBmb2xsb3cgSFRNTDUgc3BlYyB0byB2YWxpZGF0ZSBcIm51bWJlclwiIHR5cGUgJyArXG4gICAgKGF0dHJzID8gYHdpdGggYXR0cmlidXRlcyAke2F0dHJzfWAgOiAnJykgK1xuICAgIGBieSAke3ZhbGlkID8gJ2FjY2VwdGluZycgOiAncmVqZWN0aW5nJ30gXCIke3ZhbHVlfVwiYCwgKCkgPT4ge1xuICAgICAgdmFyICRpbnB1dCA9ICQoYDxpbnB1dCB0eXBlPVwibnVtYmVyXCIgJHthdHRyc30+YCk7XG4gICAgICBleHBlY3QoJGlucHV0LnBhcnNsZXkoKS5pc1ZhbGlkKHt2YWx1ZX0pKS50by5iZSh2YWxpZCk7XG4gICAgfSk7XG4gIH07XG5cbiAgdmFyIGNoZWNrcyA9IFtcbiAgICAvLyBzdGVwIHwgbWluIHwgaW5pdGlhbCB8IGdvb2QgICAgICAgIHwgYmFkIHZhbHVlc1xuICAgIC8vICAgICAgfCAgICAgfCAgdmFsdWUgIHwgdmFsdWVzICAgICAgfFxuICAgIC8vIC0tLS0gfCAtLS0gfCAtLS0tLS0tIHwgLS0tLS0tLS0tLS0gfCAtLS0tLS0tLS0tXG4gICAgXCIgICAgICAgfCAgICAgfCAgICAgICAgIHwgMSwgLTIsIDQuMCAgfCAxLjEsIDQuICAgICAgIFwiLFxuICAgIFwiICBhbnkgIHwgICAgIHwgICAgICAgICB8IC0yLCA0LjMsIC4xIHwgNC4sIGhpLCAuLCAxLiBcIixcbiAgICBcIiAgQW5ZICB8ICAgICB8ICAgICAgICAgfCAuMWUrMiwgLS4yICB8IDRlLCA0ZS0sIC5lKzIgXCIsXG4gICAgXCIgIDAuMSAgfCAgICAgfCAgICAgICAgIHwgLTIsIDQuMyAgICAgfCA0LjAzICAgICAgICAgIFwiLFxuICAgIFwiICAwLjAxIHwgICAgIHwgICAgICAgICB8IDEuMTEgICAgICAgIHwgMS4xMTEgICAgICAgICBcIiwgLy8gQnVnICMxMDU2XG4gICAgXCIgICAgICAgfCAwLjMgfCAgICAgICAgIHwgNC4zICAgICAgICAgfCAtMiwgLTIuNywgNC4wIFwiLFxuICAgIFwiICAgICAgIHwgICAgIHwgICAwLjMgICB8IC0yLjcsIDQuMyAgIHwgLTIsIC0yLjMsIDQuMCBcIixcbiAgICBcIiAgMC40ICB8IDAuMyB8ICAgICAgICAgfCAxLjEgICAgICAgICB8IC0yLjksIDEuNiwgMS44XCIsXG4gICAgXCIgIDAuNCAgfCAgICAgfCAgIDAuMyAgIHwgLTIuOSwgMS4xICAgfCAxLjYsIDEuOCAgICAgIFwiLFxuICAgIFwiICAwLjQgIHwgMC4zIHwgICAwLjUgICB8IDEuMSAgICAgICAgIHwgLTIuOSwgMS42LCAxLjhcIlxuICBdO1xuICAkLmVhY2goY2hlY2tzLCAoXywgY2hlY2spID0+IHtcbiAgICB2YXIgdHJpbSA9IHZhbCA9PiB7IHJldHVybiB2YWwudHJpbSgpOyB9O1xuICAgIHZhciBbc3RlcCwgbWluLCBpbml0aWFsLCAuLi5nb29kQW5kQmFkXSA9IGNoZWNrLnNwbGl0KCd8JykubWFwKHRyaW0pO1xuICAgIHZhciB4cyA9IGdvb2RBbmRCYWQubWFwKHZhbHVlcyA9PiB7XG4gICAgICByZXR1cm4gdmFsdWVzLnNwbGl0KCcsJykubWFwKHRyaW0pO1xuICAgIH0pO1xuICAgIHZhciBbZ29vZCwgYmFkXSA9IHhzO1xuICAgICQuZWFjaChnb29kLCAoXywgdmFsKSA9PiB7XG4gICAgICBpdFNob3VsZEZvbGxvd1NwZWNGb3JOdW1iZXIoc3RlcCwgbWluLCBpbml0aWFsLCB2YWwsIHRydWUpO1xuICAgICAgaXRTaG91bGRGb2xsb3dTcGVjRm9yTnVtYmVyKHN0ZXAsIG1pbiwgaW5pdGlhbCwgdmFsLnRyaW0oKSArICcwJywgdHJ1ZSk7XG4gICAgfSk7XG4gICAgJC5lYWNoKGJhZCwgKF8sIHZhbCkgPT4ge1xuICAgICAgaXRTaG91bGRGb2xsb3dTcGVjRm9yTnVtYmVyKHN0ZXAsIG1pbiwgaW5pdGlhbCwgdmFsLCBmYWxzZSk7XG4gICAgfSk7XG4gIH0pO1xuICAvLyAnYW55JyBtdXN0IGJlIGV4YWN0IG1hdGNoXG4gIGl0U2hvdWxkRm9sbG93U3BlY0Zvck51bWJlcignICAgYW55ICAgICcsICcnLCAnJywgJzQuMicsIGZhbHNlKTtcbiAgLy8gbWluIC8gaW5pdGlhbCBzaG91bGQgYmUgYXV0by10cmltbWVkXG4gIGl0U2hvdWxkRm9sbG93U3BlY0Zvck51bWJlcignMC4yJywgJyAgIDAuMyAgICAnLCAnJywgJzAuMycsIHRydWUpO1xuICAvLyBzY2llbnRpZmljIG5vdGF0aW9uXG4gIGl0U2hvdWxkRm9sbG93U3BlY0Zvck51bWJlcignJywgJzAuMycsICcnLCAnNDNlLTEnLCB0cnVlKTtcbiAgLy8gY29tbWFzIGFyZSBub3QgYWNjZXB0ZWQgaW4gdGhlIHNwZWNcbiAgaXRTaG91bGRGb2xsb3dTcGVjRm9yTnVtYmVyKCdhbnknLCAnJywgJycsICcxLDAwMCcsIGZhbHNlKTtcblxuXG4gIHZhciBpdFNob3VsZEZvbGxvd1NwZWNGb3JOdW1iZXIgPSAoc3RlcCwgbWluLCBpbml0aWFsLCB2YWx1ZSwgdmFsaWQpID0+IHtcbiAgICB2YXIgYXR0cnMgPSBbXG4gICAgICBzdGVwID8gYHN0ZXA9XCIke3N0ZXB9XCIgYCA6ICcnLFxuICAgICAgbWluICA/IGBtaW49XCIke21pbn1cIiBgIDogJycsXG4gICAgICBpbml0aWFsID8gYHZhbHVlPVwiJHtpbml0aWFsfVwiIGAgOiAnJ1xuICAgIF0uam9pbignJyk7XG4gICAgaXQoJ3Nob3VsZCBmb2xsb3cgSFRNTDUgc3BlYyB0byB2YWxpZGF0ZSBcIm51bWJlclwiIHR5cGUgJyArXG4gICAgKGF0dHJzID8gYHdpdGggYXR0cmlidXRlcyAke2F0dHJzfWAgOiAnJykgK1xuICAgIGBieSAke3ZhbGlkID8gJ2FjY2VwdGluZycgOiAncmVqZWN0aW5nJ30gXCIke3ZhbHVlfVwiYCwgKCkgPT4ge1xuICAgICAgdmFyICRpbnB1dCA9ICQoYDxpbnB1dCB0eXBlPVwibnVtYmVyXCIgJHthdHRyc30+YCk7XG4gICAgICBleHBlY3QoJGlucHV0LnBhcnNsZXkoKS5pc1ZhbGlkKHt2YWx1ZX0pKS50by5iZSh2YWxpZCk7XG4gICAgfSk7XG4gIH07XG5cbiAgaXQoJ3Nob3VsZCBoYXZlIGEgZGVmYXVsdCBzdGVwIG9mIFwiYW55XCIgZm9yIGRhdGEtcGFyc2xleS10eXBlPVwibnVtYmVyXCInLCAoKSA9PiB7XG4gICAgdmFyICRpbnB1dCA9ICQoYDxpbnB1dCBkYXRhLXBhcnNsZXktdHlwZT1cIm51bWJlclwiIHZhbHVlPVwiNC40NDRcIj5gKTtcbiAgICBleHBlY3QoJGlucHV0LnBhcnNsZXkoKS5pc1ZhbGlkKCkpLnRvLmJlKHRydWUpO1xuICAgICRpbnB1dC5hdHRyKCdkYXRhLXBhcnNsZXktdHlwZS1zdGVwJywgJzEnKTtcbiAgICBleHBlY3QoJGlucHV0LnBhcnNsZXkoKS5pc1ZhbGlkKCkpLnRvLmJlKGZhbHNlKTtcbiAgfSk7XG4gIGl0KCdzaG91bGQgdmFsaWQgc2ltcGxlIHZhbGlkYXRvcicsICgpID0+IHtcbiAgICAkKCdib2R5JykuYXBwZW5kKCc8aW5wdXQgdHlwZT1cInRleHRcIiBpZD1cImVsZW1lbnRcIiB2YWx1ZT1cIlwiIC8+Jyk7XG4gICAgdmFyIHBhcnNsZXlGaWVsZCA9ICQoJyNlbGVtZW50JykucGFyc2xleSgpXG4gICAgICAuYWRkQ29uc3RyYWludCgncmVxdWlyZWQnLCB0cnVlKTtcbiAgICBleHBlY3QocGFyc2xleUZpZWxkLmlzVmFsaWQoKSkudG8uYmUoZmFsc2UpO1xuICAgICQoJyNlbGVtZW50JykudmFsKCdmb28nKTtcbiAgICBleHBlY3QocGFyc2xleUZpZWxkLmlzVmFsaWQoKSkudG8uYmUodHJ1ZSk7XG4gIH0pO1xuICBpdCgnc2hvdWxkIHZhbGlkIG1vcmUgY29tcGxleCBgdHlwZWAgdmFsaWRhdG9yJywgKCkgPT4ge1xuICAgICQoJ2JvZHknKS5hcHBlbmQoJzxpbnB1dCB0eXBlPVwidGV4dFwiIGlkPVwiZWxlbWVudFwiIHZhbHVlPVwiZm9vXCIgLz4nKTtcbiAgICB2YXIgcGFyc2xleUZpZWxkID0gJCgnI2VsZW1lbnQnKS5wYXJzbGV5KClcbiAgICAgIC5hZGRDb25zdHJhaW50KCd0eXBlJywgJ2VtYWlsJyk7XG4gICAgZXhwZWN0KHBhcnNsZXlGaWVsZC5pc1ZhbGlkKCkpLnRvLmJlKGZhbHNlKTtcbiAgICAkKCcjZWxlbWVudCcpLnZhbCgnZm9vJyk7XG4gICAgZXhwZWN0KHBhcnNsZXlGaWVsZC5pc1ZhbGlkKCkpLnRvLmJlKGZhbHNlKTtcbiAgICAkKCcjZWxlbWVudCcpLnZhbCgnZm9vQGJhci5iYXonKTtcbiAgICBleHBlY3QocGFyc2xleUZpZWxkLmlzVmFsaWQoKSkudG8uYmUodHJ1ZSk7XG4gIH0pO1xuICBpdCgnc2hvdWxkIHZhbGlkIG1vc3QgY29tcGxleCBDYWxsYmFjaygpIHZhbGlkYXRvcicsICgpID0+IHtcbiAgICAkKCdib2R5JykuYXBwZW5kKCc8aW5wdXQgdHlwZT1cInRleHRcIiBpZD1cImVsZW1lbnRcIiB2YWx1ZT1cIlwiIC8+Jyk7XG4gICAgd2luZG93LlBhcnNsZXkuYWRkVmFsaWRhdG9yKCdpc211bHRpcGxlJywgKHZhbHVlLCBtdWx0aXBsZSkgPT4ge1xuICAgICAgaWYgKCFpc05hTihwYXJzZUZsb2F0KHZhbHVlKSkgJiYgaXNGaW5pdGUodmFsdWUpKVxuICAgICAgICByZXR1cm4gIShOdW1iZXIodmFsdWUpICUgbXVsdGlwbGUpO1xuXG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfSwgNTEyKTtcblxuICAgIHZhciBwYXJzbGV5RmllbGQgPSAkKCcjZWxlbWVudCcpLnBhcnNsZXkoKVxuICAgICAgLmFkZENvbnN0cmFpbnQoJ2lzbXVsdGlwbGUnLCAyKTtcbiAgICBleHBlY3QocGFyc2xleUZpZWxkLmlzVmFsaWQoKSkudG8uZXFsKHRydWUpO1xuICAgICQoJyNlbGVtZW50JykudmFsKCcxJyk7XG4gICAgZXhwZWN0KHBhcnNsZXlGaWVsZC5pc1ZhbGlkKCkpLnRvLmJlKGZhbHNlKTtcbiAgICAkKCcjZWxlbWVudCcpLnZhbCgnMicpO1xuICAgIGV4cGVjdChwYXJzbGV5RmllbGQuaXNWYWxpZCgpKS50by5iZSh0cnVlKTtcbiAgICBwYXJzbGV5RmllbGQudXBkYXRlQ29uc3RyYWludCgnaXNtdWx0aXBsZScsIDMpO1xuICAgIGV4cGVjdChwYXJzbGV5RmllbGQuaXNWYWxpZCgpKS50by5iZShmYWxzZSk7XG4gICAgJCgnI2VsZW1lbnQnKS52YWwoJzknKTtcbiAgICBleHBlY3QocGFyc2xleUZpZWxkLmlzVmFsaWQoKSkudG8uYmUodHJ1ZSk7XG4gICAgd2luZG93LlBhcnNsZXkucmVtb3ZlVmFsaWRhdG9yKCdpc211bHRpcGxlJyk7XG4gIH0pO1xuICBpdCgnc2hvdWxkIHByb3Blcmx5IGNvbXB1dGUgY29uc3RyYWludHMgb24gZWFjaCB2YWxpZGF0aW9uJywgKCkgPT4ge1xuICAgICQoJ2JvZHknKS5hcHBlbmQoJzxpbnB1dCB0eXBlPVwiZW1haWxcIiBkYXRhLXBhcnNsZXktcmVxdWlyZWQgaWQ9XCJlbGVtZW50XCIgLz4nKTtcbiAgICB3aW5kb3cuUGFyc2xleS5hZGRWYWxpZGF0b3IoJ2Zvb2JhemVyJywgdmFsdWUgPT4ge1xuICAgICAgcmV0dXJuICdmb29iYXInID09PSB2YWx1ZTtcbiAgICB9LCAyKTtcbiAgICB3aW5kb3cuUGFyc2xleS5hZGRWYWxpZGF0b3IoJ2lzbXVsdGlwbGUnLCAodmFsdWUsIG11bHRpcGxlKSA9PiB7XG4gICAgICBpZiAoIWlzTmFOKHBhcnNlRmxvYXQodmFsdWUpKSAmJiBpc0Zpbml0ZSh2YWx1ZSkpXG4gICAgICAgIHJldHVybiAhKE51bWJlcih2YWx1ZSkgJSBtdWx0aXBsZSk7XG5cbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9LCA1MTIpO1xuXG4gICAgdmFyIHBhcnNsZXlGaWVsZCA9ICQoJyNlbGVtZW50JykucGFyc2xleSgpXG4gICAgICAuYWRkQ29uc3RyYWludCgnaXNtdWx0aXBsZScsIDQpXG4gICAgICAuYWRkQ29uc3RyYWludCgnZm9vYmF6ZXInLCB0cnVlKTtcbiAgICBwYXJzbGV5RmllbGQucmVmcmVzaCgpO1xuICAgIGV4cGVjdChwYXJzbGV5RmllbGQuY29uc3RyYWludHMubGVuZ3RoKS50by5iZSg0KTtcbiAgICAkKCcjZWxlbWVudCcpLnJlbW92ZUF0dHIoJ2RhdGEtcGFyc2xleS1yZXF1aXJlZCcpO1xuICAgIHBhcnNsZXlGaWVsZC5yZWZyZXNoKCk7XG4gICAgZXhwZWN0KHBhcnNsZXlGaWVsZC5jb25zdHJhaW50cy5sZW5ndGgpLnRvLmJlKDMpO1xuICAgIHBhcnNsZXlGaWVsZFxuICAgICAgLnJlbW92ZUNvbnN0cmFpbnQoJ2lzbXVsdGlwbGUnKVxuICAgICAgLnJlZnJlc2goKTtcbiAgICBleHBlY3QocGFyc2xleUZpZWxkLmNvbnN0cmFpbnRzLmxlbmd0aCkudG8uYmUoMik7XG4gICAgd2luZG93LlBhcnNsZXkucmVtb3ZlVmFsaWRhdG9yKCdmb29iYXplcicpO1xuICAgIHdpbmRvdy5QYXJzbGV5LnJlbW92ZVZhbGlkYXRvcignaXNtdWx0aXBsZScpO1xuICB9KTtcbiAgaXQoJ3Nob3VsZCBoYW5kbGUgY29uc3RyYWludHMgcHJpb3JpdGllcyBvbiB2YWxpZGF0aW9uJywgKCkgPT4ge1xuICAgICQoJ2JvZHknKS5hcHBlbmQoJzxpbnB1dCB0eXBlPVwiZW1haWxcIiBwYXR0ZXJuPVwiW0EtRl1bMC05XXs1fVwiIHJlcXVpcmVkIGlkPVwiZWxlbWVudFwiIC8+Jyk7XG4gICAgdmFyIHBhcnNsZXlGaWVsZCA9ICQoJyNlbGVtZW50JykucGFyc2xleSgpO1xuICAgIGV4cGVjdChwYXJzbGV5RmllbGQuaXNWYWxpZCgpKS50by5iZShmYWxzZSk7XG4gICAgZXhwZWN0KHBhcnNsZXlGaWVsZC52YWxpZGF0aW9uUmVzdWx0Lmxlbmd0aCkudG8uYmUoMSk7XG4gICAgZXhwZWN0KHBhcnNsZXlGaWVsZC52YWxpZGF0aW9uUmVzdWx0WzBdLmFzc2VydC5uYW1lKS50by5iZSgncmVxdWlyZWQnKTtcbiAgICAkKCcjZWxlbWVudCcpLnZhbCgnZm9vJyk7XG4gICAgZXhwZWN0KHBhcnNsZXlGaWVsZC5pc1ZhbGlkKCkpLnRvLmJlKGZhbHNlKTtcbiAgICBleHBlY3QocGFyc2xleUZpZWxkLnZhbGlkYXRpb25SZXN1bHQubGVuZ3RoKS50by5iZSgxKTtcbiAgICBleHBlY3QocGFyc2xleUZpZWxkLnZhbGlkYXRpb25SZXN1bHRbMF0uYXNzZXJ0Lm5hbWUpLnRvLmJlKCd0eXBlJyk7XG4gICAgJCgnI2VsZW1lbnQnKS52YWwoJ2Zvb0BiYXIuYmF6Jyk7XG4gICAgZXhwZWN0KHBhcnNsZXlGaWVsZC5pc1ZhbGlkKCkpLnRvLmJlKGZhbHNlKTtcbiAgICBleHBlY3QocGFyc2xleUZpZWxkLnZhbGlkYXRpb25SZXN1bHQubGVuZ3RoKS50by5iZSgxKTtcbiAgICBleHBlY3QocGFyc2xleUZpZWxkLnZhbGlkYXRpb25SZXN1bHRbMF0uYXNzZXJ0Lm5hbWUpLnRvLmJlKCdwYXR0ZXJuJyk7XG4gIH0pO1xuICBpdCgnc2hvdWxkIGhhbmRsZSBhbGwgdmlvbGF0aW9ucyBpZiBgcHJpb3JpdHlFbmFibGVkYCBpcyBzZXQgdG8gZmFsc2UnLCAoKSA9PiB7XG4gICAgJCgnYm9keScpLmFwcGVuZCgnPGlucHV0IHR5cGU9XCJlbWFpbFwiIHBhdHRlcm49XCJbQS1GXVswLTldezV9XCIgdmFsdWU9XCJ4XCIgaWQ9XCJlbGVtZW50XCIgLz4nKTtcbiAgICB2YXIgcGFyc2xleUZpZWxkID0gJCgnI2VsZW1lbnQnKS5wYXJzbGV5KHtwcmlvcml0eUVuYWJsZWQ6IGZhbHNlfSk7XG4gICAgZXhwZWN0KHBhcnNsZXlGaWVsZC5pc1ZhbGlkKCkpLnRvLmJlKGZhbHNlKTtcbiAgICBleHBlY3QocGFyc2xleUZpZWxkLnZhbGlkYXRpb25SZXN1bHQubGVuZ3RoKS50by5iZSgyKTtcbiAgfSk7XG4gIGl0KCdzaG91bGQgdHJpZ2dlciBmaWVsZDp2YWxpZGF0ZSBldmVudCcsIGRvbmUgPT4ge1xuICAgICQoJ2JvZHknKS5hcHBlbmQoJzxpbnB1dCB0eXBlPVwiZW1haWxcIiBwYXR0ZXJuPVwiW0EtRl1bMC05XXs1fVwiIHJlcXVpcmVkIGlkPVwiZWxlbWVudFwiIC8+Jyk7XG4gICAgJCgnI2VsZW1lbnQnKS5wc2x5KClcbiAgICAub24oJ2ZpZWxkOnZhbGlkYXRlJywgZnVuY3Rpb24gKCkge1xuICAgICAgLy8gd2UgYXJlIGJlZm9yZSB2YWxpZGF0aW9uIVxuICAgICAgZXhwZWN0KHRoaXMudmFsaWRhdGlvblJlc3VsdCkudG8uYmUodHJ1ZSk7XG4gICAgICBkb25lKCk7XG4gICAgfSlcbiAgICAudmFsaWRhdGUoKTtcbiAgfSk7XG4gIGl0KCdzaG91bGQgdHJpZ2dlciBmaWVsZDp2YWxpZGF0ZWQgZXZlbnQnLCBkb25lID0+IHtcbiAgICAkKCdib2R5JykuYXBwZW5kKCc8aW5wdXQgdHlwZT1cImVtYWlsXCIgcGF0dGVybj1cIltBLUZdWzAtOV17NX1cIiByZXF1aXJlZCBpZD1cImVsZW1lbnRcIiAvPicpO1xuICAgICQoJyNlbGVtZW50JykucHNseSgpXG4gICAgLm9uKCdmaWVsZDp2YWxpZGF0ZWQnLCBmdW5jdGlvbiAoKSB7XG4gICAgICAvLyB3ZSBhcmUgYWZ0ZXIgdmFsaWRhdGlvbiFcbiAgICAgIGV4cGVjdCh0aGlzLnZhbGlkYXRpb25SZXN1bHQubGVuZ3RoKS50by5iZSgxKTtcbiAgICAgIGRvbmUoKTtcbiAgICB9KVxuICAgIC52YWxpZGF0ZSgpO1xuICB9KTtcbiAgaXQoJ3Nob3VsZCB0cmlnZ2VyIGZpZWxkOmVycm9yIGV2ZW50JywgZG9uZSA9PiB7XG4gICAgJCgnYm9keScpLmFwcGVuZCgnPGlucHV0IHR5cGU9XCJlbWFpbFwiIHBhdHRlcm49XCJbQS1GXVswLTldezV9XCIgcmVxdWlyZWQgaWQ9XCJlbGVtZW50XCIgLz4nKTtcbiAgICAkKCcjZWxlbWVudCcpLnBzbHkoKVxuICAgIC5vbignZmllbGQ6ZXJyb3InLCBmdW5jdGlvbiAoKSB7XG4gICAgICBleHBlY3QodGhpcy52YWxpZGF0aW9uUmVzdWx0Lmxlbmd0aCkudG8uYmUoMSk7XG4gICAgICBkb25lKCk7XG4gICAgfSlcbiAgICAudmFsaWRhdGUoKTtcbiAgfSk7XG4gIGl0KCdzaG91bGQgdHJpZ2dlciBwYXJzbGV5OmZpZWxkOnN1Y2Nlc3MgZXZlbnQnLCBkb25lID0+IHtcbiAgICAkKCdib2R5JykuYXBwZW5kKCc8aW5wdXQgdHlwZT1cImVtYWlsXCIgcmVxdWlyZWQgaWQ9XCJlbGVtZW50XCIgdmFsdWU9XCJmb29AYmFyLmJhelwiIC8+Jyk7XG4gICAgJCgnI2VsZW1lbnQnKS5wc2x5KClcbiAgICAub24oJ2ZpZWxkOnN1Y2Nlc3MnLCBmdW5jdGlvbiAoKSB7XG4gICAgICBleHBlY3QodGhpcy52YWxpZGF0aW9uUmVzdWx0KS50by5iZSh0cnVlKTtcbiAgICAgIGRvbmUoKTtcbiAgICB9KVxuICAgIC52YWxpZGF0ZSgpO1xuICB9KTtcblxuICBpdCgnc2hvdWxkIGhhdmUgdGhlIHZhbGlkYXRpb25SZXN1bHQgYmUgY2hhbmdlYWJsZScsICgpID0+IHtcbiAgICB2YXIgc3VibWl0dGVkID0gZmFsc2U7XG4gICAgJCgnPGZvcm0gaWQ9XCJlbGVtZW50XCI+PGlucHV0Lz48L2Zvcm0+JylcbiAgICAuYXBwZW5kVG8oJ2JvZHknKVxuICAgIC5wYXJzbGV5KClcbiAgICAub24oJ2ZpZWxkOnN1Y2Nlc3MnLCBmaWVsZCA9PiB7XG4gICAgICBmaWVsZC52YWxpZGF0aW9uUmVzdWx0ID0gZmFsc2U7XG4gICAgfSlcbiAgICAub24oJ2ZpZWxkOmVycm9yJywgZmllbGQgPT4ge1xuICAgICAgZmllbGQudmFsaWRhdGlvblJlc3VsdCA9IHRydWU7XG4gICAgfSlcbiAgICAub24oJ2Zvcm06c3VibWl0JywgZm9ybSA9PiB7XG4gICAgICBzdWJtaXR0ZWQgPSB0cnVlO1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH0pO1xuICAgICQoJyNlbGVtZW50Jykuc3VibWl0KCk7XG4gICAgZXhwZWN0KHN1Ym1pdHRlZCkudG8uYmUoZmFsc2UpO1xuICAgICQoJyNlbGVtZW50IGlucHV0JykuYXR0cigncmVxdWlyZWQnLCB0cnVlKTtcbiAgICAkKCcjZWxlbWVudCcpLnN1Ym1pdCgpO1xuICAgIGV4cGVjdChzdWJtaXR0ZWQpLnRvLmJlKHRydWUpO1xuICB9KTtcblxuICBpdCgnc2hvdWxkIGFsbG93IGB0aGlzLnZhbHVlYCBhbHRlcmF0aW9uIHdpdGggZmllbGQ6dmFsaWRhdGUucGFyc2xleSBldmVudCcsICgpID0+IHtcbiAgICAkKCdib2R5JykuYXBwZW5kKCc8aW5wdXQgdHlwZT1cImVtYWlsXCIgcmVxdWlyZWQgaWQ9XCJlbGVtZW50XCIgdmFsdWU9XCJmb29AYmFyLmJhelwiIC8+Jyk7XG4gICAgZXhwZWN0KCQoJyNlbGVtZW50JykucGFyc2xleSgpLnZhbGlkYXRlKCkpLnRvLmJlKHRydWUpO1xuXG4gICAgJCgnI2VsZW1lbnQnKS5wYXJzbGV5KCkub24oJ2ZpZWxkOnZhbGlkYXRlJywgZnVuY3Rpb24gKCkge1xuICAgICAgdGhpcy52YWx1ZSA9ICcnO1xuICAgIH0pO1xuXG4gICAgZXhwZWN0KCQoJyNlbGVtZW50JykucGFyc2xleSgpLnZhbGlkYXRlKCkpLm5vdC50by5iZSh0cnVlKTtcbiAgfSk7XG4gIGl0KCdzaG91bGQgaGF2ZSB2YWxpZGF0ZUlmRW1wdHkgLyBmb3JjZTp0cnVlIHRvIHZhbGlkYXRlIGVtcHR5IGZpZWxkcycsICgpID0+IHtcbiAgICB2YXIgY2FsbHMgPSBbXTtcbiAgICB3aW5kb3cuUGFyc2xleS5hZGRWYWxpZGF0b3IoJ2NoZWNrZXZlbndoZW5lbXB0eScsIHZhbHVlID0+IHtcbiAgICAgIGNhbGxzLnB1c2godmFsdWUpO1xuICAgICAgcmV0dXJuICdmb29AYmFyLmNvbScgPT09IHZhbHVlO1xuICAgIH0sIDIpO1xuXG4gICAgJCgnYm9keScpLmFwcGVuZCgnPGlucHV0IHR5cGU9XCJlbWFpbFwiIGRhdGEtcGFyc2xleS1jaGVja2V2ZW53aGVuZW1wdHkgaWQ9XCJlbGVtZW50XCIgLz4nKTtcbiAgICBleHBlY3QoJCgnI2VsZW1lbnQnKS5wc2x5KCkuaXNWYWxpZCgpKS50by5iZS5lcWwodHJ1ZSk7XG4gICAgZXhwZWN0KGNhbGxzKS50by5iZS5lcWwoW10pO1xuICAgIGV4cGVjdCgkKCcjZWxlbWVudCcpLnBzbHkoKS5pc1ZhbGlkKHtmb3JjZTogdHJ1ZX0pKS50by5iZS5lcWwoZmFsc2UpO1xuICAgIGV4cGVjdChjYWxscykudG8uYmUuZXFsKFsnJ10pO1xuICAgICQoJyNlbGVtZW50JykuYXR0cignZGF0YS1wYXJzbGV5LXZhbGlkYXRlLWlmLWVtcHR5JywgJycpO1xuICAgIGV4cGVjdCgkKCcjZWxlbWVudCcpLnBzbHkoKS5pc1ZhbGlkKCkpLnRvLmJlLmVxbChmYWxzZSk7XG4gICAgZXhwZWN0KGNhbGxzKS50by5iZS5lcWwoWycnLCAnJ10pO1xuICAgICQoJyNlbGVtZW50JykudmFsKCdmb29AYmFyLmNvbScpO1xuICAgIGV4cGVjdCgkKCcjZWxlbWVudCcpLnBzbHkoKS5pc1ZhbGlkKCkpLnRvLmJlLmVxbCh0cnVlKTtcbiAgICBleHBlY3QoY2FsbHMpLnRvLmJlLmVxbChbJycsICcnLCAnZm9vQGJhci5jb20nXSk7XG4gICAgd2luZG93LlBhcnNsZXkucmVtb3ZlVmFsaWRhdG9yKCdjaGVja2V2ZW53aGVuZW1wdHknKTtcbiAgfSk7XG4gIGl0KCdzaG91bGQgYWxsb3cgcGFzc2luZyBhIHNwZWNpZmljIHZhbHVlIHRvIGBpc1ZhbGlkYCBtZXRob2QnLCAoKSA9PiB7XG4gICAgZXhwZWN0KCQoJzxpbnB1dCB0eXBlPVwiZW1haWxcIiB2YWx1ZT1cImZvb1wiPicpLnBhcnNsZXkoKS5pc1ZhbGlkKCkpLnRvLmJlKGZhbHNlKTtcbiAgICBleHBlY3QoJCgnPGlucHV0IHR5cGU9XCJlbWFpbFwiIHZhbHVlPVwiZm9vXCI+JykucGFyc2xleSgpLmlzVmFsaWQoe3ZhbHVlOiAnJ30pKS50by5iZSh0cnVlKTtcbiAgICBleHBlY3RXYXJuaW5nKCgpID0+IHtcbiAgICAgIGV4cGVjdCgkKCc8aW5wdXQgdHlwZT1cImVtYWlsXCIgdmFsdWU9XCJmb29cIj4nKS5wYXJzbGV5KCkuaXNWYWxpZCh0cnVlLCAnJykpLnRvLmJlKHRydWUpO1xuICAgIH0pO1xuICB9KTtcbiAgaXQoJ3Nob3VsZCBoYXZlIGEgd2hpdGVzcGFjZT1cInNxdWlzaFwiIG9wdGlvbicsICgpID0+IHtcbiAgICAkKCdib2R5JykuYXBwZW5kKCc8aW5wdXQgdHlwZT1cInRleHRcIiBpZD1cImVsZW1lbnRcIiB2YWx1ZT1cIiBmb28gICAgYmFyIFwiIC8+Jyk7XG4gICAgZXhwZWN0KCQoJyNlbGVtZW50JykucGFyc2xleSgpLmdldFZhbHVlKCkpLnRvLmJlKCcgZm9vICAgIGJhciAnKTtcbiAgICAkKCcjZWxlbWVudCcpLmF0dHIoJ2RhdGEtcGFyc2xleS13aGl0ZXNwYWNlJywgJ3NxdWlzaCcpLnBhcnNsZXkoKS5hY3R1YWxpemVPcHRpb25zKCk7XG4gICAgZXhwZWN0KCQoJyNlbGVtZW50JykucGFyc2xleSgpLmdldFZhbHVlKCkpLnRvLmJlKCdmb28gYmFyJyk7XG4gIH0pO1xuICBpdCgnc2hvdWxkIGhhdmUgYSB3aGl0ZXNwYWNlPVwidHJpbVwiIG9wdGlvbicsICgpID0+IHtcbiAgICAkKCdib2R5JykuYXBwZW5kKCc8aW5wdXQgdHlwZT1cInRleHRcIiBpZD1cImVsZW1lbnRcIiB2YWx1ZT1cIiBmb28gXCIgLz4nKTtcbiAgICBleHBlY3QoJCgnI2VsZW1lbnQnKS5wYXJzbGV5KCkuZ2V0VmFsdWUoKSkudG8uYmUoJyBmb28gJyk7XG4gICAgJCgnI2VsZW1lbnQnKS5hdHRyKCdkYXRhLXBhcnNsZXktd2hpdGVzcGFjZScsICd0cmltJykucGFyc2xleSgpLmFjdHVhbGl6ZU9wdGlvbnMoKTtcbiAgICBleHBlY3QoJCgnI2VsZW1lbnQnKS5wYXJzbGV5KCkuZ2V0VmFsdWUoKSkudG8uYmUoJ2ZvbycpO1xuICB9KTtcbiAgaXQoJ3Nob3VsZCBoYXZlIGEgdHJpbS12YWx1ZSBvcHRpb24nLCAoKSA9PiB7XG4gICAgJCgnYm9keScpLmFwcGVuZCgnPGlucHV0IHR5cGU9XCJ0ZXh0XCIgaWQ9XCJlbGVtZW50XCIgdmFsdWU9XCIgZm9vIFwiIC8+Jyk7XG4gICAgZXhwZWN0KCQoJyNlbGVtZW50JykucGFyc2xleSgpLmdldFZhbHVlKCkpLnRvLmJlKCcgZm9vICcpO1xuICAgICQoJyNlbGVtZW50JykuYXR0cignZGF0YS1wYXJzbGV5LXRyaW0tdmFsdWUnLCB0cnVlKS5wYXJzbGV5KCkuYWN0dWFsaXplT3B0aW9ucygpO1xuICAgIGV4cGVjdFdhcm5pbmcoKCkgPT4ge1xuICAgICAgZXhwZWN0KCQoJyNlbGVtZW50JykucGFyc2xleSgpLmdldFZhbHVlKCkpLnRvLmJlKCdmb28nKTtcbiAgICB9KTtcbiAgfSk7XG5cbiAgaXQoJ3Nob3VsZCBkZWxheSB2YWxpZGF0aW9uIGlmIGRlYm91bmNlIG9wdGlvbiBzcGVjaWZpZWQnLCBkb25lID0+IHtcbiAgICAvLyBVc2UgYSBhbiBpbml0aWFsbHkgdmFsaWQgaW5wdXQuIEFueSBzdWNjZXNzIGV2ZW50IHdpbGwgYmUgYSBzaWduIHRoYXQgdmFsaWRhdGlvbiBjb21wbGV0ZWRcbiAgICAvLyBhbmQgdHJlYXRlZCBhcyBhIGZhaWx1cmUuIFdlIHdpbGwgbWFrZSB0aGUgZmllbGQgaW52YWxpZCBiZWZvcmUgZGVsYXllZCB2YWxpZGF0aW9uIG9jY3VycyxcbiAgICAvLyBzbyBvbmx5IGVycm9yIGV2ZW50IHdpbGwgYmUgYSB0ZXN0IHN1Y2Nlc3MuXG4gICAgJCgnYm9keScpLmFwcGVuZCgnPGlucHV0IGRhdGEtcGFyc2xleS1kZWJvdW5jZT1cIjEwMFwiIHZhbHVlPVwieFwiIHJlcXVpcmVkIGRhdGEtcGFyc2xleS10cmlnZ2VyPVwidmFsaWRhdGVub3dcIiBpZD1cImVsZW1lbnRcIi8+Jyk7XG4gICAgJCgnI2VsZW1lbnQnKS5wYXJzbGV5KClcbiAgICAub24oJ2ZpZWxkOmVycm9yJywgKCkgPT4gZG9uZSgpKVxuICAgIC5vbignZmllbGQ6c3VjY2VzcycsICgpID0+IGV4cGVjdCgpLmZhaWwoJ3ZhbGlkYXRpb24gc2hvdWxkIG5vdCBoYXBwZW4geWV0JykpO1xuXG4gICAgLy8gVHJpZ2dlciB2YWxpZGF0aW9uIGltbWVkaWF0ZWx5XG4gICAgJCgnI2VsZW1lbnQnKS50cmlnZ2VyKCd2YWxpZGF0ZW5vdycpO1xuICAgIC8vIGFuZCBhIGJpdCBsYXRlciwgd2hpY2ggc2hvdWxkIHJlc2V0IHRoZSBjb3VudGVyXG4gICAgc2V0VGltZW91dCgoKSA9PiAkKCcjZWxlbWVudCcpLnRyaWdnZXIoJ3ZhbGlkYXRlbm93JyksIDUwKTtcbiAgICAvLyBTZXQgZmluYWwgY29uZGl0aW9uIGFmdGVyIGEgZGVsYXkgbG9uZ2VyIHRoYW4gb3VyIGRlYm91bmNlLCBsZXNzIHRoYW4gNTArZGVib3VuY2VcbiAgICBzZXRUaW1lb3V0KCgpID0+ICQoJyNlbGVtZW50JykudmFsKCcnKSwgMTQwKTtcbiAgfSk7XG5cbiAgaXQoJ3Nob3VsZCBpbmhlcml0IG9wdGlvbnMgZnJvbSB0aGUgZm9ybSwgZXZlbiBpZiB0aGUgZm9ybSBpcyBib3VuZCBhZnRlcicsICgpID0+IHtcbiAgICAkKCdib2R5JykuYXBwZW5kKCc8Zm9ybSBpZD1cImVsZW1lbnRcIiBkYXRhLXBhcnNsZXktcmVxdWlyZWQ+JyArXG4gICAgICAnPGlucHV0IHR5cGU9XCJ0ZXh0XCIvPjwvZm9ybT4nKTtcbiAgICB2YXIgcHNseSA9ICQoJyNlbGVtZW50IGlucHV0JykucGFyc2xleSgpO1xuICAgIGV4cGVjdChwc2x5LmlzVmFsaWQoKSkubm90LnRvLmJlKGZhbHNlKTtcbiAgICAkKCcjZWxlbWVudCcpLnBhcnNsZXkoKTtcbiAgICBleHBlY3QocHNseS5pc1ZhbGlkKCkpLnRvLmJlKGZhbHNlKTtcbiAgfSk7XG4gIGl0KCdzaG91bGQgaGF2ZSBvcHRpb25zIHRoYXQgY2FuIGJlIHNldCBlYXNpbHknLCAoKSA9PiB7XG4gICAgdmFyIHBzbHkgPSAkKCc8aW5wdXQgdHlwZT1cInRleHRcIi8+JykucGFyc2xleSgpO1xuICAgIHBzbHkub3B0aW9ucy5yZXF1aXJlZCA9IHRydWU7XG4gICAgZXhwZWN0KHBzbHkuaXNWYWxpZCgpKS50by5iZShmYWxzZSk7XG4gIH0pO1xuICBpdCgnc2hvdWxkIGhhdmUgYSB2YWx1ZSBvcHRpb24nLCAoKSA9PiB7XG4gICAgJCgnYm9keScpLmFwcGVuZCgnPGlucHV0IHR5cGU9XCJ0ZXh0XCIgaWQ9XCJlbGVtZW50XCIvPicpO1xuICAgIGV4cGVjdCgkKCcjZWxlbWVudCcpLnBhcnNsZXkoe3ZhbHVlOiAnZm9vJ30pLmdldFZhbHVlKCkpLnRvLmJlKCdmb28nKTtcbiAgfSk7XG4gIGl0KCdzaG91bGQgYWNjZXB0IGEgZnVuY3Rpb24gYXMgdmFsdWUgb3B0aW9uJywgKCkgPT4ge1xuICAgICQoJ2JvZHknKS5hcHBlbmQoJzxpbnB1dCB0eXBlPVwidGV4dFwiIGlkPVwiZWxlbWVudFwiLz4nKTtcbiAgICB2YXIgc3RyID0gJ2ZvJztcbiAgICB2YXIgcGFyc2xleSA9ICQoJyNlbGVtZW50JykucGFyc2xleSh7dmFsdWU6ICgpID0+IHsgcmV0dXJuIHN0ciA9IHN0ciArICdvJzt9fSk7XG4gICAgZXhwZWN0KHBhcnNsZXkuZ2V0VmFsdWUoKSkudG8uYmUoJ2ZvbycpO1xuICAgIGV4cGVjdChwYXJzbGV5LmdldFZhbHVlKCkpLnRvLmJlKCdmb29vJyk7XG4gIH0pO1xuICBpdCgnc2hvdWxkIHByb3Blcmx5IGhhbmRsZSBudWxsIG9yIHVuZGVmaW5lZCB2YWx1ZXMnLCAoKSA9PiB7XG4gICAgJCgnYm9keScpLmFwcGVuZCgnPGlucHV0IHR5cGU9XCJ0ZXh0XCIgaWQ9XCJlbGVtZW50XCIgcmVxdWlyZWQgdmFsdWUvPicpO1xuICAgIGV4cGVjdCgkKCcjZWxlbWVudCcpLnBhcnNsZXkoKS5pc1ZhbGlkKCkpLnRvLmJlKGZhbHNlKTtcbiAgfSk7XG4gIGFmdGVyRWFjaCgoKSA9PiB7XG4gICAgJCgnI2VsZW1lbnQsIC5wYXJzbGV5LWVycm9ycy1saXN0JykucmVtb3ZlKCk7XG4gIH0pO1xufSk7XG4iLCJpbXBvcnQgJCBmcm9tICdqcXVlcnknO1xuaW1wb3J0IEZvcm0gZnJvbSAnLi4vLi4vc3JjL3BhcnNsZXkvZm9ybSc7XG5pbXBvcnQgUGFyc2xleSBmcm9tICcuLi8uLi9zcmMvcGFyc2xleSc7XG5cbmRlc2NyaWJlKCdGb3JtJywgKCkgPT4ge1xuICBpdCgnc2hvdWxkIGJlIGEgZnVuY3Rpb24nLCAoKSA9PiB7XG4gICAgZXhwZWN0KEZvcm0pLnRvLmJlLmEoJ2Z1bmN0aW9uJyk7XG4gIH0pO1xuICBpdCgnc2hvdWxkIGJpbmQgcGFyc2xleUZpZWxkcyBjaGlsZHJlbicsICgpID0+IHtcbiAgICAkKCdib2R5JykuYXBwZW5kKFxuICAgICAgJzxmb3JtIGlkPVwiZWxlbWVudFwiPicgICAgICAgICAgICAgICAgICtcbiAgICAgICAgJzxpbnB1dCBpZD1cImZpZWxkMVwiIHR5cGU9XCJ0ZXh0XCIvPicgICtcbiAgICAgICAgJzxkaXYgaWQ9XCJmaWVsZDJcIj48L2Rpdj4nICAgICAgICAgICArXG4gICAgICAgICc8dGV4dGFyZWEgaWQ9XCJmaWVsZDJcIj48L3RleHRhcmVhPicgK1xuICAgICAgJzwvZm9ybT4nKTtcbiAgICB2YXIgcGFyc2xleUZvcm0gPSAkKCcjZWxlbWVudCcpLnBhcnNsZXkoKTtcbiAgICBleHBlY3QocGFyc2xleUZvcm0uZmllbGRzLmxlbmd0aCkudG8uYmUoMik7XG4gIH0pO1xuICBpdCgnc2hvdWxkIGJpbmQgcGFyc2xleUZpZWxkcyBjaGlsZHJlbiwgYW5kIG5vdCBleGNsdWRlZCBvbmVzJywgKCkgPT4ge1xuICAgICQoJ2JvZHknKS5hcHBlbmQoXG4gICAgICAnPGZvcm0gaWQ9XCJlbGVtZW50XCI+JyAgICAgICAgICAgICAgICAgK1xuICAgICAgICAnPGlucHV0IGlkPVwiZmllbGQxXCIgdHlwZT1cInRleHRcIi8+JyAgK1xuICAgICAgICAnPGRpdiBpZD1cImZpZWxkMlwiPjwvZGl2PicgICAgICAgICAgICtcbiAgICAgICAgJzx0ZXh0YXJlYSBpZD1cImZpZWxkMlwiPjwvdGV4dGFyZWE+JyArXG4gICAgICAgICc8ZGl2IGRhdGEtcGFyc2xleS12YWxpZGF0ZT48L2Rpdj4nICsgLy8gRm9ybSwgbm90IGEgdmFsaWQgY2hpbGRcbiAgICAgICAgJzxpbnB1dCBpZD1cImZpZWxkM1wiIGRpc2FibGVkIC8+JyAgICArIC8vIERpc2FibGVkLCBleGNsdWRlZCBieSBjdXN0b20gb3B0aW9ucyBiZWxvd1xuICAgICAgICAnPGlucHV0IGlkPVwiZmllbGQtZXhjbHVkZWRcIiBkYXRhLXBhcnNsZXktZXhjbHVkZWQ9XCJ0cnVlXCIgLz4nICAgICsgLy8gRXhjbHVkZWQgd2l0aCAnZXhjbHVkZWQnIG9wdGlvblxuICAgICAgICAnPGlucHV0IHR5cGU9XCJzdWJtaXRcIi8+JyAgICAgICAgICAgICsgLy8gRXhjbHVkZWQgZmllbGQsIG5vdCB2YWxpZFxuICAgICAgJzwvZm9ybT4nKTtcbiAgICB2YXIgcGFyc2xleUZvcm0gPSAkKCcjZWxlbWVudCcpLnBhcnNsZXkoe2V4Y2x1ZGVkOiAnW2Rpc2FibGVkXSwgaW5wdXRbdHlwZT1idXR0b25dLCBpbnB1dFt0eXBlPXN1Ym1pdF0sIGlucHV0W3R5cGU9cmVzZXRdJ30pO1xuICAgIGV4cGVjdChwYXJzbGV5Rm9ybS5maWVsZHMubGVuZ3RoKS50by5iZSgyKTtcbiAgfSk7XG4gIGl0KCdzaG91bGQgcHJvcGVybHkgcmVzZXQgZXhjbHVkZWQnLCAoKSA9PiB7XG4gICAgJCgnYm9keScpLmFwcGVuZChcbiAgICAgICc8Zm9ybSBpZD1cImVsZW1lbnRcIj4nICAgICAgICAgICAgICAgICArXG4gICAgICAgICc8aW5wdXQgaWQ9XCJmaWVsZFwiIHJlcXVpcmVkIGNsYXNzPVwiZm9vXCIvPicgICtcbiAgICAgICc8L2Zvcm0+Jyk7XG4gICAgdmFyIHBhcnNsZXlGb3JtID0gJCgnI2VsZW1lbnQnKS5wYXJzbGV5KCk7XG4gICAgcGFyc2xleUZvcm0udmFsaWRhdGUoKTtcbiAgICBleHBlY3QoJCgnLnBhcnNsZXktZXJyb3InKS5sZW5ndGgpLnRvLmJlKDEpO1xuICAgIHBhcnNsZXlGb3JtLm9wdGlvbnMuZXhjbHVkZWQgPSBcIi5mb29cIjtcbiAgICBwYXJzbGV5Rm9ybS52YWxpZGF0ZSgpO1xuICAgIGV4cGVjdCgkKCcucGFyc2xleS1lcnJvcicpLmxlbmd0aCkudG8uYmUoMCk7XG4gIH0pO1xuICBpdCgnc2hvdWxkIHByb3Blcmx5IGJpbmQgb3B0aW9ucyBmb3IgZm9ybSBhbmQgY2hpbGRyZW4gZmllbGRzJywgKCkgPT4ge1xuICAgICQoJ2JvZHknKS5hcHBlbmQoXG4gICAgICAnPGZvcm0gaWQ9XCJlbGVtZW50XCIgZGF0YS1wYXJzbGV5LXRyaWdnZXI9XCJjaGFuZ2VcIj4nICAgICAgICAgICAgICAgICArXG4gICAgICAgICc8aW5wdXQgaWQ9XCJmaWVsZDFcIiB0eXBlPVwidGV4dFwiIGRhdGEtcGFyc2xleS1yZXF1aXJlZD1cInRydWVcIiAvPicgICtcbiAgICAgICAgJzxkaXYgaWQ9XCJmaWVsZDJcIj48L2Rpdj4nICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICArXG4gICAgICAgICc8dGV4dGFyZWEgaWQ9XCJmaWVsZDNcIiBkYXRhLXBhcnNsZXktbm90Ymxhbms9XCJ0cnVlXCI+PC90ZXh0YXJlYT4nICArXG4gICAgICAnPC9mb3JtPicpO1xuICAgIHZhciBwYXJzbGV5Rm9ybSA9ICQoJyNlbGVtZW50JykucGFyc2xleSgpO1xuICAgIGV4cGVjdChwYXJzbGV5Rm9ybS5maWVsZHMubGVuZ3RoKS50by5iZSgyKTtcbiAgICBleHBlY3QoJCgnI2ZpZWxkMScpLnBhcnNsZXkoKS5vcHRpb25zLnRyaWdnZXIpLnRvLmJlKCdjaGFuZ2UnKTtcbiAgICBleHBlY3QoJCgnI2ZpZWxkMScpLnBhcnNsZXkoKS5vcHRpb25zLnJlcXVpcmVkKS50by5lcWwodHJ1ZSk7XG4gICAgZXhwZWN0KCQoJyNmaWVsZDEnKS5wYXJzbGV5KCkub3B0aW9ucy5ub3RibGFuaykudG8uYmUodW5kZWZpbmVkKTtcbiAgICBleHBlY3QoJCgnI2ZpZWxkMycpLnBhcnNsZXkoKS5vcHRpb25zLm5vdGJsYW5rKS50by5lcWwodHJ1ZSk7XG4gICAgZXhwZWN0KCQoJyNmaWVsZDMnKS5wYXJzbGV5KCkub3B0aW9ucy5yZXF1aXJlZCkudG8uYmUodW5kZWZpbmVkKTtcbiAgfSk7XG4gIGl0KCdzaG91bGQgcHJvcGVybHkgc3RvcmUgdmFsaWRhdGlvbiBzdGF0ZSBhZnRlciBgdmFsaWRhdGUoKWAnLCAoKSA9PiB7XG4gICAgJCgnYm9keScpLmFwcGVuZChcbiAgICAgICc8Zm9ybSBpZD1cImVsZW1lbnRcIiBkYXRhLXBhcnNsZXktdHJpZ2dlcj1cImNoYW5nZVwiPicgICAgICAgICAgICAgICAgICtcbiAgICAgICAgJzxpbnB1dCBpZD1cImZpZWxkMVwiIHR5cGU9XCJ0ZXh0XCIgZGF0YS1wYXJzbGV5LXJlcXVpcmVkPVwidHJ1ZVwiIC8+JyAgK1xuICAgICAgICAnPGRpdiBpZD1cImZpZWxkMlwiPjwvZGl2PicgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICtcbiAgICAgICAgJzx0ZXh0YXJlYSBpZD1cImZpZWxkM1wiIGRhdGEtcGFyc2xleS1ub3RibGFuaz1cInRydWVcIj48L3RleHRhcmVhPicgICtcbiAgICAgICc8L2Zvcm0+Jyk7XG4gICAgdmFyIHBhcnNsZXlGb3JtID0gJCgnI2VsZW1lbnQnKS5wYXJzbGV5KCk7XG4gICAgcGFyc2xleUZvcm0udmFsaWRhdGUoKTtcbiAgICBleHBlY3QocGFyc2xleUZvcm0udmFsaWRhdGlvblJlc3VsdCkudG8uYmUoZmFsc2UpO1xuICAgICQoJyNmaWVsZDEnKS52YWwoJ2ZvbycpO1xuICAgICQoJyNmaWVsZDMnKS52YWwoJ2ZvbycpO1xuICAgIGV4cGVjdChwYXJzbGV5Rm9ybS52YWxpZGF0ZSgpKS50by5iZSh0cnVlKTtcbiAgfSk7XG4gIGl0KCdzaG91bGQgaGFuZGxlIGdyb3VwIHZhbGlkYXRpb24nLCAoKSA9PiB7XG4gICAgJCgnYm9keScpLmFwcGVuZChcbiAgICAgICc8Zm9ybSBpZD1cImVsZW1lbnRcIj4nICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgK1xuICAgICAgICAnPGlucHV0IGlkPVwiZmllbGQxXCIgdHlwZT1cInRleHRcIiBkYXRhLXBhcnNsZXktZ3JvdXA9XCJmb29cIiBkYXRhLXBhcnNsZXktcmVxdWlyZWQ9XCJ0cnVlXCIgLz4nICArXG4gICAgICAgICc8ZGl2IGlkPVwiZmllbGQyXCI+PC9kaXY+JyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICtcbiAgICAgICAgJzx0ZXh0YXJlYSBpZD1cImZpZWxkM1wiIGRhdGEtcGFyc2xleS1yZXF1aXJlZD1cInRydWVcIj48L3RleHRhcmVhPicgICtcbiAgICAgICc8L2Zvcm0+Jyk7XG4gICAgdmFyIHBhcnNsZXlGb3JtID0gJCgnI2VsZW1lbnQnKS5wYXJzbGV5KCk7XG4gICAgZXhwZWN0KHBhcnNsZXlGb3JtLmlzVmFsaWQoKSkudG8uYmUoZmFsc2UpO1xuICAgICQoJyNmaWVsZDEnKS52YWwoJ3ZhbHVlJyk7XG4gICAgZXhwZWN0KHBhcnNsZXlGb3JtLmlzVmFsaWQoKSkudG8uYmUoZmFsc2UpO1xuICAgIGV4cGVjdChwYXJzbGV5Rm9ybS5pc1ZhbGlkKHtncm91cDogJ2Zvbyd9KSkudG8uYmUodHJ1ZSk7XG4gICAgJCgnI2ZpZWxkMycpLmF0dHIoJ2RhdGEtcGFyc2xleS1ncm91cCcsICdiYXInKTtcbiAgICBleHBlY3RXYXJuaW5nKCgpID0+IHtcbiAgICAgIGV4cGVjdChwYXJzbGV5Rm9ybS5pc1ZhbGlkKCdiYXInKSkudG8uYmUoZmFsc2UpO1xuICAgIH0pO1xuICB9KTtcbiAgaXQoJ3Nob3VsZCBoYW5kbGUgZ3JvdXAgdmFsaWRhdGlvbiB3aXRoIGNvbnRyb2xzIHdpdGggbXVsdGlwbGUgZ3JvdXAgbmFtZXMnLCAoKSA9PiB7XG4gICAgJCgnYm9keScpLmFwcGVuZChcbiAgICAgICc8Zm9ybSBpZD1cImVsZW1lbnRcIj4nICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgK1xuICAgICAgICAnPGlucHV0IGlkPVwiZmllbGQxXCIgdHlwZT1cInRleHRcIiBkYXRhLXBhcnNsZXktZ3JvdXA9XFwnW1wiZm9vXCIsIFwiYmFyXCJdXFwnIGRhdGEtcGFyc2xleS1yZXF1aXJlZD1cInRydWVcIiAvPicgICtcbiAgICAgICAgJzxpbnB1dCBpZD1cImZpZWxkMlwiIHR5cGU9XCJ0ZXh0XCIgZGF0YS1wYXJzbGV5LWdyb3VwPVxcJ1tcImJhclwiLCBcImJhelwiXVxcJyBkYXRhLXBhcnNsZXktcmVxdWlyZWQ9XCJ0cnVlXCIgLz4nICArXG4gICAgICAgICc8dGV4dGFyZWEgaWQ9XCJmaWVsZDNcIiBkYXRhLXBhcnNsZXktZ3JvdXA9XFwnW1wiYmF6XCIsIFwicXV4XCJdXFwnIGRhdGEtcGFyc2xleS1yZXF1aXJlZD1cInRydWVcIj48L3RleHRhcmVhPicgICtcbiAgICAgICc8L2Zvcm0+Jyk7XG4gICAgdmFyIHBhcnNsZXlGb3JtID0gJCgnI2VsZW1lbnQnKS5wYXJzbGV5KCk7XG4gICAgZXhwZWN0KHBhcnNsZXlGb3JtLmlzVmFsaWQoKSkudG8uYmUoZmFsc2UpO1xuICAgICQoJyNmaWVsZDEnKS52YWwoJ3ZhbHVlJyk7XG4gICAgJCgnI2ZpZWxkMicpLnZhbCgndmFsdWUnKTtcbiAgICBleHBlY3QocGFyc2xleUZvcm0uaXNWYWxpZCgpKS50by5iZShmYWxzZSk7XG4gICAgLy8gZ3JvdXAgbmFtZSBvbmx5IG9uIG9uZSByZXF1aXJlZCBmaWVsZCwgd2l0aCB2YWx1ZVxuICAgIGV4cGVjdChwYXJzbGV5Rm9ybS5pc1ZhbGlkKCdmb28nKSkudG8uYmUodHJ1ZSk7XG4gICAgLy8gZ3JvdXAgbmFtZSBvbiBtdWx0aXBsZSByZXF1aXJlZCBmaWVsZHMsIGFsbCB3aXRoIHZhbHVlc1xuICAgIGV4cGVjdChwYXJzbGV5Rm9ybS5pc1ZhbGlkKCdiYXInKSkudG8uYmUodHJ1ZSk7XG4gICAgLy8gZ3JvdXAgbmFtZSBvbiBtdWx0aXBsZSByZXF1aXJlZCBmaWVsZHMsIG9uZSBtaXNzaW5nIGEgdmFsdWVcbiAgICBleHBlY3QocGFyc2xleUZvcm0uaXNWYWxpZCgnYmF6JykpLnRvLmJlKGZhbHNlKTtcbiAgICAvLyBncm91cCBuYW1lIG9uIHNpbmdsZSByZXF1aXJlZCBmaWVsZCwgd2l0aG91dCB2YWx1ZVxuICAgIGV4cGVjdChwYXJzbGV5Rm9ybS5pc1ZhbGlkKCdxdXgnKSkudG8uYmUoZmFsc2UpO1xuICB9KTtcbiAgaXQoJ3Nob3VsZCBzZW5kIHN1Ym1pdCBidXR0b24gdmFsdWVzLCBldmVuIGZvciBhc3luYyB2YWxpZGF0aW9ucycsICgpID0+IHtcbiAgICB2YXIgZGVmZXJyZWQgPSBudWxsO1xuICAgIHdpbmRvdy5QYXJzbGV5LmFkZFZhbGlkYXRvcignY3VzdG9tJywgKCkgPT4ge1xuICAgICAgZGVmZXJyZWQgPSAkLkRlZmVycmVkKCk7XG4gICAgICByZXR1cm4gZGVmZXJyZWQucHJvbWlzZSgpO1xuICAgIH0pO1xuXG4gICAgJCgnYm9keScpLmFwcGVuZChcbiAgICAgICc8Zm9ybSBpZD1cImVsZW1lbnRcIj4nICAgICAgICAgICAgICAgICArXG4gICAgICAgICc8aW5wdXQgaWQ9XCJmaWVsZDFcIiB0eXBlPVwidGV4dFwiIG5hbWU9XCJuaWNrXCIgZGF0YS1wYXJzbGV5LWN1c3RvbSBkYXRhLXBhcnNsZXktcmVxdWlyZWQgLz4nICArXG4gICAgICAgICc8ZGl2IGlkPVwiZmllbGQyXCIgbmFtZT1cImNvbW1lbnRcIj48L2Rpdj4nICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICArXG4gICAgICAgICc8aW5wdXQgdHlwZT1cInN1Ym1pdFwiIG5hbWU9XCJmb29cIiB2YWx1ZT1cImJhclwiIC8+JyAgK1xuICAgICAgICAnPGlucHV0IHR5cGU9XCJzdWJtaXRcIiBuYW1lPVwiZm9vXCIgdmFsdWU9XCJvdGhlclwiIC8+JyAgK1xuICAgICAgICAnPGJ1dHRvbiBuYW1lPVwiZm9vXCIgdmFsdWU9XCJidXRcIj5vazwvYnV0dG9uPicgK1xuICAgICAgJzwvZm9ybT4nKTtcbiAgICB2YXIgcGFyc2xleUZvcm0gPSAkKCcjZWxlbWVudCcpLnBhcnNsZXkoKTtcblxuICAgICQoJyNlbGVtZW50IGlucHV0Omxhc3QnKS5jbGljaygpO1xuICAgIC8vIEZvcm0gc2hvdWxkIG5vdCBiZSBzdWJtaXR0ZWQgYXQgdGhpcyBwb2ludCwgY296IGZpZWxkIGlzIHJlcXVpcmVkXG4gICAgZXhwZWN0KGRlZmVycmVkKS50by5iZShudWxsKTtcblxuICAgICQoJyNmaWVsZDEnKS52YWwoJ3NvbWV0aGluZycpO1xuICAgIHZhciB2YWx1ZXMgPSBbXTtcbiAgICAkKCcjZWxlbWVudCcpLm9uKCdzdWJtaXQnLCBldnQgPT4ge1xuICAgICAgZXhwZWN0KGV2dC5wYXJzbGV5KS50by5iZSh0cnVlKTtcbiAgICAgIHZhbHVlcy5wdXNoKCQoJ2Zvcm0gaW5wdXRbdHlwZSE9c3VibWl0XVtuYW1lPVwiZm9vXCJdJykudmFsKCkpO1xuICAgICAgZXZ0LnByZXZlbnREZWZhdWx0KCk7XG4gICAgfSk7XG5cbiAgICAkKCcjZWxlbWVudCBidXR0b24nKS5jbGljaygpO1xuICAgIGV4cGVjdCh2YWx1ZXMpLnRvLmVxbChbXSk7XG4gICAgZGVmZXJyZWQucmVzb2x2ZSgpO1xuICAgIGV4cGVjdCh2YWx1ZXMpLnRvLmVxbChbJ2J1dCddKTtcblxuICAgICQoJyNlbGVtZW50IGlucHV0W3ZhbHVlPVwib3RoZXJcIl0nKS5jbGljaygpO1xuICAgIGRlZmVycmVkLnJlc29sdmUoKTtcbiAgICBleHBlY3QodmFsdWVzKS50by5lcWwoWydidXQnLCAnb3RoZXInXSk7XG5cbiAgICAkKCcjZWxlbWVudCcpLnN1Ym1pdCgpOyAvLyBTaW1pbGFyIHRvIHByZXNzaW5nICdlbnRlcidcbiAgICBkZWZlcnJlZC5yZXNvbHZlKCk7XG4gICAgZXhwZWN0KHZhbHVlcykudG8uZXFsKFsnYnV0JywgJ290aGVyJywgJ2JhciddKTtcblxuICAgIHdpbmRvdy5QYXJzbGV5LnJlbW92ZVZhbGlkYXRvcignY3VzdG9tJyk7XG4gIH0pO1xuICBpdCgnc2hvdWxkIG5vdCB2YWxpZGF0ZSB3aGVuIHRyaWdnZXJlZCBieSBhIGJ1dHRvbiB3aXRoIGZvcm1ub3ZhbGlkYXRlJywgKCkgPT4ge1xuICAgIHZhciAkZm9ybSA9ICQoJzxmb3JtIGlkPVwiZWxlbWVudFwiPjxpbnB1dCB0eXBlPVwic3RyaW5nXCIgcmVxdWlyZWQgLz48aW5wdXQgdHlwZT1cInN1Ym1pdFwiIGZvcm1ub3ZhbGlkYXRlIC8+PGZvcm0+JykuYXBwZW5kVG8oJCgnYm9keScpKTtcbiAgICAkZm9ybS5vbignc3VibWl0JywgZSA9PiB7XG4gICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgfSk7XG5cbiAgICB2YXIgY2FsbGJhY2tzID0gW107XG4gICAgJC5lYWNoKFsndmFsaWRhdGUnLCAnZXJyb3InLCAnc3VjY2VzcycsICd2YWxpZGF0ZWQnLCAnc3VibWl0J10sIChpLCBjYikgPT4ge1xuICAgICAgJGZvcm0ucGFyc2xleSgpLm9uKCdmb3JtOicgKyBjYiwgKCkgPT4ge1xuICAgICAgICBjYWxsYmFja3MucHVzaChjYik7XG4gICAgICB9KTtcbiAgICB9KTtcbiAgICAkZm9ybS5wYXJzbGV5KCk7XG4gICAgJGZvcm0uZmluZCgnaW5wdXRbdHlwZT1zdWJtaXRdJykuY2xpY2soKTtcbiAgICBleHBlY3QoY2FsbGJhY2tzLmpvaW4oKSkudG8uYmUoJycpO1xuICB9KTtcblxuICBpdCgnc2hvdWxkIGhhdmUgYSBmb3JjZSBvcHRpb24gZm9yIHZhbGlkYXRlIGFuZCBpc1ZhbGlkIG1ldGhvZHMnLCAoKSA9PiB7XG4gICAgJCgnYm9keScpLmFwcGVuZChcbiAgICAgICc8Zm9ybSBpZD1cImVsZW1lbnRcIj4nICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICArXG4gICAgICAgICc8aW5wdXQgaWQ9XCJmaWVsZDFcIiB0eXBlPVwiZW1haWxcIiAvPicgICAgICAgICAgICAgICAgICArXG4gICAgICAgICc8aW5wdXQgaWQ9XCJmaWVsZDNcIiBkYXRhLXBhcnNsZXktbm90Ymxhbms9XCJ0cnVlXCIgLz4nICArXG4gICAgICAnPC9mb3JtPicpO1xuICAgIGV4cGVjdCgkKCcjZWxlbWVudCcpLnBhcnNsZXkoKS5pc1ZhbGlkKCkpLnRvLmJlKHRydWUpO1xuICAgIGV4cGVjdCgkKCcjZWxlbWVudCcpLnBhcnNsZXkoKS5pc1ZhbGlkKHtmb3JjZTogdHJ1ZX0pKS50by5iZShmYWxzZSk7XG4gICAgZXhwZWN0KCQoJyNlbGVtZW50JykucGFyc2xleSgpLnZhbGlkYXRlKCkpLnRvLmJlKHRydWUpO1xuICAgIGV4cGVjdFdhcm5pbmcoKCkgPT4ge1xuICAgICAgZXhwZWN0KCQoJyNlbGVtZW50JykucGFyc2xleSgpLnZhbGlkYXRlKHVuZGVmaW5lZCwgdHJ1ZSkpLnRvLmJlKGZhbHNlKTtcbiAgICB9KTtcbiAgfSk7XG4gIGl0KCdzaG91bGQgcHJvcGVybHkgYmluZCBkeW5hbWljYWxseSBhZGRlZCBmaWVsZHMnLCAoKSA9PiB7XG4gICAgJCgnYm9keScpLmFwcGVuZCgnPGZvcm0gaWQ9XCJlbGVtZW50XCIgZGF0YS1wYXJzbGV5LXRyaWdnZXI9XCJjaGFuZ2VcIj48L2Zvcm0+Jyk7XG4gICAgJCgnI2VsZW1lbnQnKS5hcHBlbmQoJzxpbnB1dCB0eXBlPVwiZW1haWxcIiBpZD1cImVtYWlsXCIgcmVxdWlyZWQgLz4nKTtcbiAgICB2YXIgZmllbGRJbnN0YW5jZSA9ICQoJyNlbWFpbCcpLnBzbHkoKTtcbiAgICBleHBlY3QoZmllbGRJbnN0YW5jZS5fX2NsYXNzX18pLnRvLmJlKCdGaWVsZCcpO1xuICAgIHZhciBmb3JtSW5zdGFuY2UgPSAkKCcjZWxlbWVudCcpLnBzbHkoKTtcbiAgICAvLyBmb3JtIGNvcmVjdGx5IGhhdmUgaXRzIGZpZWxkLCBhbmQgZmllbGQgaGF2ZSBmaW5hbHkgaXRzIHBhcmVudCBmb3JtXG4gICAgZXhwZWN0KGZvcm1JbnN0YW5jZS5maWVsZHNbMF0uJGVsZW1lbnQuYXR0cignaWQnKSkudG8uYmUoJ2VtYWlsJyk7XG4gICAgZXhwZWN0KGZpZWxkSW5zdGFuY2UucGFyZW50Ll9fY2xhc3NfXykudG8uYmUoJ0Zvcm0nKTtcbiAgfSk7XG4gIGl0KCdzaG91bGQgZmlyZSB0aGUgcmlnaHQgY2FsbGJhY2tzIGluIHRoZSByaWdodCBvcmRlcicsICgpID0+IHtcbiAgICB2YXIgJGZvcm0gPSAkKCc8Zm9ybSBpZD1cImVsZW1lbnRcIj48aW5wdXQgdHlwZT1cInN0cmluZ1wiIHJlcXVpcmVkIC8+PGZvcm0+JykuYXBwZW5kVG8oJCgnYm9keScpKTtcbiAgICAkZm9ybS5vbignc3VibWl0JywgZSA9PiB7XG4gICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgfSk7XG5cbiAgICB2YXIgY2FsbGJhY2tzID0gW107XG4gICAgJC5lYWNoKFsndmFsaWRhdGUnLCAnZXJyb3InLCAnc3VjY2VzcycsICd2YWxpZGF0ZWQnLCAnc3VibWl0J10sIChpLCBjYikgPT4ge1xuICAgICAgJGZvcm0ucGFyc2xleSgpLm9uKCdmb3JtOicgKyBjYiwgKCkgPT4ge1xuICAgICAgICBjYWxsYmFja3MucHVzaChjYik7XG4gICAgICB9KTtcbiAgICB9KTtcbiAgICAkZm9ybS5wYXJzbGV5KCk7XG4gICAgJGZvcm0uc3VibWl0KCk7XG4gICAgJGZvcm0uZmluZCgnaW5wdXQnKS52YWwoJ0hlbGxvJyk7XG4gICAgJGZvcm0uc3VibWl0KCk7XG4gICAgZXhwZWN0KGNhbGxiYWNrcy5qb2luKCkpLnRvLmJlKCd2YWxpZGF0ZSxlcnJvcix2YWxpZGF0ZWQsdmFsaWRhdGUsc3VjY2Vzcyx2YWxpZGF0ZWQsc3VibWl0Jyk7XG4gIH0pO1xuICBpdCgnc2hvdWxkIGZpcmUgXCJmb3JtOnZhbGlkYXRlLnBhcnNsZXlcIiB0byBnaXZlIHRoZSBvcHBvcnR1bml0eSBmb3IgY2hhbmdlcyBiZWZvcmUgdmFsaWRhdGlvbiBvY2N1cnMnLCAoKSA9PiB7XG4gICAgdmFyICRmb3JtID0gJCgnPGZvcm0gaWQ9XCJlbGVtZW50XCI+PGlucHV0IHR5cGU9XCJzdHJpbmdcIiByZXF1aXJlZCAvPjxmb3JtPicpLmFwcGVuZFRvKCQoJ2JvZHknKSk7XG4gICAgJGZvcm0ucGFyc2xleSgpLm9uKCdmb3JtOnZhbGlkYXRlJywgZnVuY3Rpb24gKCkge1xuICAgICAgdGhpcy4kZWxlbWVudC5maW5kKCdpbnB1dCcpLnJlbW92ZSgpO1xuICAgIH0pO1xuICAgIGV4cGVjdCgkZm9ybS5wYXJzbGV5KCkudmFsaWRhdGUoKSkudG8uYmUodHJ1ZSk7XG4gIH0pO1xuICBpdCgnc2hvdWxkIHN0b3AgZXZlbnQgcHJvcGFnYXRpb24gb24gZm9ybSBzdWJtaXQnLCBkb25lID0+IHtcbiAgICAkKCdib2R5JykuYXBwZW5kKCc8Zm9ybSBpZD1cImVsZW1lbnRcIj48aW5wdXQgdHlwZT1cInRleHRcIiByZXF1aXJlZC8+PC9mb3JtPicpO1xuICAgIHZhciBwYXJzbGV5SW5zdGFuY2UgPSAkKCcjZWxlbWVudCcpLnBhcnNsZXkoKVxuICAgIC5vbignZm9ybTp2YWxpZGF0ZWQnLCAoKSA9PiB7XG4gICAgICBkb25lKCk7XG4gICAgfSk7XG4gICAgJCgnI2VsZW1lbnQnKS5vbignc3VibWl0JywgKCkgPT4ge1xuICAgICAgLy8gSXQgc291bGQgbmV2ZXIgcGFzcyBoZXJlIVxuICAgICAgZXhwZWN0KHRydWUpLnRvLmJlKGZhbHNlKTtcbiAgICB9KVxuICAgIC5zdWJtaXQoKTtcbiAgfSk7XG5cbiAgaXQoJ3Nob3VsZCBoYXZlIHRoZSB2YWxpZGF0aW9uUmVzdWx0IGJlIGNoYW5nZWFibGUnLCAoKSA9PiB7XG4gICAgdmFyIHN1Ym1pdHRlZCA9IGZhbHNlO1xuICAgICQoJzxmb3JtIGlkPVwiZWxlbWVudFwiPjwvZm9ybT4nKVxuICAgIC5hcHBlbmRUbygnYm9keScpXG4gICAgLnBhcnNsZXkoKVxuICAgIC5vbignZm9ybTpzdWNjZXNzJywgZm9ybSA9PiB7XG4gICAgICBmb3JtLnZhbGlkYXRpb25SZXN1bHQgPSBmYWxzZTtcbiAgICB9KVxuICAgIC5vbignZm9ybTplcnJvcicsIGZvcm0gPT4ge1xuICAgICAgZm9ybS52YWxpZGF0aW9uUmVzdWx0ID0gdHJ1ZTtcbiAgICB9KVxuICAgIC5vbignZm9ybTpzdWJtaXQnLCBmb3JtID0+IHtcbiAgICAgIHN1Ym1pdHRlZCA9IHRydWU7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfSk7XG4gICAgJCgnI2VsZW1lbnQnKS5zdWJtaXQoKTtcbiAgICBleHBlY3Qoc3VibWl0dGVkKS50by5iZShmYWxzZSk7XG4gICAgJCgnI2VsZW1lbnQnKS5hcHBlbmQoJzxpbnB1dCByZXF1aXJlZD4nKS5zdWJtaXQoKTtcbiAgICBleHBlY3Qoc3VibWl0dGVkKS50by5iZSh0cnVlKTtcbiAgfSk7XG5cbiAgaXQoJ3Nob3VsZCBmaXJlIGZvcm06c3VibWl0LmV2ZW50IGFuZCBiZSBpbnRlcnJ1cHRhYmxlIHdoZW4gdmFsaWRhdGVkJywgZG9uZSA9PiB7XG4gICAgJCgnPGZvcm0gaWQ9XCJlbGVtZW50XCI+PC9mb3JtPicpXG4gICAgLmFwcGVuZFRvKCdib2R5JylcbiAgICAucGFyc2xleSgpXG4gICAgLm9uKCdmb3JtOnN1Ym1pdCcsICgpID0+IHtcbiAgICAgIGRvbmUoKTtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9KTtcbiAgICAkKCcjZWxlbWVudCcpLnN1Ym1pdCgpO1xuICB9KTtcblxuICBpdCgnc2hvdWxkIGRlcHJlY2F0ZSBpbnRlcnJ1cHRpb25zIHdpdGggc3VibWl0RXZlbnQucHJldmVudERlZmF1bHQoKScsICgpID0+IHtcbiAgICBleHBlY3RXYXJuaW5nKCgpID0+IHtcbiAgICAgICQoJzxmb3JtIGlkPVwiZWxlbWVudFwiPjwvZm9ybT4nKVxuICAgICAgLmFwcGVuZFRvKCdib2R5JylcbiAgICAgIC5wYXJzbGV5KClcbiAgICAgIC5vbignZm9ybTp2YWxpZGF0ZScsIChmb3JtKSA9PiB7XG4gICAgICAgIGZvcm0uc3VibWl0RXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgIH0pXG4gICAgICAub24oJ2Zvcm06c3VibWl0JywgKGZvcm0pID0+IHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdGb3JtIHNob3VsZCBub3QgaGF2ZSBiZWVuIHN1Ym1pdHRlZCcpO1xuICAgICAgfSk7XG4gICAgICAkKCcjZWxlbWVudCcpLnN1Ym1pdCgpO1xuICAgIH0pO1xuICB9KTtcblxuICBpdCgnc2hvdWxkIGZpcmUgZmllbGQ6cmVzZXQgZXZlbnQgaWYgZmllbGRzIGFyZSByZW1vdmVkIG9yIGV4Y2x1ZGVkJywgKCkgPT4ge1xuICAgIHZhciBwYXJzbGV5SW5zdGFuY2U7XG4gICAgdmFyIHN0ZXBzID0gW107XG4gICAgdmFyIHN0ZXAgPSAnaW5pdCc7XG4gICAgdmFyIHBhcnNsZXlGb3JtID0gJCgnPGZvcm0gaWQ9XCJlbGVtZW50XCI+PGlucHV0IHR5cGU9XCJ0ZXh0XCIgcmVxdWlyZWQ+PC9mb3JtPicpXG4gICAgICAgIC5hcHBlbmRUbygnYm9keScpXG4gICAgICAgIC5wYXJzbGV5KClcbiAgICAgICAgLm9uKCdmaWVsZDpyZXNldCcsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICBzdGVwcy5wdXNoKCdmb3JtOiAnICsgc3RlcCk7XG4gICAgICAgICAgZXhwZWN0KHRoaXMpLnRvLmJlKHBhcnNsZXlJbnN0YW5jZSk7XG4gICAgICAgIH0pXG4gICAgICAgIDtcbiAgICBwYXJzbGV5SW5zdGFuY2UgPSAkKCcjZWxlbWVudCBpbnB1dCcpLnBhcnNsZXkoKVxuICAgICAgICAub24oJ2ZpZWxkOnJlc2V0JywgZnVuY3Rpb24gKCkge1xuICAgICAgICAgIHN0ZXBzLnB1c2goJ2ZpZWxkOiAnICsgc3RlcCk7XG4gICAgICAgICAgZXhwZWN0KHRoaXMpLnRvLmJlKHBhcnNsZXlJbnN0YW5jZSk7XG4gICAgICAgIH0pO1xuXG4gICAgcGFyc2xleUZvcm0udmFsaWRhdGUoKTtcbiAgICBwYXJzbGV5Rm9ybS52YWxpZGF0ZSgpO1xuICAgIHBhcnNsZXlGb3JtLm9wdGlvbnMuZXhjbHVkZWQgPSAnW3JlcXVpcmVkXSc7XG4gICAgc3RlcCA9ICdleGNsdWRlZCc7XG4gICAgcGFyc2xleUZvcm0udmFsaWRhdGUoKTtcbiAgICBwYXJzbGV5Rm9ybS52YWxpZGF0ZSgpO1xuICAgIHBhcnNsZXlGb3JtLm9wdGlvbnMuZXhjbHVkZWQgPSAnJztcbiAgICBzdGVwID0gJ25vdCBleGNsdWRlZCc7XG4gICAgcGFyc2xleUZvcm0udmFsaWRhdGUoKTtcbiAgICBwYXJzbGV5Rm9ybS52YWxpZGF0ZSgpO1xuICAgIHZhciAkaSA9ICQoJyNlbGVtZW50IGlucHV0JykuZGV0YWNoKCk7XG4gICAgc3RlcCA9ICdkZXRhY2hlZCc7XG4gICAgcGFyc2xleUZvcm0udmFsaWRhdGUoKTtcbiAgICBwYXJzbGV5Rm9ybS52YWxpZGF0ZSgpO1xuICAgICRpLmFwcGVuZFRvKCdmb3JtJyk7XG4gICAgc3RlcCA9ICdyZWF0dGFjaGVkJztcbiAgICBwYXJzbGV5Rm9ybS52YWxpZGF0ZSgpO1xuICAgIHBhcnNsZXlGb3JtLnZhbGlkYXRlKCk7XG4gICAgJGkucmVtb3ZlKCk7XG4gICAgc3RlcCA9ICdyZW1vdmVkJztcbiAgICBwYXJzbGV5Rm9ybS52YWxpZGF0ZSgpO1xuICAgIHBhcnNsZXlGb3JtLnZhbGlkYXRlKCk7XG4gICAgZXhwZWN0KHN0ZXBzKS50by5lcWwoWydmaWVsZDogZXhjbHVkZWQnLCAnZm9ybTogZXhjbHVkZWQnLCAnZmllbGQ6IGRldGFjaGVkJywgJ2Zvcm06IGRldGFjaGVkJywgJ2ZpZWxkOiByZW1vdmVkJywgJ2Zvcm06IHJlbW92ZWQnXSk7XG4gIH0pO1xuXG4gIGl0KCdzaG91bGQgaGFuZGxlIHZhbGlkYXRvcnMgcmV0dXJuaW5nIHByb21pc2VzJywgZG9uZSA9PiB7XG4gICAgdmFyIGNhbGxlZCA9IDA7XG4gICAgdmFyIHNob3VsZFN1Ym1pdCA9IGZhbHNlO1xuICAgIHZhciBmb3JtID0gJCgnPGZvcm0gaWQ9XCJlbGVtZW50XCI+PGlucHV0IGRhdGEtcGFyc2xleS1jdXN0b20gdmFsdWU9XCJ4XCIvPjwvZm9ybT4nKVxuICAgIC5hcHBlbmRUbygnYm9keScpXG4gICAgLnBhcnNsZXkoKTtcbiAgICB2YXIgZGVmZXJyZWQ7XG4gICAgd2luZG93LlBhcnNsZXkuYWRkVmFsaWRhdG9yKCdjdXN0b20nLCAoKSA9PiB7XG4gICAgICBjYWxsZWQrKztcbiAgICAgIGRlZmVycmVkID0gJC5EZWZlcnJlZCgpO1xuICAgICAgcmV0dXJuIGRlZmVycmVkLnByb21pc2UoKTtcbiAgICB9KTtcblxuICAgICQoJyNlbGVtZW50Jykub24oJ3N1Ym1pdCcsIGV2dCA9PiB7XG4gICAgICBldnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgIGV4cGVjdChldnQucGFyc2xleSkudG8uYmUodHJ1ZSk7IC8vIFNhbml0eSBjaGVja1xuICAgICAgZXhwZWN0KHNob3VsZFN1Ym1pdCkudG8uYmUodHJ1ZSk7XG4gICAgICB3aW5kb3cuUGFyc2xleS5yZW1vdmVWYWxpZGF0b3IoJ2N1c3RvbScpO1xuICAgICAgZG9uZSgpO1xuICAgIH0pO1xuICAgICQoJyNlbGVtZW50Jykuc3VibWl0KCk7XG4gICAgZXhwZWN0KGNhbGxlZCkudG8uZXFsKDEpO1xuICAgIGRlZmVycmVkLnJlamVjdCgpO1xuXG4gICAgdmFyIHByb21pc2UgPSBmb3JtLndoZW5WYWxpZGF0ZSgpO1xuICAgIGV4cGVjdChjYWxsZWQpLnRvLmVxbCgyKTtcbiAgICBleHBlY3QocHJvbWlzZS5zdGF0ZSgpKS50by5lcWwoJ3BlbmRpbmcnKTtcbiAgICBkZWZlcnJlZC5yZWplY3QoKTtcbiAgICBleHBlY3QocHJvbWlzZS5zdGF0ZSgpKS50by5lcWwoJ3JlamVjdGVkJyk7XG5cbiAgICAkKCcjZWxlbWVudCcpLnN1Ym1pdCgpO1xuICAgIGV4cGVjdChjYWxsZWQpLnRvLmVxbCgzKTtcbiAgICBzaG91bGRTdWJtaXQgPSB0cnVlO1xuICAgIGRlZmVycmVkLnJlc29sdmUoKTtcbiAgfSk7XG5cbiAgaXQoJ3Nob3VsZCBoYW5kbGUgcHJpb3JpdHkgY29ycmVjdGx5JywgKCkgPT4ge1xuICAgIHZhciBjYWxscyA9IFtdO1xuICAgIHZhciBmb3JtID0gJCgnPGZvcm0gaWQ9XCJlbGVtZW50XCI+PGlucHV0IHZhbHVlPVwiMFwiIGRhdGEtcGFyc2xleS1jdXN0b20xIGRhdGEtcGFyc2xleS1jdXN0b20yIGRhdGEtcGFyc2xleS1jdXN0b20zIGRhdGEtcGFyc2xleS1jdXN0b200Lz48L2Zvcm0+JylcbiAgICAuYXBwZW5kVG8oJ2JvZHknKVxuICAgIC5wYXJzbGV5KClcbiAgICAgIC5vbignZm9ybTpzdWJtaXQnLCBldnQgPT4geyByZXR1cm4gZmFsc2U7IH0pO1xuICAgIGZvciAoY29uc3QgaSBvZiBbMSwgMiwgMywgNF0pXG4gICAgICB3aW5kb3cuUGFyc2xleS5hZGRWYWxpZGF0b3IoYGN1c3RvbSR7aX1gLCB7XG4gICAgICAgIHByaW9yaXR5OiBpIDw9IDIgPyAxMDAgOiAxMCAtIGksXG4gICAgICAgIHZhbGlkYXRlTnVtYmVyOiBmdW5jdGlvbih2YWx1ZSwgcmVxdWlyZW1lbnQpIHtcbiAgICAgICAgICBjYWxscy5wdXNoKGkpO1xuICAgICAgICAgIHJldHVybiB2YWx1ZSA+IGk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgICQoJyNlbGVtZW50Jykuc3VibWl0KCk7XG4gICAgJCgnI2VsZW1lbnQgaW5wdXQnKS52YWwoJzMnKTtcbiAgICAkKCcjZWxlbWVudCcpLnN1Ym1pdCgpO1xuICAgICQoJyNlbGVtZW50IGlucHV0JykudmFsKCc1Jyk7XG4gICAgJCgnI2VsZW1lbnQnKS5zdWJtaXQoKTtcbiAgICBleHBlY3QoY2FsbHMpLnRvLmVxbChbMiwgMSwgMiwgMSwgMywgMiwgMSwgMywgNF0pO1xuICAgIGZvciAoY29uc3QgaSBvZiBbMSwgMiwgMywgNF0pXG4gICAgICB3aW5kb3cuUGFyc2xleS5yZW1vdmVWYWxpZGF0b3IoYGN1c3RvbSR7aX1gKTtcblxuICB9KTtcblxuICBpdCgnc2hvdWxkIHJlZnJlc2gnLCAoKSA9PiB7XG4gICAgJCgnYm9keScpLmFwcGVuZChcbiAgICAgICc8Zm9ybSBpZD1cImVsZW1lbnRcIj4nICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgK1xuICAgICAgICAnPGlucHV0IHJlcXVpcmVkIC8+JyAgK1xuICAgICAgJzwvZm9ybT4nKTtcbiAgICB2YXIgcGFyc2xleUZvcm0gPSAkKCcjZWxlbWVudCcpLnBhcnNsZXkoKTtcbiAgICBwYXJzbGV5Rm9ybS52YWxpZGF0ZSgpO1xuICAgIGV4cGVjdCgkKCcucGFyc2xleS1lcnJvcicpLmxlbmd0aCkudG8uYmUoMSk7XG4gICAgcGFyc2xleUZvcm0ub3B0aW9ucy5leGNsdWRlZCA9IFwiaW5wdXRcIjtcbiAgICBwYXJzbGV5Rm9ybS5yZWZyZXNoKCk7XG4gICAgZXhwZWN0KCQoJy5wYXJzbGV5LWVycm9yJykubGVuZ3RoKS50by5iZSgwKTtcbiAgfSk7XG5cbiAgYWZ0ZXJFYWNoKCgpID0+IHtcbiAgICAkKCcjZWxlbWVudCcpLnJlbW92ZSgpO1xuICB9KTtcbn0pO1xuIiwiaW1wb3J0ICQgZnJvbSAnanF1ZXJ5JztcbmltcG9ydCBQYXJzbGV5IGZyb20gJy4uLy4uL3NyYy9wYXJzbGV5JztcblxuZGVzY3JpYmUoJ011bHRpcGxlJywgKCkgPT4ge1xuICBpdCgnc2hvdWxkIG5vdCB0aHJvdyBlcnJvcnMgd2l0aCBtdWx0aXBsZSBpdGVtcyB3aXRoIHdlaXJkIGF1dG9tYXRlZCBnZW5lcmF0ZWQgbmFtZXMnLCAoKSA9PiB7XG4gICAgJCgnYm9keScpLmFwcGVuZChcbiAgICAgICc8Zm9ybSBpZD1cImVsZW1lbnRcIj4nICtcbiAgICAgICAgJzxpbnB1dCB0eXBlPVwiY2hlY2tib3hcIiBuYW1lPVwiaGVsbG9bXVwiIGlkPVwiY2hlY2sxXCIgdmFsdWU9XCIxXCIgLz4nICArXG4gICAgICAgICc8aW5wdXQgdHlwZT1cImNoZWNrYm94XCIgbmFtZT1cInt7IGhlbGxvIH19XCIgaWQ9XCJjaGVjazJcIiB2YWx1ZT1cIjJcIiAvPicgICtcbiAgICAgICAgJzxpbnB1dCB0eXBlPVwiY2hlY2tib3hcIiBuYW1lPVwiJGhlbGxvJFwiIGlkPVwiY2hlY2szXCIgdmFsdWU9XCIzXCIgLz4nICArXG4gICAgICAgICc8aW5wdXQgdHlwZT1cImNoZWNrYm94XCIgbmFtZT1cImhlbGxvIHdvcmxkWyB4IF1cIiBpZD1cImNoZWNrNFwiIHZhbHVlPVwiNFwiIC8+JyAgK1xuICAgICAgICAnPGlucHV0IHR5cGU9XCJjaGVja2JveFwiIHZhbHVlPVwiZm9vXCIgLz4nICtcbiAgICAgICc8L2Zvcm0+Jyk7XG4gICAgZXhwZWN0V2FybmluZygoKSA9PiB7XG4gICAgICAkKCcjZWxlbWVudCcpLnBhcnNsZXkoKTtcbiAgICB9KTtcbiAgfSk7XG4gIGl0KCdzaG91bGQgcmV0dXJuIHNhbWUgTXVsdGlwbGUgaW5zdGFuY2UgZm9yIGVhY2ggZmllbGQgaW4gc2FtZSBtdWx0aXBsZSBncm91cCwgYW5kIGl0IHNob3VsZCBjb3VudCBhcyBvbmUgZmllbGQgaW4gZm9ybScsICgpID0+IHtcbiAgICAkKCdib2R5JykuYXBwZW5kKFxuICAgICAgJzxmb3JtIGlkPVwiZWxlbWVudFwiID4nICtcbiAgICAgICAgJzxpbnB1dCB0eXBlPVwiY2hlY2tib3hcIiBuYW1lPVwiY2hlY2tcIiBpZD1cImNoZWNrMVwiIHZhbHVlPVwiMVwiIC8+JyAgK1xuICAgICAgICAnPGlucHV0IHR5cGU9XCJjaGVja2JveFwiIG5hbWU9XCJjaGVja1wiIGlkPVwiY2hlY2syXCIgdmFsdWU9XCIyXCIgLz4nICArXG4gICAgICAgICc8aW5wdXQgdHlwZT1cImNoZWNrYm94XCIgbmFtZT1cImNoZWNrXCIgaWQ9XCJjaGVjazNcIiB2YWx1ZT1cIjNcIiAvPicgICtcbiAgICAgICc8L2Zvcm0+Jyk7XG4gICAgdmFyIHBhcnNsZXlNdWx0aXBsZUluc3RhbmNlID0gJCgnI2NoZWNrMScpLnBhcnNsZXkoKTtcbiAgICBleHBlY3QoJCgnI2NoZWNrMicpLnBhcnNsZXkoKS5fX2lkX18pLnRvLmJlKHBhcnNsZXlNdWx0aXBsZUluc3RhbmNlLl9faWRfXyk7XG4gICAgZXhwZWN0KCQoJyNjaGVjazMnKS5wYXJzbGV5KCkuX19pZF9fKS50by5iZShwYXJzbGV5TXVsdGlwbGVJbnN0YW5jZS5fX2lkX18pO1xuICAgIGV4cGVjdChwYXJzbGV5TXVsdGlwbGVJbnN0YW5jZS4kZWxlbWVudHMubGVuZ3RoKS50by5iZSgzKTtcbiAgICBleHBlY3QoJCgnI2VsZW1lbnQnKS5wYXJzbGV5KCkuZmllbGRzLmxlbmd0aCkudG8uYmUoMSk7XG4gIH0pO1xuICBpdCgnc2hvdWxkIGF1dG8gYWRkIGEgZGF0YS1wYXJzbGV5LW11bHRpcGxlIGF0dHJpYnV0ZSB0byBlYWNoIGNvcnJlY3RseSBiaW5kZWQgbXVsdGlwbGUgaW5wdXQnLCAoKSA9PiB7XG4gICAgJCgnYm9keScpLmFwcGVuZChcbiAgICAgICc8Zm9ybSBpZD1cImVsZW1lbnRcIiA+JyArXG4gICAgICAgICc8aW5wdXQgdHlwZT1cImNoZWNrYm94XCIgbmFtZT1cImNoZWNrXCIgaWQ9XCJjaGVjazFcIiB2YWx1ZT1cIjFcIiAvPicgICtcbiAgICAgICAgJzxpbnB1dCB0eXBlPVwiY2hlY2tib3hcIiBuYW1lPVwiY2hlY2tcIiBpZD1cImNoZWNrMlwiIHZhbHVlPVwiMlwiIC8+JyAgK1xuICAgICAgICAnPGlucHV0IHR5cGU9XCJjaGVja2JveFwiIG5hbWU9XCJjaGVja1wiIGlkPVwiY2hlY2szXCIgdmFsdWU9XCIzXCIgLz4nICArXG4gICAgICAgICc8aW5wdXQgdHlwZT1cImNoZWNrYm94XCIgdmFsdWU9XCJmb29cIiAvPicgK1xuICAgICAgJzwvZm9ybT4nKTtcbiAgICBleHBlY3RXYXJuaW5nKCgpID0+IHtcbiAgICAgICQoJyNlbGVtZW50JykucGFyc2xleSgpO1xuICAgIH0pO1xuICAgIGV4cGVjdCgkKCcjY2hlY2sxJykuYXR0cignZGF0YS1wYXJzbGV5LW11bHRpcGxlJykpLnRvLmJlKCdjaGVjaycpO1xuICAgIGV4cGVjdCgkKCcjY2hlY2syJykuYXR0cignZGF0YS1wYXJzbGV5LW11bHRpcGxlJykpLnRvLmJlKCdjaGVjaycpO1xuICAgIGV4cGVjdCgkKCcjY2hlY2szJykuYXR0cignZGF0YS1wYXJzbGV5LW11bHRpcGxlJykpLnRvLmJlKCdjaGVjaycpO1xuICAgIGV4cGVjdCgkKCcjY2hlY2s0JykuZXEoMykuYXR0cignZGF0YS1wYXJzbGV5LW11bHRpcGxlJykpLnRvLmJlKHVuZGVmaW5lZCk7XG4gIH0pO1xuICBpdCgnc2hvdWxkIGhhdmUgYSBzcGVjaWZpYyBgZ2V0VmFsdWVgIG1ldGhvZCAoY2hlY2tib3gpJywgKCkgPT4ge1xuICAgICQoJ2JvZHknKS5hcHBlbmQoXG4gICAgICAnPGZvcm0gaWQ9XCJlbGVtZW50XCIgPicgK1xuICAgICAgICAnPGlucHV0IHR5cGU9XCJjaGVja2JveFwiIG5hbWU9XCJjaGVja1tdXCIgaWQ9XCJjaGVjazFcIiB2YWx1ZT1cIjFcIiAvPicgICtcbiAgICAgICAgJzxpbnB1dCB0eXBlPVwiY2hlY2tib3hcIiBuYW1lPVwiY2hlY2tbXVwiIGlkPVwiY2hlY2syXCIgdmFsdWU9XCIyXCIgLz4nICArXG4gICAgICAnPC9mb3JtPicpO1xuICAgIGV4cGVjdCgkKCcjY2hlY2sxJykucGFyc2xleSgpLmdldFZhbHVlKCkpLnRvLmJlLmVxbChbXSk7XG4gICAgZXhwZWN0KCQoJyNjaGVjazInKS5hdHRyKCdjaGVja2VkJywgJ2NoZWNrZWQnKS5wYXJzbGV5KCkuZ2V0VmFsdWUoKSkudG8uYmUuZXFsKFsnMiddKTtcbiAgfSk7XG4gIGl0KCdzaG91bGQgaGF2ZSBhIHNwZWNpZmljIGBnZXRWYWx1ZWAgbWV0aG9kIChyYWRpbyknLCAoKSA9PiB7XG4gICAgJCgnYm9keScpLmFwcGVuZChcbiAgICAgICc8Zm9ybSBpZD1cImVsZW1lbnRcIiA+JyArXG4gICAgICAgICc8aW5wdXQgdHlwZT1cInJhZGlvXCIgbmFtZT1cInJhZGlvXCIgaWQ9XCJyYWRpbzFcIiB2YWx1ZT1cIjNcIiAvPicgICtcbiAgICAgICAgJzxpbnB1dCB0eXBlPVwicmFkaW9cIiBuYW1lPVwicmFkaW9cIiBpZD1cInJhZGlvMlwiIHZhbHVlPVwiNFwiIC8+JyAgK1xuICAgICAgJzwvZm9ybT4nKTtcbiAgICBleHBlY3QoJCgnI3JhZGlvMScpLnBhcnNsZXkoKS5nZXRWYWx1ZSgpKS50by5iZS5lcWwoJycpO1xuICAgIGV4cGVjdCgkKCcjcmFkaW8yJykuYXR0cignY2hlY2tlZCcsICdjaGVja2VkJykucGFyc2xleSgpLmdldFZhbHVlKCkpLnRvLmJlLmVxbCgnNCcpO1xuICB9KTtcbiAgaXQoJ3Nob3VsZCBoYW5kbGUgcmVxdWlyZWQgY29uc3RyYWludCAoY2hlY2tib3gpJywgKCkgPT4ge1xuICAgICQoJ2JvZHknKS5hcHBlbmQoXG4gICAgICAnPGZvcm0gaWQ9XCJlbGVtZW50XCIgPicgK1xuICAgICAgICAnPGlucHV0IHR5cGU9XCJjaGVja2JveFwiIG5hbWU9XCJjaGVja1tdXCIgaWQ9XCJjaGVjazFcIiB2YWx1ZT1cIjFcIiAvPicgICtcbiAgICAgICAgJzxpbnB1dCB0eXBlPVwiY2hlY2tib3hcIiBuYW1lPVwiY2hlY2tbXVwiIGlkPVwiY2hlY2syXCIgdmFsdWU9XCIyXCIgcmVxdWlyZWQgLz4nICArXG4gICAgICAnPC9mb3JtPicpO1xuICAgIGV4cGVjdCgkKCcjZWxlbWVudCcpLnBhcnNsZXkoKS5pc1ZhbGlkKCkpLnRvLmJlKGZhbHNlKTtcbiAgICAkKCcjY2hlY2syJykuYXR0cignY2hlY2tlZCcsICdjaGVja2VkJyk7XG4gICAgZXhwZWN0KCQoJyNlbGVtZW50JykucGFyc2xleSgpLmlzVmFsaWQoKSkudG8uYmUodHJ1ZSk7XG4gIH0pO1xuICBpdCgnc2hvdWxkIGhhbmRsZSByZXF1aXJlZCBjb25zdHJhaW50IChyYWRpbyknLCAoKSA9PiB7XG4gICAgJCgnYm9keScpLmFwcGVuZChcbiAgICAgICc8Zm9ybSBpZD1cImVsZW1lbnRcIiA+JyArXG4gICAgICAgICc8aW5wdXQgdHlwZT1cInJhZGlvXCIgbmFtZT1cInJhZGlvXCIgaWQ9XCJyYWRpbzFcIiB2YWx1ZT1cIjNcIiByZXF1aXJlZCAvPicgICtcbiAgICAgICAgJzxpbnB1dCB0eXBlPVwicmFkaW9cIiBuYW1lPVwicmFkaW9cIiBpZD1cInJhZGlvMlwiIHZhbHVlPVwiNFwiIC8+JyAgK1xuICAgICAgJzwvZm9ybT4nKTtcbiAgICBleHBlY3QoJCgnI2VsZW1lbnQnKS5wYXJzbGV5KCkuaXNWYWxpZCgpKS50by5iZShmYWxzZSk7XG4gICAgJCgnI3JhZGlvMScpLmF0dHIoJ2NoZWNrZWQnLCAnY2hlY2tlZCcpO1xuICAgIGV4cGVjdCgkKCcjZWxlbWVudCcpLnBhcnNsZXkoKS5pc1ZhbGlkKCkpLnRvLmJlKHRydWUpO1xuICB9KTtcbiAgaXQoJ3Nob3VsZCBoYW5kbGUgY2hlY2sgY29uc3RyYWludCcsICgpID0+IHtcbiAgICAkKCdib2R5JykuYXBwZW5kKFxuICAgICAgJzxmb3JtIGlkPVwiZWxlbWVudFwiID4nICtcbiAgICAgICAgJzxpbnB1dCB0eXBlPVwiY2hlY2tib3hcIiBuYW1lPVwiY2hlY2tbXVwiIGlkPVwiY2hlY2sxXCIgdmFsdWU9XCIxXCIgZGF0YS1wYXJzbGV5LWNoZWNrPVwiWzEsIDJdXCIgLz4nICArXG4gICAgICAgICc8aW5wdXQgdHlwZT1cImNoZWNrYm94XCIgbmFtZT1cImNoZWNrW11cIiBpZD1cImNoZWNrMlwiIHZhbHVlPVwiMlwiIC8+JyAgK1xuICAgICAgICAnPGlucHV0IHR5cGU9XCJjaGVja2JveFwiIG5hbWU9XCJjaGVja1tdXCIgaWQ9XCJjaGVjazNcIiB2YWx1ZT1cIjNcIiAvPicgICtcbiAgICAgICAgJzxpbnB1dCB0eXBlPVwiY2hlY2tib3hcIiBuYW1lPVwiY2hlY2tbXVwiIGlkPVwiY2hlY2s0XCIgdmFsdWU9XCI0XCIgLz4nICArXG4gICAgICAnPC9mb3JtPicpO1xuXG4gICAgLy8gaWYgbm90IHJlcXVpcmVkLCBmaWVsZCBpcyBvcHRpb25hbCBhbmQgZG8gbm90IGZhaWxcbiAgICBleHBlY3QoJCgnI2NoZWNrMScpLnBhcnNsZXkoKS5pc1ZhbGlkKCkpLnRvLmJlLmVxbCh0cnVlKTtcbiAgICBleHBlY3QoJCgnI2VsZW1lbnQnKS5wYXJzbGV5KCkuaXNWYWxpZCgpKS50by5iZSh0cnVlKTtcblxuICAgIC8vIG9uY2UgcmVxdWlyZWQsIGl0IGZhaWxzIGlmIG5vdCByaWdodGx5IGNoZWNrZWRcbiAgICAkKCcjY2hlY2sxJykuYXR0cigncmVxdWlyZWQnLCAndHJ1ZScpO1xuICAgIGV4cGVjdCgkKCcjZWxlbWVudCcpLnBhcnNsZXkoKS5pc1ZhbGlkKCkpLnRvLmJlKGZhbHNlKTtcbiAgICAkKCcjY2hlY2syJykuYXR0cignY2hlY2tlZCcsICdjaGVja2VkJyk7XG4gICAgZXhwZWN0KCQoJyNlbGVtZW50JykucGFyc2xleSgpLmlzVmFsaWQoKSkudG8uYmUodHJ1ZSk7XG4gICAgJCgnI2NoZWNrMScpLmF0dHIoJ2NoZWNrZWQnLCAnY2hlY2tlZCcpO1xuICAgICQoJyNjaGVjazMnKS5hdHRyKCdjaGVja2VkJywgJ2NoZWNrZWQnKTtcbiAgICBleHBlY3QoJCgnI2VsZW1lbnQnKS5wYXJzbGV5KCkuaXNWYWxpZCgpKS50by5iZShmYWxzZSk7XG4gIH0pO1xuICBpdCgnc2hvdWxkIHN1cHBvcnQgc2VsZWN0IG11bHRpcGxlJywgKCkgPT4ge1xuICAgICQoJ2JvZHknKS5hcHBlbmQoXG4gICAgICAnPHNlbGVjdCBtdWx0aXBsZSBuYW1lPVwiZm9vXCIgaWQ9XCJlbGVtZW50XCIgcmVxdWlyZWQgZGF0YS1wYXJzbGV5LW1pbmNoZWNrPVwiMlwiPicgK1xuICAgICAgICAnPG9wdGlvbiB2YWx1ZT1cIjFcIj4xPC9vcHRpb24+JyAgK1xuICAgICAgICAnPG9wdGlvbiB2YWx1ZT1cIjJcIj4yPC9vcHRpb24+JyAgK1xuICAgICAgICAnPG9wdGlvbiB2YWx1ZT1cIjNcIj4zPC9vcHRpb24+JyAgK1xuICAgICAgJzwvc2VsZWN0PicpO1xuICAgIHZhciBwYXJzbGV5RmllbGQgPSAkKCcjZWxlbWVudCcpLnBhcnNsZXkoKTtcbiAgICBleHBlY3QocGFyc2xleUZpZWxkLl9fY2xhc3NfXykudG8uYmUoJ0ZpZWxkTXVsdGlwbGUnKTtcbiAgICBleHBlY3QocGFyc2xleUZpZWxkLm9wdGlvbnMubXVsdGlwbGUpLnRvLmJlKCdmb28nKTtcbiAgICBleHBlY3QocGFyc2xleUZpZWxkLmdldFZhbHVlKCkpLnRvLmJlLmVxbChbXSk7XG4gICAgZXhwZWN0KHBhcnNsZXlGaWVsZC5pc1ZhbGlkKCkpLnRvLmJlKGZhbHNlKTtcbiAgICAkKCcjZWxlbWVudCBvcHRpb25bdmFsdWU9XCIxXCJdJykuYXR0cignc2VsZWN0ZWQnLCAnc2VsZWN0ZWQnKTtcbiAgICBleHBlY3QocGFyc2xleUZpZWxkLmdldFZhbHVlKCkpLnRvLmJlLmVxbChbJzEnXSk7XG4gICAgZXhwZWN0KHBhcnNsZXlGaWVsZC5pc1ZhbGlkKCkpLnRvLmJlKGZhbHNlKTtcbiAgICAkKCcjZWxlbWVudCBvcHRpb25bdmFsdWU9XCIyXCJdJykuYXR0cignc2VsZWN0ZWQnLCAnc2VsZWN0ZWQnKTtcbiAgICBleHBlY3QocGFyc2xleUZpZWxkLmdldFZhbHVlKCkpLnRvLmJlLmVxbChbJzEnLCAnMiddKTtcbiAgICBleHBlY3QocGFyc2xleUZpZWxkLmlzVmFsaWQoKSkudG8uYmUodHJ1ZSk7XG4gIH0pO1xuICBpdCgnc2hvdWxkIHN1cHBvcnQgc2VsZWN0IHdpdGggZGVmYXVsdCB3aXRob3V0IGEgdmFsdWUnLCAoKSA9PiB7XG4gICAgJCgnYm9keScpLmFwcGVuZChcbiAgICAgICc8c2VsZWN0IGlkPVwiZWxlbWVudFwiIHJlcXVpcmVkPicgICAgK1xuICAgICAgICAnPG9wdGlvbiBzZWxlY3RlZD1cInNlbGVjdGVkXCIgdmFsdWU+ZGVmYXVsdDwvb3B0aW9uPicgICtcbiAgICAgICAgJzxvcHRpb24gdmFsdWU9XCIyXCI+Mjwvb3B0aW9uPicgICAgK1xuICAgICAgJzwvc2VsZWN0PicpO1xuICAgIGV4cGVjdCgkKCcjZWxlbWVudCcpLnBhcnNsZXkoKS5pc1ZhbGlkKCkpLnRvLmJlKGZhbHNlKTtcbiAgfSk7XG4gIGl0KCdzaG91bGQgbm90IGJpbmQgcmFkaW8gb3IgY2hlY2tib3hlcyB3aXRob3V0IGEgbmFtZSBvciBhbmQgaWQgb3IgYSBtdWx0aXBsZSBvcHRpb24nLCAoKSA9PiB7XG4gICAgJCgnYm9keScpLmFwcGVuZCgnPGlucHV0IHR5cGU9XCJyYWRpb1wiIHZhbHVlPVwiZm9vXCIgLz4nKTtcbiAgICB2YXIgcGFyc2xleUluc3RhbmNlID1cbiAgICAgIGV4cGVjdFdhcm5pbmcoKCkgPT4ge1xuICAgICAgICByZXR1cm4gJCgnaW5wdXRbdHlwZT1yYWRpb10nKS5wc2x5KCk7XG4gICAgICB9KTtcbiAgICBleHBlY3QocGFyc2xleUluc3RhbmNlLl9fY2xhc3NfXykudG8uYmUoJ1BhcnNsZXknKTtcbiAgICAkKCdpbnB1dFt0eXBlPXJhZGlvXScpLmF0dHIoJ2lkJywgJ2VsZW1lbnQnKTtcbiAgICBwYXJzbGV5SW5zdGFuY2UgPSAkKCcjZWxlbWVudCcpLnBhcnNsZXkoKTtcbiAgICBleHBlY3QocGFyc2xleUluc3RhbmNlLl9fY2xhc3NfXykudG8uYmUoJ0ZpZWxkTXVsdGlwbGUnKTtcbiAgICBleHBlY3QocGFyc2xleUluc3RhbmNlLm9wdGlvbnMubXVsdGlwbGUpLnRvLmJlKCdlbGVtZW50Jyk7XG4gICAgJCgnI2VsZW1lbnQnKS5hdHRyKCduYW1lJywgJ2VsZW1lbnQnKTtcbiAgICBwYXJzbGV5SW5zdGFuY2UgPSAkKCdpbnB1dFtuYW1lPWVsZW1lbnRdJykucGFyc2xleSgpO1xuICAgIGV4cGVjdChwYXJzbGV5SW5zdGFuY2UuX19jbGFzc19fKS50by5iZSgnRmllbGRNdWx0aXBsZScpO1xuICAgIGV4cGVjdChwYXJzbGV5SW5zdGFuY2Uub3B0aW9ucy5tdWx0aXBsZSkudG8uYmUoJ2VsZW1lbnQnKTtcbiAgICBwYXJzbGV5SW5zdGFuY2UuZGVzdHJveSgpO1xuICAgICQoJyNlbGVtZW50JykuYXR0cignZGF0YS1wYXJzbGV5LW11bHRpcGxlJywgJ2VsZW1lbnRmb28nKTtcbiAgICBwYXJzbGV5SW5zdGFuY2UgPSAkKCdpbnB1dFtuYW1lPWVsZW1lbnRdJykucGFyc2xleSgpO1xuICAgIGV4cGVjdChwYXJzbGV5SW5zdGFuY2UuX19jbGFzc19fKS50by5iZSgnRmllbGRNdWx0aXBsZScpO1xuICAgIGV4cGVjdChwYXJzbGV5SW5zdGFuY2Uub3B0aW9ucy5tdWx0aXBsZSkudG8uYmUoJ2VsZW1lbnRmb28nKTtcbiAgfSk7XG4gIGl0KCdzaG91bGQgYmluZCBzZWxlY3QgbXVsdGlwbGUgaW5wdXQgd2l0aG91dCBhIG5hbWUgb3IgYSBtdWx0aXBsZSBvcHRpb24nLCAoKSA9PiB7XG4gICAgJCgnYm9keScpLmFwcGVuZCgnPHNlbGVjdCBtdWx0aXBsZSBpZD1cImVsZW1lbnRcIj48L3NlbGVjdD4nKTtcbiAgICBleHBlY3QoJCgnI2VsZW1lbnQnKS5wYXJzbGV5KCkuX19jbGFzc19fKS50by5iZSgnRmllbGRNdWx0aXBsZScpO1xuICAgIGV4cGVjdCgkKCcjZWxlbWVudCcpLmF0dHIoJ2RhdGEtcGFyc2xleS1tdWx0aXBsZScpKS50by5iZSgnZWxlbWVudCcpO1xuICB9KTtcbiAgaXQoJ3Nob3VsZCByZW1vdmUgZXJyb3JzIG9uIGNoYW5nZSwgd2hhdGV2ZXIgZmllbGQgaXMgY2hhbmdlZCcsICgpID0+IHtcbiAgICAkKCdib2R5JykuYXBwZW5kKFxuICAgICAgJzxmb3JtIGlkPVwiZWxlbWVudFwiID4nICtcbiAgICAgICAgJzxpbnB1dCB0eXBlPVwiY2hlY2tib3hcIiBuYW1lPVwiY2hlY2tbXVwiIGlkPVwiY2hlY2sxXCIgdmFsdWU9XCIxXCIgcmVxdWlyZWQgLz4nICArXG4gICAgICAgICc8aW5wdXQgdHlwZT1cImNoZWNrYm94XCIgbmFtZT1cImNoZWNrW11cIiBpZD1cImNoZWNrMlwiIHZhbHVlPVwiMlwiIC8+JyAgK1xuICAgICAgICAnPGlucHV0IHR5cGU9XCJjaGVja2JveFwiIG5hbWU9XCJjaGVja1tdXCIgaWQ9XCJjaGVjazNcIiB2YWx1ZT1cIjNcIiAvPicgICtcbiAgICAgICAgJzxpbnB1dCB0eXBlPVwiY2hlY2tib3hcIiBuYW1lPVwiY2hlY2tbXVwiIGlkPVwiY2hlY2s0XCIgdmFsdWU9XCI0XCIgLz4nICArXG4gICAgICAnPC9mb3JtPicpO1xuICAgICQoJyNlbGVtZW50JykucGFyc2xleSgpLnZhbGlkYXRlKCk7XG4gICAgZXhwZWN0KCQoJy5wYXJzbGV5LWVycm9ycy1saXN0LmZpbGxlZCcpLmxlbmd0aCkudG8uYmUoMSk7XG4gICAgJCgnI2NoZWNrMicpLmF0dHIoJ2NoZWNrZWQnLCAnY2hlY2tlZCcpLnRyaWdnZXIoJ2lucHV0Jyk7XG4gICAgZXhwZWN0KCQoJy5wYXJzbGV5LWVycm9ycy1saXN0LmZpbGxlZCcpLmxlbmd0aCkudG8uYmUoMCk7XG4gIH0pO1xuICBpdCgnc2hvdWxkIGFkZCBlcnJvcnMgb24gY2hhbmdlIGlmIHRyaWdnZXIgZW5hYmxlZCwgd2hhdGV2ZXIgZmllbGQgaXMgY2hhbmdlZCcsICgpID0+IHtcbiAgICAkKCdib2R5JykuYXBwZW5kKFxuICAgICAgJzxmb3JtIGlkPVwiZWxlbWVudFwiID4nICtcbiAgICAgICAgJzxpbnB1dCB0eXBlPVwiY2hlY2tib3hcIiBuYW1lPVwiY2hlY2tbXVwiIGlkPVwiY2hlY2sxXCIgdmFsdWU9XCIxXCIgcmVxdWlyZWQgZGF0YS1wYXJzbGV5LW1pbmNoZWNrPVwiMlwiIGRhdGEtcGFyc2xleS10cmlnZ2VyPVwiY2hhbmdlXCIgLz4nICArXG4gICAgICAgICc8aW5wdXQgdHlwZT1cImNoZWNrYm94XCIgbmFtZT1cImNoZWNrW11cIiBpZD1cImNoZWNrMlwiIHZhbHVlPVwiMlwiIC8+JyAgK1xuICAgICAgICAnPGlucHV0IHR5cGU9XCJjaGVja2JveFwiIG5hbWU9XCJjaGVja1tdXCIgaWQ9XCJjaGVjazNcIiB2YWx1ZT1cIjNcIiAvPicgICtcbiAgICAgICAgJzxpbnB1dCB0eXBlPVwiY2hlY2tib3hcIiBuYW1lPVwiY2hlY2tbXVwiIGlkPVwiY2hlY2s0XCIgdmFsdWU9XCI0XCIgLz4nICArXG4gICAgICAnPC9mb3JtPicpO1xuICAgIHZhciBwYXJzbGV5SW5zdGFuY2UgPSAkKCcjY2hlY2sxJykucGFyc2xleSgpO1xuICAgIGV4cGVjdChwYXJzbGV5SW5zdGFuY2UudmFsaWRhdGlvblJlc3VsdCkudG8uYmUodHJ1ZSk7XG4gICAgJCgnI2NoZWNrMycpLnRyaWdnZXIoJC5FdmVudCgnY2hhbmdlJykpO1xuICAgIGV4cGVjdChwYXJzbGV5SW5zdGFuY2UudmFsaWRhdGlvblJlc3VsdC5sZW5ndGgpLnRvLmJlKDEpO1xuICB9KTtcbiAgaXQoJ3Nob3VsZCBiaW5kIG9ubHkgdmFsaWQgbXVsdGlwbGUgc2libGluZ3Mgc2hhcmluZyB0aGUgc2FtZSBuYW1lJywgKCkgPT4ge1xuICAgICQoJ2JvZHknKS5hcHBlbmQoXG4gICAgICAnPGZvcm0gaWQ9XCJlbGVtZW50XCI+JyArXG4gICAgICAgICc8aW5wdXQgbmFtZT1cImZvb1wiIHR5cGU9XCJoaWRkZW5cIiB2YWx1ZT1cIjBcIi8+JyArXG4gICAgICAgICc8aW5wdXQgbmFtZT1cImZvb1wiIGlkPVwiY2hlY2tcIiB0eXBlPVwiY2hlY2tib3hcIiB2YWx1ZT1cIjFcIi8+JyArXG4gICAgICAgICc8aW5wdXQgbmFtZT1cImZvb1wiIGlkPVwiY2hlY2stMlwiIHR5cGU9XCJjaGVja2JveFwiIHZhbHVlPVwiMlwiLz4nICtcbiAgICAgICc8L2Zvcm0+JyArXG4gICAgICAnPGZvcm0gaWQ9XCJlbGVtZW50LTJcIj4nICtcbiAgICAgICAgJzxpbnB1dCBuYW1lPVwiZm9vXCIgaWQ9XCJvdGhlci1jaGVja1wiIHR5cGU9XCJjaGVja2JveFwiIHZhbHVlPVwiM1wiLz4nICtcbiAgICAgICc8L2Zvcm0+Jyk7XG4gICAgJCgnI2VsZW1lbnQsICNlbGVtZW50LTInKS5wYXJzbGV5KCk7XG4gICAgZXhwZWN0KCQoJyNjaGVjaycpLnBhcnNsZXkoKS4kZWxlbWVudHMubGVuZ3RoKS50by5iZSgyKTtcbiAgfSk7XG4gIGl0KCdzaG91bGQgaGFuZGxlIGZvcm0gbmFtZXNwYWNlIGNvbmZpZ3VyYXRpb24gaW5oZXJpdGFuY2UgYW5kIGNsaWNrIGV2ZW50cyB3aGlsZSBtdWx0aXBsZSBiaW5kaW5nIHRocm91Z2ggRm9ybScsICgpID0+IHtcbiAgICAkKCdib2R5JykuYXBwZW5kKFxuICAgICAgJzxmb3JtIGlkPVwiZWxlbWVudFwiID4nICtcbiAgICAgICAgJzxpbnB1dCB0eXBlPVwicmFkaW9cIiBuYW1lPVwicmFkaW9cIiBpZD1cInJhZGlvMVwiIHZhbHVlPVwiM1wiIGZvby1iYXItcmVxdWlyZWQgLz4nICArXG4gICAgICAgICc8aW5wdXQgdHlwZT1cInJhZGlvXCIgbmFtZT1cInJhZGlvXCIgaWQ9XCJyYWRpbzJcIiB2YWx1ZT1cIjRcIiAvPicgICtcbiAgICAgICc8L2Zvcm0+Jyk7XG4gICAgLy8gc2V0IHNwZWNpZmljIG5hbWVzcGFjZSBoZXJlIGZvciBmb3JtXG4gICAgdmFyIHBhcnNsZXlJbnN0YW5jZSA9ICQoJyNlbGVtZW50JykucGFyc2xleSh7bmFtZXNwYWNlOiAnZm9vLWJhci0nfSk7XG4gICAgcGFyc2xleUluc3RhbmNlLnZhbGlkYXRlKCk7XG4gICAgZXhwZWN0KCQoJ3VsLnBhcnNsZXktZXJyb3JzLWxpc3QgbGknKS5sZW5ndGgpLnRvLmJlKDEpO1xuICAgICQoJyNyYWRpbzInKS50cmlnZ2VyKCdjbGljaycpLnRyaWdnZXIoJ2lucHV0Jyk7XG4gICAgZXhwZWN0KCQoJ3VsLnBhcnNsZXktZXJyb3JzLWxpc3QgbGknKS5sZW5ndGgpLnRvLmJlKDApO1xuICB9KTtcbiAgaXQoJ3Nob3VsZCBoYW5kbGUgZHluYW1pYyBtdWx0aXBsZSBpdGVtcyByZW1vdmFsJywgKCkgPT4ge1xuICAgICQoJ2JvZHknKS5hcHBlbmQoXG4gICAgICAnPGZvcm0gaWQ9XCJlbGVtZW50XCIgPicgK1xuICAgICAgICAnPGlucHV0IHR5cGU9XCJjaGVja2JveFwiIG5hbWU9XCJjaGVja1tdXCIgaWQ9XCJjaGVjazFcIiB2YWx1ZT1cIjFcIiBkYXRhLXBhcnNsZXktY2hlY2s9XCJbMSwgMl1cIiAvPicgICtcbiAgICAgICAgJzxpbnB1dCB0eXBlPVwiY2hlY2tib3hcIiBuYW1lPVwiY2hlY2tbXVwiIGlkPVwiY2hlY2syXCIgdmFsdWU9XCIyXCIgLz4nICArXG4gICAgICAgICc8aW5wdXQgdHlwZT1cImNoZWNrYm94XCIgbmFtZT1cImNoZWNrW11cIiBpZD1cImNoZWNrM1wiIHZhbHVlPVwiM1wiIC8+JyAgK1xuICAgICAgICAnPGlucHV0IHR5cGU9XCJjaGVja2JveFwiIG5hbWU9XCJjaGVja1tdXCIgaWQ9XCJjaGVjazRcIiB2YWx1ZT1cIjRcIiAvPicgICtcbiAgICAgICc8L2Zvcm0+Jyk7XG4gICAgLy8gYmluZCBhbGwgbXVsdGlwbGUgY2hlY2tib3ggaW5wdXRzLiBUT0RPIHJlZmFjdG8gbXVsdGlwbGUgYmluZGluZ1xuICAgICQoJyNlbGVtZW50JykucGFyc2xleSgpO1xuICAgIHZhciBwYXJzbGV5SW5zdGFuY2UgPSAkKCdbdHlwZT1jaGVja2JveF06Zmlyc3QnKS5wYXJzbGV5KCk7XG4gICAgZXhwZWN0KHBhcnNsZXlJbnN0YW5jZS4kZWxlbWVudHMubGVuZ3RoKS50by5iZSg0KTtcbiAgICAkKCdbdHlwZT1jaGVja2JveF06bGFzdCcpLnJlbW92ZSgpO1xuICAgIC8vIHZhbGlkYXRlIGZvcm0gdG8gZ28gdGhyb3VnaCBhbGwgbXVsdGlwbGUgaW5wdXRzLiBUT0RPIHJlZmFjdG8gbXVsdGlwbGUgYmluZGluZ1xuICAgICQoJyNlbGVtZW50JykucGFyc2xleSgpLnZhbGlkYXRlKCk7XG4gICAgZXhwZWN0KHBhcnNsZXlJbnN0YW5jZS4kZWxlbWVudHMubGVuZ3RoKS50by5iZSgzKTtcbiAgfSk7XG4gIGl0KCd2YWx1ZSBvcHRpb24gY2FuIGJlIGEgZnVuY3Rpb24nLCAoKSA9PiB7XG4gICAgJCgnYm9keScpLmFwcGVuZChcbiAgICAgICc8Zm9ybSBpZD1cImVsZW1lbnRcIiA+JyArXG4gICAgICAgICc8aW5wdXQgdHlwZT1cImNoZWNrYm94XCIgbmFtZT1cImNoZWNrW11cIiBpZD1cImNoZWNrMVwiIHZhbHVlPVwiMVwiIHJlcXVpcmVkIC8+JyAgK1xuICAgICAgICAnPGlucHV0IHR5cGU9XCJjaGVja2JveFwiIG5hbWU9XCJjaGVja1tdXCIgaWQ9XCJjaGVjazJcIiB2YWx1ZT1cIjJcIiAvPicgICtcbiAgICAgICAgJzxpbnB1dCB0eXBlPVwiY2hlY2tib3hcIiBuYW1lPVwiY2hlY2tbXVwiIGlkPVwiY2hlY2szXCIgdmFsdWU9XCIzXCIgLz4nICArXG4gICAgICAgICc8aW5wdXQgdHlwZT1cImNoZWNrYm94XCIgbmFtZT1cImNoZWNrW11cIiBpZD1cImNoZWNrNFwiIHZhbHVlPVwiNFwiIC8+JyAgK1xuICAgICAgJzwvZm9ybT4nKTtcbiAgICB2YXIgY2FsbGVkID0gZmFsc2U7XG4gICAgdmFyIHZhbGlkID0gJCgnI2VsZW1lbnQnKVxuICAgIC5wYXJzbGV5KHt2YWx1ZTogZnVuY3Rpb24oKSB7IGNhbGxlZCA9IHRydWU7IHJldHVybiBbJ3gnXTsgfX0pXG4gICAgLmlzVmFsaWQoKTtcbiAgICBleHBlY3QodmFsaWQpLnRvLmJlKHRydWUpO1xuICAgIGV4cGVjdChjYWxsZWQpLnRvLmJlKHRydWUpO1xuICB9KTtcbiAgYWZ0ZXJFYWNoKCgpID0+IHtcbiAgICAkKCcjZWxlbWVudCwgI2VsZW1lbnQtMiwgLnBhcnNsZXktZXJyb3JzLWxpc3QnKS5yZW1vdmUoKTtcbiAgfSk7XG59KTtcbiIsImltcG9ydCAkIGZyb20gJ2pxdWVyeSc7XG5pbXBvcnQgUGFyc2xleSBmcm9tICcuLi8uLi9zcmMvcGFyc2xleSc7XG52YXIgRmFjdG9yeSA9IFBhcnNsZXkuRmFjdG9yeTtcblxuZGVzY3JpYmUoJ0ZhY3RvcnknLCAoKSA9PiB7XG4gIGl0KCdzaG91bGQgYmUgYSBmdW5jdGlvbicsICgpID0+IHtcbiAgICBleHBlY3QoRmFjdG9yeSkudG8uYmUuYSgnZnVuY3Rpb24nKTtcbiAgfSk7XG4gIGl0KCdzaG91bGQgcmVnaXN0ZXIgc29tZSB3aW5kb3cgZ2xvYmFscycsICgpID0+IHtcbiAgICBleHBlY3Qod2luZG93LlBhcnNsZXlVdGlscykubm90LnRvLmJlKHVuZGVmaW5lZCk7XG4gICAgZXhwZWN0KHdpbmRvdy5QYXJzbGV5VmFsaWRhdG9yKS5ub3QudG8uYmUodW5kZWZpbmVkKTtcbiAgfSk7XG4gIGl0KCdzaG91bGQgdGhyb3cgYW4gZXJyb3IgaWYgbm8gZWxlbWVudCBnaXZlbicsICgpID0+IHtcbiAgICBleHBlY3QoRmFjdG9yeSkudG8udGhyb3dFeGNlcHRpb24oKTtcbiAgfSk7XG4gIGl0KCdzaG91bGQgcmV0dXJuIEZvcm0gaW5zdGFuY2UgaWYgaW5zdGFudGlhdGVkIG9uIGEgZm9ybScsICgpID0+IHtcbiAgICAkKCdib2R5JykuYXBwZW5kKCc8Zm9ybSBpZD1cImVsZW1lbnRcIj48L2Zvcm0+Jyk7XG4gICAgdmFyIHBhcnNsZXlJbnN0YW5jZSA9IG5ldyBGYWN0b3J5KCQoJyNlbGVtZW50JylbMF0pO1xuICAgIGV4cGVjdChwYXJzbGV5SW5zdGFuY2UpLnRvLmJlLmFuKCdvYmplY3QnKTtcbiAgICBleHBlY3QocGFyc2xleUluc3RhbmNlLl9fY2xhc3NfXykudG8uYmUoJ0Zvcm0nKTtcbiAgfSk7XG4gIGl0KCdzaG91bGQgcmV0dXJuIEZpZWxkIGluc3RhbmNlIGlmIGluc3RhbnRpYXRlZCBvbiBhIGZpZWxkJywgKCkgPT4ge1xuICAgICQoJ2JvZHknKS5hcHBlbmQoJzxpbnB1dCBpZD1cImVsZW1lbnRcIiAvPicpO1xuICAgIHZhciBwYXJzbGV5SW5zdGFuY2UgPSBuZXcgRmFjdG9yeSgkKCcjZWxlbWVudCcpWzBdKTtcbiAgICBleHBlY3QocGFyc2xleUluc3RhbmNlKS50by5iZS5hbignb2JqZWN0Jyk7XG4gICAgZXhwZWN0KHBhcnNsZXlJbnN0YW5jZS5fX2NsYXNzX18pLnRvLmJlKCdGaWVsZCcpO1xuICB9KTtcbiAgaXQoJ3Nob3VsZCByZXR1cm4gRmllbGQgZXZlbiBpZiBpbnN0YW50aWF0ZWQgb24gYW4gdW5zdXBwb3J0ZWQgZWxlbWVudCcsICgpID0+IHtcbiAgICAkKCdib2R5JykuYXBwZW5kKCc8ZGl2IGlkPVwiZWxlbWVudFwiPjwvZGl2PicpO1xuICAgIHZhciBwYXJzbGV5SW5zdGFuY2UgPSBuZXcgRmFjdG9yeSgkKCcjZWxlbWVudCcpWzBdKTtcbiAgICBleHBlY3QocGFyc2xleUluc3RhbmNlKS50by5iZS5hbignb2JqZWN0Jyk7XG4gICAgZXhwZWN0KHBhcnNsZXlJbnN0YW5jZS5fX2NsYXNzX18pLnRvLmJlKCdGaWVsZCcpO1xuICB9KTtcbiAgaXQoJ3Nob3VsZCByZXR1cm4gRmllbGQgaW5zdGFuY2UgZXZlbiBpZiBpbnN0YW50aWF0ZWQgb24gYW4gZXhjbHVkZWQgZmllbGQgdHlwZSwgYW5kIGRvIG5vdCBoYXZlIGFuIGVycm9ycyBjb250YWluZXInLCAoKSA9PiB7XG4gICAgJCgnYm9keScpLmFwcGVuZCgnPGlucHV0IHR5cGU9XCJzdWJtaXRcIiBpZD1cImVsZW1lbnRcIiAvPicpO1xuICAgIHZhciBwYXJzbGV5SW5zdGFuY2UgPSBuZXcgRmFjdG9yeSgkKCcjZWxlbWVudCcpWzBdKTtcbiAgICBleHBlY3QocGFyc2xleUluc3RhbmNlKS50by5iZS5hbignb2JqZWN0Jyk7XG4gICAgZXhwZWN0KHBhcnNsZXlJbnN0YW5jZS5fX2NsYXNzX18pLnRvLmJlKCdGaWVsZCcpO1xuICB9KTtcbiAgaXQoJ3Nob3VsZCBoYXZlIGV4Y2x1ZGVkIGZpZWxkcyBieSBkZWZhdWx0JywgKCkgPT4ge1xuICAgICQoJ2JvZHknKS5hcHBlbmQoXG4gICAgICAnPGZvcm0gaWQ9XCJlbGVtZW50XCIgPicgICAgICAgICtcbiAgICAgICAgJzxpbnB1dCB0eXBlPVwic3VibWl0XCIgLz4nICAgK1xuICAgICAgICAnPGlucHV0IHR5cGU9XCJyZXNldFwiIC8+JyAgICArXG4gICAgICAgICc8aW5wdXQgdHlwZT1cImhpZGRlblwiIC8+JyAgICtcbiAgICAgICAgJzxpbnB1dCB0eXBlPVwiYnV0dG9uXCIgLz4nICAgK1xuICAgICAgJzwvZm9ybT4nKTtcbiAgICB2YXIgcGFyc2xleUluc3RhbmNlID0gJCgnI2VsZW1lbnQnKS5wYXJzbGV5KCk7XG4gICAgZXhwZWN0KHBhcnNsZXlJbnN0YW5jZS5maWVsZHMubGVuZ3RoKS50by5iZSgwKTtcbiAgfSk7XG4gIGl0KCdzaG91bGQgcmV0dXJuIEZvcm0gaWYgaW5zdGFudGlhdGVkIG9uIGFuIHVuc3VwcG9ydGVkIGVsZW1lbnQgd2l0aCBkYXRhLXBhcnNsZXktdmFsaWRhdGUgYXR0cmlidXRlJywgKCkgPT4ge1xuICAgICQoJ2JvZHknKS5hcHBlbmQoJzxkaXYgaWQ9XCJlbGVtZW50XCIgZGF0YS1wYXJzbGV5LXZhbGlkYXRlPjwvZGl2PicpO1xuICAgIHZhciBwYXJzbGV5SW5zdGFuY2UgPSBuZXcgRmFjdG9yeSgkKCcjZWxlbWVudCcpWzBdKTtcbiAgICBleHBlY3QocGFyc2xleUluc3RhbmNlKS50by5iZS5hbignb2JqZWN0Jyk7XG4gICAgZXhwZWN0KHBhcnNsZXlJbnN0YW5jZS5fX2NsYXNzX18pLnRvLmJlKCdGb3JtJyk7XG4gIH0pO1xuICBpdCgnc2hvdWxkIGhhbmRsZSBuYW1lc3BhY2UgY29uZmlndXJhdGlvbicsICgpID0+IHtcbiAgICAkKCdib2R5JykuYXBwZW5kKCc8ZGl2IGlkPVwiZWxlbWVudFwiPjwvZGl2PicpO1xuXG4gICAgLy8gZGVmYXVsdCBQYXJzbGV5T3B0aW9ucy5uYW1lc3BhY2VcbiAgICBleHBlY3QobmV3IEZhY3RvcnkoJCgnI2VsZW1lbnQnKVswXSkub3B0aW9ucy5uYW1lc3BhY2UpLnRvLmJlKCdkYXRhLXBhcnNsZXktJyk7XG5cbiAgICAvLyBnbG9iYWwgSlMgY29uZmlnXG4gICAgJCgnI2VsZW1lbnQnKS5wYXJzbGV5KCkuZGVzdHJveSgpO1xuICAgIHdpbmRvdy5QYXJzbGV5Q29uZmlnLm5hbWVzcGFjZSA9ICdkYXRhLWZvby0nO1xuICAgIGV4cGVjdChuZXcgRmFjdG9yeSgkKCcjZWxlbWVudCcpWzBdKS5vcHRpb25zLm5hbWVzcGFjZSkudG8uYmUoJ2RhdGEtZm9vLScpO1xuXG4gICAgLy8gb3B0aW9uIG9uIHRoZSBnb1xuICAgICQoJyNlbGVtZW50JykucGFyc2xleSgpLmRlc3Ryb3koKTtcbiAgICBleHBlY3QobmV3IEZhY3RvcnkoJCgnI2VsZW1lbnQnKVswXSwge1xuICAgICAgbmFtZXNwYWNlOiAnZGF0YS1iYXItJ1xuICAgIH0pLm9wdGlvbnMubmFtZXNwYWNlKS50by5iZSgnZGF0YS1iYXItJyk7XG5cbiAgICAvLyBkYXRhLSBET00tQVBJXG4gICAgJCgnI2VsZW1lbnQnKS5wYXJzbGV5KCkuZGVzdHJveSgpO1xuICAgICQoJyNlbGVtZW50JykuYXR0cignZGF0YS1wYXJzbGV5LW5hbWVzcGFjZScsICdkYXRhLWJhei0nKTtcbiAgICBleHBlY3QobmV3IEZhY3RvcnkoJCgnI2VsZW1lbnQnKVswXSwge1xuICAgICAgbmFtZXNwYWNlOiAnZGF0YS1iYXItJ1xuICAgIH0pLm9wdGlvbnMubmFtZXNwYWNlKS50by5iZSgnZGF0YS1iYXItJyk7XG4gICAgZGVsZXRlIHdpbmRvdy5QYXJzbGV5Q29uZmlnLm5hbWVzcGFjZTtcbiAgfSk7XG4gIGl0KCdzaG91bGQgaGFuZGxlIHByb3BlciBvcHRpb25zIG1hbmFnZW1lbnQnLCAoKSA9PiB7XG4gICAgJCgnYm9keScpLmFwcGVuZCgnPGZvcm0gaWQ9XCJlbGVtZW50XCIgZGF0YS1wYXJzbGV5LWZvbz1cImJhclwiIGRhdGEtcGFyc2xleS1iYXo9XCJiYXpcIj48L2Zvcm0+Jyk7XG4gICAgd2luZG93LlBhcnNsZXlDb25maWcgPSBPYmplY3QuYXNzaWduKHdpbmRvdy5QYXJzbGV5Q29uZmlnLCB7YmFyOiAnYmF6JywgYmF6OiAncXV4J30pO1xuICAgIHZhciBwYXJzbGV5SW5zdGFuY2UgPSBuZXcgRmFjdG9yeSgkKCcjZWxlbWVudCcpWzBdLCB7cXV4OiAnYnV4J30pO1xuICAgIGV4cGVjdChwYXJzbGV5SW5zdGFuY2Uub3B0aW9ucy5mb28pLnRvLmJlKCdiYXInKTtcbiAgICBleHBlY3QocGFyc2xleUluc3RhbmNlLm9wdGlvbnMuYmF6KS50by5iZSgnYmF6Jyk7XG4gICAgZXhwZWN0KHBhcnNsZXlJbnN0YW5jZS5vcHRpb25zLmJhcikudG8uYmUoJ2JheicpO1xuICAgIGV4cGVjdChwYXJzbGV5SW5zdGFuY2Uub3B0aW9ucy5xdXgpLnRvLmJlKCdidXgnKTtcbiAgICBkZWxldGUgd2luZG93LlBhcnNsZXlDb25maWcuYmFyO1xuICAgIGRlbGV0ZSB3aW5kb3cuUGFyc2xleUNvbmZpZy5iYXo7XG4gIH0pO1xuICBpdCgnc2hvdWxkIGhhdmUgYSBqcXVlcnkgcGx1Z2luIEFQSScsICgpID0+IHtcbiAgICAkKCdib2R5JykuYXBwZW5kKCc8aW5wdXQgdHlwZT1cInRleHRcIiBpZD1cImVsZW1lbnRcIiBkYXRhLXBhcnNsZXktbmFtZXNwYWNlPVwiYmF6LVwiPjwvZGl2PicpO1xuICAgIHZhciBwYXJzbGV5SW5zdGFuY2UgPSAkKCcjZWxlbWVudCcpLnBhcnNsZXkoe2ZvbzogJ2Jhcid9KTtcbiAgICBleHBlY3QocGFyc2xleUluc3RhbmNlLl9fY2xhc3NfXykudG8uYmUoJ0ZpZWxkJyk7XG4gICAgZXhwZWN0KHBhcnNsZXlJbnN0YW5jZS5vcHRpb25zLm5hbWVzcGFjZSkudG8uYmUoJ2Jhei0nKTtcbiAgICBleHBlY3QocGFyc2xleUluc3RhbmNlLm9wdGlvbnMuZm9vKS50by5iZSgnYmFyJyk7XG4gIH0pO1xuICBpdCgnc2hvdWxkIGhhdmUgYSBqcXVlcnkgQVBJIHJldHVybmluZyB1bmRlZmluZWQgaWYgZG9uZSBvbiBhIGVtcHR5IHNldCcsICgpID0+IHtcbiAgICBleHBlY3QoJCgnI2ZvbycpLnBhcnNsZXkoKSkudG8uYmUodW5kZWZpbmVkKTtcbiAgfSk7XG4gIGl0KCdzaG91bGQgaGF2ZSBhIGpxdWVyeSBBUEkgdGhhdCBiaW5kcyBtdWx0aXBsZSBzZWxlY3RvcnMnLCAoKSA9PiB7XG4gICAgJCgnYm9keScpLmFwcGVuZCgnPGRpdiBpZD1cImVsZW1lbnRcIj4nICtcbiAgICAgICc8aW5wdXQgdHlwZT1cInRleHRcIiBpZD1cImZvb1wiIHJlcXVpcmVkIC8+JyArXG4gICAgICAnPGlucHV0IHR5cGU9XCJ0ZXh0XCIgaWQ9XCJiYXJcIiByZXF1aXJlZCAvPicgK1xuICAgICc8L2Rpdj4nKTtcbiAgICBleHBlY3QoJCgnaW5wdXQnKS5wYXJzbGV5KCkubGVuZ3RoKS50by5iZSgyKTtcbiAgfSk7XG4gIGl0KCdzaG91bGQgc2V0IG9wdGlvbnMgd2l0aCAkLmZuLnBhcnNsZXknLCAoKSA9PiB7XG4gICAgJCgnYm9keScpLmFwcGVuZCgnPGZvcm0gaWQ9XCJlbGVtZW50XCIgZGF0YS1wYXJzbGV5LWZvbz1cImJhclwiPjwvZm9ybT4nKTtcbiAgICB2YXIgcGFyc2xleUluc3RhbmNlID0gJCgnI2VsZW1lbnQnKS5wYXJzbGV5KHtmb286IDQyfSk7XG4gICAgZXhwZWN0KHBhcnNsZXlJbnN0YW5jZS5vcHRpb25zLmZvbykudG8uYmUoNDIpO1xuICAgICQoJyNlbGVtZW50JykucGFyc2xleSh7Zm9vOiAndXBkYXRlZCd9KTtcbiAgICBleHBlY3QocGFyc2xleUluc3RhbmNlLm9wdGlvbnMuZm9vKS50by5iZSgndXBkYXRlZCcpO1xuICAgIGRlbGV0ZSBwYXJzbGV5SW5zdGFuY2Uub3B0aW9ucy5mb287XG4gICAgZXhwZWN0KHBhcnNsZXlJbnN0YW5jZS5vcHRpb25zLmZvbykudG8uYmUoJ2JhcicpO1xuICB9KTtcblxuICBhZnRlckVhY2goKCkgPT4ge1xuICAgICQoJyNlbGVtZW50JykucmVtb3ZlKCk7XG4gIH0pO1xufSk7XG4iLCJpbXBvcnQgJCBmcm9tICdqcXVlcnknO1xuaW1wb3J0IFBhcnNsZXkgZnJvbSAnLi4vLi4vc3JjL3BhcnNsZXknO1xuXG5kZXNjcmliZSgnUHViU3ViJywgKCkgPT4ge1xuICBpdCgnbGlzdGVuKCkgd2l0aG91dCBjb250ZXh0JywgZG9uZSA9PiB7XG4gICAgZXhwZWN0V2FybmluZygoKSA9PiB7XG4gICAgICAkLmxpc3RlbignZm9vJywgKGluc3RhbmNlLCBhcmcpID0+IHtcbiAgICAgICAgZXhwZWN0KGFyZykudG8uYmUoJ2JhcicpO1xuICAgICAgICBkb25lKCk7XG4gICAgICB9KTtcbiAgICB9KTtcbiAgICAkLmVtaXQoJ2ZvbycsICdiYXInKTtcbiAgfSk7XG4gIGl0KCdsaXN0ZW4oKSB3aXRoIGNvbnRleHQnLCBkb25lID0+IHtcbiAgICB2YXIgb2JqID0ge2ZvbzogYmFyID0+IHsgcmV0dXJuICdmb28nICsgYmFyOyB9fTtcbiAgICAkLmxpc3RlbignZm9vJywgb2JqLCBmdW5jdGlvbiAoaW5zdGFuY2UsIGFyZykge1xuICAgICAgZXhwZWN0KHRoaXMuZm9vKGFyZykpLnRvLmJlKCdmb29iYXInKTtcbiAgICAgIGRvbmUoKTtcbiAgICB9KTtcbiAgICAkLmVtaXQoJ2ZvbycsICdiYXInKTtcbiAgfSk7XG4gIGl0KCdsaXN0ZW5UbygpIEZpZWxkJywgZG9uZSA9PiB7XG4gICAgJCgnYm9keScpLmFwcGVuZCgnPGlucHV0IHR5cGU9XCJ0ZXh0XCIgaWQ9XCJlbGVtZW50XCIgLz4nKTtcbiAgICAkKCdib2R5JykuYXBwZW5kKCc8aW5wdXQgdHlwZT1cInRleHRcIiBpZD1cImVsZW1lbnQyXCIgLz4nKTtcblxuICAgIHZhciBpbnN0YW5jZSA9ICQoJyNlbGVtZW50JykucHNseSgpO1xuXG4gICAgJC5saXN0ZW5UbyhpbnN0YW5jZSwgJ2ZvbycsIHBhcnNsZXlJbnN0YW5jZSA9PiB7XG4gICAgICBleHBlY3QocGFyc2xleUluc3RhbmNlLl9faWRfXykudG8uYmUoaW5zdGFuY2UuX19pZF9fKTtcbiAgICAgIGRvbmUoKTtcbiAgICB9KTtcblxuICAgICQuZW1pdCgnZm9vJywgJ2JhcicpO1xuICAgICQuZW1pdCgnZm9vJywgJCgnI2VsZW1lbnQyJykucHNseSgpKTtcbiAgICAkLmVtaXQoJ2ZvbycsIGluc3RhbmNlKTtcbiAgfSk7XG4gIGl0KCdsaXN0ZW5UbygpIEZvcm0gd2lsbCBsaXN0ZW4gdG8gRm9ybScsIGRvbmUgPT4ge1xuICAgICQoJ2JvZHknKS5hcHBlbmQoXG4gICAgICAnPGZvcm0gaWQ9XCJlbGVtZW50XCIgZGF0YS1wYXJzbGV5LXRyaWdnZXI9XCJjaGFuZ2VcIj4nICAgICAgICAgICAgICAgICArXG4gICAgICAgICc8aW5wdXQgaWQ9XCJmaWVsZDFcIiB0eXBlPVwidGV4dFwiIGRhdGEtcGFyc2xleS1yZXF1aXJlZD1cInRydWVcIiAvPicgICtcbiAgICAgICAgJzxkaXYgaWQ9XCJmaWVsZDJcIj48L2Rpdj4nICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICArXG4gICAgICAgICc8dGV4dGFyZWEgaWQ9XCJmaWVsZDNcIiBkYXRhLXBhcnNsZXktbm90Ymxhbms9XCJ0cnVlXCI+PC90ZXh0YXJlYT4nICArXG4gICAgICAnPC9mb3JtPicpO1xuXG4gICAgJC5saXN0ZW5UbygkKCcjZWxlbWVudCcpLnBzbHkoKSwgJ2ZvbycsIHBhcnNsZXlJbnN0YW5jZSA9PiB7XG4gICAgICBleHBlY3QoJCgnI2VsZW1lbnQnKS5wc2x5KCkuX19pZF9fID09PSBwYXJzbGV5SW5zdGFuY2UuX19pZF9fKTtcbiAgICAgIGRvbmUoKTtcbiAgICB9KTtcblxuICAgICQuZW1pdCgnZm9vJywgJCgnI2VsZW1lbnQnKS5wc2x5KCkpO1xuICB9KTtcbiAgaXQoJ2xpc3RlblRvKCkgRm9ybSB3aWxsIGxpc3RlbiB0byBpdHMgZmllbGRzIHRvbycsIGRvbmUgPT4ge1xuICAgICQoJ2JvZHknKS5hcHBlbmQoXG4gICAgICAnPGZvcm0gaWQ9XCJlbGVtZW50XCIgZGF0YS1wYXJzbGV5LXRyaWdnZXI9XCJjaGFuZ2VcIj4nICAgICAgICAgICAgICAgICArXG4gICAgICAgICc8aW5wdXQgaWQ9XCJmaWVsZDFcIiB0eXBlPVwidGV4dFwiIGRhdGEtcGFyc2xleS1yZXF1aXJlZD1cInRydWVcIiAvPicgICtcbiAgICAgICAgJzxkaXYgaWQ9XCJmaWVsZDJcIj48L2Rpdj4nICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICArXG4gICAgICAgICc8dGV4dGFyZWEgaWQ9XCJmaWVsZDNcIiBkYXRhLXBhcnNsZXktbm90Ymxhbms9XCJ0cnVlXCI+PC90ZXh0YXJlYT4nICArXG4gICAgICAnPC9mb3JtPicpO1xuXG4gICAgJC5saXN0ZW5UbygkKCcjZWxlbWVudCcpLnBzbHkoKSwgJ2ZvbycsIGluc3RhbmNlID0+IHtcbiAgICAgIGRvbmUoKTtcbiAgICB9KTtcblxuICAgICQuZW1pdCgnZm9vJywgJCgnI2ZpZWxkMScpLnBzbHkoKSk7XG4gIH0pO1xuICBpdCgndW5zdWJzY3JpYmVUbygpJywgZG9uZSA9PiB7XG4gICAgJCgnYm9keScpLmFwcGVuZCgnPGlucHV0IHR5cGU9XCJ0ZXh0XCIgaWQ9XCJlbGVtZW50XCIgLz4nKTtcbiAgICAkLmxpc3RlbignZm9vJywgKCkgPT4geyBkb25lKCk7IH0pO1xuICAgICQubGlzdGVuVG8oJCgnI2VsZW1lbnQnKS5wc2x5KCksICdmb28nLCAoKSA9PiB7IGV4cGVjdCh0cnVlKS50by5iZShmYWxzZSk7IH0pO1xuICAgICQudW5zdWJzY3JpYmVUbygkKCcjZWxlbWVudCcpLnBzbHkoKSwgJ2ZvbycpO1xuICAgICQuZW1pdCgnZm9vJywgJCgnI2VsZW1lbnQnKS5wc2x5KCkpO1xuICB9KTtcbiAgaXQoJ3Vuc3Vic2NyaWJlKCknLCAoKSA9PiB7XG4gICAgdmFyIGZuID0gKCkgPT4geyBleHBlY3QodHJ1ZSkudG8uYmUoZmFsc2UpOyB9O1xuICAgICQubGlzdGVuKCdmb28nLCBmbik7XG4gICAgJC51bnN1YnNjcmliZSgnZm9vJywgZm4pO1xuICAgICQuZW1pdCgnZm9vJyk7XG4gIH0pO1xuICBhZnRlckVhY2goKCkgPT4ge1xuICAgICQoJyNlbGVtZW50LCAjZWxlbWVudDInKS5yZW1vdmUoKTtcblxuICAgICQudW5zdWJzY3JpYmVBbGwoJ2ZvbycpO1xuICB9KTtcbn0pO1xuIiwiaW1wb3J0ICQgZnJvbSAnanF1ZXJ5JztcblxuaW1wb3J0IFBhcnNsZXkgZnJvbSAnLi4vLi4vc3JjL3BhcnNsZXknO1xuXG5kZXNjcmliZSgnUGFyc2xleVJlbW90ZScsICgpID0+IHtcbiAgdmFyIHN0dWJiZWQgPSBmYWxzZTtcbiAgdmFyIHN0dWJBamF4ID0gc3RhdHVzID0+IHtcbiAgICByZXN0b3JlQWpheCgpO1xuICAgIHZhciBkZWZlcnJlZCA9ICQuRGVmZXJyZWQoKTtcbiAgICB2YXIgeGhyID0gT2JqZWN0LmFzc2lnbihkZWZlcnJlZC5wcm9taXNlKCksIHtzdGF0dXM6IHN0YXR1c30pO1xuICAgIGlmIChzdGF0dXMgPT09IDIwMCkge1xuICAgICAgZGVmZXJyZWQucmVzb2x2ZSh7fSwgJ3N1Y2Nlc3MnLCAneGhyJyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGRlZmVycmVkLnJlamVjdCh4aHIsICdlcnJvcicsICdlcnJvcicpO1xuICAgIH1cbiAgICBzaW5vbi5zdHViKCQsICdhamF4JykucmV0dXJucyh4aHIpO1xuICAgIHN0dWJiZWQgPSB0cnVlO1xuICB9O1xuICB2YXIgcmVzdG9yZUFqYXggPSAoKSA9PiB7XG4gICAgaWYgKHN0dWJiZWQpXG4gICAgICAkLmFqYXgucmVzdG9yZSgpO1xuICAgIHN0dWJiZWQgPSBmYWxzZTtcbiAgfTtcblxuICBhZnRlckVhY2gocmVzdG9yZUFqYXgpO1xuXG4gIGJlZm9yZUVhY2goKCkgPT4ge1xuICAgIGRlbGV0ZSB3aW5kb3cuUGFyc2xleS5fcmVtb3RlQ2FjaGU7XG4gIH0pO1xuICBpdCgnc2hvdWxkIGhhdmUgd2luZG93LlBhcnNsZXlFeHRlbmQgZGVmaW5lZCcsICgpID0+IHtcbiAgICBleHBlY3Qod2luZG93LlBhcnNsZXlFeHRlbmQpLm5vdC50by5iZSh1bmRlZmluZWQpO1xuICB9KTtcbiAgaXQoJ3Nob3VsZCBoYW5kbGUgcHJvcGVybHkgdmFsaWRhdGlvbiB3aXRoIHJlbW90ZSB2YWxpZGF0b3InLCBkb25lID0+IHtcbiAgICAkKCdib2R5JykuYXBwZW5kKCc8aW5wdXQgdHlwZT1cInRleHRcIiBkYXRhLXBhcnNsZXktcmVtb3RlPVwiaHR0cDovL2Zvby5iYXJcIiBpZD1cImVsZW1lbnRcIiByZXF1aXJlZCBuYW1lPVwiZWxlbWVudFwiIHZhbHVlPVwiZm9vXCIgLz4nKTtcbiAgICB2YXIgcGFyc2xleUluc3RhbmNlID0gJCgnI2VsZW1lbnQnKS5wYXJzbGV5KCk7XG5cbiAgICBzdHViQWpheCg0MDApO1xuXG4gICAgcGFyc2xleUluc3RhbmNlLndoZW5WYWxpZCgpXG4gICAgICAuZmFpbCgoKSA9PiB7XG4gICAgICAgIHN0dWJBamF4KDIwMCk7XG5cbiAgICAgICAgJCgnI2VsZW1lbnQnKS52YWwoJ2JhcicpO1xuICAgICAgICBwYXJzbGV5SW5zdGFuY2Uud2hlblZhbGlkKClcbiAgICAgICAgICAuZG9uZSgoKSA9PiB7IGRvbmUoKTsgfSk7XG4gICAgICB9KTtcbiAgfSk7XG4gIGl0KCdzaG91bGQgaGFuZGxlIHJlbW90ZSByZXZlcnNlIG9wdGlvbicsIGRvbmUgPT4ge1xuICAgICQoJ2JvZHknKS5hcHBlbmQoJzxpbnB1dCB0eXBlPVwidGV4dFwiIGRhdGEtcGFyc2xleS1yZW1vdGU9XCJodHRwOi8vZm9vLmJhclwiIGlkPVwiZWxlbWVudFwiIGRhdGEtcGFyc2xleS1yZW1vdGUtcmV2ZXJzZT1cInRydWVcIiByZXF1aXJlZCBuYW1lPVwiZWxlbWVudFwiIHZhbHVlPVwiYmF6XCIgLz4nKTtcbiAgICB2YXIgcGFyc2xleUluc3RhbmNlID0gJCgnI2VsZW1lbnQnKS5wYXJzbGV5KCk7XG5cbiAgICBzdHViQWpheCgyMDApO1xuICAgIHBhcnNsZXlJbnN0YW5jZS53aGVuVmFsaWQoKVxuICAgICAgLmZhaWwoKCkgPT4ge1xuICAgICAgICBzdHViQWpheCg0MDApO1xuXG4gICAgICAgICQoJyNlbGVtZW50JykudmFsKCdidXgnKTtcbiAgICAgICAgcGFyc2xleUluc3RhbmNlLndoZW5WYWxpZCgpXG4gICAgICAgICAgLmRvbmUoKCkgPT4geyBkb25lKCk7IH0pO1xuICAgICAgfSk7XG4gIH0pO1xuICBpdCgnc2hvdWxkIGhhbmRsZSByZW1vdGUgb3B0aW9ucycsIGRvbmUgPT4ge1xuICAgICQoJ2JvZHknKS5hcHBlbmQoJzxpbnB1dCB0eXBlPVwidGV4dFwiIGRhdGEtcGFyc2xleS1yZW1vdGU9XCJodHRwOi8vZm9vLmJhclwiIGlkPVwiZWxlbWVudFwiIGRhdGEtcGFyc2xleS1yZW1vdGUtb3B0aW9ucz1cXCd7IFwidHlwZVwiOiBcIlBPU1RcIiwgXCJkYXRhXCI6IHtcImZvb1wiOiBcImJhclwifSB9XFwnIHJlcXVpcmVkIG5hbWU9XCJlbGVtZW50XCIgdmFsdWU9XCJiYXpcIiAvPicpO1xuICAgIHZhciBwYXJzbGV5SW5zdGFuY2UgPSAkKCcjZWxlbWVudCcpLnBhcnNsZXkoKTtcblxuICAgIHN0dWJBamF4KDIwMCk7XG4gICAgcGFyc2xleUluc3RhbmNlLndoZW5WYWxpZCgpXG4gICAgICAuZG9uZSgoKSA9PiB7XG4gICAgICAgIGV4cGVjdCgkLmFqYXguY2FsbGVkV2l0aE1hdGNoKHt0eXBlOiAnUE9TVCd9KSkudG8uYmUodHJ1ZSk7XG4gICAgICAgIGV4cGVjdCgkLmFqYXguY2FsbGVkV2l0aE1hdGNoKHt1cmw6ICdodHRwOi8vZm9vLmJhcid9KSkudG8uYmUodHJ1ZSk7XG4gICAgICAgIGV4cGVjdCgkLmFqYXguY2FsbGVkV2l0aE1hdGNoKHtkYXRhOiB7Zm9vOiAnYmFyJywgZWxlbWVudDogJ2Jheid9fSkpLnRvLmJlKHRydWUpO1xuICAgICAgICBkb25lKCk7XG4gICAgICB9KTtcbiAgfSk7XG4gIGl0KCdzaG91bGQgc2F2ZSBzb21lIGNhbGxzIGZvciBxdWVyaWVzIGFscmVhZHkgZG9uZScsIGRvbmUgPT4ge1xuICAgICQoJ2JvZHknKS5hcHBlbmQoJzxpbnB1dCB0eXBlPVwidGV4dFwiIGRhdGEtcGFyc2xleS1yZW1vdGU9XCJodHRwOi8vZm9vLmJhclwiIGlkPVwiZWxlbWVudFwiIHJlcXVpcmVkIG5hbWU9XCJlbGVtZW50XCIgdmFsdWU9XCJmb29cIiAvPicpO1xuICAgIHZhciBwYXJzbGV5SW5zdGFuY2UgPSAkKCcjZWxlbWVudCcpLnBhcnNsZXkoKTtcblxuICAgIHN0dWJBamF4KDIwMCk7XG4gICAgcGFyc2xleUluc3RhbmNlLndoZW5WYWxpZCgpXG4gICAgICAuZG9uZSgoKSA9PiB7XG4gICAgICAgIGV4cGVjdCgkLmFqYXguY2FsbGVkT25jZSkudG8uYmUodHJ1ZSk7XG4gICAgICAgIGV4cGVjdCgkLmFqYXguY2FsbGVkV2l0aE1hdGNoKHtkYXRhOiB7ZWxlbWVudDogJ2Zvbyd9fSkpLnRvLmJlKHRydWUpO1xuICAgICAgICBzdHViQWpheCg0MDApO1xuXG4gICAgICAgICQoJyNlbGVtZW50JykudmFsKCdiYXInKTtcbiAgICAgICAgcGFyc2xleUluc3RhbmNlLndoZW5WYWxpZCgpXG4gICAgICAgICAgLmZhaWwoKCkgPT4ge1xuICAgICAgICAgICAgZXhwZWN0KCQuYWpheC5jYWxsZWRPbmNlKS50by5iZSh0cnVlKTtcbiAgICAgICAgICAgIGV4cGVjdCgkLmFqYXguY2FsbGVkV2l0aE1hdGNoKHtkYXRhOiB7ZWxlbWVudDogJ2Jhcid9fSkpLnRvLmJlKHRydWUpO1xuXG4gICAgICAgICAgICBzdHViQWpheCgyMDApO1xuICAgICAgICAgICAgJCgnI2VsZW1lbnQnKS52YWwoJ2ZvbycpO1xuXG4gICAgICAgICAgICBwYXJzbGV5SW5zdGFuY2Uud2hlblZhbGlkKClcbiAgICAgICAgICAgICAgLmRvbmUoKCkgPT4ge1xuICAgICAgICAgICAgICAgIGV4cGVjdCgkLmFqYXguY2FsbENvdW50KS50by5iZSgwKTtcbiAgICAgICAgICAgICAgICBleHBlY3QoJC5hamF4LmNhbGxlZE9uY2UpLnRvLmJlKGZhbHNlKTtcbiAgICAgICAgICAgICAgICBkb25lKCk7XG4gICAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH0pO1xuICAgICAgfSk7XG4gIH0pO1xuXG4gIGl0KCdzaG91bGQgaGFuZGxlIHJlbW90ZSB2YWxpZGF0b3Igb3B0aW9uJywgZG9uZSA9PiB7XG4gICAgd2luZG93LlBhcnNsZXkuYWRkQXN5bmNWYWxpZGF0b3IoJ2N1c3RvbScsIHhociA9PiB7XG4gICAgICByZXR1cm4geGhyLnN0YXR1cyA9PT0gNDA0O1xuICAgIH0pO1xuXG4gICAgJCgnYm9keScpLmFwcGVuZCgnPGlucHV0IHR5cGU9XCJ0ZXh0XCIgZGF0YS1wYXJzbGV5LXJlbW90ZT1cImh0dHA6Ly9mb28uYmFyXCIgaWQ9XCJlbGVtZW50XCIgZGF0YS1wYXJzbGV5LXJlbW90ZS12YWxpZGF0b3I9XCJjdXN0b21cIiByZXF1aXJlZCBuYW1lPVwiZWxlbWVudFwiIHZhbHVlPVwiZm9vYmFyXCIgLz4nKTtcbiAgICB2YXIgcGFyc2xleUluc3RhbmNlID0gJCgnI2VsZW1lbnQnKS5wYXJzbGV5KCk7XG5cbiAgICBzdHViQWpheCgyMDApO1xuICAgIHBhcnNsZXlJbnN0YW5jZS53aGVuVmFsaWQoKVxuICAgICAgLmZhaWwoKCkgPT4ge1xuICAgICAgICBzdHViQWpheCg0MDApO1xuXG4gICAgICAgICQoJyNlbGVtZW50JykudmFsKCdmb29iYXonKTtcbiAgICAgICAgcGFyc2xleUluc3RhbmNlLndoZW5WYWxpZCgpXG4gICAgICAgICAgLmZhaWwoKCkgPT4ge1xuICAgICAgICAgICAgc3R1YkFqYXgoNDA0KTtcblxuICAgICAgICAgICAgJCgnI2VsZW1lbnQnKS52YWwoJ2Zvb3F1dXgnKTtcbiAgICAgICAgICAgIHBhcnNsZXlJbnN0YW5jZS53aGVuVmFsaWQoKVxuICAgICAgICAgICAgICAuZG9uZSgoKSA9PiB7IGRvbmUoKTsgfSk7XG4gICAgICAgICAgfSk7XG4gICAgICB9KTtcbiAgfSk7XG4gIGl0KCdzaG91bGQgaGFuZGxlIHJlbW90ZSB2YWxpZGF0b3Igb3B0aW9uIHdpdGggY3VzdG9tIHVybCcsIGRvbmUgPT4ge1xuICAgICQoJ2JvZHknKS5hcHBlbmQoJzxpbnB1dCB0eXBlPVwidGV4dFwiIGRhdGEtcGFyc2xleS1yZW1vdGUgaWQ9XCJlbGVtZW50XCIgZGF0YS1wYXJzbGV5LXJlbW90ZS12YWxpZGF0b3I9XCJteWN1c3RvbVwiIHJlcXVpcmVkIG5hbWU9XCJlbGVtZW50XCIgdmFsdWU9XCJmb29iYXJcIiAvPicpO1xuICAgIHZhciBwYXJzbGV5SW5zdGFuY2UgPSAkKCcjZWxlbWVudCcpLnBhcnNsZXkoKTtcblxuICAgIHdpbmRvdy5QYXJzbGV5LmFkZEFzeW5jVmFsaWRhdG9yKCdteWN1c3RvbScsIHhociA9PiB7XG4gICAgICByZXR1cm4geGhyLnN0YXR1cyA9PT0gNDA0O1xuICAgIH0sICdodHRwOi8vZm9vYmFyLmJheicpO1xuXG4gICAgc3R1YkFqYXgoMjAwKTtcbiAgICBwYXJzbGV5SW5zdGFuY2Uud2hlblZhbGlkKClcbiAgICAgIC5mYWlsKCgpID0+IHtcbiAgICAgICAgZXhwZWN0KCQuYWpheC5jYWxsZWRXaXRoTWF0Y2goe3VybDogJ2h0dHA6Ly9mb29iYXIuYmF6J30pKS50by5iZSh0cnVlKTtcbiAgICAgICAgZG9uZSgpO1xuICAgICAgfSk7XG4gIH0pO1xuICBpdCgnc2hvdWxkIGhhdmUgUGx1Z2luRmllbGQgYXMgdGhlIGB0aGlzYCBjb250ZXh0IG9mIHRoZSBBSkFYIGNhbGxiYWNrJywgZG9uZSA9PiB7XG4gICAgJCgnYm9keScpLmFwcGVuZCgnPGlucHV0IHR5cGU9XCJ0ZXh0XCIgZGF0YS1wYXJzbGV5LXJlbW90ZSBpZD1cImVsZW1lbnRcIiBkYXRhLXBhcnNsZXktcmVtb3RlLXZhbGlkYXRvcj1cIm15Y3VzdG9tXCIgcmVxdWlyZWQgbmFtZT1cImVsZW1lbnRcIiB2YWx1ZT1cImZvb2JhclwiIC8+Jyk7XG4gICAgdmFyIHBhcnNsZXlJbnN0YW5jZSA9ICQoJyNlbGVtZW50JykucGFyc2xleSgpO1xuXG4gICAgd2luZG93LlBhcnNsZXkuYWRkQXN5bmNWYWxpZGF0b3IoJ215Y3VzdG9tJywgZnVuY3Rpb24gKHhocikge1xuICAgICAgZXhwZWN0KHRoaXMuX19jbGFzc19fKS50by5iZSgnRmllbGQnKTtcbiAgICB9LCAnaHR0cDovL2Zvb2Jhci5iYXonKTtcblxuICAgIHN0dWJBamF4KDIwMCk7XG4gICAgcGFyc2xleUluc3RhbmNlLndoZW5WYWxpZCgpXG4gICAgICAuZmFpbCgoKSA9PiB7XG4gICAgICAgIGV4cGVjdCgkLmFqYXguY2FsbGVkV2l0aE1hdGNoKHt1cmw6ICdodHRwOi8vZm9vYmFyLmJheid9KSkudG8uYmUodHJ1ZSk7XG4gICAgICAgIGRvbmUoKTtcbiAgICAgIH0pO1xuICB9KTtcblxuICBpdCgnc2hvdWxkIGhhbmRsZSBkZXByZWNhdGVkIGNhbGwgdG8gYWRkQXN5bmNWYWxpZGF0b3IgdXNpbmcgYW4gaW5zdGFuY2UnLCAoKSA9PiB7XG4gICAgJCgnYm9keScpLmFwcGVuZCgnPGlucHV0IHR5cGU9XCJ0ZXh0XCIgZGF0YS1wYXJzbGV5LXJlbW90ZSBpZD1cImVsZW1lbnRcIiBkYXRhLXBhcnNsZXktcmVtb3RlLXZhbGlkYXRvcj1cIm15Y3VzdG9tXCIgcmVxdWlyZWQgbmFtZT1cImVsZW1lbnRcIiB2YWx1ZT1cImZvb2JhclwiIC8+Jyk7XG5cbiAgICBleHBlY3RXYXJuaW5nKCgpID0+IHtcbiAgICAgICQoJ2lucHV0JykucGFyc2xleSgpLmFkZEFzeW5jVmFsaWRhdG9yKCdpbnN0YW5jZXRlc3QnLCAkLm5vb3AsICcnKTtcbiAgICB9KTtcbiAgICBleHBlY3QoUGFyc2xleS5hc3luY1ZhbGlkYXRvcnMuaW5zdGFuY2V0ZXN0KS5ub3QudG8uYmUodW5kZWZpbmVkKTtcbiAgfSk7XG5cbiAgaXQoJ3Nob3VsZCBjbGVhciB0aGUgY2FjaGUgYmVmb3JlIGFuZCBhZnRlciBzdWJtaXR0aW5nIGEgZm9ybScsICgpID0+IHtcbiAgICB2YXIgcGFyc2xleUluc3RhbmNlID1cbiAgICAgICQoJzxmb3JtIGlkPVwiZWxlbWVudFwiPjxpbnB1dCB0eXBlPVwidGV4dFwiIHJlcXVpcmVkPjwvZm9ybT4nKVxuICAgICAgLmFwcGVuZFRvKCdib2R5JylcbiAgICAgIC5vbignc3VibWl0JywgZXZ0ID0+IHsgZXZ0LnByZXZlbnREZWZhdWx0KCk7IH0pXG4gICAgICAucGFyc2xleSgpO1xuICAgIHdpbmRvdy5QYXJzbGV5Ll9yZW1vdGVDYWNoZSA9IHtkdW1teTogNDJ9O1xuICAgICQoJyNlbGVtZW50Jykuc3VibWl0KCk7XG4gICAgZXhwZWN0KHdpbmRvdy5QYXJzbGV5Ll9yZW1vdGVDYWNoZS5kdW1teSkudG8uYmUodW5kZWZpbmVkKTtcbiAgICB3aW5kb3cuUGFyc2xleS5fcmVtb3RlQ2FjaGUgPSB7ZHVtbXk6IDQyfTtcbiAgICAkKCcjZWxlbWVudCBpbnB1dCcpLnZhbCgnaGVsbG8nKTtcbiAgICBwYXJzbGV5SW5zdGFuY2UudmFsaWRhdGUoKTtcbiAgICBleHBlY3Qod2luZG93LlBhcnNsZXkuX3JlbW90ZUNhY2hlLmR1bW15KS50by5iZSg0Mik7XG4gICAgJCgnI2VsZW1lbnQnKS5zdWJtaXQoKTtcbiAgICBleHBlY3Qod2luZG93LlBhcnNsZXkuX3JlbW90ZUNhY2hlLmR1bW15KS50by5iZSh1bmRlZmluZWQpO1xuICB9KTtcblxuICBpdCgnc2hvdWxkIGFsbG93IHRoZSBjaGFuZ2Ugb2YgWEhSIG9wdGlvbnMnLCBkb25lID0+IHtcbiAgICB2YXIgcGFyc2xleUluc3RhbmNlID1cbiAgICAgICQoJzxpbnB1dCBpZD1cImVsZW1lbnRcIiBkYXRhLXBhcnNsZXktcmVtb3RlPVwiaHR0cDovL3BhcnNsZXlqcy5vcmdcIiBuYW1lPVwiZWxlbWVudFwiIHZhbHVlPVwiZm9vYmFyXCIvPicpXG4gICAgICAuYXBwZW5kVG8oJ2JvZHknKVxuICAgICAgLnBhcnNsZXkoKVxuICAgICAgLm9uKCdmaWVsZDphamF4b3B0aW9ucycsIChmaWVsZCwgb3B0aW9ucykgPT4ge1xuICAgICAgICBvcHRpb25zLnVybCA9IG9wdGlvbnMudXJsICsgJy90ZXN0LycgKyBvcHRpb25zLmRhdGEuZWxlbWVudDtcbiAgICAgIH0pO1xuXG4gICAgc3R1YkFqYXgoMjAwKTtcbiAgICBwYXJzbGV5SW5zdGFuY2Uud2hlblZhbGlkKClcbiAgICAgIC5kb25lKCgpID0+IHtcbiAgICAgICAgZXhwZWN0KCQuYWpheC5jYWxsZWRXaXRoTWF0Y2goe3VybDogJ2h0dHA6Ly9wYXJzbGV5anMub3JnL3Rlc3QvZm9vYmFyJ30pKS50by5iZSh0cnVlKTtcbiAgICAgICAgZXhwZWN0KCQuYWpheC5jYWxsZWRXaXRoTWF0Y2goe2RhdGE6IHtlbGVtZW50OiAnZm9vYmFyJ319KSkudG8uYmUodHJ1ZSk7XG4gICAgICAgIGRvbmUoKTtcbiAgICAgIH0pO1xuICB9KTtcblxuICBpdCgnc2hvdWxkIGFsbG93IFJFU1RmdWwgVVJMcycsIGRvbmUgPT4ge1xuICAgIHZhciBwYXJzbGV5SW5zdGFuY2UgPVxuICAgICAgJCgnPGlucHV0IGlkPVwiZWxlbWVudFwiIGRhdGEtcGFyc2xleS1yZW1vdGU9XCJodHRwOi8vcGFyc2xleWpzLm9yZy90aGlzaXNyZXN0L3t2YWx1ZX1cIiBuYW1lPVwiZWxlbWVudFwiIHZhbHVlPVwiZm9vIGJhclwiLz4nKVxuICAgICAgLmFwcGVuZFRvKCdib2R5JylcbiAgICAgIC5wYXJzbGV5KCk7XG5cbiAgICBzdHViQWpheCgyMDApO1xuICAgIHBhcnNsZXlJbnN0YW5jZS53aGVuVmFsaWQoKVxuICAgICAgLmRvbmUoKCkgPT4ge1xuICAgICAgICBleHBlY3QoJC5hamF4LmNhbGxlZFdpdGhNYXRjaCh7dXJsOiAnaHR0cDovL3BhcnNsZXlqcy5vcmcvdGhpc2lzcmVzdC9mb28lMjBiYXInfSkpLnRvLmJlKHRydWUpO1xuICAgICAgICBleHBlY3QoJC5hamF4LmNhbGxlZFdpdGhNYXRjaCh7ZGF0YToge2VsZW1lbnQ6ICdmb28gYmFyJ319KSkudG8uYmUoZmFsc2UpO1xuICAgICAgICBkb25lKCk7XG4gICAgICB9KTtcbiAgfSk7XG5cbiAgaXQuc2tpcCgnc2hvdWxkIGFib3J0IHN1Y2Nlc3NpdmVzIHF1ZXJyaWVzIGFuZCBkbyBub3QgaGFuZGxlIHRoZWlyIHJldHVybicpO1xuICBhZnRlckVhY2goKCkgPT4ge1xuICAgICQoJyNlbGVtZW50LCAucGFyc2xleS1lcnJvcnMtbGlzdCcpLnJlbW92ZSgpO1xuICB9KTtcbn0pO1xuIiwiaW1wb3J0ICQgZnJvbSAnanF1ZXJ5JztcbmltcG9ydCBVSSBmcm9tICcuLi8uLi9zcmMvcGFyc2xleS91aSc7XG5pbXBvcnQgUGFyc2xleSBmcm9tICcuLi8uLi9zcmMvcGFyc2xleSc7XG5cbmRlc2NyaWJlKCdVSScsICgpID0+IHtcbiAgYmVmb3JlKCgpID0+IHtcbiAgICBQYXJzbGV5LnNldExvY2FsZSgnZW4nKTtcbiAgfSk7XG5cbiAgaXQoJ3Nob3VsZCBjcmVhdGUgcHJvcGVyIGVycm9ycyBjb250YWluZXIgd2hlbiBuZWVkZWQnLCAoKSA9PiB7XG4gICAgJCgnYm9keScpLmFwcGVuZCgnPGlucHV0IHR5cGU9XCJ0ZXh0XCIgaWQ9XCJlbGVtZW50XCIgZGF0YS1wYXJzbGV5LXJlcXVpcmVkIC8+Jyk7XG4gICAgdmFyIHBhcnNsZXlGaWVsZCA9ICQoJyNlbGVtZW50JykucHNseSgpO1xuICAgIGV4cGVjdCgkKCd1bCNwYXJzbGV5LWlkLScgKyBwYXJzbGV5RmllbGQuX19pZF9fKS5sZW5ndGgpLnRvLmJlKDApO1xuICAgIHBhcnNsZXlGaWVsZC52YWxpZGF0ZSgpO1xuICAgIGV4cGVjdCgkKCcjZWxlbWVudCcpLmF0dHIoJ2RhdGEtcGFyc2xleS1pZCcpKS50by5iZShwYXJzbGV5RmllbGQuX19pZF9fKTtcbiAgICBleHBlY3QoJCgndWwjcGFyc2xleS1pZC0nICsgcGFyc2xleUZpZWxkLl9faWRfXykubGVuZ3RoKS50by5iZSgxKTtcbiAgICBleHBlY3QoJCgndWwjcGFyc2xleS1pZC0nICsgcGFyc2xleUZpZWxkLl9faWRfXykuaGFzQ2xhc3MoJ3BhcnNsZXktZXJyb3JzLWxpc3QnKSkudG8uYmUodHJ1ZSk7XG4gIH0pO1xuICBpdCgnc2hvdWxkIGhhbmRsZSBlcnJvcnMtY29udGFpbmVyIG9wdGlvbicsICgpID0+IHtcbiAgICAkKCdib2R5JykuYXBwZW5kKFxuICAgICAgJzxmb3JtIGlkPVwiZWxlbWVudFwiPicgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgK1xuICAgICAgICAnPGlucHV0IGlkPVwiZmllbGQxXCIgdHlwZT1cInRleHRcIiByZXF1aXJlZCBkYXRhLXBhcnNsZXktZXJyb3JzLWNvbnRhaW5lcj1cIiNjb250YWluZXJcIiAvPicgICtcbiAgICAgICAgJzxkaXYgaWQ9XCJjb250YWluZXJcIj48L2Rpdj4nICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICtcbiAgICAgICAgJzxkaXYgaWQ9XCJjb250YWluZXIyXCI+PC9kaXY+JyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICtcbiAgICAgICc8L2Zvcm0+Jyk7XG4gICAgJCgnI2VsZW1lbnQnKS5wc2x5KCkudmFsaWRhdGUoKTtcbiAgICBleHBlY3QoJCgnI2NvbnRhaW5lciAucGFyc2xleS1lcnJvcnMtbGlzdCcpLmxlbmd0aCkudG8uYmUoMSk7XG4gICAgJCgnI2VsZW1lbnQnKS5wc2x5KCkuZGVzdHJveSgpO1xuICAgICQoJyNmaWVsZDEnKS5yZW1vdmVBdHRyKCdkYXRhLXBhcnNsZXktZXJyb3JzLWNvbnRhaW5lcicpO1xuICAgICQoJyNlbGVtZW50JykucHNseSh7XG4gICAgICBlcnJvcnNDb250YWluZXI6IGZ1bmN0aW9uIChpbnMpIHtcbiAgICAgICAgZXhwZWN0KGlucykudG8uYmUoJCgnI2ZpZWxkMScpLnBzbHkoKSk7XG4gICAgICAgIGV4cGVjdCh0aGlzKS50by5iZSgkKCcjZmllbGQxJykucHNseSgpKTtcbiAgICAgICAgcmV0dXJuICQoJyNjb250YWluZXIyJyk7XG4gICAgICB9XG4gICAgfSkudmFsaWRhdGUoKTtcbiAgICBleHBlY3QoJCgnI2NvbnRhaW5lcjIgLnBhcnNsZXktZXJyb3JzLWxpc3QnKS5sZW5ndGgpLnRvLmJlKDEpO1xuICB9KTtcbiAgaXQoJ3Nob3VsZCBoYW5kbGUgZXJyb3JzLWNvbnRhaW5lciBvcHRpb24gd2l0aCBmdW5jdGlvbicsICgpID0+IHtcbiAgICAkKCdib2R5JykuYXBwZW5kKFxuICAgICAgJzxmb3JtIGlkPVwiZWxlbWVudFwiPicgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICArXG4gICAgICAgICc8aW5wdXQgaWQ9XCJmaWVsZDFcIiB0eXBlPVwidGV4dFwiIHJlcXVpcmVkIGRhdGEtcGFyc2xleS1lcnJvcnMtY29udGFpbmVyPVwicGFyc2xleUNvbnRhaW5lckZ1bmN0aW9uXCIgLz4nICArXG4gICAgICAgICc8ZGl2IGlkPVwiY29udGFpbmVyXCI+PC9kaXY+JyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICtcbiAgICAgICAgJzxkaXYgaWQ9XCJjb250YWluZXIyXCI+PC9kaXY+JyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgK1xuICAgICAgJzwvZm9ybT4nKTtcbiAgICB3aW5kb3cucGFyc2xleUNvbnRhaW5lckZ1bmN0aW9uID0gZnVuY3Rpb24gKGlucykge1xuICAgICAgZXhwZWN0KGlucykudG8uYmUoJCgnI2ZpZWxkMScpLnBzbHkoKSk7XG4gICAgICBleHBlY3QodGhpcykudG8uYmUoJCgnI2ZpZWxkMScpLnBzbHkoKSk7XG4gICAgICByZXR1cm4gJCgnI2NvbnRhaW5lcjInKTtcbiAgICB9O1xuICAgICQoJyNlbGVtZW50JykucHNseSgpLnZhbGlkYXRlKCk7XG4gICAgZXhwZWN0KCQoJyNjb250YWluZXIyIC5wYXJzbGV5LWVycm9ycy1saXN0JykubGVuZ3RoKS50by5iZSgxKTtcbiAgICBkZWxldGUgd2luZG93LnBhcnNsZXlDb250YWluZXJGdW5jdGlvbjtcbiAgfSk7XG4gIGl0KCdzaG91bGQgaGFuZGxlIHdyb25nIGVycm9ycy1jb250YWluZXIgb3B0aW9uJywgKCkgPT4ge1xuICAgICQoJ2JvZHknKS5hcHBlbmQoJzxpbnB1dCB0eXBlPVwidGV4dFwiIGlkPVwiZWxlbWVudFwiIGRhdGEtcGFyc2xleS1lcnJvcnMtY29udGFpbmVyPVwiI2Rvbm90ZXhpc3RcIiByZXF1aXJlZC8+Jyk7XG4gICAgdmFyIHBhcnNsZXkgPSAkKCcjZWxlbWVudCcpLnBzbHkoKTtcbiAgICBleHBlY3RXYXJuaW5nKCgpID0+IHtcbiAgICAgIHBhcnNsZXkudmFsaWRhdGUoKTtcbiAgICB9KTtcbiAgfSk7XG4gIGl0KCdzaG91bGQgbm90IGFkZCBzdWNjZXNzIGNsYXNzIG9uIGEgZmllbGQgd2l0aG91dCBjb25zdHJhaW50cycsICgpID0+IHtcbiAgICAkKCdib2R5JykuYXBwZW5kKCc8aW5wdXQgdHlwZT1cInRleHRcIiBpZD1cImVsZW1lbnRcIiAvPicpO1xuICAgIHZhciBwYXJzbGV5RmllbGQgPSAkKCcjZWxlbWVudCcpLnBzbHkoKTtcbiAgICBwYXJzbGV5RmllbGQudmFsaWRhdGUoKTtcbiAgICBleHBlY3QoJCgnI2VsZW1lbnQnKS5oYXNDbGFzcygncGFyc2xleS1lcnJvcicpKS50by5iZShmYWxzZSk7XG4gICAgZXhwZWN0KCQoJyNlbGVtZW50JykuaGFzQ2xhc3MoJ3BhcnNsZXktc3VjY2VzcycpKS50by5iZShmYWxzZSk7XG4gIH0pO1xuICBpdCgnc2hvdWxkIG5vdCBhZGQgc3VjY2VzcyBjbGFzcyBvbiBhbiBlbXB0eSBvcHRpb25hbCBmaWVsZCcsICgpID0+IHtcbiAgICAkKCdib2R5JykuYXBwZW5kKCc8aW5wdXQgdHlwZT1cIm51bWJlclwiIGlkPVwiZWxlbWVudFwiIC8+Jyk7XG4gICAgdmFyIHBhcnNsZXlGaWVsZCA9ICQoJyNlbGVtZW50JykucHNseSgpO1xuICAgIHBhcnNsZXlGaWVsZC52YWxpZGF0ZSgpO1xuICAgIGV4cGVjdCgkKCcjZWxlbWVudCcpLmhhc0NsYXNzKCdwYXJzbGV5LWVycm9yJykpLnRvLmJlKGZhbHNlKTtcbiAgICBleHBlY3QoJCgnI2VsZW1lbnQnKS5oYXNDbGFzcygncGFyc2xleS1zdWNjZXNzJykpLnRvLmJlKGZhbHNlKTtcbiAgfSk7XG4gIHZhciBjaGVja1R5cGUgPSAodHlwZSwgaHRtbCwgZmlsbFZhbHVlKSA9PiB7XG4gICAgaXQoYHNob3VsZCBhZGQgcHJvcGVyIHBhcnNsZXkgY2xhc3Mgb24gc3VjY2VzcyBvciBmYWlsdXJlICgke3R5cGV9KWAsICgpID0+IHtcbiAgICAgICQoJ2JvZHknKS5hcHBlbmQoYDxmb3JtIGlkPVwiZWxlbWVudFwiPjxzZWN0aW9uPiR7aHRtbH08L3NlY3Rpb24+PC9mb3JtPmApO1xuICAgICAgbGV0IGZvcm0gPSAkKCcjZWxlbWVudCcpLnBhcnNsZXkoKTtcbiAgICAgIGxldCAkaW5wdXRIb2xkZXIgPSAkKCcjZWxlbWVudCBzZWN0aW9uJykuY2hpbGRyZW4oKS5maXJzdCgpO1xuICAgICAgZm9ybS52YWxpZGF0ZSgpO1xuICAgICAgZXhwZWN0KCRpbnB1dEhvbGRlci5hdHRyKCdjbGFzcycpKS50by5iZSgncGFyc2xleS1lcnJvcicpO1xuICAgICAgZXhwZWN0KCQoJy5wYXJzbGV5LWVycm9ycy1saXN0JykucGFyZW50KCkucHJvcChcInRhZ05hbWVcIikpLnRvLmJlKCdTRUNUSU9OJyk7XG4gICAgICAvLyBGaWxsIGFuZCByZXZhbGlkYXRlOlxuICAgICAgZmlsbFZhbHVlKCRpbnB1dEhvbGRlcik7XG4gICAgICBmb3JtLnZhbGlkYXRlKCk7XG4gICAgICBleHBlY3QoJGlucHV0SG9sZGVyLmF0dHIoJ2NsYXNzJykpLnRvLmJlKCdwYXJzbGV5LXN1Y2Nlc3MnKTtcbiAgICB9KTtcbiAgfTtcblxuICBsZXQgY2FsbFZhbCA9ICRpbnB1dCA9PiAkaW5wdXQudmFsKCdmb28nKTtcbiAgY2hlY2tUeXBlKCd0ZXh0JywgJzxpbnB1dCB0eXBlPVwidGV4dFwiIHJlcXVpcmVkLz4nLCBjYWxsVmFsKTtcbiAgY2hlY2tUeXBlKCdzZWxlY3QnLCAnPHNlbGVjdCBtdWx0aXBsZSByZXF1aXJlZD48b3B0aW9uIHZhbHVlPVwiZm9vXCI+Zm9vPC9vcHRpb24+JywgY2FsbFZhbCk7XG5cbiAgbGV0IGNhbGxQcm9wID0gJGZpZWxkc2V0ID0+ICRmaWVsZHNldC5maW5kKCdpbnB1dCcpLnByb3AoJ2NoZWNrZWQnLCB0cnVlKTtcbiAgY2hlY2tUeXBlKCdyYWRpbycsICc8ZmllbGRzZXQ+PGlucHV0IHR5cGU9XCJyYWRpb1wiIG5hbWU9XCJmb29cIiByZXF1aXJlZCAvPjwvZmllbGRzZXQ+JywgY2FsbFByb3ApO1xuICBjaGVja1R5cGUoJ2NoZWNrYm94JywgJzxmaWVsZHNldD48aW5wdXQgdHlwZT1cImNoZWNrYm94XCIgbmFtZT1cImZvb1wiIHJlcXVpcmVkIC8+PC9maWVsZHNldD4nLCBjYWxsUHJvcCk7XG5cbiAgaXQoJ3Nob3VsZCBoYW5kbGUgY2xhc3MtaGFuZGxlciBvcHRpb24nLCAoKSA9PiB7XG4gICAgJCgnYm9keScpLmFwcGVuZChcbiAgICAgICc8Zm9ybSBpZD1cImVsZW1lbnRcIj4nICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICArXG4gICAgICAgICc8aW5wdXQgaWQ9XCJmaWVsZDFcIiB0eXBlPVwiZW1haWxcIiBkYXRhLXBhcnNsZXktY2xhc3MtaGFuZGxlcj1cIiNmaWVsZDJcIiByZXF1aXJlZCAvPicgICtcbiAgICAgICAgJzxkaXYgaWQ9XCJmaWVsZDJcIj48L2Rpdj4nICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICArXG4gICAgICAgICc8ZGl2IGlkPVwiZmllbGQzXCI+PC9kaXY+JyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgK1xuICAgICAgJzwvZm9ybT4nKTtcbiAgICAkKCcjZWxlbWVudCcpLnBzbHkoKS52YWxpZGF0ZSgpO1xuICAgIGV4cGVjdCgkKCcjZmllbGQyJykuaGFzQ2xhc3MoJ3BhcnNsZXktZXJyb3InKSkudG8uYmUodHJ1ZSk7XG4gICAgJCgnI2VsZW1lbnQnKS5wc2x5KCkuZGVzdHJveSgpO1xuICAgICQoJyNmaWVsZDEnKS5yZW1vdmVBdHRyKCdkYXRhLXBhcnNsZXktY2xhc3MtaGFuZGxlcicpO1xuICAgICQoJyNlbGVtZW50JykucHNseSh7XG4gICAgICBjbGFzc0hhbmRsZXI6IGZ1bmN0aW9uIChpbnMpIHtcbiAgICAgICAgZXhwZWN0KGlucykudG8uYmUoJCgnI2ZpZWxkMScpLnBhcnNsZXkoKSk7XG4gICAgICAgIGV4cGVjdCh0aGlzKS50by5iZSgkKCcjZmllbGQxJykucGFyc2xleSgpKTtcbiAgICAgICAgcmV0dXJuICQoJyNmaWVsZDMnKTtcbiAgICAgIH1cbiAgICB9KS52YWxpZGF0ZSgpO1xuICAgIGV4cGVjdCgkKCcjZmllbGQzJykuaGFzQ2xhc3MoJ3BhcnNsZXktZXJyb3InKSkudG8uYmUodHJ1ZSk7XG4gIH0pO1xuICBpdCgnc2hvdWxkIGhhbmRsZSBjbGFzcy1oYW5kbGVyIG9wdGlvbiB3aXRoIGEgZnVuY3Rpb24nLCAoKSA9PiB7XG4gICAgJCgnYm9keScpLmFwcGVuZChcbiAgICAgICc8Zm9ybSBpZD1cImVsZW1lbnRcIj4nICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICArXG4gICAgICAgICc8aW5wdXQgaWQ9XCJmaWVsZDFcIiB0eXBlPVwiZW1haWxcIiBkYXRhLXBhcnNsZXktY2xhc3MtaGFuZGxlcj1cIiNmaWVsZDJcIiByZXF1aXJlZCAvPicgICtcbiAgICAgICAgJzxkaXYgaWQ9XCJmaWVsZDRcIj48L2Rpdj4nICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICArXG4gICAgICAnPC9mb3JtPicpO1xuICAgICQoJyNmaWVsZDEnKS5hdHRyKCdkYXRhLXBhcnNsZXktY2xhc3MtaGFuZGxlcicsICdwYXJzbGV5Q2xhc3NIYW5kbGVyJyk7XG4gICAgd2luZG93LnBhcnNsZXlDbGFzc0hhbmRsZXIgPSBmdW5jdGlvbiAoaW5zKSB7XG4gICAgICBleHBlY3QoaW5zKS50by5iZSgkKCcjZmllbGQxJykucGFyc2xleSgpKTtcbiAgICAgIGV4cGVjdCh0aGlzKS50by5iZSgkKCcjZmllbGQxJykucGFyc2xleSgpKTtcbiAgICAgIHJldHVybiAkKCcjZmllbGQ0Jyk7XG4gICAgfTtcbiAgICAkKCcjZWxlbWVudCcpLnBzbHkoKS52YWxpZGF0ZSgpO1xuICAgIGV4cGVjdCgkKCcjZmllbGQ0JykuaGFzQ2xhc3MoJ3BhcnNsZXktZXJyb3InKSkudG8uYmUodHJ1ZSk7XG4gICAgJCgnI2VsZW1lbnQnKS5wc2x5KCkuZGVzdHJveSgpO1xuICAgICQoJyNmaWVsZDEnKS5hdHRyKCdkYXRhLXBhcnNsZXktY2xhc3MtaGFuZGxlcicsICdzb21lVW5kZWZpbmVkRnVuY3Rpb25OYW1lJyk7XG4gICAgZXhwZWN0V2FybmluZygoKSA9PiB7XG4gICAgICAkKCcjZWxlbWVudCcpLnBzbHkoKS52YWxpZGF0ZSgpO1xuICAgIH0pO1xuICAgIGV4cGVjdCgkKCcjZmllbGQxJykuaGFzQ2xhc3MoJ3BhcnNsZXktZXJyb3InKSkudG8uYmUodHJ1ZSk7XG4gICAgZGVsZXRlIHdpbmRvdy5wYXJzbGV5Q2xhc3NIYW5kbGVyO1xuICB9KTtcbiAgaXQoJ3Nob3VsZCBzaG93IGhpZ2hlciBwcmlvcml0eSBlcnJvciBtZXNzYWdlIGJ5IGRlZmF1bHQnLCAoKSA9PiB7XG4gICAgJCgnYm9keScpLmFwcGVuZCgnPGlucHV0IHR5cGU9XCJlbWFpbFwiIGlkPVwiZWxlbWVudFwiIHJlcXVpcmVkIC8+Jyk7XG4gICAgdmFyIHBhcnNsZXlGaWVsZCA9ICQoJyNlbGVtZW50JykucHNseSgpO1xuICAgIHBhcnNsZXlGaWVsZC52YWxpZGF0ZSgpO1xuICAgIGV4cGVjdCgkKCcjZWxlbWVudCcpLmhhc0NsYXNzKCdwYXJzbGV5LWVycm9yJykpLnRvLmJlKHRydWUpO1xuICAgIGV4cGVjdCgkKCd1bCNwYXJzbGV5LWlkLScgKyBwYXJzbGV5RmllbGQuX19pZF9fICsgJyBsaScpLmxlbmd0aCkudG8uYmUoMSk7XG4gICAgZXhwZWN0KCQoJ3VsI3BhcnNsZXktaWQtJyArIHBhcnNsZXlGaWVsZC5fX2lkX18gKyAnIGxpJykuaGFzQ2xhc3MoJ3BhcnNsZXktcmVxdWlyZWQnKSkudG8uYmUodHJ1ZSk7XG5cbiAgICAkKCcjZWxlbWVudCcpLnZhbCgnZm9vJykucHNseSgpLnZhbGlkYXRlKCk7XG4gICAgZXhwZWN0KCQoJ3VsI3BhcnNsZXktaWQtJyArIHBhcnNsZXlGaWVsZC5fX2lkX18gKyAnIGxpJykubGVuZ3RoKS50by5iZSgxKTtcbiAgICBleHBlY3QoJCgndWwjcGFyc2xleS1pZC0nICsgcGFyc2xleUZpZWxkLl9faWRfXyArICcgbGknKS5oYXNDbGFzcygncGFyc2xleS10eXBlJykpLnRvLmJlKHRydWUpO1xuICB9KTtcbiAgaXQoJ3Nob3VsZCBzaG93IGN1c3RvbSBlcnJvciBtZXNzYWdlIGJ5IHZhbGlkYXRvcicsICgpID0+IHtcbiAgICAkKCdib2R5JykuYXBwZW5kKCc8aW5wdXQgdHlwZT1cImVtYWlsXCIgaWQ9XCJlbGVtZW50XCIgcmVxdWlyZWQgZGF0YS1wYXJzbGV5LXJlcXVpcmVkLW1lc3NhZ2U9XCJmb29cIiBkYXRhLXBhcnNsZXktdHlwZS1tZXNzYWdlPVwiYmFyXCIvPicpO1xuICAgIHZhciBwYXJzbGV5RmllbGQgPSAkKCcjZWxlbWVudCcpLnBzbHkoKTtcbiAgICBwYXJzbGV5RmllbGQudmFsaWRhdGUoKTtcbiAgICBleHBlY3QoJCgndWwjcGFyc2xleS1pZC0nICsgcGFyc2xleUZpZWxkLl9faWRfXyArICcgbGknKS50ZXh0KCkpLnRvLmJlKCdmb28nKTtcbiAgICAkKCcjZWxlbWVudCcpLnZhbCgnZm9vJykucHNseSgpLnZhbGlkYXRlKCk7XG4gICAgZXhwZWN0KCQoJ3VsI3BhcnNsZXktaWQtJyArIHBhcnNsZXlGaWVsZC5fX2lkX18gKyAnIGxpJykudGV4dCgpKS50by5iZSgnYmFyJyk7XG4gIH0pO1xuICBpdCgnc2hvdWxkIHNob3cgY3VzdG9tIGVycm9yIG1lc3NhZ2Ugd2l0aCB2YXJpYWJpbGl6ZWQgcGFyYW1ldGVycycsICgpID0+IHtcbiAgICAkKCdib2R5JykuYXBwZW5kKCc8aW5wdXQgdHlwZT1cInRleHRcIiBpZD1cImVsZW1lbnRcIiB2YWx1ZT1cImJhclwiIGRhdGEtcGFyc2xleS1taW5sZW5ndGg9XCI3XCIgZGF0YS1wYXJzbGV5LW1pbmxlbmd0aC1tZXNzYWdlPVwiZm9vICVzIGJhclwiLz4nKTtcbiAgICB2YXIgcGFyc2xleUZpZWxkID0gJCgnI2VsZW1lbnQnKS5wc2x5KCk7XG4gICAgcGFyc2xleUZpZWxkLnZhbGlkYXRlKCk7XG4gICAgZXhwZWN0KCQoJ3VsI3BhcnNsZXktaWQtJyArIHBhcnNsZXlGaWVsZC5fX2lkX18gKyAnIGxpJykudGV4dCgpKS50by5iZSgnZm9vIDcgYmFyJyk7XG4gIH0pO1xuICBpdCgnc2hvdWxkIHNob3cgY3VzdG9tIGVycm9yIG1lc3NhZ2UgZm9yIHdob2xlIGZpZWxkJywgKCkgPT4ge1xuICAgICQoJ2JvZHknKS5hcHBlbmQoJzxpbnB1dCB0eXBlPVwiZW1haWxcIiBpZD1cImVsZW1lbnRcIiByZXF1aXJlZCBkYXRhLXBhcnNsZXktZXJyb3ItbWVzc2FnZT1cImJhelwiLz4nKTtcbiAgICB2YXIgcGFyc2xleUZpZWxkID0gJCgnI2VsZW1lbnQnKS5wc2x5KCk7XG4gICAgcGFyc2xleUZpZWxkLnZhbGlkYXRlKCk7XG4gICAgZXhwZWN0KCQoJ3VsI3BhcnNsZXktaWQtJyArIHBhcnNsZXlGaWVsZC5fX2lkX18gKyAnIGxpJykudGV4dCgpKS50by5iZSgnYmF6Jyk7XG4gICAgJCgnI2VsZW1lbnQnKS52YWwoJ2ZvbycpLnBzbHkoKS52YWxpZGF0ZSgpO1xuICAgIGV4cGVjdCgkKCd1bCNwYXJzbGV5LWlkLScgKyBwYXJzbGV5RmllbGQuX19pZF9fICsgJyBsaScpLnRleHQoKSkudG8uYmUoJ2JheicpO1xuICAgICQoJyNlbGVtZW50JykudmFsKCdmb29AYmFyLmJheicpLnBzbHkoKS52YWxpZGF0ZSgpO1xuICAgIGV4cGVjdCgkKCd1bCNwYXJzbGV5LWlkLScgKyBwYXJzbGV5RmllbGQuX19pZF9fICsgJyBsaScpLmxlbmd0aCkudG8uYmUoMCk7XG4gIH0pO1xuICBpdCgnc2hvdWxkIGRpc3BsYXkgbm8gZXJyb3IgbWVzc2FnZSBpZiBkaWFibGVkJywgKCkgPT4ge1xuICAgICQoJ2JvZHknKS5hcHBlbmQoJzxpbnB1dCB0eXBlPVwiZW1haWxcIiBpZD1cImVsZW1lbnRcIiByZXF1aXJlZCBkYXRhLXBhcnNsZXktZXJyb3JzLW1lc3NhZ2VzLWRpc2FibGVkIC8+Jyk7XG4gICAgdmFyIHBhcnNsZXlGaWVsZCA9ICQoJyNlbGVtZW50JykucHNseSgpO1xuICAgIHBhcnNsZXlGaWVsZC52YWxpZGF0ZSgpO1xuICAgIGV4cGVjdCgkKCd1bCNwYXJzbGV5LWlkLScgKyBwYXJzbGV5RmllbGQuX19pZF9fICsgJyBsaScpLmxlbmd0aCkudG8uYmUoMCk7XG4gICAgZXhwZWN0KCQoJyNlbGVtZW50JykuaGFzQ2xhc3MoJ3BhcnNsZXktZXJyb3InKSkudG8uYmUodHJ1ZSk7XG4gIH0pO1xuICBpdCgnc2hvdWxkIGhhbmRsZSBzaW1wbGUgdHJpZ2dlcnMgKGNoYW5nZSwgZm9jdXMuLi4pJywgKCkgPT4ge1xuICAgICQoJ2JvZHknKS5hcHBlbmQoJzxpbnB1dCB0eXBlPVwiZW1haWxcIiBpZD1cImVsZW1lbnRcIiByZXF1aXJlZCBkYXRhLXBhcnNsZXktdHJpZ2dlcj1cImNoYW5nZVwiIC8+Jyk7XG4gICAgdmFyIHBhcnNsZXlGaWVsZCA9ICQoJyNlbGVtZW50JykucHNseSgpO1xuICAgIGV4cGVjdCgkKCd1bCNwYXJzbGV5LWlkLScgKyBwYXJzbGV5RmllbGQuX19pZF9fICsgJyBsaScpLmxlbmd0aCkudG8uYmUoMCk7XG4gICAgJCgnI2VsZW1lbnQnKS50cmlnZ2VyKCQuRXZlbnQoJ2NoYW5nZScpKTtcbiAgICBleHBlY3QoJCgndWwjcGFyc2xleS1pZC0nICsgcGFyc2xleUZpZWxkLl9faWRfXyArICcgbGknKS5sZW5ndGgpLnRvLmJlKDEpO1xuICB9KTtcbiAgaXQoJ3Nob3VsZCBhbGxvdyBjdXN0b21pemF0aW9uIG9mIHRyaWdnZXJzIGFmdGVyIGZpcnN0IGVycm9yJywgKCkgPT4ge1xuICAgICQoJ2JvZHknKS5hcHBlbmQoJzxpbnB1dCB0eXBlPVwiZW1haWxcIiBpZD1cImVsZW1lbnRcIiByZXF1aXJlZCBkYXRhLXBhcnNsZXktdHJpZ2dlci1hZnRlci1mYWlsdXJlPVwiZm9jdXNvdXRcIiAvPicpO1xuICAgIHZhciBwYXJzbGV5RmllbGQgPSAkKCcjZWxlbWVudCcpLnBzbHkoKTtcbiAgICBwYXJzbGV5RmllbGQudmFsaWRhdGUoKTtcbiAgICBleHBlY3QoJCgndWwjcGFyc2xleS1pZC0nICsgcGFyc2xleUZpZWxkLl9faWRfXyArICcgbGknKS5sZW5ndGgpLnRvLmJlKDEpO1xuICAgICQoJyNlbGVtZW50JykudmFsKCdhQGV4YW1wbGUuY29tJyk7XG4gICAgJCgnI2VsZW1lbnQnKS50cmlnZ2VyKCdpbnB1dCcpO1xuICAgIGV4cGVjdCgkKCd1bCNwYXJzbGV5LWlkLScgKyBwYXJzbGV5RmllbGQuX19pZF9fICsgJyBsaScpLmxlbmd0aCkudG8uYmUoMSk7XG4gICAgJCgnI2VsZW1lbnQnKS50cmlnZ2VyKCdmb2N1c291dCcpO1xuICAgIGV4cGVjdCgkKCd1bCNwYXJzbGV5LWlkLScgKyBwYXJzbGV5RmllbGQuX19pZF9fICsgJyBsaScpLmxlbmd0aCkudG8uYmUoMCk7XG4gIH0pO1xuICBpdCgnc2hvdWxkIGF1dG8gYmluZCBlcnJvciB0cmlnZ2VyIG9uIHNlbGVjdCBmaWVsZCBlcnJvciAoaW5wdXQ9dGV4dCknLCAoKSA9PiB7XG4gICAgJCgnYm9keScpLmFwcGVuZCgnPGlucHV0IHR5cGU9XCJlbWFpbFwiIGlkPVwiZWxlbWVudFwiIHJlcXVpcmVkIC8+Jyk7XG4gICAgdmFyIHBhcnNsZXlGaWVsZCA9ICQoJyNlbGVtZW50JykucHNseSgpO1xuICAgIGV4cGVjdCgkKCd1bCNwYXJzbGV5LWlkLScgKyBwYXJzbGV5RmllbGQuX19pZF9fICsgJyBsaScpLmxlbmd0aCkudG8uYmUoMCk7XG4gICAgcGFyc2xleUZpZWxkLnZhbGlkYXRlKCk7XG4gICAgZXhwZWN0KCQoJ3VsI3BhcnNsZXktaWQtJyArIHBhcnNsZXlGaWVsZC5fX2lkX18gKyAnIGxpJykubGVuZ3RoKS50by5iZSgxKTtcbiAgICBleHBlY3QoJCgndWwjcGFyc2xleS1pZC0nICsgcGFyc2xleUZpZWxkLl9faWRfXyArICcgbGknKS5oYXNDbGFzcygncGFyc2xleS1yZXF1aXJlZCcpKS50by5iZSh0cnVlKTtcbiAgICAkKCcjZWxlbWVudCcpLnZhbCgnZm9vJykudHJpZ2dlcignaW5wdXQnKTtcbiAgICBleHBlY3QoJCgndWwjcGFyc2xleS1pZC0nICsgcGFyc2xleUZpZWxkLl9faWRfXyArICcgbGknKS5oYXNDbGFzcygncGFyc2xleS10eXBlJykpLnRvLmJlKHRydWUpO1xuICB9KTtcbiAgaXQoJ3Nob3VsZCBhdXRvIGJpbmQgZXJyb3IgdHJpZ2dlciBvbiBzZWxlY3QgZmllbGQgZXJyb3IgKHNlbGVjdCknLCAoKSA9PiB7XG4gICAgJCgnYm9keScpLmFwcGVuZCgnPHNlbGVjdCBpZD1cImVsZW1lbnRcIiByZXF1aXJlZD4nICtcbiAgICAgICc8b3B0aW9uIHZhbHVlPVwiXCI+Q2hvb3NlPC9vcHRpb24+JyArXG4gICAgICAnPG9wdGlvbiB2YWx1ZT1cImZvb1wiPmZvbzwvb3B0aW9uPicgK1xuICAgICAgJzxvcHRpb24gdmFsdWU9XCJiYXJcIj5iYXI8L29wdGlvbj4nICtcbiAgICAnPC9zZWxlY3Q+Jyk7XG4gICAgdmFyIHBhcnNsZXlGaWVsZCA9ICQoJyNlbGVtZW50JykucHNseSgpO1xuICAgIGV4cGVjdCgkKCd1bCNwYXJzbGV5LWlkLScgKyBwYXJzbGV5RmllbGQuX19pZF9fICsgJyBsaScpLmxlbmd0aCkudG8uYmUoMCk7XG4gICAgcGFyc2xleUZpZWxkLnZhbGlkYXRlKCk7XG4gICAgZXhwZWN0KCQoJ3VsI3BhcnNsZXktaWQtJyArIHBhcnNsZXlGaWVsZC5fX2lkX18gKyAnIGxpJykubGVuZ3RoKS50by5iZSgxKTtcbiAgICBleHBlY3QoJCgndWwjcGFyc2xleS1pZC0nICsgcGFyc2xleUZpZWxkLl9faWRfXyArICcgbGknKS5oYXNDbGFzcygncGFyc2xleS1yZXF1aXJlZCcpKS50by5iZSh0cnVlKTtcbiAgICAkKCcjZWxlbWVudCBbb3B0aW9uPVwiZm9vXCJdJykuYXR0cignc2VsZWN0ZWQnLCAnc2VsZWN0ZWQnKTtcbiAgICAkKCcjZWxlbWVudCcpLnRyaWdnZXIoJC5FdmVudCgnY2hhbmdlJykpO1xuICAgIGV4cGVjdCgkKCd1bCNwYXJzbGV5LWlkLScgKyBwYXJzbGV5RmllbGQuX19pZF9fICsgJyBsaScpLmhhc0NsYXNzKCdwYXJzbGV5LXR5cGUnKSkudG8uYmUoZmFsc2UpO1xuICB9KTtcbiAgaXQoJ3Nob3VsZCBoYW5kbGUgY29tcGxleCB0cmlnZ2VycyAoa2V5dXAsIGtleXByZXNzLi4uKScsICgpID0+IHtcbiAgICAkKCdib2R5JykuYXBwZW5kKCc8aW5wdXQgdHlwZT1cImVtYWlsXCIgaWQ9XCJlbGVtZW50XCIgcmVxdWlyZWQgZGF0YS1wYXJzbGV5LXRyaWdnZXI9XCJrZXl1cFwiIC8+Jyk7XG4gICAgdmFyIHBhcnNsZXlGaWVsZCA9ICQoJyNlbGVtZW50JykucHNseSgpO1xuICAgIGV4cGVjdCgkKCd1bCNwYXJzbGV5LWlkLScgKyBwYXJzbGV5RmllbGQuX19pZF9fICsgJyBsaScpLmxlbmd0aCkudG8uYmUoMCk7XG4gICAgJCgnI2VsZW1lbnQnKS52YWwoJ2ZvbycpLnRyaWdnZXIoJC5FdmVudCgna2V5dXAnKSk7XG4gICAgZXhwZWN0KCQoJ3VsI3BhcnNsZXktaWQtJyArIHBhcnNsZXlGaWVsZC5fX2lkX18gKyAnIGxpJykubGVuZ3RoKS50by5iZSgwKTtcbiAgICAkKCcjZWxlbWVudCcpLnZhbCgnZm9vYicpLnRyaWdnZXIoJC5FdmVudCgna2V5dXAnKSk7XG4gICAgZXhwZWN0KCQoJ3VsI3BhcnNsZXktaWQtJyArIHBhcnNsZXlGaWVsZC5fX2lkX18gKyAnIGxpJykubGVuZ3RoKS50by5iZSgxKTtcbiAgfSk7XG4gIGl0KCdzaG91bGQgaGFuZGxlIHRyaWdnZXIga2V5dXAgdGhyZXNob2xkIHZhbGlkYXRpb24nLCAoKSA9PiB7XG4gICAgJCgnYm9keScpLmFwcGVuZCgnPGlucHV0IHR5cGU9XCJlbWFpbFwiIGlkPVwiZWxlbWVudFwiIGRhdGEtcGFyc2xleS12YWxpZGF0aW9uLXRocmVzaG9sZD1cIjdcIiByZXF1aXJlZCBkYXRhLXBhcnNsZXktdHJpZ2dlcj1cImtleXVwXCIgLz4nKTtcbiAgICB2YXIgcGFyc2xleUZpZWxkID0gJCgnI2VsZW1lbnQnKS5wc2x5KCk7XG4gICAgZXhwZWN0KCQoJ3VsI3BhcnNsZXktaWQtJyArIHBhcnNsZXlGaWVsZC5fX2lkX18gKyAnIGxpJykubGVuZ3RoKS50by5iZSgwKTtcbiAgICAkKCcjZWxlbWVudCcpLnZhbCgnYUBiLmNvbScpLnRyaWdnZXIoJ2tleXVwJyk7XG4gICAgZXhwZWN0KCQoJyNlbGVtZW50JykuaGFzQ2xhc3MoJ3N1Y2Nlc3MnKSkudG8uYmUoZmFsc2UpO1xuICAgICQoJyNlbGVtZW50JykudmFsKCdhYUBiLmNvbScpLnRyaWdnZXIoJ2tleXVwJyk7XG4gICAgZXhwZWN0KCQoJyNlbGVtZW50JykuaGFzQ2xhc3MoJ3BhcnNsZXktc3VjY2VzcycpKS50by5iZSh0cnVlKTtcbiAgICAkKCcjZWxlbWVudCcpLnZhbCgnQGIuY29tJykudHJpZ2dlcigna2V5dXAnKTtcbiAgICBleHBlY3QoJCgnI2VsZW1lbnQnKS5oYXNDbGFzcygncGFyc2xleS1zdWNjZXNzJykpLnRvLmJlKGZhbHNlKTtcbiAgfSk7XG4gIGl0KCdzaG91bGQgaGFuZGxlIFVJIGRpc2FibGluZycsICgpID0+IHtcbiAgICAkKCdib2R5JykuYXBwZW5kKCc8aW5wdXQgdHlwZT1cImVtYWlsXCIgaWQ9XCJlbGVtZW50XCIgZGF0YS1wYXJzbGV5LXVpLWVuYWJsZWQ9XCJmYWxzZVwiIHJlcXVpcmVkIGRhdGEtcGFyc2xleS10cmlnZ2VyPVwia2V5dXBcIiAvPicpO1xuICAgIHZhciBwYXJzbGV5RmllbGQgPSAkKCcjZWxlbWVudCcpLnBzbHkoKTtcbiAgICBleHBlY3QoJCgndWwjcGFyc2xleS1pZC0nICsgcGFyc2xleUZpZWxkLl9faWRfXykubGVuZ3RoKS50by5iZSgwKTtcbiAgICBwYXJzbGV5RmllbGQudmFsaWRhdGUoKTtcbiAgICBleHBlY3QoJCgndWwjcGFyc2xleS1pZC0nICsgcGFyc2xleUZpZWxkLl9faWRfXykubGVuZ3RoKS50by5iZSgwKTtcbiAgfSk7XG4gIGl0KCdzaG91bGQgYWRkIG5vdmFsaWRhdGUgb24gZm9ybSBlbGVtJywgKCkgPT4ge1xuICAgICQoJ2JvZHknKS5hcHBlbmQoXG4gICAgICAnPGZvcm0gaWQ9XCJlbGVtZW50XCIgZGF0YS1wYXJzbGV5LXRyaWdnZXI9XCJjaGFuZ2VcIj4nICAgICAgICAgICAgICAgICArXG4gICAgICAgICc8aW5wdXQgaWQ9XCJmaWVsZDFcIiB0eXBlPVwidGV4dFwiIGRhdGEtcGFyc2xleS1yZXF1aXJlZD1cInRydWVcIiAvPicgICtcbiAgICAgICAgJzxkaXYgaWQ9XCJmaWVsZDJcIj48L2Rpdj4nICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICArXG4gICAgICAgICc8dGV4dGFyZWEgaWQ9XCJmaWVsZDNcIiBkYXRhLXBhcnNsZXktbm90Ymxhbms9XCJ0cnVlXCI+PC90ZXh0YXJlYT4nICArXG4gICAgICAnPC9mb3JtPicpO1xuICAgIHZhciBwYXJzbGV5Rm9ybSA9ICQoJyNlbGVtZW50JykucGFyc2xleSgpO1xuICAgIGV4cGVjdCgkKCcjZWxlbWVudCcpLmF0dHIoJ25vdmFsaWRhdGUnKSkubm90LnRvLmJlKHVuZGVmaW5lZCk7XG4gIH0pO1xuICBpdCgnc2hvdWxkIHRlc3QgdGhlIG5vLWZvY3VzIG9wdGlvbicsICgpID0+IHtcbiAgICAkKCdib2R5JykuYXBwZW5kKFxuICAgICAgJzxmb3JtIGlkPVwiZWxlbWVudFwiIGRhdGEtcGFyc2xleS1mb2N1cz1cImZpcnN0XCI+JyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICtcbiAgICAgICAgJzxpbnB1dCBpZD1cImZpZWxkMVwiIHR5cGU9XCJ0ZXh0XCIgZGF0YS1wYXJzbGV5LXJlcXVpcmVkPVwidHJ1ZVwiIGRhdGEtcGFyc2xleS1uby1mb2N1cyAvPicgICtcbiAgICAgICAgJzxpbnB1dCBpZD1cImZpZWxkMlwiIGRhdGEtcGFyc2xleS1yZXF1aXJlZCAvPicgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgK1xuICAgICAgJzwvZm9ybT4nKTtcbiAgICAkKCcjZWxlbWVudCcpLnBhcnNsZXkoKS52YWxpZGF0ZSgpO1xuICAgIGV4cGVjdCgkKCcjZWxlbWVudCcpLnBhcnNsZXkoKS5fZm9jdXNlZEZpZWxkLmF0dHIoJ2lkJykpLnRvLmJlKCdmaWVsZDInKTtcbiAgICAkKCcjZmllbGQyJykudmFsKCdmb28nKTtcbiAgICAkKCcjZWxlbWVudCcpLnBzbHkoKS52YWxpZGF0ZSgpO1xuICAgIGV4cGVjdCgkKCcjZWxlbWVudCcpLnBhcnNsZXkoKS5fZm9jdXNlZEZpZWxkKS50by5iZShudWxsKTtcbiAgICAkKCcjZmllbGQxJykucmVtb3ZlQXR0cignZGF0YS1wYXJzbGV5LW5vLWZvY3VzJyk7XG4gICAgJCgnI2VsZW1lbnQnKS5wc2x5KCkudmFsaWRhdGUoKTtcbiAgICBleHBlY3QoJCgnI2VsZW1lbnQnKS5wYXJzbGV5KCkuX2ZvY3VzZWRGaWVsZC5hdHRyKCdpZCcpKS50by5iZSgnZmllbGQxJyk7XG4gICAgJCgnI2VsZW1lbnQnKS5hdHRyKCdkYXRhLXBhcnNsZXktZm9jdXMnLCAnbGFzdCcpO1xuICAgICQoJyNlbGVtZW50JykucHNseSgpLnZhbGlkYXRlKCk7XG4gICAgZXhwZWN0KCQoJyNlbGVtZW50JykucGFyc2xleSgpLl9mb2N1c2VkRmllbGQuYXR0cignaWQnKSkudG8uYmUoJ2ZpZWxkMScpO1xuICAgICQoJyNmaWVsZDInKS52YWwoJycpO1xuICAgICQoJyNlbGVtZW50JykucHNseSgpLnZhbGlkYXRlKCk7XG4gICAgZXhwZWN0KCQoJyNlbGVtZW50JykucGFyc2xleSgpLl9mb2N1c2VkRmllbGQuYXR0cignaWQnKSkudG8uYmUoJ2ZpZWxkMicpO1xuICB9KTtcbiAgaXQoJ3Nob3VsZCB0ZXN0IHRoZSBtYW51YWwgYWRkIC8gdXBkYXRlIC8gcmVtb3ZlIGVycm9yJywgKCkgPT4ge1xuICAgICQoJ2JvZHknKS5hcHBlbmQoJzxpbnB1dCB0eXBlPVwidGV4dFwiIGlkPVwiZWxlbWVudFwiIC8+Jyk7XG4gICAgdmFyIHBhcnNsZXlGaWVsZCA9ICQoJyNlbGVtZW50JykucGFyc2xleSgpO1xuICAgIHBhcnNsZXlGaWVsZC5yZW1vdmVFcnJvcignbm9uLWV4aXN0ZW50Jyk7XG4gICAgcGFyc2xleUZpZWxkLnZhbGlkYXRlKCk7XG4gICAgZXhwZWN0KCQoJ3VsI3BhcnNsZXktaWQtJyArIHBhcnNsZXlGaWVsZC5fX2lkX18gKyAnIGxpJykubGVuZ3RoKS50by5iZSgwKTtcbiAgICBleHBlY3QoJCgnI2VsZW1lbnQnKS5oYXNDbGFzcygncGFyc2xleS1lcnJvcicpKS50by5iZShmYWxzZSk7XG4gICAgZXhwZWN0V2FybmluZygoKSA9PiB7XG4gICAgICB3aW5kb3cuUGFyc2xleVVJLmFkZEVycm9yKHBhcnNsZXlGaWVsZCwgJ2ZvbycsICdiYXInKTtcbiAgICB9KTtcbiAgICBleHBlY3QoJCgndWwjcGFyc2xleS1pZC0nICsgcGFyc2xleUZpZWxkLl9faWRfXyArICcgbGknKS5sZW5ndGgpLnRvLmJlKDEpO1xuICAgIGV4cGVjdCgkKCcjZWxlbWVudCcpLmhhc0NsYXNzKCdwYXJzbGV5LWVycm9yJykpLnRvLmJlKHRydWUpO1xuICAgIGV4cGVjdCgkKCdsaS5wYXJzbGV5LWZvbycpLmxlbmd0aCkudG8uYmUoMSk7XG4gICAgZXhwZWN0KCQoJ2xpLnBhcnNsZXktZm9vJykudGV4dCgpKS50by5iZSgnYmFyJyk7XG4gICAgZXhwZWN0V2FybmluZygoKSA9PiB7XG4gICAgICB3aW5kb3cuUGFyc2xleVVJLnVwZGF0ZUVycm9yKHBhcnNsZXlGaWVsZCwgJ2ZvbycsICdiYXonKTtcbiAgICB9KTtcbiAgICBleHBlY3QoJCgnbGkucGFyc2xleS1mb28nKS50ZXh0KCkpLnRvLmJlKCdiYXonKTtcbiAgICBleHBlY3RXYXJuaW5nKCgpID0+IHtcbiAgICAgIHdpbmRvdy5QYXJzbGV5VUkucmVtb3ZlRXJyb3IocGFyc2xleUZpZWxkLCAnZm9vJyk7XG4gICAgfSk7XG4gICAgZXhwZWN0KCQoJyNlbGVtZW50JykuaGFzQ2xhc3MoJ3BhcnNsZXktZXJyb3InKSkudG8uYmUoZmFsc2UpO1xuICAgIGV4cGVjdCgkKCd1bCNwYXJzbGV5LWlkLScgKyBwYXJzbGV5RmllbGQuX19pZF9fICsgJyBsaScpLmxlbmd0aCkudG8uYmUoMCk7XG4gIH0pO1xuICBpdCgnc2hvdWxkIGhhdmUgYSBnZXRFcnJvcnNNZXNzYWdlKCkgbWV0aG9kJywgKCkgPT4ge1xuICAgICQoJ2JvZHknKS5hcHBlbmQoJzxpbnB1dCB0eXBlPVwiZW1haWxcIiBpZD1cImVsZW1lbnRcIiB2YWx1ZT1cImZvb1wiIGRhdGEtcGFyc2xleS1taW5sZW5ndGg9XCI1XCIgLz4nKTtcbiAgICB2YXIgcGFyc2xleUluc3RhbmNlID0gJCgnI2VsZW1lbnQnKS5wYXJzbGV5KCk7XG4gICAgcGFyc2xleUluc3RhbmNlLnZhbGlkYXRlKCk7XG4gICAgZXhwZWN0V2FybmluZygoKSA9PiB7XG4gICAgICB3aW5kb3cuUGFyc2xleVVJLmdldEVycm9yc01lc3NhZ2VzKHBhcnNsZXlJbnN0YW5jZSk7XG4gICAgfSk7XG4gICAgZXhwZWN0KHdpbmRvdy5QYXJzbGV5VUkuZ2V0RXJyb3JzTWVzc2FnZXMocGFyc2xleUluc3RhbmNlKS5sZW5ndGgpLnRvLmJlKDEpO1xuICAgIGV4cGVjdCh3aW5kb3cuUGFyc2xleVVJLmdldEVycm9yc01lc3NhZ2VzKHBhcnNsZXlJbnN0YW5jZSlbMF0pLnRvLmJlKCdUaGlzIHZhbHVlIHNob3VsZCBiZSBhIHZhbGlkIGVtYWlsLicpO1xuXG4gICAgJCgnI2VsZW1lbnQnKS5hdHRyKCdkYXRhLXBhcnNsZXktcHJpb3JpdHktZW5hYmxlZCcsIGZhbHNlKTtcbiAgICBwYXJzbGV5SW5zdGFuY2UudmFsaWRhdGUoKTtcbiAgICBleHBlY3Qod2luZG93LlBhcnNsZXlVSS5nZXRFcnJvcnNNZXNzYWdlcyhwYXJzbGV5SW5zdGFuY2UpLmxlbmd0aCkudG8uYmUoMik7XG4gICAgZXhwZWN0KHdpbmRvdy5QYXJzbGV5VUkuZ2V0RXJyb3JzTWVzc2FnZXMocGFyc2xleUluc3RhbmNlKVswXSkudG8uYmUoJ1RoaXMgdmFsdWUgaXMgdG9vIHNob3J0LiBJdCBzaG91bGQgaGF2ZSA1IGNoYXJhY3RlcnMgb3IgbW9yZS4nKTtcblxuICB9KTtcbiAgaXQoJ3Nob3VsZCBub3QgaGF2ZSBlcnJvcnMgdWwgY3JlYXRlZCBmb3IgZXhjbHVkZWQgZmllbGRzJywgKCkgPT4ge1xuICAgICQoJ2JvZHknKS5hcHBlbmQoJzxkaXYgaWQ9XCJoaWRkZW5cIj48aW5wdXQgdHlwZT1cImhpZGRlblwiIGlkPVwiZWxlbWVudFwiIHZhbHVlPVwiZm9vXCIgZGF0YS1wYXJzbGV5LW1pbmxlbmd0aD1cIjVcIiAvPjwvZGl2PicpO1xuICAgIHZhciBwYXJzbGV5SW5zdGFuY2UgPSAkKCcjZWxlbWVudCcpLnBhcnNsZXkoKTtcbiAgICBleHBlY3QoJCgnI2hpZGRlbiB1bCcpLmxlbmd0aCkudG8uYmUoMCk7XG4gICAgJCgnI2hpZGRlbicpLnJlbW92ZSgpO1xuICB9KTtcbiAgaXQoJ3Nob3VsZCByZW1vdmUgZmlsbGVkIGNsYXNzIGZyb20gZXJyb3JzIGNvbnRhaW5lciB3aGVuIHJlc2V0aW5nJywgKCkgPT4ge1xuICAgICQoJ2JvZHknKS5hcHBlbmQoJzxpbnB1dCB0eXBlPVwiZW1haWxcIiBpZD1cImVsZW1lbnRcIiB2YWx1ZT1cImZvb1wiIGRhdGEtcGFyc2xleS1taW5sZW5ndGg9XCI1XCIgLz4nKTtcbiAgICB2YXIgcGFyc2xleUluc3RhbmNlID0gJCgnI2VsZW1lbnQnKS5wYXJzbGV5KCk7XG4gICAgcGFyc2xleUluc3RhbmNlLnZhbGlkYXRlKCk7XG4gICAgcGFyc2xleUluc3RhbmNlLnJlc2V0KCk7XG4gICAgZXhwZWN0KCQoJ3VsI3BhcnNsZXktaWQtJyArIHBhcnNsZXlJbnN0YW5jZS5fX2lkX18pLmhhc0NsYXNzKCdmaWxsZWQnKSkudG8uYmUoZmFsc2UpO1xuICB9KTtcbiAgaXQoJ3Nob3VsZCByZS1iaW5kIGVycm9yIHRyaWdnZXJzIGFmdGVyIGEgcmVzZXQgKGlucHV0PXRleHQpJywgKCkgPT4ge1xuICAgICQoJ2JvZHknKS5hcHBlbmQoJzxpbnB1dCB0eXBlPVwidGV4dFwiIGlkPVwiZWxlbWVudFwiIHJlcXVpcmVkIC8+Jyk7XG4gICAgdmFyIHBhcnNsZXlJbnN0YW5jZSA9ICQoJyNlbGVtZW50JykucGFyc2xleSgpO1xuICAgIHBhcnNsZXlJbnN0YW5jZS52YWxpZGF0ZSgpO1xuICAgIHBhcnNsZXlJbnN0YW5jZS5yZXNldCgpO1xuICAgIHBhcnNsZXlJbnN0YW5jZS52YWxpZGF0ZSgpO1xuICAgIGV4cGVjdCgkKCd1bCNwYXJzbGV5LWlkLScgKyBwYXJzbGV5SW5zdGFuY2UuX19pZF9fICsgJyBsaScpLmxlbmd0aCkudG8uYmUoMSk7XG4gICAgJCgnI2VsZW1lbnQnKS52YWwoJ2ZvbycpLnRyaWdnZXIoJ2lucHV0Jyk7XG4gICAgZXhwZWN0KCQoJ3VsI3BhcnNsZXktaWQtJyArIHBhcnNsZXlJbnN0YW5jZS5fX2lkX18gKyAnIGxpJykubGVuZ3RoKS50by5iZSgwKTtcbiAgfSk7XG4gIGl0KCdzaG91bGQgcmUtYmluZCBlcnJvciB0cmlnZ2VycyBhZnRlciBhIHJlc2V0IChzZWxlY3QpJywgKCkgPT4ge1xuICAgICQoJ2JvZHknKS5hcHBlbmQoJzxzZWxlY3QgaWQ9XCJlbGVtZW50XCIgcmVxdWlyZWQ+JyArXG4gICAgICAnPG9wdGlvbiB2YWx1ZT1cIlwiPkNob29zZTwvb3B0aW9uPicgK1xuICAgICAgJzxvcHRpb24gdmFsdWU9XCJmb29cIj5mb288L29wdGlvbj4nICtcbiAgICAgICc8b3B0aW9uIHZhbHVlPVwiYmFyXCI+YmFyPC9vcHRpb24+JyArXG4gICAgJzwvc2VsZWN0PicpO1xuICAgIHZhciBwYXJzbGV5SW5zdGFuY2UgPSAkKCcjZWxlbWVudCcpLnBhcnNsZXkoKTtcbiAgICBwYXJzbGV5SW5zdGFuY2UudmFsaWRhdGUoKTtcbiAgICBwYXJzbGV5SW5zdGFuY2UucmVzZXQoKTtcbiAgICBwYXJzbGV5SW5zdGFuY2UudmFsaWRhdGUoKTtcbiAgICBleHBlY3QoJCgndWwjcGFyc2xleS1pZC0nICsgcGFyc2xleUluc3RhbmNlLl9faWRfXyArICcgbGknKS5sZW5ndGgpLnRvLmJlKDEpO1xuICAgICQoJyNlbGVtZW50IG9wdGlvblt2YWx1ZT1cImZvb1wiXScpLnByb3AoJ3NlbGVjdGVkJywgdHJ1ZSk7XG4gICAgJCgnI2VsZW1lbnQnKS50cmlnZ2VyKCdpbnB1dCcpO1xuICAgIGV4cGVjdCgkKCd1bCNwYXJzbGV5LWlkLScgKyBwYXJzbGV5SW5zdGFuY2UuX19pZF9fICsgJyBsaScpLmxlbmd0aCkudG8uYmUoMCk7XG4gIH0pO1xuICBpdCgnc2hvdWxkIHJlLWJpbmQgY3VzdG9tIHRyaWdnZXJzIGFmdGVyIGEgcmVzZXQnLCAoKSA9PiB7XG4gICAgJCgnYm9keScpLmFwcGVuZCgnPGlucHV0IHR5cGU9XCJ0ZXh0XCIgaWQ9XCJlbGVtZW50XCIgcmVxdWlyZWQgZGF0YS1wYXJzbGV5LXRyaWdnZXI9XCJmb2N1c291dFwiIC8+Jyk7XG4gICAgdmFyIHBhcnNsZXlJbnN0YW5jZSA9ICQoJyNlbGVtZW50JykucGFyc2xleSgpO1xuICAgIHBhcnNsZXlJbnN0YW5jZS52YWxpZGF0ZSgpO1xuICAgIHBhcnNsZXlJbnN0YW5jZS5yZXNldCgpO1xuICAgICQoJyNlbGVtZW50JykudHJpZ2dlcignZm9jdXNvdXQnKTtcbiAgICBleHBlY3QoJCgndWwjcGFyc2xleS1pZC0nICsgcGFyc2xleUluc3RhbmNlLl9faWRfXyArICcgbGknKS5sZW5ndGgpLnRvLmJlKDEpO1xuICB9KTtcbiAgaXQoJ3Nob3VsZCBoYW5kbGUgY3VzdG9tIGVycm9yIG1lc3NhZ2UgZm9yIHZhbGlkYXRvcnMgd2l0aCBjb21wb3VuZCBuYW1lcycsICgpID0+IHtcbiAgICAkKCdib2R5JykuYXBwZW5kKCc8aW5wdXQgdHlwZT1cInRleHRcIiB2YWx1ZT1cIjFcIiBpZD1cImVsZW1lbnRcIiBkYXRhLXBhcnNsZXktY3VzdG9tLXZhbGlkYXRvcj1cIjJcIiBkYXRhLXBhcnNsZXktY3VzdG9tLXZhbGlkYXRvci1tZXNzYWdlPVwiY3VzdG9tLXZhbGlkYXRvciBlcnJvclwiLz4nKTtcbiAgICB3aW5kb3cuUGFyc2xleS5hZGRWYWxpZGF0b3IoJ2N1c3RvbVZhbGlkYXRvcicsICh2YWx1ZSwgcmVxdWlyZW1lbnQpID0+IHtcbiAgICAgIHJldHVybiByZXF1aXJlbWVudCA9PT0gdmFsdWU7XG4gICAgfSwgMzIpO1xuICAgIHZhciBwYXJzbGV5RmllbGQgPSAkKCcjZWxlbWVudCcpLnBzbHkoKTtcbiAgICBwYXJzbGV5RmllbGQudmFsaWRhdGUoKTtcbiAgICBleHBlY3QoJCgndWwjcGFyc2xleS1pZC0nICsgcGFyc2xleUZpZWxkLl9faWRfXyArICcgbGknKS50ZXh0KCkpLnRvLmJlKCdjdXN0b20tdmFsaWRhdG9yIGVycm9yJyk7XG4gICAgd2luZG93LlBhcnNsZXkucmVtb3ZlVmFsaWRhdG9yKCdjdXN0b21WYWxpZGF0b3InKTtcbiAgfSk7XG4gIGl0KCdzaG91bGQgaGFuZGxlIGN1c3RvbSBlcnJvciBtZXNzYWdlcyByZXR1cm5lZCBmcm9tIGN1c3RvbSB2YWxpZGF0b3JzJywgKCkgPT4ge1xuICAgICQoJ2JvZHknKS5hcHBlbmQoJzxpbnB1dCB0eXBlPVwidGV4dFwiIHZhbHVlPVwiMVwiIGlkPVwiZWxlbWVudFwiIGRhdGEtcGFyc2xleS1jdXN0b20tdmFsaWRhdG9yPVwiMlwiIGRhdGEtcGFyc2xleS1jdXN0b20tdmFsaWRhdG9yLW1lc3NhZ2U9XCJjdXN0b20tdmFsaWRhdG9yIGVycm9yXCIvPicpO1xuICAgIHdpbmRvdy5QYXJzbGV5LmFkZFZhbGlkYXRvcignY3VzdG9tVmFsaWRhdG9yJywgKHZhbHVlLCByZXF1aXJlbWVudCkgPT4ge1xuICAgICAgcmV0dXJuICQuRGVmZXJyZWQoKS5yZWplY3QoXCJIZXksIHRoaXMgYWluJ3QgZ29vZCBhdCBhbGxcIikucHJvbWlzZSgpO1xuICAgIH0sIDMyKTtcbiAgICB2YXIgcGFyc2xleUZpZWxkID0gJCgnI2VsZW1lbnQnKS5wc2x5KCk7XG4gICAgcGFyc2xleUZpZWxkLnZhbGlkYXRlKCk7XG4gICAgZXhwZWN0KCQoYHVsI3BhcnNsZXktaWQtJHtwYXJzbGV5RmllbGQuX19pZF9ffSBsaWApLnRleHQoKSkudG8uYmUoXCJIZXksIHRoaXMgYWluJ3QgZ29vZCBhdCBhbGxcIik7XG4gICAgd2luZG93LlBhcnNsZXkucmVtb3ZlVmFsaWRhdG9yKCdjdXN0b21WYWxpZGF0b3InKTtcbiAgfSk7XG4gIGl0KCdzaG91bGQgcnVuIGJlZm9yZSBldmVudHMgYXJlIGZpcmVkJywgKCkgPT4ge1xuICAgICQoJ2JvZHknKS5hcHBlbmQoJzxpbnB1dCB0eXBlPVwidGV4dFwiIGlkPVwiZWxlbWVudFwiIHJlcXVpcmVkLz4nKTtcbiAgICB2YXIgcGFyc2xleSA9ICQoJyNlbGVtZW50JykucGFyc2xleSgpLm9uKCdmaWVsZDp2YWxpZGF0ZWQnLCAoKSA9PiB7XG4gICAgICBleHBlY3QoJCgnLnBhcnNsZXktZXJyb3JzLWxpc3QnKSkudG8uaGF2ZS5sZW5ndGgoMSk7XG4gICAgfSk7XG4gICAgcGFyc2xleS52YWxpZGF0ZSgpO1xuICB9KTtcblxuICBhZnRlckVhY2goKCkgPT4ge1xuICAgICQoJyNlbGVtZW50LCAucGFyc2xleS1lcnJvcnMtbGlzdCcpLnJlbW92ZSgpO1xuICB9KTtcbn0pO1xuIiwiaW1wb3J0ICQgZnJvbSAnanF1ZXJ5JztcbmltcG9ydCBVdGlscyBmcm9tICcuLi8uLi9zcmMvcGFyc2xleS91dGlscyc7XG5cbmRlc2NyaWJlKCdVdGlscycsICgpID0+IHtcbiAgaXQoJ3Nob3VsZCB3YXJuIHdoZW4gdXNpbmcgdGhlIG9sZCBnbG9iYWwgUGFyc2xleVV0aWxzJywgKCkgPT4ge1xuICAgIGV4cGVjdFdhcm5pbmcoKCkgPT4ge1xuICAgICAgZXhwZWN0KHdpbmRvdy5QYXJzbGV5VXRpbHMuZGVzZXJpYWxpemVWYWx1ZSgndHJ1ZScpKS50by5iZSh0cnVlKTtcbiAgICB9KTtcbiAgfSk7XG4gIGl0KCdzaG91bGQgaGF2ZSBhIHByb3BlciBkZXNlcmlhbGl6ZVZhbHVlKCkgZnVuY3Rpb24nLCAoKSA9PiB7XG4gICAgZXhwZWN0KFV0aWxzLmRlc2VyaWFsaXplVmFsdWUoJ3RydWUnKSkudG8uYmUodHJ1ZSk7XG4gICAgZXhwZWN0KFV0aWxzLmRlc2VyaWFsaXplVmFsdWUoJzEnKSkudG8uYmUoMSk7XG4gICAgZXhwZWN0KFV0aWxzLmRlc2VyaWFsaXplVmFsdWUoJ1tcImZvb1wiLCBcImJhclwiXScpKS50by5iZS5hbignYXJyYXknKTtcbiAgICBleHBlY3QoVXRpbHMuZGVzZXJpYWxpemVWYWx1ZSgne1wiZm9vXCI6IFwiYmFyXCJ9JykpLnRvLmJlLmFuKCdvYmplY3QnKTtcbiAgfSk7XG4gIGl0KCdzaG91bGQgaGF2ZSBhIHByb3BlciBjYW1lbGl6ZSgpIGZ1bmN0aW9uJywgKCkgPT4ge1xuICAgIGV4cGVjdChVdGlscy5jYW1lbGl6ZSgnZm9vLWJhcicpKS50by5iZSgnZm9vQmFyJyk7XG4gICAgZXhwZWN0KFV0aWxzLmNhbWVsaXplKCdmb28tYmFyLWJheicpKS50by5iZSgnZm9vQmFyQmF6Jyk7XG4gICAgZXhwZWN0KFV0aWxzLmNhbWVsaXplKCdmb28tYkFyLWJheicpKS50by5iZSgnZm9vQkFyQmF6Jyk7XG4gIH0pO1xuICBpdCgnc2hvdWxkIGhhdmUgYSBwcm9wZXIgZGFzaGVyaXplKCkgZnVuY3Rpb24nLCAoKSA9PiB7XG4gICAgZXhwZWN0KFV0aWxzLmRhc2hlcml6ZSgnZm9vQmFyJykpLnRvLmJlKCdmb28tYmFyJyk7XG4gICAgZXhwZWN0KFV0aWxzLmRhc2hlcml6ZSgnZm9vQmFyQmF6JykpLnRvLmJlKCdmb28tYmFyLWJheicpO1xuICAgIGV4cGVjdChVdGlscy5kYXNoZXJpemUoJ2Zvb0JBckJheicpKS50by5iZSgnZm9vLWItYXItYmF6Jyk7XG4gIH0pO1xuICBpdCgnc2hvdWxkIGhhdmUgYSBwcm9wZXIgYXR0cigpIGZ1bmN0aW9uJywgKCkgPT4ge1xuICAgIHZhciBlbGVtZW50ID0ge1xuICAgICAgYXR0cmlidXRlczogW1xuICAgICAgICB7XG4gICAgICAgICAgc3BlY2lmaWVkOiB0cnVlLFxuICAgICAgICAgIG5hbWU6IFwiZGF0YS1wYXJzbGV5LWZvb1wiLFxuICAgICAgICAgIHZhbHVlOiBcImJhclwiXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICBzcGVjaWZpZWQ6IHRydWUsXG4gICAgICAgICAgbmFtZTogXCJwYXJzbGV5LWZvb1wiLFxuICAgICAgICAgIHZhbHVlOiBcImJhelwiXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICBzcGVjaWZpZWQ6IHRydWUsXG4gICAgICAgICAgbmFtZTogXCJkYXRhLXBhcnNsZXktYmFyXCIsXG4gICAgICAgICAgdmFsdWU6IFwiWzAsIDQyXVwiXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICBzcGVjaWZpZWQ6IGZhbHNlLFxuICAgICAgICAgIG5hbWU6IFwiZGF0YS1wYXJzbGV5LWZvb1wiLFxuICAgICAgICAgIHZhbHVlOiBcImJhclwiXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICBmb286IFwiYmFyXCJcbiAgICAgICAgfVxuICAgICAgXVxuICAgIH07XG4gICAgdmFyIGF0dHIgPSBVdGlscy5hdHRyKGVsZW1lbnQsICdkYXRhLXBhcnNsZXktJyk7XG5cbiAgICBleHBlY3QoYXR0cikudG8uZXFsKHsnZm9vJzogJ2JhcicsICdiYXInOiBbMCwgNDJdfSk7XG4gIH0pO1xuICBpdCgnc2hvdWxkIGhhdmUgYSBwcm9wZXIgYXR0cigpIGZ1bmN0aW9uIHRoYXQgcmV3cml0ZXMgYSBnaXZlbiBvYmplY3QnLCAoKSA9PiB7XG4gICAgdmFyIG9iaiA9IFV0aWxzLm9iamVjdENyZWF0ZSh7Zm9vOiAneCcsIGZveDogJ3Ryb3QnfSk7XG4gICAgb2JqLmRlbGV0ZU1lID0gJ3BsZWFzZSc7XG4gICAgdmFyICRlbGVtZW50ID0gJCgnPGIgZGF0YS1wYXJzbGV5LWZvbz1cImFcIiBkYXRhLXBhcnNsZXktYmFyPVwiWzAsIDQyXVwiIHBhcnNsZXktYmF6PVwiYmF6XCI+Jyk7XG5cbiAgICBVdGlscy5hdHRyKCRlbGVtZW50WzBdLCAnZGF0YS1wYXJzbGV5LScsIG9iaik7XG5cbiAgICBleHBlY3Qob2JqKS50by5lcWwoe2ZvbzogXCJhXCIsIGJhcjogWzAsIDQyXX0pO1xuICAgIGV4cGVjdChvYmouZm94KS50by5lcWwoJ3Ryb3QnKTtcbiAgfSk7XG5cbiAgaXQoJ3Nob3VsZCBoYXZlIGEgY2hlY2tBdHRyIGZlYXR1cmUnLCAoKSA9PiB7XG4gICAgdmFyIGVsZW1lbnQgPSAkKCc8c3BhbiBkYXRhLXBhcnNsZXktcmVxdWlyZWQtbWVzc2FnZT1cImZvb1wiIGRhdGEtcGFyc2xleS12YWxpZGF0ZT1cInRydWVcIj4nKVswXTtcbiAgICBleHBlY3QoVXRpbHMuY2hlY2tBdHRyKGVsZW1lbnQsICdkYXRhLXBhcnNsZXktJywgJ3JlcXVpcmVkJykpLnRvLmJlKGZhbHNlKTtcbiAgICBleHBlY3QoVXRpbHMuY2hlY2tBdHRyKGVsZW1lbnQsICdkYXRhLXBhcnNsZXktJywgJ3JlcXVpcmVkLW1lc3NhZ2UnKSkudG8uYmUodHJ1ZSk7XG4gICAgZXhwZWN0KFV0aWxzLmNoZWNrQXR0cihlbGVtZW50LCAnZGF0YS1wYXJzbGV5LScsICd2YWxpZGF0ZScpKS50by5iZSh0cnVlKTtcbiAgfSk7XG5cbiAgZGVzY3JpYmUoJ25hbWVzcGFjZUV2ZW50cycsICgpID0+IHtcbiAgICB2YXIgaXRNYXBzID0gKHdoYXQsIHRvV2hhdCkgPT4ge1xuICAgICAgaXQoYG1hcHMgJyR7d2hhdH0nIHRvICcnYCwgKCkgPT4ge1xuICAgICAgICBleHBlY3QoVXRpbHMubmFtZXNwYWNlRXZlbnRzKHdoYXQsICducycpKS50by5lcWwodG9XaGF0KTtcbiAgICAgIH0pO1xuICAgIH07XG4gICAgaXRNYXBzKCdmb28nLCAnZm9vLm5zJyk7XG4gICAgZm9yICh2YXIgZXZ0IG9mIFsnJywgJyAgJywgZmFsc2UsIG51bGwsIHVuZGVmaW5lZF0pIHtcbiAgICAgIGl0TWFwcyhldnQsICcnKTtcbiAgICB9XG4gICAgaXRNYXBzKCcgICBmb28gICAgYmFyICAgJywgJ2Zvby5ucyBiYXIubnMnKTtcbiAgfSk7XG5cbiAgZGVzY3JpYmUoJ3BhcnNlJywgKCkgPT4ge1xuICAgIGRlc2NyaWJlKCdkYXRlJywgKCkgPT4ge1xuICAgICAgaXQoJ3JldHVybnMgbnVsbCBmb3IgaW52YWxpZCBkYXRlcycsICgpID0+IHtcbiAgICAgICAgZXhwZWN0KFV0aWxzLnBhcnNlLmRhdGUoJzE5NzItMTMtMDInKSkudG8uYmUubnVsbDtcbiAgICAgICAgZXhwZWN0KFV0aWxzLnBhcnNlLmRhdGUoJzE5NzMtMDItMjknKSkudG8uYmUubnVsbDtcbiAgICAgICAgZXhwZWN0KFV0aWxzLnBhcnNlLmRhdGUoJzcyLTAxLTA2JykpLnRvLmJlLm51bGw7XG4gICAgICAgIGV4cGVjdChVdGlscy5wYXJzZS5kYXRlKCcxOTcyLzAxLzA2JykpLnRvLmJlLm51bGw7XG4gICAgICAgIGV4cGVjdChVdGlscy5wYXJzZS5kYXRlKCcxOTcyLTAxLTYnKSkudG8uYmUubnVsbDtcbiAgICAgICAgZXhwZWN0KFV0aWxzLnBhcnNlLmRhdGUoJzE5NzItMS0wNicpKS50by5iZS5udWxsO1xuICAgICAgICBleHBlY3QoVXRpbHMucGFyc2UuZGF0ZSgnICAxOTcyLTAxIC0wNiAgJykpLnRvLmJlLm51bGw7XG4gICAgICB9KTtcbiAgICAgIGl0KCdyZXR1cm5zIGEgZGF0ZSBmb3Igc3RyaW5ncyBvZiBmb3JtIFlZWVkvTU0vREQnLCAoKSA9PiB7XG4gICAgICAgIGV4cGVjdChVdGlscy5wYXJzZS5kYXRlKCcxOTcyLTAxLTA2JykpLnRvLmVxbChuZXcgRGF0ZSgnMTk3Mi8wMS8wNicpKTtcbiAgICAgIH0pO1xuICAgIH0pO1xuICB9KTtcbn0pO1xuIiwiaW1wb3J0IFZhbGlkYXRvciBmcm9tICcuLi8uLi9zcmMvcGFyc2xleS92YWxpZGF0b3InO1xuXG5kZXNjcmliZSgnVmFsaWRhdG9yJywgKCkgPT4ge1xuICB2YXIgdGVzdFBhcnNpbmcgPSBmdW5jdGlvbih0eXBlLCBpbnB1dCwgb3V0cHV0LCBleHRyYU9wdGlvbnMpIHtcbiAgICBpdChgcGFyc2VzICR7dHlwZX0gcmVxdWlyZW1lbnRzYCwgKCkgPT4ge1xuICAgICAgdmFyIGMgPSBuZXcgVmFsaWRhdG9yKHtyZXF1aXJlbWVudFR5cGU6IHR5cGV9KTtcbiAgICAgIGV4cGVjdChjLnBhcnNlUmVxdWlyZW1lbnRzKGlucHV0LCBleHRyYU9wdGlvbnMpKS50by5lcWwob3V0cHV0KTtcbiAgICB9KTtcbiAgfTtcblxuICB0ZXN0UGFyc2luZygnaW50ZWdlcicsICc0MicsIFs0Ml0pO1xuICB0ZXN0UGFyc2luZygnbnVtYmVyJywgJzQuMicsIFs0LjJdKTtcbiAgdGVzdFBhcnNpbmcoJ3N0cmluZycsICc0MicsIFsnNDInXSk7XG4gIHRlc3RQYXJzaW5nKFsnbnVtYmVyJywgJ3N0cmluZyddLCAnWzQuMiwgNC4yXScsIFs0LjIsICc0LjInXSk7XG4gIHRlc3RQYXJzaW5nKHtcbiAgICAgICcnOiAnbnVtYmVyJyxcbiAgICAgICdmb28nOiAnc3RyaW5nJyxcbiAgICAgICdiYXInOiAnc3RyaW5nJ1xuICAgIH0sICc0LjInLFxuICAgIFs0LjIsIHtmb286ICdGT08nLCBiYXI6ICdCQVInfV0sXG4gICAgdmFsdWUgPT4geyByZXR1cm4gdmFsdWUudG9VcHBlckNhc2UoKTsgfVxuICApO1xufSk7XG4iLCJpbXBvcnQgJCBmcm9tICdqcXVlcnknO1xuaW1wb3J0IFZhbGlkYXRvciBmcm9tICcuLi8uLi9zcmMvcGFyc2xleS92YWxpZGF0b3InO1xuaW1wb3J0IFZhbGlkYXRvclJlZ2lzdHJ5IGZyb20gJy4uLy4uL3NyYy9wYXJzbGV5L3ZhbGlkYXRvcl9yZWdpc3RyeSc7XG5pbXBvcnQgUGFyc2xleSBmcm9tICcuLi8uLi9zcmMvcGFyc2xleSc7XG5pbXBvcnQgZnIgZnJvbSAnLi4vLi4vc3JjL2kxOG4vZnInO1xuXG5kZXNjcmliZSgnVmFsaWRhdG9yUmVnaXN0cnknLCAoKSA9PiB7XG4gIHZhciB2YWxpZGF0b3JSZWdpc3RyeSA9IFBhcnNsZXkuX3ZhbGlkYXRvclJlZ2lzdHJ5O1xuICBsZXQgaW5zdGFuY2UgPSAkKCc8aW5wdXQ+JykucGFyc2xleSgpO1xuXG4gIHZhciBleHBlY3RWYWxpZGF0aW9uID0gZnVuY3Rpb24odmFsdWUsIG5hbWUsIHJlcXVpcmVtZW50cywgZXh0cmEgPSB7fSkge1xuICAgIHZhciB2YWxpZGF0b3JTcGVjID0gdmFsaWRhdG9yUmVnaXN0cnkudmFsaWRhdG9yc1tuYW1lXTtcbiAgICB2YXIgdmFsaWRhdG9yID0gbmV3IFZhbGlkYXRvcih2YWxpZGF0b3JTcGVjKTtcbiAgICB2YXIgYXJnTGlzdCA9IHZhbGlkYXRvci5wYXJzZVJlcXVpcmVtZW50cyhyZXF1aXJlbWVudHMsIGtleSA9PiB7IHJldHVybiBleHRyYVtrZXldOyB9KTtcbiAgICByZXR1cm4gZXhwZWN0KHZhbGlkYXRvci52YWxpZGF0ZSh2YWx1ZSwgLi4uYXJnTGlzdCwgaW5zdGFuY2UpKTtcbiAgfTtcblxuICBhZnRlckVhY2goKCkgPT4ge1xuICAgIFBhcnNsZXkuc2V0TG9jYWxlKCdlbicpO1xuICB9KTtcblxuICBpdCgnc2hvdWxkIGJlIGEgZnVuY3Rpb24nLCAoKSA9PiB7XG4gICAgZXhwZWN0KFZhbGlkYXRvclJlZ2lzdHJ5KS50by5iZS5hKCdmdW5jdGlvbicpO1xuICB9KTtcbiAgaXQoJ3Nob3VsZCBiaW5kIGdsb2JhbCBjb25maWcgdmFsaWRhdG9ycyBpZiBnaXZlbiBpbiBjb25zdHJ1Y3RvcicsICgpID0+IHtcbiAgICAkLmV4dGVuZCh0cnVlLCBQYXJzbGV5Lm9wdGlvbnMsIHtcbiAgICAgIHZhbGlkYXRvcnM6IHtcbiAgICAgICAgZm9vOiB7Zm46ICgpID0+IHt9LCBwcmlvcml0eTogNDJ9LFxuICAgICAgICBiYXI6IHtmbjogKCkgPT4ge30sIHByaW9yaXR5OiAxMn1cbiAgICAgIH1cbiAgICB9KTtcbiAgICB2YXIgdmFsaWRhdG9yID0gbmV3IFZhbGlkYXRvclJlZ2lzdHJ5KFBhcnNsZXkub3B0aW9ucy52YWxpZGF0b3JzKTtcbiAgICBleHBlY3QodmFsaWRhdG9yLnZhbGlkYXRvcnMpLnRvLmhhdmUua2V5KCdmb28nKTtcbiAgICBleHBlY3QodmFsaWRhdG9yLnZhbGlkYXRvcnMpLnRvLmhhdmUua2V5KCdiYXInKTtcbiAgICBleHBlY3QodmFsaWRhdG9yUmVnaXN0cnkudmFsaWRhdG9ycykubm90LnRvLmhhdmUua2V5KCdmb28nKTtcbiAgICBkZWxldGUgUGFyc2xleS5vcHRpb25zLnZhbGlkYXRvcnMuZm9vO1xuICAgIGRlbGV0ZSBQYXJzbGV5Lm9wdGlvbnMudmFsaWRhdG9ycy5iYXI7XG4gIH0pO1xuICBpdCgnc2hvdWxkIGhhdmUgYSByZXF1aXJlZCB2YWxpZGF0b3InLCAoKSA9PiB7XG4gICAgZXhwZWN0VmFsaWRhdGlvbignJywgJ3JlcXVpcmVkJykubm90LnRvLmJlKHRydWUpO1xuICAgIGV4cGVjdFZhbGlkYXRpb24oJ2ZvbycsICdyZXF1aXJlZCcpLnRvLmJlKHRydWUpO1xuICB9KTtcbiAgaXQoJ3Nob3VsZCBoYXZlIGEgbm90YmxhbmsgdmFsaWRhdG9yJywgKCkgPT4ge1xuICAgIGV4cGVjdFZhbGlkYXRpb24oJyAnLCAnbm90YmxhbmsnKS5ub3QudG8uYmUodHJ1ZSk7XG4gICAgZXhwZWN0VmFsaWRhdGlvbignZm9vJywgJ25vdGJsYW5rJykudG8uYmUodHJ1ZSk7XG4gIH0pO1xuICBpdCgnc2hvdWxkIGhhdmUgYSB0eXBlPVwiZW1haWxcIiB2YWxpZGF0b3InLCAoKSA9PiB7XG4gICAgZXhwZWN0VmFsaWRhdGlvbignJywgICAgICAgICAgICAgICAgICAgICd0eXBlJywgJ2VtYWlsJykudG8uYmUodHJ1ZSk7XG4gICAgZXhwZWN0VmFsaWRhdGlvbignZm9vJywgICAgICAgICAgICAgICAgICd0eXBlJywgJ2VtYWlsJykubm90LnRvLmJlKHRydWUpO1xuICAgIGV4cGVjdFZhbGlkYXRpb24oJ2Zvb0BiYXIuYmF6JywgICAgICAgICAndHlwZScsICdlbWFpbCcpLnRvLmJlKHRydWUpO1xuICAgIGV4cGVjdFZhbGlkYXRpb24oJ2ZvbytiYXJAYmFyLmJheicsICAgICAndHlwZScsICdlbWFpbCcpLnRvLmJlKHRydWUpO1xuICAgIGV4cGVjdFZhbGlkYXRpb24oJ2Zvby5iYXJAYmFyLmJheicsICAgICAndHlwZScsICdlbWFpbCcpLnRvLmJlKHRydWUpO1xuICAgIGV4cGVjdFZhbGlkYXRpb24oJ2Zvby5iYXJAYmFyLmNvbS5leHQnLCAndHlwZScsICdlbWFpbCcpLnRvLmJlKHRydWUpO1xuICAgIGV4cGVjdFZhbGlkYXRpb24oJ2Zvb0BiYXIuLnR0LmNvbScsICAgICAndHlwZScsICdlbWFpbCcpLnRvLmJlKGZhbHNlKTtcbiAgfSk7XG4gIGl0KCdzaG91bGQgaGF2ZSBhIHR5cGU9XCJkYXRlXCIgdmFsaWRhdG9yJywgKCkgPT4ge1xuICAgIGV4cGVjdFZhbGlkYXRpb24oJycsICAgICAgICAgICAgICAgICAgICAndHlwZScsICdkYXRlJykudG8uYmUodHJ1ZSk7XG4gICAgZXhwZWN0VmFsaWRhdGlvbignZm9vJywgICAgICAgICAgICAgICAgICd0eXBlJywgJ2RhdGUnKS5ub3QudG8uYmUodHJ1ZSk7XG4gICAgZXhwZWN0VmFsaWRhdGlvbignMTInLCAgICAgICAgICAgICAgICAgICd0eXBlJywgJ2RhdGUnKS5ub3QudG8uYmUodHJ1ZSk7XG4gICAgZXhwZWN0VmFsaWRhdGlvbignMjAwMS0wMS0zMCcsICAgICAgICAgICd0eXBlJywgJ2RhdGUnKS50by5iZSh0cnVlKTtcbiAgICBleHBlY3RWYWxpZGF0aW9uKCcyMDAxLTAyLTMwJywgICAgICAgICAgJ3R5cGUnLCAnZGF0ZScpLm5vdC50by5iZSh0cnVlKTtcbiAgICBleHBlY3RWYWxpZGF0aW9uKCcyMDAxLTMwLTAxJywgICAgICAgICAgJ3R5cGUnLCAnZGF0ZScpLm5vdC50by5iZSh0cnVlKTtcbiAgfSk7XG4gIGl0KCdzaG91bGQgaGF2ZSBhIG1pbiB2YWxpZGF0b3InLCAoKSA9PiB7XG4gICAgZXhwZWN0VmFsaWRhdGlvbignJywgICAgJ21pbicsNikudG8uYmUodHJ1ZSk7XG4gICAgZXhwZWN0VmFsaWRhdGlvbignZm9vJywgJ21pbicsNikubm90LnRvLmJlKHRydWUpO1xuICAgIGV4cGVjdFZhbGlkYXRpb24oJzEnLCAgICdtaW4nLDYpLm5vdC50by5iZSh0cnVlKTtcbiAgICBleHBlY3RWYWxpZGF0aW9uKCc2JywgICAnbWluJyw2KS50by5iZSh0cnVlKTtcbiAgICBleHBlY3RWYWxpZGF0aW9uKCcxMCcsICAnbWluJyw2KS50by5iZSh0cnVlKTtcbiAgICAkKCdib2R5JykuYXBwZW5kKCc8aW5wdXQgdHlwZT1cInRleHRcIiBpZD1cImVsZW1lbnRcIiB2YWx1ZT1cIjdcIiBtaW49XCIyXCIgLz4nKTtcbiAgICBleHBlY3QoJCgnI2VsZW1lbnQnKS5wYXJzbGV5KCkuaXNWYWxpZCgpKS50by5iZSh0cnVlKTtcbiAgfSk7XG4gIGl0KCdzaG91bGQgaGF2ZSBhIG1heCB2YWxpZGF0b3InLCAoKSA9PiB7XG4gICAgZXhwZWN0VmFsaWRhdGlvbignJywgICAgJ21heCcsIDEwKS50by5iZSh0cnVlKTtcbiAgICBleHBlY3RWYWxpZGF0aW9uKCdmb28nLCAnbWF4JywgMTApLm5vdC50by5iZSh0cnVlKTtcbiAgICBleHBlY3RWYWxpZGF0aW9uKCcxJywgICAnbWF4JywgMTApLnRvLmJlKHRydWUpO1xuICAgIGV4cGVjdFZhbGlkYXRpb24oJzEnLCAgICdtYXgnLCAnMTAnKS50by5iZSh0cnVlKTtcbiAgICBleHBlY3RWYWxpZGF0aW9uKCcxMCcsICAnbWF4JywgMTApLnRvLmJlKHRydWUpO1xuICAgIGV4cGVjdFZhbGlkYXRpb24oJzE3JywgICdtYXgnLCAxMCkubm90LnRvLmJlKHRydWUpO1xuICAgICQoJ2JvZHknKS5hcHBlbmQoJzxpbnB1dCB0eXBlPVwidGV4dFwiIGlkPVwiZWxlbWVudFwiIHZhbHVlPVwiN1wiIG1heD1cIjIwXCIgLz4nKTtcbiAgICBleHBlY3QoJCgnI2VsZW1lbnQnKS5wYXJzbGV5KCkuaXNWYWxpZCgpKS50by5iZSh0cnVlKTtcbiAgfSk7XG4gIGl0KCdzaG91bGQgaGF2ZSBhIHJhbmdlIHZhbGlkYXRvcicsICgpID0+IHtcbiAgICBleHBlY3RWYWxpZGF0aW9uKCcxJywgICdyYW5nZScsIFs1LCAxMF0pLm5vdC50by5iZSh0cnVlKTtcbiAgICBleHBlY3RWYWxpZGF0aW9uKCc3JywgICdyYW5nZScsIFs1LCAxMF0pLnRvLmJlKHRydWUpO1xuICAgIGV4cGVjdFZhbGlkYXRpb24oJzE3JywgJ3JhbmdlJywgWzUsIDEwXSkubm90LnRvLmJlKHRydWUpO1xuICAgICQoJ2JvZHknKS5hcHBlbmQoJzxpbnB1dCB0eXBlPVwidGV4dFwiIGlkPVwiZWxlbWVudFwiIHZhbHVlPVwiN1wiIG1heD1cIjIwXCIgbWluPVwiMlwiIC8+Jyk7XG4gICAgZXhwZWN0KCQoJyNlbGVtZW50JykucGFyc2xleSgpLmlzVmFsaWQoKSkudG8uYmUodHJ1ZSk7XG5cbiAgICAkKCcjZWxlbWVudCcpLnJlbW92ZSgpO1xuICAgICQoJ2JvZHknKS5hcHBlbmQoJzxpbnB1dCB0eXBlPVwicmFuZ2VcIiBpZD1cImVsZW1lbnRcIiB2YWx1ZT1cIjdcIiBtYXg9XCIyMFwiIG1pbj1cIjJcIiAvPicpO1xuICAgIGV4cGVjdCgkKCcjZWxlbWVudCcpLnBhcnNsZXkoKS5pc1ZhbGlkKCkpLnRvLmJlKHRydWUpO1xuICB9KTtcbiAgaXQoJ3Nob3VsZCBoYXZlIGEgdHlwZT1cIm51bWJlclwiIHZhbGlkYXRvcicsICgpID0+IHtcbiAgICBleHBlY3RWYWxpZGF0aW9uKCdmb28nLCAgICAgICAndHlwZScsICdudW1iZXInKS5ub3QudG8uYmUodHJ1ZSk7XG4gICAgZXhwZWN0VmFsaWRhdGlvbignLScsICAgICAgICAgJ3R5cGUnLCAnbnVtYmVyJykubm90LnRvLmJlKHRydWUpO1xuICAgIGV4cGVjdFZhbGlkYXRpb24oJzEnLCAgICAgICAgICd0eXBlJywgJ251bWJlcicpLnRvLmJlKHRydWUpO1xuICAgIGV4cGVjdFZhbGlkYXRpb24oJzEuNScsICAgICAgICd0eXBlJywgJ251bWJlcicsIHtzdGVwOiAnYW55J30pLnRvLmJlKHRydWUpO1xuICAgIGV4cGVjdFZhbGlkYXRpb24oJy0xLjUnLCAgICAgICd0eXBlJywgJ251bWJlcicsIHtzdGVwOiAnYW55J30pLnRvLmJlKHRydWUpO1xuICAgIGV4cGVjdFZhbGlkYXRpb24oJzE1MDAuNjQyJywgICd0eXBlJywgJ251bWJlcicsIHtzdGVwOiAnYW55J30pLnRvLmJlKHRydWUpO1xuICAgIGV4cGVjdFZhbGlkYXRpb24oJzAuNScsICAgICAgICd0eXBlJywgJ251bWJlcicsIHtzdGVwOiAnYW55J30pLnRvLmJlKHRydWUpO1xuICAgIGV4cGVjdFZhbGlkYXRpb24oJy41JywgICAgICAgICd0eXBlJywgJ251bWJlcicsIHtzdGVwOiAnYW55J30pLnRvLmJlKHRydWUpO1xuICB9KTtcbiAgaXQoJ3Nob3VsZCBoYXZlIGEgdHlwZT1cImRpZ2l0c1wiIHZhbGlkYXRvcicsICgpID0+IHtcbiAgICBleHBlY3RWYWxpZGF0aW9uKCdmb28nLCAgICAgICAndHlwZScsICdkaWdpdHMnKS5ub3QudG8uYmUodHJ1ZSk7XG4gICAgZXhwZWN0VmFsaWRhdGlvbignMScsICAgICAgICAgJ3R5cGUnLCAnZGlnaXRzJykudG8uYmUodHJ1ZSk7XG4gICAgZXhwZWN0VmFsaWRhdGlvbignLTEnLCAgICAgICAgJ3R5cGUnLCAnZGlnaXRzJykubm90LnRvLmJlKHRydWUpO1xuICAgIGV4cGVjdFZhbGlkYXRpb24oJzEuNScsICAgICAgICd0eXBlJywgJ2RpZ2l0cycpLm5vdC50by5iZSh0cnVlKTtcbiAgICBleHBlY3RWYWxpZGF0aW9uKCctMS41JywgICAgICAndHlwZScsICdkaWdpdHMnKS5ub3QudG8uYmUodHJ1ZSk7XG4gICAgZXhwZWN0VmFsaWRhdGlvbignMSw1MDAuNjQyJywgJ3R5cGUnLCAnZGlnaXRzJykubm90LnRvLmJlKHRydWUpO1xuICB9KTtcbiAgaXQoJ3Nob3VsZCBoYXZlIGEgdHlwZT1cImludGVnZXJcIiB2YWxpZGF0b3InLCAoKSA9PiB7XG4gICAgZXhwZWN0VmFsaWRhdGlvbignZm9vJywgICd0eXBlJywgJ2ludGVnZXInKS5ub3QudG8uYmUodHJ1ZSk7XG4gICAgZXhwZWN0VmFsaWRhdGlvbignMScsICAgICd0eXBlJywgJ2ludGVnZXInKS50by5iZSh0cnVlKTtcbiAgICBleHBlY3RWYWxpZGF0aW9uKCctMScsICAgJ3R5cGUnLCAnaW50ZWdlcicpLnRvLmJlKHRydWUpO1xuICAgIGV4cGVjdFZhbGlkYXRpb24oJzEuNScsICAndHlwZScsICdpbnRlZ2VyJykubm90LnRvLmJlKHRydWUpO1xuICAgIGV4cGVjdFZhbGlkYXRpb24oJy0xLjUnLCAndHlwZScsICdpbnRlZ2VyJykubm90LnRvLmJlKHRydWUpO1xuICB9KTtcbiAgaXQoJ3Nob3VsZCBoYXZlIGEgdHlwZT1cImFscGhhbnVtXCIgdmFsaWRhdG9yJywgKCkgPT4ge1xuICAgIGV4cGVjdFZhbGlkYXRpb24oJ2ZvbycsICAgICAndHlwZScsICdhbHBoYW51bScpLnRvLmJlKHRydWUpO1xuICAgIGV4cGVjdFZhbGlkYXRpb24oJ2ZvbyBiYXInLCAndHlwZScsICdhbHBoYW51bScpLm5vdC50by5iZSh0cnVlKTtcbiAgICBleHBlY3RWYWxpZGF0aW9uKCdmb28kJywgICAgJ3R5cGUnLCAnYWxwaGFudW0nKS5ub3QudG8uYmUodHJ1ZSk7XG4gICAgJCgnYm9keScpLmFwcGVuZCgnPGlucHV0IGRhdGEtcGFyc2xleS10eXBlPVwiYWxwaGFudW1cIiBpZD1cImVsZW1lbnRcIiB2YWx1ZT1cInY0a1JSeWhZdm8wUFwiIC8+Jyk7XG4gICAgZXhwZWN0KCQoJyNlbGVtZW50JykucGFyc2xleSgpLmlzVmFsaWQoKSkudG8uYmUodHJ1ZSk7XG4gIH0pO1xuICBpdCgnc2hvdWxkIGhhdmUgYSB0eXBlPVwidXJsXCIgdmFsaWRhdG9yJywgKCkgPT4ge1xuICAgIGV4cGVjdFZhbGlkYXRpb24oJ2ZvbycsICAgICAgICAgICAgICAgICAgICAgICAgJ3R5cGUnLCAndXJsJykubm90LnRvLmJlKHRydWUpO1xuICAgIGV4cGVjdFZhbGlkYXRpb24oJ2ZvbyBiYXInLCAgICAgICAgICAgICAgICAgICAgJ3R5cGUnLCAndXJsJykubm90LnRvLmJlKHRydWUpO1xuICAgIGV4cGVjdFZhbGlkYXRpb24oJ2h0dHA6Ly8nLCAgICAgICAgICAgICAgICAgICAgJ3R5cGUnLCAndXJsJykubm90LnRvLmJlKHRydWUpO1xuICAgIGV4cGVjdFZhbGlkYXRpb24oJ2Zvby5iYXInLCAgICAgICAgICAgICAgICAgICAgJ3R5cGUnLCAndXJsJykudG8uYmUodHJ1ZSk7XG4gICAgZXhwZWN0VmFsaWRhdGlvbignd3d3LmZvby5iYXInLCAgICAgICAgICAgICAgICAndHlwZScsICd1cmwnKS50by5iZSh0cnVlKTtcbiAgICBleHBlY3RWYWxpZGF0aW9uKCdodHRwOi8vd3d3LmZvby5iYXInLCAgICAgICAgICd0eXBlJywgJ3VybCcpLnRvLmJlKHRydWUpO1xuICAgIGV4cGVjdFZhbGlkYXRpb24oJ2h0dHBzOi8vd3d3LmZvby5iYXInLCAgICAgICAgJ3R5cGUnLCAndXJsJykudG8uYmUodHJ1ZSk7XG4gICAgZXhwZWN0VmFsaWRhdGlvbignaHR0cDovLzE5Mi4xNjguMS4xL2Zvby9iYXInLCAndHlwZScsICd1cmwnKS50by5iZSh0cnVlKTtcbiAgfSk7XG4gIGl0KCdzaG91bGQgaGF2ZSBhIHBhdHRlcm4gdmFsaWRhdG9yJywgKCkgPT4ge1xuICAgIGV4cGVjdFZhbGlkYXRpb24oJ2EnLCAncGF0dGVybicsJ1thLXpdKycgICApLnRvLmJlKHRydWUpO1xuICAgIGV4cGVjdFZhbGlkYXRpb24oJ0EnLCAncGF0dGVybicsJ1thLXpdKycgICApLm5vdC50by5iZSh0cnVlKTtcbiAgICBleHBlY3RWYWxpZGF0aW9uKCdhJywgJ3BhdHRlcm4nLCcvW2Etel0rLycgKS50by5iZSh0cnVlKTtcbiAgICBleHBlY3RWYWxpZGF0aW9uKCdBJywgJ3BhdHRlcm4nLCcvW2Etel0rLycgKS5ub3QudG8uYmUodHJ1ZSk7XG4gICAgZXhwZWN0VmFsaWRhdGlvbignYScsICdwYXR0ZXJuJywnL1thLXpdKy9pJykudG8uYmUodHJ1ZSk7XG4gICAgZXhwZWN0VmFsaWRhdGlvbignQScsICdwYXR0ZXJuJywnL1thLXpdKy9pJykudG8uYmUodHJ1ZSk7XG4gIH0pO1xuICBpdCgnc2hvdWxkIGhhdmUgYSBwYXR0ZXJuIHZhbGlkYXRvciB0aGF0IGJlaGF2ZXMgYXMgdGhlIHN0YW5kYXJkIHdoZW4gbm90IG9mIHRoZSBmb3JtIC9wYXR0ZXJuL2ZsYWcnLCAoKSA9PiB7XG4gICAgZXhwZWN0VmFsaWRhdGlvbignYWEnLCAncGF0dGVybicsICdbYS16XXsxLDJ9JykudG8uYmUodHJ1ZSk7XG4gICAgZXhwZWN0VmFsaWRhdGlvbignYWFhJywgJ3BhdHRlcm4nLCAnW2Etel17MSwyfScpLm5vdC50by5iZSh0cnVlKTtcbiAgICBleHBlY3RWYWxpZGF0aW9uKCdhYScsICAncGF0dGVybicsICdeW2Etel17Mn0kJykudG8uYmUodHJ1ZSk7XG4gIH0pO1xuICBpdCgnc2hvdWxkIGhhdmUgYSBwYXR0ZXJuIHZhbGlkYXRvciB0aGF0IGV4dGVuZHMgdGhlIHN0YW5kYXJkIGZvciBmb3JtIC9wYXR0ZXJuL2ZsYWcnLCAoKSA9PiB7XG4gICAgZXhwZWN0VmFsaWRhdGlvbignekF6JywgJ3BhdHRlcm4nLCAnL2EvaScpLnRvLmJlKHRydWUpO1xuICB9KTtcbiAgaXQoJ3Nob3VsZCBoYXZlIGEgbGVuZ3RoIHZhbGlkYXRvcicsICgpID0+IHtcbiAgICBleHBlY3RWYWxpZGF0aW9uKCdmb29iYXInLCAgICAnbGVuZ3RoJywgWzMsIDldKS50by5iZSh0cnVlKTtcbiAgICBleHBlY3RWYWxpZGF0aW9uKCdmb28nLCAgICAgICAnbGVuZ3RoJywgWzQsIDldKS5ub3QudG8uYmUodHJ1ZSk7XG4gICAgZXhwZWN0VmFsaWRhdGlvbignZm9vYmFyYmF6JywgJ2xlbmd0aCcsIFszLCA4XSkubm90LnRvLmJlKHRydWUpO1xuICB9KTtcbiAgaXQoJ3Nob3VsZCBoYXZlIGEgbWlubGVuZ3RoIHZhbGlkYXRvcicsICgpID0+IHtcbiAgICBleHBlY3RWYWxpZGF0aW9uKCdmb28nLCAnbWlubGVuZ3RoJywgMykudG8uYmUodHJ1ZSk7XG4gICAgZXhwZWN0VmFsaWRhdGlvbignZm8nLCAgJ21pbmxlbmd0aCcsIDMpLm5vdC50by5iZSh0cnVlKTtcbiAgICAkKCdib2R5JykuYXBwZW5kKCc8aW5wdXQgdHlwZT1cInRleHRcIiBpZD1cImVsZW1lbnRcIiB2YWx1ZT1cImZvb1wiIGRhdGEtcGFyc2xleS1taW5sZW5ndGg9XCIyXCIgLz4nKTtcbiAgICBleHBlY3QoJCgnI2VsZW1lbnQnKS5wYXJzbGV5KCkuaXNWYWxpZCgpKS50by5iZSh0cnVlKTtcbiAgfSk7XG4gIGl0KCdzaG91bGQgaGF2ZSBhIG1heGxlbmd0aCB2YWxpZGF0b3InLCAoKSA9PiB7XG4gICAgZXhwZWN0VmFsaWRhdGlvbignZm9vJywgICAgJ21heGxlbmd0aCcsIDMpLnRvLmJlKHRydWUpO1xuICAgIGV4cGVjdFZhbGlkYXRpb24oJ2Zvb2JhcicsICdtYXhsZW5ndGgnLCAzKS5ub3QudG8uYmUodHJ1ZSk7XG4gICAgJCgnYm9keScpLmFwcGVuZCgnPGlucHV0IHR5cGU9XCJ0ZXh0XCIgaWQ9XCJlbGVtZW50XCIgdmFsdWU9XCJmb29cIiBkYXRhLXBhcnNsZXktbWF4bGVuZ3RoPVwiMTBcIiAvPicpO1xuICAgIGV4cGVjdCgkKCcjZWxlbWVudCcpLnBhcnNsZXkoKS5pc1ZhbGlkKCkpLnRvLmJlKHRydWUpO1xuICB9KTtcbiAgaXQoJ3Nob3VsZCBoYXZlIGEgY2hlY2sgdmFsaWRhdG9yJywgKCkgPT4ge1xuICAgIGV4cGVjdFZhbGlkYXRpb24oWydmb28nLCAnYmFyJywgJ2JheiddLCAgICAgICAgICAgICAgICdjaGVjaycsIFszLCA1XSkudG8uYmUodHJ1ZSk7XG4gICAgZXhwZWN0VmFsaWRhdGlvbihbJ2ZvbycsICdiYXInLCAnYmF6JywgJ3F1eCcsICdidXgnXSwgJ2NoZWNrJywgWzMsIDRdKS5ub3QudG8uYmUodHJ1ZSk7XG4gICAgZXhwZWN0VmFsaWRhdGlvbihbJ2ZvbycsICdiYXInXSwgICAgICAgICAgICAgICAgICAgICAgJ2NoZWNrJywgWzMsIDVdKS5ub3QudG8uYmUodHJ1ZSk7XG4gIH0pO1xuICBpdCgnc2hvdWxkIGhhdmUgYSBtaW5jaGVjayB2YWxpZGF0b3InLCAoKSA9PiB7XG4gICAgZXhwZWN0VmFsaWRhdGlvbihbJ2ZvbycsICdiYXInLCAnYmF6J10sICdtaW5jaGVjaycsIDMpLnRvLmJlKHRydWUpO1xuICAgIGV4cGVjdFZhbGlkYXRpb24oWydmb28nLCAnYmFyJ10sICAgICAgICAnbWluY2hlY2snLCAzKS5ub3QudG8uYmUodHJ1ZSk7XG4gIH0pO1xuICBpdCgnc2hvdWxkIGhhdmUgYSBtYXhjaGVjayB2YWxpZGF0b3InLCAoKSA9PiB7XG4gICAgZXhwZWN0VmFsaWRhdGlvbihbJ2ZvbycsICdiYXInLCAnYmF6J10sICAgICAgICAnbWF4Y2hlY2snLCAzKS50by5iZSh0cnVlKTtcbiAgICBleHBlY3RWYWxpZGF0aW9uKFsnZm9vJywgJ2JhcicsICdiYXonLCAncXV4J10sICdtYXhjaGVjaycsIDMpLm5vdC50by5iZSh0cnVlKTtcbiAgfSk7XG4gIGl0KCdzaG91bGQgaGF2ZSBhbiBlcXVhbHRvIHZhbGlkYXRvcicsICgpID0+IHtcbiAgICBleHBlY3RWYWxpZGF0aW9uKCcnLCAgICAnZXF1YWx0bycsICdmb28nKS50by5iZSh0cnVlKTtcbiAgICBleHBlY3RWYWxpZGF0aW9uKCdiYXInLCAnZXF1YWx0bycsICdmb28nKS5ub3QudG8uYmUodHJ1ZSk7XG4gICAgZXhwZWN0VmFsaWRhdGlvbignZm9vJywgJ2VxdWFsdG8nLCAnZm9vJykudG8uYmUodHJ1ZSk7XG4gICAgJCgnYm9keScpLmFwcGVuZCgnPGlucHV0IHR5cGU9XCJ0ZXh0XCIgaWQ9XCJlbGVtZW50XCIgZGF0YS1wYXJzbGV5LWVxdWFsdG89XCIjZXF1YWx0b1wiIHJlcXVpcmVkIC8+PGlucHV0IHR5cGU9XCJ0ZXh0XCIgaWQ9XCJlcXVhbHRvXCIgdmFsdWU9XCJmb29cIiAvPicpO1xuICAgIGV4cGVjdCgkKCcjZWxlbWVudCcpLnBzbHkoKS5pc1ZhbGlkKCkpLnRvLmJlKGZhbHNlKTtcbiAgICAkKCcjZWxlbWVudCcpLnZhbCgnZm8nKTtcbiAgICBleHBlY3QoJCgnI2VsZW1lbnQnKS5wc2x5KCkuaXNWYWxpZCgpKS50by5iZShmYWxzZSk7XG4gICAgJCgnI2VsZW1lbnQnKS52YWwoJ2ZvbycpO1xuICAgIGV4cGVjdCgkKCcjZWxlbWVudCcpLnBzbHkoKS5pc1ZhbGlkKCkpLnRvLmJlKHRydWUpO1xuICAgICQoJyNlcXVhbHRvJykucmVtb3ZlKCk7XG4gIH0pO1xuICBpdCgnc2hvdWxkIGhhbmRsZSBwcm9wZXIgZXJyb3IgbWVzc2FnZSBmb3IgdmFsaWRhdG9ycycsICgpID0+IHtcbiAgICBleHBlY3QodmFsaWRhdG9yUmVnaXN0cnkuZ2V0RXJyb3JNZXNzYWdlKHtuYW1lOiAnbGVuZ3RoJywgcmVxdWlyZW1lbnRzOiBbMywgNl19KSkudG8uYmUoJ1RoaXMgdmFsdWUgbGVuZ3RoIGlzIGludmFsaWQuIEl0IHNob3VsZCBiZSBiZXR3ZWVuIDMgYW5kIDYgY2hhcmFjdGVycyBsb25nLicpO1xuICAgIGV4cGVjdCh2YWxpZGF0b3JSZWdpc3RyeS5nZXRFcnJvck1lc3NhZ2Uoe25hbWU6ICdub3RleGlzdGluZyd9KSkudG8uYmUoJ1RoaXMgdmFsdWUgc2VlbXMgdG8gYmUgaW52YWxpZC4nKTtcbiAgfSk7XG4gIGl0KCdzaG91bGQgaGFuZGxlIHByb3BlciBlcnJvciBtZXNzYWdlIGZvciB2YWxpZGF0b3JzIGluIHZhcmlvdXMgbGFuZ3VhZ2VzJywgKCkgPT4ge1xuICAgIHZhbGlkYXRvclJlZ2lzdHJ5LnNldExvY2FsZSgnZnInKTtcbiAgICBleHBlY3QodmFsaWRhdG9yUmVnaXN0cnkuZ2V0RXJyb3JNZXNzYWdlKHtuYW1lOiAnbGVuZ3RoJywgcmVxdWlyZW1lbnRzOiBbMywgNl19KSkudG8uYmUoJ0NldHRlIHZhbGV1ciBkb2l0IGNvbnRlbmlyIGVudHJlIDMgZXQgNiBjYXJhY3TDqHJlcy4nKTtcbiAgICBleHBlY3QodmFsaWRhdG9yUmVnaXN0cnkuZ2V0RXJyb3JNZXNzYWdlKHtuYW1lOiAnbm90ZXhpc3RpbmcnfSkpLnRvLmJlKCdDZXR0ZSB2YWxldXIgc2VtYmxlIG5vbiB2YWxpZGUuJyk7XG4gIH0pO1xuXG4gIGl0KCdzaG91bGQgbm90IGJyZWFrIGZvciBhbiBpbmNvbXBsZXRlIGxhbmd1YWdlJywgKCkgPT4ge1xuICAgIHZhbGlkYXRvclJlZ2lzdHJ5LmFkZENhdGFsb2coJ2tsaW5nb24nLCB7fSwgdHJ1ZSk7XG4gICAgZXhwZWN0KHZhbGlkYXRvclJlZ2lzdHJ5LmdldEVycm9yTWVzc2FnZSh7bmFtZTogJ3R5cGUnLCByZXF1aXJlbWVudHM6ICdlbWFpbCd9KSkudG8uYmUoJ1RoaXMgdmFsdWUgc2VlbXMgdG8gYmUgaW52YWxpZC4nKTtcbiAgICBleHBlY3QodmFsaWRhdG9yUmVnaXN0cnkuZ2V0RXJyb3JNZXNzYWdlKHtuYW1lOiAnbGVuZ3RoJywgcmVxdWlyZW1lbnRzOiBbMywgNl19KSkudG8uYmUoJ1RoaXMgdmFsdWUgc2VlbXMgdG8gYmUgaW52YWxpZC4nKTtcbiAgfSk7XG5cbiAgYWZ0ZXJFYWNoKCgpID0+IHtcbiAgICAkKCcjZWxlbWVudCcpLnJlbW92ZSgpO1xuICB9KTtcblxuICBpdCgnc2hvdWxkIHdhcm4gaWYgYSBjdXN0b20gdmFsaWRhdG9yIGhhcyBhIHJlc2VydmVkIG5hbWUnLCAoKSA9PiB7XG4gICAgJC5leHRlbmQodHJ1ZSwgUGFyc2xleS5vcHRpb25zLCB7XG4gICAgICB2YWxpZGF0b3JzOiB7XG4gICAgICAgIGV4Y2x1ZGVkOiB7Zm46ICgpID0+IHt9LCBwcmlvcml0eTogNDJ9LFxuICAgICAgfVxuICAgIH0pO1xuXG4gICAgZXhwZWN0V2FybmluZygoKSA9PiB7XG4gICAgICB2YXIgdmFsaWRhdG9yUmVnaXN0cnkgPSBuZXcgVmFsaWRhdG9yUmVnaXN0cnkoUGFyc2xleS5vcHRpb25zLnZhbGlkYXRvcnMpO1xuICAgIH0pO1xuICAgIGRlbGV0ZSBQYXJzbGV5Lm9wdGlvbnMudmFsaWRhdG9ycy5leGNsdWRlZDtcbiAgfSk7XG5cbiAgaXQoJ3Nob3VsZCB3YXJuIHdoZW4gYWRkaW5nIGFuIGFscmVhZHkgZGVmaW5lZCB2YWxpZGF0b3InLCAoKSA9PiB7XG4gICAgdmFsaWRhdG9yUmVnaXN0cnkuYWRkVmFsaWRhdG9yKCdmb28nLCAkLm5vb3ApO1xuICAgIGV4cGVjdFdhcm5pbmcoKCkgPT4ge1xuICAgICAgdmFsaWRhdG9yUmVnaXN0cnkuYWRkVmFsaWRhdG9yKCdmb28nLCAkLm5vb3ApO1xuICAgIH0pO1xuICAgIHZhbGlkYXRvclJlZ2lzdHJ5LnJlbW92ZVZhbGlkYXRvcignZm9vJyk7XG4gIH0pO1xuXG4gIGl0KCdzaG91bGQgd2FybiB3aGVuIHVwZGF0aW5nIG9yIGRlbGV0aW5nIGEgY3VzdG9tIHZhbGlkYXRvciBub3QgYWxyZWFkeSBkZWZpbmVkJywgKCkgPT4ge1xuICAgIGV4cGVjdFdhcm5pbmcoKCkgPT4ge1xuICAgICAgdmFsaWRhdG9yUmVnaXN0cnkudXBkYXRlVmFsaWRhdG9yKCdmb28nLCAoKSA9PiB7fSk7XG4gICAgfSk7XG4gICAgdmFsaWRhdG9yUmVnaXN0cnkucmVtb3ZlVmFsaWRhdG9yKCdmb28nKTtcbiAgfSk7XG5cbiAgaXQoJ3Nob3VsZCB3YXJuIHdoZW4gdXBkYXRpbmcgb3IgZGVsZXRpbmcgYSBjdXN0b20gdmFsaWRhdG9yIG5vdCBhbHJlYWR5IGRlZmluZWQnLCAoKSA9PiB7XG4gICAgZXhwZWN0V2FybmluZygoKSA9PiB7XG4gICAgICB2YWxpZGF0b3JSZWdpc3RyeS5yZW1vdmVWYWxpZGF0b3IoJ2ZvbycpO1xuICAgIH0pO1xuICB9KTtcblxuICBpdCgnc2hvdWxkIHByb3ZpZGUgZGVwcmVjYXRlZCBhY2Nlc3MgdGhyb3VnaCBWYWxpZGF0b3IgZm9yIGNvbXBhdGliaWxpdHknLCAoKSA9PiB7XG4gICAgd2luZG93LlBhcnNsZXkuZm9ybWF0TWVzc2FnZSgnZm9vJywgJ2JhcicpO1xuICAgIGV4cGVjdFdhcm5pbmcoKCkgPT4ge1xuICAgICAgd2luZG93LlBhcnNsZXlWYWxpZGF0b3IuZm9ybWF0TWVzc2FnZSgnZm9vJywgJ2JhcicpO1xuICAgIH0pO1xuICB9KTtcblxuICBpdCgnc2hvdWxkIHByb3ZpZGUgdHdvIHdheXMgdG8gYWRkIGVycm9yIG1lc3NhZ2VzJywgKCkgPT4ge1xuICAgIHdpbmRvdy5QYXJzbGV5LmFkZFZhbGlkYXRvcigndGVzdE1lc3NhZ2UnLCB7XG4gICAgICB2YWxpZGF0ZVN0cmluZzogJC5ub29wLFxuICAgICAgbWVzc2FnZXM6IHtcbiAgICAgICAgZW46ICdOb3QgZ29vZCBhdCBhbGwnLFxuICAgICAgICBmcjogJ1Ryw6hzIG51bCdcbiAgICAgIH1cbiAgICB9KTtcbiAgICB3aW5kb3cuUGFyc2xleS5hZGRNZXNzYWdlKCdlcycsICd0ZXN0TWVzc2FnZScsICdNdXkgbWFsbycpO1xuICAgIGV4cGVjdCh3aW5kb3cuUGFyc2xleS5nZXRFcnJvck1lc3NhZ2Uoe25hbWU6ICd0ZXN0TWVzc2FnZSd9KSkudG8uZXFsKCdOb3QgZ29vZCBhdCBhbGwnKTtcbiAgICB3aW5kb3cuUGFyc2xleS5zZXRMb2NhbGUoJ2ZyJyk7XG4gICAgZXhwZWN0KHdpbmRvdy5QYXJzbGV5LmdldEVycm9yTWVzc2FnZSh7bmFtZTogJ3Rlc3RNZXNzYWdlJ30pKS50by5lcWwoJ1Ryw6hzIG51bCcpO1xuICAgIHdpbmRvdy5QYXJzbGV5LnNldExvY2FsZSgnZXMnKTtcbiAgICBleHBlY3Qod2luZG93LlBhcnNsZXkuZ2V0RXJyb3JNZXNzYWdlKHtuYW1lOiAndGVzdE1lc3NhZ2UnfSkpLnRvLmVxbCgnTXV5IG1hbG8nKTtcbiAgICB3aW5kb3cuUGFyc2xleS5zZXRMb2NhbGUoJ2VuJyk7XG4gIH0pO1xuXG4gIGl0KCdjYW4gcmV0dXJuIHRoZSBleGlzdGVuY2Ugb2YgYSB2YWxpZGF0b3InLCAoKSA9PiB7XG4gICAgZXhwZWN0KHdpbmRvdy5QYXJzbGV5Lmhhc1ZhbGlkYXRvcigncmVxdWlyZWQnKSkudG8uYmUodHJ1ZSk7XG4gICAgZXhwZWN0KHdpbmRvdy5QYXJzbGV5Lmhhc1ZhbGlkYXRvcignZGVyaXVxZXInKSkudG8uYmUoZmFsc2UpO1xuICB9KTtcblxufSk7XG4iXX0=
