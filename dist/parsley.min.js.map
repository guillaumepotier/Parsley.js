{"version":3,"sources":["/source/parsley.js","/source/src/parsley/pubsub.js","/source/src/parsley/utils.js","parsley.min.js","/source/src/parsley/defaults.js","/source/src/parsley/abstract.js","/source/src/parsley/validator.js","/source/src/parsley/validator_registry.js","/source/src/parsley/ui.js","/source/src/parsley/form.js","/source/src/parsley/factory/constraint.js","/source/src/parsley/field.js","/source/src/parsley/multiple.js","/source/src/parsley/factory.js","/source/src/parsley/main.js","/source/src/parsley/remote.js","/source/src/i18n/en.js","/source/src/parsley.js"],"names":["_toConsumableArray","arr","Array","isArray","i","arr2","length","from","global","factory","exports","module","require","define","amd","parsley","jQuery","this","$","adapt","fn","context","parsleyAdaptedCallback","args","prototype","slice","call","arguments","unshift","apply","o","eventName","name","lastIndexOf","eventPrefix","substr","globalID","pastWarnings","ParsleyUtils__ParsleyUtils","attr","$element","namespace","obj","attribute","attributes","regex","RegExp","hasOwnProperty","specified","test","camelize","deserializeValue","value","checkAttr","_checkAttr","is","setAttr","setAttribute","dasherize","String","generateID","num","isNaN","Number","parseJSON","e","str","replace","match","chr","toUpperCase","toLowerCase","warn","_window$console","window","console","warnOnce","msg","_resetWarnings","trimString","string","objectCreate","Object","create","Error","TypeError","result","ParsleyUtils__default","ParsleyDefaults","inputs","excluded","priorityEnabled","multiple","group","uiEnabled","validationThreshold","focus","trigger","errorClass","successClass","classHandler","ParsleyField","errorsContainer","errorsWrapper","errorTemplate","ParsleyAbstract","asyncSupport","actualizeOptions","options","domOptions","parent","_resetOptions","initOptions","_listeners","on","queue","push","subscribe","listenTo","off","splice","unsubscribe","unsubscribeTo","target","extraArg","reset","__class__","_trigger","fields","destroy","removeData","asyncIsValid","whenValid","_findRelated","find","requirementConverters","_string","integer","parseInt","number","parseFloat","reference","boolean","object","regexp","_regexp","flags","convertArrayRequirement","m","values","split","map","convertRequirement","requirementType","converter","convertExtraOptionRequirement","requirementSpec","extraOptionReader","main","extra","key","ParsleyValidator","spec","extend","validate","requirementFirstArg","validateMultiple","validateNumber","validateString","parseRequirements","requirements","type","isPlainObject","priority","ParsleyValidatorRegistry","validators","catalog","locale","init","typeRegexes","email","digits","alphanum","url","range","addValidator","Parsley","setLocale","addCatalog","messages","set","addMessage","message","addMessages","nameMessageObject","arg1","arg2","_setValidator","updateValidator","removeValidator","validator","getErrorMessage","constraint","typeMessages","formatMessage","defaultMessage","en","parameters","notblank","required","pattern","minlength","requirement","maxlength","min","max","mincheck","maxcheck","check","equalto","refOrValue","$reference","val","ParsleyUI","listen","_this","form","setupForm","field","setupField","reflow","fieldInstance","_ui","active","diff","_diff","validationResult","lastValidationResult","manageStatusClass","manageErrorsMessages","actualizeTriggers","kept","added","failedOnce","manageFailingFieldTrigger","getErrorsMessages","errorMessage","_getErrorMessage","assert","hasConstraints","needsValidation","_successClass","_errorClass","_resetClass","errorsMessagesDisabled","_insertErrorWrapper","$errorsWrapper","append","addClass","html","removeClass","remove","removed","removeError","addError","updateError","doNotUpdateClass","formInstance","_focusedField","noFocus","customConstraintErrorMessage","newResult","oldResult","deep","found","j","evt","onSubmitValidate","onSubmitButton","__id__","$errorClassHandler","_manageClassHandler","errorsWrapperId","validationInformationVisible","$handler","$errorsContainer","$from","after","_this2","$toBind","triggers","join","event","eventValidate","getValue","each","parsleyInstance","children","ParsleyForm","element","ParsleyForm__statusMapping","pending","resolved","rejected","_this3","_$submitSource","first","stopImmediatePropagation","preventDefault","whenValidate","undefined","done","_submit","always","appendTo","Event","force","state","_this4","submitEvent","_refreshFields","promises","_withoutReactualizingFormOptions","_isFieldInGroup","promiseBasedOnValidationResult","r","Deferred","reject","resolve","promise","when","fail","pipe","isValid","_this5","inArray","_bindFields","_this6","oldFields","fieldsMappedById","not","_","Factory","oldActualizeOptions","ConstraintFactory","parsleyField","isDomConstraint","validatorSpec","_validatorRegistry","_parseRequirements","capitalize","cap","instance","requirementList","_this7","parsleyFormInstance","constraints","constraintsByName","_bindConstraints","parsley_field__statusMapping","_this8","_isRequired","validateIfEmpty","_this9","refreshConstraints","groupedConstraints","_getGroupedConstraints","_validateConstraint","_this10","_handleWhitespace","addConstraint","removeConstraint","updateConstraint","_bindHtml5Constraints","hasClass","trimValue","whitespace","index","p","sort","a","b","parsley_field","ParsleyMultiple","addElement","$elements","fieldConstraints","has","data","filter","_init","ParsleyFactory","savedparsleyFormInstance","__version__","bind","isMultiple","handleMultiple","parsleyMultipleInstance","_this11","input","$previouslyRelated","get","doNotStore","ParsleyExtend","vernums","jquery","forEach","document","version","psly","instances","ParsleyConfig","ParsleyUtils","registry","i18n","method","proxy","_window$Parsley","autoBind","deprecated","callback","unsubscribeAll","emit","_instance","instanceGiven","asyncValidators","default","xhr","status","reverse","addAsyncValidator","","ajaxOptions","csr","indexOf","encodeURIComponent","remoteOptions","param","_remoteCache","ajax","handleXhr","then"],"mappings":"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","file":"parsley.min.js","sourcesContent":["(function (global, factory) {\n  typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory(require('jquery')) :\n  typeof define === 'function' && define.amd ? define(['jquery'], factory) :\n  global.parsley = factory(global.$)\n}(this, function ($) { 'use strict';\n\n  var globalID = 1;\n  var pastWarnings = {};\n\n  var ParsleyUtils__ParsleyUtils = {\n    // Parsley DOM-API\n    // returns object from dom attributes and values\n    attr: function ($element, namespace, obj) {\n      var i;\n      var attribute;\n      var attributes;\n      var regex = new RegExp('^' + namespace, 'i');\n\n      if ('undefined' === typeof obj)\n        obj = {};\n      else {\n        // Clear all own properties. This won't affect prototype's values\n        for (i in obj) {\n          if (obj.hasOwnProperty(i))\n            delete obj[i];\n        }\n      }\n\n      if ('undefined' === typeof $element || 'undefined' === typeof $element[0])\n        return obj;\n\n      attributes = $element[0].attributes;\n      for (i = attributes.length; i--; ) {\n        attribute = attributes[i];\n\n        if (attribute && attribute.specified && regex.test(attribute.name)) {\n          obj[this.camelize(attribute.name.slice(namespace.length))] = this.deserializeValue(attribute.value);\n        }\n      }\n\n      return obj;\n    },\n\n    checkAttr: function ($element, namespace, checkAttr) {\n      return $element.is('[' + namespace + checkAttr + ']');\n    },\n\n    setAttr: function ($element, namespace, attr, value) {\n      $element[0].setAttribute(this.dasherize(namespace + attr), String(value));\n    },\n\n    generateID: function () {\n      return '' + globalID++;\n    },\n\n    /** Third party functions **/\n    // Zepto deserialize function\n    deserializeValue: function (value) {\n      var num;\n\n      try {\n        return value ?\n          value == \"true\" ||\n          (value == \"false\" ? false :\n          value == \"null\" ? null :\n          !isNaN(num = Number(value)) ? num :\n          /^[\\[\\{]/.test(value) ? $.parseJSON(value) :\n          value)\n          : value;\n      } catch (e) { return value; }\n    },\n\n    // Zepto camelize function\n    camelize: function (str) {\n      return str.replace(/-+(.)?/g, function (match, chr) {\n        return chr ? chr.toUpperCase() : '';\n      });\n    },\n\n    // Zepto dasherize function\n    dasherize: function (str) {\n      return str.replace(/::/g, '/')\n        .replace(/([A-Z]+)([A-Z][a-z])/g, '$1_$2')\n        .replace(/([a-z\\d])([A-Z])/g, '$1_$2')\n        .replace(/_/g, '-')\n        .toLowerCase();\n    },\n\n    warn: function () {\n      if (window.console && 'function' === typeof window.console.warn)\n        window.console.warn(...arguments);\n    },\n\n    warnOnce: function(msg) {\n      if (!pastWarnings[msg]) {\n        pastWarnings[msg] = true;\n        this.warn(...arguments);\n      }\n    },\n\n    _resetWarnings: function () {\n      pastWarnings = {};\n    },\n\n    trimString: function(string) {\n      return string.replace(/^\\s+|\\s+$/g, '');\n    },\n\n    // Object.create polyfill, see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/create#Polyfill\n    objectCreate: Object.create || (function () {\n      var Object = function () {};\n      return function (prototype) {\n        if (arguments.length > 1) {\n          throw Error('Second argument not supported');\n        }\n        if (typeof prototype != 'object') {\n          throw TypeError('Argument must be an object');\n        }\n        Object.prototype = prototype;\n        var result = new Object();\n        Object.prototype = null;\n        return result;\n      };\n    })()\n  };\n\n  var ParsleyUtils__default = ParsleyUtils__ParsleyUtils;\n\n  // All these options could be overriden and specified directly in DOM using\n  // `data-parsley-` default DOM-API\n  // eg: `inputs` can be set in DOM using `data-parsley-inputs=\"input, textarea\"`\n  // eg: `data-parsley-stop-on-first-failing-constraint=\"false\"`\n\n  var ParsleyDefaults = {\n    // ### General\n\n    // Default data-namespace for DOM API\n    namespace: 'data-parsley-',\n\n    // Supported inputs by default\n    inputs: 'input, textarea, select',\n\n    // Excluded inputs by default\n    excluded: 'input[type=button], input[type=submit], input[type=reset], input[type=hidden]',\n\n    // Stop validating field on highest priority failing constraint\n    priorityEnabled: true,\n\n    // ### Field only\n\n    // identifier used to group together inputs (e.g. radio buttons...)\n    multiple: null,\n\n    // identifier (or array of identifiers) used to validate only a select group of inputs\n    group: null,\n\n    // ### UI\n    // Enable\\Disable error messages\n    uiEnabled: true,\n\n    // Key events threshold before validation\n    validationThreshold: 3,\n\n    // Focused field on form validation error. 'first'|'last'|'none'\n    focus: 'first',\n\n    // `$.Event()` that will trigger validation. eg: `keyup`, `change`...\n    trigger: false,\n\n    // Class that would be added on every failing validation Parsley field\n    errorClass: 'parsley-error',\n\n    // Same for success validation\n    successClass: 'parsley-success',\n\n    // Return the `$element` that will receive these above success or error classes\n    // Could also be (and given directly from DOM) a valid selector like `'#div'`\n    classHandler: function (ParsleyField) {},\n\n    // Return the `$element` where errors will be appended\n    // Could also be (and given directly from DOM) a valid selector like `'#div'`\n    errorsContainer: function (ParsleyField) {},\n\n    // ul elem that would receive errors' list\n    errorsWrapper: '<ul class=\"parsley-errors-list\"></ul>',\n\n    // li elem that would receive error message\n    errorTemplate: '<li></li>'\n  };\n\n  var ParsleyAbstract = function () {};\n\n  ParsleyAbstract.prototype = {\n    asyncSupport: true, // Deprecated\n\n    actualizeOptions: function () {\n      ParsleyUtils__default.attr(this.$element, this.options.namespace, this.domOptions);\n      if (this.parent && this.parent.actualizeOptions)\n        this.parent.actualizeOptions();\n      return this;\n    },\n\n    _resetOptions: function (initOptions) {\n      this.domOptions = ParsleyUtils__default.objectCreate(this.parent.options);\n      this.options = ParsleyUtils__default.objectCreate(this.domOptions);\n      // Shallow copy of ownProperties of initOptions:\n      for (var i in initOptions) {\n        if (initOptions.hasOwnProperty(i))\n          this.options[i] = initOptions[i];\n      }\n      this.actualizeOptions();\n    },\n\n    _listeners: null,\n\n    // Register a callback for the given event name.\n    // Callback is called with context as the first argument and the `this`.\n    // The context is the current parsley instance, or window.Parsley if global.\n    // A return value of `false` will interrupt the calls\n    on: function (name, fn) {\n      this._listeners = this._listeners || {};\n      var queue = this._listeners[name] = this._listeners[name] || [];\n      queue.push(fn);\n\n      return this;\n    },\n\n    // Deprecated. Use `on` instead.\n    subscribe: function(name, fn) {\n      $.listenTo(this, name.toLowerCase(), fn);\n    },\n\n    // Unregister a callback (or all if none is given) for the given event name\n    off: function (name, fn) {\n      var queue = this._listeners && this._listeners[name];\n      if (queue) {\n        if (!fn) {\n          delete this._listeners[name];\n        } else {\n          for (var i = queue.length; i--; )\n            if (queue[i] === fn)\n              queue.splice(i, 1);\n        }\n      }\n      return this;\n    },\n\n    // Deprecated. Use `off`\n    unsubscribe: function(name, fn) {\n      $.unsubscribeTo(this, name.toLowerCase());\n    },\n\n    // Trigger an event of the given name.\n    // A return value of `false` interrupts the callback chain.\n    // Returns false if execution was interrupted.\n    trigger: function (name, target, extraArg) {\n      target = target || this;\n      var queue = this._listeners && this._listeners[name];\n      var result;\n      var parentResult;\n      if (queue) {\n        for (var i = queue.length; i--; ) {\n          result = queue[i].call(target, target, extraArg);\n          if (result === false) return result;\n        }\n      }\n      if (this.parent) {\n        return this.parent.trigger(name, target, extraArg);\n      }\n      return true;\n    },\n\n    // Reset UI\n    reset: function () {\n      // Field case: just emit a reset event for UI\n      if ('ParsleyForm' !== this.__class__)\n        return this._trigger('reset');\n\n      // Form case: emit a reset event for each field\n      for (var i = 0; i < this.fields.length; i++)\n        this.fields[i]._trigger('reset');\n\n      this._trigger('reset');\n    },\n\n    // Destroy Parsley instance (+ UI)\n    destroy: function () {\n      // Field case: emit destroy event to clean UI and then destroy stored instance\n      if ('ParsleyForm' !== this.__class__) {\n        this.$element.removeData('Parsley');\n        this.$element.removeData('ParsleyFieldMultiple');\n        this._trigger('destroy');\n\n        return;\n      }\n\n      // Form case: destroy all its fields and then destroy stored instance\n      for (var i = 0; i < this.fields.length; i++)\n        this.fields[i].destroy();\n\n      this.$element.removeData('Parsley');\n      this._trigger('destroy');\n    },\n\n    asyncIsValid: function () {\n      ParsleyUtils__default.warnOnce(\"asyncIsValid is deprecated; please use whenIsValid instead\");\n      return this.whenValid(...arguments);\n    },\n\n    _findRelated: function () {\n      return this.options.multiple ?\n        this.parent.$element.find(`[${this.options.namespace}multiple=\"${this.options.multiple}\"]`)\n      : this.$element;\n    }\n  };\n\n  var requirementConverters = {\n    string: function(string) {\n      return string;\n    },\n    integer: function(string) {\n      if (isNaN(string))\n        throw 'Requirement is not an integer: \"' + string + '\"';\n      return parseInt(string, 10);\n    },\n    number: function(string) {\n      if (isNaN(string))\n        throw 'Requirement is not a number: \"' + string + '\"';\n      return parseFloat(string);\n    },\n    reference: function(string) { // Unused for now\n      var result = $(string);\n      if (result.length === 0)\n        throw 'No such reference: \"' + string + '\"';\n      return result;\n    },\n    boolean: function(string) {\n      return string !== 'false';\n    },\n    object: function(string) {\n      return ParsleyUtils__default.deserializeValue(string);\n    },\n    regexp: function(regexp) {\n      var flags = '';\n\n      // Test if RegExp is literal, if not, nothing to be done, otherwise, we need to isolate flags and pattern\n      if (/^\\/.*\\/(?:[gimy]*)$/.test(regexp)) {\n        // Replace the regexp literal string with the first match group: ([gimy]*)\n        // If no flag is present, this will be a blank string\n        flags = regexp.replace(/.*\\/([gimy]*)$/, '$1');\n        // Again, replace the regexp literal string with the first match group:\n        // everything excluding the opening and closing slashes and the flags\n        regexp = regexp.replace(new RegExp('^/(.*?)/' + flags + '$'), '$1');\n      } else {\n        // Anchor regexp:\n        regexp = '^' + regexp + '$';\n      }\n      return new RegExp(regexp, flags);\n    }\n  };\n\n  var convertArrayRequirement = function(string, length) {\n    var m = string.match(/^\\s*\\[(.*)\\]\\s*$/);\n    if (!m)\n      throw 'Requirement is not an array: \"' + string + '\"';\n    var values = m[1].split(',').map(ParsleyUtils__default.trimString);\n    if (values.length !== length)\n      throw 'Requirement has ' + values.length + ' values when ' + length + ' are needed';\n    return values;\n  };\n\n  var convertRequirement = function(requirementType, string) {\n    var converter = requirementConverters[requirementType || 'string'];\n    if (!converter)\n      throw 'Unknown requirement specification: \"' + requirementType + '\"';\n    return converter(string);\n  };\n\n  var convertExtraOptionRequirement = function(requirementSpec, string, extraOptionReader) {\n    var main = null;\n    var extra = {};\n    for (var key in requirementSpec) {\n      if (key) {\n        var value = extraOptionReader(key);\n        if ('string' === typeof value)\n          value = convertRequirement(requirementSpec[key], value);\n        extra[key] = value;\n      } else {\n        main = convertRequirement(requirementSpec[key], string);\n      }\n    }\n    return [main, extra];\n  };\n\n  // A Validator needs to implement the methods `validate` and `parseRequirements`\n\n  var ParsleyValidator = function(spec) {\n    $.extend(true, this, spec);\n  };\n\n  ParsleyValidator.prototype = {\n    // Returns `true` iff the given `value` is valid according the given requirements.\n    validate: function(value, requirementFirstArg) {\n      if (this.fn) { // Legacy style validator\n\n        if (arguments.length > 3)  // If more args then value, requirement, instance...\n          requirementFirstArg = [].slice.call(arguments, 1, -1);  // Skip first arg (value) and last (instance), combining the rest\n        return this.fn.call(this, value, requirementFirstArg);\n      }\n\n      if ($.isArray(value)) {\n        if (!this.validateMultiple)\n          throw 'Validator `' + this.name + '` does not handle multiple values';\n        return this.validateMultiple(...arguments);\n      } else {\n        if (this.validateNumber) {\n          if (isNaN(value))\n            return false;\n          arguments[0] = parseFloat(arguments[0]);\n          return this.validateNumber(...arguments);\n        }\n        if (this.validateString) {\n          return this.validateString(...arguments);\n        }\n        throw 'Validator `' + this.name + '` only handles multiple values';\n      }\n    },\n\n    // Parses `requirements` into an array of arguments,\n    // according to `this.requirementType`\n    parseRequirements: function(requirements, extraOptionReader) {\n      if ('string' !== typeof requirements) {\n        // Assume requirement already parsed\n        // but make sure we return an array\n        return $.isArray(requirements) ? requirements : [requirements];\n      }\n      var type = this.requirementType;\n      if ($.isArray(type)) {\n        var values = convertArrayRequirement(requirements, type.length);\n        for (var i = 0; i < values.length; i++)\n          values[i] = convertRequirement(type[i], values[i]);\n        return values;\n      } else if ($.isPlainObject(type)) {\n        return convertExtraOptionRequirement(type, requirements, extraOptionReader);\n      } else {\n        return [convertRequirement(type, requirements)];\n      }\n    },\n    // Defaults:\n    requirementType: 'string',\n\n    priority: 2\n\n  };\n\n  var ParsleyValidatorRegistry = function (validators, catalog) {\n    this.__class__ = 'ParsleyValidatorRegistry';\n\n    // Default Parsley locale is en\n    this.locale = 'en';\n\n    this.init(validators || {}, catalog || {});\n  };\n\n  var typeRegexes =  {\n    email: /^((([a-z]|\\d|[!#\\$%&'\\*\\+\\-\\/=\\?\\^_`{\\|}~]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])+(\\.([a-z]|\\d|[!#\\$%&'\\*\\+\\-\\/=\\?\\^_`{\\|}~]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])+)*)|((\\x22)((((\\x20|\\x09)*(\\x0d\\x0a))?(\\x20|\\x09)+)?(([\\x01-\\x08\\x0b\\x0c\\x0e-\\x1f\\x7f]|\\x21|[\\x23-\\x5b]|[\\x5d-\\x7e]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])|(\\\\([\\x01-\\x09\\x0b\\x0c\\x0d-\\x7f]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF]))))*(((\\x20|\\x09)*(\\x0d\\x0a))?(\\x20|\\x09)+)?(\\x22)))@((([a-z]|\\d|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])|(([a-z]|\\d|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])([a-z]|\\d|-|\\.|_|~|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])*([a-z]|\\d|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])))\\.)+(([a-z]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])|(([a-z]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])([a-z]|\\d|-|\\.|_|~|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])*([a-z]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])))$/i,\n\n    number: /^-?(?:(?:\\d+|\\d{1,3}(?:,\\d{3})+)+(?:\\.\\d+)?|(?:\\.\\d+)+)$/,\n\n    integer: /^-?\\d+$/,\n\n    digits: /^\\d+$/,\n\n    alphanum: /^\\w+$/i,\n\n    url: new RegExp(\n        \"^\" +\n          // protocol identifier\n          \"(?:(?:https?|ftp)://)?\" + // ** mod: make scheme optional\n          // user:pass authentication\n          \"(?:\\\\S+(?::\\\\S*)?@)?\" +\n          \"(?:\" +\n            // IP address exclusion\n            // private & local networks\n            // \"(?!(?:10|127)(?:\\\\.\\\\d{1,3}){3})\" +   // ** mod: allow local networks\n            // \"(?!(?:169\\\\.254|192\\\\.168)(?:\\\\.\\\\d{1,3}){2})\" +  // ** mod: allow local networks\n            // \"(?!172\\\\.(?:1[6-9]|2\\\\d|3[0-1])(?:\\\\.\\\\d{1,3}){2})\" +  // ** mod: allow local networks\n            // IP address dotted notation octets\n            // excludes loopback network 0.0.0.0\n            // excludes reserved space >= 224.0.0.0\n            // excludes network & broacast addresses\n            // (first & last IP address of each class)\n            \"(?:[1-9]\\\\d?|1\\\\d\\\\d|2[01]\\\\d|22[0-3])\" +\n            \"(?:\\\\.(?:1?\\\\d{1,2}|2[0-4]\\\\d|25[0-5])){2}\" +\n            \"(?:\\\\.(?:[1-9]\\\\d?|1\\\\d\\\\d|2[0-4]\\\\d|25[0-4]))\" +\n          \"|\" +\n            // host name\n            \"(?:(?:[a-z\\\\u00a1-\\\\uffff0-9]-*)*[a-z\\\\u00a1-\\\\uffff0-9]+)\" +\n            // domain name\n            \"(?:\\\\.(?:[a-z\\\\u00a1-\\\\uffff0-9]-*)*[a-z\\\\u00a1-\\\\uffff0-9]+)*\" +\n            // TLD identifier\n            \"(?:\\\\.(?:[a-z\\\\u00a1-\\\\uffff]{2,}))\" +\n          \")\" +\n          // port number\n          \"(?::\\\\d{2,5})?\" +\n          // resource path\n          \"(?:/\\\\S*)?\" +\n        \"$\", 'i'\n      )\n  };\n  typeRegexes.range = typeRegexes.number;\n\n  ParsleyValidatorRegistry.prototype = {\n    init: function (validators, catalog) {\n      this.catalog = catalog;\n      // Copy prototype's validators:\n      this.validators = $.extend({}, this.validators);\n\n      for (var name in validators)\n        this.addValidator(name, validators[name].fn, validators[name].priority);\n\n      window.Parsley.trigger('parsley:validator:init');\n    },\n\n    // Set new messages locale if we have dictionary loaded in ParsleyConfig.i18n\n    setLocale: function (locale) {\n      if ('undefined' === typeof this.catalog[locale])\n        throw new Error(locale + ' is not available in the catalog');\n\n      this.locale = locale;\n\n      return this;\n    },\n\n    // Add a new messages catalog for a given locale. Set locale for this catalog if set === `true`\n    addCatalog: function (locale, messages, set) {\n      if ('object' === typeof messages)\n        this.catalog[locale] = messages;\n\n      if (true === set)\n        return this.setLocale(locale);\n\n      return this;\n    },\n\n    // Add a specific message for a given constraint in a given locale\n    addMessage: function (locale, name, message) {\n      if ('undefined' === typeof this.catalog[locale])\n        this.catalog[locale] = {};\n\n      this.catalog[locale][name] = message;\n\n      return this;\n    },\n\n    // Add messages for a given locale\n    addMessages: function (locale, nameMessageObject) {\n      for (var name in nameMessageObject)\n        this.addMessage(locale, name, nameMessageObject[name]);\n\n      return this;\n    },\n\n    // Add a new validator\n    //\n    //    addValidator('custom', {\n    //        requirementType: ['integer', 'integer'],\n    //        validateString: function(value, from, to) {},\n    //        priority: 22,\n    //        messages: {\n    //          en: \"Hey, that's no good\",\n    //          fr: \"Aye aye, pas bon du tout\",\n    //        }\n    //    })\n    //\n    // Old API was addValidator(name, function, priority)\n    //\n    addValidator: function (name, arg1, arg2) {\n      if (this.validators[name])\n        ParsleyUtils__default.warn('Validator \"' + name + '\" is already defined.');\n      else if (ParsleyDefaults.hasOwnProperty(name)) {\n        ParsleyUtils__default.warn('\"' + name + '\" is a restricted keyword and is not a valid validator name.');\n        return;\n      }\n      return this._setValidator(...arguments);\n    },\n\n    updateValidator: function (name, arg1, arg2) {\n      if (!this.validators[name]) {\n        ParsleyUtils__default.warn('Validator \"' + name + '\" is not already defined.');\n        return this.addValidator(...arguments);\n      }\n      return this._setValidator(this, arguments);\n    },\n\n    removeValidator: function (name) {\n      if (!this.validators[name])\n        ParsleyUtils__default.warn('Validator \"' + name + '\" is not defined.');\n\n      delete this.validators[name];\n\n      return this;\n    },\n\n    _setValidator: function (name, validator, priority) {\n      if ('object' !== typeof validator) {\n        // Old style validator, with `fn` and `priority`\n        validator = {\n          fn: validator,\n          priority: priority\n        };\n      }\n      if (!validator.validate) {\n        validator = new ParsleyValidator(validator);\n      }\n      this.validators[name] = validator;\n\n      for (var locale in validator.messages || {})\n        this.addMessage(locale, name, validator.messages[locale]);\n\n      return this;\n    },\n\n    getErrorMessage: function (constraint) {\n      var message;\n\n      // Type constraints are a bit different, we have to match their requirements too to find right error message\n      if ('type' === constraint.name) {\n        var typeMessages = this.catalog[this.locale][constraint.name] || {};\n        message = typeMessages[constraint.requirements];\n      } else\n        message = this.formatMessage(this.catalog[this.locale][constraint.name], constraint.requirements);\n\n      return message || this.catalog[this.locale].defaultMessage || this.catalog.en.defaultMessage;\n    },\n\n    // Kind of light `sprintf()` implementation\n    formatMessage: function (string, parameters) {\n      if ('object' === typeof parameters) {\n        for (var i in parameters)\n          string = this.formatMessage(string, parameters[i]);\n\n        return string;\n      }\n\n      return 'string' === typeof string ? string.replace(/%s/i, parameters) : '';\n    },\n\n    // Here is the Parsley default validators list.\n    // A validator is an object with the following key values:\n    //  - priority: an integer\n    //  - requirement: 'string' (default), 'integer', 'number', 'regexp' or an Array of these\n    //  - validateString, validateMultiple, validateNumber: functions returning `true`, `false` or a promise\n    // Alternatively, a validator can be a function that returns such an object\n    //\n    validators: {\n      notblank: {\n        validateString: function(value) {\n          return /\\S/.test(value);\n        },\n        priority: 2\n      },\n      required: {\n        validateMultiple: function(values) {\n          return values.length > 0;\n        },\n        validateString: function(value) {\n          return /\\S/.test(value);\n        },\n        priority: 512\n      },\n      type: {\n        validateString: function(value, type) {\n          var regex = typeRegexes[type];\n          if (!regex)\n            throw new Error('validator type `' + type + '` is not supported');\n          return regex.test(value);\n        },\n        priority: 256\n      },\n      pattern: {\n        validateString: function(value, regexp) {\n          return regexp.test(value);\n        },\n        requirementType: 'regexp',\n        priority: 64\n      },\n      minlength: {\n        validateString: function (value, requirement) {\n          return value.length >= requirement;\n        },\n        requirementType: 'integer',\n        priority: 30\n      },\n      maxlength: {\n        validateString: function (value, requirement) {\n          return value.length <= requirement;\n        },\n        requirementType: 'integer',\n        priority: 30\n      },\n      length: {\n        validateString: function (value, min, max) {\n          return value.length >= min && value.length <= max;\n        },\n        requirementType: ['integer', 'integer'],\n        priority: 30\n      },\n      mincheck: {\n        validateMultiple: function (values, requirement) {\n          return values.length >= requirement;\n        },\n        requirementType: 'integer',\n        priority: 30\n      },\n      maxcheck: {\n        validateMultiple: function (values, requirement) {\n          return values.length <= requirement;\n        },\n        requirementType: 'integer',\n        priority: 30\n      },\n      check: {\n        validateMultiple: function (values, min, max) {\n          return values.length >= min && values.length <= max;\n        },\n        requirementType: ['integer', 'integer'],\n        priority: 30\n      },\n      min: {\n        validateNumber: function (value, requirement) {\n          return value >= requirement;\n        },\n        requirementType: 'number',\n        priority: 30\n      },\n      max: {\n        validateNumber: function (value, requirement) {\n          return value <= requirement;\n        },\n        requirementType: 'number',\n        priority: 30\n      },\n      range: {\n        validateNumber: function (value, min, max) {\n          return value >= min && value <= max;\n        },\n        requirementType: ['number', 'number'],\n        priority: 30\n      },\n      equalto: {\n        validateString: function (value, refOrValue) {\n          var $reference = $(refOrValue);\n          if ($reference.length)\n            return value === $reference.val();\n          else\n            return value === refOrValue;\n        },\n        priority: 256\n      }\n    }\n  };\n\n  var ParsleyUI = function (options) {\n    this.__class__ = 'ParsleyUI';\n  };\n\n  ParsleyUI.prototype = {\n    listen: function () {\n      window.Parsley\n      .on('form:init',       (form ) => { this.setupForm (form ); } )\n      .on('field:init',      (field) => { this.setupField(field); } )\n      .on('field:validated', (field) => { this.reflow    (field); } )\n      .on('form:validated',  (form ) => { this.focus     (form ); } )\n      .on('field:reset',     (field) => { this.reset     (field); } )\n      .on('form:destroy',    (form ) => { this.destroy   (form ); } )\n      .on('field:destroy',   (field) => { this.destroy   (field); } );\n\n      return this;\n    },\n\n    reflow: function (fieldInstance) {\n      // If this field has not an active UI (case for multiples) don't bother doing something\n      if ('undefined' === typeof fieldInstance._ui || false === fieldInstance._ui.active)\n        return;\n\n      // Diff between two validation results\n      var diff = this._diff(fieldInstance.validationResult, fieldInstance._ui.lastValidationResult);\n\n      // Then store current validation result for next reflow\n      fieldInstance._ui.lastValidationResult = fieldInstance.validationResult;\n\n      // Handle valid / invalid / none field class\n      this.manageStatusClass(fieldInstance);\n\n      // Add, remove, updated errors messages\n      this.manageErrorsMessages(fieldInstance, diff);\n\n      // Triggers impl\n      this.actualizeTriggers(fieldInstance);\n\n      // If field is not valid for the first time, bind keyup trigger to ease UX and quickly inform user\n      if ((diff.kept.length || diff.added.length) && true !== fieldInstance._ui.failedOnce)\n        this.manageFailingFieldTrigger(fieldInstance);\n    },\n\n    // Returns an array of field's error message(s)\n    getErrorsMessages: function (fieldInstance) {\n      // No error message, field is valid\n      if (true === fieldInstance.validationResult)\n        return [];\n\n      var messages = [];\n\n      for (var i = 0; i < fieldInstance.validationResult.length; i++)\n        messages.push(fieldInstance.validationResult[i].errorMessage ||\n         this._getErrorMessage(fieldInstance, fieldInstance.validationResult[i].assert));\n\n      return messages;\n    },\n\n    manageStatusClass: function (fieldInstance) {\n      if (fieldInstance.hasConstraints() && fieldInstance.needsValidation() && true === fieldInstance.validationResult)\n        this._successClass(fieldInstance);\n      else if (fieldInstance.validationResult.length > 0)\n        this._errorClass(fieldInstance);\n      else\n        this._resetClass(fieldInstance);\n    },\n\n    manageErrorsMessages: function (fieldInstance, diff) {\n      if ('undefined' !== typeof fieldInstance.options.errorsMessagesDisabled)\n        return;\n\n      // Case where we have errorMessage option that configure an unique field error message, regardless failing validators\n      if ('undefined' !== typeof fieldInstance.options.errorMessage) {\n        if ((diff.added.length || diff.kept.length)) {\n          this._insertErrorWrapper(fieldInstance);\n\n          if (0 === fieldInstance._ui.$errorsWrapper.find('.parsley-custom-error-message').length)\n            fieldInstance._ui.$errorsWrapper\n              .append(\n                $(fieldInstance.options.errorTemplate)\n                .addClass('parsley-custom-error-message')\n              );\n\n          return fieldInstance._ui.$errorsWrapper\n            .addClass('filled')\n            .find('.parsley-custom-error-message')\n            .html(fieldInstance.options.errorMessage);\n        }\n\n        return fieldInstance._ui.$errorsWrapper\n          .removeClass('filled')\n          .find('.parsley-custom-error-message')\n          .remove();\n      }\n\n      // Show, hide, update failing constraints messages\n      for (var i = 0; i < diff.removed.length; i++)\n        this.removeError(fieldInstance, diff.removed[i].assert.name, true);\n\n      for (i = 0; i < diff.added.length; i++)\n        this.addError(fieldInstance, diff.added[i].assert.name, diff.added[i].errorMessage, diff.added[i].assert, true);\n\n      for (i = 0; i < diff.kept.length; i++)\n        this.updateError(fieldInstance, diff.kept[i].assert.name, diff.kept[i].errorMessage, diff.kept[i].assert, true);\n    },\n\n    // TODO: strange API here, intuitive for manual usage with addError(pslyInstance, 'foo', 'bar')\n    // but a little bit complex for above internal usage, with forced undefined parameter...\n    addError: function (fieldInstance, name, message, assert, doNotUpdateClass) {\n      this._insertErrorWrapper(fieldInstance);\n      fieldInstance._ui.$errorsWrapper\n        .addClass('filled')\n        .append(\n          $(fieldInstance.options.errorTemplate)\n          .addClass('parsley-' + name)\n          .html(message || this._getErrorMessage(fieldInstance, assert))\n        );\n\n      if (true !== doNotUpdateClass)\n        this._errorClass(fieldInstance);\n    },\n\n    // Same as above\n    updateError: function (fieldInstance, name, message, assert, doNotUpdateClass) {\n      fieldInstance._ui.$errorsWrapper\n        .addClass('filled')\n        .find('.parsley-' + name)\n        .html(message || this._getErrorMessage(fieldInstance, assert));\n\n      if (true !== doNotUpdateClass)\n        this._errorClass(fieldInstance);\n    },\n\n    // Same as above twice\n    removeError: function (fieldInstance, name, doNotUpdateClass) {\n      fieldInstance._ui.$errorsWrapper\n        .removeClass('filled')\n        .find('.parsley-' + name)\n        .remove();\n\n      // edge case possible here: remove a standard Parsley error that is still failing in fieldInstance.validationResult\n      // but highly improbable cuz' manually removing a well Parsley handled error makes no sense.\n      if (true !== doNotUpdateClass)\n        this.manageStatusClass(fieldInstance);\n    },\n\n    focus: function (formInstance) {\n      formInstance._focusedField = null;\n\n      if (true === formInstance.validationResult || 'none' === formInstance.options.focus)\n        return null;\n\n      for (var i = 0; i < formInstance.fields.length; i++) {\n        var field = formInstance.fields[i];\n        if (true !== field.validationResult && field.validationResult.length > 0 && 'undefined' === typeof field.options.noFocus) {\n          formInstance._focusedField = field.$element;\n          if ('first' === formInstance.options.focus)\n            break;\n        }\n      }\n\n      if (null === formInstance._focusedField)\n        return null;\n\n      return formInstance._focusedField.focus();\n    },\n\n    _getErrorMessage: function (fieldInstance, constraint) {\n      var customConstraintErrorMessage = constraint.name + 'Message';\n\n      if ('undefined' !== typeof fieldInstance.options[customConstraintErrorMessage])\n        return window.Parsley.formatMessage(fieldInstance.options[customConstraintErrorMessage], constraint.requirements);\n\n      return window.Parsley.getErrorMessage(constraint);\n    },\n\n    _diff: function (newResult, oldResult, deep) {\n      var added = [];\n      var kept = [];\n\n      for (var i = 0; i < newResult.length; i++) {\n        var found = false;\n\n        for (var j = 0; j < oldResult.length; j++)\n          if (newResult[i].assert.name === oldResult[j].assert.name) {\n            found = true;\n            break;\n          }\n\n        if (found)\n          kept.push(newResult[i]);\n        else\n          added.push(newResult[i]);\n      }\n\n      return {\n        kept: kept,\n        added: added,\n        removed: !deep ? this._diff(oldResult, newResult, true).added : []\n      };\n    },\n\n    setupForm: function (formInstance) {\n      formInstance.$element.on('submit.Parsley', evt => { formInstance.onSubmitValidate(evt); });\n      formInstance.$element.on('click.Parsley', 'input[type=\"submit\"], button[type=\"submit\"]', evt => { formInstance.onSubmitButton(evt); });\n\n      // UI could be disabled\n      if (false === formInstance.options.uiEnabled)\n        return;\n\n      formInstance.$element.attr('novalidate', '');\n    },\n\n    setupField: function (fieldInstance) {\n      var _ui = {active: false};\n\n      // UI could be disabled\n      if (false === fieldInstance.options.uiEnabled)\n        return;\n\n      _ui.active = true;\n\n      // Give field its Parsley id in DOM\n      fieldInstance.$element.attr(fieldInstance.options.namespace + 'id', fieldInstance.__id__);\n\n      /** Generate important UI elements and store them in fieldInstance **/\n      // $errorClassHandler is the $element that woul have parsley-error and parsley-success classes\n      _ui.$errorClassHandler = this._manageClassHandler(fieldInstance);\n\n      // $errorsWrapper is a div that would contain the various field errors, it will be appended into $errorsContainer\n      _ui.errorsWrapperId = 'parsley-id-' + (fieldInstance.options.multiple ? 'multiple-' + fieldInstance.options.multiple : fieldInstance.__id__);\n      _ui.$errorsWrapper = $(fieldInstance.options.errorsWrapper).attr('id', _ui.errorsWrapperId);\n\n      // ValidationResult UI storage to detect what have changed bwt two validations, and update DOM accordingly\n      _ui.lastValidationResult = [];\n      _ui.validationInformationVisible = false;\n\n      // Store it in fieldInstance for later\n      fieldInstance._ui = _ui;\n\n      // Bind triggers first time\n      this.actualizeTriggers(fieldInstance);\n    },\n\n    // Determine which element will have `parsley-error` and `parsley-success` classes\n    _manageClassHandler: function (fieldInstance) {\n      // An element selector could be passed through DOM with `data-parsley-class-handler=#foo`\n      if ('string' === typeof fieldInstance.options.classHandler && $(fieldInstance.options.classHandler).length)\n        return $(fieldInstance.options.classHandler);\n\n      // Class handled could also be determined by function given in Parsley options\n      var $handler = fieldInstance.options.classHandler(fieldInstance);\n\n      // If this function returned a valid existing DOM element, go for it\n      if ('undefined' !== typeof $handler && $handler.length)\n        return $handler;\n\n      // Otherwise, if simple element (input, texatrea, select...) it will perfectly host the classes\n      if (!fieldInstance.options.multiple || fieldInstance.$element.is('select'))\n        return fieldInstance.$element;\n\n      // But if multiple element (radio, checkbox), that would be their parent\n      return fieldInstance.$element.parent();\n    },\n\n    _insertErrorWrapper: function (fieldInstance) {\n      var $errorsContainer;\n\n      // Nothing to do if already inserted\n      if (0 !== fieldInstance._ui.$errorsWrapper.parent().length)\n        return fieldInstance._ui.$errorsWrapper.parent();\n\n      if ('string' === typeof fieldInstance.options.errorsContainer) {\n        if ($(fieldInstance.options.errorsContainer).length)\n          return $(fieldInstance.options.errorsContainer).append(fieldInstance._ui.$errorsWrapper);\n        else\n          ParsleyUtils__default.warn('The errors container `' + fieldInstance.options.errorsContainer + '` does not exist in DOM');\n      } else if ('function' === typeof fieldInstance.options.errorsContainer)\n        $errorsContainer = fieldInstance.options.errorsContainer(fieldInstance);\n\n      if ('undefined' !== typeof $errorsContainer && $errorsContainer.length)\n        return $errorsContainer.append(fieldInstance._ui.$errorsWrapper);\n\n      var $from = fieldInstance.$element;\n      if (fieldInstance.options.multiple)\n        $from = $from.parent();\n      return $from.after(fieldInstance._ui.$errorsWrapper);\n    },\n\n    actualizeTriggers: function (fieldInstance) {\n      var $toBind = fieldInstance._findRelated();\n\n      // Remove Parsley events already binded on this field\n      $toBind.off('.Parsley');\n\n      // If no trigger is set, all good\n      if (false === fieldInstance.options.trigger)\n        return;\n\n      var triggers = fieldInstance.options.trigger.replace(/^\\s+/g , '').replace(/\\s+$/g , '');\n\n      if ('' === triggers)\n        return;\n\n      $toBind.on(\n        triggers.split(' ').join('.Parsley ') + '.Parsley',\n        event => { this.eventValidate(fieldInstance, event); }\n      );\n    },\n\n    eventValidate: function (field, event) {\n      // For keyup, keypress, keydown... events that could be a little bit obstrusive\n      // do not validate if val length < min threshold on first validation. Once field have been validated once and info\n      // about success or failure have been displayed, always validate with this trigger to reflect every yalidation change.\n      if (/key/.test(event.type))\n        if (!field._ui.validationInformationVisible && field.getValue().length <= field.options.validationThreshold)\n          return;\n\n      field.validate();\n    },\n\n    manageFailingFieldTrigger: function (fieldInstance) {\n      fieldInstance._ui.failedOnce = true;\n\n      // Radio and checkboxes fields must bind every field multiple\n      if (fieldInstance.options.multiple)\n        fieldInstance._findRelated().each(function () {\n          if (!/change/i.test($(this).parsley().options.trigger || ''))\n            $(this).on('change.ParsleyFailedOnce', () => { fieldInstance.validate(); });\n        });\n\n      // Select case\n      if (fieldInstance.$element.is('select'))\n        if (!/change/i.test(fieldInstance.options.trigger || ''))\n          return fieldInstance.$element.on('change.ParsleyFailedOnce', () => { fieldInstance.validate(); });\n\n      // All other inputs fields\n      if (!/keyup/i.test(fieldInstance.options.trigger || ''))\n        return fieldInstance.$element.on('keyup.ParsleyFailedOnce', () => { fieldInstance.validate(); });\n    },\n\n    reset: function (parsleyInstance) {\n      // Reset all event listeners\n      this.actualizeTriggers(parsleyInstance);\n      parsleyInstance.$element.off('.ParsleyFailedOnce');\n\n      // Nothing to do if UI never initialized for this field\n      if ('undefined' === typeof parsleyInstance._ui)\n        return;\n\n      if ('ParsleyForm' === parsleyInstance.__class__)\n        return;\n\n      // Reset all errors' li\n      parsleyInstance._ui.$errorsWrapper\n        .removeClass('filled')\n        .children()\n        .remove();\n\n      // Reset validation class\n      this._resetClass(parsleyInstance);\n\n      // Reset validation flags and last validation result\n      parsleyInstance._ui.lastValidationResult = [];\n      parsleyInstance._ui.validationInformationVisible = false;\n      parsleyInstance._ui.failedOnce = false;\n    },\n\n    destroy: function (parsleyInstance) {\n      this.reset(parsleyInstance);\n\n      if ('ParsleyForm' === parsleyInstance.__class__)\n        return;\n\n      if ('undefined' !== typeof parsleyInstance._ui)\n        parsleyInstance._ui.$errorsWrapper.remove();\n\n      delete parsleyInstance._ui;\n    },\n\n    _successClass: function (fieldInstance) {\n      fieldInstance._ui.validationInformationVisible = true;\n      fieldInstance._ui.$errorClassHandler.removeClass(fieldInstance.options.errorClass).addClass(fieldInstance.options.successClass);\n    },\n    _errorClass: function (fieldInstance) {\n      fieldInstance._ui.validationInformationVisible = true;\n      fieldInstance._ui.$errorClassHandler.removeClass(fieldInstance.options.successClass).addClass(fieldInstance.options.errorClass);\n    },\n    _resetClass: function (fieldInstance) {\n      fieldInstance._ui.$errorClassHandler.removeClass(fieldInstance.options.successClass).removeClass(fieldInstance.options.errorClass);\n    }\n  };\n\n  var ParsleyForm = function (element, domOptions, options) {\n    this.__class__ = 'ParsleyForm';\n    this.__id__ = ParsleyUtils__default.generateID();\n\n    this.$element = $(element);\n    this.domOptions = domOptions;\n    this.options = options;\n    this.parent = window.Parsley;\n\n    this.fields = [];\n    this.validationResult = null;\n  };\n\n  var ParsleyForm__statusMapping = {pending: null, resolved: true, rejected: false};\n\n  ParsleyForm.prototype = {\n    onSubmitValidate: function (event) {\n      // This is a Parsley generated submit event, do not validate, do not prevent, simply exit and keep normal behavior\n      if (true === event.parsley)\n        return;\n\n      // If we didn't come here through a submit button, use the first one in the form\n      this._$submitSource = this._$submitSource || this.$element.find('input[type=\"submit\"], button[type=\"submit\"]').first();\n\n      if (this._$submitSource.is('[formnovalidate]')) {\n        this._$submitSource = null;\n        return;\n      }\n\n      // Because some validations might be asynchroneous,\n      // we cancel this submit and will fake it after validation.\n      event.stopImmediatePropagation();\n      event.preventDefault();\n\n      this.whenValidate(undefined, undefined, event)\n        .done(() => { this._submit(); })\n        .always(() => { this._$submitSource = null; });\n\n      return this;\n    },\n\n    onSubmitButton: function(event) {\n      this._$submitSource = $(event.target);\n    },\n    // internal\n    // _submit submits the form, this time without going through the validations.\n    // Care must be taken to \"fake\" the actual submit button being clicked.\n    _submit: function () {\n      if (false === this._trigger('submit'))\n        return;\n      this.$element.find('.parsley_synthetic_submit_button').remove();\n      // Add submit button's data\n      if (this._$submitSource) {\n        $('<input class=\"parsley_synthetic_submit_button\" type=\"hidden\">')\n        .attr('name', this._$submitSource.attr('name'))\n        .attr('value', this._$submitSource.attr('value'))\n        .appendTo(this.$element);\n      }\n      //\n      this.$element.trigger($.extend($.Event('submit'), {parsley: true}));\n    },\n\n    // Performs validation on fields while triggering events.\n    // @returns `true` if al validations succeeds, `false`\n    // if a failure is immediately detected, or `null`\n    // if dependant on a promise.\n    // Prefer `whenValidate`.\n    validate: function (group, force, event) {\n      return ParsleyForm__statusMapping[ this.whenValidate(group, force, event).state() ];\n    },\n\n    whenValidate: function (group, force, event) {\n      this.submitEvent = event;\n      if (event) {\n        this.submitEvent.preventDefault = () => {\n          ParsleyUtils__default.warnOnce(\"Using `this.submitEvent.preventDefault()` is deprecated; instead, call `this.validationResult = false`\");\n          this.validationResult = false;\n        };\n      }\n      this.validationResult = true;\n\n      // fire validate event to eventually modify things before very validation\n      this._trigger('validate');\n\n      // Refresh form DOM options and form's fields that could have changed\n      this._refreshFields();\n\n      var promises = this._withoutReactualizingFormOptions(() => {\n        return $.map(this.fields, field => {\n          // do not validate a field if not the same as given validation group\n          if (!group || this._isFieldInGroup(field, group))\n            return field.whenValidate(force);\n        });\n      });\n\n      var promiseBasedOnValidationResult = () => {\n        var r = $.Deferred();\n        if (false === this.validationResult)\n          r.reject();\n        return r.resolve().promise();\n      };\n\n      return $.when(...promises)\n        .done(  () => { this._trigger('success'); })\n        .fail(  () => { this.validationResult = false; this._trigger('error'); })\n        .always(() => { this._trigger('validated'); })\n        .pipe(  promiseBasedOnValidationResult, promiseBasedOnValidationResult);\n    },\n\n    // Iterate over refreshed fields, and stop on first failure.\n    // Returns `true` if all fields are valid, `false` if a failure is detected\n    // or `null` if the result depends on an unresolved promise.\n    // Prefer using `whenValid` instead.\n    isValid: function (group, force) {\n      return ParsleyForm__statusMapping[ this.whenValid(group, force).state() ];\n    },\n\n    // Iterate over refreshed fields and validate them.\n    // Returns a promise.\n    // A validation that immediately fails will interrupt the validations.\n    whenValid: function (group, force) {\n      this._refreshFields();\n\n      var promises = this._withoutReactualizingFormOptions(() => {\n        return $.map(this.fields, field => {\n          // do not validate a field if not the same as given validation group\n          if (!group || this._isFieldInGroup(field, group))\n            return field.whenValid(force);\n        });\n      });\n      return $.when(...promises);\n    },\n\n    _isFieldInGroup: function (field, group) {\n      if ($.isArray(field.options.group))\n        return -1 !== $.inArray(group, field.options.group);\n      return field.options.group === group;\n    },\n\n    _refreshFields: function () {\n      return this.actualizeOptions()._bindFields();\n    },\n\n    _bindFields: function () {\n      var oldFields = this.fields;\n\n      this.fields = [];\n      this.fieldsMappedById = {};\n\n      this._withoutReactualizingFormOptions(() => {\n        this.$element\n        .find(this.options.inputs)\n        .not(this.options.excluded)\n        .each((_, element) => {\n          var fieldInstance = new window.Parsley.Factory(element, {}, this);\n\n          // Only add valid and not excluded `ParsleyField` and `ParsleyFieldMultiple` children\n          if (('ParsleyField' === fieldInstance.__class__ || 'ParsleyFieldMultiple' === fieldInstance.__class__) && (true !== fieldInstance.options.excluded))\n            if ('undefined' === typeof this.fieldsMappedById[fieldInstance.__class__ + '-' + fieldInstance.__id__]) {\n              this.fieldsMappedById[fieldInstance.__class__ + '-' + fieldInstance.__id__] = fieldInstance;\n              this.fields.push(fieldInstance);\n            }\n        });\n\n        $(oldFields).not(this.fields).each((_, field) => {\n          field._trigger('reset');\n        });\n      });\n      return this;\n    },\n\n    // Internal only.\n    // Looping on a form's fields to do validation or similar\n    // will trigger reactualizing options on all of them, which\n    // in turn will reactualize the form's options.\n    // To avoid calling actualizeOptions so many times on the form\n    // for nothing, _withoutReactualizingFormOptions temporarily disables\n    // the method actualizeOptions on this form while `fn` is called.\n    _withoutReactualizingFormOptions: function (fn) {\n      var oldActualizeOptions = this.actualizeOptions;\n      this.actualizeOptions = function () { return this; };\n      var result = fn();\n      this.actualizeOptions = oldActualizeOptions;\n      return result;\n    },\n\n    // Internal only.\n    // Shortcut to trigger an event\n    // Returns true iff event is not interrupted and default not prevented.\n    _trigger: function (eventName) {\n      return this.trigger('form:' + eventName);\n    }\n\n  };\n\n  var ConstraintFactory = function (parsleyField, name, requirements, priority, isDomConstraint) {\n    if (!/ParsleyField/.test(parsleyField.__class__))\n      throw new Error('ParsleyField or ParsleyFieldMultiple instance expected');\n\n    var validatorSpec = window.Parsley._validatorRegistry.validators[name];\n    var validator = new ParsleyValidator(validatorSpec);\n\n    $.extend(this, {\n      validator: validator,\n      name: name,\n      requirements: requirements,\n      priority: priority || parsleyField.options[name + 'Priority'] || validator.priority,\n      isDomConstraint: true === isDomConstraint\n    });\n    this._parseRequirements(parsleyField.options);\n  };\n\n  var capitalize = function(str) {\n    var cap = str[0].toUpperCase();\n    return cap + str.slice(1);\n  };\n\n  ConstraintFactory.prototype = {\n    validate: function(value, instance) {\n      var args = this.requirementList.slice(0); // Make copy\n      args.unshift(value);\n      args.push(instance);\n      return this.validator.validate.apply(this.validator, args);\n    },\n\n    _parseRequirements: function(options) {\n      this.requirementList = this.validator.parseRequirements(this.requirements, key => {\n        return options[this.name + capitalize(key)];\n      });\n    }\n  };\n\n  var ParsleyField = function (field, domOptions, options, parsleyFormInstance) {\n    this.__class__ = 'ParsleyField';\n    this.__id__ = ParsleyUtils__default.generateID();\n\n    this.$element = $(field);\n\n    // Set parent if we have one\n    if ('undefined' !== typeof parsleyFormInstance) {\n      this.parent = parsleyFormInstance;\n    }\n\n    this.options = options;\n    this.domOptions = domOptions;\n\n    // Initialize some properties\n    this.constraints = [];\n    this.constraintsByName = {};\n    this.validationResult = [];\n\n    // Bind constraints\n    this._bindConstraints();\n  };\n\n  var parsley_field__statusMapping = {pending: null, resolved: true, rejected: false};\n\n  ParsleyField.prototype = {\n    // # Public API\n    // Validate field and trigger some events for mainly `ParsleyUI`\n    // @returns `true`, an array of the validators that failed, or\n    // `null` if validation is not finished. Prefer using whenValidate\n    validate: function (force) {\n      var promise = this.whenValidate(force);\n      switch (promise.state()) {\n        case 'pending': return null;\n        case 'resolved': return true;\n        case 'rejected': return this.validationResult;\n      }\n    },\n\n    // Validate field and trigger some events for mainly `ParsleyUI`\n    // @returns a promise that succeeds only when all validations do.\n    whenValidate: function (force) {\n      this.value = this.getValue();\n\n      // Field Validate event. `this.value` could be altered for custom needs\n      this._trigger('validate');\n\n      return this.whenValid(force, this.value)\n        .done(() =>   { this._trigger('success'); })\n        .fail(() =>   { this._trigger('error'); })\n        .always(() => { this._trigger('validated'); });\n    },\n\n    hasConstraints: function () {\n      return 0 !== this.constraints.length;\n    },\n\n    // An empty optional field does not need validation\n    needsValidation: function (value) {\n      if ('undefined' === typeof value)\n        value = this.getValue();\n\n      // If a field is empty and not required, it is valid\n      // Except if `data-parsley-validate-if-empty` explicitely added, useful for some custom validators\n      if (!value.length && !this._isRequired() && 'undefined' === typeof this.options.validateIfEmpty)\n        return false;\n\n      return true;\n    },\n\n    // Just validate field. Do not trigger any event.\n    // Returns `true` iff all constraints pass, `false` if there are failures,\n    // or `null` if the result can not be determined yet (depends on a promise)\n    // See also `whenValid`.\n    isValid: function (force, value) {\n      return parsley_field__statusMapping[this.whenValid(force, value).state()];\n    },\n\n    // Just validate field. Do not trigger any event.\n    // @returns a promise that succeeds only when all validations do.\n    // The argument `force` is optional, defaults to `false`.\n    // The argument `value` is optional. If given, it will be validated instead of the value of the input.\n    whenValid: function (force, value) {\n      // Recompute options and rebind constraints to have latest changes\n      this.refreshConstraints();\n      this.validationResult = true;\n\n      // A field without constraint is valid\n      if (!this.hasConstraints())\n        return $.when();\n\n      // Make `force` argument optional\n      if ('boolean' !== typeof force && 'undefined' === typeof value) {\n        value = force;\n        force = false;\n      }\n      // Value could be passed as argument, needed to add more power to 'parsley:field:validate'\n      if ('undefined' === typeof value || null === value)\n        value = this.getValue();\n\n      if (!this.needsValidation(value) && true !== force)\n        return $.when();\n\n      var groupedConstraints = this._getGroupedConstraints();\n      var promises = [];\n      $.each(groupedConstraints, (_, constraints) => {\n        // Process one group of constraints at a time, we validate the constraints\n        // and combine the promises together.\n        var promise = $.when(\n          ...$.map(constraints, constraint => this._validateConstraint(value, constraint))\n        );\n        promises.push(promise);\n        if (promise.state() === 'rejected')\n          return false; // Interrupt processing if a group has already failed\n      });\n      return $.when.apply($, promises);\n    },\n\n    // @returns a promise\n    _validateConstraint: function(value, constraint) {\n      var result = constraint.validate(value, this);\n      // Map false to a failed promise\n      if (false === result)\n        result = $.Deferred().reject();\n      // Make sure we return a promise and that we record failures\n      return $.when(result).fail(errorMessage => {\n        if (true === this.validationResult)\n          this.validationResult = [];\n        this.validationResult.push({\n          assert: constraint,\n          errorMessage: 'string' === typeof errorMessage && errorMessage\n        });\n      });\n    },\n\n    // @returns Parsley field computed value that could be overrided or configured in DOM\n    getValue: function () {\n      var value;\n\n      // Value could be overriden in DOM or with explicit options\n      if ('function' === typeof this.options.value)\n        value = this.options.value(this);\n      else if ('undefined' !== typeof this.options.value)\n        value = this.options.value;\n      else\n        value = this.$element.val();\n\n      // Handle wrong DOM or configurations\n      if ('undefined' === typeof value || null === value)\n        return '';\n\n      return this._handleWhitespace(value);\n    },\n\n    // Actualize options that could have change since previous validation\n    // Re-bind accordingly constraints (could be some new, removed or updated)\n    refreshConstraints: function () {\n      return this.actualizeOptions()._bindConstraints();\n    },\n\n    /**\n    * Add a new constraint to a field\n    *\n    * @param {String}   name\n    * @param {Mixed}    requirements      optional\n    * @param {Number}   priority          optional\n    * @param {Boolean}  isDomConstraint   optional\n    */\n    addConstraint: function (name, requirements, priority, isDomConstraint) {\n\n      if (window.Parsley._validatorRegistry.validators[name]) {\n        var constraint = new ConstraintFactory(this, name, requirements, priority, isDomConstraint);\n\n        // if constraint already exist, delete it and push new version\n        if ('undefined' !== this.constraintsByName[constraint.name])\n          this.removeConstraint(constraint.name);\n\n        this.constraints.push(constraint);\n        this.constraintsByName[constraint.name] = constraint;\n      }\n\n      return this;\n    },\n\n    // Remove a constraint\n    removeConstraint: function (name) {\n      for (var i = 0; i < this.constraints.length; i++)\n        if (name === this.constraints[i].name) {\n          this.constraints.splice(i, 1);\n          break;\n        }\n      delete this.constraintsByName[name];\n      return this;\n    },\n\n    // Update a constraint (Remove + re-add)\n    updateConstraint: function (name, parameters, priority) {\n      return this.removeConstraint(name)\n        .addConstraint(name, parameters, priority);\n    },\n\n    // # Internals\n\n    // Internal only.\n    // Bind constraints from config + options + DOM\n    _bindConstraints: function () {\n      var constraints = [];\n      var constraintsByName = {};\n\n      // clean all existing DOM constraints to only keep javascript user constraints\n      for (var i = 0; i < this.constraints.length; i++)\n        if (false === this.constraints[i].isDomConstraint) {\n          constraints.push(this.constraints[i]);\n          constraintsByName[this.constraints[i].name] = this.constraints[i];\n        }\n\n      this.constraints = constraints;\n      this.constraintsByName = constraintsByName;\n\n      // then re-add Parsley DOM-API constraints\n      for (var name in this.options)\n        this.addConstraint(name, this.options[name], undefined, true);\n\n      // finally, bind special HTML5 constraints\n      return this._bindHtml5Constraints();\n    },\n\n    // Internal only.\n    // Bind specific HTML5 constraints to be HTML5 compliant\n    _bindHtml5Constraints: function () {\n      // html5 required\n      if (this.$element.hasClass('required') || this.$element.attr('required'))\n        this.addConstraint('required', true, undefined, true);\n\n      // html5 pattern\n      if ('string' === typeof this.$element.attr('pattern'))\n        this.addConstraint('pattern', this.$element.attr('pattern'), undefined, true);\n\n      // range\n      if ('undefined' !== typeof this.$element.attr('min') && 'undefined' !== typeof this.$element.attr('max'))\n        this.addConstraint('range', [this.$element.attr('min'), this.$element.attr('max')], undefined, true);\n\n      // HTML5 min\n      else if ('undefined' !== typeof this.$element.attr('min'))\n        this.addConstraint('min', this.$element.attr('min'), undefined, true);\n\n      // HTML5 max\n      else if ('undefined' !== typeof this.$element.attr('max'))\n        this.addConstraint('max', this.$element.attr('max'), undefined, true);\n\n\n      // length\n      if ('undefined' !== typeof this.$element.attr('minlength') && 'undefined' !== typeof this.$element.attr('maxlength'))\n        this.addConstraint('length', [this.$element.attr('minlength'), this.$element.attr('maxlength')], undefined, true);\n\n      // HTML5 minlength\n      else if ('undefined' !== typeof this.$element.attr('minlength'))\n        this.addConstraint('minlength', this.$element.attr('minlength'), undefined, true);\n\n      // HTML5 maxlength\n      else if ('undefined' !== typeof this.$element.attr('maxlength'))\n        this.addConstraint('maxlength', this.$element.attr('maxlength'), undefined, true);\n\n\n      // html5 types\n      var type = this.$element.attr('type');\n\n      if ('undefined' === typeof type)\n        return this;\n\n      // Small special case here for HTML5 number: integer validator if step attribute is undefined or an integer value, number otherwise\n      if ('number' === type) {\n        if (('undefined' === typeof this.$element.attr('step')) || (0 === parseFloat(this.$element.attr('step')) % 1)) {\n          return this.addConstraint('type', 'integer', undefined, true);\n        } else {\n          return this.addConstraint('type', 'number', undefined, true);\n        }\n      // Regular other HTML5 supported types\n      } else if (/^(email|url|range)$/i.test(type)) {\n        return this.addConstraint('type', type, undefined, true);\n      }\n      return this;\n    },\n\n    // Internal only.\n    // Field is required if have required constraint without `false` value\n    _isRequired: function () {\n      if ('undefined' === typeof this.constraintsByName.required)\n        return false;\n\n      return false !== this.constraintsByName.required.requirements;\n    },\n\n    // Internal only.\n    // Shortcut to trigger an event\n    _trigger: function (eventName) {\n      return this.trigger('field:' + eventName);\n    },\n\n    // Internal only\n    // Handles whitespace in a value\n    // Use `data-parsley-whitespace=\"squish\"` to auto squish input value\n    // Use `data-parsley-whitespace=\"trim\"` to auto trim input value\n    _handleWhitespace: function (value) {\n      if (true === this.options.trimValue)\n        ParsleyUtils__default.warnOnce('data-parsley-trim-value=\"true\" is deprecated, please use data-parsley-whitespace=\"trim\"');\n\n      if ('squish' === this.options.whitespace)\n        value = value.replace(/\\s{2,}/g, ' ');\n\n      if (('trim' === this.options.whitespace) || ('squish' === this.options.whitespace) || (true === this.options.trimValue))\n        value = ParsleyUtils__default.trimString(value);\n\n      return value;\n    },\n\n    // Internal only.\n    // Returns the constraints, grouped by descending priority.\n    // The result is thus an array of arrays of constraints.\n    _getGroupedConstraints: function () {\n      if (false === this.options.priorityEnabled)\n        return [this.constraints];\n\n      var groupedConstraints = [];\n      var index = {};\n\n      // Create array unique of priorities\n      for (var i = 0; i < this.constraints.length; i++) {\n        var p = this.constraints[i].priority;\n        if (!index[p])\n          groupedConstraints.push(index[p] = []);\n        index[p].push(this.constraints[i]);\n      }\n      // Sort them by priority DESC\n      groupedConstraints.sort(function (a, b) { return b[0].priority - a[0].priority; });\n\n      return groupedConstraints;\n    }\n\n  };\n\n  var parsley_field = ParsleyField;\n\n  var ParsleyMultiple = function () {\n    this.__class__ = 'ParsleyFieldMultiple';\n  };\n\n  ParsleyMultiple.prototype = {\n    // Add new `$element` sibling for multiple field\n    addElement: function ($element) {\n      this.$elements.push($element);\n\n      return this;\n    },\n\n    // See `ParsleyField.refreshConstraints()`\n    refreshConstraints: function () {\n      var fieldConstraints;\n\n      this.constraints = [];\n\n      // Select multiple special treatment\n      if (this.$element.is('select')) {\n        this.actualizeOptions()._bindConstraints();\n\n        return this;\n      }\n\n      // Gather all constraints for each input in the multiple group\n      for (var i = 0; i < this.$elements.length; i++) {\n\n        // Check if element have not been dynamically removed since last binding\n        if (!$('html').has(this.$elements[i]).length) {\n          this.$elements.splice(i, 1);\n          continue;\n        }\n\n        fieldConstraints = this.$elements[i].data('ParsleyFieldMultiple').refreshConstraints().constraints;\n\n        for (var j = 0; j < fieldConstraints.length; j++)\n          this.addConstraint(fieldConstraints[j].name, fieldConstraints[j].requirements, fieldConstraints[j].priority, fieldConstraints[j].isDomConstraint);\n      }\n\n      return this;\n    },\n\n    // See `ParsleyField.getValue()`\n    getValue: function () {\n      // Value could be overriden in DOM\n      if ('function' === typeof this.options.value)\n        value = this.options.value(this);\n      else if ('undefined' !== typeof this.options.value)\n        return this.options.value;\n\n      // Radio input case\n      if (this.$element.is('input[type=radio]'))\n        return this._findRelated().filter(':checked').val() || '';\n\n      // checkbox input case\n      if (this.$element.is('input[type=checkbox]')) {\n        var values = [];\n\n        this._findRelated().filter(':checked').each(function () {\n          values.push($(this).val());\n        });\n\n        return values;\n      }\n\n      // Select multiple case\n      if (this.$element.is('select') && null === this.$element.val())\n        return [];\n\n      // Default case that should never happen\n      return this.$element.val();\n    },\n\n    _init: function () {\n      this.$elements = [this.$element];\n\n      return this;\n    }\n  };\n\n  var ParsleyFactory = function (element, options, parsleyFormInstance) {\n    this.$element = $(element);\n\n    // If the element has already been bound, returns its saved Parsley instance\n    var savedparsleyFormInstance = this.$element.data('Parsley');\n    if (savedparsleyFormInstance) {\n\n      // If the saved instance has been bound without a ParsleyForm parent and there is one given in this call, add it\n      if ('undefined' !== typeof parsleyFormInstance && savedparsleyFormInstance.parent === window.Parsley) {\n        savedparsleyFormInstance.parent = parsleyFormInstance;\n        savedparsleyFormInstance._resetOptions(savedparsleyFormInstance.options);\n      }\n\n      return savedparsleyFormInstance;\n    }\n\n    // Parsley must be instantiated with a DOM element or jQuery $element\n    if (!this.$element.length)\n      throw new Error('You must bind Parsley on an existing element.');\n\n    if ('undefined' !== typeof parsleyFormInstance && 'ParsleyForm' !== parsleyFormInstance.__class__)\n      throw new Error('Parent instance must be a ParsleyForm instance');\n\n    this.parent = parsleyFormInstance || window.Parsley;\n    return this.init(options);\n  };\n\n  ParsleyFactory.prototype = {\n    init: function (options) {\n      this.__class__ = 'Parsley';\n      this.__version__ = '@@version';\n      this.__id__ = ParsleyUtils__default.generateID();\n\n      // Pre-compute options\n      this._resetOptions(options);\n\n      // A ParsleyForm instance is obviously a `<form>` element but also every node that is not an input and has the `data-parsley-validate` attribute\n      if (this.$element.is('form') || (ParsleyUtils__default.checkAttr(this.$element, this.options.namespace, 'validate') && !this.$element.is(this.options.inputs)))\n        return this.bind('parsleyForm');\n\n      // Every other element is bound as a `ParsleyField` or `ParsleyFieldMultiple`\n      return this.isMultiple() ? this.handleMultiple() : this.bind('parsleyField');\n    },\n\n    isMultiple: function () {\n      return (this.$element.is('input[type=radio], input[type=checkbox]')) || (this.$element.is('select') && 'undefined' !== typeof this.$element.attr('multiple'));\n    },\n\n    // Multiples fields are a real nightmare :(\n    // Maybe some refactoring would be appreciated here...\n    handleMultiple: function () {\n      var name;\n      var multiple;\n      var parsleyMultipleInstance;\n\n      // Handle multiple name\n      if (this.options.multiple)\n        ; // We already have our 'multiple' identifier\n      else if ('undefined' !== typeof this.$element.attr('name') && this.$element.attr('name').length)\n        this.options.multiple = name = this.$element.attr('name');\n      else if ('undefined' !== typeof this.$element.attr('id') && this.$element.attr('id').length)\n        this.options.multiple = this.$element.attr('id');\n\n      // Special select multiple input\n      if (this.$element.is('select') && 'undefined' !== typeof this.$element.attr('multiple')) {\n        this.options.multiple = this.options.multiple || this.__id__;\n        return this.bind('parsleyFieldMultiple');\n\n      // Else for radio / checkboxes, we need a `name` or `data-parsley-multiple` to properly bind it\n      } else if (!this.options.multiple) {\n        ParsleyUtils__default.warn('To be bound by Parsley, a radio, a checkbox and a multiple select input must have either a name or a multiple option.', this.$element);\n        return this;\n      }\n\n      // Remove special chars\n      this.options.multiple = this.options.multiple.replace(/(:|\\.|\\[|\\]|\\{|\\}|\\$)/g, '');\n\n      // Add proper `data-parsley-multiple` to siblings if we have a valid multiple name\n      if ('undefined' !== typeof name) {\n        $('input[name=\"' + name + '\"]').each((i, input) => {\n          if ($(input).is('input[type=radio], input[type=checkbox]'))\n            $(input).attr(this.options.namespace + 'multiple', this.options.multiple);\n        });\n      }\n\n      // Check here if we don't already have a related multiple instance saved\n      var $previouslyRelated = this._findRelated();\n      for (var i = 0; i < $previouslyRelated.length; i++) {\n        parsleyMultipleInstance = $($previouslyRelated.get(i)).data('Parsley');\n        if ('undefined' !== typeof parsleyMultipleInstance) {\n\n          if (!this.$element.data('ParsleyFieldMultiple')) {\n            parsleyMultipleInstance.addElement(this.$element);\n          }\n\n          break;\n        }\n      }\n\n      // Create a secret ParsleyField instance for every multiple field. It will be stored in `data('ParsleyFieldMultiple')`\n      // And will be useful later to access classic `ParsleyField` stuff while being in a `ParsleyFieldMultiple` instance\n      this.bind('parsleyField', true);\n\n      return parsleyMultipleInstance || this.bind('parsleyFieldMultiple');\n    },\n\n    // Return proper `ParsleyForm`, `ParsleyField` or `ParsleyFieldMultiple`\n    bind: function (type, doNotStore) {\n      var parsleyInstance;\n\n      switch (type) {\n        case 'parsleyForm':\n          parsleyInstance = $.extend(\n            new ParsleyForm(this.$element, this.domOptions, this.options),\n            window.ParsleyExtend\n          )._bindFields();\n          break;\n        case 'parsleyField':\n          parsleyInstance = $.extend(\n            new parsley_field(this.$element, this.domOptions, this.options, this.parent),\n            window.ParsleyExtend\n          );\n          break;\n        case 'parsleyFieldMultiple':\n          parsleyInstance = $.extend(\n            new parsley_field(this.$element, this.domOptions, this.options, this.parent),\n            new ParsleyMultiple(),\n            window.ParsleyExtend\n          )._init();\n          break;\n        default:\n          throw new Error(type + 'is not a supported Parsley type');\n      }\n\n      if (this.options.multiple)\n        ParsleyUtils__default.setAttr(this.$element, this.options.namespace, 'multiple', this.options.multiple);\n\n      if ('undefined' !== typeof doNotStore) {\n        this.$element.data('ParsleyFieldMultiple', parsleyInstance);\n\n        return parsleyInstance;\n      }\n\n      // Store the freshly bound instance in a DOM element for later access using jQuery `data()`\n      this.$element.data('Parsley', parsleyInstance);\n\n      // Tell the world we have a new ParsleyForm or ParsleyField instance!\n      parsleyInstance._trigger('init');\n\n      return parsleyInstance;\n    }\n  };\n\n  var vernums = $.fn.jquery.split('.');\n  if (parseInt(vernums[0]) <= 1 && parseInt(vernums[1]) < 8) {\n    throw \"The loaded version of jQuery is too old. Please upgrade to 1.8.x or better.\";\n  }\n  if (!vernums.forEach) {\n    ParsleyUtils__default.warn('Parsley requires ES5 to run properly. Please include https://github.com/es-shims/es5-shim');\n  }\n  // Inherit `on`, `off` & `trigger` to Parsley:\n  var Parsley = $.extend(new ParsleyAbstract(), {\n      $element: $(document),\n      actualizeOptions: null,\n      _resetOptions: null,\n      Factory: ParsleyFactory,\n      version: '@@version'\n    });\n\n  // Supplement ParsleyField and Form with ParsleyAbstract\n  // This way, the constructors will have access to those methods\n  $.extend(parsley_field.prototype, ParsleyAbstract.prototype);\n  $.extend(ParsleyForm.prototype, ParsleyAbstract.prototype);\n  // Inherit actualizeOptions and _resetOptions:\n  $.extend(ParsleyFactory.prototype, ParsleyAbstract.prototype);\n\n  // ### jQuery API\n  // `$('.elem').parsley(options)` or `$('.elem').psly(options)`\n  $.fn.parsley = $.fn.psly = function (options) {\n    if (this.length > 1) {\n      var instances = [];\n\n      this.each(function () {\n        instances.push($(this).parsley(options));\n      });\n\n      return instances;\n    }\n\n    // Return undefined if applied to non existing DOM element\n    if (!$(this).length) {\n      ParsleyUtils__default.warn('You must bind Parsley on an existing element.');\n\n      return;\n    }\n\n    return new ParsleyFactory(this, options);\n  };\n\n  // ### ParsleyField and ParsleyForm extension\n  // Ensure the extension is now defined if it wasn't previously\n  if ('undefined' === typeof window.ParsleyExtend)\n    window.ParsleyExtend = {};\n\n  // ### Parsley config\n  // Inherit from ParsleyDefault, and copy over any existing values\n  Parsley.options = $.extend(ParsleyUtils__default.objectCreate(ParsleyDefaults), window.ParsleyConfig);\n  window.ParsleyConfig = Parsley.options; // Old way of accessing global options\n\n  // ### Globals\n  window.Parsley = window.psly = Parsley;\n  window.ParsleyUtils = ParsleyUtils__default;\n\n  // ### Define methods that forward to the registry, and deprecate all access except through window.Parsley\n  var registry = window.Parsley._validatorRegistry = new ParsleyValidatorRegistry(window.ParsleyConfig.validators, window.ParsleyConfig.i18n);\n  window.ParsleyValidator = {};\n  $.each('setLocale addCatalog addMessage addMessages getErrorMessage formatMessage addValidator updateValidator removeValidator'.split(' '), function (i, method) {\n    window.Parsley[method] = $.proxy(registry, method);\n    window.ParsleyValidator[method] = function () {\n      ParsleyUtils__default.warnOnce(`Accessing the method '${method}' through ParsleyValidator is deprecated. Simply call 'window.Parsley.${method}(...)'`);\n      return window.Parsley[method](...arguments);\n    };\n  });\n\n  // ### ParsleyUI\n  // UI is a separate class that only listens to some events and then modifies the DOM accordingly\n  // Could be overriden by defining a `window.ParsleyConfig.ParsleyUI` appropriate class (with `listen()` method basically)\n  window.ParsleyUI = 'function' === typeof window.ParsleyConfig.ParsleyUI ?\n    new window.ParsleyConfig.ParsleyUI().listen() : new ParsleyUI().listen();\n\n  // ### PARSLEY auto-binding\n  // Prevent it by setting `ParsleyConfig.autoBind` to `false`\n  if (false !== window.ParsleyConfig.autoBind) {\n    $(function () {\n      // Works only on `data-parsley-validate`.\n      if ($('[data-parsley-validate]').length)\n        $('[data-parsley-validate]').parsley();\n    });\n  }\n\n  var o = $({});\n  var deprecated = function () {\n    ParsleyUtils__default.warnOnce(\"Parsley's pubsub module is deprecated; use the 'on' and 'off' methods on parsley instances or window.Parsley\");\n  };\n\n  // Returns an event handler that calls `fn` with the arguments it expects\n  function adapt(fn, context) {\n    // Store to allow unbinding\n    if (!fn.parsleyAdaptedCallback) {\n      fn.parsleyAdaptedCallback = function () {\n        var args = Array.prototype.slice.call(arguments, 0);\n        args.unshift(this);\n        fn.apply(context || o, args);\n      };\n    }\n    return fn.parsleyAdaptedCallback;\n  }\n\n  var eventPrefix = 'parsley:';\n  // Converts 'parsley:form:validate' into 'form:validate'\n  function eventName(name) {\n    if (name.lastIndexOf(eventPrefix, 0) === 0)\n      return name.substr(eventPrefix.length);\n    return name;\n  }\n\n  // $.listen is deprecated. Use Parsley.on instead.\n  $.listen = function (name, callback) {\n    var context;\n    deprecated();\n    if ('object' === typeof arguments[1] && 'function' === typeof arguments[2]) {\n      context = arguments[1];\n      callback = arguments[2];\n    }\n\n    if ('function' !== typeof callback)\n      throw new Error('Wrong parameters');\n\n    window.Parsley.on(eventName(name), adapt(callback, context));\n  };\n\n  $.listenTo = function (instance, name, fn) {\n    deprecated();\n    if (!(instance instanceof parsley_field) && !(instance instanceof ParsleyForm))\n      throw new Error('Must give Parsley instance');\n\n    if ('string' !== typeof name || 'function' !== typeof fn)\n      throw new Error('Wrong parameters');\n\n    instance.on(eventName(name), adapt(fn));\n  };\n\n  $.unsubscribe = function (name, fn) {\n    deprecated();\n    if ('string' !== typeof name || 'function' !== typeof fn)\n      throw new Error('Wrong arguments');\n    window.Parsley.off(eventName(name), fn.parsleyAdaptedCallback);\n  };\n\n  $.unsubscribeTo = function (instance, name) {\n    deprecated();\n    if (!(instance instanceof parsley_field) && !(instance instanceof ParsleyForm))\n      throw new Error('Must give Parsley instance');\n    instance.off(eventName(name));\n  };\n\n  $.unsubscribeAll = function (name) {\n    deprecated();\n    window.Parsley.off(eventName(name));\n    $('form,input,textarea,select').each(function () {\n      var instance = $(this).data('Parsley');\n      if (instance) {\n        instance.off(eventName(name));\n      }\n    });\n  };\n\n  // $.emit is deprecated. Use jQuery events instead.\n  $.emit = function (name, instance) {\n    deprecated();\n    var instanceGiven = (instance instanceof parsley_field) || (instance instanceof ParsleyForm);\n    var args = Array.prototype.slice.call(arguments, instanceGiven ? 2 : 1);\n    args.unshift(eventName(name));\n    if (!instanceGiven) {\n      instance = window.Parsley;\n    }\n    instance.trigger(...args);\n  };\n\n  var pubsub = {};\n\n  $.extend(true, Parsley, {\n    asyncValidators: {\n      'default': {\n        fn: function (xhr) {\n          // By default, only status 2xx are deemed successful.\n          // Note: we use status instead of state() because responses with status 200\n          // but invalid messages (e.g. an empty body for content type set to JSON) will\n          // result in state() === 'rejected'.\n          return xhr.status >= 200 && xhr.status < 300;\n        },\n        url: false\n      },\n      reverse: {\n        fn: function (xhr) {\n          // If reverse option is set, a failing ajax request is considered successful\n          return xhr.status < 200 || xhr.status >= 300;\n        },\n        url: false\n      }\n    },\n\n    addAsyncValidator: function (name, fn, url, options) {\n      Parsley.asyncValidators[name] = {\n        fn: fn,\n        url: url || false,\n        options: options || {}\n      };\n\n      return this;\n    }\n\n  });\n\n  Parsley.addValidator('remote', {\n    requirementType: {\n      '': 'string',\n      'validator': 'string',\n      'reverse': 'boolean',\n      'options': 'object'\n    },\n\n    validateString: function (value, url, options, instance) {\n      var data = {};\n      var ajaxOptions;\n      var csr;\n      var validator = options.validator || (true === options.reverse ? 'reverse' : 'default');\n\n      if ('undefined' === typeof Parsley.asyncValidators[validator])\n        throw new Error('Calling an undefined async validator: `' + validator + '`');\n\n      url = Parsley.asyncValidators[validator].url || url;\n\n      // Fill current value\n      if (url.indexOf('{value}') > -1) {\n        url = url.replace('{value}', encodeURIComponent(value));\n      } else {\n        data[instance.$element.attr('name') || instance.$element.attr('id')] = value;\n      }\n\n      // Merge options passed in from the function with the ones in the attribute\n      var remoteOptions = $.extend(true, options.options || {} , Parsley.asyncValidators[validator].options);\n\n      // All `$.ajax(options)` could be overridden or extended directly from DOM in `data-parsley-remote-options`\n      ajaxOptions = $.extend(true, {}, {\n        url: url,\n        data: data,\n        type: 'GET'\n      }, remoteOptions);\n\n      // Generate store key based on ajax options\n      instance.trigger('field:ajaxoptions', instance, ajaxOptions);\n\n      csr = $.param(ajaxOptions);\n\n      // Initialise querry cache\n      if ('undefined' === typeof Parsley._remoteCache)\n        Parsley._remoteCache = {};\n\n      // Try to retrieve stored xhr\n      var xhr = Parsley._remoteCache[csr] = Parsley._remoteCache[csr] || $.ajax(ajaxOptions);\n\n      var handleXhr = function () {\n        var result = Parsley.asyncValidators[validator].fn.call(instance, xhr, url, options);\n        if (!result) // Map falsy results to rejected promise\n          result = $.Deferred().reject();\n        return $.when(result);\n      };\n\n      return xhr.then(handleXhr, handleXhr);\n    },\n\n    priority: -1\n  });\n\n  Parsley.on('form:submit', function () {\n    Parsley._remoteCache = {};\n  });\n\n  window.ParsleyExtend.addAsyncValidator = function () {\n    ParsleyUtils.warnOnce('Accessing the method `addAsyncValidator` through an instance is deprecated. Simply call `Parsley.addAsyncValidator(...)`');\n    return Parsley.addAsyncValidator(...arguments);\n  };\n\n  // This is included with the Parsley library itself,\n  // thus there is no use in adding it to your project.\n  Parsley.addMessages('en', {\n    defaultMessage: \"This value seems to be invalid.\",\n    type: {\n      email:        \"This value should be a valid email.\",\n      url:          \"This value should be a valid url.\",\n      number:       \"This value should be a valid number.\",\n      integer:      \"This value should be a valid integer.\",\n      digits:       \"This value should be digits.\",\n      alphanum:     \"This value should be alphanumeric.\"\n    },\n    notblank:       \"This value should not be blank.\",\n    required:       \"This value is required.\",\n    pattern:        \"This value seems to be invalid.\",\n    min:            \"This value should be greater than or equal to %s.\",\n    max:            \"This value should be lower than or equal to %s.\",\n    range:          \"This value should be between %s and %s.\",\n    minlength:      \"This value is too short. It should have %s characters or more.\",\n    maxlength:      \"This value is too long. It should have %s characters or fewer.\",\n    length:         \"This value length is invalid. It should be between %s and %s characters long.\",\n    mincheck:       \"You must select at least %s choices.\",\n    maxcheck:       \"You must select %s choices or fewer.\",\n    check:          \"You must select between %s and %s choices.\",\n    equalto:        \"This value should be the same.\"\n  });\n\n  Parsley.setLocale('en');\n\n  var parsley = Parsley;\n\n  return parsley;\n\n}));\n","import $ from 'jquery';\nimport ParsleyField from './field';\nimport ParsleyForm from './form';\nimport ParsleyUtils from './utils';\n\nvar o = $({});\nvar deprecated = function () {\n  ParsleyUtils.warnOnce(\"Parsley's pubsub module is deprecated; use the 'on' and 'off' methods on parsley instances or window.Parsley\");\n};\n\n// Returns an event handler that calls `fn` with the arguments it expects\nfunction adapt(fn, context) {\n  // Store to allow unbinding\n  if (!fn.parsleyAdaptedCallback) {\n    fn.parsleyAdaptedCallback = function () {\n      var args = Array.prototype.slice.call(arguments, 0);\n      args.unshift(this);\n      fn.apply(context || o, args);\n    };\n  }\n  return fn.parsleyAdaptedCallback;\n}\n\nvar eventPrefix = 'parsley:';\n// Converts 'parsley:form:validate' into 'form:validate'\nfunction eventName(name) {\n  if (name.lastIndexOf(eventPrefix, 0) === 0)\n    return name.substr(eventPrefix.length);\n  return name;\n}\n\n// $.listen is deprecated. Use Parsley.on instead.\n$.listen = function (name, callback) {\n  var context;\n  deprecated();\n  if ('object' === typeof arguments[1] && 'function' === typeof arguments[2]) {\n    context = arguments[1];\n    callback = arguments[2];\n  }\n\n  if ('function' !== typeof callback)\n    throw new Error('Wrong parameters');\n\n  window.Parsley.on(eventName(name), adapt(callback, context));\n};\n\n$.listenTo = function (instance, name, fn) {\n  deprecated();\n  if (!(instance instanceof ParsleyField) && !(instance instanceof ParsleyForm))\n    throw new Error('Must give Parsley instance');\n\n  if ('string' !== typeof name || 'function' !== typeof fn)\n    throw new Error('Wrong parameters');\n\n  instance.on(eventName(name), adapt(fn));\n};\n\n$.unsubscribe = function (name, fn) {\n  deprecated();\n  if ('string' !== typeof name || 'function' !== typeof fn)\n    throw new Error('Wrong arguments');\n  window.Parsley.off(eventName(name), fn.parsleyAdaptedCallback);\n};\n\n$.unsubscribeTo = function (instance, name) {\n  deprecated();\n  if (!(instance instanceof ParsleyField) && !(instance instanceof ParsleyForm))\n    throw new Error('Must give Parsley instance');\n  instance.off(eventName(name));\n};\n\n$.unsubscribeAll = function (name) {\n  deprecated();\n  window.Parsley.off(eventName(name));\n  $('form,input,textarea,select').each(function () {\n    var instance = $(this).data('Parsley');\n    if (instance) {\n      instance.off(eventName(name));\n    }\n  });\n};\n\n// $.emit is deprecated. Use jQuery events instead.\n$.emit = function (name, instance) {\n  deprecated();\n  var instanceGiven = (instance instanceof ParsleyField) || (instance instanceof ParsleyForm);\n  var args = Array.prototype.slice.call(arguments, instanceGiven ? 2 : 1);\n  args.unshift(eventName(name));\n  if (!instanceGiven) {\n    instance = window.Parsley;\n  }\n  instance.trigger(...args);\n};\n\nexport default {};\n","import $ from 'jquery';\n\nvar globalID = 1;\nvar pastWarnings = {};\n\nvar ParsleyUtils = {\n  // Parsley DOM-API\n  // returns object from dom attributes and values\n  attr: function ($element, namespace, obj) {\n    var i;\n    var attribute;\n    var attributes;\n    var regex = new RegExp('^' + namespace, 'i');\n\n    if ('undefined' === typeof obj)\n      obj = {};\n    else {\n      // Clear all own properties. This won't affect prototype's values\n      for (i in obj) {\n        if (obj.hasOwnProperty(i))\n          delete obj[i];\n      }\n    }\n\n    if ('undefined' === typeof $element || 'undefined' === typeof $element[0])\n      return obj;\n\n    attributes = $element[0].attributes;\n    for (i = attributes.length; i--; ) {\n      attribute = attributes[i];\n\n      if (attribute && attribute.specified && regex.test(attribute.name)) {\n        obj[this.camelize(attribute.name.slice(namespace.length))] = this.deserializeValue(attribute.value);\n      }\n    }\n\n    return obj;\n  },\n\n  checkAttr: function ($element, namespace, checkAttr) {\n    return $element.is('[' + namespace + checkAttr + ']');\n  },\n\n  setAttr: function ($element, namespace, attr, value) {\n    $element[0].setAttribute(this.dasherize(namespace + attr), String(value));\n  },\n\n  generateID: function () {\n    return '' + globalID++;\n  },\n\n  /** Third party functions **/\n  // Zepto deserialize function\n  deserializeValue: function (value) {\n    var num;\n\n    try {\n      return value ?\n        value == \"true\" ||\n        (value == \"false\" ? false :\n        value == \"null\" ? null :\n        !isNaN(num = Number(value)) ? num :\n        /^[\\[\\{]/.test(value) ? $.parseJSON(value) :\n        value)\n        : value;\n    } catch (e) { return value; }\n  },\n\n  // Zepto camelize function\n  camelize: function (str) {\n    return str.replace(/-+(.)?/g, function (match, chr) {\n      return chr ? chr.toUpperCase() : '';\n    });\n  },\n\n  // Zepto dasherize function\n  dasherize: function (str) {\n    return str.replace(/::/g, '/')\n      .replace(/([A-Z]+)([A-Z][a-z])/g, '$1_$2')\n      .replace(/([a-z\\d])([A-Z])/g, '$1_$2')\n      .replace(/_/g, '-')\n      .toLowerCase();\n  },\n\n  warn: function () {\n    if (window.console && 'function' === typeof window.console.warn)\n      window.console.warn(...arguments);\n  },\n\n  warnOnce: function(msg) {\n    if (!pastWarnings[msg]) {\n      pastWarnings[msg] = true;\n      this.warn(...arguments);\n    }\n  },\n\n  _resetWarnings: function () {\n    pastWarnings = {};\n  },\n\n  trimString: function(string) {\n    return string.replace(/^\\s+|\\s+$/g, '');\n  },\n\n  // Object.create polyfill, see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/create#Polyfill\n  objectCreate: Object.create || (function () {\n    var Object = function () {};\n    return function (prototype) {\n      if (arguments.length > 1) {\n        throw Error('Second argument not supported');\n      }\n      if (typeof prototype != 'object') {\n        throw TypeError('Argument must be an object');\n      }\n      Object.prototype = prototype;\n      var result = new Object();\n      Object.prototype = null;\n      return result;\n    };\n  })()\n};\n\nexport default ParsleyUtils;\n","/*!\n* Parsley.js\n* Version 2.2.0-rc4 - built Tue, Jan 12th 2016, 11:48 pm\n* http://parsleyjs.org\n* Guillaume Potier - <guillaume@wisembly.com>\n* Marc-Andre Lafortune - <petroselinum@marc-andre.ca>\n* MIT Licensed\n*/\n\n// The source code below is generated by babel as\n// Parsley is written in ECMAScript 6\n//\nfunction _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) arr2[i] = arr[i]; return arr2; } else { return Array.from(arr); } }\n\n(function (global, factory) {\n  typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory(require('jquery')) : typeof define === 'function' && define.amd ? define(['jquery'], factory) : global.parsley = factory(global.jQuery);\n})(this, function ($) {\n  'use strict';\n\n  var globalID = 1;\n  var pastWarnings = {};\n\n  var ParsleyUtils__ParsleyUtils = {\n    // Parsley DOM-API\n    // returns object from dom attributes and values\n    attr: function attr($element, namespace, obj) {\n      var i;\n      var attribute;\n      var attributes;\n      var regex = new RegExp('^' + namespace, 'i');\n\n      if ('undefined' === typeof obj) obj = {};else {\n        // Clear all own properties. This won't affect prototype's values\n        for (i in obj) {\n          if (obj.hasOwnProperty(i)) delete obj[i];\n        }\n      }\n\n      if ('undefined' === typeof $element || 'undefined' === typeof $element[0]) return obj;\n\n      attributes = $element[0].attributes;\n      for (i = attributes.length; i--;) {\n        attribute = attributes[i];\n\n        if (attribute && attribute.specified && regex.test(attribute.name)) {\n          obj[this.camelize(attribute.name.slice(namespace.length))] = this.deserializeValue(attribute.value);\n        }\n      }\n\n      return obj;\n    },\n\n    checkAttr: function checkAttr($element, namespace, _checkAttr) {\n      return $element.is('[' + namespace + _checkAttr + ']');\n    },\n\n    setAttr: function setAttr($element, namespace, attr, value) {\n      $element[0].setAttribute(this.dasherize(namespace + attr), String(value));\n    },\n\n    generateID: function generateID() {\n      return '' + globalID++;\n    },\n\n    /** Third party functions **/\n    // Zepto deserialize function\n    deserializeValue: function deserializeValue(value) {\n      var num;\n\n      try {\n        return value ? value == \"true\" || (value == \"false\" ? false : value == \"null\" ? null : !isNaN(num = Number(value)) ? num : /^[\\[\\{]/.test(value) ? $.parseJSON(value) : value) : value;\n      } catch (e) {\n        return value;\n      }\n    },\n\n    // Zepto camelize function\n    camelize: function camelize(str) {\n      return str.replace(/-+(.)?/g, function (match, chr) {\n        return chr ? chr.toUpperCase() : '';\n      });\n    },\n\n    // Zepto dasherize function\n    dasherize: function dasherize(str) {\n      return str.replace(/::/g, '/').replace(/([A-Z]+)([A-Z][a-z])/g, '$1_$2').replace(/([a-z\\d])([A-Z])/g, '$1_$2').replace(/_/g, '-').toLowerCase();\n    },\n\n    warn: function warn() {\n      var _window$console;\n\n      if (window.console && 'function' === typeof window.console.warn) (_window$console = window.console).warn.apply(_window$console, arguments);\n    },\n\n    warnOnce: function warnOnce(msg) {\n      if (!pastWarnings[msg]) {\n        pastWarnings[msg] = true;\n        this.warn.apply(this, arguments);\n      }\n    },\n\n    _resetWarnings: function _resetWarnings() {\n      pastWarnings = {};\n    },\n\n    trimString: function trimString(string) {\n      return string.replace(/^\\s+|\\s+$/g, '');\n    },\n\n    // Object.create polyfill, see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/create#Polyfill\n    objectCreate: Object.create || (function () {\n      var Object = function Object() {};\n      return function (prototype) {\n        if (arguments.length > 1) {\n          throw Error('Second argument not supported');\n        }\n        if (typeof prototype != 'object') {\n          throw TypeError('Argument must be an object');\n        }\n        Object.prototype = prototype;\n        var result = new Object();\n        Object.prototype = null;\n        return result;\n      };\n    })()\n  };\n\n  var ParsleyUtils__default = ParsleyUtils__ParsleyUtils;\n\n  // All these options could be overriden and specified directly in DOM using\n  // `data-parsley-` default DOM-API\n  // eg: `inputs` can be set in DOM using `data-parsley-inputs=\"input, textarea\"`\n  // eg: `data-parsley-stop-on-first-failing-constraint=\"false\"`\n\n  var ParsleyDefaults = {\n    // ### General\n\n    // Default data-namespace for DOM API\n    namespace: 'data-parsley-',\n\n    // Supported inputs by default\n    inputs: 'input, textarea, select',\n\n    // Excluded inputs by default\n    excluded: 'input[type=button], input[type=submit], input[type=reset], input[type=hidden]',\n\n    // Stop validating field on highest priority failing constraint\n    priorityEnabled: true,\n\n    // ### Field only\n\n    // identifier used to group together inputs (e.g. radio buttons...)\n    multiple: null,\n\n    // identifier (or array of identifiers) used to validate only a select group of inputs\n    group: null,\n\n    // ### UI\n    // Enable\\Disable error messages\n    uiEnabled: true,\n\n    // Key events threshold before validation\n    validationThreshold: 3,\n\n    // Focused field on form validation error. 'first'|'last'|'none'\n    focus: 'first',\n\n    // `$.Event()` that will trigger validation. eg: `keyup`, `change`...\n    trigger: false,\n\n    // Class that would be added on every failing validation Parsley field\n    errorClass: 'parsley-error',\n\n    // Same for success validation\n    successClass: 'parsley-success',\n\n    // Return the `$element` that will receive these above success or error classes\n    // Could also be (and given directly from DOM) a valid selector like `'#div'`\n    classHandler: function classHandler(ParsleyField) {},\n\n    // Return the `$element` where errors will be appended\n    // Could also be (and given directly from DOM) a valid selector like `'#div'`\n    errorsContainer: function errorsContainer(ParsleyField) {},\n\n    // ul elem that would receive errors' list\n    errorsWrapper: '<ul class=\"parsley-errors-list\"></ul>',\n\n    // li elem that would receive error message\n    errorTemplate: '<li></li>'\n  };\n\n  var ParsleyAbstract = function ParsleyAbstract() {};\n\n  ParsleyAbstract.prototype = {\n    asyncSupport: true, // Deprecated\n\n    actualizeOptions: function actualizeOptions() {\n      ParsleyUtils__default.attr(this.$element, this.options.namespace, this.domOptions);\n      if (this.parent && this.parent.actualizeOptions) this.parent.actualizeOptions();\n      return this;\n    },\n\n    _resetOptions: function _resetOptions(initOptions) {\n      this.domOptions = ParsleyUtils__default.objectCreate(this.parent.options);\n      this.options = ParsleyUtils__default.objectCreate(this.domOptions);\n      // Shallow copy of ownProperties of initOptions:\n      for (var i in initOptions) {\n        if (initOptions.hasOwnProperty(i)) this.options[i] = initOptions[i];\n      }\n      this.actualizeOptions();\n    },\n\n    _listeners: null,\n\n    // Register a callback for the given event name.\n    // Callback is called with context as the first argument and the `this`.\n    // The context is the current parsley instance, or window.Parsley if global.\n    // A return value of `false` will interrupt the calls\n    on: function on(name, fn) {\n      this._listeners = this._listeners || {};\n      var queue = this._listeners[name] = this._listeners[name] || [];\n      queue.push(fn);\n\n      return this;\n    },\n\n    // Deprecated. Use `on` instead.\n    subscribe: function subscribe(name, fn) {\n      $.listenTo(this, name.toLowerCase(), fn);\n    },\n\n    // Unregister a callback (or all if none is given) for the given event name\n    off: function off(name, fn) {\n      var queue = this._listeners && this._listeners[name];\n      if (queue) {\n        if (!fn) {\n          delete this._listeners[name];\n        } else {\n          for (var i = queue.length; i--;) if (queue[i] === fn) queue.splice(i, 1);\n        }\n      }\n      return this;\n    },\n\n    // Deprecated. Use `off`\n    unsubscribe: function unsubscribe(name, fn) {\n      $.unsubscribeTo(this, name.toLowerCase());\n    },\n\n    // Trigger an event of the given name.\n    // A return value of `false` interrupts the callback chain.\n    // Returns false if execution was interrupted.\n    trigger: function trigger(name, target, extraArg) {\n      target = target || this;\n      var queue = this._listeners && this._listeners[name];\n      var result;\n      var parentResult;\n      if (queue) {\n        for (var i = queue.length; i--;) {\n          result = queue[i].call(target, target, extraArg);\n          if (result === false) return result;\n        }\n      }\n      if (this.parent) {\n        return this.parent.trigger(name, target, extraArg);\n      }\n      return true;\n    },\n\n    // Reset UI\n    reset: function reset() {\n      // Field case: just emit a reset event for UI\n      if ('ParsleyForm' !== this.__class__) return this._trigger('reset');\n\n      // Form case: emit a reset event for each field\n      for (var i = 0; i < this.fields.length; i++) this.fields[i]._trigger('reset');\n\n      this._trigger('reset');\n    },\n\n    // Destroy Parsley instance (+ UI)\n    destroy: function destroy() {\n      // Field case: emit destroy event to clean UI and then destroy stored instance\n      if ('ParsleyForm' !== this.__class__) {\n        this.$element.removeData('Parsley');\n        this.$element.removeData('ParsleyFieldMultiple');\n        this._trigger('destroy');\n\n        return;\n      }\n\n      // Form case: destroy all its fields and then destroy stored instance\n      for (var i = 0; i < this.fields.length; i++) this.fields[i].destroy();\n\n      this.$element.removeData('Parsley');\n      this._trigger('destroy');\n    },\n\n    asyncIsValid: function asyncIsValid() {\n      ParsleyUtils__default.warnOnce(\"asyncIsValid is deprecated; please use whenIsValid instead\");\n      return this.whenValid.apply(this, arguments);\n    },\n\n    _findRelated: function _findRelated() {\n      return this.options.multiple ? this.parent.$element.find('[' + this.options.namespace + 'multiple=\"' + this.options.multiple + '\"]') : this.$element;\n    }\n  };\n\n  var requirementConverters = {\n    string: function string(_string) {\n      return _string;\n    },\n    integer: function integer(string) {\n      if (isNaN(string)) throw 'Requirement is not an integer: \"' + string + '\"';\n      return parseInt(string, 10);\n    },\n    number: function number(string) {\n      if (isNaN(string)) throw 'Requirement is not a number: \"' + string + '\"';\n      return parseFloat(string);\n    },\n    reference: function reference(string) {\n      // Unused for now\n      var result = $(string);\n      if (result.length === 0) throw 'No such reference: \"' + string + '\"';\n      return result;\n    },\n    boolean: function boolean(string) {\n      return string !== 'false';\n    },\n    object: function object(string) {\n      return ParsleyUtils__default.deserializeValue(string);\n    },\n    regexp: function regexp(_regexp) {\n      var flags = '';\n\n      // Test if RegExp is literal, if not, nothing to be done, otherwise, we need to isolate flags and pattern\n      if (/^\\/.*\\/(?:[gimy]*)$/.test(_regexp)) {\n        // Replace the regexp literal string with the first match group: ([gimy]*)\n        // If no flag is present, this will be a blank string\n        flags = _regexp.replace(/.*\\/([gimy]*)$/, '$1');\n        // Again, replace the regexp literal string with the first match group:\n        // everything excluding the opening and closing slashes and the flags\n        _regexp = _regexp.replace(new RegExp('^/(.*?)/' + flags + '$'), '$1');\n      } else {\n        // Anchor regexp:\n        _regexp = '^' + _regexp + '$';\n      }\n      return new RegExp(_regexp, flags);\n    }\n  };\n\n  var convertArrayRequirement = function convertArrayRequirement(string, length) {\n    var m = string.match(/^\\s*\\[(.*)\\]\\s*$/);\n    if (!m) throw 'Requirement is not an array: \"' + string + '\"';\n    var values = m[1].split(',').map(ParsleyUtils__default.trimString);\n    if (values.length !== length) throw 'Requirement has ' + values.length + ' values when ' + length + ' are needed';\n    return values;\n  };\n\n  var convertRequirement = function convertRequirement(requirementType, string) {\n    var converter = requirementConverters[requirementType || 'string'];\n    if (!converter) throw 'Unknown requirement specification: \"' + requirementType + '\"';\n    return converter(string);\n  };\n\n  var convertExtraOptionRequirement = function convertExtraOptionRequirement(requirementSpec, string, extraOptionReader) {\n    var main = null;\n    var extra = {};\n    for (var key in requirementSpec) {\n      if (key) {\n        var value = extraOptionReader(key);\n        if ('string' === typeof value) value = convertRequirement(requirementSpec[key], value);\n        extra[key] = value;\n      } else {\n        main = convertRequirement(requirementSpec[key], string);\n      }\n    }\n    return [main, extra];\n  };\n\n  // A Validator needs to implement the methods `validate` and `parseRequirements`\n\n  var ParsleyValidator = function ParsleyValidator(spec) {\n    $.extend(true, this, spec);\n  };\n\n  ParsleyValidator.prototype = {\n    // Returns `true` iff the given `value` is valid according the given requirements.\n    validate: function validate(value, requirementFirstArg) {\n      if (this.fn) {\n        // Legacy style validator\n\n        if (arguments.length > 3) // If more args then value, requirement, instance...\n          requirementFirstArg = [].slice.call(arguments, 1, -1); // Skip first arg (value) and last (instance), combining the rest\n        return this.fn.call(this, value, requirementFirstArg);\n      }\n\n      if ($.isArray(value)) {\n        if (!this.validateMultiple) throw 'Validator `' + this.name + '` does not handle multiple values';\n        return this.validateMultiple.apply(this, arguments);\n      } else {\n        if (this.validateNumber) {\n          if (isNaN(value)) return false;\n          arguments[0] = parseFloat(arguments[0]);\n          return this.validateNumber.apply(this, arguments);\n        }\n        if (this.validateString) {\n          return this.validateString.apply(this, arguments);\n        }\n        throw 'Validator `' + this.name + '` only handles multiple values';\n      }\n    },\n\n    // Parses `requirements` into an array of arguments,\n    // according to `this.requirementType`\n    parseRequirements: function parseRequirements(requirements, extraOptionReader) {\n      if ('string' !== typeof requirements) {\n        // Assume requirement already parsed\n        // but make sure we return an array\n        return $.isArray(requirements) ? requirements : [requirements];\n      }\n      var type = this.requirementType;\n      if ($.isArray(type)) {\n        var values = convertArrayRequirement(requirements, type.length);\n        for (var i = 0; i < values.length; i++) values[i] = convertRequirement(type[i], values[i]);\n        return values;\n      } else if ($.isPlainObject(type)) {\n        return convertExtraOptionRequirement(type, requirements, extraOptionReader);\n      } else {\n        return [convertRequirement(type, requirements)];\n      }\n    },\n    // Defaults:\n    requirementType: 'string',\n\n    priority: 2\n\n  };\n\n  var ParsleyValidatorRegistry = function ParsleyValidatorRegistry(validators, catalog) {\n    this.__class__ = 'ParsleyValidatorRegistry';\n\n    // Default Parsley locale is en\n    this.locale = 'en';\n\n    this.init(validators || {}, catalog || {});\n  };\n\n  var typeRegexes = {\n    email: /^((([a-z]|\\d|[!#\\$%&'\\*\\+\\-\\/=\\?\\^_`{\\|}~]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])+(\\.([a-z]|\\d|[!#\\$%&'\\*\\+\\-\\/=\\?\\^_`{\\|}~]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])+)*)|((\\x22)((((\\x20|\\x09)*(\\x0d\\x0a))?(\\x20|\\x09)+)?(([\\x01-\\x08\\x0b\\x0c\\x0e-\\x1f\\x7f]|\\x21|[\\x23-\\x5b]|[\\x5d-\\x7e]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])|(\\\\([\\x01-\\x09\\x0b\\x0c\\x0d-\\x7f]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF]))))*(((\\x20|\\x09)*(\\x0d\\x0a))?(\\x20|\\x09)+)?(\\x22)))@((([a-z]|\\d|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])|(([a-z]|\\d|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])([a-z]|\\d|-|\\.|_|~|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])*([a-z]|\\d|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])))\\.)+(([a-z]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])|(([a-z]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])([a-z]|\\d|-|\\.|_|~|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])*([a-z]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])))$/i,\n\n    number: /^-?(?:(?:\\d+|\\d{1,3}(?:,\\d{3})+)+(?:\\.\\d+)?|(?:\\.\\d+)+)$/,\n\n    integer: /^-?\\d+$/,\n\n    digits: /^\\d+$/,\n\n    alphanum: /^\\w+$/i,\n\n    url: new RegExp(\"^\" +\n    // protocol identifier\n    \"(?:(?:https?|ftp)://)?\" + // ** mod: make scheme optional\n    // user:pass authentication\n    \"(?:\\\\S+(?::\\\\S*)?@)?\" + \"(?:\" +\n    // IP address exclusion\n    // private & local networks\n    // \"(?!(?:10|127)(?:\\\\.\\\\d{1,3}){3})\" +   // ** mod: allow local networks\n    // \"(?!(?:169\\\\.254|192\\\\.168)(?:\\\\.\\\\d{1,3}){2})\" +  // ** mod: allow local networks\n    // \"(?!172\\\\.(?:1[6-9]|2\\\\d|3[0-1])(?:\\\\.\\\\d{1,3}){2})\" +  // ** mod: allow local networks\n    // IP address dotted notation octets\n    // excludes loopback network 0.0.0.0\n    // excludes reserved space >= 224.0.0.0\n    // excludes network & broacast addresses\n    // (first & last IP address of each class)\n    \"(?:[1-9]\\\\d?|1\\\\d\\\\d|2[01]\\\\d|22[0-3])\" + \"(?:\\\\.(?:1?\\\\d{1,2}|2[0-4]\\\\d|25[0-5])){2}\" + \"(?:\\\\.(?:[1-9]\\\\d?|1\\\\d\\\\d|2[0-4]\\\\d|25[0-4]))\" + \"|\" +\n    // host name\n    '(?:(?:[a-z\\\\u00a1-\\\\uffff0-9]-*)*[a-z\\\\u00a1-\\\\uffff0-9]+)' +\n    // domain name\n    '(?:\\\\.(?:[a-z\\\\u00a1-\\\\uffff0-9]-*)*[a-z\\\\u00a1-\\\\uffff0-9]+)*' +\n    // TLD identifier\n    '(?:\\\\.(?:[a-z\\\\u00a1-\\\\uffff]{2,}))' + \")\" +\n    // port number\n    \"(?::\\\\d{2,5})?\" +\n    // resource path\n    \"(?:/\\\\S*)?\" + \"$\", 'i')\n  };\n  typeRegexes.range = typeRegexes.number;\n\n  ParsleyValidatorRegistry.prototype = {\n    init: function init(validators, catalog) {\n      this.catalog = catalog;\n      // Copy prototype's validators:\n      this.validators = $.extend({}, this.validators);\n\n      for (var name in validators) this.addValidator(name, validators[name].fn, validators[name].priority);\n\n      window.Parsley.trigger('parsley:validator:init');\n    },\n\n    // Set new messages locale if we have dictionary loaded in ParsleyConfig.i18n\n    setLocale: function setLocale(locale) {\n      if ('undefined' === typeof this.catalog[locale]) throw new Error(locale + ' is not available in the catalog');\n\n      this.locale = locale;\n\n      return this;\n    },\n\n    // Add a new messages catalog for a given locale. Set locale for this catalog if set === `true`\n    addCatalog: function addCatalog(locale, messages, set) {\n      if ('object' === typeof messages) this.catalog[locale] = messages;\n\n      if (true === set) return this.setLocale(locale);\n\n      return this;\n    },\n\n    // Add a specific message for a given constraint in a given locale\n    addMessage: function addMessage(locale, name, message) {\n      if ('undefined' === typeof this.catalog[locale]) this.catalog[locale] = {};\n\n      this.catalog[locale][name] = message;\n\n      return this;\n    },\n\n    // Add messages for a given locale\n    addMessages: function addMessages(locale, nameMessageObject) {\n      for (var name in nameMessageObject) this.addMessage(locale, name, nameMessageObject[name]);\n\n      return this;\n    },\n\n    // Add a new validator\n    //\n    //    addValidator('custom', {\n    //        requirementType: ['integer', 'integer'],\n    //        validateString: function(value, from, to) {},\n    //        priority: 22,\n    //        messages: {\n    //          en: \"Hey, that's no good\",\n    //          fr: \"Aye aye, pas bon du tout\",\n    //        }\n    //    })\n    //\n    // Old API was addValidator(name, function, priority)\n    //\n    addValidator: function addValidator(name, arg1, arg2) {\n      if (this.validators[name]) ParsleyUtils__default.warn('Validator \"' + name + '\" is already defined.');else if (ParsleyDefaults.hasOwnProperty(name)) {\n        ParsleyUtils__default.warn('\"' + name + '\" is a restricted keyword and is not a valid validator name.');\n        return;\n      }\n      return this._setValidator.apply(this, arguments);\n    },\n\n    updateValidator: function updateValidator(name, arg1, arg2) {\n      if (!this.validators[name]) {\n        ParsleyUtils__default.warn('Validator \"' + name + '\" is not already defined.');\n        return this.addValidator.apply(this, arguments);\n      }\n      return this._setValidator(this, arguments);\n    },\n\n    removeValidator: function removeValidator(name) {\n      if (!this.validators[name]) ParsleyUtils__default.warn('Validator \"' + name + '\" is not defined.');\n\n      delete this.validators[name];\n\n      return this;\n    },\n\n    _setValidator: function _setValidator(name, validator, priority) {\n      if ('object' !== typeof validator) {\n        // Old style validator, with `fn` and `priority`\n        validator = {\n          fn: validator,\n          priority: priority\n        };\n      }\n      if (!validator.validate) {\n        validator = new ParsleyValidator(validator);\n      }\n      this.validators[name] = validator;\n\n      for (var locale in validator.messages || {}) this.addMessage(locale, name, validator.messages[locale]);\n\n      return this;\n    },\n\n    getErrorMessage: function getErrorMessage(constraint) {\n      var message;\n\n      // Type constraints are a bit different, we have to match their requirements too to find right error message\n      if ('type' === constraint.name) {\n        var typeMessages = this.catalog[this.locale][constraint.name] || {};\n        message = typeMessages[constraint.requirements];\n      } else message = this.formatMessage(this.catalog[this.locale][constraint.name], constraint.requirements);\n\n      return message || this.catalog[this.locale].defaultMessage || this.catalog.en.defaultMessage;\n    },\n\n    // Kind of light `sprintf()` implementation\n    formatMessage: function formatMessage(string, parameters) {\n      if ('object' === typeof parameters) {\n        for (var i in parameters) string = this.formatMessage(string, parameters[i]);\n\n        return string;\n      }\n\n      return 'string' === typeof string ? string.replace(/%s/i, parameters) : '';\n    },\n\n    // Here is the Parsley default validators list.\n    // A validator is an object with the following key values:\n    //  - priority: an integer\n    //  - requirement: 'string' (default), 'integer', 'number', 'regexp' or an Array of these\n    //  - validateString, validateMultiple, validateNumber: functions returning `true`, `false` or a promise\n    // Alternatively, a validator can be a function that returns such an object\n    //\n    validators: {\n      notblank: {\n        validateString: function validateString(value) {\n          return (/\\S/.test(value)\n          );\n        },\n        priority: 2\n      },\n      required: {\n        validateMultiple: function validateMultiple(values) {\n          return values.length > 0;\n        },\n        validateString: function validateString(value) {\n          return (/\\S/.test(value)\n          );\n        },\n        priority: 512\n      },\n      type: {\n        validateString: function validateString(value, type) {\n          var regex = typeRegexes[type];\n          if (!regex) throw new Error('validator type `' + type + '` is not supported');\n          return regex.test(value);\n        },\n        priority: 256\n      },\n      pattern: {\n        validateString: function validateString(value, regexp) {\n          return regexp.test(value);\n        },\n        requirementType: 'regexp',\n        priority: 64\n      },\n      minlength: {\n        validateString: function validateString(value, requirement) {\n          return value.length >= requirement;\n        },\n        requirementType: 'integer',\n        priority: 30\n      },\n      maxlength: {\n        validateString: function validateString(value, requirement) {\n          return value.length <= requirement;\n        },\n        requirementType: 'integer',\n        priority: 30\n      },\n      length: {\n        validateString: function validateString(value, min, max) {\n          return value.length >= min && value.length <= max;\n        },\n        requirementType: ['integer', 'integer'],\n        priority: 30\n      },\n      mincheck: {\n        validateMultiple: function validateMultiple(values, requirement) {\n          return values.length >= requirement;\n        },\n        requirementType: 'integer',\n        priority: 30\n      },\n      maxcheck: {\n        validateMultiple: function validateMultiple(values, requirement) {\n          return values.length <= requirement;\n        },\n        requirementType: 'integer',\n        priority: 30\n      },\n      check: {\n        validateMultiple: function validateMultiple(values, min, max) {\n          return values.length >= min && values.length <= max;\n        },\n        requirementType: ['integer', 'integer'],\n        priority: 30\n      },\n      min: {\n        validateNumber: function validateNumber(value, requirement) {\n          return value >= requirement;\n        },\n        requirementType: 'number',\n        priority: 30\n      },\n      max: {\n        validateNumber: function validateNumber(value, requirement) {\n          return value <= requirement;\n        },\n        requirementType: 'number',\n        priority: 30\n      },\n      range: {\n        validateNumber: function validateNumber(value, min, max) {\n          return value >= min && value <= max;\n        },\n        requirementType: ['number', 'number'],\n        priority: 30\n      },\n      equalto: {\n        validateString: function validateString(value, refOrValue) {\n          var $reference = $(refOrValue);\n          if ($reference.length) return value === $reference.val();else return value === refOrValue;\n        },\n        priority: 256\n      }\n    }\n  };\n\n  var ParsleyUI = function ParsleyUI(options) {\n    this.__class__ = 'ParsleyUI';\n  };\n\n  ParsleyUI.prototype = {\n    listen: function listen() {\n      var _this = this;\n\n      window.Parsley.on('form:init', function (form) {\n        _this.setupForm(form);\n      }).on('field:init', function (field) {\n        _this.setupField(field);\n      }).on('field:validated', function (field) {\n        _this.reflow(field);\n      }).on('form:validated', function (form) {\n        _this.focus(form);\n      }).on('field:reset', function (field) {\n        _this.reset(field);\n      }).on('form:destroy', function (form) {\n        _this.destroy(form);\n      }).on('field:destroy', function (field) {\n        _this.destroy(field);\n      });\n\n      return this;\n    },\n\n    reflow: function reflow(fieldInstance) {\n      // If this field has not an active UI (case for multiples) don't bother doing something\n      if ('undefined' === typeof fieldInstance._ui || false === fieldInstance._ui.active) return;\n\n      // Diff between two validation results\n      var diff = this._diff(fieldInstance.validationResult, fieldInstance._ui.lastValidationResult);\n\n      // Then store current validation result for next reflow\n      fieldInstance._ui.lastValidationResult = fieldInstance.validationResult;\n\n      // Handle valid / invalid / none field class\n      this.manageStatusClass(fieldInstance);\n\n      // Add, remove, updated errors messages\n      this.manageErrorsMessages(fieldInstance, diff);\n\n      // Triggers impl\n      this.actualizeTriggers(fieldInstance);\n\n      // If field is not valid for the first time, bind keyup trigger to ease UX and quickly inform user\n      if ((diff.kept.length || diff.added.length) && true !== fieldInstance._ui.failedOnce) this.manageFailingFieldTrigger(fieldInstance);\n    },\n\n    // Returns an array of field's error message(s)\n    getErrorsMessages: function getErrorsMessages(fieldInstance) {\n      // No error message, field is valid\n      if (true === fieldInstance.validationResult) return [];\n\n      var messages = [];\n\n      for (var i = 0; i < fieldInstance.validationResult.length; i++) messages.push(fieldInstance.validationResult[i].errorMessage || this._getErrorMessage(fieldInstance, fieldInstance.validationResult[i].assert));\n\n      return messages;\n    },\n\n    manageStatusClass: function manageStatusClass(fieldInstance) {\n      if (fieldInstance.hasConstraints() && fieldInstance.needsValidation() && true === fieldInstance.validationResult) this._successClass(fieldInstance);else if (fieldInstance.validationResult.length > 0) this._errorClass(fieldInstance);else this._resetClass(fieldInstance);\n    },\n\n    manageErrorsMessages: function manageErrorsMessages(fieldInstance, diff) {\n      if ('undefined' !== typeof fieldInstance.options.errorsMessagesDisabled) return;\n\n      // Case where we have errorMessage option that configure an unique field error message, regardless failing validators\n      if ('undefined' !== typeof fieldInstance.options.errorMessage) {\n        if (diff.added.length || diff.kept.length) {\n          this._insertErrorWrapper(fieldInstance);\n\n          if (0 === fieldInstance._ui.$errorsWrapper.find('.parsley-custom-error-message').length) fieldInstance._ui.$errorsWrapper.append($(fieldInstance.options.errorTemplate).addClass('parsley-custom-error-message'));\n\n          return fieldInstance._ui.$errorsWrapper.addClass('filled').find('.parsley-custom-error-message').html(fieldInstance.options.errorMessage);\n        }\n\n        return fieldInstance._ui.$errorsWrapper.removeClass('filled').find('.parsley-custom-error-message').remove();\n      }\n\n      // Show, hide, update failing constraints messages\n      for (var i = 0; i < diff.removed.length; i++) this.removeError(fieldInstance, diff.removed[i].assert.name, true);\n\n      for (i = 0; i < diff.added.length; i++) this.addError(fieldInstance, diff.added[i].assert.name, diff.added[i].errorMessage, diff.added[i].assert, true);\n\n      for (i = 0; i < diff.kept.length; i++) this.updateError(fieldInstance, diff.kept[i].assert.name, diff.kept[i].errorMessage, diff.kept[i].assert, true);\n    },\n\n    // TODO: strange API here, intuitive for manual usage with addError(pslyInstance, 'foo', 'bar')\n    // but a little bit complex for above internal usage, with forced undefined parameter...\n    addError: function addError(fieldInstance, name, message, assert, doNotUpdateClass) {\n      this._insertErrorWrapper(fieldInstance);\n      fieldInstance._ui.$errorsWrapper.addClass('filled').append($(fieldInstance.options.errorTemplate).addClass('parsley-' + name).html(message || this._getErrorMessage(fieldInstance, assert)));\n\n      if (true !== doNotUpdateClass) this._errorClass(fieldInstance);\n    },\n\n    // Same as above\n    updateError: function updateError(fieldInstance, name, message, assert, doNotUpdateClass) {\n      fieldInstance._ui.$errorsWrapper.addClass('filled').find('.parsley-' + name).html(message || this._getErrorMessage(fieldInstance, assert));\n\n      if (true !== doNotUpdateClass) this._errorClass(fieldInstance);\n    },\n\n    // Same as above twice\n    removeError: function removeError(fieldInstance, name, doNotUpdateClass) {\n      fieldInstance._ui.$errorsWrapper.removeClass('filled').find('.parsley-' + name).remove();\n\n      // edge case possible here: remove a standard Parsley error that is still failing in fieldInstance.validationResult\n      // but highly improbable cuz' manually removing a well Parsley handled error makes no sense.\n      if (true !== doNotUpdateClass) this.manageStatusClass(fieldInstance);\n    },\n\n    focus: function focus(formInstance) {\n      formInstance._focusedField = null;\n\n      if (true === formInstance.validationResult || 'none' === formInstance.options.focus) return null;\n\n      for (var i = 0; i < formInstance.fields.length; i++) {\n        var field = formInstance.fields[i];\n        if (true !== field.validationResult && field.validationResult.length > 0 && 'undefined' === typeof field.options.noFocus) {\n          formInstance._focusedField = field.$element;\n          if ('first' === formInstance.options.focus) break;\n        }\n      }\n\n      if (null === formInstance._focusedField) return null;\n\n      return formInstance._focusedField.focus();\n    },\n\n    _getErrorMessage: function _getErrorMessage(fieldInstance, constraint) {\n      var customConstraintErrorMessage = constraint.name + 'Message';\n\n      if ('undefined' !== typeof fieldInstance.options[customConstraintErrorMessage]) return window.Parsley.formatMessage(fieldInstance.options[customConstraintErrorMessage], constraint.requirements);\n\n      return window.Parsley.getErrorMessage(constraint);\n    },\n\n    _diff: function _diff(newResult, oldResult, deep) {\n      var added = [];\n      var kept = [];\n\n      for (var i = 0; i < newResult.length; i++) {\n        var found = false;\n\n        for (var j = 0; j < oldResult.length; j++) if (newResult[i].assert.name === oldResult[j].assert.name) {\n          found = true;\n          break;\n        }\n\n        if (found) kept.push(newResult[i]);else added.push(newResult[i]);\n      }\n\n      return {\n        kept: kept,\n        added: added,\n        removed: !deep ? this._diff(oldResult, newResult, true).added : []\n      };\n    },\n\n    setupForm: function setupForm(formInstance) {\n      formInstance.$element.on('submit.Parsley', function (evt) {\n        formInstance.onSubmitValidate(evt);\n      });\n      formInstance.$element.on('click.Parsley', 'input[type=\"submit\"], button[type=\"submit\"]', function (evt) {\n        formInstance.onSubmitButton(evt);\n      });\n\n      // UI could be disabled\n      if (false === formInstance.options.uiEnabled) return;\n\n      formInstance.$element.attr('novalidate', '');\n    },\n\n    setupField: function setupField(fieldInstance) {\n      var _ui = { active: false };\n\n      // UI could be disabled\n      if (false === fieldInstance.options.uiEnabled) return;\n\n      _ui.active = true;\n\n      // Give field its Parsley id in DOM\n      fieldInstance.$element.attr(fieldInstance.options.namespace + 'id', fieldInstance.__id__);\n\n      /** Generate important UI elements and store them in fieldInstance **/\n      // $errorClassHandler is the $element that woul have parsley-error and parsley-success classes\n      _ui.$errorClassHandler = this._manageClassHandler(fieldInstance);\n\n      // $errorsWrapper is a div that would contain the various field errors, it will be appended into $errorsContainer\n      _ui.errorsWrapperId = 'parsley-id-' + (fieldInstance.options.multiple ? 'multiple-' + fieldInstance.options.multiple : fieldInstance.__id__);\n      _ui.$errorsWrapper = $(fieldInstance.options.errorsWrapper).attr('id', _ui.errorsWrapperId);\n\n      // ValidationResult UI storage to detect what have changed bwt two validations, and update DOM accordingly\n      _ui.lastValidationResult = [];\n      _ui.validationInformationVisible = false;\n\n      // Store it in fieldInstance for later\n      fieldInstance._ui = _ui;\n\n      // Bind triggers first time\n      this.actualizeTriggers(fieldInstance);\n    },\n\n    // Determine which element will have `parsley-error` and `parsley-success` classes\n    _manageClassHandler: function _manageClassHandler(fieldInstance) {\n      // An element selector could be passed through DOM with `data-parsley-class-handler=#foo`\n      if ('string' === typeof fieldInstance.options.classHandler && $(fieldInstance.options.classHandler).length) return $(fieldInstance.options.classHandler);\n\n      // Class handled could also be determined by function given in Parsley options\n      var $handler = fieldInstance.options.classHandler(fieldInstance);\n\n      // If this function returned a valid existing DOM element, go for it\n      if ('undefined' !== typeof $handler && $handler.length) return $handler;\n\n      // Otherwise, if simple element (input, texatrea, select...) it will perfectly host the classes\n      if (!fieldInstance.options.multiple || fieldInstance.$element.is('select')) return fieldInstance.$element;\n\n      // But if multiple element (radio, checkbox), that would be their parent\n      return fieldInstance.$element.parent();\n    },\n\n    _insertErrorWrapper: function _insertErrorWrapper(fieldInstance) {\n      var $errorsContainer;\n\n      // Nothing to do if already inserted\n      if (0 !== fieldInstance._ui.$errorsWrapper.parent().length) return fieldInstance._ui.$errorsWrapper.parent();\n\n      if ('string' === typeof fieldInstance.options.errorsContainer) {\n        if ($(fieldInstance.options.errorsContainer).length) return $(fieldInstance.options.errorsContainer).append(fieldInstance._ui.$errorsWrapper);else ParsleyUtils__default.warn('The errors container `' + fieldInstance.options.errorsContainer + '` does not exist in DOM');\n      } else if ('function' === typeof fieldInstance.options.errorsContainer) $errorsContainer = fieldInstance.options.errorsContainer(fieldInstance);\n\n      if ('undefined' !== typeof $errorsContainer && $errorsContainer.length) return $errorsContainer.append(fieldInstance._ui.$errorsWrapper);\n\n      var $from = fieldInstance.$element;\n      if (fieldInstance.options.multiple) $from = $from.parent();\n      return $from.after(fieldInstance._ui.$errorsWrapper);\n    },\n\n    actualizeTriggers: function actualizeTriggers(fieldInstance) {\n      var _this2 = this;\n\n      var $toBind = fieldInstance._findRelated();\n\n      // Remove Parsley events already binded on this field\n      $toBind.off('.Parsley');\n\n      // If no trigger is set, all good\n      if (false === fieldInstance.options.trigger) return;\n\n      var triggers = fieldInstance.options.trigger.replace(/^\\s+/g, '').replace(/\\s+$/g, '');\n\n      if ('' === triggers) return;\n\n      $toBind.on(triggers.split(' ').join('.Parsley ') + '.Parsley', function (event) {\n        _this2.eventValidate(fieldInstance, event);\n      });\n    },\n\n    eventValidate: function eventValidate(field, event) {\n      // For keyup, keypress, keydown... events that could be a little bit obstrusive\n      // do not validate if val length < min threshold on first validation. Once field have been validated once and info\n      // about success or failure have been displayed, always validate with this trigger to reflect every yalidation change.\n      if (/key/.test(event.type)) if (!field._ui.validationInformationVisible && field.getValue().length <= field.options.validationThreshold) return;\n\n      field.validate();\n    },\n\n    manageFailingFieldTrigger: function manageFailingFieldTrigger(fieldInstance) {\n      fieldInstance._ui.failedOnce = true;\n\n      // Radio and checkboxes fields must bind every field multiple\n      if (fieldInstance.options.multiple) fieldInstance._findRelated().each(function () {\n        if (!/change/i.test($(this).parsley().options.trigger || '')) $(this).on('change.ParsleyFailedOnce', function () {\n          fieldInstance.validate();\n        });\n      });\n\n      // Select case\n      if (fieldInstance.$element.is('select')) if (!/change/i.test(fieldInstance.options.trigger || '')) return fieldInstance.$element.on('change.ParsleyFailedOnce', function () {\n        fieldInstance.validate();\n      });\n\n      // All other inputs fields\n      if (!/keyup/i.test(fieldInstance.options.trigger || '')) return fieldInstance.$element.on('keyup.ParsleyFailedOnce', function () {\n        fieldInstance.validate();\n      });\n    },\n\n    reset: function reset(parsleyInstance) {\n      // Reset all event listeners\n      this.actualizeTriggers(parsleyInstance);\n      parsleyInstance.$element.off('.ParsleyFailedOnce');\n\n      // Nothing to do if UI never initialized for this field\n      if ('undefined' === typeof parsleyInstance._ui) return;\n\n      if ('ParsleyForm' === parsleyInstance.__class__) return;\n\n      // Reset all errors' li\n      parsleyInstance._ui.$errorsWrapper.removeClass('filled').children().remove();\n\n      // Reset validation class\n      this._resetClass(parsleyInstance);\n\n      // Reset validation flags and last validation result\n      parsleyInstance._ui.lastValidationResult = [];\n      parsleyInstance._ui.validationInformationVisible = false;\n      parsleyInstance._ui.failedOnce = false;\n    },\n\n    destroy: function destroy(parsleyInstance) {\n      this.reset(parsleyInstance);\n\n      if ('ParsleyForm' === parsleyInstance.__class__) return;\n\n      if ('undefined' !== typeof parsleyInstance._ui) parsleyInstance._ui.$errorsWrapper.remove();\n\n      delete parsleyInstance._ui;\n    },\n\n    _successClass: function _successClass(fieldInstance) {\n      fieldInstance._ui.validationInformationVisible = true;\n      fieldInstance._ui.$errorClassHandler.removeClass(fieldInstance.options.errorClass).addClass(fieldInstance.options.successClass);\n    },\n    _errorClass: function _errorClass(fieldInstance) {\n      fieldInstance._ui.validationInformationVisible = true;\n      fieldInstance._ui.$errorClassHandler.removeClass(fieldInstance.options.successClass).addClass(fieldInstance.options.errorClass);\n    },\n    _resetClass: function _resetClass(fieldInstance) {\n      fieldInstance._ui.$errorClassHandler.removeClass(fieldInstance.options.successClass).removeClass(fieldInstance.options.errorClass);\n    }\n  };\n\n  var ParsleyForm = function ParsleyForm(element, domOptions, options) {\n    this.__class__ = 'ParsleyForm';\n    this.__id__ = ParsleyUtils__default.generateID();\n\n    this.$element = $(element);\n    this.domOptions = domOptions;\n    this.options = options;\n    this.parent = window.Parsley;\n\n    this.fields = [];\n    this.validationResult = null;\n  };\n\n  var ParsleyForm__statusMapping = { pending: null, resolved: true, rejected: false };\n\n  ParsleyForm.prototype = {\n    onSubmitValidate: function onSubmitValidate(event) {\n      var _this3 = this;\n\n      // This is a Parsley generated submit event, do not validate, do not prevent, simply exit and keep normal behavior\n      if (true === event.parsley) return;\n\n      // If we didn't come here through a submit button, use the first one in the form\n      this._$submitSource = this._$submitSource || this.$element.find('input[type=\"submit\"], button[type=\"submit\"]').first();\n\n      if (this._$submitSource.is('[formnovalidate]')) {\n        this._$submitSource = null;\n        return;\n      }\n\n      // Because some validations might be asynchroneous,\n      // we cancel this submit and will fake it after validation.\n      event.stopImmediatePropagation();\n      event.preventDefault();\n\n      this.whenValidate(undefined, undefined, event).done(function () {\n        _this3._submit();\n      }).always(function () {\n        _this3._$submitSource = null;\n      });\n\n      return this;\n    },\n\n    onSubmitButton: function onSubmitButton(event) {\n      this._$submitSource = $(event.target);\n    },\n    // internal\n    // _submit submits the form, this time without going through the validations.\n    // Care must be taken to \"fake\" the actual submit button being clicked.\n    _submit: function _submit() {\n      if (false === this._trigger('submit')) return;\n      this.$element.find('.parsley_synthetic_submit_button').remove();\n      // Add submit button's data\n      if (this._$submitSource) {\n        $('<input class=\"parsley_synthetic_submit_button\" type=\"hidden\">').attr('name', this._$submitSource.attr('name')).attr('value', this._$submitSource.attr('value')).appendTo(this.$element);\n      }\n      //\n      this.$element.trigger($.extend($.Event('submit'), { parsley: true }));\n    },\n\n    // Performs validation on fields while triggering events.\n    // @returns `true` if al validations succeeds, `false`\n    // if a failure is immediately detected, or `null`\n    // if dependant on a promise.\n    // Prefer `whenValidate`.\n    validate: function validate(group, force, event) {\n      return ParsleyForm__statusMapping[this.whenValidate(group, force, event).state()];\n    },\n\n    whenValidate: function whenValidate(group, force, event) {\n      var _this4 = this;\n\n      this.submitEvent = event;\n      if (event) {\n        this.submitEvent.preventDefault = function () {\n          ParsleyUtils__default.warnOnce(\"Using `this.submitEvent.preventDefault()` is deprecated; instead, call `this.validationResult = false`\");\n          _this4.validationResult = false;\n        };\n      }\n      this.validationResult = true;\n\n      // fire validate event to eventually modify things before very validation\n      this._trigger('validate');\n\n      // Refresh form DOM options and form's fields that could have changed\n      this._refreshFields();\n\n      var promises = this._withoutReactualizingFormOptions(function () {\n        return $.map(_this4.fields, function (field) {\n          // do not validate a field if not the same as given validation group\n          if (!group || _this4._isFieldInGroup(field, group)) return field.whenValidate(force);\n        });\n      });\n\n      var promiseBasedOnValidationResult = function promiseBasedOnValidationResult() {\n        var r = $.Deferred();\n        if (false === _this4.validationResult) r.reject();\n        return r.resolve().promise();\n      };\n\n      return $.when.apply($, _toConsumableArray(promises)).done(function () {\n        _this4._trigger('success');\n      }).fail(function () {\n        _this4.validationResult = false;_this4._trigger('error');\n      }).always(function () {\n        _this4._trigger('validated');\n      }).pipe(promiseBasedOnValidationResult, promiseBasedOnValidationResult);\n    },\n\n    // Iterate over refreshed fields, and stop on first failure.\n    // Returns `true` if all fields are valid, `false` if a failure is detected\n    // or `null` if the result depends on an unresolved promise.\n    // Prefer using `whenValid` instead.\n    isValid: function isValid(group, force) {\n      return ParsleyForm__statusMapping[this.whenValid(group, force).state()];\n    },\n\n    // Iterate over refreshed fields and validate them.\n    // Returns a promise.\n    // A validation that immediately fails will interrupt the validations.\n    whenValid: function whenValid(group, force) {\n      var _this5 = this;\n\n      this._refreshFields();\n\n      var promises = this._withoutReactualizingFormOptions(function () {\n        return $.map(_this5.fields, function (field) {\n          // do not validate a field if not the same as given validation group\n          if (!group || _this5._isFieldInGroup(field, group)) return field.whenValid(force);\n        });\n      });\n      return $.when.apply($, _toConsumableArray(promises));\n    },\n\n    _isFieldInGroup: function _isFieldInGroup(field, group) {\n      if ($.isArray(field.options.group)) return -1 !== $.inArray(group, field.options.group);\n      return field.options.group === group;\n    },\n\n    _refreshFields: function _refreshFields() {\n      return this.actualizeOptions()._bindFields();\n    },\n\n    _bindFields: function _bindFields() {\n      var _this6 = this;\n\n      var oldFields = this.fields;\n\n      this.fields = [];\n      this.fieldsMappedById = {};\n\n      this._withoutReactualizingFormOptions(function () {\n        _this6.$element.find(_this6.options.inputs).not(_this6.options.excluded).each(function (_, element) {\n          var fieldInstance = new window.Parsley.Factory(element, {}, _this6);\n\n          // Only add valid and not excluded `ParsleyField` and `ParsleyFieldMultiple` children\n          if (('ParsleyField' === fieldInstance.__class__ || 'ParsleyFieldMultiple' === fieldInstance.__class__) && true !== fieldInstance.options.excluded) if ('undefined' === typeof _this6.fieldsMappedById[fieldInstance.__class__ + '-' + fieldInstance.__id__]) {\n            _this6.fieldsMappedById[fieldInstance.__class__ + '-' + fieldInstance.__id__] = fieldInstance;\n            _this6.fields.push(fieldInstance);\n          }\n        });\n\n        $(oldFields).not(_this6.fields).each(function (_, field) {\n          field._trigger('reset');\n        });\n      });\n      return this;\n    },\n\n    // Internal only.\n    // Looping on a form's fields to do validation or similar\n    // will trigger reactualizing options on all of them, which\n    // in turn will reactualize the form's options.\n    // To avoid calling actualizeOptions so many times on the form\n    // for nothing, _withoutReactualizingFormOptions temporarily disables\n    // the method actualizeOptions on this form while `fn` is called.\n    _withoutReactualizingFormOptions: function _withoutReactualizingFormOptions(fn) {\n      var oldActualizeOptions = this.actualizeOptions;\n      this.actualizeOptions = function () {\n        return this;\n      };\n      var result = fn();\n      this.actualizeOptions = oldActualizeOptions;\n      return result;\n    },\n\n    // Internal only.\n    // Shortcut to trigger an event\n    // Returns true iff event is not interrupted and default not prevented.\n    _trigger: function _trigger(eventName) {\n      return this.trigger('form:' + eventName);\n    }\n\n  };\n\n  var ConstraintFactory = function ConstraintFactory(parsleyField, name, requirements, priority, isDomConstraint) {\n    if (!/ParsleyField/.test(parsleyField.__class__)) throw new Error('ParsleyField or ParsleyFieldMultiple instance expected');\n\n    var validatorSpec = window.Parsley._validatorRegistry.validators[name];\n    var validator = new ParsleyValidator(validatorSpec);\n\n    $.extend(this, {\n      validator: validator,\n      name: name,\n      requirements: requirements,\n      priority: priority || parsleyField.options[name + 'Priority'] || validator.priority,\n      isDomConstraint: true === isDomConstraint\n    });\n    this._parseRequirements(parsleyField.options);\n  };\n\n  var capitalize = function capitalize(str) {\n    var cap = str[0].toUpperCase();\n    return cap + str.slice(1);\n  };\n\n  ConstraintFactory.prototype = {\n    validate: function validate(value, instance) {\n      var args = this.requirementList.slice(0); // Make copy\n      args.unshift(value);\n      args.push(instance);\n      return this.validator.validate.apply(this.validator, args);\n    },\n\n    _parseRequirements: function _parseRequirements(options) {\n      var _this7 = this;\n\n      this.requirementList = this.validator.parseRequirements(this.requirements, function (key) {\n        return options[_this7.name + capitalize(key)];\n      });\n    }\n  };\n\n  var ParsleyField = function ParsleyField(field, domOptions, options, parsleyFormInstance) {\n    this.__class__ = 'ParsleyField';\n    this.__id__ = ParsleyUtils__default.generateID();\n\n    this.$element = $(field);\n\n    // Set parent if we have one\n    if ('undefined' !== typeof parsleyFormInstance) {\n      this.parent = parsleyFormInstance;\n    }\n\n    this.options = options;\n    this.domOptions = domOptions;\n\n    // Initialize some properties\n    this.constraints = [];\n    this.constraintsByName = {};\n    this.validationResult = [];\n\n    // Bind constraints\n    this._bindConstraints();\n  };\n\n  var parsley_field__statusMapping = { pending: null, resolved: true, rejected: false };\n\n  ParsleyField.prototype = {\n    // # Public API\n    // Validate field and trigger some events for mainly `ParsleyUI`\n    // @returns `true`, an array of the validators that failed, or\n    // `null` if validation is not finished. Prefer using whenValidate\n    validate: function validate(force) {\n      var promise = this.whenValidate(force);\n      switch (promise.state()) {\n        case 'pending':\n          return null;\n        case 'resolved':\n          return true;\n        case 'rejected':\n          return this.validationResult;\n      }\n    },\n\n    // Validate field and trigger some events for mainly `ParsleyUI`\n    // @returns a promise that succeeds only when all validations do.\n    whenValidate: function whenValidate(force) {\n      var _this8 = this;\n\n      this.value = this.getValue();\n\n      // Field Validate event. `this.value` could be altered for custom needs\n      this._trigger('validate');\n\n      return this.whenValid(force, this.value).done(function () {\n        _this8._trigger('success');\n      }).fail(function () {\n        _this8._trigger('error');\n      }).always(function () {\n        _this8._trigger('validated');\n      });\n    },\n\n    hasConstraints: function hasConstraints() {\n      return 0 !== this.constraints.length;\n    },\n\n    // An empty optional field does not need validation\n    needsValidation: function needsValidation(value) {\n      if ('undefined' === typeof value) value = this.getValue();\n\n      // If a field is empty and not required, it is valid\n      // Except if `data-parsley-validate-if-empty` explicitely added, useful for some custom validators\n      if (!value.length && !this._isRequired() && 'undefined' === typeof this.options.validateIfEmpty) return false;\n\n      return true;\n    },\n\n    // Just validate field. Do not trigger any event.\n    // Returns `true` iff all constraints pass, `false` if there are failures,\n    // or `null` if the result can not be determined yet (depends on a promise)\n    // See also `whenValid`.\n    isValid: function isValid(force, value) {\n      return parsley_field__statusMapping[this.whenValid(force, value).state()];\n    },\n\n    // Just validate field. Do not trigger any event.\n    // @returns a promise that succeeds only when all validations do.\n    // The argument `force` is optional, defaults to `false`.\n    // The argument `value` is optional. If given, it will be validated instead of the value of the input.\n    whenValid: function whenValid(force, value) {\n      var _this9 = this;\n\n      // Recompute options and rebind constraints to have latest changes\n      this.refreshConstraints();\n      this.validationResult = true;\n\n      // A field without constraint is valid\n      if (!this.hasConstraints()) return $.when();\n\n      // Make `force` argument optional\n      if ('boolean' !== typeof force && 'undefined' === typeof value) {\n        value = force;\n        force = false;\n      }\n      // Value could be passed as argument, needed to add more power to 'parsley:field:validate'\n      if ('undefined' === typeof value || null === value) value = this.getValue();\n\n      if (!this.needsValidation(value) && true !== force) return $.when();\n\n      var groupedConstraints = this._getGroupedConstraints();\n      var promises = [];\n      $.each(groupedConstraints, function (_, constraints) {\n        // Process one group of constraints at a time, we validate the constraints\n        // and combine the promises together.\n        var promise = $.when.apply($, _toConsumableArray($.map(constraints, function (constraint) {\n          return _this9._validateConstraint(value, constraint);\n        })));\n        promises.push(promise);\n        if (promise.state() === 'rejected') return false; // Interrupt processing if a group has already failed\n      });\n      return $.when.apply($, promises);\n    },\n\n    // @returns a promise\n    _validateConstraint: function _validateConstraint(value, constraint) {\n      var _this10 = this;\n\n      var result = constraint.validate(value, this);\n      // Map false to a failed promise\n      if (false === result) result = $.Deferred().reject();\n      // Make sure we return a promise and that we record failures\n      return $.when(result).fail(function (errorMessage) {\n        if (true === _this10.validationResult) _this10.validationResult = [];\n        _this10.validationResult.push({\n          assert: constraint,\n          errorMessage: 'string' === typeof errorMessage && errorMessage\n        });\n      });\n    },\n\n    // @returns Parsley field computed value that could be overrided or configured in DOM\n    getValue: function getValue() {\n      var value;\n\n      // Value could be overriden in DOM or with explicit options\n      if ('function' === typeof this.options.value) value = this.options.value(this);else if ('undefined' !== typeof this.options.value) value = this.options.value;else value = this.$element.val();\n\n      // Handle wrong DOM or configurations\n      if ('undefined' === typeof value || null === value) return '';\n\n      return this._handleWhitespace(value);\n    },\n\n    // Actualize options that could have change since previous validation\n    // Re-bind accordingly constraints (could be some new, removed or updated)\n    refreshConstraints: function refreshConstraints() {\n      return this.actualizeOptions()._bindConstraints();\n    },\n\n    /**\n    * Add a new constraint to a field\n    *\n    * @param {String}   name\n    * @param {Mixed}    requirements      optional\n    * @param {Number}   priority          optional\n    * @param {Boolean}  isDomConstraint   optional\n    */\n    addConstraint: function addConstraint(name, requirements, priority, isDomConstraint) {\n\n      if (window.Parsley._validatorRegistry.validators[name]) {\n        var constraint = new ConstraintFactory(this, name, requirements, priority, isDomConstraint);\n\n        // if constraint already exist, delete it and push new version\n        if ('undefined' !== this.constraintsByName[constraint.name]) this.removeConstraint(constraint.name);\n\n        this.constraints.push(constraint);\n        this.constraintsByName[constraint.name] = constraint;\n      }\n\n      return this;\n    },\n\n    // Remove a constraint\n    removeConstraint: function removeConstraint(name) {\n      for (var i = 0; i < this.constraints.length; i++) if (name === this.constraints[i].name) {\n        this.constraints.splice(i, 1);\n        break;\n      }\n      delete this.constraintsByName[name];\n      return this;\n    },\n\n    // Update a constraint (Remove + re-add)\n    updateConstraint: function updateConstraint(name, parameters, priority) {\n      return this.removeConstraint(name).addConstraint(name, parameters, priority);\n    },\n\n    // # Internals\n\n    // Internal only.\n    // Bind constraints from config + options + DOM\n    _bindConstraints: function _bindConstraints() {\n      var constraints = [];\n      var constraintsByName = {};\n\n      // clean all existing DOM constraints to only keep javascript user constraints\n      for (var i = 0; i < this.constraints.length; i++) if (false === this.constraints[i].isDomConstraint) {\n        constraints.push(this.constraints[i]);\n        constraintsByName[this.constraints[i].name] = this.constraints[i];\n      }\n\n      this.constraints = constraints;\n      this.constraintsByName = constraintsByName;\n\n      // then re-add Parsley DOM-API constraints\n      for (var name in this.options) this.addConstraint(name, this.options[name], undefined, true);\n\n      // finally, bind special HTML5 constraints\n      return this._bindHtml5Constraints();\n    },\n\n    // Internal only.\n    // Bind specific HTML5 constraints to be HTML5 compliant\n    _bindHtml5Constraints: function _bindHtml5Constraints() {\n      // html5 required\n      if (this.$element.hasClass('required') || this.$element.attr('required')) this.addConstraint('required', true, undefined, true);\n\n      // html5 pattern\n      if ('string' === typeof this.$element.attr('pattern')) this.addConstraint('pattern', this.$element.attr('pattern'), undefined, true);\n\n      // range\n      if ('undefined' !== typeof this.$element.attr('min') && 'undefined' !== typeof this.$element.attr('max')) this.addConstraint('range', [this.$element.attr('min'), this.$element.attr('max')], undefined, true);\n\n      // HTML5 min\n      else if ('undefined' !== typeof this.$element.attr('min')) this.addConstraint('min', this.$element.attr('min'), undefined, true);\n\n        // HTML5 max\n        else if ('undefined' !== typeof this.$element.attr('max')) this.addConstraint('max', this.$element.attr('max'), undefined, true);\n\n      // length\n      if ('undefined' !== typeof this.$element.attr('minlength') && 'undefined' !== typeof this.$element.attr('maxlength')) this.addConstraint('length', [this.$element.attr('minlength'), this.$element.attr('maxlength')], undefined, true);\n\n      // HTML5 minlength\n      else if ('undefined' !== typeof this.$element.attr('minlength')) this.addConstraint('minlength', this.$element.attr('minlength'), undefined, true);\n\n        // HTML5 maxlength\n        else if ('undefined' !== typeof this.$element.attr('maxlength')) this.addConstraint('maxlength', this.$element.attr('maxlength'), undefined, true);\n\n      // html5 types\n      var type = this.$element.attr('type');\n\n      if ('undefined' === typeof type) return this;\n\n      // Small special case here for HTML5 number: integer validator if step attribute is undefined or an integer value, number otherwise\n      if ('number' === type) {\n        if ('undefined' === typeof this.$element.attr('step') || 0 === parseFloat(this.$element.attr('step')) % 1) {\n          return this.addConstraint('type', 'integer', undefined, true);\n        } else {\n          return this.addConstraint('type', 'number', undefined, true);\n        }\n        // Regular other HTML5 supported types\n      } else if (/^(email|url|range)$/i.test(type)) {\n          return this.addConstraint('type', type, undefined, true);\n        }\n      return this;\n    },\n\n    // Internal only.\n    // Field is required if have required constraint without `false` value\n    _isRequired: function _isRequired() {\n      if ('undefined' === typeof this.constraintsByName.required) return false;\n\n      return false !== this.constraintsByName.required.requirements;\n    },\n\n    // Internal only.\n    // Shortcut to trigger an event\n    _trigger: function _trigger(eventName) {\n      return this.trigger('field:' + eventName);\n    },\n\n    // Internal only\n    // Handles whitespace in a value\n    // Use `data-parsley-whitespace=\"squish\"` to auto squish input value\n    // Use `data-parsley-whitespace=\"trim\"` to auto trim input value\n    _handleWhitespace: function _handleWhitespace(value) {\n      if (true === this.options.trimValue) ParsleyUtils__default.warnOnce('data-parsley-trim-value=\"true\" is deprecated, please use data-parsley-whitespace=\"trim\"');\n\n      if ('squish' === this.options.whitespace) value = value.replace(/\\s{2,}/g, ' ');\n\n      if ('trim' === this.options.whitespace || 'squish' === this.options.whitespace || true === this.options.trimValue) value = ParsleyUtils__default.trimString(value);\n\n      return value;\n    },\n\n    // Internal only.\n    // Returns the constraints, grouped by descending priority.\n    // The result is thus an array of arrays of constraints.\n    _getGroupedConstraints: function _getGroupedConstraints() {\n      if (false === this.options.priorityEnabled) return [this.constraints];\n\n      var groupedConstraints = [];\n      var index = {};\n\n      // Create array unique of priorities\n      for (var i = 0; i < this.constraints.length; i++) {\n        var p = this.constraints[i].priority;\n        if (!index[p]) groupedConstraints.push(index[p] = []);\n        index[p].push(this.constraints[i]);\n      }\n      // Sort them by priority DESC\n      groupedConstraints.sort(function (a, b) {\n        return b[0].priority - a[0].priority;\n      });\n\n      return groupedConstraints;\n    }\n\n  };\n\n  var parsley_field = ParsleyField;\n\n  var ParsleyMultiple = function ParsleyMultiple() {\n    this.__class__ = 'ParsleyFieldMultiple';\n  };\n\n  ParsleyMultiple.prototype = {\n    // Add new `$element` sibling for multiple field\n    addElement: function addElement($element) {\n      this.$elements.push($element);\n\n      return this;\n    },\n\n    // See `ParsleyField.refreshConstraints()`\n    refreshConstraints: function refreshConstraints() {\n      var fieldConstraints;\n\n      this.constraints = [];\n\n      // Select multiple special treatment\n      if (this.$element.is('select')) {\n        this.actualizeOptions()._bindConstraints();\n\n        return this;\n      }\n\n      // Gather all constraints for each input in the multiple group\n      for (var i = 0; i < this.$elements.length; i++) {\n\n        // Check if element have not been dynamically removed since last binding\n        if (!$('html').has(this.$elements[i]).length) {\n          this.$elements.splice(i, 1);\n          continue;\n        }\n\n        fieldConstraints = this.$elements[i].data('ParsleyFieldMultiple').refreshConstraints().constraints;\n\n        for (var j = 0; j < fieldConstraints.length; j++) this.addConstraint(fieldConstraints[j].name, fieldConstraints[j].requirements, fieldConstraints[j].priority, fieldConstraints[j].isDomConstraint);\n      }\n\n      return this;\n    },\n\n    // See `ParsleyField.getValue()`\n    getValue: function getValue() {\n      // Value could be overriden in DOM\n      if ('function' === typeof this.options.value) value = this.options.value(this);else if ('undefined' !== typeof this.options.value) return this.options.value;\n\n      // Radio input case\n      if (this.$element.is('input[type=radio]')) return this._findRelated().filter(':checked').val() || '';\n\n      // checkbox input case\n      if (this.$element.is('input[type=checkbox]')) {\n        var values = [];\n\n        this._findRelated().filter(':checked').each(function () {\n          values.push($(this).val());\n        });\n\n        return values;\n      }\n\n      // Select multiple case\n      if (this.$element.is('select') && null === this.$element.val()) return [];\n\n      // Default case that should never happen\n      return this.$element.val();\n    },\n\n    _init: function _init() {\n      this.$elements = [this.$element];\n\n      return this;\n    }\n  };\n\n  var ParsleyFactory = function ParsleyFactory(element, options, parsleyFormInstance) {\n    this.$element = $(element);\n\n    // If the element has already been bound, returns its saved Parsley instance\n    var savedparsleyFormInstance = this.$element.data('Parsley');\n    if (savedparsleyFormInstance) {\n\n      // If the saved instance has been bound without a ParsleyForm parent and there is one given in this call, add it\n      if ('undefined' !== typeof parsleyFormInstance && savedparsleyFormInstance.parent === window.Parsley) {\n        savedparsleyFormInstance.parent = parsleyFormInstance;\n        savedparsleyFormInstance._resetOptions(savedparsleyFormInstance.options);\n      }\n\n      return savedparsleyFormInstance;\n    }\n\n    // Parsley must be instantiated with a DOM element or jQuery $element\n    if (!this.$element.length) throw new Error('You must bind Parsley on an existing element.');\n\n    if ('undefined' !== typeof parsleyFormInstance && 'ParsleyForm' !== parsleyFormInstance.__class__) throw new Error('Parent instance must be a ParsleyForm instance');\n\n    this.parent = parsleyFormInstance || window.Parsley;\n    return this.init(options);\n  };\n\n  ParsleyFactory.prototype = {\n    init: function init(options) {\n      this.__class__ = 'Parsley';\n      this.__version__ = '@@version';\n      this.__id__ = ParsleyUtils__default.generateID();\n\n      // Pre-compute options\n      this._resetOptions(options);\n\n      // A ParsleyForm instance is obviously a `<form>` element but also every node that is not an input and has the `data-parsley-validate` attribute\n      if (this.$element.is('form') || ParsleyUtils__default.checkAttr(this.$element, this.options.namespace, 'validate') && !this.$element.is(this.options.inputs)) return this.bind('parsleyForm');\n\n      // Every other element is bound as a `ParsleyField` or `ParsleyFieldMultiple`\n      return this.isMultiple() ? this.handleMultiple() : this.bind('parsleyField');\n    },\n\n    isMultiple: function isMultiple() {\n      return this.$element.is('input[type=radio], input[type=checkbox]') || this.$element.is('select') && 'undefined' !== typeof this.$element.attr('multiple');\n    },\n\n    // Multiples fields are a real nightmare :(\n    // Maybe some refactoring would be appreciated here...\n    handleMultiple: function handleMultiple() {\n      var _this11 = this;\n\n      var name;\n      var multiple;\n      var parsleyMultipleInstance;\n\n      // Handle multiple name\n      if (this.options.multiple) ; // We already have our 'multiple' identifier\n      else if ('undefined' !== typeof this.$element.attr('name') && this.$element.attr('name').length) this.options.multiple = name = this.$element.attr('name');else if ('undefined' !== typeof this.$element.attr('id') && this.$element.attr('id').length) this.options.multiple = this.$element.attr('id');\n\n      // Special select multiple input\n      if (this.$element.is('select') && 'undefined' !== typeof this.$element.attr('multiple')) {\n        this.options.multiple = this.options.multiple || this.__id__;\n        return this.bind('parsleyFieldMultiple');\n\n        // Else for radio / checkboxes, we need a `name` or `data-parsley-multiple` to properly bind it\n      } else if (!this.options.multiple) {\n          ParsleyUtils__default.warn('To be bound by Parsley, a radio, a checkbox and a multiple select input must have either a name or a multiple option.', this.$element);\n          return this;\n        }\n\n      // Remove special chars\n      this.options.multiple = this.options.multiple.replace(/(:|\\.|\\[|\\]|\\{|\\}|\\$)/g, '');\n\n      // Add proper `data-parsley-multiple` to siblings if we have a valid multiple name\n      if ('undefined' !== typeof name) {\n        $('input[name=\"' + name + '\"]').each(function (i, input) {\n          if ($(input).is('input[type=radio], input[type=checkbox]')) $(input).attr(_this11.options.namespace + 'multiple', _this11.options.multiple);\n        });\n      }\n\n      // Check here if we don't already have a related multiple instance saved\n      var $previouslyRelated = this._findRelated();\n      for (var i = 0; i < $previouslyRelated.length; i++) {\n        parsleyMultipleInstance = $($previouslyRelated.get(i)).data('Parsley');\n        if ('undefined' !== typeof parsleyMultipleInstance) {\n\n          if (!this.$element.data('ParsleyFieldMultiple')) {\n            parsleyMultipleInstance.addElement(this.$element);\n          }\n\n          break;\n        }\n      }\n\n      // Create a secret ParsleyField instance for every multiple field. It will be stored in `data('ParsleyFieldMultiple')`\n      // And will be useful later to access classic `ParsleyField` stuff while being in a `ParsleyFieldMultiple` instance\n      this.bind('parsleyField', true);\n\n      return parsleyMultipleInstance || this.bind('parsleyFieldMultiple');\n    },\n\n    // Return proper `ParsleyForm`, `ParsleyField` or `ParsleyFieldMultiple`\n    bind: function bind(type, doNotStore) {\n      var parsleyInstance;\n\n      switch (type) {\n        case 'parsleyForm':\n          parsleyInstance = $.extend(new ParsleyForm(this.$element, this.domOptions, this.options), window.ParsleyExtend)._bindFields();\n          break;\n        case 'parsleyField':\n          parsleyInstance = $.extend(new parsley_field(this.$element, this.domOptions, this.options, this.parent), window.ParsleyExtend);\n          break;\n        case 'parsleyFieldMultiple':\n          parsleyInstance = $.extend(new parsley_field(this.$element, this.domOptions, this.options, this.parent), new ParsleyMultiple(), window.ParsleyExtend)._init();\n          break;\n        default:\n          throw new Error(type + 'is not a supported Parsley type');\n      }\n\n      if (this.options.multiple) ParsleyUtils__default.setAttr(this.$element, this.options.namespace, 'multiple', this.options.multiple);\n\n      if ('undefined' !== typeof doNotStore) {\n        this.$element.data('ParsleyFieldMultiple', parsleyInstance);\n\n        return parsleyInstance;\n      }\n\n      // Store the freshly bound instance in a DOM element for later access using jQuery `data()`\n      this.$element.data('Parsley', parsleyInstance);\n\n      // Tell the world we have a new ParsleyForm or ParsleyField instance!\n      parsleyInstance._trigger('init');\n\n      return parsleyInstance;\n    }\n  };\n\n  var vernums = $.fn.jquery.split('.');\n  if (parseInt(vernums[0]) <= 1 && parseInt(vernums[1]) < 8) {\n    throw \"The loaded version of jQuery is too old. Please upgrade to 1.8.x or better.\";\n  }\n  if (!vernums.forEach) {\n    ParsleyUtils__default.warn('Parsley requires ES5 to run properly. Please include https://github.com/es-shims/es5-shim');\n  }\n  // Inherit `on`, `off` & `trigger` to Parsley:\n  var Parsley = $.extend(new ParsleyAbstract(), {\n    $element: $(document),\n    actualizeOptions: null,\n    _resetOptions: null,\n    Factory: ParsleyFactory,\n    version: '@@version'\n  });\n\n  // Supplement ParsleyField and Form with ParsleyAbstract\n  // This way, the constructors will have access to those methods\n  $.extend(parsley_field.prototype, ParsleyAbstract.prototype);\n  $.extend(ParsleyForm.prototype, ParsleyAbstract.prototype);\n  // Inherit actualizeOptions and _resetOptions:\n  $.extend(ParsleyFactory.prototype, ParsleyAbstract.prototype);\n\n  // ### jQuery API\n  // `$('.elem').parsley(options)` or `$('.elem').psly(options)`\n  $.fn.parsley = $.fn.psly = function (options) {\n    if (this.length > 1) {\n      var instances = [];\n\n      this.each(function () {\n        instances.push($(this).parsley(options));\n      });\n\n      return instances;\n    }\n\n    // Return undefined if applied to non existing DOM element\n    if (!$(this).length) {\n      ParsleyUtils__default.warn('You must bind Parsley on an existing element.');\n\n      return;\n    }\n\n    return new ParsleyFactory(this, options);\n  };\n\n  // ### ParsleyField and ParsleyForm extension\n  // Ensure the extension is now defined if it wasn't previously\n  if ('undefined' === typeof window.ParsleyExtend) window.ParsleyExtend = {};\n\n  // ### Parsley config\n  // Inherit from ParsleyDefault, and copy over any existing values\n  Parsley.options = $.extend(ParsleyUtils__default.objectCreate(ParsleyDefaults), window.ParsleyConfig);\n  window.ParsleyConfig = Parsley.options; // Old way of accessing global options\n\n  // ### Globals\n  window.Parsley = window.psly = Parsley;\n  window.ParsleyUtils = ParsleyUtils__default;\n\n  // ### Define methods that forward to the registry, and deprecate all access except through window.Parsley\n  var registry = window.Parsley._validatorRegistry = new ParsleyValidatorRegistry(window.ParsleyConfig.validators, window.ParsleyConfig.i18n);\n  window.ParsleyValidator = {};\n  $.each('setLocale addCatalog addMessage addMessages getErrorMessage formatMessage addValidator updateValidator removeValidator'.split(' '), function (i, method) {\n    window.Parsley[method] = $.proxy(registry, method);\n    window.ParsleyValidator[method] = function () {\n      var _window$Parsley;\n\n      ParsleyUtils__default.warnOnce('Accessing the method \\'' + method + '\\' through ParsleyValidator is deprecated. Simply call \\'window.Parsley.' + method + '(...)\\'');\n      return (_window$Parsley = window.Parsley)[method].apply(_window$Parsley, arguments);\n    };\n  });\n\n  // ### ParsleyUI\n  // UI is a separate class that only listens to some events and then modifies the DOM accordingly\n  // Could be overriden by defining a `window.ParsleyConfig.ParsleyUI` appropriate class (with `listen()` method basically)\n  window.ParsleyUI = 'function' === typeof window.ParsleyConfig.ParsleyUI ? new window.ParsleyConfig.ParsleyUI().listen() : new ParsleyUI().listen();\n\n  // ### PARSLEY auto-binding\n  // Prevent it by setting `ParsleyConfig.autoBind` to `false`\n  if (false !== window.ParsleyConfig.autoBind) {\n    $(function () {\n      // Works only on `data-parsley-validate`.\n      if ($('[data-parsley-validate]').length) $('[data-parsley-validate]').parsley();\n    });\n  }\n\n  var o = $({});\n  var deprecated = function deprecated() {\n    ParsleyUtils__default.warnOnce(\"Parsley's pubsub module is deprecated; use the 'on' and 'off' methods on parsley instances or window.Parsley\");\n  };\n\n  // Returns an event handler that calls `fn` with the arguments it expects\n  function adapt(fn, context) {\n    // Store to allow unbinding\n    if (!fn.parsleyAdaptedCallback) {\n      fn.parsleyAdaptedCallback = function () {\n        var args = Array.prototype.slice.call(arguments, 0);\n        args.unshift(this);\n        fn.apply(context || o, args);\n      };\n    }\n    return fn.parsleyAdaptedCallback;\n  }\n\n  var eventPrefix = 'parsley:';\n  // Converts 'parsley:form:validate' into 'form:validate'\n  function eventName(name) {\n    if (name.lastIndexOf(eventPrefix, 0) === 0) return name.substr(eventPrefix.length);\n    return name;\n  }\n\n  // $.listen is deprecated. Use Parsley.on instead.\n  $.listen = function (name, callback) {\n    var context;\n    deprecated();\n    if ('object' === typeof arguments[1] && 'function' === typeof arguments[2]) {\n      context = arguments[1];\n      callback = arguments[2];\n    }\n\n    if ('function' !== typeof callback) throw new Error('Wrong parameters');\n\n    window.Parsley.on(eventName(name), adapt(callback, context));\n  };\n\n  $.listenTo = function (instance, name, fn) {\n    deprecated();\n    if (!(instance instanceof parsley_field) && !(instance instanceof ParsleyForm)) throw new Error('Must give Parsley instance');\n\n    if ('string' !== typeof name || 'function' !== typeof fn) throw new Error('Wrong parameters');\n\n    instance.on(eventName(name), adapt(fn));\n  };\n\n  $.unsubscribe = function (name, fn) {\n    deprecated();\n    if ('string' !== typeof name || 'function' !== typeof fn) throw new Error('Wrong arguments');\n    window.Parsley.off(eventName(name), fn.parsleyAdaptedCallback);\n  };\n\n  $.unsubscribeTo = function (instance, name) {\n    deprecated();\n    if (!(instance instanceof parsley_field) && !(instance instanceof ParsleyForm)) throw new Error('Must give Parsley instance');\n    instance.off(eventName(name));\n  };\n\n  $.unsubscribeAll = function (name) {\n    deprecated();\n    window.Parsley.off(eventName(name));\n    $('form,input,textarea,select').each(function () {\n      var instance = $(this).data('Parsley');\n      if (instance) {\n        instance.off(eventName(name));\n      }\n    });\n  };\n\n  // $.emit is deprecated. Use jQuery events instead.\n  $.emit = function (name, instance) {\n    var _instance;\n\n    deprecated();\n    var instanceGiven = instance instanceof parsley_field || instance instanceof ParsleyForm;\n    var args = Array.prototype.slice.call(arguments, instanceGiven ? 2 : 1);\n    args.unshift(eventName(name));\n    if (!instanceGiven) {\n      instance = window.Parsley;\n    }\n    (_instance = instance).trigger.apply(_instance, _toConsumableArray(args));\n  };\n\n  var pubsub = {};\n\n  $.extend(true, Parsley, {\n    asyncValidators: {\n      'default': {\n        fn: function fn(xhr) {\n          // By default, only status 2xx are deemed successful.\n          // Note: we use status instead of state() because responses with status 200\n          // but invalid messages (e.g. an empty body for content type set to JSON) will\n          // result in state() === 'rejected'.\n          return xhr.status >= 200 && xhr.status < 300;\n        },\n        url: false\n      },\n      reverse: {\n        fn: function fn(xhr) {\n          // If reverse option is set, a failing ajax request is considered successful\n          return xhr.status < 200 || xhr.status >= 300;\n        },\n        url: false\n      }\n    },\n\n    addAsyncValidator: function addAsyncValidator(name, fn, url, options) {\n      Parsley.asyncValidators[name] = {\n        fn: fn,\n        url: url || false,\n        options: options || {}\n      };\n\n      return this;\n    }\n\n  });\n\n  Parsley.addValidator('remote', {\n    requirementType: {\n      '': 'string',\n      'validator': 'string',\n      'reverse': 'boolean',\n      'options': 'object'\n    },\n\n    validateString: function validateString(value, url, options, instance) {\n      var data = {};\n      var ajaxOptions;\n      var csr;\n      var validator = options.validator || (true === options.reverse ? 'reverse' : 'default');\n\n      if ('undefined' === typeof Parsley.asyncValidators[validator]) throw new Error('Calling an undefined async validator: `' + validator + '`');\n\n      url = Parsley.asyncValidators[validator].url || url;\n\n      // Fill current value\n      if (url.indexOf('{value}') > -1) {\n        url = url.replace('{value}', encodeURIComponent(value));\n      } else {\n        data[instance.$element.attr('name') || instance.$element.attr('id')] = value;\n      }\n\n      // Merge options passed in from the function with the ones in the attribute\n      var remoteOptions = $.extend(true, options.options || {}, Parsley.asyncValidators[validator].options);\n\n      // All `$.ajax(options)` could be overridden or extended directly from DOM in `data-parsley-remote-options`\n      ajaxOptions = $.extend(true, {}, {\n        url: url,\n        data: data,\n        type: 'GET'\n      }, remoteOptions);\n\n      // Generate store key based on ajax options\n      instance.trigger('field:ajaxoptions', instance, ajaxOptions);\n\n      csr = $.param(ajaxOptions);\n\n      // Initialise querry cache\n      if ('undefined' === typeof Parsley._remoteCache) Parsley._remoteCache = {};\n\n      // Try to retrieve stored xhr\n      var xhr = Parsley._remoteCache[csr] = Parsley._remoteCache[csr] || $.ajax(ajaxOptions);\n\n      var handleXhr = function handleXhr() {\n        var result = Parsley.asyncValidators[validator].fn.call(instance, xhr, url, options);\n        if (!result) // Map falsy results to rejected promise\n          result = $.Deferred().reject();\n        return $.when(result);\n      };\n\n      return xhr.then(handleXhr, handleXhr);\n    },\n\n    priority: -1\n  });\n\n  Parsley.on('form:submit', function () {\n    Parsley._remoteCache = {};\n  });\n\n  window.ParsleyExtend.addAsyncValidator = function () {\n    ParsleyUtils.warnOnce('Accessing the method `addAsyncValidator` through an instance is deprecated. Simply call `Parsley.addAsyncValidator(...)`');\n    return Parsley.addAsyncValidator.apply(Parsley, arguments);\n  };\n\n  // This is included with the Parsley library itself,\n  // thus there is no use in adding it to your project.\n  Parsley.addMessages('en', {\n    defaultMessage: \"This value seems to be invalid.\",\n    type: {\n      email: \"This value should be a valid email.\",\n      url: \"This value should be a valid url.\",\n      number: \"This value should be a valid number.\",\n      integer: \"This value should be a valid integer.\",\n      digits: \"This value should be digits.\",\n      alphanum: \"This value should be alphanumeric.\"\n    },\n    notblank: \"This value should not be blank.\",\n    required: \"This value is required.\",\n    pattern: \"This value seems to be invalid.\",\n    min: \"This value should be greater than or equal to %s.\",\n    max: \"This value should be lower than or equal to %s.\",\n    range: \"This value should be between %s and %s.\",\n    minlength: \"This value is too short. It should have %s characters or more.\",\n    maxlength: \"This value is too long. It should have %s characters or fewer.\",\n    length: \"This value length is invalid. It should be between %s and %s characters long.\",\n    mincheck: \"You must select at least %s choices.\",\n    maxcheck: \"You must select %s choices or fewer.\",\n    check: \"You must select between %s and %s choices.\",\n    equalto: \"This value should be the same.\"\n  });\n\n  Parsley.setLocale('en');\n\n  var parsley = Parsley;\n\n  return parsley;\n});\n//# sourceMappingURL=parsley.js.map\n","// All these options could be overriden and specified directly in DOM using\n// `data-parsley-` default DOM-API\n// eg: `inputs` can be set in DOM using `data-parsley-inputs=\"input, textarea\"`\n// eg: `data-parsley-stop-on-first-failing-constraint=\"false\"`\n\nvar ParsleyDefaults = {\n  // ### General\n\n  // Default data-namespace for DOM API\n  namespace: 'data-parsley-',\n\n  // Supported inputs by default\n  inputs: 'input, textarea, select',\n\n  // Excluded inputs by default\n  excluded: 'input[type=button], input[type=submit], input[type=reset], input[type=hidden]',\n\n  // Stop validating field on highest priority failing constraint\n  priorityEnabled: true,\n\n  // ### Field only\n\n  // identifier used to group together inputs (e.g. radio buttons...)\n  multiple: null,\n\n  // identifier (or array of identifiers) used to validate only a select group of inputs\n  group: null,\n\n  // ### UI\n  // Enable\\Disable error messages\n  uiEnabled: true,\n\n  // Key events threshold before validation\n  validationThreshold: 3,\n\n  // Focused field on form validation error. 'first'|'last'|'none'\n  focus: 'first',\n\n  // `$.Event()` that will trigger validation. eg: `keyup`, `change`...\n  trigger: false,\n\n  // Class that would be added on every failing validation Parsley field\n  errorClass: 'parsley-error',\n\n  // Same for success validation\n  successClass: 'parsley-success',\n\n  // Return the `$element` that will receive these above success or error classes\n  // Could also be (and given directly from DOM) a valid selector like `'#div'`\n  classHandler: function (ParsleyField) {},\n\n  // Return the `$element` where errors will be appended\n  // Could also be (and given directly from DOM) a valid selector like `'#div'`\n  errorsContainer: function (ParsleyField) {},\n\n  // ul elem that would receive errors' list\n  errorsWrapper: '<ul class=\"parsley-errors-list\"></ul>',\n\n  // li elem that would receive error message\n  errorTemplate: '<li></li>'\n};\n\nexport default ParsleyDefaults;\n","import $ from 'jquery';\nimport ParsleyUtils from './utils';\n\nvar ParsleyAbstract = function () {};\n\nParsleyAbstract.prototype = {\n  asyncSupport: true, // Deprecated\n\n  actualizeOptions: function () {\n    ParsleyUtils.attr(this.$element, this.options.namespace, this.domOptions);\n    if (this.parent && this.parent.actualizeOptions)\n      this.parent.actualizeOptions();\n    return this;\n  },\n\n  _resetOptions: function (initOptions) {\n    this.domOptions = ParsleyUtils.objectCreate(this.parent.options);\n    this.options = ParsleyUtils.objectCreate(this.domOptions);\n    // Shallow copy of ownProperties of initOptions:\n    for (var i in initOptions) {\n      if (initOptions.hasOwnProperty(i))\n        this.options[i] = initOptions[i];\n    }\n    this.actualizeOptions();\n  },\n\n  _listeners: null,\n\n  // Register a callback for the given event name.\n  // Callback is called with context as the first argument and the `this`.\n  // The context is the current parsley instance, or window.Parsley if global.\n  // A return value of `false` will interrupt the calls\n  on: function (name, fn) {\n    this._listeners = this._listeners || {};\n    var queue = this._listeners[name] = this._listeners[name] || [];\n    queue.push(fn);\n\n    return this;\n  },\n\n  // Deprecated. Use `on` instead.\n  subscribe: function(name, fn) {\n    $.listenTo(this, name.toLowerCase(), fn);\n  },\n\n  // Unregister a callback (or all if none is given) for the given event name\n  off: function (name, fn) {\n    var queue = this._listeners && this._listeners[name];\n    if (queue) {\n      if (!fn) {\n        delete this._listeners[name];\n      } else {\n        for (var i = queue.length; i--; )\n          if (queue[i] === fn)\n            queue.splice(i, 1);\n      }\n    }\n    return this;\n  },\n\n  // Deprecated. Use `off`\n  unsubscribe: function(name, fn) {\n    $.unsubscribeTo(this, name.toLowerCase());\n  },\n\n  // Trigger an event of the given name.\n  // A return value of `false` interrupts the callback chain.\n  // Returns false if execution was interrupted.\n  trigger: function (name, target, extraArg) {\n    target = target || this;\n    var queue = this._listeners && this._listeners[name];\n    var result;\n    var parentResult;\n    if (queue) {\n      for (var i = queue.length; i--; ) {\n        result = queue[i].call(target, target, extraArg);\n        if (result === false) return result;\n      }\n    }\n    if (this.parent) {\n      return this.parent.trigger(name, target, extraArg);\n    }\n    return true;\n  },\n\n  // Reset UI\n  reset: function () {\n    // Field case: just emit a reset event for UI\n    if ('ParsleyForm' !== this.__class__)\n      return this._trigger('reset');\n\n    // Form case: emit a reset event for each field\n    for (var i = 0; i < this.fields.length; i++)\n      this.fields[i]._trigger('reset');\n\n    this._trigger('reset');\n  },\n\n  // Destroy Parsley instance (+ UI)\n  destroy: function () {\n    // Field case: emit destroy event to clean UI and then destroy stored instance\n    if ('ParsleyForm' !== this.__class__) {\n      this.$element.removeData('Parsley');\n      this.$element.removeData('ParsleyFieldMultiple');\n      this._trigger('destroy');\n\n      return;\n    }\n\n    // Form case: destroy all its fields and then destroy stored instance\n    for (var i = 0; i < this.fields.length; i++)\n      this.fields[i].destroy();\n\n    this.$element.removeData('Parsley');\n    this._trigger('destroy');\n  },\n\n  asyncIsValid: function () {\n    ParsleyUtils.warnOnce(\"asyncIsValid is deprecated; please use whenIsValid instead\");\n    return this.whenValid(...arguments);\n  },\n\n  _findRelated: function () {\n    return this.options.multiple ?\n      this.parent.$element.find(`[${this.options.namespace}multiple=\"${this.options.multiple}\"]`)\n    : this.$element;\n  }\n};\n\nexport default ParsleyAbstract;\n","import $ from 'jquery';\nimport ParsleyUtils from './utils';\n\nvar requirementConverters = {\n  string: function(string) {\n    return string;\n  },\n  integer: function(string) {\n    if (isNaN(string))\n      throw 'Requirement is not an integer: \"' + string + '\"';\n    return parseInt(string, 10);\n  },\n  number: function(string) {\n    if (isNaN(string))\n      throw 'Requirement is not a number: \"' + string + '\"';\n    return parseFloat(string);\n  },\n  reference: function(string) { // Unused for now\n    var result = $(string);\n    if (result.length === 0)\n      throw 'No such reference: \"' + string + '\"';\n    return result;\n  },\n  boolean: function(string) {\n    return string !== 'false';\n  },\n  object: function(string) {\n    return ParsleyUtils.deserializeValue(string);\n  },\n  regexp: function(regexp) {\n    var flags = '';\n\n    // Test if RegExp is literal, if not, nothing to be done, otherwise, we need to isolate flags and pattern\n    if (/^\\/.*\\/(?:[gimy]*)$/.test(regexp)) {\n      // Replace the regexp literal string with the first match group: ([gimy]*)\n      // If no flag is present, this will be a blank string\n      flags = regexp.replace(/.*\\/([gimy]*)$/, '$1');\n      // Again, replace the regexp literal string with the first match group:\n      // everything excluding the opening and closing slashes and the flags\n      regexp = regexp.replace(new RegExp('^/(.*?)/' + flags + '$'), '$1');\n    } else {\n      // Anchor regexp:\n      regexp = '^' + regexp + '$';\n    }\n    return new RegExp(regexp, flags);\n  }\n};\n\nvar convertArrayRequirement = function(string, length) {\n  var m = string.match(/^\\s*\\[(.*)\\]\\s*$/);\n  if (!m)\n    throw 'Requirement is not an array: \"' + string + '\"';\n  var values = m[1].split(',').map(ParsleyUtils.trimString);\n  if (values.length !== length)\n    throw 'Requirement has ' + values.length + ' values when ' + length + ' are needed';\n  return values;\n};\n\nvar convertRequirement = function(requirementType, string) {\n  var converter = requirementConverters[requirementType || 'string'];\n  if (!converter)\n    throw 'Unknown requirement specification: \"' + requirementType + '\"';\n  return converter(string);\n};\n\nvar convertExtraOptionRequirement = function(requirementSpec, string, extraOptionReader) {\n  var main = null;\n  var extra = {};\n  for (var key in requirementSpec) {\n    if (key) {\n      var value = extraOptionReader(key);\n      if ('string' === typeof value)\n        value = convertRequirement(requirementSpec[key], value);\n      extra[key] = value;\n    } else {\n      main = convertRequirement(requirementSpec[key], string);\n    }\n  }\n  return [main, extra];\n};\n\n// A Validator needs to implement the methods `validate` and `parseRequirements`\n\nvar ParsleyValidator = function(spec) {\n  $.extend(true, this, spec);\n};\n\nParsleyValidator.prototype = {\n  // Returns `true` iff the given `value` is valid according the given requirements.\n  validate: function(value, requirementFirstArg) {\n    if (this.fn) { // Legacy style validator\n\n      if (arguments.length > 3)  // If more args then value, requirement, instance...\n        requirementFirstArg = [].slice.call(arguments, 1, -1);  // Skip first arg (value) and last (instance), combining the rest\n      return this.fn.call(this, value, requirementFirstArg);\n    }\n\n    if ($.isArray(value)) {\n      if (!this.validateMultiple)\n        throw 'Validator `' + this.name + '` does not handle multiple values';\n      return this.validateMultiple(...arguments);\n    } else {\n      if (this.validateNumber) {\n        if (isNaN(value))\n          return false;\n        arguments[0] = parseFloat(arguments[0]);\n        return this.validateNumber(...arguments);\n      }\n      if (this.validateString) {\n        return this.validateString(...arguments);\n      }\n      throw 'Validator `' + this.name + '` only handles multiple values';\n    }\n  },\n\n  // Parses `requirements` into an array of arguments,\n  // according to `this.requirementType`\n  parseRequirements: function(requirements, extraOptionReader) {\n    if ('string' !== typeof requirements) {\n      // Assume requirement already parsed\n      // but make sure we return an array\n      return $.isArray(requirements) ? requirements : [requirements];\n    }\n    var type = this.requirementType;\n    if ($.isArray(type)) {\n      var values = convertArrayRequirement(requirements, type.length);\n      for (var i = 0; i < values.length; i++)\n        values[i] = convertRequirement(type[i], values[i]);\n      return values;\n    } else if ($.isPlainObject(type)) {\n      return convertExtraOptionRequirement(type, requirements, extraOptionReader);\n    } else {\n      return [convertRequirement(type, requirements)];\n    }\n  },\n  // Defaults:\n  requirementType: 'string',\n\n  priority: 2\n\n};\n\nexport default ParsleyValidator;\n","import $ from 'jquery';\nimport ParsleyUtils from './utils';\nimport ParsleyDefaults from './defaults';\nimport ParsleyValidator from './validator';\n\nvar ParsleyValidatorRegistry = function (validators, catalog) {\n  this.__class__ = 'ParsleyValidatorRegistry';\n\n  // Default Parsley locale is en\n  this.locale = 'en';\n\n  this.init(validators || {}, catalog || {});\n};\n\nvar typeRegexes =  {\n  email: /^((([a-z]|\\d|[!#\\$%&'\\*\\+\\-\\/=\\?\\^_`{\\|}~]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])+(\\.([a-z]|\\d|[!#\\$%&'\\*\\+\\-\\/=\\?\\^_`{\\|}~]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])+)*)|((\\x22)((((\\x20|\\x09)*(\\x0d\\x0a))?(\\x20|\\x09)+)?(([\\x01-\\x08\\x0b\\x0c\\x0e-\\x1f\\x7f]|\\x21|[\\x23-\\x5b]|[\\x5d-\\x7e]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])|(\\\\([\\x01-\\x09\\x0b\\x0c\\x0d-\\x7f]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF]))))*(((\\x20|\\x09)*(\\x0d\\x0a))?(\\x20|\\x09)+)?(\\x22)))@((([a-z]|\\d|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])|(([a-z]|\\d|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])([a-z]|\\d|-|\\.|_|~|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])*([a-z]|\\d|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])))\\.)+(([a-z]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])|(([a-z]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])([a-z]|\\d|-|\\.|_|~|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])*([a-z]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])))$/i,\n\n  number: /^-?(?:(?:\\d+|\\d{1,3}(?:,\\d{3})+)+(?:\\.\\d+)?|(?:\\.\\d+)+)$/,\n\n  integer: /^-?\\d+$/,\n\n  digits: /^\\d+$/,\n\n  alphanum: /^\\w+$/i,\n\n  url: new RegExp(\n      \"^\" +\n        // protocol identifier\n        \"(?:(?:https?|ftp)://)?\" + // ** mod: make scheme optional\n        // user:pass authentication\n        \"(?:\\\\S+(?::\\\\S*)?@)?\" +\n        \"(?:\" +\n          // IP address exclusion\n          // private & local networks\n          // \"(?!(?:10|127)(?:\\\\.\\\\d{1,3}){3})\" +   // ** mod: allow local networks\n          // \"(?!(?:169\\\\.254|192\\\\.168)(?:\\\\.\\\\d{1,3}){2})\" +  // ** mod: allow local networks\n          // \"(?!172\\\\.(?:1[6-9]|2\\\\d|3[0-1])(?:\\\\.\\\\d{1,3}){2})\" +  // ** mod: allow local networks\n          // IP address dotted notation octets\n          // excludes loopback network 0.0.0.0\n          // excludes reserved space >= 224.0.0.0\n          // excludes network & broacast addresses\n          // (first & last IP address of each class)\n          \"(?:[1-9]\\\\d?|1\\\\d\\\\d|2[01]\\\\d|22[0-3])\" +\n          \"(?:\\\\.(?:1?\\\\d{1,2}|2[0-4]\\\\d|25[0-5])){2}\" +\n          \"(?:\\\\.(?:[1-9]\\\\d?|1\\\\d\\\\d|2[0-4]\\\\d|25[0-4]))\" +\n        \"|\" +\n          // host name\n          \"(?:(?:[a-z\\\\u00a1-\\\\uffff0-9]-*)*[a-z\\\\u00a1-\\\\uffff0-9]+)\" +\n          // domain name\n          \"(?:\\\\.(?:[a-z\\\\u00a1-\\\\uffff0-9]-*)*[a-z\\\\u00a1-\\\\uffff0-9]+)*\" +\n          // TLD identifier\n          \"(?:\\\\.(?:[a-z\\\\u00a1-\\\\uffff]{2,}))\" +\n        \")\" +\n        // port number\n        \"(?::\\\\d{2,5})?\" +\n        // resource path\n        \"(?:/\\\\S*)?\" +\n      \"$\", 'i'\n    )\n};\ntypeRegexes.range = typeRegexes.number;\n\nParsleyValidatorRegistry.prototype = {\n  init: function (validators, catalog) {\n    this.catalog = catalog;\n    // Copy prototype's validators:\n    this.validators = $.extend({}, this.validators);\n\n    for (var name in validators)\n      this.addValidator(name, validators[name].fn, validators[name].priority);\n\n    window.Parsley.trigger('parsley:validator:init');\n  },\n\n  // Set new messages locale if we have dictionary loaded in ParsleyConfig.i18n\n  setLocale: function (locale) {\n    if ('undefined' === typeof this.catalog[locale])\n      throw new Error(locale + ' is not available in the catalog');\n\n    this.locale = locale;\n\n    return this;\n  },\n\n  // Add a new messages catalog for a given locale. Set locale for this catalog if set === `true`\n  addCatalog: function (locale, messages, set) {\n    if ('object' === typeof messages)\n      this.catalog[locale] = messages;\n\n    if (true === set)\n      return this.setLocale(locale);\n\n    return this;\n  },\n\n  // Add a specific message for a given constraint in a given locale\n  addMessage: function (locale, name, message) {\n    if ('undefined' === typeof this.catalog[locale])\n      this.catalog[locale] = {};\n\n    this.catalog[locale][name] = message;\n\n    return this;\n  },\n\n  // Add messages for a given locale\n  addMessages: function (locale, nameMessageObject) {\n    for (var name in nameMessageObject)\n      this.addMessage(locale, name, nameMessageObject[name]);\n\n    return this;\n  },\n\n  // Add a new validator\n  //\n  //    addValidator('custom', {\n  //        requirementType: ['integer', 'integer'],\n  //        validateString: function(value, from, to) {},\n  //        priority: 22,\n  //        messages: {\n  //          en: \"Hey, that's no good\",\n  //          fr: \"Aye aye, pas bon du tout\",\n  //        }\n  //    })\n  //\n  // Old API was addValidator(name, function, priority)\n  //\n  addValidator: function (name, arg1, arg2) {\n    if (this.validators[name])\n      ParsleyUtils.warn('Validator \"' + name + '\" is already defined.');\n    else if (ParsleyDefaults.hasOwnProperty(name)) {\n      ParsleyUtils.warn('\"' + name + '\" is a restricted keyword and is not a valid validator name.');\n      return;\n    }\n    return this._setValidator(...arguments);\n  },\n\n  updateValidator: function (name, arg1, arg2) {\n    if (!this.validators[name]) {\n      ParsleyUtils.warn('Validator \"' + name + '\" is not already defined.');\n      return this.addValidator(...arguments);\n    }\n    return this._setValidator(this, arguments);\n  },\n\n  removeValidator: function (name) {\n    if (!this.validators[name])\n      ParsleyUtils.warn('Validator \"' + name + '\" is not defined.');\n\n    delete this.validators[name];\n\n    return this;\n  },\n\n  _setValidator: function (name, validator, priority) {\n    if ('object' !== typeof validator) {\n      // Old style validator, with `fn` and `priority`\n      validator = {\n        fn: validator,\n        priority: priority\n      };\n    }\n    if (!validator.validate) {\n      validator = new ParsleyValidator(validator);\n    }\n    this.validators[name] = validator;\n\n    for (var locale in validator.messages || {})\n      this.addMessage(locale, name, validator.messages[locale]);\n\n    return this;\n  },\n\n  getErrorMessage: function (constraint) {\n    var message;\n\n    // Type constraints are a bit different, we have to match their requirements too to find right error message\n    if ('type' === constraint.name) {\n      var typeMessages = this.catalog[this.locale][constraint.name] || {};\n      message = typeMessages[constraint.requirements];\n    } else\n      message = this.formatMessage(this.catalog[this.locale][constraint.name], constraint.requirements);\n\n    return message || this.catalog[this.locale].defaultMessage || this.catalog.en.defaultMessage;\n  },\n\n  // Kind of light `sprintf()` implementation\n  formatMessage: function (string, parameters) {\n    if ('object' === typeof parameters) {\n      for (var i in parameters)\n        string = this.formatMessage(string, parameters[i]);\n\n      return string;\n    }\n\n    return 'string' === typeof string ? string.replace(/%s/i, parameters) : '';\n  },\n\n  // Here is the Parsley default validators list.\n  // A validator is an object with the following key values:\n  //  - priority: an integer\n  //  - requirement: 'string' (default), 'integer', 'number', 'regexp' or an Array of these\n  //  - validateString, validateMultiple, validateNumber: functions returning `true`, `false` or a promise\n  // Alternatively, a validator can be a function that returns such an object\n  //\n  validators: {\n    notblank: {\n      validateString: function(value) {\n        return /\\S/.test(value);\n      },\n      priority: 2\n    },\n    required: {\n      validateMultiple: function(values) {\n        return values.length > 0;\n      },\n      validateString: function(value) {\n        return /\\S/.test(value);\n      },\n      priority: 512\n    },\n    type: {\n      validateString: function(value, type) {\n        var regex = typeRegexes[type];\n        if (!regex)\n          throw new Error('validator type `' + type + '` is not supported');\n        return regex.test(value);\n      },\n      priority: 256\n    },\n    pattern: {\n      validateString: function(value, regexp) {\n        return regexp.test(value);\n      },\n      requirementType: 'regexp',\n      priority: 64\n    },\n    minlength: {\n      validateString: function (value, requirement) {\n        return value.length >= requirement;\n      },\n      requirementType: 'integer',\n      priority: 30\n    },\n    maxlength: {\n      validateString: function (value, requirement) {\n        return value.length <= requirement;\n      },\n      requirementType: 'integer',\n      priority: 30\n    },\n    length: {\n      validateString: function (value, min, max) {\n        return value.length >= min && value.length <= max;\n      },\n      requirementType: ['integer', 'integer'],\n      priority: 30\n    },\n    mincheck: {\n      validateMultiple: function (values, requirement) {\n        return values.length >= requirement;\n      },\n      requirementType: 'integer',\n      priority: 30\n    },\n    maxcheck: {\n      validateMultiple: function (values, requirement) {\n        return values.length <= requirement;\n      },\n      requirementType: 'integer',\n      priority: 30\n    },\n    check: {\n      validateMultiple: function (values, min, max) {\n        return values.length >= min && values.length <= max;\n      },\n      requirementType: ['integer', 'integer'],\n      priority: 30\n    },\n    min: {\n      validateNumber: function (value, requirement) {\n        return value >= requirement;\n      },\n      requirementType: 'number',\n      priority: 30\n    },\n    max: {\n      validateNumber: function (value, requirement) {\n        return value <= requirement;\n      },\n      requirementType: 'number',\n      priority: 30\n    },\n    range: {\n      validateNumber: function (value, min, max) {\n        return value >= min && value <= max;\n      },\n      requirementType: ['number', 'number'],\n      priority: 30\n    },\n    equalto: {\n      validateString: function (value, refOrValue) {\n        var $reference = $(refOrValue);\n        if ($reference.length)\n          return value === $reference.val();\n        else\n          return value === refOrValue;\n      },\n      priority: 256\n    }\n  }\n};\n\nexport default ParsleyValidatorRegistry;\n","import $ from 'jquery';\nimport ParsleyUtils from './utils';\n\nvar ParsleyUI = function (options) {\n  this.__class__ = 'ParsleyUI';\n};\n\nParsleyUI.prototype = {\n  listen: function () {\n    window.Parsley\n    .on('form:init',       (form ) => { this.setupForm (form ); } )\n    .on('field:init',      (field) => { this.setupField(field); } )\n    .on('field:validated', (field) => { this.reflow    (field); } )\n    .on('form:validated',  (form ) => { this.focus     (form ); } )\n    .on('field:reset',     (field) => { this.reset     (field); } )\n    .on('form:destroy',    (form ) => { this.destroy   (form ); } )\n    .on('field:destroy',   (field) => { this.destroy   (field); } );\n\n    return this;\n  },\n\n  reflow: function (fieldInstance) {\n    // If this field has not an active UI (case for multiples) don't bother doing something\n    if ('undefined' === typeof fieldInstance._ui || false === fieldInstance._ui.active)\n      return;\n\n    // Diff between two validation results\n    var diff = this._diff(fieldInstance.validationResult, fieldInstance._ui.lastValidationResult);\n\n    // Then store current validation result for next reflow\n    fieldInstance._ui.lastValidationResult = fieldInstance.validationResult;\n\n    // Handle valid / invalid / none field class\n    this.manageStatusClass(fieldInstance);\n\n    // Add, remove, updated errors messages\n    this.manageErrorsMessages(fieldInstance, diff);\n\n    // Triggers impl\n    this.actualizeTriggers(fieldInstance);\n\n    // If field is not valid for the first time, bind keyup trigger to ease UX and quickly inform user\n    if ((diff.kept.length || diff.added.length) && true !== fieldInstance._ui.failedOnce)\n      this.manageFailingFieldTrigger(fieldInstance);\n  },\n\n  // Returns an array of field's error message(s)\n  getErrorsMessages: function (fieldInstance) {\n    // No error message, field is valid\n    if (true === fieldInstance.validationResult)\n      return [];\n\n    var messages = [];\n\n    for (var i = 0; i < fieldInstance.validationResult.length; i++)\n      messages.push(fieldInstance.validationResult[i].errorMessage ||\n       this._getErrorMessage(fieldInstance, fieldInstance.validationResult[i].assert));\n\n    return messages;\n  },\n\n  manageStatusClass: function (fieldInstance) {\n    if (fieldInstance.hasConstraints() && fieldInstance.needsValidation() && true === fieldInstance.validationResult)\n      this._successClass(fieldInstance);\n    else if (fieldInstance.validationResult.length > 0)\n      this._errorClass(fieldInstance);\n    else\n      this._resetClass(fieldInstance);\n  },\n\n  manageErrorsMessages: function (fieldInstance, diff) {\n    if ('undefined' !== typeof fieldInstance.options.errorsMessagesDisabled)\n      return;\n\n    // Case where we have errorMessage option that configure an unique field error message, regardless failing validators\n    if ('undefined' !== typeof fieldInstance.options.errorMessage) {\n      if ((diff.added.length || diff.kept.length)) {\n        this._insertErrorWrapper(fieldInstance);\n\n        if (0 === fieldInstance._ui.$errorsWrapper.find('.parsley-custom-error-message').length)\n          fieldInstance._ui.$errorsWrapper\n            .append(\n              $(fieldInstance.options.errorTemplate)\n              .addClass('parsley-custom-error-message')\n            );\n\n        return fieldInstance._ui.$errorsWrapper\n          .addClass('filled')\n          .find('.parsley-custom-error-message')\n          .html(fieldInstance.options.errorMessage);\n      }\n\n      return fieldInstance._ui.$errorsWrapper\n        .removeClass('filled')\n        .find('.parsley-custom-error-message')\n        .remove();\n    }\n\n    // Show, hide, update failing constraints messages\n    for (var i = 0; i < diff.removed.length; i++)\n      this.removeError(fieldInstance, diff.removed[i].assert.name, true);\n\n    for (i = 0; i < diff.added.length; i++)\n      this.addError(fieldInstance, diff.added[i].assert.name, diff.added[i].errorMessage, diff.added[i].assert, true);\n\n    for (i = 0; i < diff.kept.length; i++)\n      this.updateError(fieldInstance, diff.kept[i].assert.name, diff.kept[i].errorMessage, diff.kept[i].assert, true);\n  },\n\n  // TODO: strange API here, intuitive for manual usage with addError(pslyInstance, 'foo', 'bar')\n  // but a little bit complex for above internal usage, with forced undefined parameter...\n  addError: function (fieldInstance, name, message, assert, doNotUpdateClass) {\n    this._insertErrorWrapper(fieldInstance);\n    fieldInstance._ui.$errorsWrapper\n      .addClass('filled')\n      .append(\n        $(fieldInstance.options.errorTemplate)\n        .addClass('parsley-' + name)\n        .html(message || this._getErrorMessage(fieldInstance, assert))\n      );\n\n    if (true !== doNotUpdateClass)\n      this._errorClass(fieldInstance);\n  },\n\n  // Same as above\n  updateError: function (fieldInstance, name, message, assert, doNotUpdateClass) {\n    fieldInstance._ui.$errorsWrapper\n      .addClass('filled')\n      .find('.parsley-' + name)\n      .html(message || this._getErrorMessage(fieldInstance, assert));\n\n    if (true !== doNotUpdateClass)\n      this._errorClass(fieldInstance);\n  },\n\n  // Same as above twice\n  removeError: function (fieldInstance, name, doNotUpdateClass) {\n    fieldInstance._ui.$errorsWrapper\n      .removeClass('filled')\n      .find('.parsley-' + name)\n      .remove();\n\n    // edge case possible here: remove a standard Parsley error that is still failing in fieldInstance.validationResult\n    // but highly improbable cuz' manually removing a well Parsley handled error makes no sense.\n    if (true !== doNotUpdateClass)\n      this.manageStatusClass(fieldInstance);\n  },\n\n  focus: function (formInstance) {\n    formInstance._focusedField = null;\n\n    if (true === formInstance.validationResult || 'none' === formInstance.options.focus)\n      return null;\n\n    for (var i = 0; i < formInstance.fields.length; i++) {\n      var field = formInstance.fields[i];\n      if (true !== field.validationResult && field.validationResult.length > 0 && 'undefined' === typeof field.options.noFocus) {\n        formInstance._focusedField = field.$element;\n        if ('first' === formInstance.options.focus)\n          break;\n      }\n    }\n\n    if (null === formInstance._focusedField)\n      return null;\n\n    return formInstance._focusedField.focus();\n  },\n\n  _getErrorMessage: function (fieldInstance, constraint) {\n    var customConstraintErrorMessage = constraint.name + 'Message';\n\n    if ('undefined' !== typeof fieldInstance.options[customConstraintErrorMessage])\n      return window.Parsley.formatMessage(fieldInstance.options[customConstraintErrorMessage], constraint.requirements);\n\n    return window.Parsley.getErrorMessage(constraint);\n  },\n\n  _diff: function (newResult, oldResult, deep) {\n    var added = [];\n    var kept = [];\n\n    for (var i = 0; i < newResult.length; i++) {\n      var found = false;\n\n      for (var j = 0; j < oldResult.length; j++)\n        if (newResult[i].assert.name === oldResult[j].assert.name) {\n          found = true;\n          break;\n        }\n\n      if (found)\n        kept.push(newResult[i]);\n      else\n        added.push(newResult[i]);\n    }\n\n    return {\n      kept: kept,\n      added: added,\n      removed: !deep ? this._diff(oldResult, newResult, true).added : []\n    };\n  },\n\n  setupForm: function (formInstance) {\n    formInstance.$element.on('submit.Parsley', evt => { formInstance.onSubmitValidate(evt); });\n    formInstance.$element.on('click.Parsley', 'input[type=\"submit\"], button[type=\"submit\"]', evt => { formInstance.onSubmitButton(evt); });\n\n    // UI could be disabled\n    if (false === formInstance.options.uiEnabled)\n      return;\n\n    formInstance.$element.attr('novalidate', '');\n  },\n\n  setupField: function (fieldInstance) {\n    var _ui = {active: false};\n\n    // UI could be disabled\n    if (false === fieldInstance.options.uiEnabled)\n      return;\n\n    _ui.active = true;\n\n    // Give field its Parsley id in DOM\n    fieldInstance.$element.attr(fieldInstance.options.namespace + 'id', fieldInstance.__id__);\n\n    /** Generate important UI elements and store them in fieldInstance **/\n    // $errorClassHandler is the $element that woul have parsley-error and parsley-success classes\n    _ui.$errorClassHandler = this._manageClassHandler(fieldInstance);\n\n    // $errorsWrapper is a div that would contain the various field errors, it will be appended into $errorsContainer\n    _ui.errorsWrapperId = 'parsley-id-' + (fieldInstance.options.multiple ? 'multiple-' + fieldInstance.options.multiple : fieldInstance.__id__);\n    _ui.$errorsWrapper = $(fieldInstance.options.errorsWrapper).attr('id', _ui.errorsWrapperId);\n\n    // ValidationResult UI storage to detect what have changed bwt two validations, and update DOM accordingly\n    _ui.lastValidationResult = [];\n    _ui.validationInformationVisible = false;\n\n    // Store it in fieldInstance for later\n    fieldInstance._ui = _ui;\n\n    // Bind triggers first time\n    this.actualizeTriggers(fieldInstance);\n  },\n\n  // Determine which element will have `parsley-error` and `parsley-success` classes\n  _manageClassHandler: function (fieldInstance) {\n    // An element selector could be passed through DOM with `data-parsley-class-handler=#foo`\n    if ('string' === typeof fieldInstance.options.classHandler && $(fieldInstance.options.classHandler).length)\n      return $(fieldInstance.options.classHandler);\n\n    // Class handled could also be determined by function given in Parsley options\n    var $handler = fieldInstance.options.classHandler(fieldInstance);\n\n    // If this function returned a valid existing DOM element, go for it\n    if ('undefined' !== typeof $handler && $handler.length)\n      return $handler;\n\n    // Otherwise, if simple element (input, texatrea, select...) it will perfectly host the classes\n    if (!fieldInstance.options.multiple || fieldInstance.$element.is('select'))\n      return fieldInstance.$element;\n\n    // But if multiple element (radio, checkbox), that would be their parent\n    return fieldInstance.$element.parent();\n  },\n\n  _insertErrorWrapper: function (fieldInstance) {\n    var $errorsContainer;\n\n    // Nothing to do if already inserted\n    if (0 !== fieldInstance._ui.$errorsWrapper.parent().length)\n      return fieldInstance._ui.$errorsWrapper.parent();\n\n    if ('string' === typeof fieldInstance.options.errorsContainer) {\n      if ($(fieldInstance.options.errorsContainer).length)\n        return $(fieldInstance.options.errorsContainer).append(fieldInstance._ui.$errorsWrapper);\n      else\n        ParsleyUtils.warn('The errors container `' + fieldInstance.options.errorsContainer + '` does not exist in DOM');\n    } else if ('function' === typeof fieldInstance.options.errorsContainer)\n      $errorsContainer = fieldInstance.options.errorsContainer(fieldInstance);\n\n    if ('undefined' !== typeof $errorsContainer && $errorsContainer.length)\n      return $errorsContainer.append(fieldInstance._ui.$errorsWrapper);\n\n    var $from = fieldInstance.$element;\n    if (fieldInstance.options.multiple)\n      $from = $from.parent();\n    return $from.after(fieldInstance._ui.$errorsWrapper);\n  },\n\n  actualizeTriggers: function (fieldInstance) {\n    var $toBind = fieldInstance._findRelated();\n\n    // Remove Parsley events already binded on this field\n    $toBind.off('.Parsley');\n\n    // If no trigger is set, all good\n    if (false === fieldInstance.options.trigger)\n      return;\n\n    var triggers = fieldInstance.options.trigger.replace(/^\\s+/g , '').replace(/\\s+$/g , '');\n\n    if ('' === triggers)\n      return;\n\n    $toBind.on(\n      triggers.split(' ').join('.Parsley ') + '.Parsley',\n      event => { this.eventValidate(fieldInstance, event); }\n    );\n  },\n\n  eventValidate: function (field, event) {\n    // For keyup, keypress, keydown... events that could be a little bit obstrusive\n    // do not validate if val length < min threshold on first validation. Once field have been validated once and info\n    // about success or failure have been displayed, always validate with this trigger to reflect every yalidation change.\n    if (/key/.test(event.type))\n      if (!field._ui.validationInformationVisible && field.getValue().length <= field.options.validationThreshold)\n        return;\n\n    field.validate();\n  },\n\n  manageFailingFieldTrigger: function (fieldInstance) {\n    fieldInstance._ui.failedOnce = true;\n\n    // Radio and checkboxes fields must bind every field multiple\n    if (fieldInstance.options.multiple)\n      fieldInstance._findRelated().each(function () {\n        if (!/change/i.test($(this).parsley().options.trigger || ''))\n          $(this).on('change.ParsleyFailedOnce', () => { fieldInstance.validate(); });\n      });\n\n    // Select case\n    if (fieldInstance.$element.is('select'))\n      if (!/change/i.test(fieldInstance.options.trigger || ''))\n        return fieldInstance.$element.on('change.ParsleyFailedOnce', () => { fieldInstance.validate(); });\n\n    // All other inputs fields\n    if (!/keyup/i.test(fieldInstance.options.trigger || ''))\n      return fieldInstance.$element.on('keyup.ParsleyFailedOnce', () => { fieldInstance.validate(); });\n  },\n\n  reset: function (parsleyInstance) {\n    // Reset all event listeners\n    this.actualizeTriggers(parsleyInstance);\n    parsleyInstance.$element.off('.ParsleyFailedOnce');\n\n    // Nothing to do if UI never initialized for this field\n    if ('undefined' === typeof parsleyInstance._ui)\n      return;\n\n    if ('ParsleyForm' === parsleyInstance.__class__)\n      return;\n\n    // Reset all errors' li\n    parsleyInstance._ui.$errorsWrapper\n      .removeClass('filled')\n      .children()\n      .remove();\n\n    // Reset validation class\n    this._resetClass(parsleyInstance);\n\n    // Reset validation flags and last validation result\n    parsleyInstance._ui.lastValidationResult = [];\n    parsleyInstance._ui.validationInformationVisible = false;\n    parsleyInstance._ui.failedOnce = false;\n  },\n\n  destroy: function (parsleyInstance) {\n    this.reset(parsleyInstance);\n\n    if ('ParsleyForm' === parsleyInstance.__class__)\n      return;\n\n    if ('undefined' !== typeof parsleyInstance._ui)\n      parsleyInstance._ui.$errorsWrapper.remove();\n\n    delete parsleyInstance._ui;\n  },\n\n  _successClass: function (fieldInstance) {\n    fieldInstance._ui.validationInformationVisible = true;\n    fieldInstance._ui.$errorClassHandler.removeClass(fieldInstance.options.errorClass).addClass(fieldInstance.options.successClass);\n  },\n  _errorClass: function (fieldInstance) {\n    fieldInstance._ui.validationInformationVisible = true;\n    fieldInstance._ui.$errorClassHandler.removeClass(fieldInstance.options.successClass).addClass(fieldInstance.options.errorClass);\n  },\n  _resetClass: function (fieldInstance) {\n    fieldInstance._ui.$errorClassHandler.removeClass(fieldInstance.options.successClass).removeClass(fieldInstance.options.errorClass);\n  }\n};\n\nexport default ParsleyUI;\n","import $ from 'jquery';\nimport ParsleyAbstract from './abstract';\nimport ParsleyUtils from './utils';\n\nvar ParsleyForm = function (element, domOptions, options) {\n  this.__class__ = 'ParsleyForm';\n  this.__id__ = ParsleyUtils.generateID();\n\n  this.$element = $(element);\n  this.domOptions = domOptions;\n  this.options = options;\n  this.parent = window.Parsley;\n\n  this.fields = [];\n  this.validationResult = null;\n};\n\nvar statusMapping = {pending: null, resolved: true, rejected: false};\n\nParsleyForm.prototype = {\n  onSubmitValidate: function (event) {\n    // This is a Parsley generated submit event, do not validate, do not prevent, simply exit and keep normal behavior\n    if (true === event.parsley)\n      return;\n\n    // If we didn't come here through a submit button, use the first one in the form\n    this._$submitSource = this._$submitSource || this.$element.find('input[type=\"submit\"], button[type=\"submit\"]').first();\n\n    if (this._$submitSource.is('[formnovalidate]')) {\n      this._$submitSource = null;\n      return;\n    }\n\n    // Because some validations might be asynchroneous,\n    // we cancel this submit and will fake it after validation.\n    event.stopImmediatePropagation();\n    event.preventDefault();\n\n    this.whenValidate(undefined, undefined, event)\n      .done(() => { this._submit(); })\n      .always(() => { this._$submitSource = null; });\n\n    return this;\n  },\n\n  onSubmitButton: function(event) {\n    this._$submitSource = $(event.target);\n  },\n  // internal\n  // _submit submits the form, this time without going through the validations.\n  // Care must be taken to \"fake\" the actual submit button being clicked.\n  _submit: function () {\n    if (false === this._trigger('submit'))\n      return;\n    this.$element.find('.parsley_synthetic_submit_button').remove();\n    // Add submit button's data\n    if (this._$submitSource) {\n      $('<input class=\"parsley_synthetic_submit_button\" type=\"hidden\">')\n      .attr('name', this._$submitSource.attr('name'))\n      .attr('value', this._$submitSource.attr('value'))\n      .appendTo(this.$element);\n    }\n    //\n    this.$element.trigger($.extend($.Event('submit'), {parsley: true}));\n  },\n\n  // Performs validation on fields while triggering events.\n  // @returns `true` if al validations succeeds, `false`\n  // if a failure is immediately detected, or `null`\n  // if dependant on a promise.\n  // Prefer `whenValidate`.\n  validate: function (group, force, event) {\n    return statusMapping[ this.whenValidate(group, force, event).state() ];\n  },\n\n  whenValidate: function (group, force, event) {\n    this.submitEvent = event;\n    if (event) {\n      this.submitEvent.preventDefault = () => {\n        ParsleyUtils.warnOnce(\"Using `this.submitEvent.preventDefault()` is deprecated; instead, call `this.validationResult = false`\");\n        this.validationResult = false;\n      };\n    }\n    this.validationResult = true;\n\n    // fire validate event to eventually modify things before very validation\n    this._trigger('validate');\n\n    // Refresh form DOM options and form's fields that could have changed\n    this._refreshFields();\n\n    var promises = this._withoutReactualizingFormOptions(() => {\n      return $.map(this.fields, field => {\n        // do not validate a field if not the same as given validation group\n        if (!group || this._isFieldInGroup(field, group))\n          return field.whenValidate(force);\n      });\n    });\n\n    var promiseBasedOnValidationResult = () => {\n      var r = $.Deferred();\n      if (false === this.validationResult)\n        r.reject();\n      return r.resolve().promise();\n    };\n\n    return $.when(...promises)\n      .done(  () => { this._trigger('success'); })\n      .fail(  () => { this.validationResult = false; this._trigger('error'); })\n      .always(() => { this._trigger('validated'); })\n      .pipe(  promiseBasedOnValidationResult, promiseBasedOnValidationResult);\n  },\n\n  // Iterate over refreshed fields, and stop on first failure.\n  // Returns `true` if all fields are valid, `false` if a failure is detected\n  // or `null` if the result depends on an unresolved promise.\n  // Prefer using `whenValid` instead.\n  isValid: function (group, force) {\n    return statusMapping[ this.whenValid(group, force).state() ];\n  },\n\n  // Iterate over refreshed fields and validate them.\n  // Returns a promise.\n  // A validation that immediately fails will interrupt the validations.\n  whenValid: function (group, force) {\n    this._refreshFields();\n\n    var promises = this._withoutReactualizingFormOptions(() => {\n      return $.map(this.fields, field => {\n        // do not validate a field if not the same as given validation group\n        if (!group || this._isFieldInGroup(field, group))\n          return field.whenValid(force);\n      });\n    });\n    return $.when(...promises);\n  },\n\n  _isFieldInGroup: function (field, group) {\n    if ($.isArray(field.options.group))\n      return -1 !== $.inArray(group, field.options.group);\n    return field.options.group === group;\n  },\n\n  _refreshFields: function () {\n    return this.actualizeOptions()._bindFields();\n  },\n\n  _bindFields: function () {\n    var oldFields = this.fields;\n\n    this.fields = [];\n    this.fieldsMappedById = {};\n\n    this._withoutReactualizingFormOptions(() => {\n      this.$element\n      .find(this.options.inputs)\n      .not(this.options.excluded)\n      .each((_, element) => {\n        var fieldInstance = new window.Parsley.Factory(element, {}, this);\n\n        // Only add valid and not excluded `ParsleyField` and `ParsleyFieldMultiple` children\n        if (('ParsleyField' === fieldInstance.__class__ || 'ParsleyFieldMultiple' === fieldInstance.__class__) && (true !== fieldInstance.options.excluded))\n          if ('undefined' === typeof this.fieldsMappedById[fieldInstance.__class__ + '-' + fieldInstance.__id__]) {\n            this.fieldsMappedById[fieldInstance.__class__ + '-' + fieldInstance.__id__] = fieldInstance;\n            this.fields.push(fieldInstance);\n          }\n      });\n\n      $(oldFields).not(this.fields).each((_, field) => {\n        field._trigger('reset');\n      });\n    });\n    return this;\n  },\n\n  // Internal only.\n  // Looping on a form's fields to do validation or similar\n  // will trigger reactualizing options on all of them, which\n  // in turn will reactualize the form's options.\n  // To avoid calling actualizeOptions so many times on the form\n  // for nothing, _withoutReactualizingFormOptions temporarily disables\n  // the method actualizeOptions on this form while `fn` is called.\n  _withoutReactualizingFormOptions: function (fn) {\n    var oldActualizeOptions = this.actualizeOptions;\n    this.actualizeOptions = function () { return this; };\n    var result = fn();\n    this.actualizeOptions = oldActualizeOptions;\n    return result;\n  },\n\n  // Internal only.\n  // Shortcut to trigger an event\n  // Returns true iff event is not interrupted and default not prevented.\n  _trigger: function (eventName) {\n    return this.trigger('form:' + eventName);\n  }\n\n};\n\nexport default ParsleyForm;\n","import $ from 'jquery';\nimport ParsleyUtils from '../utils';\nimport ParsleyValidator from '../validator';\n\n\nvar ConstraintFactory = function (parsleyField, name, requirements, priority, isDomConstraint) {\n  if (!/ParsleyField/.test(parsleyField.__class__))\n    throw new Error('ParsleyField or ParsleyFieldMultiple instance expected');\n\n  var validatorSpec = window.Parsley._validatorRegistry.validators[name];\n  var validator = new ParsleyValidator(validatorSpec);\n\n  $.extend(this, {\n    validator: validator,\n    name: name,\n    requirements: requirements,\n    priority: priority || parsleyField.options[name + 'Priority'] || validator.priority,\n    isDomConstraint: true === isDomConstraint\n  });\n  this._parseRequirements(parsleyField.options);\n};\n\nvar capitalize = function(str) {\n  var cap = str[0].toUpperCase();\n  return cap + str.slice(1);\n};\n\nConstraintFactory.prototype = {\n  validate: function(value, instance) {\n    var args = this.requirementList.slice(0); // Make copy\n    args.unshift(value);\n    args.push(instance);\n    return this.validator.validate.apply(this.validator, args);\n  },\n\n  _parseRequirements: function(options) {\n    this.requirementList = this.validator.parseRequirements(this.requirements, key => {\n      return options[this.name + capitalize(key)];\n    });\n  }\n};\n\nexport default ConstraintFactory;\n\n","import $ from 'jquery';\nimport ConstraintFactory from './factory/constraint';\nimport ParsleyUI from './ui';\nimport ParsleyUtils from './utils';\n\nvar ParsleyField = function (field, domOptions, options, parsleyFormInstance) {\n  this.__class__ = 'ParsleyField';\n  this.__id__ = ParsleyUtils.generateID();\n\n  this.$element = $(field);\n\n  // Set parent if we have one\n  if ('undefined' !== typeof parsleyFormInstance) {\n    this.parent = parsleyFormInstance;\n  }\n\n  this.options = options;\n  this.domOptions = domOptions;\n\n  // Initialize some properties\n  this.constraints = [];\n  this.constraintsByName = {};\n  this.validationResult = [];\n\n  // Bind constraints\n  this._bindConstraints();\n};\n\nvar statusMapping = {pending: null, resolved: true, rejected: false};\n\nParsleyField.prototype = {\n  // # Public API\n  // Validate field and trigger some events for mainly `ParsleyUI`\n  // @returns `true`, an array of the validators that failed, or\n  // `null` if validation is not finished. Prefer using whenValidate\n  validate: function (force) {\n    var promise = this.whenValidate(force);\n    switch (promise.state()) {\n      case 'pending': return null;\n      case 'resolved': return true;\n      case 'rejected': return this.validationResult;\n    }\n  },\n\n  // Validate field and trigger some events for mainly `ParsleyUI`\n  // @returns a promise that succeeds only when all validations do.\n  whenValidate: function (force) {\n    this.value = this.getValue();\n\n    // Field Validate event. `this.value` could be altered for custom needs\n    this._trigger('validate');\n\n    return this.whenValid(force, this.value)\n      .done(() =>   { this._trigger('success'); })\n      .fail(() =>   { this._trigger('error'); })\n      .always(() => { this._trigger('validated'); });\n  },\n\n  hasConstraints: function () {\n    return 0 !== this.constraints.length;\n  },\n\n  // An empty optional field does not need validation\n  needsValidation: function (value) {\n    if ('undefined' === typeof value)\n      value = this.getValue();\n\n    // If a field is empty and not required, it is valid\n    // Except if `data-parsley-validate-if-empty` explicitely added, useful for some custom validators\n    if (!value.length && !this._isRequired() && 'undefined' === typeof this.options.validateIfEmpty)\n      return false;\n\n    return true;\n  },\n\n  // Just validate field. Do not trigger any event.\n  // Returns `true` iff all constraints pass, `false` if there are failures,\n  // or `null` if the result can not be determined yet (depends on a promise)\n  // See also `whenValid`.\n  isValid: function (force, value) {\n    return statusMapping[this.whenValid(force, value).state()];\n  },\n\n  // Just validate field. Do not trigger any event.\n  // @returns a promise that succeeds only when all validations do.\n  // The argument `force` is optional, defaults to `false`.\n  // The argument `value` is optional. If given, it will be validated instead of the value of the input.\n  whenValid: function (force, value) {\n    // Recompute options and rebind constraints to have latest changes\n    this.refreshConstraints();\n    this.validationResult = true;\n\n    // A field without constraint is valid\n    if (!this.hasConstraints())\n      return $.when();\n\n    // Make `force` argument optional\n    if ('boolean' !== typeof force && 'undefined' === typeof value) {\n      value = force;\n      force = false;\n    }\n    // Value could be passed as argument, needed to add more power to 'parsley:field:validate'\n    if ('undefined' === typeof value || null === value)\n      value = this.getValue();\n\n    if (!this.needsValidation(value) && true !== force)\n      return $.when();\n\n    var groupedConstraints = this._getGroupedConstraints();\n    var promises = [];\n    $.each(groupedConstraints, (_, constraints) => {\n      // Process one group of constraints at a time, we validate the constraints\n      // and combine the promises together.\n      var promise = $.when(\n        ...$.map(constraints, constraint => this._validateConstraint(value, constraint))\n      );\n      promises.push(promise);\n      if (promise.state() === 'rejected')\n        return false; // Interrupt processing if a group has already failed\n    });\n    return $.when.apply($, promises);\n  },\n\n  // @returns a promise\n  _validateConstraint: function(value, constraint) {\n    var result = constraint.validate(value, this);\n    // Map false to a failed promise\n    if (false === result)\n      result = $.Deferred().reject();\n    // Make sure we return a promise and that we record failures\n    return $.when(result).fail(errorMessage => {\n      if (true === this.validationResult)\n        this.validationResult = [];\n      this.validationResult.push({\n        assert: constraint,\n        errorMessage: 'string' === typeof errorMessage && errorMessage\n      });\n    });\n  },\n\n  // @returns Parsley field computed value that could be overrided or configured in DOM\n  getValue: function () {\n    var value;\n\n    // Value could be overriden in DOM or with explicit options\n    if ('function' === typeof this.options.value)\n      value = this.options.value(this);\n    else if ('undefined' !== typeof this.options.value)\n      value = this.options.value;\n    else\n      value = this.$element.val();\n\n    // Handle wrong DOM or configurations\n    if ('undefined' === typeof value || null === value)\n      return '';\n\n    return this._handleWhitespace(value);\n  },\n\n  // Actualize options that could have change since previous validation\n  // Re-bind accordingly constraints (could be some new, removed or updated)\n  refreshConstraints: function () {\n    return this.actualizeOptions()._bindConstraints();\n  },\n\n  /**\n  * Add a new constraint to a field\n  *\n  * @param {String}   name\n  * @param {Mixed}    requirements      optional\n  * @param {Number}   priority          optional\n  * @param {Boolean}  isDomConstraint   optional\n  */\n  addConstraint: function (name, requirements, priority, isDomConstraint) {\n\n    if (window.Parsley._validatorRegistry.validators[name]) {\n      var constraint = new ConstraintFactory(this, name, requirements, priority, isDomConstraint);\n\n      // if constraint already exist, delete it and push new version\n      if ('undefined' !== this.constraintsByName[constraint.name])\n        this.removeConstraint(constraint.name);\n\n      this.constraints.push(constraint);\n      this.constraintsByName[constraint.name] = constraint;\n    }\n\n    return this;\n  },\n\n  // Remove a constraint\n  removeConstraint: function (name) {\n    for (var i = 0; i < this.constraints.length; i++)\n      if (name === this.constraints[i].name) {\n        this.constraints.splice(i, 1);\n        break;\n      }\n    delete this.constraintsByName[name];\n    return this;\n  },\n\n  // Update a constraint (Remove + re-add)\n  updateConstraint: function (name, parameters, priority) {\n    return this.removeConstraint(name)\n      .addConstraint(name, parameters, priority);\n  },\n\n  // # Internals\n\n  // Internal only.\n  // Bind constraints from config + options + DOM\n  _bindConstraints: function () {\n    var constraints = [];\n    var constraintsByName = {};\n\n    // clean all existing DOM constraints to only keep javascript user constraints\n    for (var i = 0; i < this.constraints.length; i++)\n      if (false === this.constraints[i].isDomConstraint) {\n        constraints.push(this.constraints[i]);\n        constraintsByName[this.constraints[i].name] = this.constraints[i];\n      }\n\n    this.constraints = constraints;\n    this.constraintsByName = constraintsByName;\n\n    // then re-add Parsley DOM-API constraints\n    for (var name in this.options)\n      this.addConstraint(name, this.options[name], undefined, true);\n\n    // finally, bind special HTML5 constraints\n    return this._bindHtml5Constraints();\n  },\n\n  // Internal only.\n  // Bind specific HTML5 constraints to be HTML5 compliant\n  _bindHtml5Constraints: function () {\n    // html5 required\n    if (this.$element.hasClass('required') || this.$element.attr('required'))\n      this.addConstraint('required', true, undefined, true);\n\n    // html5 pattern\n    if ('string' === typeof this.$element.attr('pattern'))\n      this.addConstraint('pattern', this.$element.attr('pattern'), undefined, true);\n\n    // range\n    if ('undefined' !== typeof this.$element.attr('min') && 'undefined' !== typeof this.$element.attr('max'))\n      this.addConstraint('range', [this.$element.attr('min'), this.$element.attr('max')], undefined, true);\n\n    // HTML5 min\n    else if ('undefined' !== typeof this.$element.attr('min'))\n      this.addConstraint('min', this.$element.attr('min'), undefined, true);\n\n    // HTML5 max\n    else if ('undefined' !== typeof this.$element.attr('max'))\n      this.addConstraint('max', this.$element.attr('max'), undefined, true);\n\n\n    // length\n    if ('undefined' !== typeof this.$element.attr('minlength') && 'undefined' !== typeof this.$element.attr('maxlength'))\n      this.addConstraint('length', [this.$element.attr('minlength'), this.$element.attr('maxlength')], undefined, true);\n\n    // HTML5 minlength\n    else if ('undefined' !== typeof this.$element.attr('minlength'))\n      this.addConstraint('minlength', this.$element.attr('minlength'), undefined, true);\n\n    // HTML5 maxlength\n    else if ('undefined' !== typeof this.$element.attr('maxlength'))\n      this.addConstraint('maxlength', this.$element.attr('maxlength'), undefined, true);\n\n\n    // html5 types\n    var type = this.$element.attr('type');\n\n    if ('undefined' === typeof type)\n      return this;\n\n    // Small special case here for HTML5 number: integer validator if step attribute is undefined or an integer value, number otherwise\n    if ('number' === type) {\n      if (('undefined' === typeof this.$element.attr('step')) || (0 === parseFloat(this.$element.attr('step')) % 1)) {\n        return this.addConstraint('type', 'integer', undefined, true);\n      } else {\n        return this.addConstraint('type', 'number', undefined, true);\n      }\n    // Regular other HTML5 supported types\n    } else if (/^(email|url|range)$/i.test(type)) {\n      return this.addConstraint('type', type, undefined, true);\n    }\n    return this;\n  },\n\n  // Internal only.\n  // Field is required if have required constraint without `false` value\n  _isRequired: function () {\n    if ('undefined' === typeof this.constraintsByName.required)\n      return false;\n\n    return false !== this.constraintsByName.required.requirements;\n  },\n\n  // Internal only.\n  // Shortcut to trigger an event\n  _trigger: function (eventName) {\n    return this.trigger('field:' + eventName);\n  },\n\n  // Internal only\n  // Handles whitespace in a value\n  // Use `data-parsley-whitespace=\"squish\"` to auto squish input value\n  // Use `data-parsley-whitespace=\"trim\"` to auto trim input value\n  _handleWhitespace: function (value) {\n    if (true === this.options.trimValue)\n      ParsleyUtils.warnOnce('data-parsley-trim-value=\"true\" is deprecated, please use data-parsley-whitespace=\"trim\"');\n\n    if ('squish' === this.options.whitespace)\n      value = value.replace(/\\s{2,}/g, ' ');\n\n    if (('trim' === this.options.whitespace) || ('squish' === this.options.whitespace) || (true === this.options.trimValue))\n      value = ParsleyUtils.trimString(value);\n\n    return value;\n  },\n\n  // Internal only.\n  // Returns the constraints, grouped by descending priority.\n  // The result is thus an array of arrays of constraints.\n  _getGroupedConstraints: function () {\n    if (false === this.options.priorityEnabled)\n      return [this.constraints];\n\n    var groupedConstraints = [];\n    var index = {};\n\n    // Create array unique of priorities\n    for (var i = 0; i < this.constraints.length; i++) {\n      var p = this.constraints[i].priority;\n      if (!index[p])\n        groupedConstraints.push(index[p] = []);\n      index[p].push(this.constraints[i]);\n    }\n    // Sort them by priority DESC\n    groupedConstraints.sort(function (a, b) { return b[0].priority - a[0].priority; });\n\n    return groupedConstraints;\n  }\n\n};\n\nexport default ParsleyField;\n","import $ from 'jquery';\n\nvar ParsleyMultiple = function () {\n  this.__class__ = 'ParsleyFieldMultiple';\n};\n\nParsleyMultiple.prototype = {\n  // Add new `$element` sibling for multiple field\n  addElement: function ($element) {\n    this.$elements.push($element);\n\n    return this;\n  },\n\n  // See `ParsleyField.refreshConstraints()`\n  refreshConstraints: function () {\n    var fieldConstraints;\n\n    this.constraints = [];\n\n    // Select multiple special treatment\n    if (this.$element.is('select')) {\n      this.actualizeOptions()._bindConstraints();\n\n      return this;\n    }\n\n    // Gather all constraints for each input in the multiple group\n    for (var i = 0; i < this.$elements.length; i++) {\n\n      // Check if element have not been dynamically removed since last binding\n      if (!$('html').has(this.$elements[i]).length) {\n        this.$elements.splice(i, 1);\n        continue;\n      }\n\n      fieldConstraints = this.$elements[i].data('ParsleyFieldMultiple').refreshConstraints().constraints;\n\n      for (var j = 0; j < fieldConstraints.length; j++)\n        this.addConstraint(fieldConstraints[j].name, fieldConstraints[j].requirements, fieldConstraints[j].priority, fieldConstraints[j].isDomConstraint);\n    }\n\n    return this;\n  },\n\n  // See `ParsleyField.getValue()`\n  getValue: function () {\n    // Value could be overriden in DOM\n    if ('function' === typeof this.options.value)\n      value = this.options.value(this);\n    else if ('undefined' !== typeof this.options.value)\n      return this.options.value;\n\n    // Radio input case\n    if (this.$element.is('input[type=radio]'))\n      return this._findRelated().filter(':checked').val() || '';\n\n    // checkbox input case\n    if (this.$element.is('input[type=checkbox]')) {\n      var values = [];\n\n      this._findRelated().filter(':checked').each(function () {\n        values.push($(this).val());\n      });\n\n      return values;\n    }\n\n    // Select multiple case\n    if (this.$element.is('select') && null === this.$element.val())\n      return [];\n\n    // Default case that should never happen\n    return this.$element.val();\n  },\n\n  _init: function () {\n    this.$elements = [this.$element];\n\n    return this;\n  }\n};\n\nexport default ParsleyMultiple;\n","import $ from 'jquery';\nimport ParsleyUtils from './utils';\nimport ParsleyAbstract from './abstract';\nimport ParsleyForm from './form';\nimport ParsleyField from './field';\nimport ParsleyMultiple from './multiple';\n\nvar ParsleyFactory = function (element, options, parsleyFormInstance) {\n  this.$element = $(element);\n\n  // If the element has already been bound, returns its saved Parsley instance\n  var savedparsleyFormInstance = this.$element.data('Parsley');\n  if (savedparsleyFormInstance) {\n\n    // If the saved instance has been bound without a ParsleyForm parent and there is one given in this call, add it\n    if ('undefined' !== typeof parsleyFormInstance && savedparsleyFormInstance.parent === window.Parsley) {\n      savedparsleyFormInstance.parent = parsleyFormInstance;\n      savedparsleyFormInstance._resetOptions(savedparsleyFormInstance.options);\n    }\n\n    return savedparsleyFormInstance;\n  }\n\n  // Parsley must be instantiated with a DOM element or jQuery $element\n  if (!this.$element.length)\n    throw new Error('You must bind Parsley on an existing element.');\n\n  if ('undefined' !== typeof parsleyFormInstance && 'ParsleyForm' !== parsleyFormInstance.__class__)\n    throw new Error('Parent instance must be a ParsleyForm instance');\n\n  this.parent = parsleyFormInstance || window.Parsley;\n  return this.init(options);\n};\n\nParsleyFactory.prototype = {\n  init: function (options) {\n    this.__class__ = 'Parsley';\n    this.__version__ = '@@version';\n    this.__id__ = ParsleyUtils.generateID();\n\n    // Pre-compute options\n    this._resetOptions(options);\n\n    // A ParsleyForm instance is obviously a `<form>` element but also every node that is not an input and has the `data-parsley-validate` attribute\n    if (this.$element.is('form') || (ParsleyUtils.checkAttr(this.$element, this.options.namespace, 'validate') && !this.$element.is(this.options.inputs)))\n      return this.bind('parsleyForm');\n\n    // Every other element is bound as a `ParsleyField` or `ParsleyFieldMultiple`\n    return this.isMultiple() ? this.handleMultiple() : this.bind('parsleyField');\n  },\n\n  isMultiple: function () {\n    return (this.$element.is('input[type=radio], input[type=checkbox]')) || (this.$element.is('select') && 'undefined' !== typeof this.$element.attr('multiple'));\n  },\n\n  // Multiples fields are a real nightmare :(\n  // Maybe some refactoring would be appreciated here...\n  handleMultiple: function () {\n    var name;\n    var multiple;\n    var parsleyMultipleInstance;\n\n    // Handle multiple name\n    if (this.options.multiple)\n      ; // We already have our 'multiple' identifier\n    else if ('undefined' !== typeof this.$element.attr('name') && this.$element.attr('name').length)\n      this.options.multiple = name = this.$element.attr('name');\n    else if ('undefined' !== typeof this.$element.attr('id') && this.$element.attr('id').length)\n      this.options.multiple = this.$element.attr('id');\n\n    // Special select multiple input\n    if (this.$element.is('select') && 'undefined' !== typeof this.$element.attr('multiple')) {\n      this.options.multiple = this.options.multiple || this.__id__;\n      return this.bind('parsleyFieldMultiple');\n\n    // Else for radio / checkboxes, we need a `name` or `data-parsley-multiple` to properly bind it\n    } else if (!this.options.multiple) {\n      ParsleyUtils.warn('To be bound by Parsley, a radio, a checkbox and a multiple select input must have either a name or a multiple option.', this.$element);\n      return this;\n    }\n\n    // Remove special chars\n    this.options.multiple = this.options.multiple.replace(/(:|\\.|\\[|\\]|\\{|\\}|\\$)/g, '');\n\n    // Add proper `data-parsley-multiple` to siblings if we have a valid multiple name\n    if ('undefined' !== typeof name) {\n      $('input[name=\"' + name + '\"]').each((i, input) => {\n        if ($(input).is('input[type=radio], input[type=checkbox]'))\n          $(input).attr(this.options.namespace + 'multiple', this.options.multiple);\n      });\n    }\n\n    // Check here if we don't already have a related multiple instance saved\n    var $previouslyRelated = this._findRelated();\n    for (var i = 0; i < $previouslyRelated.length; i++) {\n      parsleyMultipleInstance = $($previouslyRelated.get(i)).data('Parsley');\n      if ('undefined' !== typeof parsleyMultipleInstance) {\n\n        if (!this.$element.data('ParsleyFieldMultiple')) {\n          parsleyMultipleInstance.addElement(this.$element);\n        }\n\n        break;\n      }\n    }\n\n    // Create a secret ParsleyField instance for every multiple field. It will be stored in `data('ParsleyFieldMultiple')`\n    // And will be useful later to access classic `ParsleyField` stuff while being in a `ParsleyFieldMultiple` instance\n    this.bind('parsleyField', true);\n\n    return parsleyMultipleInstance || this.bind('parsleyFieldMultiple');\n  },\n\n  // Return proper `ParsleyForm`, `ParsleyField` or `ParsleyFieldMultiple`\n  bind: function (type, doNotStore) {\n    var parsleyInstance;\n\n    switch (type) {\n      case 'parsleyForm':\n        parsleyInstance = $.extend(\n          new ParsleyForm(this.$element, this.domOptions, this.options),\n          window.ParsleyExtend\n        )._bindFields();\n        break;\n      case 'parsleyField':\n        parsleyInstance = $.extend(\n          new ParsleyField(this.$element, this.domOptions, this.options, this.parent),\n          window.ParsleyExtend\n        );\n        break;\n      case 'parsleyFieldMultiple':\n        parsleyInstance = $.extend(\n          new ParsleyField(this.$element, this.domOptions, this.options, this.parent),\n          new ParsleyMultiple(),\n          window.ParsleyExtend\n        )._init();\n        break;\n      default:\n        throw new Error(type + 'is not a supported Parsley type');\n    }\n\n    if (this.options.multiple)\n      ParsleyUtils.setAttr(this.$element, this.options.namespace, 'multiple', this.options.multiple);\n\n    if ('undefined' !== typeof doNotStore) {\n      this.$element.data('ParsleyFieldMultiple', parsleyInstance);\n\n      return parsleyInstance;\n    }\n\n    // Store the freshly bound instance in a DOM element for later access using jQuery `data()`\n    this.$element.data('Parsley', parsleyInstance);\n\n    // Tell the world we have a new ParsleyForm or ParsleyField instance!\n    parsleyInstance._trigger('init');\n\n    return parsleyInstance;\n  }\n};\n\nexport default ParsleyFactory;\n","import $ from 'jquery';\nimport ParsleyUtils from './utils';\nimport ParsleyDefaults from './defaults';\nimport ParsleyAbstract from './abstract';\nimport ParsleyValidatorRegistry from './validator_registry';\nimport ParsleyUI from './ui';\nimport ParsleyForm from './form';\nimport ParsleyField from './field';\nimport ParsleyMultiple from './multiple';\nimport ParsleyFactory from './factory';\n\nvar vernums = $.fn.jquery.split('.');\nif (parseInt(vernums[0]) <= 1 && parseInt(vernums[1]) < 8) {\n  throw \"The loaded version of jQuery is too old. Please upgrade to 1.8.x or better.\";\n}\nif (!vernums.forEach) {\n  ParsleyUtils.warn('Parsley requires ES5 to run properly. Please include https://github.com/es-shims/es5-shim');\n}\n// Inherit `on`, `off` & `trigger` to Parsley:\nvar Parsley = $.extend(new ParsleyAbstract(), {\n    $element: $(document),\n    actualizeOptions: null,\n    _resetOptions: null,\n    Factory: ParsleyFactory,\n    version: '@@version'\n  });\n\n// Supplement ParsleyField and Form with ParsleyAbstract\n// This way, the constructors will have access to those methods\n$.extend(ParsleyField.prototype, ParsleyAbstract.prototype);\n$.extend(ParsleyForm.prototype, ParsleyAbstract.prototype);\n// Inherit actualizeOptions and _resetOptions:\n$.extend(ParsleyFactory.prototype, ParsleyAbstract.prototype);\n\n// ### jQuery API\n// `$('.elem').parsley(options)` or `$('.elem').psly(options)`\n$.fn.parsley = $.fn.psly = function (options) {\n  if (this.length > 1) {\n    var instances = [];\n\n    this.each(function () {\n      instances.push($(this).parsley(options));\n    });\n\n    return instances;\n  }\n\n  // Return undefined if applied to non existing DOM element\n  if (!$(this).length) {\n    ParsleyUtils.warn('You must bind Parsley on an existing element.');\n\n    return;\n  }\n\n  return new ParsleyFactory(this, options);\n};\n\n// ### ParsleyField and ParsleyForm extension\n// Ensure the extension is now defined if it wasn't previously\nif ('undefined' === typeof window.ParsleyExtend)\n  window.ParsleyExtend = {};\n\n// ### Parsley config\n// Inherit from ParsleyDefault, and copy over any existing values\nParsley.options = $.extend(ParsleyUtils.objectCreate(ParsleyDefaults), window.ParsleyConfig);\nwindow.ParsleyConfig = Parsley.options; // Old way of accessing global options\n\n// ### Globals\nwindow.Parsley = window.psly = Parsley;\nwindow.ParsleyUtils = ParsleyUtils;\n\n// ### Define methods that forward to the registry, and deprecate all access except through window.Parsley\nvar registry = window.Parsley._validatorRegistry = new ParsleyValidatorRegistry(window.ParsleyConfig.validators, window.ParsleyConfig.i18n);\nwindow.ParsleyValidator = {};\n$.each('setLocale addCatalog addMessage addMessages getErrorMessage formatMessage addValidator updateValidator removeValidator'.split(' '), function (i, method) {\n  window.Parsley[method] = $.proxy(registry, method);\n  window.ParsleyValidator[method] = function () {\n    ParsleyUtils.warnOnce(`Accessing the method '${method}' through ParsleyValidator is deprecated. Simply call 'window.Parsley.${method}(...)'`);\n    return window.Parsley[method](...arguments);\n  };\n});\n\n// ### ParsleyUI\n// UI is a separate class that only listens to some events and then modifies the DOM accordingly\n// Could be overriden by defining a `window.ParsleyConfig.ParsleyUI` appropriate class (with `listen()` method basically)\nwindow.ParsleyUI = 'function' === typeof window.ParsleyConfig.ParsleyUI ?\n  new window.ParsleyConfig.ParsleyUI().listen() : new ParsleyUI().listen();\n\n// ### PARSLEY auto-binding\n// Prevent it by setting `ParsleyConfig.autoBind` to `false`\nif (false !== window.ParsleyConfig.autoBind) {\n  $(function () {\n    // Works only on `data-parsley-validate`.\n    if ($('[data-parsley-validate]').length)\n      $('[data-parsley-validate]').parsley();\n  });\n}\n\nexport default Parsley;\n","import $ from 'jquery';\n\nimport Parsley from './main';\n\n$.extend(true, Parsley, {\n  asyncValidators: {\n    'default': {\n      fn: function (xhr) {\n        // By default, only status 2xx are deemed successful.\n        // Note: we use status instead of state() because responses with status 200\n        // but invalid messages (e.g. an empty body for content type set to JSON) will\n        // result in state() === 'rejected'.\n        return xhr.status >= 200 && xhr.status < 300;\n      },\n      url: false\n    },\n    reverse: {\n      fn: function (xhr) {\n        // If reverse option is set, a failing ajax request is considered successful\n        return xhr.status < 200 || xhr.status >= 300;\n      },\n      url: false\n    }\n  },\n\n  addAsyncValidator: function (name, fn, url, options) {\n    Parsley.asyncValidators[name] = {\n      fn: fn,\n      url: url || false,\n      options: options || {}\n    };\n\n    return this;\n  }\n\n});\n\nParsley.addValidator('remote', {\n  requirementType: {\n    '': 'string',\n    'validator': 'string',\n    'reverse': 'boolean',\n    'options': 'object'\n  },\n\n  validateString: function (value, url, options, instance) {\n    var data = {};\n    var ajaxOptions;\n    var csr;\n    var validator = options.validator || (true === options.reverse ? 'reverse' : 'default');\n\n    if ('undefined' === typeof Parsley.asyncValidators[validator])\n      throw new Error('Calling an undefined async validator: `' + validator + '`');\n\n    url = Parsley.asyncValidators[validator].url || url;\n\n    // Fill current value\n    if (url.indexOf('{value}') > -1) {\n      url = url.replace('{value}', encodeURIComponent(value));\n    } else {\n      data[instance.$element.attr('name') || instance.$element.attr('id')] = value;\n    }\n\n    // Merge options passed in from the function with the ones in the attribute\n    var remoteOptions = $.extend(true, options.options || {} , Parsley.asyncValidators[validator].options);\n\n    // All `$.ajax(options)` could be overridden or extended directly from DOM in `data-parsley-remote-options`\n    ajaxOptions = $.extend(true, {}, {\n      url: url,\n      data: data,\n      type: 'GET'\n    }, remoteOptions);\n\n    // Generate store key based on ajax options\n    instance.trigger('field:ajaxoptions', instance, ajaxOptions);\n\n    csr = $.param(ajaxOptions);\n\n    // Initialise querry cache\n    if ('undefined' === typeof Parsley._remoteCache)\n      Parsley._remoteCache = {};\n\n    // Try to retrieve stored xhr\n    var xhr = Parsley._remoteCache[csr] = Parsley._remoteCache[csr] || $.ajax(ajaxOptions);\n\n    var handleXhr = function () {\n      var result = Parsley.asyncValidators[validator].fn.call(instance, xhr, url, options);\n      if (!result) // Map falsy results to rejected promise\n        result = $.Deferred().reject();\n      return $.when(result);\n    };\n\n    return xhr.then(handleXhr, handleXhr);\n  },\n\n  priority: -1\n});\n\nParsley.on('form:submit', function () {\n  Parsley._remoteCache = {};\n});\n\nwindow.ParsleyExtend.addAsyncValidator = function () {\n  ParsleyUtils.warnOnce('Accessing the method `addAsyncValidator` through an instance is deprecated. Simply call `Parsley.addAsyncValidator(...)`');\n  return Parsley.addAsyncValidator(...arguments);\n};\n","// This is included with the Parsley library itself,\n// thus there is no use in adding it to your project.\nimport Parsley from '../parsley/main';\n\nParsley.addMessages('en', {\n  defaultMessage: \"This value seems to be invalid.\",\n  type: {\n    email:        \"This value should be a valid email.\",\n    url:          \"This value should be a valid url.\",\n    number:       \"This value should be a valid number.\",\n    integer:      \"This value should be a valid integer.\",\n    digits:       \"This value should be digits.\",\n    alphanum:     \"This value should be alphanumeric.\"\n  },\n  notblank:       \"This value should not be blank.\",\n  required:       \"This value is required.\",\n  pattern:        \"This value seems to be invalid.\",\n  min:            \"This value should be greater than or equal to %s.\",\n  max:            \"This value should be lower than or equal to %s.\",\n  range:          \"This value should be between %s and %s.\",\n  minlength:      \"This value is too short. It should have %s characters or more.\",\n  maxlength:      \"This value is too long. It should have %s characters or fewer.\",\n  length:         \"This value length is invalid. It should be between %s and %s characters long.\",\n  mincheck:       \"You must select at least %s choices.\",\n  maxcheck:       \"You must select %s choices or fewer.\",\n  check:          \"You must select between %s and %s choices.\",\n  equalto:        \"This value should be the same.\"\n});\n\nParsley.setLocale('en');\n","import $ from 'jquery';\nimport Parsley from './parsley/main';\nimport './parsley/pubsub';\nimport './parsley/remote';\nimport './i18n/en';\n\nexport default Parsley;\n"],"sourceRoot":"/source/"}