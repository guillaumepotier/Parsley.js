{"version":3,"sources":["parsley.min.js","/source/parsley.js","/source/src/parsley/pubsub.js","/source/src/parsley/utils.js","/source/src/parsley/defaults.js","/source/src/parsley/abstract.js","/source/src/parsley/validator.js","/source/src/parsley/validator_registry.js","/source/src/parsley/ui.js","/source/src/parsley/form.js","/source/src/parsley/factory/constraint.js","/source/src/parsley/field.js","/source/src/parsley/multiple.js","/source/src/parsley/factory.js","/source/src/parsley/main.js","/source/src/parsley/remote.js","/source/src/i18n/en.js","/source/src/parsley.js"],"names":["_toConsumableArray","arr","Array","isArray","i","arr2","length","from","_slice","prototype","slice","global","factory","exports","module","require","define","amd","parsley","jQuery","this","$","adapt","fn","context","parsleyAdaptedCallback","args","call","arguments","unshift","apply","o","eventName","name","lastIndexOf","eventPrefix","substr","globalID","pastWarnings","ParsleyUtils__ParsleyUtils","attr","$element","namespace","obj","attribute","attributes","regex","RegExp","hasOwnProperty","specified","test","camelize","deserializeValue","value","checkAttr","_checkAttr","is","setAttr","setAttribute","dasherize","String","generateID","num","isNaN","Number","parseJSON","e","str","replace","match","chr","toUpperCase","toLowerCase","warn","_window$console","window","console","warnOnce","msg","_resetWarnings","trimString","string","namespaceEvents","events","split","map","evt","join","objectCreate","Object","create","Error","TypeError","result","ParsleyUtils__default","ParsleyDefaults","inputs","excluded","priorityEnabled","multiple","group","uiEnabled","validationThreshold","focus","trigger","triggerAfterFailure","errorClass","successClass","classHandler","ParsleyField","errorsContainer","errorsWrapper","errorTemplate","ParsleyAbstract","asyncSupport","actualizeOptions","options","domOptions","parent","_resetOptions","initOptions","_listeners","on","queue","push","subscribe","listenTo","off","splice","unsubscribe","unsubscribeTo","target","extraArg","reset","__class__","_resetUI","_trigger","fields","destroy","_destroyUI","removeData","asyncIsValid","force","whenValid","_findRelated","find","requirementConverters","_string","integer","parseInt","number","parseFloat","reference","boolean","object","regexp","_regexp","flags","convertArrayRequirement","m","values","convertRequirement","requirementType","converter","convertExtraOptionRequirement","requirementSpec","extraOptionReader","main","extra","key","ParsleyValidator","spec","extend","validate","requirementFirstArg","validateMultiple","validateNumber","validateString","parseRequirements","requirements","type","isPlainObject","priority","ParsleyValidatorRegistry","validators","catalog","locale","init","typeRegexes","email","digits","alphanum","url","range","decimalPlaces","Math","max","addValidator","Parsley","setLocale","addCatalog","messages","set","addMessage","message","addMessages","nameMessageObject","arg1","arg2","_setValidator","updateValidator","removeValidator","validator","getErrorMessage","constraint","typeMessages","formatMessage","defaultMessage","en","parameters","notblank","required","_ref","undefined","_ref$step","step","_ref$base","base","nb","decimals","toInt","f","round","pow","","pattern","minlength","requirement","maxlength","min","mincheck","maxcheck","check","equalto","refOrValue","$reference","val","ParsleyUI","diffResults","newResult","oldResult","deep","added","kept","found","j","assert","removed","Form","_actualizeTriggers","_this","onSubmitValidate","onSubmitButton","_focusedField","validationResult","field","noFocus","Field","_reflowUI","_buildUI","_ui","diff","lastValidationResult","_manageStatusClass","_manageErrorsMessages","_failedOnce","getErrorsMessages","errorMessage","_getErrorMessage","addError","_ref2","_ref2$updateClass","updateClass","_addError","_errorClass","updateError","_ref3","_ref3$updateClass","_updateError","removeError","_ref4","_ref4$updateClass","_removeError","hasConstraints","needsValidation","_successClass","_resetClass","errorsMessagesDisabled","_insertErrorWrapper","$errorsWrapper","append","addClass","html","removeClass","remove","_ref5","_ref6","customConstraintErrorMessage","__id__","$errorClassHandler","_manageClassHandler","errorsWrapperId","validationInformationVisible","$handler","$errorsContainer","$from","after","_this2","$toBind","event","_eventValidate","getValue","children","ParsleyForm","element","ParsleyForm__statusMapping","pending","resolved","rejected","_this3","$submitSource","_$submitSource","first","prop","promise","whenValidate","state","stopImmediatePropagation","preventDefault","done","_submit","$synthetic","appendTo","Event","_arguments","_this4","_ref7","submitEvent","_refreshFields","promises","_withoutReactualizingFormOptions","promiseBasedOnValidationResult","r","Deferred","reject","resolve","when","fail","always","pipe","isValid","_arguments2","_this5","_ref8","_bindFields","_this6","oldFields","fieldsMappedById","not","each","_","fieldInstance","Factory","oldActualizeOptions","ConstraintFactory","parsleyField","isDomConstraint","validatorSpec","_validatorRegistry","_parseRequirements","capitalize","cap","instance","requirementList","_this7","parsleyFormInstance","constraints","constraintsByName","_bindConstraints","parsley_field__statusMapping","_this8","_ref9","refreshConstraints","_isInGroup","_refreshed","_isRequired","validateIfEmpty","inArray","_arguments3","_this9","_ref10","_ref10$force","groupedConstraints","_getGroupedConstraints","_validateConstraint","_this10","_handleWhitespace","addConstraint","removeConstraint","updateConstraint","_bindHtml5Constraints","hasClass","trimValue","whitespace","index","p","sort","a","b","parsley_field","ParsleyMultiple","addElement","$elements","fieldConstraints","has","data","filter","_init","ParsleyFactory","savedparsleyFormInstance","__version__","bind","isMultiple","handleMultiple","parsleyMultipleInstance","_this11","input","$previouslyRelated","get","doNotStore","parsleyInstance","ParsleyExtend","vernums","jquery","forEach","document","version","psly","instances","ParsleyConfig","ParsleyUtils","registry","i18n","method","proxy","_window$Parsley","UI","doNotUpdateClass","navigator","userAgent","autoBind","deprecated","listen","callback","unsubscribeAll","emit","_instance","instanceGiven","asyncValidators","default","xhr","status","reverse","addAsyncValidator","ajaxOptions","csr","indexOf","encodeURIComponent","remoteOptions","useCache","param","_remoteCache","ajax","handleXhr","then"],"mappings":"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","file":"parsley.min.js","sourcesContent":["/*!\r\n* Parsley.js\r\n* Version 2.3.5 - built Mon, Feb 29th 2016, 10:44 am\r\n* http://parsleyjs.org\r\n* Guillaume Potier - <guillaume@wisembly.com>\r\n* Marc-Andre Lafortune - <petroselinum@marc-andre.ca>\r\n* MIT Licensed\r\n*/\r\n\r\n// The source code below is generated by babel as\r\n// Parsley is written in ECMAScript 6\r\n//\r\nvar _slice = Array.prototype.slice;\n\nfunction _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) arr2[i] = arr[i]; return arr2; } else { return Array.from(arr); } }\n\n(function (global, factory) {\n  typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory(require('jquery')) : typeof define === 'function' && define.amd ? define(['jquery'], factory) : global.parsley = factory(global.jQuery);\n})(this, function ($) {\n  'use strict';\n\n  var globalID = 1;\n  var pastWarnings = {};\n\n  var ParsleyUtils__ParsleyUtils = {\n    // Parsley DOM-API\n    // returns object from dom attributes and values\n    attr: function attr($element, namespace, obj) {\n      var i;\n      var attribute;\n      var attributes;\n      var regex = new RegExp('^' + namespace, 'i');\n\n      if ('undefined' === typeof obj) obj = {};else {\n        // Clear all own properties. This won't affect prototype's values\n        for (i in obj) {\n          if (obj.hasOwnProperty(i)) delete obj[i];\n        }\n      }\n\n      if ('undefined' === typeof $element || 'undefined' === typeof $element[0]) return obj;\n\n      attributes = $element[0].attributes;\n      for (i = attributes.length; i--;) {\n        attribute = attributes[i];\n\n        if (attribute && attribute.specified && regex.test(attribute.name)) {\n          obj[this.camelize(attribute.name.slice(namespace.length))] = this.deserializeValue(attribute.value);\n        }\n      }\n\n      return obj;\n    },\n\n    checkAttr: function checkAttr($element, namespace, _checkAttr) {\n      return $element.is('[' + namespace + _checkAttr + ']');\n    },\n\n    setAttr: function setAttr($element, namespace, attr, value) {\n      $element[0].setAttribute(this.dasherize(namespace + attr), String(value));\n    },\n\n    generateID: function generateID() {\n      return '' + globalID++;\n    },\n\n    /** Third party functions **/\n    // Zepto deserialize function\n    deserializeValue: function deserializeValue(value) {\n      var num;\n\n      try {\n        return value ? value == \"true\" || (value == \"false\" ? false : value == \"null\" ? null : !isNaN(num = Number(value)) ? num : /^[\\[\\{]/.test(value) ? $.parseJSON(value) : value) : value;\n      } catch (e) {\n        return value;\n      }\n    },\n\n    // Zepto camelize function\n    camelize: function camelize(str) {\n      return str.replace(/-+(.)?/g, function (match, chr) {\n        return chr ? chr.toUpperCase() : '';\n      });\n    },\n\n    // Zepto dasherize function\n    dasherize: function dasherize(str) {\n      return str.replace(/::/g, '/').replace(/([A-Z]+)([A-Z][a-z])/g, '$1_$2').replace(/([a-z\\d])([A-Z])/g, '$1_$2').replace(/_/g, '-').toLowerCase();\n    },\n\n    warn: function warn() {\n      var _window$console;\n\n      if (window.console && 'function' === typeof window.console.warn) (_window$console = window.console).warn.apply(_window$console, arguments);\n    },\n\n    warnOnce: function warnOnce(msg) {\n      if (!pastWarnings[msg]) {\n        pastWarnings[msg] = true;\n        this.warn.apply(this, arguments);\n      }\n    },\n\n    _resetWarnings: function _resetWarnings() {\n      pastWarnings = {};\n    },\n\n    trimString: function trimString(string) {\n      return string.replace(/^\\s+|\\s+$/g, '');\n    },\n\n    namespaceEvents: function namespaceEvents(events, namespace) {\n      events = this.trimString(events || '').split(/\\s+/);\n      if (!events[0]) return '';\n      return $.map(events, function (evt) {\n        return evt + '.' + namespace;\n      }).join(' ');\n    },\n\n    // Object.create polyfill, see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/create#Polyfill\n    objectCreate: Object.create || (function () {\n      var Object = function Object() {};\n      return function (prototype) {\n        if (arguments.length > 1) {\n          throw Error('Second argument not supported');\n        }\n        if (typeof prototype != 'object') {\n          throw TypeError('Argument must be an object');\n        }\n        Object.prototype = prototype;\n        var result = new Object();\n        Object.prototype = null;\n        return result;\n      };\n    })()\n  };\n\n  var ParsleyUtils__default = ParsleyUtils__ParsleyUtils;\n\n  // All these options could be overriden and specified directly in DOM using\n  // `data-parsley-` default DOM-API\n  // eg: `inputs` can be set in DOM using `data-parsley-inputs=\"input, textarea\"`\n  // eg: `data-parsley-stop-on-first-failing-constraint=\"false\"`\n\n  var ParsleyDefaults = {\n    // ### General\n\n    // Default data-namespace for DOM API\n    namespace: 'data-parsley-',\n\n    // Supported inputs by default\n    inputs: 'input, textarea, select',\n\n    // Excluded inputs by default\n    excluded: 'input[type=button], input[type=submit], input[type=reset], input[type=hidden]',\n\n    // Stop validating field on highest priority failing constraint\n    priorityEnabled: true,\n\n    // ### Field only\n\n    // identifier used to group together inputs (e.g. radio buttons...)\n    multiple: null,\n\n    // identifier (or array of identifiers) used to validate only a select group of inputs\n    group: null,\n\n    // ### UI\n    // Enable\\Disable error messages\n    uiEnabled: true,\n\n    // Key events threshold before validation\n    validationThreshold: 3,\n\n    // Focused field on form validation error. 'first'|'last'|'none'\n    focus: 'first',\n\n    // event(s) that will trigger validation before first failure. eg: `input`...\n    trigger: false,\n\n    // event(s) that will trigger validation after first failure.\n    triggerAfterFailure: 'input',\n\n    // Class that would be added on every failing validation Parsley field\n    errorClass: 'parsley-error',\n\n    // Same for success validation\n    successClass: 'parsley-success',\n\n    // Return the `$element` that will receive these above success or error classes\n    // Could also be (and given directly from DOM) a valid selector like `'#div'`\n    classHandler: function classHandler(ParsleyField) {},\n\n    // Return the `$element` where errors will be appended\n    // Could also be (and given directly from DOM) a valid selector like `'#div'`\n    errorsContainer: function errorsContainer(ParsleyField) {},\n\n    // ul elem that would receive errors' list\n    errorsWrapper: '<ul class=\"parsley-errors-list\"></ul>',\n\n    // li elem that would receive error message\n    errorTemplate: '<li></li>'\n  };\n\n  var ParsleyAbstract = function ParsleyAbstract() {};\n\n  ParsleyAbstract.prototype = {\n    asyncSupport: true, // Deprecated\n\n    actualizeOptions: function actualizeOptions() {\n      ParsleyUtils__default.attr(this.$element, this.options.namespace, this.domOptions);\n      if (this.parent && this.parent.actualizeOptions) this.parent.actualizeOptions();\n      return this;\n    },\n\n    _resetOptions: function _resetOptions(initOptions) {\n      this.domOptions = ParsleyUtils__default.objectCreate(this.parent.options);\n      this.options = ParsleyUtils__default.objectCreate(this.domOptions);\n      // Shallow copy of ownProperties of initOptions:\n      for (var i in initOptions) {\n        if (initOptions.hasOwnProperty(i)) this.options[i] = initOptions[i];\n      }\n      this.actualizeOptions();\n    },\n\n    _listeners: null,\n\n    // Register a callback for the given event name\n    // Callback is called with context as the first argument and the `this`\n    // The context is the current parsley instance, or window.Parsley if global\n    // A return value of `false` will interrupt the calls\n    on: function on(name, fn) {\n      this._listeners = this._listeners || {};\n      var queue = this._listeners[name] = this._listeners[name] || [];\n      queue.push(fn);\n\n      return this;\n    },\n\n    // Deprecated. Use `on` instead\n    subscribe: function subscribe(name, fn) {\n      $.listenTo(this, name.toLowerCase(), fn);\n    },\n\n    // Unregister a callback (or all if none is given) for the given event name\n    off: function off(name, fn) {\n      var queue = this._listeners && this._listeners[name];\n      if (queue) {\n        if (!fn) {\n          delete this._listeners[name];\n        } else {\n          for (var i = queue.length; i--;) if (queue[i] === fn) queue.splice(i, 1);\n        }\n      }\n      return this;\n    },\n\n    // Deprecated. Use `off`\n    unsubscribe: function unsubscribe(name, fn) {\n      $.unsubscribeTo(this, name.toLowerCase());\n    },\n\n    // Trigger an event of the given name\n    // A return value of `false` interrupts the callback chain\n    // Returns false if execution was interrupted\n    trigger: function trigger(name, target, extraArg) {\n      target = target || this;\n      var queue = this._listeners && this._listeners[name];\n      var result;\n      var parentResult;\n      if (queue) {\n        for (var i = queue.length; i--;) {\n          result = queue[i].call(target, target, extraArg);\n          if (result === false) return result;\n        }\n      }\n      if (this.parent) {\n        return this.parent.trigger(name, target, extraArg);\n      }\n      return true;\n    },\n\n    // Reset UI\n    reset: function reset() {\n      // Field case: just emit a reset event for UI\n      if ('ParsleyForm' !== this.__class__) {\n        this._resetUI();\n        return this._trigger('reset');\n      }\n\n      // Form case: emit a reset event for each field\n      for (var i = 0; i < this.fields.length; i++) this.fields[i].reset();\n\n      this._trigger('reset');\n    },\n\n    // Destroy Parsley instance (+ UI)\n    destroy: function destroy() {\n      // Field case: emit destroy event to clean UI and then destroy stored instance\n      this._destroyUI();\n      if ('ParsleyForm' !== this.__class__) {\n        this.$element.removeData('Parsley');\n        this.$element.removeData('ParsleyFieldMultiple');\n        this._trigger('destroy');\n\n        return;\n      }\n\n      // Form case: destroy all its fields and then destroy stored instance\n      for (var i = 0; i < this.fields.length; i++) this.fields[i].destroy();\n\n      this.$element.removeData('Parsley');\n      this._trigger('destroy');\n    },\n\n    asyncIsValid: function asyncIsValid(group, force) {\n      ParsleyUtils__default.warnOnce(\"asyncIsValid is deprecated; please use whenValid instead\");\n      return this.whenValid({ group: group, force: force });\n    },\n\n    _findRelated: function _findRelated() {\n      return this.options.multiple ? this.parent.$element.find('[' + this.options.namespace + 'multiple=\"' + this.options.multiple + '\"]') : this.$element;\n    }\n  };\n\n  var requirementConverters = {\n    string: function string(_string) {\n      return _string;\n    },\n    integer: function integer(string) {\n      if (isNaN(string)) throw 'Requirement is not an integer: \"' + string + '\"';\n      return parseInt(string, 10);\n    },\n    number: function number(string) {\n      if (isNaN(string)) throw 'Requirement is not a number: \"' + string + '\"';\n      return parseFloat(string);\n    },\n    reference: function reference(string) {\n      // Unused for now\n      var result = $(string);\n      if (result.length === 0) throw 'No such reference: \"' + string + '\"';\n      return result;\n    },\n    boolean: function boolean(string) {\n      return string !== 'false';\n    },\n    object: function object(string) {\n      return ParsleyUtils__default.deserializeValue(string);\n    },\n    regexp: function regexp(_regexp) {\n      var flags = '';\n\n      // Test if RegExp is literal, if not, nothing to be done, otherwise, we need to isolate flags and pattern\n      if (/^\\/.*\\/(?:[gimy]*)$/.test(_regexp)) {\n        // Replace the regexp literal string with the first match group: ([gimy]*)\n        // If no flag is present, this will be a blank string\n        flags = _regexp.replace(/.*\\/([gimy]*)$/, '$1');\n        // Again, replace the regexp literal string with the first match group:\n        // everything excluding the opening and closing slashes and the flags\n        _regexp = _regexp.replace(new RegExp('^/(.*?)/' + flags + '$'), '$1');\n      } else {\n        // Anchor regexp:\n        _regexp = '^' + _regexp + '$';\n      }\n      return new RegExp(_regexp, flags);\n    }\n  };\n\n  var convertArrayRequirement = function convertArrayRequirement(string, length) {\n    var m = string.match(/^\\s*\\[(.*)\\]\\s*$/);\n    if (!m) throw 'Requirement is not an array: \"' + string + '\"';\n    var values = m[1].split(',').map(ParsleyUtils__default.trimString);\n    if (values.length !== length) throw 'Requirement has ' + values.length + ' values when ' + length + ' are needed';\n    return values;\n  };\n\n  var convertRequirement = function convertRequirement(requirementType, string) {\n    var converter = requirementConverters[requirementType || 'string'];\n    if (!converter) throw 'Unknown requirement specification: \"' + requirementType + '\"';\n    return converter(string);\n  };\n\n  var convertExtraOptionRequirement = function convertExtraOptionRequirement(requirementSpec, string, extraOptionReader) {\n    var main = null;\n    var extra = {};\n    for (var key in requirementSpec) {\n      if (key) {\n        var value = extraOptionReader(key);\n        if ('string' === typeof value) value = convertRequirement(requirementSpec[key], value);\n        extra[key] = value;\n      } else {\n        main = convertRequirement(requirementSpec[key], string);\n      }\n    }\n    return [main, extra];\n  };\n\n  // A Validator needs to implement the methods `validate` and `parseRequirements`\n\n  var ParsleyValidator = function ParsleyValidator(spec) {\n    $.extend(true, this, spec);\n  };\n\n  ParsleyValidator.prototype = {\n    // Returns `true` iff the given `value` is valid according the given requirements.\n    validate: function validate(value, requirementFirstArg) {\n      if (this.fn) {\n        // Legacy style validator\n\n        if (arguments.length > 3) // If more args then value, requirement, instance...\n          requirementFirstArg = [].slice.call(arguments, 1, -1); // Skip first arg (value) and last (instance), combining the rest\n        return this.fn.call(this, value, requirementFirstArg);\n      }\n\n      if ($.isArray(value)) {\n        if (!this.validateMultiple) throw 'Validator `' + this.name + '` does not handle multiple values';\n        return this.validateMultiple.apply(this, arguments);\n      } else {\n        if (this.validateNumber) {\n          if (isNaN(value)) return false;\n          arguments[0] = parseFloat(arguments[0]);\n          return this.validateNumber.apply(this, arguments);\n        }\n        if (this.validateString) {\n          return this.validateString.apply(this, arguments);\n        }\n        throw 'Validator `' + this.name + '` only handles multiple values';\n      }\n    },\n\n    // Parses `requirements` into an array of arguments,\n    // according to `this.requirementType`\n    parseRequirements: function parseRequirements(requirements, extraOptionReader) {\n      if ('string' !== typeof requirements) {\n        // Assume requirement already parsed\n        // but make sure we return an array\n        return $.isArray(requirements) ? requirements : [requirements];\n      }\n      var type = this.requirementType;\n      if ($.isArray(type)) {\n        var values = convertArrayRequirement(requirements, type.length);\n        for (var i = 0; i < values.length; i++) values[i] = convertRequirement(type[i], values[i]);\n        return values;\n      } else if ($.isPlainObject(type)) {\n        return convertExtraOptionRequirement(type, requirements, extraOptionReader);\n      } else {\n        return [convertRequirement(type, requirements)];\n      }\n    },\n    // Defaults:\n    requirementType: 'string',\n\n    priority: 2\n\n  };\n\n  var ParsleyValidatorRegistry = function ParsleyValidatorRegistry(validators, catalog) {\n    this.__class__ = 'ParsleyValidatorRegistry';\n\n    // Default Parsley locale is en\n    this.locale = 'en';\n\n    this.init(validators || {}, catalog || {});\n  };\n\n  var typeRegexes = {\n    email: /^((([a-z]|\\d|[!#\\$%&'\\*\\+\\-\\/=\\?\\^_`{\\|}~]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])+(\\.([a-z]|\\d|[!#\\$%&'\\*\\+\\-\\/=\\?\\^_`{\\|}~]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])+)*)|((\\x22)((((\\x20|\\x09)*(\\x0d\\x0a))?(\\x20|\\x09)+)?(([\\x01-\\x08\\x0b\\x0c\\x0e-\\x1f\\x7f]|\\x21|[\\x23-\\x5b]|[\\x5d-\\x7e]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])|(\\\\([\\x01-\\x09\\x0b\\x0c\\x0d-\\x7f]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF]))))*(((\\x20|\\x09)*(\\x0d\\x0a))?(\\x20|\\x09)+)?(\\x22)))@((([a-z]|\\d|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])|(([a-z]|\\d|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])([a-z]|\\d|-|\\.|_|~|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])*([a-z]|\\d|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])))\\.)+(([a-z]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])|(([a-z]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])([a-z]|\\d|-|\\.|_|~|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])*([a-z]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])))$/i,\n\n    // Follow https://www.w3.org/TR/html5/infrastructure.html#floating-point-numbers\n    number: /^-?(\\d*\\.)?\\d+(e[-+]?\\d+)?$/i,\n\n    integer: /^-?\\d+$/,\n\n    digits: /^\\d+$/,\n\n    alphanum: /^\\w+$/i,\n\n    url: new RegExp(\"^\" +\n    // protocol identifier\n    \"(?:(?:https?|ftp)://)?\" + // ** mod: make scheme optional\n    // user:pass authentication\n    \"(?:\\\\S+(?::\\\\S*)?@)?\" + \"(?:\" +\n    // IP address exclusion\n    // private & local networks\n    // \"(?!(?:10|127)(?:\\\\.\\\\d{1,3}){3})\" +   // ** mod: allow local networks\n    // \"(?!(?:169\\\\.254|192\\\\.168)(?:\\\\.\\\\d{1,3}){2})\" +  // ** mod: allow local networks\n    // \"(?!172\\\\.(?:1[6-9]|2\\\\d|3[0-1])(?:\\\\.\\\\d{1,3}){2})\" +  // ** mod: allow local networks\n    // IP address dotted notation octets\n    // excludes loopback network 0.0.0.0\n    // excludes reserved space >= 224.0.0.0\n    // excludes network & broacast addresses\n    // (first & last IP address of each class)\n    \"(?:[1-9]\\\\d?|1\\\\d\\\\d|2[01]\\\\d|22[0-3])\" + \"(?:\\\\.(?:1?\\\\d{1,2}|2[0-4]\\\\d|25[0-5])){2}\" + \"(?:\\\\.(?:[1-9]\\\\d?|1\\\\d\\\\d|2[0-4]\\\\d|25[0-4]))\" + \"|\" +\n    // host name\n    '(?:(?:[a-z\\\\u00a1-\\\\uffff0-9]-*)*[a-z\\\\u00a1-\\\\uffff0-9]+)' +\n    // domain name\n    '(?:\\\\.(?:[a-z\\\\u00a1-\\\\uffff0-9]-*)*[a-z\\\\u00a1-\\\\uffff0-9]+)*' +\n    // TLD identifier\n    '(?:\\\\.(?:[a-z\\\\u00a1-\\\\uffff]{2,}))' + \")\" +\n    // port number\n    \"(?::\\\\d{2,5})?\" +\n    // resource path\n    \"(?:/\\\\S*)?\" + \"$\", 'i')\n  };\n  typeRegexes.range = typeRegexes.number;\n\n  // See http://stackoverflow.com/a/10454560/8279\n  var decimalPlaces = function decimalPlaces(num) {\n    var match = ('' + num).match(/(?:\\.(\\d+))?(?:[eE]([+-]?\\d+))?$/);\n    if (!match) {\n      return 0;\n    }\n    return Math.max(0,\n    // Number of digits right of decimal point.\n    (match[1] ? match[1].length : 0) - (\n    // Adjust for scientific notation.\n    match[2] ? +match[2] : 0));\n  };\n\n  ParsleyValidatorRegistry.prototype = {\n    init: function init(validators, catalog) {\n      this.catalog = catalog;\n      // Copy prototype's validators:\n      this.validators = $.extend({}, this.validators);\n\n      for (var name in validators) this.addValidator(name, validators[name].fn, validators[name].priority);\n\n      window.Parsley.trigger('parsley:validator:init');\n    },\n\n    // Set new messages locale if we have dictionary loaded in ParsleyConfig.i18n\n    setLocale: function setLocale(locale) {\n      if ('undefined' === typeof this.catalog[locale]) throw new Error(locale + ' is not available in the catalog');\n\n      this.locale = locale;\n\n      return this;\n    },\n\n    // Add a new messages catalog for a given locale. Set locale for this catalog if set === `true`\n    addCatalog: function addCatalog(locale, messages, set) {\n      if ('object' === typeof messages) this.catalog[locale] = messages;\n\n      if (true === set) return this.setLocale(locale);\n\n      return this;\n    },\n\n    // Add a specific message for a given constraint in a given locale\n    addMessage: function addMessage(locale, name, message) {\n      if ('undefined' === typeof this.catalog[locale]) this.catalog[locale] = {};\n\n      this.catalog[locale][name] = message;\n\n      return this;\n    },\n\n    // Add messages for a given locale\n    addMessages: function addMessages(locale, nameMessageObject) {\n      for (var name in nameMessageObject) this.addMessage(locale, name, nameMessageObject[name]);\n\n      return this;\n    },\n\n    // Add a new validator\n    //\n    //    addValidator('custom', {\n    //        requirementType: ['integer', 'integer'],\n    //        validateString: function(value, from, to) {},\n    //        priority: 22,\n    //        messages: {\n    //          en: \"Hey, that's no good\",\n    //          fr: \"Aye aye, pas bon du tout\",\n    //        }\n    //    })\n    //\n    // Old API was addValidator(name, function, priority)\n    //\n    addValidator: function addValidator(name, arg1, arg2) {\n      if (this.validators[name]) ParsleyUtils__default.warn('Validator \"' + name + '\" is already defined.');else if (ParsleyDefaults.hasOwnProperty(name)) {\n        ParsleyUtils__default.warn('\"' + name + '\" is a restricted keyword and is not a valid validator name.');\n        return;\n      }\n      return this._setValidator.apply(this, arguments);\n    },\n\n    updateValidator: function updateValidator(name, arg1, arg2) {\n      if (!this.validators[name]) {\n        ParsleyUtils__default.warn('Validator \"' + name + '\" is not already defined.');\n        return this.addValidator.apply(this, arguments);\n      }\n      return this._setValidator(this, arguments);\n    },\n\n    removeValidator: function removeValidator(name) {\n      if (!this.validators[name]) ParsleyUtils__default.warn('Validator \"' + name + '\" is not defined.');\n\n      delete this.validators[name];\n\n      return this;\n    },\n\n    _setValidator: function _setValidator(name, validator, priority) {\n      if ('object' !== typeof validator) {\n        // Old style validator, with `fn` and `priority`\n        validator = {\n          fn: validator,\n          priority: priority\n        };\n      }\n      if (!validator.validate) {\n        validator = new ParsleyValidator(validator);\n      }\n      this.validators[name] = validator;\n\n      for (var locale in validator.messages || {}) this.addMessage(locale, name, validator.messages[locale]);\n\n      return this;\n    },\n\n    getErrorMessage: function getErrorMessage(constraint) {\n      var message;\n\n      // Type constraints are a bit different, we have to match their requirements too to find right error message\n      if ('type' === constraint.name) {\n        var typeMessages = this.catalog[this.locale][constraint.name] || {};\n        message = typeMessages[constraint.requirements];\n      } else message = this.formatMessage(this.catalog[this.locale][constraint.name], constraint.requirements);\n\n      return message || this.catalog[this.locale].defaultMessage || this.catalog.en.defaultMessage;\n    },\n\n    // Kind of light `sprintf()` implementation\n    formatMessage: function formatMessage(string, parameters) {\n      if ('object' === typeof parameters) {\n        for (var i in parameters) string = this.formatMessage(string, parameters[i]);\n\n        return string;\n      }\n\n      return 'string' === typeof string ? string.replace(/%s/i, parameters) : '';\n    },\n\n    // Here is the Parsley default validators list.\n    // A validator is an object with the following key values:\n    //  - priority: an integer\n    //  - requirement: 'string' (default), 'integer', 'number', 'regexp' or an Array of these\n    //  - validateString, validateMultiple, validateNumber: functions returning `true`, `false` or a promise\n    // Alternatively, a validator can be a function that returns such an object\n    //\n    validators: {\n      notblank: {\n        validateString: function validateString(value) {\n          return (/\\S/.test(value)\n          );\n        },\n        priority: 2\n      },\n      required: {\n        validateMultiple: function validateMultiple(values) {\n          return values.length > 0;\n        },\n        validateString: function validateString(value) {\n          return (/\\S/.test(value)\n          );\n        },\n        priority: 512\n      },\n      type: {\n        validateString: function validateString(value, type) {\n          var _ref = arguments.length <= 2 || arguments[2] === undefined ? {} : arguments[2];\n\n          var _ref$step = _ref.step;\n          var step = _ref$step === undefined ? '1' : _ref$step;\n          var _ref$base = _ref.base;\n          var base = _ref$base === undefined ? 0 : _ref$base;\n\n          var regex = typeRegexes[type];\n          if (!regex) {\n            throw new Error('validator type `' + type + '` is not supported');\n          }\n          if (!regex.test(value)) return false;\n          if ('number' === type) {\n            if (!/^any$/i.test(step || '')) {\n              var nb = Number(value);\n              var decimals = Math.max(decimalPlaces(step), decimalPlaces(base));\n              if (decimalPlaces(nb) > decimals) // Value can't have too many decimals\n                return false;\n              // Be careful of rounding errors by using integers.\n              var toInt = function toInt(f) {\n                return Math.round(f * Math.pow(10, decimals));\n              };\n              if ((toInt(nb) - toInt(base)) % toInt(step) != 0) return false;\n            }\n          }\n          return true;\n        },\n        requirementType: {\n          '': 'string',\n          step: 'string',\n          base: 'number'\n        },\n        priority: 256\n      },\n      pattern: {\n        validateString: function validateString(value, regexp) {\n          return regexp.test(value);\n        },\n        requirementType: 'regexp',\n        priority: 64\n      },\n      minlength: {\n        validateString: function validateString(value, requirement) {\n          return value.length >= requirement;\n        },\n        requirementType: 'integer',\n        priority: 30\n      },\n      maxlength: {\n        validateString: function validateString(value, requirement) {\n          return value.length <= requirement;\n        },\n        requirementType: 'integer',\n        priority: 30\n      },\n      length: {\n        validateString: function validateString(value, min, max) {\n          return value.length >= min && value.length <= max;\n        },\n        requirementType: ['integer', 'integer'],\n        priority: 30\n      },\n      mincheck: {\n        validateMultiple: function validateMultiple(values, requirement) {\n          return values.length >= requirement;\n        },\n        requirementType: 'integer',\n        priority: 30\n      },\n      maxcheck: {\n        validateMultiple: function validateMultiple(values, requirement) {\n          return values.length <= requirement;\n        },\n        requirementType: 'integer',\n        priority: 30\n      },\n      check: {\n        validateMultiple: function validateMultiple(values, min, max) {\n          return values.length >= min && values.length <= max;\n        },\n        requirementType: ['integer', 'integer'],\n        priority: 30\n      },\n      min: {\n        validateNumber: function validateNumber(value, requirement) {\n          return value >= requirement;\n        },\n        requirementType: 'number',\n        priority: 30\n      },\n      max: {\n        validateNumber: function validateNumber(value, requirement) {\n          return value <= requirement;\n        },\n        requirementType: 'number',\n        priority: 30\n      },\n      range: {\n        validateNumber: function validateNumber(value, min, max) {\n          return value >= min && value <= max;\n        },\n        requirementType: ['number', 'number'],\n        priority: 30\n      },\n      equalto: {\n        validateString: function validateString(value, refOrValue) {\n          var $reference = $(refOrValue);\n          if ($reference.length) return value === $reference.val();else return value === refOrValue;\n        },\n        priority: 256\n      }\n    }\n  };\n\n  var ParsleyUI = {};\n\n  var diffResults = function diffResults(newResult, oldResult, deep) {\n    var added = [];\n    var kept = [];\n\n    for (var i = 0; i < newResult.length; i++) {\n      var found = false;\n\n      for (var j = 0; j < oldResult.length; j++) if (newResult[i].assert.name === oldResult[j].assert.name) {\n        found = true;\n        break;\n      }\n\n      if (found) kept.push(newResult[i]);else added.push(newResult[i]);\n    }\n\n    return {\n      kept: kept,\n      added: added,\n      removed: !deep ? diffResults(oldResult, newResult, true).added : []\n    };\n  };\n\n  ParsleyUI.Form = {\n\n    _actualizeTriggers: function _actualizeTriggers() {\n      var _this = this;\n\n      this.$element.on('submit.Parsley', function (evt) {\n        _this.onSubmitValidate(evt);\n      });\n      this.$element.on('click.Parsley', 'input[type=\"submit\"], button[type=\"submit\"]', function (evt) {\n        _this.onSubmitButton(evt);\n      });\n\n      // UI could be disabled\n      if (false === this.options.uiEnabled) return;\n\n      this.$element.attr('novalidate', '');\n    },\n\n    focus: function focus() {\n      this._focusedField = null;\n\n      if (true === this.validationResult || 'none' === this.options.focus) return null;\n\n      for (var i = 0; i < this.fields.length; i++) {\n        var field = this.fields[i];\n        if (true !== field.validationResult && field.validationResult.length > 0 && 'undefined' === typeof field.options.noFocus) {\n          this._focusedField = field.$element;\n          if ('first' === this.options.focus) break;\n        }\n      }\n\n      if (null === this._focusedField) return null;\n\n      return this._focusedField.focus();\n    },\n\n    _destroyUI: function _destroyUI() {\n      // Reset all event listeners\n      this.$element.off('.Parsley');\n    }\n\n  };\n\n  ParsleyUI.Field = {\n\n    _reflowUI: function _reflowUI() {\n      this._buildUI();\n\n      // If this field doesn't have an active UI don't bother doing something\n      if (!this._ui) return;\n\n      // Diff between two validation results\n      var diff = diffResults(this.validationResult, this._ui.lastValidationResult);\n\n      // Then store current validation result for next reflow\n      this._ui.lastValidationResult = this.validationResult;\n\n      // Handle valid / invalid / none field class\n      this._manageStatusClass();\n\n      // Add, remove, updated errors messages\n      this._manageErrorsMessages(diff);\n\n      // Triggers impl\n      this._actualizeTriggers();\n\n      // If field is not valid for the first time, bind keyup trigger to ease UX and quickly inform user\n      if ((diff.kept.length || diff.added.length) && !this._failedOnce) {\n        this._failedOnce = true;\n        this._actualizeTriggers();\n      }\n    },\n\n    // Returns an array of field's error message(s)\n    getErrorsMessages: function getErrorsMessages() {\n      // No error message, field is valid\n      if (true === this.validationResult) return [];\n\n      var messages = [];\n\n      for (var i = 0; i < this.validationResult.length; i++) messages.push(this.validationResult[i].errorMessage || this._getErrorMessage(this.validationResult[i].assert));\n\n      return messages;\n    },\n\n    // It's a goal of Parsley that this method is no longer required [#1073]\n    addError: function addError(name) {\n      var _ref2 = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];\n\n      var message = _ref2.message;\n      var assert = _ref2.assert;\n      var _ref2$updateClass = _ref2.updateClass;\n      var updateClass = _ref2$updateClass === undefined ? true : _ref2$updateClass;\n\n      this._buildUI();\n      this._addError(name, { message: message, assert: assert });\n\n      if (updateClass) this._errorClass();\n    },\n\n    // It's a goal of Parsley that this method is no longer required [#1073]\n    updateError: function updateError(name) {\n      var _ref3 = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];\n\n      var message = _ref3.message;\n      var assert = _ref3.assert;\n      var _ref3$updateClass = _ref3.updateClass;\n      var updateClass = _ref3$updateClass === undefined ? true : _ref3$updateClass;\n\n      this._buildUI();\n      this._updateError(name, { message: message, assert: assert });\n\n      if (updateClass) this._errorClass();\n    },\n\n    // It's a goal of Parsley that this method is no longer required [#1073]\n    removeError: function removeError(name) {\n      var _ref4 = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];\n\n      var _ref4$updateClass = _ref4.updateClass;\n      var updateClass = _ref4$updateClass === undefined ? true : _ref4$updateClass;\n\n      this._buildUI();\n      this._removeError(name);\n\n      // edge case possible here: remove a standard Parsley error that is still failing in this.validationResult\n      // but highly improbable cuz' manually removing a well Parsley handled error makes no sense.\n      if (updateClass) this._manageStatusClass();\n    },\n\n    _manageStatusClass: function _manageStatusClass() {\n      if (this.hasConstraints() && this.needsValidation() && true === this.validationResult) this._successClass();else if (this.validationResult.length > 0) this._errorClass();else this._resetClass();\n    },\n\n    _manageErrorsMessages: function _manageErrorsMessages(diff) {\n      if ('undefined' !== typeof this.options.errorsMessagesDisabled) return;\n\n      // Case where we have errorMessage option that configure an unique field error message, regardless failing validators\n      if ('undefined' !== typeof this.options.errorMessage) {\n        if (diff.added.length || diff.kept.length) {\n          this._insertErrorWrapper();\n\n          if (0 === this._ui.$errorsWrapper.find('.parsley-custom-error-message').length) this._ui.$errorsWrapper.append($(this.options.errorTemplate).addClass('parsley-custom-error-message'));\n\n          return this._ui.$errorsWrapper.addClass('filled').find('.parsley-custom-error-message').html(this.options.errorMessage);\n        }\n\n        return this._ui.$errorsWrapper.removeClass('filled').find('.parsley-custom-error-message').remove();\n      }\n\n      // Show, hide, update failing constraints messages\n      for (var i = 0; i < diff.removed.length; i++) this._removeError(diff.removed[i].assert.name);\n\n      for (i = 0; i < diff.added.length; i++) this._addError(diff.added[i].assert.name, { message: diff.added[i].errorMessage, assert: diff.added[i].assert });\n\n      for (i = 0; i < diff.kept.length; i++) this._updateError(diff.kept[i].assert.name, { message: diff.kept[i].errorMessage, assert: diff.kept[i].assert });\n    },\n\n    _addError: function _addError(name, _ref5) {\n      var message = _ref5.message;\n      var assert = _ref5.assert;\n\n      this._insertErrorWrapper();\n      this._ui.$errorsWrapper.addClass('filled').append($(this.options.errorTemplate).addClass('parsley-' + name).html(message || this._getErrorMessage(assert)));\n    },\n\n    _updateError: function _updateError(name, _ref6) {\n      var message = _ref6.message;\n      var assert = _ref6.assert;\n\n      this._ui.$errorsWrapper.addClass('filled').find('.parsley-' + name).html(message || this._getErrorMessage(assert));\n    },\n\n    _removeError: function _removeError(name) {\n      this._ui.$errorsWrapper.removeClass('filled').find('.parsley-' + name).remove();\n    },\n\n    _getErrorMessage: function _getErrorMessage(constraint) {\n      var customConstraintErrorMessage = constraint.name + 'Message';\n\n      if ('undefined' !== typeof this.options[customConstraintErrorMessage]) return window.Parsley.formatMessage(this.options[customConstraintErrorMessage], constraint.requirements);\n\n      return window.Parsley.getErrorMessage(constraint);\n    },\n\n    _buildUI: function _buildUI() {\n      // UI could be already built or disabled\n      if (this._ui || false === this.options.uiEnabled) return;\n\n      var _ui = {};\n\n      // Give field its Parsley id in DOM\n      this.$element.attr(this.options.namespace + 'id', this.__id__);\n\n      /** Generate important UI elements and store them in this **/\n      // $errorClassHandler is the $element that woul have parsley-error and parsley-success classes\n      _ui.$errorClassHandler = this._manageClassHandler();\n\n      // $errorsWrapper is a div that would contain the various field errors, it will be appended into $errorsContainer\n      _ui.errorsWrapperId = 'parsley-id-' + (this.options.multiple ? 'multiple-' + this.options.multiple : this.__id__);\n      _ui.$errorsWrapper = $(this.options.errorsWrapper).attr('id', _ui.errorsWrapperId);\n\n      // ValidationResult UI storage to detect what have changed bwt two validations, and update DOM accordingly\n      _ui.lastValidationResult = [];\n      _ui.validationInformationVisible = false;\n\n      // Store it in this for later\n      this._ui = _ui;\n    },\n\n    // Determine which element will have `parsley-error` and `parsley-success` classes\n    _manageClassHandler: function _manageClassHandler() {\n      // An element selector could be passed through DOM with `data-parsley-class-handler=#foo`\n      if ('string' === typeof this.options.classHandler && $(this.options.classHandler).length) return $(this.options.classHandler);\n\n      // Class handled could also be determined by function given in Parsley options\n      var $handler = this.options.classHandler.call(this, this);\n\n      // If this function returned a valid existing DOM element, go for it\n      if ('undefined' !== typeof $handler && $handler.length) return $handler;\n\n      // Otherwise, if simple element (input, texatrea, select...) it will perfectly host the classes\n      if (!this.options.multiple || this.$element.is('select')) return this.$element;\n\n      // But if multiple element (radio, checkbox), that would be their parent\n      return this.$element.parent();\n    },\n\n    _insertErrorWrapper: function _insertErrorWrapper() {\n      var $errorsContainer;\n\n      // Nothing to do if already inserted\n      if (0 !== this._ui.$errorsWrapper.parent().length) return this._ui.$errorsWrapper.parent();\n\n      if ('string' === typeof this.options.errorsContainer) {\n        if ($(this.options.errorsContainer).length) return $(this.options.errorsContainer).append(this._ui.$errorsWrapper);else ParsleyUtils__default.warn('The errors container `' + this.options.errorsContainer + '` does not exist in DOM');\n      } else if ('function' === typeof this.options.errorsContainer) $errorsContainer = this.options.errorsContainer.call(this, this);\n\n      if ('undefined' !== typeof $errorsContainer && $errorsContainer.length) return $errorsContainer.append(this._ui.$errorsWrapper);\n\n      var $from = this.$element;\n      if (this.options.multiple) $from = $from.parent();\n      return $from.after(this._ui.$errorsWrapper);\n    },\n\n    _actualizeTriggers: function _actualizeTriggers() {\n      var _this2 = this;\n\n      var $toBind = this._findRelated();\n\n      // Remove Parsley events already bound on this field\n      $toBind.off('.Parsley');\n      if (this._failedOnce) $toBind.on(ParsleyUtils__default.namespaceEvents(this.options.triggerAfterFailure, 'Parsley'), function () {\n        _this2.validate();\n      });else {\n        $toBind.on(ParsleyUtils__default.namespaceEvents(this.options.trigger, 'Parsley'), function (event) {\n          _this2._eventValidate(event);\n        });\n      }\n    },\n\n    _eventValidate: function _eventValidate(event) {\n      // For keyup, keypress, keydown, input... events that could be a little bit obstrusive\n      // do not validate if val length < min threshold on first validation. Once field have been validated once and info\n      // about success or failure have been displayed, always validate with this trigger to reflect every yalidation change.\n      if (/key|input/.test(event.type)) if (!(this._ui && this._ui.validationInformationVisible) && this.getValue().length <= this.options.validationThreshold) return;\n\n      this.validate();\n    },\n\n    _resetUI: function _resetUI() {\n      // Reset all event listeners\n      this._failedOnce = false;\n      this._actualizeTriggers();\n\n      // Nothing to do if UI never initialized for this field\n      if ('undefined' === typeof this._ui) return;\n\n      // Reset all errors' li\n      this._ui.$errorsWrapper.removeClass('filled').children().remove();\n\n      // Reset validation class\n      this._resetClass();\n\n      // Reset validation flags and last validation result\n      this._ui.lastValidationResult = [];\n      this._ui.validationInformationVisible = false;\n    },\n\n    _destroyUI: function _destroyUI() {\n      this._resetUI();\n\n      if ('undefined' !== typeof this._ui) this._ui.$errorsWrapper.remove();\n\n      delete this._ui;\n    },\n\n    _successClass: function _successClass() {\n      this._ui.validationInformationVisible = true;\n      this._ui.$errorClassHandler.removeClass(this.options.errorClass).addClass(this.options.successClass);\n    },\n    _errorClass: function _errorClass() {\n      this._ui.validationInformationVisible = true;\n      this._ui.$errorClassHandler.removeClass(this.options.successClass).addClass(this.options.errorClass);\n    },\n    _resetClass: function _resetClass() {\n      this._ui.$errorClassHandler.removeClass(this.options.successClass).removeClass(this.options.errorClass);\n    }\n  };\n\n  var ParsleyForm = function ParsleyForm(element, domOptions, options) {\n    this.__class__ = 'ParsleyForm';\n    this.__id__ = ParsleyUtils__default.generateID();\n\n    this.$element = $(element);\n    this.domOptions = domOptions;\n    this.options = options;\n    this.parent = window.Parsley;\n\n    this.fields = [];\n    this.validationResult = null;\n  };\n\n  var ParsleyForm__statusMapping = { pending: null, resolved: true, rejected: false };\n\n  ParsleyForm.prototype = {\n    onSubmitValidate: function onSubmitValidate(event) {\n      var _this3 = this;\n\n      // This is a Parsley generated submit event, do not validate, do not prevent, simply exit and keep normal behavior\n      if (true === event.parsley) return;\n\n      // If we didn't come here through a submit button, use the first one in the form\n      var $submitSource = this._$submitSource || this.$element.find('input[type=\"submit\"], button[type=\"submit\"]').first();\n      this._$submitSource = null;\n      this.$element.find('.parsley-synthetic-submit-button').prop('disabled', true);\n      if ($submitSource.is('[formnovalidate]')) return;\n\n      var promise = this.whenValidate({ event: event });\n\n      if ('resolved' === promise.state() && false !== this._trigger('submit')) {\n        // All good, let event go through. We make this distinction because browsers\n        // differ in their handling of `submit` being called from inside a submit event [#1047]\n      } else {\n          // Rejected or pending: cancel this submit\n          event.stopImmediatePropagation();\n          event.preventDefault();\n          if ('pending' === promise.state()) promise.done(function () {\n            _this3._submit($submitSource);\n          });\n        }\n    },\n\n    onSubmitButton: function onSubmitButton(event) {\n      this._$submitSource = $(event.target);\n    },\n    // internal\n    // _submit submits the form, this time without going through the validations.\n    // Care must be taken to \"fake\" the actual submit button being clicked.\n    _submit: function _submit($submitSource) {\n      if (false === this._trigger('submit')) return;\n      // Add submit button's data\n      if ($submitSource) {\n        var $synthetic = this.$element.find('.parsley-synthetic-submit-button').prop('disabled', false);\n        if (0 === $synthetic.length) $synthetic = $('<input class=\"parsley-synthetic-submit-button\" type=\"hidden\">').appendTo(this.$element);\n        $synthetic.attr({\n          name: $submitSource.attr('name'),\n          value: $submitSource.attr('value')\n        });\n      }\n\n      this.$element.trigger($.extend($.Event('submit'), { parsley: true }));\n    },\n\n    // Performs validation on fields while triggering events.\n    // @returns `true` if all validations succeeds, `false`\n    // if a failure is immediately detected, or `null`\n    // if dependant on a promise.\n    // Consider using `whenValidate` instead.\n    validate: function validate(options) {\n      if (arguments.length >= 1 && !$.isPlainObject(options)) {\n        ParsleyUtils__default.warnOnce('Calling validate on a parsley form without passing arguments as an object is deprecated.');\n\n        var _arguments = _slice.call(arguments);\n\n        var group = _arguments[0];\n        var force = _arguments[1];\n        var event = _arguments[2];\n\n        options = { group: group, force: force, event: event };\n      }\n      return ParsleyForm__statusMapping[this.whenValidate(options).state()];\n    },\n\n    whenValidate: function whenValidate() {\n      var _this4 = this;\n\n      var _ref7 = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];\n\n      var group = _ref7.group;\n      var force = _ref7.force;\n      var event = _ref7.event;\n\n      this.submitEvent = event;\n      if (event) {\n        this.submitEvent = $.extend({}, event, { preventDefault: function preventDefault() {\n            ParsleyUtils__default.warnOnce(\"Using `this.submitEvent.preventDefault()` is deprecated; instead, call `this.validationResult = false`\");\n            _this4.validationResult = false;\n          } });\n      }\n      this.validationResult = true;\n\n      // fire validate event to eventually modify things before very validation\n      this._trigger('validate');\n\n      // Refresh form DOM options and form's fields that could have changed\n      this._refreshFields();\n\n      var promises = this._withoutReactualizingFormOptions(function () {\n        return $.map(_this4.fields, function (field) {\n          return field.whenValidate({ force: force, group: group });\n        });\n      });\n\n      var promiseBasedOnValidationResult = function promiseBasedOnValidationResult() {\n        var r = $.Deferred();\n        if (false === _this4.validationResult) r.reject();\n        return r.resolve().promise();\n      };\n\n      return $.when.apply($, _toConsumableArray(promises)).done(function () {\n        _this4._trigger('success');\n      }).fail(function () {\n        _this4.validationResult = false;\n        _this4.focus();\n        _this4._trigger('error');\n      }).always(function () {\n        _this4._trigger('validated');\n      }).pipe(promiseBasedOnValidationResult, promiseBasedOnValidationResult);\n    },\n\n    // Iterate over refreshed fields, and stop on first failure.\n    // Returns `true` if all fields are valid, `false` if a failure is detected\n    // or `null` if the result depends on an unresolved promise.\n    // Prefer using `whenValid` instead.\n    isValid: function isValid(options) {\n      if (arguments.length >= 1 && !$.isPlainObject(options)) {\n        ParsleyUtils__default.warnOnce('Calling isValid on a parsley form without passing arguments as an object is deprecated.');\n\n        var _arguments2 = _slice.call(arguments);\n\n        var group = _arguments2[0];\n        var force = _arguments2[1];\n\n        options = { group: group, force: force };\n      }\n      return ParsleyForm__statusMapping[this.whenValid(options).state()];\n    },\n\n    // Iterate over refreshed fields and validate them.\n    // Returns a promise.\n    // A validation that immediately fails will interrupt the validations.\n    whenValid: function whenValid() {\n      var _this5 = this;\n\n      var _ref8 = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];\n\n      var group = _ref8.group;\n      var force = _ref8.force;\n\n      this._refreshFields();\n\n      var promises = this._withoutReactualizingFormOptions(function () {\n        return $.map(_this5.fields, function (field) {\n          return field.whenValid({ group: group, force: force });\n        });\n      });\n      return $.when.apply($, _toConsumableArray(promises));\n    },\n\n    _refreshFields: function _refreshFields() {\n      return this.actualizeOptions()._bindFields();\n    },\n\n    _bindFields: function _bindFields() {\n      var _this6 = this;\n\n      var oldFields = this.fields;\n\n      this.fields = [];\n      this.fieldsMappedById = {};\n\n      this._withoutReactualizingFormOptions(function () {\n        _this6.$element.find(_this6.options.inputs).not(_this6.options.excluded).each(function (_, element) {\n          var fieldInstance = new window.Parsley.Factory(element, {}, _this6);\n\n          // Only add valid and not excluded `ParsleyField` and `ParsleyFieldMultiple` children\n          if (('ParsleyField' === fieldInstance.__class__ || 'ParsleyFieldMultiple' === fieldInstance.__class__) && true !== fieldInstance.options.excluded) if ('undefined' === typeof _this6.fieldsMappedById[fieldInstance.__class__ + '-' + fieldInstance.__id__]) {\n            _this6.fieldsMappedById[fieldInstance.__class__ + '-' + fieldInstance.__id__] = fieldInstance;\n            _this6.fields.push(fieldInstance);\n          }\n        });\n\n        $(oldFields).not(_this6.fields).each(function (_, field) {\n          field._trigger('reset');\n        });\n      });\n      return this;\n    },\n\n    // Internal only.\n    // Looping on a form's fields to do validation or similar\n    // will trigger reactualizing options on all of them, which\n    // in turn will reactualize the form's options.\n    // To avoid calling actualizeOptions so many times on the form\n    // for nothing, _withoutReactualizingFormOptions temporarily disables\n    // the method actualizeOptions on this form while `fn` is called.\n    _withoutReactualizingFormOptions: function _withoutReactualizingFormOptions(fn) {\n      var oldActualizeOptions = this.actualizeOptions;\n      this.actualizeOptions = function () {\n        return this;\n      };\n      var result = fn();\n      this.actualizeOptions = oldActualizeOptions;\n      return result;\n    },\n\n    // Internal only.\n    // Shortcut to trigger an event\n    // Returns true iff event is not interrupted and default not prevented.\n    _trigger: function _trigger(eventName) {\n      return this.trigger('form:' + eventName);\n    }\n\n  };\n\n  var ConstraintFactory = function ConstraintFactory(parsleyField, name, requirements, priority, isDomConstraint) {\n    if (!/ParsleyField/.test(parsleyField.__class__)) throw new Error('ParsleyField or ParsleyFieldMultiple instance expected');\n\n    var validatorSpec = window.Parsley._validatorRegistry.validators[name];\n    var validator = new ParsleyValidator(validatorSpec);\n\n    $.extend(this, {\n      validator: validator,\n      name: name,\n      requirements: requirements,\n      priority: priority || parsleyField.options[name + 'Priority'] || validator.priority,\n      isDomConstraint: true === isDomConstraint\n    });\n    this._parseRequirements(parsleyField.options);\n  };\n\n  var capitalize = function capitalize(str) {\n    var cap = str[0].toUpperCase();\n    return cap + str.slice(1);\n  };\n\n  ConstraintFactory.prototype = {\n    validate: function validate(value, instance) {\n      var args = this.requirementList.slice(0); // Make copy\n      args.unshift(value);\n      args.push(instance);\n      return this.validator.validate.apply(this.validator, args);\n    },\n\n    _parseRequirements: function _parseRequirements(options) {\n      var _this7 = this;\n\n      this.requirementList = this.validator.parseRequirements(this.requirements, function (key) {\n        return options[_this7.name + capitalize(key)];\n      });\n    }\n  };\n\n  var ParsleyField = function ParsleyField(field, domOptions, options, parsleyFormInstance) {\n    this.__class__ = 'ParsleyField';\n    this.__id__ = ParsleyUtils__default.generateID();\n\n    this.$element = $(field);\n\n    // Set parent if we have one\n    if ('undefined' !== typeof parsleyFormInstance) {\n      this.parent = parsleyFormInstance;\n    }\n\n    this.options = options;\n    this.domOptions = domOptions;\n\n    // Initialize some properties\n    this.constraints = [];\n    this.constraintsByName = {};\n    this.validationResult = [];\n\n    // Bind constraints\n    this._bindConstraints();\n  };\n\n  var parsley_field__statusMapping = { pending: null, resolved: true, rejected: false };\n\n  ParsleyField.prototype = {\n    // # Public API\n    // Validate field and trigger some events for mainly `ParsleyUI`\n    // @returns `true`, an array of the validators that failed, or\n    // `null` if validation is not finished. Prefer using whenValidate\n    validate: function validate(options) {\n      if (arguments.length >= 1 && !$.isPlainObject(options)) {\n        ParsleyUtils__default.warnOnce('Calling validate on a parsley field without passing arguments as an object is deprecated.');\n        options = { options: options };\n      }\n      var promise = this.whenValidate(options);\n      if (!promise) // If excluded with `group` option\n        return true;\n      switch (promise.state()) {\n        case 'pending':\n          return null;\n        case 'resolved':\n          return true;\n        case 'rejected':\n          return this.validationResult;\n      }\n    },\n\n    // Validate field and trigger some events for mainly `ParsleyUI`\n    // @returns a promise that succeeds only when all validations do\n    // or `undefined` if field is not in the given `group`.\n    whenValidate: function whenValidate() {\n      var _this8 = this;\n\n      var _ref9 = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];\n\n      var force = _ref9.force;\n      var group = _ref9.group;\n\n      // do not validate a field if not the same as given validation group\n      this.refreshConstraints();\n      if (group && !this._isInGroup(group)) return;\n\n      this.value = this.getValue();\n\n      // Field Validate event. `this.value` could be altered for custom needs\n      this._trigger('validate');\n\n      return this.whenValid({ force: force, value: this.value, _refreshed: true }).always(function () {\n        _this8._reflowUI();\n      }).done(function () {\n        _this8._trigger('success');\n      }).fail(function () {\n        _this8._trigger('error');\n      }).always(function () {\n        _this8._trigger('validated');\n      });\n    },\n\n    hasConstraints: function hasConstraints() {\n      return 0 !== this.constraints.length;\n    },\n\n    // An empty optional field does not need validation\n    needsValidation: function needsValidation(value) {\n      if ('undefined' === typeof value) value = this.getValue();\n\n      // If a field is empty and not required, it is valid\n      // Except if `data-parsley-validate-if-empty` explicitely added, useful for some custom validators\n      if (!value.length && !this._isRequired() && 'undefined' === typeof this.options.validateIfEmpty) return false;\n\n      return true;\n    },\n\n    _isInGroup: function _isInGroup(group) {\n      if ($.isArray(this.options.group)) return -1 !== $.inArray(group, this.options.group);\n      return this.options.group === group;\n    },\n\n    // Just validate field. Do not trigger any event.\n    // Returns `true` iff all constraints pass, `false` if there are failures,\n    // or `null` if the result can not be determined yet (depends on a promise)\n    // See also `whenValid`.\n    isValid: function isValid(options) {\n      if (arguments.length >= 1 && !$.isPlainObject(options)) {\n        ParsleyUtils__default.warnOnce('Calling isValid on a parsley field without passing arguments as an object is deprecated.');\n\n        var _arguments3 = _slice.call(arguments);\n\n        var force = _arguments3[0];\n        var value = _arguments3[1];\n\n        options = { force: force, value: value };\n      }\n      var promise = this.whenValid(options);\n      if (!promise) // Excluded via `group`\n        return true;\n      return parsley_field__statusMapping[promise.state()];\n    },\n\n    // Just validate field. Do not trigger any event.\n    // @returns a promise that succeeds only when all validations do\n    // or `undefined` if the field is not in the given `group`.\n    // The argument `force` will force validation of empty fields.\n    // If a `value` is given, it will be validated instead of the value of the input.\n    whenValid: function whenValid() {\n      var _this9 = this;\n\n      var _ref10 = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];\n\n      var _ref10$force = _ref10.force;\n      var force = _ref10$force === undefined ? false : _ref10$force;\n      var value = _ref10.value;\n      var group = _ref10.group;\n      var _refreshed = _ref10._refreshed;\n\n      // Recompute options and rebind constraints to have latest changes\n      if (!_refreshed) this.refreshConstraints();\n      // do not validate a field if not the same as given validation group\n      if (group && !this._isInGroup(group)) return;\n\n      this.validationResult = true;\n\n      // A field without constraint is valid\n      if (!this.hasConstraints()) return $.when();\n\n      // Value could be passed as argument, needed to add more power to 'parsley:field:validate'\n      if ('undefined' === typeof value || null === value) value = this.getValue();\n\n      if (!this.needsValidation(value) && true !== force) return $.when();\n\n      var groupedConstraints = this._getGroupedConstraints();\n      var promises = [];\n      $.each(groupedConstraints, function (_, constraints) {\n        // Process one group of constraints at a time, we validate the constraints\n        // and combine the promises together.\n        var promise = $.when.apply($, _toConsumableArray($.map(constraints, function (constraint) {\n          return _this9._validateConstraint(value, constraint);\n        })));\n        promises.push(promise);\n        if (promise.state() === 'rejected') return false; // Interrupt processing if a group has already failed\n      });\n      return $.when.apply($, promises);\n    },\n\n    // @returns a promise\n    _validateConstraint: function _validateConstraint(value, constraint) {\n      var _this10 = this;\n\n      var result = constraint.validate(value, this);\n      // Map false to a failed promise\n      if (false === result) result = $.Deferred().reject();\n      // Make sure we return a promise and that we record failures\n      return $.when(result).fail(function (errorMessage) {\n        if (true === _this10.validationResult) _this10.validationResult = [];\n        _this10.validationResult.push({\n          assert: constraint,\n          errorMessage: 'string' === typeof errorMessage && errorMessage\n        });\n      });\n    },\n\n    // @returns Parsley field computed value that could be overrided or configured in DOM\n    getValue: function getValue() {\n      var value;\n\n      // Value could be overriden in DOM or with explicit options\n      if ('function' === typeof this.options.value) value = this.options.value(this);else if ('undefined' !== typeof this.options.value) value = this.options.value;else value = this.$element.val();\n\n      // Handle wrong DOM or configurations\n      if ('undefined' === typeof value || null === value) return '';\n\n      return this._handleWhitespace(value);\n    },\n\n    // Actualize options that could have change since previous validation\n    // Re-bind accordingly constraints (could be some new, removed or updated)\n    refreshConstraints: function refreshConstraints() {\n      return this.actualizeOptions()._bindConstraints();\n    },\n\n    /**\r\n    * Add a new constraint to a field\r\n    *\r\n    * @param {String}   name\r\n    * @param {Mixed}    requirements      optional\r\n    * @param {Number}   priority          optional\r\n    * @param {Boolean}  isDomConstraint   optional\r\n    */\n    addConstraint: function addConstraint(name, requirements, priority, isDomConstraint) {\n\n      if (window.Parsley._validatorRegistry.validators[name]) {\n        var constraint = new ConstraintFactory(this, name, requirements, priority, isDomConstraint);\n\n        // if constraint already exist, delete it and push new version\n        if ('undefined' !== this.constraintsByName[constraint.name]) this.removeConstraint(constraint.name);\n\n        this.constraints.push(constraint);\n        this.constraintsByName[constraint.name] = constraint;\n      }\n\n      return this;\n    },\n\n    // Remove a constraint\n    removeConstraint: function removeConstraint(name) {\n      for (var i = 0; i < this.constraints.length; i++) if (name === this.constraints[i].name) {\n        this.constraints.splice(i, 1);\n        break;\n      }\n      delete this.constraintsByName[name];\n      return this;\n    },\n\n    // Update a constraint (Remove + re-add)\n    updateConstraint: function updateConstraint(name, parameters, priority) {\n      return this.removeConstraint(name).addConstraint(name, parameters, priority);\n    },\n\n    // # Internals\n\n    // Internal only.\n    // Bind constraints from config + options + DOM\n    _bindConstraints: function _bindConstraints() {\n      var constraints = [];\n      var constraintsByName = {};\n\n      // clean all existing DOM constraints to only keep javascript user constraints\n      for (var i = 0; i < this.constraints.length; i++) if (false === this.constraints[i].isDomConstraint) {\n        constraints.push(this.constraints[i]);\n        constraintsByName[this.constraints[i].name] = this.constraints[i];\n      }\n\n      this.constraints = constraints;\n      this.constraintsByName = constraintsByName;\n\n      // then re-add Parsley DOM-API constraints\n      for (var name in this.options) this.addConstraint(name, this.options[name], undefined, true);\n\n      // finally, bind special HTML5 constraints\n      return this._bindHtml5Constraints();\n    },\n\n    // Internal only.\n    // Bind specific HTML5 constraints to be HTML5 compliant\n    _bindHtml5Constraints: function _bindHtml5Constraints() {\n      // html5 required\n      if (this.$element.hasClass('required') || this.$element.attr('required')) this.addConstraint('required', true, undefined, true);\n\n      // html5 pattern\n      if ('string' === typeof this.$element.attr('pattern')) this.addConstraint('pattern', this.$element.attr('pattern'), undefined, true);\n\n      // range\n      if ('undefined' !== typeof this.$element.attr('min') && 'undefined' !== typeof this.$element.attr('max')) this.addConstraint('range', [this.$element.attr('min'), this.$element.attr('max')], undefined, true);\n\n      // HTML5 min\n      else if ('undefined' !== typeof this.$element.attr('min')) this.addConstraint('min', this.$element.attr('min'), undefined, true);\n\n        // HTML5 max\n        else if ('undefined' !== typeof this.$element.attr('max')) this.addConstraint('max', this.$element.attr('max'), undefined, true);\n\n      // length\n      if ('undefined' !== typeof this.$element.attr('minlength') && 'undefined' !== typeof this.$element.attr('maxlength')) this.addConstraint('length', [this.$element.attr('minlength'), this.$element.attr('maxlength')], undefined, true);\n\n      // HTML5 minlength\n      else if ('undefined' !== typeof this.$element.attr('minlength')) this.addConstraint('minlength', this.$element.attr('minlength'), undefined, true);\n\n        // HTML5 maxlength\n        else if ('undefined' !== typeof this.$element.attr('maxlength')) this.addConstraint('maxlength', this.$element.attr('maxlength'), undefined, true);\n\n      // html5 types\n      var type = this.$element.attr('type');\n\n      if ('undefined' === typeof type) return this;\n\n      // Small special case here for HTML5 number: integer validator if step attribute is undefined or an integer value, number otherwise\n      if ('number' === type) {\n        return this.addConstraint('type', ['number', {\n          step: this.$element.attr('step'),\n          base: this.$element.attr('min') || this.$element.attr('value')\n        }], undefined, true);\n        // Regular other HTML5 supported types\n      } else if (/^(email|url|range)$/i.test(type)) {\n          return this.addConstraint('type', type, undefined, true);\n        }\n      return this;\n    },\n\n    // Internal only.\n    // Field is required if have required constraint without `false` value\n    _isRequired: function _isRequired() {\n      if ('undefined' === typeof this.constraintsByName.required) return false;\n\n      return false !== this.constraintsByName.required.requirements;\n    },\n\n    // Internal only.\n    // Shortcut to trigger an event\n    _trigger: function _trigger(eventName) {\n      return this.trigger('field:' + eventName);\n    },\n\n    // Internal only\n    // Handles whitespace in a value\n    // Use `data-parsley-whitespace=\"squish\"` to auto squish input value\n    // Use `data-parsley-whitespace=\"trim\"` to auto trim input value\n    _handleWhitespace: function _handleWhitespace(value) {\n      if (true === this.options.trimValue) ParsleyUtils__default.warnOnce('data-parsley-trim-value=\"true\" is deprecated, please use data-parsley-whitespace=\"trim\"');\n\n      if ('squish' === this.options.whitespace) value = value.replace(/\\s{2,}/g, ' ');\n\n      if ('trim' === this.options.whitespace || 'squish' === this.options.whitespace || true === this.options.trimValue) value = ParsleyUtils__default.trimString(value);\n\n      return value;\n    },\n\n    // Internal only.\n    // Returns the constraints, grouped by descending priority.\n    // The result is thus an array of arrays of constraints.\n    _getGroupedConstraints: function _getGroupedConstraints() {\n      if (false === this.options.priorityEnabled) return [this.constraints];\n\n      var groupedConstraints = [];\n      var index = {};\n\n      // Create array unique of priorities\n      for (var i = 0; i < this.constraints.length; i++) {\n        var p = this.constraints[i].priority;\n        if (!index[p]) groupedConstraints.push(index[p] = []);\n        index[p].push(this.constraints[i]);\n      }\n      // Sort them by priority DESC\n      groupedConstraints.sort(function (a, b) {\n        return b[0].priority - a[0].priority;\n      });\n\n      return groupedConstraints;\n    }\n\n  };\n\n  var parsley_field = ParsleyField;\n\n  var ParsleyMultiple = function ParsleyMultiple() {\n    this.__class__ = 'ParsleyFieldMultiple';\n  };\n\n  ParsleyMultiple.prototype = {\n    // Add new `$element` sibling for multiple field\n    addElement: function addElement($element) {\n      this.$elements.push($element);\n\n      return this;\n    },\n\n    // See `ParsleyField.refreshConstraints()`\n    refreshConstraints: function refreshConstraints() {\n      var fieldConstraints;\n\n      this.constraints = [];\n\n      // Select multiple special treatment\n      if (this.$element.is('select')) {\n        this.actualizeOptions()._bindConstraints();\n\n        return this;\n      }\n\n      // Gather all constraints for each input in the multiple group\n      for (var i = 0; i < this.$elements.length; i++) {\n\n        // Check if element have not been dynamically removed since last binding\n        if (!$('html').has(this.$elements[i]).length) {\n          this.$elements.splice(i, 1);\n          continue;\n        }\n\n        fieldConstraints = this.$elements[i].data('ParsleyFieldMultiple').refreshConstraints().constraints;\n\n        for (var j = 0; j < fieldConstraints.length; j++) this.addConstraint(fieldConstraints[j].name, fieldConstraints[j].requirements, fieldConstraints[j].priority, fieldConstraints[j].isDomConstraint);\n      }\n\n      return this;\n    },\n\n    // See `ParsleyField.getValue()`\n    getValue: function getValue() {\n      // Value could be overriden in DOM\n      if ('function' === typeof this.options.value) value = this.options.value(this);else if ('undefined' !== typeof this.options.value) return this.options.value;\n\n      // Radio input case\n      if (this.$element.is('input[type=radio]')) return this._findRelated().filter(':checked').val() || '';\n\n      // checkbox input case\n      if (this.$element.is('input[type=checkbox]')) {\n        var values = [];\n\n        this._findRelated().filter(':checked').each(function () {\n          values.push($(this).val());\n        });\n\n        return values;\n      }\n\n      // Select multiple case\n      if (this.$element.is('select') && null === this.$element.val()) return [];\n\n      // Default case that should never happen\n      return this.$element.val();\n    },\n\n    _init: function _init() {\n      this.$elements = [this.$element];\n\n      return this;\n    }\n  };\n\n  var ParsleyFactory = function ParsleyFactory(element, options, parsleyFormInstance) {\n    this.$element = $(element);\n\n    // If the element has already been bound, returns its saved Parsley instance\n    var savedparsleyFormInstance = this.$element.data('Parsley');\n    if (savedparsleyFormInstance) {\n\n      // If the saved instance has been bound without a ParsleyForm parent and there is one given in this call, add it\n      if ('undefined' !== typeof parsleyFormInstance && savedparsleyFormInstance.parent === window.Parsley) {\n        savedparsleyFormInstance.parent = parsleyFormInstance;\n        savedparsleyFormInstance._resetOptions(savedparsleyFormInstance.options);\n      }\n\n      return savedparsleyFormInstance;\n    }\n\n    // Parsley must be instantiated with a DOM element or jQuery $element\n    if (!this.$element.length) throw new Error('You must bind Parsley on an existing element.');\n\n    if ('undefined' !== typeof parsleyFormInstance && 'ParsleyForm' !== parsleyFormInstance.__class__) throw new Error('Parent instance must be a ParsleyForm instance');\n\n    this.parent = parsleyFormInstance || window.Parsley;\n    return this.init(options);\n  };\n\n  ParsleyFactory.prototype = {\n    init: function init(options) {\n      this.__class__ = 'Parsley';\n      this.__version__ = '2.3.5';\n      this.__id__ = ParsleyUtils__default.generateID();\n\n      // Pre-compute options\n      this._resetOptions(options);\n\n      // A ParsleyForm instance is obviously a `<form>` element but also every node that is not an input and has the `data-parsley-validate` attribute\n      if (this.$element.is('form') || ParsleyUtils__default.checkAttr(this.$element, this.options.namespace, 'validate') && !this.$element.is(this.options.inputs)) return this.bind('parsleyForm');\n\n      // Every other element is bound as a `ParsleyField` or `ParsleyFieldMultiple`\n      return this.isMultiple() ? this.handleMultiple() : this.bind('parsleyField');\n    },\n\n    isMultiple: function isMultiple() {\n      return this.$element.is('input[type=radio], input[type=checkbox]') || this.$element.is('select') && 'undefined' !== typeof this.$element.attr('multiple');\n    },\n\n    // Multiples fields are a real nightmare :(\n    // Maybe some refactoring would be appreciated here...\n    handleMultiple: function handleMultiple() {\n      var _this11 = this;\n\n      var name;\n      var multiple;\n      var parsleyMultipleInstance;\n\n      // Handle multiple name\n      if (this.options.multiple) ; // We already have our 'multiple' identifier\n      else if ('undefined' !== typeof this.$element.attr('name') && this.$element.attr('name').length) this.options.multiple = name = this.$element.attr('name');else if ('undefined' !== typeof this.$element.attr('id') && this.$element.attr('id').length) this.options.multiple = this.$element.attr('id');\n\n      // Special select multiple input\n      if (this.$element.is('select') && 'undefined' !== typeof this.$element.attr('multiple')) {\n        this.options.multiple = this.options.multiple || this.__id__;\n        return this.bind('parsleyFieldMultiple');\n\n        // Else for radio / checkboxes, we need a `name` or `data-parsley-multiple` to properly bind it\n      } else if (!this.options.multiple) {\n          ParsleyUtils__default.warn('To be bound by Parsley, a radio, a checkbox and a multiple select input must have either a name or a multiple option.', this.$element);\n          return this;\n        }\n\n      // Remove special chars\n      this.options.multiple = this.options.multiple.replace(/(:|\\.|\\[|\\]|\\{|\\}|\\$)/g, '');\n\n      // Add proper `data-parsley-multiple` to siblings if we have a valid multiple name\n      if ('undefined' !== typeof name) {\n        $('input[name=\"' + name + '\"]').each(function (i, input) {\n          if ($(input).is('input[type=radio], input[type=checkbox]')) $(input).attr(_this11.options.namespace + 'multiple', _this11.options.multiple);\n        });\n      }\n\n      // Check here if we don't already have a related multiple instance saved\n      var $previouslyRelated = this._findRelated();\n      for (var i = 0; i < $previouslyRelated.length; i++) {\n        parsleyMultipleInstance = $($previouslyRelated.get(i)).data('Parsley');\n        if ('undefined' !== typeof parsleyMultipleInstance) {\n\n          if (!this.$element.data('ParsleyFieldMultiple')) {\n            parsleyMultipleInstance.addElement(this.$element);\n          }\n\n          break;\n        }\n      }\n\n      // Create a secret ParsleyField instance for every multiple field. It will be stored in `data('ParsleyFieldMultiple')`\n      // And will be useful later to access classic `ParsleyField` stuff while being in a `ParsleyFieldMultiple` instance\n      this.bind('parsleyField', true);\n\n      return parsleyMultipleInstance || this.bind('parsleyFieldMultiple');\n    },\n\n    // Return proper `ParsleyForm`, `ParsleyField` or `ParsleyFieldMultiple`\n    bind: function bind(type, doNotStore) {\n      var parsleyInstance;\n\n      switch (type) {\n        case 'parsleyForm':\n          parsleyInstance = $.extend(new ParsleyForm(this.$element, this.domOptions, this.options), window.ParsleyExtend)._bindFields();\n          break;\n        case 'parsleyField':\n          parsleyInstance = $.extend(new parsley_field(this.$element, this.domOptions, this.options, this.parent), window.ParsleyExtend);\n          break;\n        case 'parsleyFieldMultiple':\n          parsleyInstance = $.extend(new parsley_field(this.$element, this.domOptions, this.options, this.parent), new ParsleyMultiple(), window.ParsleyExtend)._init();\n          break;\n        default:\n          throw new Error(type + 'is not a supported Parsley type');\n      }\n\n      if (this.options.multiple) ParsleyUtils__default.setAttr(this.$element, this.options.namespace, 'multiple', this.options.multiple);\n\n      if ('undefined' !== typeof doNotStore) {\n        this.$element.data('ParsleyFieldMultiple', parsleyInstance);\n\n        return parsleyInstance;\n      }\n\n      // Store the freshly bound instance in a DOM element for later access using jQuery `data()`\n      this.$element.data('Parsley', parsleyInstance);\n\n      // Tell the world we have a new ParsleyForm or ParsleyField instance!\n      parsleyInstance._actualizeTriggers();\n      parsleyInstance._trigger('init');\n\n      return parsleyInstance;\n    }\n  };\n\n  var vernums = $.fn.jquery.split('.');\n  if (parseInt(vernums[0]) <= 1 && parseInt(vernums[1]) < 8) {\n    throw \"The loaded version of jQuery is too old. Please upgrade to 1.8.x or better.\";\n  }\n  if (!vernums.forEach) {\n    ParsleyUtils__default.warn('Parsley requires ES5 to run properly. Please include https://github.com/es-shims/es5-shim');\n  }\n  // Inherit `on`, `off` & `trigger` to Parsley:\n  var Parsley = $.extend(new ParsleyAbstract(), {\n    $element: $(document),\n    actualizeOptions: null,\n    _resetOptions: null,\n    Factory: ParsleyFactory,\n    version: '2.3.5'\n  });\n\n  // Supplement ParsleyField and Form with ParsleyAbstract\n  // This way, the constructors will have access to those methods\n  $.extend(parsley_field.prototype, ParsleyUI.Field, ParsleyAbstract.prototype);\n  $.extend(ParsleyForm.prototype, ParsleyUI.Form, ParsleyAbstract.prototype);\n  // Inherit actualizeOptions and _resetOptions:\n  $.extend(ParsleyFactory.prototype, ParsleyAbstract.prototype);\n\n  // ### jQuery API\n  // `$('.elem').parsley(options)` or `$('.elem').psly(options)`\n  $.fn.parsley = $.fn.psly = function (options) {\n    if (this.length > 1) {\n      var instances = [];\n\n      this.each(function () {\n        instances.push($(this).parsley(options));\n      });\n\n      return instances;\n    }\n\n    // Return undefined if applied to non existing DOM element\n    if (!$(this).length) {\n      ParsleyUtils__default.warn('You must bind Parsley on an existing element.');\n\n      return;\n    }\n\n    return new ParsleyFactory(this, options);\n  };\n\n  // ### ParsleyField and ParsleyForm extension\n  // Ensure the extension is now defined if it wasn't previously\n  if ('undefined' === typeof window.ParsleyExtend) window.ParsleyExtend = {};\n\n  // ### Parsley config\n  // Inherit from ParsleyDefault, and copy over any existing values\n  Parsley.options = $.extend(ParsleyUtils__default.objectCreate(ParsleyDefaults), window.ParsleyConfig);\n  window.ParsleyConfig = Parsley.options; // Old way of accessing global options\n\n  // ### Globals\n  window.Parsley = window.psly = Parsley;\n  window.ParsleyUtils = ParsleyUtils__default;\n\n  // ### Define methods that forward to the registry, and deprecate all access except through window.Parsley\n  var registry = window.Parsley._validatorRegistry = new ParsleyValidatorRegistry(window.ParsleyConfig.validators, window.ParsleyConfig.i18n);\n  window.ParsleyValidator = {};\n  $.each('setLocale addCatalog addMessage addMessages getErrorMessage formatMessage addValidator updateValidator removeValidator'.split(' '), function (i, method) {\n    window.Parsley[method] = $.proxy(registry, method);\n    window.ParsleyValidator[method] = function () {\n      var _window$Parsley;\n\n      ParsleyUtils__default.warnOnce('Accessing the method \\'' + method + '\\' through ParsleyValidator is deprecated. Simply call \\'window.Parsley.' + method + '(...)\\'');\n      return (_window$Parsley = window.Parsley)[method].apply(_window$Parsley, arguments);\n    };\n  });\n\n  // ### ParsleyUI\n  // Deprecated global object\n  window.Parsley.UI = ParsleyUI;\n  window.ParsleyUI = {\n    removeError: function removeError(instance, name, doNotUpdateClass) {\n      var updateClass = true !== doNotUpdateClass;\n      ParsleyUtils__default.warnOnce('Accessing ParsleyUI is deprecated. Call \\'removeError\\' on the instance directly. Please comment in issue 1073 as to your need to call this method.');\n      return instance.removeError(name, { updateClass: updateClass });\n    },\n    getErrorsMessages: function getErrorsMessages(instance) {\n      ParsleyUtils__default.warnOnce('Accessing ParsleyUI is deprecated. Call \\'getErrorsMessages\\' on the instance directly.');\n      return instance.getErrorsMessages();\n    }\n  };\n  $.each('addError updateError'.split(' '), function (i, method) {\n    window.ParsleyUI[method] = function (instance, name, message, assert, doNotUpdateClass) {\n      var updateClass = true !== doNotUpdateClass;\n      ParsleyUtils__default.warnOnce('Accessing ParsleyUI is deprecated. Call \\'' + method + '\\' on the instance directly. Please comment in issue 1073 as to your need to call this method.');\n      return instance[method](name, { message: message, assert: assert, updateClass: updateClass });\n    };\n  });\n\n  // Alleviate glaring Firefox bug https://bugzilla.mozilla.org/show_bug.cgi?id=1250521\n  // See also https://github.com/guillaumepotier/Parsley.js/issues/1068\n  if (/firefox/i.test(navigator.userAgent)) {\n    $(document).on('change', 'select', function (evt) {\n      $(evt.target).trigger('input');\n    });\n  }\n\n  // ### PARSLEY auto-binding\n  // Prevent it by setting `ParsleyConfig.autoBind` to `false`\n  if (false !== window.ParsleyConfig.autoBind) {\n    $(function () {\n      // Works only on `data-parsley-validate`.\n      if ($('[data-parsley-validate]').length) $('[data-parsley-validate]').parsley();\n    });\n  }\n\n  var o = $({});\n  var deprecated = function deprecated() {\n    ParsleyUtils__default.warnOnce(\"Parsley's pubsub module is deprecated; use the 'on' and 'off' methods on parsley instances or window.Parsley\");\n  };\n\n  // Returns an event handler that calls `fn` with the arguments it expects\n  function adapt(fn, context) {\n    // Store to allow unbinding\n    if (!fn.parsleyAdaptedCallback) {\n      fn.parsleyAdaptedCallback = function () {\n        var args = Array.prototype.slice.call(arguments, 0);\n        args.unshift(this);\n        fn.apply(context || o, args);\n      };\n    }\n    return fn.parsleyAdaptedCallback;\n  }\n\n  var eventPrefix = 'parsley:';\n  // Converts 'parsley:form:validate' into 'form:validate'\n  function eventName(name) {\n    if (name.lastIndexOf(eventPrefix, 0) === 0) return name.substr(eventPrefix.length);\n    return name;\n  }\n\n  // $.listen is deprecated. Use Parsley.on instead.\n  $.listen = function (name, callback) {\n    var context;\n    deprecated();\n    if ('object' === typeof arguments[1] && 'function' === typeof arguments[2]) {\n      context = arguments[1];\n      callback = arguments[2];\n    }\n\n    if ('function' !== typeof callback) throw new Error('Wrong parameters');\n\n    window.Parsley.on(eventName(name), adapt(callback, context));\n  };\n\n  $.listenTo = function (instance, name, fn) {\n    deprecated();\n    if (!(instance instanceof parsley_field) && !(instance instanceof ParsleyForm)) throw new Error('Must give Parsley instance');\n\n    if ('string' !== typeof name || 'function' !== typeof fn) throw new Error('Wrong parameters');\n\n    instance.on(eventName(name), adapt(fn));\n  };\n\n  $.unsubscribe = function (name, fn) {\n    deprecated();\n    if ('string' !== typeof name || 'function' !== typeof fn) throw new Error('Wrong arguments');\n    window.Parsley.off(eventName(name), fn.parsleyAdaptedCallback);\n  };\n\n  $.unsubscribeTo = function (instance, name) {\n    deprecated();\n    if (!(instance instanceof parsley_field) && !(instance instanceof ParsleyForm)) throw new Error('Must give Parsley instance');\n    instance.off(eventName(name));\n  };\n\n  $.unsubscribeAll = function (name) {\n    deprecated();\n    window.Parsley.off(eventName(name));\n    $('form,input,textarea,select').each(function () {\n      var instance = $(this).data('Parsley');\n      if (instance) {\n        instance.off(eventName(name));\n      }\n    });\n  };\n\n  // $.emit is deprecated. Use jQuery events instead.\n  $.emit = function (name, instance) {\n    var _instance;\n\n    deprecated();\n    var instanceGiven = instance instanceof parsley_field || instance instanceof ParsleyForm;\n    var args = Array.prototype.slice.call(arguments, instanceGiven ? 2 : 1);\n    args.unshift(eventName(name));\n    if (!instanceGiven) {\n      instance = window.Parsley;\n    }\n    (_instance = instance).trigger.apply(_instance, _toConsumableArray(args));\n  };\n\n  var pubsub = {};\n\n  $.extend(true, Parsley, {\n    asyncValidators: {\n      'default': {\n        fn: function fn(xhr) {\n          // By default, only status 2xx are deemed successful.\n          // Note: we use status instead of state() because responses with status 200\n          // but invalid messages (e.g. an empty body for content type set to JSON) will\n          // result in state() === 'rejected'.\n          return xhr.status >= 200 && xhr.status < 300;\n        },\n        url: false\n      },\n      reverse: {\n        fn: function fn(xhr) {\n          // If reverse option is set, a failing ajax request is considered successful\n          return xhr.status < 200 || xhr.status >= 300;\n        },\n        url: false\n      }\n    },\n\n    addAsyncValidator: function addAsyncValidator(name, fn, url, options) {\n      Parsley.asyncValidators[name] = {\n        fn: fn,\n        url: url || false,\n        options: options || {}\n      };\n\n      return this;\n    }\n\n  });\n\n  Parsley.addValidator('remote', {\n    requirementType: {\n      '': 'string',\n      'validator': 'string',\n      'reverse': 'boolean',\n      'options': 'object'\n    },\n\n    validateString: function validateString(value, url, options, instance) {\n      var data = {};\n      var ajaxOptions;\n      var csr;\n      var validator = options.validator || (true === options.reverse ? 'reverse' : 'default');\n\n      if ('undefined' === typeof Parsley.asyncValidators[validator]) throw new Error('Calling an undefined async validator: `' + validator + '`');\n\n      url = Parsley.asyncValidators[validator].url || url;\n\n      // Fill current value\n      if (url.indexOf('{value}') > -1) {\n        url = url.replace('{value}', encodeURIComponent(value));\n      } else {\n        data[instance.$element.attr('name') || instance.$element.attr('id')] = value;\n      }\n\n      // Merge options passed in from the function with the ones in the attribute\n      var remoteOptions = $.extend(true, options.options || {}, Parsley.asyncValidators[validator].options);\n\n      // All `$.ajax(options)` could be overridden or extended directly from DOM in `data-parsley-remote-options`\n      ajaxOptions = $.extend(true, {}, {\n        url: url,\n        data: data,\n        type: 'GET',\n        useCache: true\n      }, remoteOptions);\n\n      if (ajaxOptions.useCache === \"false\") ajaxOptions.useCache = false;\n\n      // Generate store key based on ajax options\n      instance.trigger('field:ajaxoptions', instance, ajaxOptions);\n\n      if (ajaxOptions.useCache) {\n        try {\n          csr = $.param(ajaxOptions);\n        } catch (e) {\n          ajaxOptions.useCache = false;\n        }\n      }\n\n      // Initialise query cache\n      if ('undefined' === typeof Parsley._remoteCache) Parsley._remoteCache = {};\n\n      // Try to retrieve stored xhr\n      var xhr = ajaxOptions.useCache ? Parsley._remoteCache[csr] = Parsley._remoteCache[csr] || $.ajax(ajaxOptions) : $.ajax(ajaxOptions);\n\n      var handleXhr = function handleXhr() {\n        var result = Parsley.asyncValidators[validator].fn.call(instance, xhr, url, options);\n        if (!result) // Map falsy results to rejected promise\n          result = $.Deferred().reject();\n        return $.when(result);\n      };\n\n      return xhr.then(handleXhr, handleXhr);\n    },\n\n    priority: -1\n  });\n\n  Parsley.on('form:submit', function () {\n    Parsley._remoteCache = {};\n  });\n\n  window.ParsleyExtend.addAsyncValidator = function () {\n    ParsleyUtils.warnOnce('Accessing the method `addAsyncValidator` through an instance is deprecated. Simply call `Parsley.addAsyncValidator(...)`');\n    return Parsley.addAsyncValidator.apply(Parsley, arguments);\n  };\n\n  // This is included with the Parsley library itself,\n  // thus there is no use in adding it to your project.\n  Parsley.addMessages('en', {\n    defaultMessage: \"This value seems to be invalid.\",\n    type: {\n      email: \"This value should be a valid email.\",\n      url: \"This value should be a valid url.\",\n      number: \"This value should be a valid number.\",\n      integer: \"This value should be a valid integer.\",\n      digits: \"This value should be digits.\",\n      alphanum: \"This value should be alphanumeric.\"\n    },\n    notblank: \"This value should not be blank.\",\n    required: \"This value is required.\",\n    pattern: \"This value seems to be invalid.\",\n    min: \"This value should be greater than or equal to %s.\",\n    max: \"This value should be lower than or equal to %s.\",\n    range: \"This value should be between %s and %s.\",\n    minlength: \"This value is too short. It should have %s characters or more.\",\n    maxlength: \"This value is too long. It should have %s characters or fewer.\",\n    length: \"This value length is invalid. It should be between %s and %s characters long.\",\n    mincheck: \"You must select at least %s choices.\",\n    maxcheck: \"You must select %s choices or fewer.\",\n    check: \"You must select between %s and %s choices.\",\n    equalto: \"This value should be the same.\"\n  });\n\n  Parsley.setLocale('en');\n\n  var parsley = Parsley;\n\n  return parsley;\n});\n//# sourceMappingURL=parsley.js.map\n","(function (global, factory) {\n  typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory(require('jquery')) :\n  typeof define === 'function' && define.amd ? define(['jquery'], factory) :\n  global.parsley = factory(global.$)\n}(this, function ($) { 'use strict';\n\n  var globalID = 1;\r\n  var pastWarnings = {};\r\n\r\n  var ParsleyUtils__ParsleyUtils = {\r\n    // Parsley DOM-API\r\n    // returns object from dom attributes and values\r\n    attr: function ($element, namespace, obj) {\r\n      var i;\r\n      var attribute;\r\n      var attributes;\r\n      var regex = new RegExp('^' + namespace, 'i');\r\n\r\n      if ('undefined' === typeof obj)\r\n        obj = {};\r\n      else {\r\n        // Clear all own properties. This won't affect prototype's values\r\n        for (i in obj) {\r\n          if (obj.hasOwnProperty(i))\r\n            delete obj[i];\r\n        }\r\n      }\r\n\r\n      if ('undefined' === typeof $element || 'undefined' === typeof $element[0])\r\n        return obj;\r\n\r\n      attributes = $element[0].attributes;\r\n      for (i = attributes.length; i--; ) {\r\n        attribute = attributes[i];\r\n\r\n        if (attribute && attribute.specified && regex.test(attribute.name)) {\r\n          obj[this.camelize(attribute.name.slice(namespace.length))] = this.deserializeValue(attribute.value);\r\n        }\r\n      }\r\n\r\n      return obj;\r\n    },\r\n\r\n    checkAttr: function ($element, namespace, checkAttr) {\r\n      return $element.is('[' + namespace + checkAttr + ']');\r\n    },\r\n\r\n    setAttr: function ($element, namespace, attr, value) {\r\n      $element[0].setAttribute(this.dasherize(namespace + attr), String(value));\r\n    },\r\n\r\n    generateID: function () {\r\n      return '' + globalID++;\r\n    },\r\n\r\n    /** Third party functions **/\r\n    // Zepto deserialize function\r\n    deserializeValue: function (value) {\r\n      var num;\r\n\r\n      try {\r\n        return value ?\r\n          value == \"true\" ||\r\n          (value == \"false\" ? false :\r\n          value == \"null\" ? null :\r\n          !isNaN(num = Number(value)) ? num :\r\n          /^[\\[\\{]/.test(value) ? $.parseJSON(value) :\r\n          value)\r\n          : value;\r\n      } catch (e) { return value; }\r\n    },\r\n\r\n    // Zepto camelize function\r\n    camelize: function (str) {\r\n      return str.replace(/-+(.)?/g, function (match, chr) {\r\n        return chr ? chr.toUpperCase() : '';\r\n      });\r\n    },\r\n\r\n    // Zepto dasherize function\r\n    dasherize: function (str) {\r\n      return str.replace(/::/g, '/')\r\n        .replace(/([A-Z]+)([A-Z][a-z])/g, '$1_$2')\r\n        .replace(/([a-z\\d])([A-Z])/g, '$1_$2')\r\n        .replace(/_/g, '-')\r\n        .toLowerCase();\r\n    },\r\n\r\n    warn: function () {\r\n      if (window.console && 'function' === typeof window.console.warn)\r\n        window.console.warn(...arguments);\r\n    },\r\n\r\n    warnOnce: function(msg) {\r\n      if (!pastWarnings[msg]) {\r\n        pastWarnings[msg] = true;\r\n        this.warn(...arguments);\r\n      }\r\n    },\r\n\r\n    _resetWarnings: function () {\r\n      pastWarnings = {};\r\n    },\r\n\r\n    trimString: function(string) {\r\n      return string.replace(/^\\s+|\\s+$/g, '');\r\n    },\r\n\r\n    namespaceEvents: function(events, namespace) {\r\n      events = this.trimString(events || '').split(/\\s+/);\r\n      if (!events[0])\r\n        return '';\r\n      return $.map(events, evt => { return `${evt}.${namespace}`; }).join(' ');\r\n    },\r\n\r\n    // Object.create polyfill, see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/create#Polyfill\r\n    objectCreate: Object.create || (function () {\r\n      var Object = function () {};\r\n      return function (prototype) {\r\n        if (arguments.length > 1) {\r\n          throw Error('Second argument not supported');\r\n        }\r\n        if (typeof prototype != 'object') {\r\n          throw TypeError('Argument must be an object');\r\n        }\r\n        Object.prototype = prototype;\r\n        var result = new Object();\r\n        Object.prototype = null;\r\n        return result;\r\n      };\r\n    })()\r\n  };\r\n\r\n  var ParsleyUtils__default = ParsleyUtils__ParsleyUtils;\n\n  // All these options could be overriden and specified directly in DOM using\r\n  // `data-parsley-` default DOM-API\r\n  // eg: `inputs` can be set in DOM using `data-parsley-inputs=\"input, textarea\"`\r\n  // eg: `data-parsley-stop-on-first-failing-constraint=\"false\"`\r\n\r\n  var ParsleyDefaults = {\r\n    // ### General\r\n\r\n    // Default data-namespace for DOM API\r\n    namespace: 'data-parsley-',\r\n\r\n    // Supported inputs by default\r\n    inputs: 'input, textarea, select',\r\n\r\n    // Excluded inputs by default\r\n    excluded: 'input[type=button], input[type=submit], input[type=reset], input[type=hidden]',\r\n\r\n    // Stop validating field on highest priority failing constraint\r\n    priorityEnabled: true,\r\n\r\n    // ### Field only\r\n\r\n    // identifier used to group together inputs (e.g. radio buttons...)\r\n    multiple: null,\r\n\r\n    // identifier (or array of identifiers) used to validate only a select group of inputs\r\n    group: null,\r\n\r\n    // ### UI\r\n    // Enable\\Disable error messages\r\n    uiEnabled: true,\r\n\r\n    // Key events threshold before validation\r\n    validationThreshold: 3,\r\n\r\n    // Focused field on form validation error. 'first'|'last'|'none'\r\n    focus: 'first',\r\n\r\n    // event(s) that will trigger validation before first failure. eg: `input`...\r\n    trigger: false,\r\n\r\n    // event(s) that will trigger validation after first failure.\r\n    triggerAfterFailure: 'input',\r\n\r\n    // Class that would be added on every failing validation Parsley field\r\n    errorClass: 'parsley-error',\r\n\r\n    // Same for success validation\r\n    successClass: 'parsley-success',\r\n\r\n    // Return the `$element` that will receive these above success or error classes\r\n    // Could also be (and given directly from DOM) a valid selector like `'#div'`\r\n    classHandler: function (ParsleyField) {},\r\n\r\n    // Return the `$element` where errors will be appended\r\n    // Could also be (and given directly from DOM) a valid selector like `'#div'`\r\n    errorsContainer: function (ParsleyField) {},\r\n\r\n    // ul elem that would receive errors' list\r\n    errorsWrapper: '<ul class=\"parsley-errors-list\"></ul>',\r\n\r\n    // li elem that would receive error message\r\n    errorTemplate: '<li></li>'\r\n  };\n\n  var ParsleyAbstract = function () {};\r\n\r\n  ParsleyAbstract.prototype = {\r\n    asyncSupport: true, // Deprecated\r\n\r\n    actualizeOptions: function () {\r\n      ParsleyUtils__default.attr(this.$element, this.options.namespace, this.domOptions);\r\n      if (this.parent && this.parent.actualizeOptions)\r\n        this.parent.actualizeOptions();\r\n      return this;\r\n    },\r\n\r\n    _resetOptions: function (initOptions) {\r\n      this.domOptions = ParsleyUtils__default.objectCreate(this.parent.options);\r\n      this.options = ParsleyUtils__default.objectCreate(this.domOptions);\r\n      // Shallow copy of ownProperties of initOptions:\r\n      for (var i in initOptions) {\r\n        if (initOptions.hasOwnProperty(i))\r\n          this.options[i] = initOptions[i];\r\n      }\r\n      this.actualizeOptions();\r\n    },\r\n\r\n    _listeners: null,\r\n\r\n    // Register a callback for the given event name\r\n    // Callback is called with context as the first argument and the `this`\r\n    // The context is the current parsley instance, or window.Parsley if global\r\n    // A return value of `false` will interrupt the calls\r\n    on: function (name, fn) {\r\n      this._listeners = this._listeners || {};\r\n      var queue = this._listeners[name] = this._listeners[name] || [];\r\n      queue.push(fn);\r\n\r\n      return this;\r\n    },\r\n\r\n    // Deprecated. Use `on` instead\r\n    subscribe: function(name, fn) {\r\n      $.listenTo(this, name.toLowerCase(), fn);\r\n    },\r\n\r\n    // Unregister a callback (or all if none is given) for the given event name\r\n    off: function (name, fn) {\r\n      var queue = this._listeners && this._listeners[name];\r\n      if (queue) {\r\n        if (!fn) {\r\n          delete this._listeners[name];\r\n        } else {\r\n          for (var i = queue.length; i--; )\r\n            if (queue[i] === fn)\r\n              queue.splice(i, 1);\r\n        }\r\n      }\r\n      return this;\r\n    },\r\n\r\n    // Deprecated. Use `off`\r\n    unsubscribe: function(name, fn) {\r\n      $.unsubscribeTo(this, name.toLowerCase());\r\n    },\r\n\r\n    // Trigger an event of the given name\r\n    // A return value of `false` interrupts the callback chain\r\n    // Returns false if execution was interrupted\r\n    trigger: function (name, target, extraArg) {\r\n      target = target || this;\r\n      var queue = this._listeners && this._listeners[name];\r\n      var result;\r\n      var parentResult;\r\n      if (queue) {\r\n        for (var i = queue.length; i--; ) {\r\n          result = queue[i].call(target, target, extraArg);\r\n          if (result === false) return result;\r\n        }\r\n      }\r\n      if (this.parent) {\r\n        return this.parent.trigger(name, target, extraArg);\r\n      }\r\n      return true;\r\n    },\r\n\r\n    // Reset UI\r\n    reset: function () {\r\n      // Field case: just emit a reset event for UI\r\n      if ('ParsleyForm' !== this.__class__) {\r\n        this._resetUI();\r\n        return this._trigger('reset');\r\n      }\r\n\r\n      // Form case: emit a reset event for each field\r\n      for (var i = 0; i < this.fields.length; i++)\r\n        this.fields[i].reset();\r\n\r\n      this._trigger('reset');\r\n    },\r\n\r\n    // Destroy Parsley instance (+ UI)\r\n    destroy: function () {\r\n      // Field case: emit destroy event to clean UI and then destroy stored instance\r\n      this._destroyUI();\r\n      if ('ParsleyForm' !== this.__class__) {\r\n        this.$element.removeData('Parsley');\r\n        this.$element.removeData('ParsleyFieldMultiple');\r\n        this._trigger('destroy');\r\n\r\n        return;\r\n      }\r\n\r\n      // Form case: destroy all its fields and then destroy stored instance\r\n      for (var i = 0; i < this.fields.length; i++)\r\n        this.fields[i].destroy();\r\n\r\n      this.$element.removeData('Parsley');\r\n      this._trigger('destroy');\r\n    },\r\n\r\n    asyncIsValid: function (group, force) {\r\n      ParsleyUtils__default.warnOnce(\"asyncIsValid is deprecated; please use whenValid instead\");\r\n      return this.whenValid({group, force});\r\n    },\r\n\r\n    _findRelated: function () {\r\n      return this.options.multiple ?\r\n        this.parent.$element.find(`[${this.options.namespace}multiple=\"${this.options.multiple}\"]`)\r\n      : this.$element;\r\n    }\r\n  };\n\n  var requirementConverters = {\r\n    string: function(string) {\r\n      return string;\r\n    },\r\n    integer: function(string) {\r\n      if (isNaN(string))\r\n        throw 'Requirement is not an integer: \"' + string + '\"';\r\n      return parseInt(string, 10);\r\n    },\r\n    number: function(string) {\r\n      if (isNaN(string))\r\n        throw 'Requirement is not a number: \"' + string + '\"';\r\n      return parseFloat(string);\r\n    },\r\n    reference: function(string) { // Unused for now\r\n      var result = $(string);\r\n      if (result.length === 0)\r\n        throw 'No such reference: \"' + string + '\"';\r\n      return result;\r\n    },\r\n    boolean: function(string) {\r\n      return string !== 'false';\r\n    },\r\n    object: function(string) {\r\n      return ParsleyUtils__default.deserializeValue(string);\r\n    },\r\n    regexp: function(regexp) {\r\n      var flags = '';\r\n\r\n      // Test if RegExp is literal, if not, nothing to be done, otherwise, we need to isolate flags and pattern\r\n      if (/^\\/.*\\/(?:[gimy]*)$/.test(regexp)) {\r\n        // Replace the regexp literal string with the first match group: ([gimy]*)\r\n        // If no flag is present, this will be a blank string\r\n        flags = regexp.replace(/.*\\/([gimy]*)$/, '$1');\r\n        // Again, replace the regexp literal string with the first match group:\r\n        // everything excluding the opening and closing slashes and the flags\r\n        regexp = regexp.replace(new RegExp('^/(.*?)/' + flags + '$'), '$1');\r\n      } else {\r\n        // Anchor regexp:\r\n        regexp = '^' + regexp + '$';\r\n      }\r\n      return new RegExp(regexp, flags);\r\n    }\r\n  };\r\n\r\n  var convertArrayRequirement = function(string, length) {\r\n    var m = string.match(/^\\s*\\[(.*)\\]\\s*$/);\r\n    if (!m)\r\n      throw 'Requirement is not an array: \"' + string + '\"';\r\n    var values = m[1].split(',').map(ParsleyUtils__default.trimString);\r\n    if (values.length !== length)\r\n      throw 'Requirement has ' + values.length + ' values when ' + length + ' are needed';\r\n    return values;\r\n  };\r\n\r\n  var convertRequirement = function(requirementType, string) {\r\n    var converter = requirementConverters[requirementType || 'string'];\r\n    if (!converter)\r\n      throw 'Unknown requirement specification: \"' + requirementType + '\"';\r\n    return converter(string);\r\n  };\r\n\r\n  var convertExtraOptionRequirement = function(requirementSpec, string, extraOptionReader) {\r\n    var main = null;\r\n    var extra = {};\r\n    for (var key in requirementSpec) {\r\n      if (key) {\r\n        var value = extraOptionReader(key);\r\n        if ('string' === typeof value)\r\n          value = convertRequirement(requirementSpec[key], value);\r\n        extra[key] = value;\r\n      } else {\r\n        main = convertRequirement(requirementSpec[key], string);\r\n      }\r\n    }\r\n    return [main, extra];\r\n  };\r\n\r\n  // A Validator needs to implement the methods `validate` and `parseRequirements`\r\n\r\n  var ParsleyValidator = function(spec) {\r\n    $.extend(true, this, spec);\r\n  };\r\n\r\n  ParsleyValidator.prototype = {\r\n    // Returns `true` iff the given `value` is valid according the given requirements.\r\n    validate: function(value, requirementFirstArg) {\r\n      if (this.fn) { // Legacy style validator\r\n\r\n        if (arguments.length > 3)  // If more args then value, requirement, instance...\r\n          requirementFirstArg = [].slice.call(arguments, 1, -1);  // Skip first arg (value) and last (instance), combining the rest\r\n        return this.fn.call(this, value, requirementFirstArg);\r\n      }\r\n\r\n      if ($.isArray(value)) {\r\n        if (!this.validateMultiple)\r\n          throw 'Validator `' + this.name + '` does not handle multiple values';\r\n        return this.validateMultiple(...arguments);\r\n      } else {\r\n        if (this.validateNumber) {\r\n          if (isNaN(value))\r\n            return false;\r\n          arguments[0] = parseFloat(arguments[0]);\r\n          return this.validateNumber(...arguments);\r\n        }\r\n        if (this.validateString) {\r\n          return this.validateString(...arguments);\r\n        }\r\n        throw 'Validator `' + this.name + '` only handles multiple values';\r\n      }\r\n    },\r\n\r\n    // Parses `requirements` into an array of arguments,\r\n    // according to `this.requirementType`\r\n    parseRequirements: function(requirements, extraOptionReader) {\r\n      if ('string' !== typeof requirements) {\r\n        // Assume requirement already parsed\r\n        // but make sure we return an array\r\n        return $.isArray(requirements) ? requirements : [requirements];\r\n      }\r\n      var type = this.requirementType;\r\n      if ($.isArray(type)) {\r\n        var values = convertArrayRequirement(requirements, type.length);\r\n        for (var i = 0; i < values.length; i++)\r\n          values[i] = convertRequirement(type[i], values[i]);\r\n        return values;\r\n      } else if ($.isPlainObject(type)) {\r\n        return convertExtraOptionRequirement(type, requirements, extraOptionReader);\r\n      } else {\r\n        return [convertRequirement(type, requirements)];\r\n      }\r\n    },\r\n    // Defaults:\r\n    requirementType: 'string',\r\n\r\n    priority: 2\r\n\r\n  };\n\n  var ParsleyValidatorRegistry = function (validators, catalog) {\r\n    this.__class__ = 'ParsleyValidatorRegistry';\r\n\r\n    // Default Parsley locale is en\r\n    this.locale = 'en';\r\n\r\n    this.init(validators || {}, catalog || {});\r\n  };\r\n\r\n  var typeRegexes =  {\r\n    email: /^((([a-z]|\\d|[!#\\$%&'\\*\\+\\-\\/=\\?\\^_`{\\|}~]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])+(\\.([a-z]|\\d|[!#\\$%&'\\*\\+\\-\\/=\\?\\^_`{\\|}~]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])+)*)|((\\x22)((((\\x20|\\x09)*(\\x0d\\x0a))?(\\x20|\\x09)+)?(([\\x01-\\x08\\x0b\\x0c\\x0e-\\x1f\\x7f]|\\x21|[\\x23-\\x5b]|[\\x5d-\\x7e]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])|(\\\\([\\x01-\\x09\\x0b\\x0c\\x0d-\\x7f]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF]))))*(((\\x20|\\x09)*(\\x0d\\x0a))?(\\x20|\\x09)+)?(\\x22)))@((([a-z]|\\d|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])|(([a-z]|\\d|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])([a-z]|\\d|-|\\.|_|~|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])*([a-z]|\\d|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])))\\.)+(([a-z]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])|(([a-z]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])([a-z]|\\d|-|\\.|_|~|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])*([a-z]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])))$/i,\r\n\r\n    // Follow https://www.w3.org/TR/html5/infrastructure.html#floating-point-numbers\r\n    number: /^-?(\\d*\\.)?\\d+(e[-+]?\\d+)?$/i,\r\n\r\n    integer: /^-?\\d+$/,\r\n\r\n    digits: /^\\d+$/,\r\n\r\n    alphanum: /^\\w+$/i,\r\n\r\n    url: new RegExp(\r\n        \"^\" +\r\n          // protocol identifier\r\n          \"(?:(?:https?|ftp)://)?\" + // ** mod: make scheme optional\r\n          // user:pass authentication\r\n          \"(?:\\\\S+(?::\\\\S*)?@)?\" +\r\n          \"(?:\" +\r\n            // IP address exclusion\r\n            // private & local networks\r\n            // \"(?!(?:10|127)(?:\\\\.\\\\d{1,3}){3})\" +   // ** mod: allow local networks\r\n            // \"(?!(?:169\\\\.254|192\\\\.168)(?:\\\\.\\\\d{1,3}){2})\" +  // ** mod: allow local networks\r\n            // \"(?!172\\\\.(?:1[6-9]|2\\\\d|3[0-1])(?:\\\\.\\\\d{1,3}){2})\" +  // ** mod: allow local networks\r\n            // IP address dotted notation octets\r\n            // excludes loopback network 0.0.0.0\r\n            // excludes reserved space >= 224.0.0.0\r\n            // excludes network & broacast addresses\r\n            // (first & last IP address of each class)\r\n            \"(?:[1-9]\\\\d?|1\\\\d\\\\d|2[01]\\\\d|22[0-3])\" +\r\n            \"(?:\\\\.(?:1?\\\\d{1,2}|2[0-4]\\\\d|25[0-5])){2}\" +\r\n            \"(?:\\\\.(?:[1-9]\\\\d?|1\\\\d\\\\d|2[0-4]\\\\d|25[0-4]))\" +\r\n          \"|\" +\r\n            // host name\r\n            \"(?:(?:[a-z\\\\u00a1-\\\\uffff0-9]-*)*[a-z\\\\u00a1-\\\\uffff0-9]+)\" +\r\n            // domain name\r\n            \"(?:\\\\.(?:[a-z\\\\u00a1-\\\\uffff0-9]-*)*[a-z\\\\u00a1-\\\\uffff0-9]+)*\" +\r\n            // TLD identifier\r\n            \"(?:\\\\.(?:[a-z\\\\u00a1-\\\\uffff]{2,}))\" +\r\n          \")\" +\r\n          // port number\r\n          \"(?::\\\\d{2,5})?\" +\r\n          // resource path\r\n          \"(?:/\\\\S*)?\" +\r\n        \"$\", 'i'\r\n      )\r\n  };\r\n  typeRegexes.range = typeRegexes.number;\r\n\r\n  // See http://stackoverflow.com/a/10454560/8279\r\n  var decimalPlaces = num => {\r\n    var match = ('' + num).match(/(?:\\.(\\d+))?(?:[eE]([+-]?\\d+))?$/);\r\n    if (!match) { return 0; }\r\n    return Math.max(\r\n         0,\r\n         // Number of digits right of decimal point.\r\n         (match[1] ? match[1].length : 0) -\r\n         // Adjust for scientific notation.\r\n         (match[2] ? +match[2] : 0));\r\n  };\r\n\r\n  ParsleyValidatorRegistry.prototype = {\r\n    init: function (validators, catalog) {\r\n      this.catalog = catalog;\r\n      // Copy prototype's validators:\r\n      this.validators = $.extend({}, this.validators);\r\n\r\n      for (var name in validators)\r\n        this.addValidator(name, validators[name].fn, validators[name].priority);\r\n\r\n      window.Parsley.trigger('parsley:validator:init');\r\n    },\r\n\r\n    // Set new messages locale if we have dictionary loaded in ParsleyConfig.i18n\r\n    setLocale: function (locale) {\r\n      if ('undefined' === typeof this.catalog[locale])\r\n        throw new Error(locale + ' is not available in the catalog');\r\n\r\n      this.locale = locale;\r\n\r\n      return this;\r\n    },\r\n\r\n    // Add a new messages catalog for a given locale. Set locale for this catalog if set === `true`\r\n    addCatalog: function (locale, messages, set) {\r\n      if ('object' === typeof messages)\r\n        this.catalog[locale] = messages;\r\n\r\n      if (true === set)\r\n        return this.setLocale(locale);\r\n\r\n      return this;\r\n    },\r\n\r\n    // Add a specific message for a given constraint in a given locale\r\n    addMessage: function (locale, name, message) {\r\n      if ('undefined' === typeof this.catalog[locale])\r\n        this.catalog[locale] = {};\r\n\r\n      this.catalog[locale][name] = message;\r\n\r\n      return this;\r\n    },\r\n\r\n    // Add messages for a given locale\r\n    addMessages: function (locale, nameMessageObject) {\r\n      for (var name in nameMessageObject)\r\n        this.addMessage(locale, name, nameMessageObject[name]);\r\n\r\n      return this;\r\n    },\r\n\r\n    // Add a new validator\r\n    //\r\n    //    addValidator('custom', {\r\n    //        requirementType: ['integer', 'integer'],\r\n    //        validateString: function(value, from, to) {},\r\n    //        priority: 22,\r\n    //        messages: {\r\n    //          en: \"Hey, that's no good\",\r\n    //          fr: \"Aye aye, pas bon du tout\",\r\n    //        }\r\n    //    })\r\n    //\r\n    // Old API was addValidator(name, function, priority)\r\n    //\r\n    addValidator: function (name, arg1, arg2) {\r\n      if (this.validators[name])\r\n        ParsleyUtils__default.warn('Validator \"' + name + '\" is already defined.');\r\n      else if (ParsleyDefaults.hasOwnProperty(name)) {\r\n        ParsleyUtils__default.warn('\"' + name + '\" is a restricted keyword and is not a valid validator name.');\r\n        return;\r\n      }\r\n      return this._setValidator(...arguments);\r\n    },\r\n\r\n    updateValidator: function (name, arg1, arg2) {\r\n      if (!this.validators[name]) {\r\n        ParsleyUtils__default.warn('Validator \"' + name + '\" is not already defined.');\r\n        return this.addValidator(...arguments);\r\n      }\r\n      return this._setValidator(this, arguments);\r\n    },\r\n\r\n    removeValidator: function (name) {\r\n      if (!this.validators[name])\r\n        ParsleyUtils__default.warn('Validator \"' + name + '\" is not defined.');\r\n\r\n      delete this.validators[name];\r\n\r\n      return this;\r\n    },\r\n\r\n    _setValidator: function (name, validator, priority) {\r\n      if ('object' !== typeof validator) {\r\n        // Old style validator, with `fn` and `priority`\r\n        validator = {\r\n          fn: validator,\r\n          priority: priority\r\n        };\r\n      }\r\n      if (!validator.validate) {\r\n        validator = new ParsleyValidator(validator);\r\n      }\r\n      this.validators[name] = validator;\r\n\r\n      for (var locale in validator.messages || {})\r\n        this.addMessage(locale, name, validator.messages[locale]);\r\n\r\n      return this;\r\n    },\r\n\r\n    getErrorMessage: function (constraint) {\r\n      var message;\r\n\r\n      // Type constraints are a bit different, we have to match their requirements too to find right error message\r\n      if ('type' === constraint.name) {\r\n        var typeMessages = this.catalog[this.locale][constraint.name] || {};\r\n        message = typeMessages[constraint.requirements];\r\n      } else\r\n        message = this.formatMessage(this.catalog[this.locale][constraint.name], constraint.requirements);\r\n\r\n      return message || this.catalog[this.locale].defaultMessage || this.catalog.en.defaultMessage;\r\n    },\r\n\r\n    // Kind of light `sprintf()` implementation\r\n    formatMessage: function (string, parameters) {\r\n      if ('object' === typeof parameters) {\r\n        for (var i in parameters)\r\n          string = this.formatMessage(string, parameters[i]);\r\n\r\n        return string;\r\n      }\r\n\r\n      return 'string' === typeof string ? string.replace(/%s/i, parameters) : '';\r\n    },\r\n\r\n    // Here is the Parsley default validators list.\r\n    // A validator is an object with the following key values:\r\n    //  - priority: an integer\r\n    //  - requirement: 'string' (default), 'integer', 'number', 'regexp' or an Array of these\r\n    //  - validateString, validateMultiple, validateNumber: functions returning `true`, `false` or a promise\r\n    // Alternatively, a validator can be a function that returns such an object\r\n    //\r\n    validators: {\r\n      notblank: {\r\n        validateString: function(value) {\r\n          return /\\S/.test(value);\r\n        },\r\n        priority: 2\r\n      },\r\n      required: {\r\n        validateMultiple: function(values) {\r\n          return values.length > 0;\r\n        },\r\n        validateString: function(value) {\r\n          return /\\S/.test(value);\r\n        },\r\n        priority: 512\r\n      },\r\n      type: {\r\n        validateString: function(value, type, {step = '1', base = 0} = {}) {\r\n          var regex = typeRegexes[type];\r\n          if (!regex) {\r\n            throw new Error('validator type `' + type + '` is not supported');\r\n          }\r\n          if (!regex.test(value))\r\n            return false;\r\n          if ('number' === type) {\r\n            if (!/^any$/i.test(step || '')) {\r\n              var nb = Number(value);\r\n              var decimals = Math.max(decimalPlaces(step), decimalPlaces(base));\r\n              if (decimalPlaces(nb) > decimals) // Value can't have too many decimals\r\n                return false;\r\n              // Be careful of rounding errors by using integers.\r\n              var toInt = f => { return Math.round(f * Math.pow(10, decimals)); };\r\n              if ((toInt(nb) - toInt(base)) % toInt(step) != 0)\r\n                return false;\r\n            }\r\n          }\r\n          return true;\r\n        },\r\n        requirementType: {\r\n          '': 'string',\r\n          step: 'string',\r\n          base: 'number'\r\n        },\r\n        priority: 256\r\n      },\r\n      pattern: {\r\n        validateString: function(value, regexp) {\r\n          return regexp.test(value);\r\n        },\r\n        requirementType: 'regexp',\r\n        priority: 64\r\n      },\r\n      minlength: {\r\n        validateString: function (value, requirement) {\r\n          return value.length >= requirement;\r\n        },\r\n        requirementType: 'integer',\r\n        priority: 30\r\n      },\r\n      maxlength: {\r\n        validateString: function (value, requirement) {\r\n          return value.length <= requirement;\r\n        },\r\n        requirementType: 'integer',\r\n        priority: 30\r\n      },\r\n      length: {\r\n        validateString: function (value, min, max) {\r\n          return value.length >= min && value.length <= max;\r\n        },\r\n        requirementType: ['integer', 'integer'],\r\n        priority: 30\r\n      },\r\n      mincheck: {\r\n        validateMultiple: function (values, requirement) {\r\n          return values.length >= requirement;\r\n        },\r\n        requirementType: 'integer',\r\n        priority: 30\r\n      },\r\n      maxcheck: {\r\n        validateMultiple: function (values, requirement) {\r\n          return values.length <= requirement;\r\n        },\r\n        requirementType: 'integer',\r\n        priority: 30\r\n      },\r\n      check: {\r\n        validateMultiple: function (values, min, max) {\r\n          return values.length >= min && values.length <= max;\r\n        },\r\n        requirementType: ['integer', 'integer'],\r\n        priority: 30\r\n      },\r\n      min: {\r\n        validateNumber: function (value, requirement) {\r\n          return value >= requirement;\r\n        },\r\n        requirementType: 'number',\r\n        priority: 30\r\n      },\r\n      max: {\r\n        validateNumber: function (value, requirement) {\r\n          return value <= requirement;\r\n        },\r\n        requirementType: 'number',\r\n        priority: 30\r\n      },\r\n      range: {\r\n        validateNumber: function (value, min, max) {\r\n          return value >= min && value <= max;\r\n        },\r\n        requirementType: ['number', 'number'],\r\n        priority: 30\r\n      },\r\n      equalto: {\r\n        validateString: function (value, refOrValue) {\r\n          var $reference = $(refOrValue);\r\n          if ($reference.length)\r\n            return value === $reference.val();\r\n          else\r\n            return value === refOrValue;\r\n        },\r\n        priority: 256\r\n      }\r\n    }\r\n  };\n\n  var ParsleyUI = {};\r\n\r\n  var diffResults = function (newResult, oldResult, deep) {\r\n    var added = [];\r\n    var kept = [];\r\n\r\n    for (var i = 0; i < newResult.length; i++) {\r\n      var found = false;\r\n\r\n      for (var j = 0; j < oldResult.length; j++)\r\n        if (newResult[i].assert.name === oldResult[j].assert.name) {\r\n          found = true;\r\n          break;\r\n        }\r\n\r\n      if (found)\r\n        kept.push(newResult[i]);\r\n      else\r\n        added.push(newResult[i]);\r\n    }\r\n\r\n    return {\r\n      kept: kept,\r\n      added: added,\r\n      removed: !deep ? diffResults(oldResult, newResult, true).added : []\r\n    };\r\n  };\r\n\r\n  ParsleyUI.Form = {\r\n\r\n    _actualizeTriggers: function () {\r\n      this.$element.on('submit.Parsley', evt => { this.onSubmitValidate(evt); });\r\n      this.$element.on('click.Parsley', 'input[type=\"submit\"], button[type=\"submit\"]', evt => { this.onSubmitButton(evt); });\r\n\r\n      // UI could be disabled\r\n      if (false === this.options.uiEnabled)\r\n        return;\r\n\r\n      this.$element.attr('novalidate', '');\r\n    },\r\n\r\n    focus: function () {\r\n      this._focusedField = null;\r\n\r\n      if (true === this.validationResult || 'none' === this.options.focus)\r\n        return null;\r\n\r\n      for (var i = 0; i < this.fields.length; i++) {\r\n        var field = this.fields[i];\r\n        if (true !== field.validationResult && field.validationResult.length > 0 && 'undefined' === typeof field.options.noFocus) {\r\n          this._focusedField = field.$element;\r\n          if ('first' === this.options.focus)\r\n            break;\r\n        }\r\n      }\r\n\r\n      if (null === this._focusedField)\r\n        return null;\r\n\r\n      return this._focusedField.focus();\r\n    },\r\n\r\n    _destroyUI: function () {\r\n      // Reset all event listeners\r\n      this.$element.off('.Parsley');\r\n    }\r\n\r\n  };\r\n\r\n  ParsleyUI.Field = {\r\n\r\n    _reflowUI: function () {\r\n      this._buildUI();\r\n\r\n      // If this field doesn't have an active UI don't bother doing something\r\n      if (!this._ui)\r\n        return;\r\n\r\n      // Diff between two validation results\r\n      var diff = diffResults(this.validationResult, this._ui.lastValidationResult);\r\n\r\n      // Then store current validation result for next reflow\r\n      this._ui.lastValidationResult = this.validationResult;\r\n\r\n      // Handle valid / invalid / none field class\r\n      this._manageStatusClass();\r\n\r\n      // Add, remove, updated errors messages\r\n      this._manageErrorsMessages(diff);\r\n\r\n      // Triggers impl\r\n      this._actualizeTriggers();\r\n\r\n      // If field is not valid for the first time, bind keyup trigger to ease UX and quickly inform user\r\n      if ((diff.kept.length || diff.added.length) && !this._failedOnce) {\r\n        this._failedOnce = true;\r\n        this._actualizeTriggers();\r\n      }\r\n    },\r\n\r\n    // Returns an array of field's error message(s)\r\n    getErrorsMessages: function () {\r\n      // No error message, field is valid\r\n      if (true === this.validationResult)\r\n        return [];\r\n\r\n      var messages = [];\r\n\r\n      for (var i = 0; i < this.validationResult.length; i++)\r\n        messages.push(this.validationResult[i].errorMessage ||\r\n         this._getErrorMessage(this.validationResult[i].assert));\r\n\r\n      return messages;\r\n    },\r\n\r\n    // It's a goal of Parsley that this method is no longer required [#1073]\r\n    addError: function (name, {message, assert, updateClass = true} = {}) {\r\n      this._buildUI();\r\n      this._addError(name, {message, assert});\r\n\r\n      if (updateClass)\r\n        this._errorClass();\r\n    },\r\n\r\n    // It's a goal of Parsley that this method is no longer required [#1073]\r\n    updateError: function (name, {message, assert, updateClass = true} = {}) {\r\n      this._buildUI();\r\n      this._updateError(name, {message, assert});\r\n\r\n      if (updateClass)\r\n        this._errorClass();\r\n    },\r\n\r\n    // It's a goal of Parsley that this method is no longer required [#1073]\r\n    removeError: function (name, {updateClass = true} = {}) {\r\n      this._buildUI();\r\n      this._removeError(name);\r\n\r\n      // edge case possible here: remove a standard Parsley error that is still failing in this.validationResult\r\n      // but highly improbable cuz' manually removing a well Parsley handled error makes no sense.\r\n      if (updateClass)\r\n        this._manageStatusClass();\r\n    },\r\n\r\n    _manageStatusClass: function () {\r\n      if (this.hasConstraints() && this.needsValidation() && true === this.validationResult)\r\n        this._successClass();\r\n      else if (this.validationResult.length > 0)\r\n        this._errorClass();\r\n      else\r\n        this._resetClass();\r\n    },\r\n\r\n    _manageErrorsMessages: function (diff) {\r\n      if ('undefined' !== typeof this.options.errorsMessagesDisabled)\r\n        return;\r\n\r\n      // Case where we have errorMessage option that configure an unique field error message, regardless failing validators\r\n      if ('undefined' !== typeof this.options.errorMessage) {\r\n        if ((diff.added.length || diff.kept.length)) {\r\n          this._insertErrorWrapper();\r\n\r\n          if (0 === this._ui.$errorsWrapper.find('.parsley-custom-error-message').length)\r\n            this._ui.$errorsWrapper\r\n              .append(\r\n                $(this.options.errorTemplate)\r\n                .addClass('parsley-custom-error-message')\r\n              );\r\n\r\n          return this._ui.$errorsWrapper\r\n            .addClass('filled')\r\n            .find('.parsley-custom-error-message')\r\n            .html(this.options.errorMessage);\r\n        }\r\n\r\n        return this._ui.$errorsWrapper\r\n          .removeClass('filled')\r\n          .find('.parsley-custom-error-message')\r\n          .remove();\r\n      }\r\n\r\n      // Show, hide, update failing constraints messages\r\n      for (var i = 0; i < diff.removed.length; i++)\r\n        this._removeError(diff.removed[i].assert.name);\r\n\r\n      for (i = 0; i < diff.added.length; i++)\r\n        this._addError(diff.added[i].assert.name, {message: diff.added[i].errorMessage, assert: diff.added[i].assert});\r\n\r\n      for (i = 0; i < diff.kept.length; i++)\r\n        this._updateError(diff.kept[i].assert.name, {message: diff.kept[i].errorMessage, assert: diff.kept[i].assert});\r\n    },\r\n\r\n\r\n    _addError: function (name, {message, assert}) {\r\n      this._insertErrorWrapper();\r\n      this._ui.$errorsWrapper\r\n        .addClass('filled')\r\n        .append(\r\n          $(this.options.errorTemplate)\r\n          .addClass('parsley-' + name)\r\n          .html(message || this._getErrorMessage(assert))\r\n        );\r\n    },\r\n\r\n    _updateError: function (name, {message, assert}) {\r\n      this._ui.$errorsWrapper\r\n        .addClass('filled')\r\n        .find('.parsley-' + name)\r\n        .html(message || this._getErrorMessage(assert));\r\n    },\r\n\r\n    _removeError: function (name) {\r\n      this._ui.$errorsWrapper\r\n        .removeClass('filled')\r\n        .find('.parsley-' + name)\r\n        .remove();\r\n    },\r\n\r\n    _getErrorMessage: function (constraint) {\r\n      var customConstraintErrorMessage = constraint.name + 'Message';\r\n\r\n      if ('undefined' !== typeof this.options[customConstraintErrorMessage])\r\n        return window.Parsley.formatMessage(this.options[customConstraintErrorMessage], constraint.requirements);\r\n\r\n      return window.Parsley.getErrorMessage(constraint);\r\n    },\r\n\r\n    _buildUI: function () {\r\n      // UI could be already built or disabled\r\n      if (this._ui || false === this.options.uiEnabled)\r\n        return;\r\n\r\n      var _ui = {};\r\n\r\n      // Give field its Parsley id in DOM\r\n      this.$element.attr(this.options.namespace + 'id', this.__id__);\r\n\r\n      /** Generate important UI elements and store them in this **/\r\n      // $errorClassHandler is the $element that woul have parsley-error and parsley-success classes\r\n      _ui.$errorClassHandler = this._manageClassHandler();\r\n\r\n      // $errorsWrapper is a div that would contain the various field errors, it will be appended into $errorsContainer\r\n      _ui.errorsWrapperId = 'parsley-id-' + (this.options.multiple ? 'multiple-' + this.options.multiple : this.__id__);\r\n      _ui.$errorsWrapper = $(this.options.errorsWrapper).attr('id', _ui.errorsWrapperId);\r\n\r\n      // ValidationResult UI storage to detect what have changed bwt two validations, and update DOM accordingly\r\n      _ui.lastValidationResult = [];\r\n      _ui.validationInformationVisible = false;\r\n\r\n      // Store it in this for later\r\n      this._ui = _ui;\r\n    },\r\n\r\n    // Determine which element will have `parsley-error` and `parsley-success` classes\r\n    _manageClassHandler: function () {\r\n      // An element selector could be passed through DOM with `data-parsley-class-handler=#foo`\r\n      if ('string' === typeof this.options.classHandler && $(this.options.classHandler).length)\r\n        return $(this.options.classHandler);\r\n\r\n      // Class handled could also be determined by function given in Parsley options\r\n      var $handler = this.options.classHandler.call(this, this);\r\n\r\n      // If this function returned a valid existing DOM element, go for it\r\n      if ('undefined' !== typeof $handler && $handler.length)\r\n        return $handler;\r\n\r\n      // Otherwise, if simple element (input, texatrea, select...) it will perfectly host the classes\r\n      if (!this.options.multiple || this.$element.is('select'))\r\n        return this.$element;\r\n\r\n      // But if multiple element (radio, checkbox), that would be their parent\r\n      return this.$element.parent();\r\n    },\r\n\r\n    _insertErrorWrapper: function () {\r\n      var $errorsContainer;\r\n\r\n      // Nothing to do if already inserted\r\n      if (0 !== this._ui.$errorsWrapper.parent().length)\r\n        return this._ui.$errorsWrapper.parent();\r\n\r\n      if ('string' === typeof this.options.errorsContainer) {\r\n        if ($(this.options.errorsContainer).length)\r\n          return $(this.options.errorsContainer).append(this._ui.$errorsWrapper);\r\n        else\r\n          ParsleyUtils__default.warn('The errors container `' + this.options.errorsContainer + '` does not exist in DOM');\r\n      } else if ('function' === typeof this.options.errorsContainer)\r\n        $errorsContainer = this.options.errorsContainer.call(this, this);\r\n\r\n      if ('undefined' !== typeof $errorsContainer && $errorsContainer.length)\r\n        return $errorsContainer.append(this._ui.$errorsWrapper);\r\n\r\n      var $from = this.$element;\r\n      if (this.options.multiple)\r\n        $from = $from.parent();\r\n      return $from.after(this._ui.$errorsWrapper);\r\n    },\r\n\r\n    _actualizeTriggers: function () {\r\n      var $toBind = this._findRelated();\r\n\r\n      // Remove Parsley events already bound on this field\r\n      $toBind.off('.Parsley');\r\n      if (this._failedOnce)\r\n        $toBind.on(ParsleyUtils__default.namespaceEvents(this.options.triggerAfterFailure, 'Parsley'), () => {\r\n          this.validate();\r\n        });\r\n      else {\r\n        $toBind.on(ParsleyUtils__default.namespaceEvents(this.options.trigger, 'Parsley'), event => {\r\n          this._eventValidate(event);\r\n        });\r\n      }\r\n    },\r\n\r\n    _eventValidate: function (event) {\r\n      // For keyup, keypress, keydown, input... events that could be a little bit obstrusive\r\n      // do not validate if val length < min threshold on first validation. Once field have been validated once and info\r\n      // about success or failure have been displayed, always validate with this trigger to reflect every yalidation change.\r\n      if (/key|input/.test(event.type))\r\n        if (!(this._ui && this._ui.validationInformationVisible) && this.getValue().length <= this.options.validationThreshold)\r\n          return;\r\n\r\n      this.validate();\r\n    },\r\n\r\n    _resetUI: function () {\r\n      // Reset all event listeners\r\n      this._failedOnce = false;\r\n      this._actualizeTriggers();\r\n\r\n      // Nothing to do if UI never initialized for this field\r\n      if ('undefined' === typeof this._ui)\r\n        return;\r\n\r\n      // Reset all errors' li\r\n      this._ui.$errorsWrapper\r\n        .removeClass('filled')\r\n        .children()\r\n        .remove();\r\n\r\n      // Reset validation class\r\n      this._resetClass();\r\n\r\n      // Reset validation flags and last validation result\r\n      this._ui.lastValidationResult = [];\r\n      this._ui.validationInformationVisible = false;\r\n    },\r\n\r\n    _destroyUI: function () {\r\n      this._resetUI();\r\n\r\n      if ('undefined' !== typeof this._ui)\r\n        this._ui.$errorsWrapper.remove();\r\n\r\n      delete this._ui;\r\n    },\r\n\r\n    _successClass: function () {\r\n      this._ui.validationInformationVisible = true;\r\n      this._ui.$errorClassHandler.removeClass(this.options.errorClass).addClass(this.options.successClass);\r\n    },\r\n    _errorClass: function () {\r\n      this._ui.validationInformationVisible = true;\r\n      this._ui.$errorClassHandler.removeClass(this.options.successClass).addClass(this.options.errorClass);\r\n    },\r\n    _resetClass: function () {\r\n      this._ui.$errorClassHandler.removeClass(this.options.successClass).removeClass(this.options.errorClass);\r\n    }\r\n  };\n\n  var ParsleyForm = function (element, domOptions, options) {\r\n    this.__class__ = 'ParsleyForm';\r\n    this.__id__ = ParsleyUtils__default.generateID();\r\n\r\n    this.$element = $(element);\r\n    this.domOptions = domOptions;\r\n    this.options = options;\r\n    this.parent = window.Parsley;\r\n\r\n    this.fields = [];\r\n    this.validationResult = null;\r\n  };\r\n\r\n  var ParsleyForm__statusMapping = {pending: null, resolved: true, rejected: false};\r\n\r\n  ParsleyForm.prototype = {\r\n    onSubmitValidate: function (event) {\r\n      // This is a Parsley generated submit event, do not validate, do not prevent, simply exit and keep normal behavior\r\n      if (true === event.parsley)\r\n        return;\r\n\r\n      // If we didn't come here through a submit button, use the first one in the form\r\n      var $submitSource = this._$submitSource || this.$element.find('input[type=\"submit\"], button[type=\"submit\"]').first();\r\n      this._$submitSource = null;\r\n      this.$element.find('.parsley-synthetic-submit-button').prop('disabled', true);\r\n      if ($submitSource.is('[formnovalidate]'))\r\n        return;\r\n\r\n      var promise = this.whenValidate({event});\r\n\r\n      if ('resolved' === promise.state() && false !== this._trigger('submit')) {\r\n        // All good, let event go through. We make this distinction because browsers\r\n        // differ in their handling of `submit` being called from inside a submit event [#1047]\r\n      } else {\r\n        // Rejected or pending: cancel this submit\r\n        event.stopImmediatePropagation();\r\n        event.preventDefault();\r\n        if ('pending' === promise.state())\r\n          promise.done(() => { this._submit($submitSource); });\r\n      }\r\n    },\r\n\r\n    onSubmitButton: function(event) {\r\n      this._$submitSource = $(event.target);\r\n    },\r\n    // internal\r\n    // _submit submits the form, this time without going through the validations.\r\n    // Care must be taken to \"fake\" the actual submit button being clicked.\r\n    _submit: function ($submitSource) {\r\n      if (false === this._trigger('submit'))\r\n        return;\r\n      // Add submit button's data\r\n      if ($submitSource) {\r\n        var $synthetic = this.$element.find('.parsley-synthetic-submit-button').prop('disabled', false);\r\n        if (0 === $synthetic.length)\r\n          $synthetic = $('<input class=\"parsley-synthetic-submit-button\" type=\"hidden\">').appendTo(this.$element);\r\n        $synthetic.attr({\r\n          name: $submitSource.attr('name'),\r\n          value: $submitSource.attr('value')\r\n        });\r\n      }\r\n\r\n      this.$element.trigger($.extend($.Event('submit'), {parsley: true}));\r\n    },\r\n\r\n    // Performs validation on fields while triggering events.\r\n    // @returns `true` if all validations succeeds, `false`\r\n    // if a failure is immediately detected, or `null`\r\n    // if dependant on a promise.\r\n    // Consider using `whenValidate` instead.\r\n    validate: function (options) {\r\n      if (arguments.length >= 1 && !$.isPlainObject(options)) {\r\n        ParsleyUtils__default.warnOnce('Calling validate on a parsley form without passing arguments as an object is deprecated.');\r\n        var [group, force, event] = arguments;\r\n        options = {group, force, event};\r\n      }\r\n      return ParsleyForm__statusMapping[ this.whenValidate(options).state() ];\r\n    },\r\n\r\n    whenValidate: function ({group, force, event} = {}) {\r\n      this.submitEvent = event;\r\n      if (event) {\r\n        this.submitEvent = $.extend({}, event, {preventDefault: () => {\r\n          ParsleyUtils__default.warnOnce(\"Using `this.submitEvent.preventDefault()` is deprecated; instead, call `this.validationResult = false`\");\r\n          this.validationResult = false;\r\n        }});\r\n      }\r\n      this.validationResult = true;\r\n\r\n      // fire validate event to eventually modify things before very validation\r\n      this._trigger('validate');\r\n\r\n      // Refresh form DOM options and form's fields that could have changed\r\n      this._refreshFields();\r\n\r\n      var promises = this._withoutReactualizingFormOptions(() => {\r\n        return $.map(this.fields, field => {\r\n          return field.whenValidate({force, group});\r\n        });\r\n      });\r\n\r\n      var promiseBasedOnValidationResult = () => {\r\n        var r = $.Deferred();\r\n        if (false === this.validationResult)\r\n          r.reject();\r\n        return r.resolve().promise();\r\n      };\r\n\r\n      return $.when(...promises)\r\n        .done(  () => { this._trigger('success'); })\r\n        .fail(  () => {\r\n          this.validationResult = false;\r\n          this.focus();\r\n          this._trigger('error');\r\n        })\r\n        .always(() => { this._trigger('validated'); })\r\n        .pipe(  promiseBasedOnValidationResult, promiseBasedOnValidationResult);\r\n    },\r\n\r\n    // Iterate over refreshed fields, and stop on first failure.\r\n    // Returns `true` if all fields are valid, `false` if a failure is detected\r\n    // or `null` if the result depends on an unresolved promise.\r\n    // Prefer using `whenValid` instead.\r\n    isValid: function (options) {\r\n      if (arguments.length >= 1 && !$.isPlainObject(options)) {\r\n        ParsleyUtils__default.warnOnce('Calling isValid on a parsley form without passing arguments as an object is deprecated.');\r\n        var [group, force] = arguments;\r\n        options = {group, force};\r\n      }\r\n      return ParsleyForm__statusMapping[ this.whenValid(options).state() ];\r\n    },\r\n\r\n    // Iterate over refreshed fields and validate them.\r\n    // Returns a promise.\r\n    // A validation that immediately fails will interrupt the validations.\r\n    whenValid: function ({group, force} = {}) {\r\n      this._refreshFields();\r\n\r\n      var promises = this._withoutReactualizingFormOptions(() => {\r\n        return $.map(this.fields, field => {\r\n          return field.whenValid({group, force});\r\n        });\r\n      });\r\n      return $.when(...promises);\r\n    },\r\n\r\n    _refreshFields: function () {\r\n      return this.actualizeOptions()._bindFields();\r\n    },\r\n\r\n    _bindFields: function () {\r\n      var oldFields = this.fields;\r\n\r\n      this.fields = [];\r\n      this.fieldsMappedById = {};\r\n\r\n      this._withoutReactualizingFormOptions(() => {\r\n        this.$element\r\n        .find(this.options.inputs)\r\n        .not(this.options.excluded)\r\n        .each((_, element) => {\r\n          var fieldInstance = new window.Parsley.Factory(element, {}, this);\r\n\r\n          // Only add valid and not excluded `ParsleyField` and `ParsleyFieldMultiple` children\r\n          if (('ParsleyField' === fieldInstance.__class__ || 'ParsleyFieldMultiple' === fieldInstance.__class__) && (true !== fieldInstance.options.excluded))\r\n            if ('undefined' === typeof this.fieldsMappedById[fieldInstance.__class__ + '-' + fieldInstance.__id__]) {\r\n              this.fieldsMappedById[fieldInstance.__class__ + '-' + fieldInstance.__id__] = fieldInstance;\r\n              this.fields.push(fieldInstance);\r\n            }\r\n        });\r\n\r\n        $(oldFields).not(this.fields).each((_, field) => {\r\n          field._trigger('reset');\r\n        });\r\n      });\r\n      return this;\r\n    },\r\n\r\n    // Internal only.\r\n    // Looping on a form's fields to do validation or similar\r\n    // will trigger reactualizing options on all of them, which\r\n    // in turn will reactualize the form's options.\r\n    // To avoid calling actualizeOptions so many times on the form\r\n    // for nothing, _withoutReactualizingFormOptions temporarily disables\r\n    // the method actualizeOptions on this form while `fn` is called.\r\n    _withoutReactualizingFormOptions: function (fn) {\r\n      var oldActualizeOptions = this.actualizeOptions;\r\n      this.actualizeOptions = function () { return this; };\r\n      var result = fn();\r\n      this.actualizeOptions = oldActualizeOptions;\r\n      return result;\r\n    },\r\n\r\n    // Internal only.\r\n    // Shortcut to trigger an event\r\n    // Returns true iff event is not interrupted and default not prevented.\r\n    _trigger: function (eventName) {\r\n      return this.trigger('form:' + eventName);\r\n    }\r\n\r\n  };\n\n  var ConstraintFactory = function (parsleyField, name, requirements, priority, isDomConstraint) {\r\n    if (!/ParsleyField/.test(parsleyField.__class__))\r\n      throw new Error('ParsleyField or ParsleyFieldMultiple instance expected');\r\n\r\n    var validatorSpec = window.Parsley._validatorRegistry.validators[name];\r\n    var validator = new ParsleyValidator(validatorSpec);\r\n\r\n    $.extend(this, {\r\n      validator: validator,\r\n      name: name,\r\n      requirements: requirements,\r\n      priority: priority || parsleyField.options[name + 'Priority'] || validator.priority,\r\n      isDomConstraint: true === isDomConstraint\r\n    });\r\n    this._parseRequirements(parsleyField.options);\r\n  };\r\n\r\n  var capitalize = function(str) {\r\n    var cap = str[0].toUpperCase();\r\n    return cap + str.slice(1);\r\n  };\r\n\r\n  ConstraintFactory.prototype = {\r\n    validate: function(value, instance) {\r\n      var args = this.requirementList.slice(0); // Make copy\r\n      args.unshift(value);\r\n      args.push(instance);\r\n      return this.validator.validate.apply(this.validator, args);\r\n    },\r\n\r\n    _parseRequirements: function(options) {\r\n      this.requirementList = this.validator.parseRequirements(this.requirements, key => {\r\n        return options[this.name + capitalize(key)];\r\n      });\r\n    }\r\n  };\n\n  var ParsleyField = function (field, domOptions, options, parsleyFormInstance) {\r\n    this.__class__ = 'ParsleyField';\r\n    this.__id__ = ParsleyUtils__default.generateID();\r\n\r\n    this.$element = $(field);\r\n\r\n    // Set parent if we have one\r\n    if ('undefined' !== typeof parsleyFormInstance) {\r\n      this.parent = parsleyFormInstance;\r\n    }\r\n\r\n    this.options = options;\r\n    this.domOptions = domOptions;\r\n\r\n    // Initialize some properties\r\n    this.constraints = [];\r\n    this.constraintsByName = {};\r\n    this.validationResult = [];\r\n\r\n    // Bind constraints\r\n    this._bindConstraints();\r\n  };\r\n\r\n  var parsley_field__statusMapping = {pending: null, resolved: true, rejected: false};\r\n\r\n  ParsleyField.prototype = {\r\n    // # Public API\r\n    // Validate field and trigger some events for mainly `ParsleyUI`\r\n    // @returns `true`, an array of the validators that failed, or\r\n    // `null` if validation is not finished. Prefer using whenValidate\r\n    validate: function (options) {\r\n      if (arguments.length >= 1 && !$.isPlainObject(options)) {\r\n        ParsleyUtils__default.warnOnce('Calling validate on a parsley field without passing arguments as an object is deprecated.');\r\n        options = {options};\r\n      }\r\n      var promise = this.whenValidate(options);\r\n      if (!promise)  // If excluded with `group` option\r\n        return true;\r\n      switch (promise.state()) {\r\n        case 'pending': return null;\r\n        case 'resolved': return true;\r\n        case 'rejected': return this.validationResult;\r\n      }\r\n    },\r\n\r\n    // Validate field and trigger some events for mainly `ParsleyUI`\r\n    // @returns a promise that succeeds only when all validations do\r\n    // or `undefined` if field is not in the given `group`.\r\n    whenValidate: function ({force, group} =  {}) {\r\n      // do not validate a field if not the same as given validation group\r\n      this.refreshConstraints();\r\n      if (group && !this._isInGroup(group))\r\n        return;\r\n\r\n      this.value = this.getValue();\r\n\r\n      // Field Validate event. `this.value` could be altered for custom needs\r\n      this._trigger('validate');\r\n\r\n      return this.whenValid({force, value: this.value, _refreshed: true})\r\n        .always(() => { this._reflowUI(); })\r\n        .done(() =>   { this._trigger('success'); })\r\n        .fail(() =>   { this._trigger('error'); })\r\n        .always(() => { this._trigger('validated'); });\r\n    },\r\n\r\n    hasConstraints: function () {\r\n      return 0 !== this.constraints.length;\r\n    },\r\n\r\n    // An empty optional field does not need validation\r\n    needsValidation: function (value) {\r\n      if ('undefined' === typeof value)\r\n        value = this.getValue();\r\n\r\n      // If a field is empty and not required, it is valid\r\n      // Except if `data-parsley-validate-if-empty` explicitely added, useful for some custom validators\r\n      if (!value.length && !this._isRequired() && 'undefined' === typeof this.options.validateIfEmpty)\r\n        return false;\r\n\r\n      return true;\r\n    },\r\n\r\n    _isInGroup: function (group) {\r\n      if ($.isArray(this.options.group))\r\n        return -1 !== $.inArray(group, this.options.group);\r\n      return this.options.group === group;\r\n    },\r\n\r\n    // Just validate field. Do not trigger any event.\r\n    // Returns `true` iff all constraints pass, `false` if there are failures,\r\n    // or `null` if the result can not be determined yet (depends on a promise)\r\n    // See also `whenValid`.\r\n    isValid: function (options) {\r\n      if (arguments.length >= 1 && !$.isPlainObject(options)) {\r\n        ParsleyUtils__default.warnOnce('Calling isValid on a parsley field without passing arguments as an object is deprecated.');\r\n        var [force, value] = arguments;\r\n        options = {force, value};\r\n      }\r\n      var promise = this.whenValid(options);\r\n      if (!promise) // Excluded via `group`\r\n        return true;\r\n      return parsley_field__statusMapping[promise.state()];\r\n    },\r\n\r\n    // Just validate field. Do not trigger any event.\r\n    // @returns a promise that succeeds only when all validations do\r\n    // or `undefined` if the field is not in the given `group`.\r\n    // The argument `force` will force validation of empty fields.\r\n    // If a `value` is given, it will be validated instead of the value of the input.\r\n    whenValid: function ({force = false, value, group, _refreshed} = {}) {\r\n      // Recompute options and rebind constraints to have latest changes\r\n      if (!_refreshed)\r\n        this.refreshConstraints();\r\n      // do not validate a field if not the same as given validation group\r\n      if (group && !this._isInGroup(group))\r\n        return;\r\n\r\n      this.validationResult = true;\r\n\r\n      // A field without constraint is valid\r\n      if (!this.hasConstraints())\r\n        return $.when();\r\n\r\n      // Value could be passed as argument, needed to add more power to 'parsley:field:validate'\r\n      if ('undefined' === typeof value || null === value)\r\n        value = this.getValue();\r\n\r\n      if (!this.needsValidation(value) && true !== force)\r\n        return $.when();\r\n\r\n      var groupedConstraints = this._getGroupedConstraints();\r\n      var promises = [];\r\n      $.each(groupedConstraints, (_, constraints) => {\r\n        // Process one group of constraints at a time, we validate the constraints\r\n        // and combine the promises together.\r\n        var promise = $.when(\r\n          ...$.map(constraints, constraint => this._validateConstraint(value, constraint))\r\n        );\r\n        promises.push(promise);\r\n        if (promise.state() === 'rejected')\r\n          return false; // Interrupt processing if a group has already failed\r\n      });\r\n      return $.when.apply($, promises);\r\n    },\r\n\r\n    // @returns a promise\r\n    _validateConstraint: function(value, constraint) {\r\n      var result = constraint.validate(value, this);\r\n      // Map false to a failed promise\r\n      if (false === result)\r\n        result = $.Deferred().reject();\r\n      // Make sure we return a promise and that we record failures\r\n      return $.when(result).fail(errorMessage => {\r\n        if (true === this.validationResult)\r\n          this.validationResult = [];\r\n        this.validationResult.push({\r\n          assert: constraint,\r\n          errorMessage: 'string' === typeof errorMessage && errorMessage\r\n        });\r\n      });\r\n    },\r\n\r\n    // @returns Parsley field computed value that could be overrided or configured in DOM\r\n    getValue: function () {\r\n      var value;\r\n\r\n      // Value could be overriden in DOM or with explicit options\r\n      if ('function' === typeof this.options.value)\r\n        value = this.options.value(this);\r\n      else if ('undefined' !== typeof this.options.value)\r\n        value = this.options.value;\r\n      else\r\n        value = this.$element.val();\r\n\r\n      // Handle wrong DOM or configurations\r\n      if ('undefined' === typeof value || null === value)\r\n        return '';\r\n\r\n      return this._handleWhitespace(value);\r\n    },\r\n\r\n    // Actualize options that could have change since previous validation\r\n    // Re-bind accordingly constraints (could be some new, removed or updated)\r\n    refreshConstraints: function () {\r\n      return this.actualizeOptions()._bindConstraints();\r\n    },\r\n\r\n    /**\r\n    * Add a new constraint to a field\r\n    *\r\n    * @param {String}   name\r\n    * @param {Mixed}    requirements      optional\r\n    * @param {Number}   priority          optional\r\n    * @param {Boolean}  isDomConstraint   optional\r\n    */\r\n    addConstraint: function (name, requirements, priority, isDomConstraint) {\r\n\r\n      if (window.Parsley._validatorRegistry.validators[name]) {\r\n        var constraint = new ConstraintFactory(this, name, requirements, priority, isDomConstraint);\r\n\r\n        // if constraint already exist, delete it and push new version\r\n        if ('undefined' !== this.constraintsByName[constraint.name])\r\n          this.removeConstraint(constraint.name);\r\n\r\n        this.constraints.push(constraint);\r\n        this.constraintsByName[constraint.name] = constraint;\r\n      }\r\n\r\n      return this;\r\n    },\r\n\r\n    // Remove a constraint\r\n    removeConstraint: function (name) {\r\n      for (var i = 0; i < this.constraints.length; i++)\r\n        if (name === this.constraints[i].name) {\r\n          this.constraints.splice(i, 1);\r\n          break;\r\n        }\r\n      delete this.constraintsByName[name];\r\n      return this;\r\n    },\r\n\r\n    // Update a constraint (Remove + re-add)\r\n    updateConstraint: function (name, parameters, priority) {\r\n      return this.removeConstraint(name)\r\n        .addConstraint(name, parameters, priority);\r\n    },\r\n\r\n    // # Internals\r\n\r\n    // Internal only.\r\n    // Bind constraints from config + options + DOM\r\n    _bindConstraints: function () {\r\n      var constraints = [];\r\n      var constraintsByName = {};\r\n\r\n      // clean all existing DOM constraints to only keep javascript user constraints\r\n      for (var i = 0; i < this.constraints.length; i++)\r\n        if (false === this.constraints[i].isDomConstraint) {\r\n          constraints.push(this.constraints[i]);\r\n          constraintsByName[this.constraints[i].name] = this.constraints[i];\r\n        }\r\n\r\n      this.constraints = constraints;\r\n      this.constraintsByName = constraintsByName;\r\n\r\n      // then re-add Parsley DOM-API constraints\r\n      for (var name in this.options)\r\n        this.addConstraint(name, this.options[name], undefined, true);\r\n\r\n      // finally, bind special HTML5 constraints\r\n      return this._bindHtml5Constraints();\r\n    },\r\n\r\n    // Internal only.\r\n    // Bind specific HTML5 constraints to be HTML5 compliant\r\n    _bindHtml5Constraints: function () {\r\n      // html5 required\r\n      if (this.$element.hasClass('required') || this.$element.attr('required'))\r\n        this.addConstraint('required', true, undefined, true);\r\n\r\n      // html5 pattern\r\n      if ('string' === typeof this.$element.attr('pattern'))\r\n        this.addConstraint('pattern', this.$element.attr('pattern'), undefined, true);\r\n\r\n      // range\r\n      if ('undefined' !== typeof this.$element.attr('min') && 'undefined' !== typeof this.$element.attr('max'))\r\n        this.addConstraint('range', [this.$element.attr('min'), this.$element.attr('max')], undefined, true);\r\n\r\n      // HTML5 min\r\n      else if ('undefined' !== typeof this.$element.attr('min'))\r\n        this.addConstraint('min', this.$element.attr('min'), undefined, true);\r\n\r\n      // HTML5 max\r\n      else if ('undefined' !== typeof this.$element.attr('max'))\r\n        this.addConstraint('max', this.$element.attr('max'), undefined, true);\r\n\r\n\r\n      // length\r\n      if ('undefined' !== typeof this.$element.attr('minlength') && 'undefined' !== typeof this.$element.attr('maxlength'))\r\n        this.addConstraint('length', [this.$element.attr('minlength'), this.$element.attr('maxlength')], undefined, true);\r\n\r\n      // HTML5 minlength\r\n      else if ('undefined' !== typeof this.$element.attr('minlength'))\r\n        this.addConstraint('minlength', this.$element.attr('minlength'), undefined, true);\r\n\r\n      // HTML5 maxlength\r\n      else if ('undefined' !== typeof this.$element.attr('maxlength'))\r\n        this.addConstraint('maxlength', this.$element.attr('maxlength'), undefined, true);\r\n\r\n\r\n      // html5 types\r\n      var type = this.$element.attr('type');\r\n\r\n      if ('undefined' === typeof type)\r\n        return this;\r\n\r\n      // Small special case here for HTML5 number: integer validator if step attribute is undefined or an integer value, number otherwise\r\n      if ('number' === type) {\r\n        return this.addConstraint('type', ['number', {\r\n          step: this.$element.attr('step'),\r\n          base: this.$element.attr('min') || this.$element.attr('value')\r\n        }], undefined, true);\r\n      // Regular other HTML5 supported types\r\n      } else if (/^(email|url|range)$/i.test(type)) {\r\n        return this.addConstraint('type', type, undefined, true);\r\n      }\r\n      return this;\r\n    },\r\n\r\n    // Internal only.\r\n    // Field is required if have required constraint without `false` value\r\n    _isRequired: function () {\r\n      if ('undefined' === typeof this.constraintsByName.required)\r\n        return false;\r\n\r\n      return false !== this.constraintsByName.required.requirements;\r\n    },\r\n\r\n    // Internal only.\r\n    // Shortcut to trigger an event\r\n    _trigger: function (eventName) {\r\n      return this.trigger('field:' + eventName);\r\n    },\r\n\r\n    // Internal only\r\n    // Handles whitespace in a value\r\n    // Use `data-parsley-whitespace=\"squish\"` to auto squish input value\r\n    // Use `data-parsley-whitespace=\"trim\"` to auto trim input value\r\n    _handleWhitespace: function (value) {\r\n      if (true === this.options.trimValue)\r\n        ParsleyUtils__default.warnOnce('data-parsley-trim-value=\"true\" is deprecated, please use data-parsley-whitespace=\"trim\"');\r\n\r\n      if ('squish' === this.options.whitespace)\r\n        value = value.replace(/\\s{2,}/g, ' ');\r\n\r\n      if (('trim' === this.options.whitespace) || ('squish' === this.options.whitespace) || (true === this.options.trimValue))\r\n        value = ParsleyUtils__default.trimString(value);\r\n\r\n      return value;\r\n    },\r\n\r\n    // Internal only.\r\n    // Returns the constraints, grouped by descending priority.\r\n    // The result is thus an array of arrays of constraints.\r\n    _getGroupedConstraints: function () {\r\n      if (false === this.options.priorityEnabled)\r\n        return [this.constraints];\r\n\r\n      var groupedConstraints = [];\r\n      var index = {};\r\n\r\n      // Create array unique of priorities\r\n      for (var i = 0; i < this.constraints.length; i++) {\r\n        var p = this.constraints[i].priority;\r\n        if (!index[p])\r\n          groupedConstraints.push(index[p] = []);\r\n        index[p].push(this.constraints[i]);\r\n      }\r\n      // Sort them by priority DESC\r\n      groupedConstraints.sort(function (a, b) { return b[0].priority - a[0].priority; });\r\n\r\n      return groupedConstraints;\r\n    }\r\n\r\n  };\r\n\r\n  var parsley_field = ParsleyField;\n\n  var ParsleyMultiple = function () {\r\n    this.__class__ = 'ParsleyFieldMultiple';\r\n  };\r\n\r\n  ParsleyMultiple.prototype = {\r\n    // Add new `$element` sibling for multiple field\r\n    addElement: function ($element) {\r\n      this.$elements.push($element);\r\n\r\n      return this;\r\n    },\r\n\r\n    // See `ParsleyField.refreshConstraints()`\r\n    refreshConstraints: function () {\r\n      var fieldConstraints;\r\n\r\n      this.constraints = [];\r\n\r\n      // Select multiple special treatment\r\n      if (this.$element.is('select')) {\r\n        this.actualizeOptions()._bindConstraints();\r\n\r\n        return this;\r\n      }\r\n\r\n      // Gather all constraints for each input in the multiple group\r\n      for (var i = 0; i < this.$elements.length; i++) {\r\n\r\n        // Check if element have not been dynamically removed since last binding\r\n        if (!$('html').has(this.$elements[i]).length) {\r\n          this.$elements.splice(i, 1);\r\n          continue;\r\n        }\r\n\r\n        fieldConstraints = this.$elements[i].data('ParsleyFieldMultiple').refreshConstraints().constraints;\r\n\r\n        for (var j = 0; j < fieldConstraints.length; j++)\r\n          this.addConstraint(fieldConstraints[j].name, fieldConstraints[j].requirements, fieldConstraints[j].priority, fieldConstraints[j].isDomConstraint);\r\n      }\r\n\r\n      return this;\r\n    },\r\n\r\n    // See `ParsleyField.getValue()`\r\n    getValue: function () {\r\n      // Value could be overriden in DOM\r\n      if ('function' === typeof this.options.value)\r\n        value = this.options.value(this);\r\n      else if ('undefined' !== typeof this.options.value)\r\n        return this.options.value;\r\n\r\n      // Radio input case\r\n      if (this.$element.is('input[type=radio]'))\r\n        return this._findRelated().filter(':checked').val() || '';\r\n\r\n      // checkbox input case\r\n      if (this.$element.is('input[type=checkbox]')) {\r\n        var values = [];\r\n\r\n        this._findRelated().filter(':checked').each(function () {\r\n          values.push($(this).val());\r\n        });\r\n\r\n        return values;\r\n      }\r\n\r\n      // Select multiple case\r\n      if (this.$element.is('select') && null === this.$element.val())\r\n        return [];\r\n\r\n      // Default case that should never happen\r\n      return this.$element.val();\r\n    },\r\n\r\n    _init: function () {\r\n      this.$elements = [this.$element];\r\n\r\n      return this;\r\n    }\r\n  };\n\n  var ParsleyFactory = function (element, options, parsleyFormInstance) {\r\n    this.$element = $(element);\r\n\r\n    // If the element has already been bound, returns its saved Parsley instance\r\n    var savedparsleyFormInstance = this.$element.data('Parsley');\r\n    if (savedparsleyFormInstance) {\r\n\r\n      // If the saved instance has been bound without a ParsleyForm parent and there is one given in this call, add it\r\n      if ('undefined' !== typeof parsleyFormInstance && savedparsleyFormInstance.parent === window.Parsley) {\r\n        savedparsleyFormInstance.parent = parsleyFormInstance;\r\n        savedparsleyFormInstance._resetOptions(savedparsleyFormInstance.options);\r\n      }\r\n\r\n      return savedparsleyFormInstance;\r\n    }\r\n\r\n    // Parsley must be instantiated with a DOM element or jQuery $element\r\n    if (!this.$element.length)\r\n      throw new Error('You must bind Parsley on an existing element.');\r\n\r\n    if ('undefined' !== typeof parsleyFormInstance && 'ParsleyForm' !== parsleyFormInstance.__class__)\r\n      throw new Error('Parent instance must be a ParsleyForm instance');\r\n\r\n    this.parent = parsleyFormInstance || window.Parsley;\r\n    return this.init(options);\r\n  };\r\n\r\n  ParsleyFactory.prototype = {\r\n    init: function (options) {\r\n      this.__class__ = 'Parsley';\r\n      this.__version__ = '2.3.5';\r\n      this.__id__ = ParsleyUtils__default.generateID();\r\n\r\n      // Pre-compute options\r\n      this._resetOptions(options);\r\n\r\n      // A ParsleyForm instance is obviously a `<form>` element but also every node that is not an input and has the `data-parsley-validate` attribute\r\n      if (this.$element.is('form') || (ParsleyUtils__default.checkAttr(this.$element, this.options.namespace, 'validate') && !this.$element.is(this.options.inputs)))\r\n        return this.bind('parsleyForm');\r\n\r\n      // Every other element is bound as a `ParsleyField` or `ParsleyFieldMultiple`\r\n      return this.isMultiple() ? this.handleMultiple() : this.bind('parsleyField');\r\n    },\r\n\r\n    isMultiple: function () {\r\n      return (this.$element.is('input[type=radio], input[type=checkbox]')) || (this.$element.is('select') && 'undefined' !== typeof this.$element.attr('multiple'));\r\n    },\r\n\r\n    // Multiples fields are a real nightmare :(\r\n    // Maybe some refactoring would be appreciated here...\r\n    handleMultiple: function () {\r\n      var name;\r\n      var multiple;\r\n      var parsleyMultipleInstance;\r\n\r\n      // Handle multiple name\r\n      if (this.options.multiple)\r\n        ; // We already have our 'multiple' identifier\r\n      else if ('undefined' !== typeof this.$element.attr('name') && this.$element.attr('name').length)\r\n        this.options.multiple = name = this.$element.attr('name');\r\n      else if ('undefined' !== typeof this.$element.attr('id') && this.$element.attr('id').length)\r\n        this.options.multiple = this.$element.attr('id');\r\n\r\n      // Special select multiple input\r\n      if (this.$element.is('select') && 'undefined' !== typeof this.$element.attr('multiple')) {\r\n        this.options.multiple = this.options.multiple || this.__id__;\r\n        return this.bind('parsleyFieldMultiple');\r\n\r\n      // Else for radio / checkboxes, we need a `name` or `data-parsley-multiple` to properly bind it\r\n      } else if (!this.options.multiple) {\r\n        ParsleyUtils__default.warn('To be bound by Parsley, a radio, a checkbox and a multiple select input must have either a name or a multiple option.', this.$element);\r\n        return this;\r\n      }\r\n\r\n      // Remove special chars\r\n      this.options.multiple = this.options.multiple.replace(/(:|\\.|\\[|\\]|\\{|\\}|\\$)/g, '');\r\n\r\n      // Add proper `data-parsley-multiple` to siblings if we have a valid multiple name\r\n      if ('undefined' !== typeof name) {\r\n        $('input[name=\"' + name + '\"]').each((i, input) => {\r\n          if ($(input).is('input[type=radio], input[type=checkbox]'))\r\n            $(input).attr(this.options.namespace + 'multiple', this.options.multiple);\r\n        });\r\n      }\r\n\r\n      // Check here if we don't already have a related multiple instance saved\r\n      var $previouslyRelated = this._findRelated();\r\n      for (var i = 0; i < $previouslyRelated.length; i++) {\r\n        parsleyMultipleInstance = $($previouslyRelated.get(i)).data('Parsley');\r\n        if ('undefined' !== typeof parsleyMultipleInstance) {\r\n\r\n          if (!this.$element.data('ParsleyFieldMultiple')) {\r\n            parsleyMultipleInstance.addElement(this.$element);\r\n          }\r\n\r\n          break;\r\n        }\r\n      }\r\n\r\n      // Create a secret ParsleyField instance for every multiple field. It will be stored in `data('ParsleyFieldMultiple')`\r\n      // And will be useful later to access classic `ParsleyField` stuff while being in a `ParsleyFieldMultiple` instance\r\n      this.bind('parsleyField', true);\r\n\r\n      return parsleyMultipleInstance || this.bind('parsleyFieldMultiple');\r\n    },\r\n\r\n    // Return proper `ParsleyForm`, `ParsleyField` or `ParsleyFieldMultiple`\r\n    bind: function (type, doNotStore) {\r\n      var parsleyInstance;\r\n\r\n      switch (type) {\r\n        case 'parsleyForm':\r\n          parsleyInstance = $.extend(\r\n            new ParsleyForm(this.$element, this.domOptions, this.options),\r\n            window.ParsleyExtend\r\n          )._bindFields();\r\n          break;\r\n        case 'parsleyField':\r\n          parsleyInstance = $.extend(\r\n            new parsley_field(this.$element, this.domOptions, this.options, this.parent),\r\n            window.ParsleyExtend\r\n          );\r\n          break;\r\n        case 'parsleyFieldMultiple':\r\n          parsleyInstance = $.extend(\r\n            new parsley_field(this.$element, this.domOptions, this.options, this.parent),\r\n            new ParsleyMultiple(),\r\n            window.ParsleyExtend\r\n          )._init();\r\n          break;\r\n        default:\r\n          throw new Error(type + 'is not a supported Parsley type');\r\n      }\r\n\r\n      if (this.options.multiple)\r\n        ParsleyUtils__default.setAttr(this.$element, this.options.namespace, 'multiple', this.options.multiple);\r\n\r\n      if ('undefined' !== typeof doNotStore) {\r\n        this.$element.data('ParsleyFieldMultiple', parsleyInstance);\r\n\r\n        return parsleyInstance;\r\n      }\r\n\r\n      // Store the freshly bound instance in a DOM element for later access using jQuery `data()`\r\n      this.$element.data('Parsley', parsleyInstance);\r\n\r\n      // Tell the world we have a new ParsleyForm or ParsleyField instance!\r\n      parsleyInstance._actualizeTriggers();\r\n      parsleyInstance._trigger('init');\r\n\r\n      return parsleyInstance;\r\n    }\r\n  };\n\n  var vernums = $.fn.jquery.split('.');\r\n  if (parseInt(vernums[0]) <= 1 && parseInt(vernums[1]) < 8) {\r\n    throw \"The loaded version of jQuery is too old. Please upgrade to 1.8.x or better.\";\r\n  }\r\n  if (!vernums.forEach) {\r\n    ParsleyUtils__default.warn('Parsley requires ES5 to run properly. Please include https://github.com/es-shims/es5-shim');\r\n  }\r\n  // Inherit `on`, `off` & `trigger` to Parsley:\r\n  var Parsley = $.extend(new ParsleyAbstract(), {\r\n      $element: $(document),\r\n      actualizeOptions: null,\r\n      _resetOptions: null,\r\n      Factory: ParsleyFactory,\r\n      version: '2.3.5'\r\n    });\r\n\r\n  // Supplement ParsleyField and Form with ParsleyAbstract\r\n  // This way, the constructors will have access to those methods\r\n  $.extend(parsley_field.prototype, ParsleyUI.Field, ParsleyAbstract.prototype);\r\n  $.extend(ParsleyForm.prototype, ParsleyUI.Form, ParsleyAbstract.prototype);\r\n  // Inherit actualizeOptions and _resetOptions:\r\n  $.extend(ParsleyFactory.prototype, ParsleyAbstract.prototype);\r\n\r\n  // ### jQuery API\r\n  // `$('.elem').parsley(options)` or `$('.elem').psly(options)`\r\n  $.fn.parsley = $.fn.psly = function (options) {\r\n    if (this.length > 1) {\r\n      var instances = [];\r\n\r\n      this.each(function () {\r\n        instances.push($(this).parsley(options));\r\n      });\r\n\r\n      return instances;\r\n    }\r\n\r\n    // Return undefined if applied to non existing DOM element\r\n    if (!$(this).length) {\r\n      ParsleyUtils__default.warn('You must bind Parsley on an existing element.');\r\n\r\n      return;\r\n    }\r\n\r\n    return new ParsleyFactory(this, options);\r\n  };\r\n\r\n  // ### ParsleyField and ParsleyForm extension\r\n  // Ensure the extension is now defined if it wasn't previously\r\n  if ('undefined' === typeof window.ParsleyExtend)\r\n    window.ParsleyExtend = {};\r\n\r\n  // ### Parsley config\r\n  // Inherit from ParsleyDefault, and copy over any existing values\r\n  Parsley.options = $.extend(ParsleyUtils__default.objectCreate(ParsleyDefaults), window.ParsleyConfig);\r\n  window.ParsleyConfig = Parsley.options; // Old way of accessing global options\r\n\r\n  // ### Globals\r\n  window.Parsley = window.psly = Parsley;\r\n  window.ParsleyUtils = ParsleyUtils__default;\r\n\r\n  // ### Define methods that forward to the registry, and deprecate all access except through window.Parsley\r\n  var registry = window.Parsley._validatorRegistry = new ParsleyValidatorRegistry(window.ParsleyConfig.validators, window.ParsleyConfig.i18n);\r\n  window.ParsleyValidator = {};\r\n  $.each('setLocale addCatalog addMessage addMessages getErrorMessage formatMessage addValidator updateValidator removeValidator'.split(' '), function (i, method) {\r\n    window.Parsley[method] = $.proxy(registry, method);\r\n    window.ParsleyValidator[method] = function () {\r\n      ParsleyUtils__default.warnOnce(`Accessing the method '${method}' through ParsleyValidator is deprecated. Simply call 'window.Parsley.${method}(...)'`);\r\n      return window.Parsley[method](...arguments);\r\n    };\r\n  });\r\n\r\n  // ### ParsleyUI\r\n  // Deprecated global object\r\n  window.Parsley.UI = ParsleyUI;\r\n  window.ParsleyUI = {\r\n    removeError: function (instance, name, doNotUpdateClass) {\r\n      var updateClass = true !== doNotUpdateClass;\r\n      ParsleyUtils__default.warnOnce(`Accessing ParsleyUI is deprecated. Call 'removeError' on the instance directly. Please comment in issue 1073 as to your need to call this method.`);\r\n      return instance.removeError(name, {updateClass});\r\n    },\r\n    getErrorsMessages: function (instance) {\r\n      ParsleyUtils__default.warnOnce(`Accessing ParsleyUI is deprecated. Call 'getErrorsMessages' on the instance directly.`);\r\n      return instance.getErrorsMessages();\r\n    }\r\n  };\r\n  $.each('addError updateError'.split(' '), function (i, method) {\r\n    window.ParsleyUI[method] = function (instance, name, message, assert, doNotUpdateClass) {\r\n      var updateClass = true !== doNotUpdateClass;\r\n      ParsleyUtils__default.warnOnce(`Accessing ParsleyUI is deprecated. Call '${method}' on the instance directly. Please comment in issue 1073 as to your need to call this method.`);\r\n      return instance[method](name, {message, assert, updateClass});\r\n    };\r\n  });\r\n\r\n  // Alleviate glaring Firefox bug https://bugzilla.mozilla.org/show_bug.cgi?id=1250521\r\n  // See also https://github.com/guillaumepotier/Parsley.js/issues/1068\r\n  if (/firefox/i.test(navigator.userAgent)) {\r\n    $(document).on('change', 'select', evt => {\r\n      $(evt.target).trigger('input');\r\n    });\r\n  }\r\n\r\n  // ### PARSLEY auto-binding\r\n  // Prevent it by setting `ParsleyConfig.autoBind` to `false`\r\n  if (false !== window.ParsleyConfig.autoBind) {\r\n    $(function () {\r\n      // Works only on `data-parsley-validate`.\r\n      if ($('[data-parsley-validate]').length)\r\n        $('[data-parsley-validate]').parsley();\r\n    });\r\n  }\n\n  var o = $({});\r\n  var deprecated = function () {\r\n    ParsleyUtils__default.warnOnce(\"Parsley's pubsub module is deprecated; use the 'on' and 'off' methods on parsley instances or window.Parsley\");\r\n  };\r\n\r\n  // Returns an event handler that calls `fn` with the arguments it expects\r\n  function adapt(fn, context) {\r\n    // Store to allow unbinding\r\n    if (!fn.parsleyAdaptedCallback) {\r\n      fn.parsleyAdaptedCallback = function () {\r\n        var args = Array.prototype.slice.call(arguments, 0);\r\n        args.unshift(this);\r\n        fn.apply(context || o, args);\r\n      };\r\n    }\r\n    return fn.parsleyAdaptedCallback;\r\n  }\r\n\r\n  var eventPrefix = 'parsley:';\r\n  // Converts 'parsley:form:validate' into 'form:validate'\r\n  function eventName(name) {\r\n    if (name.lastIndexOf(eventPrefix, 0) === 0)\r\n      return name.substr(eventPrefix.length);\r\n    return name;\r\n  }\r\n\r\n  // $.listen is deprecated. Use Parsley.on instead.\r\n  $.listen = function (name, callback) {\r\n    var context;\r\n    deprecated();\r\n    if ('object' === typeof arguments[1] && 'function' === typeof arguments[2]) {\r\n      context = arguments[1];\r\n      callback = arguments[2];\r\n    }\r\n\r\n    if ('function' !== typeof callback)\r\n      throw new Error('Wrong parameters');\r\n\r\n    window.Parsley.on(eventName(name), adapt(callback, context));\r\n  };\r\n\r\n  $.listenTo = function (instance, name, fn) {\r\n    deprecated();\r\n    if (!(instance instanceof parsley_field) && !(instance instanceof ParsleyForm))\r\n      throw new Error('Must give Parsley instance');\r\n\r\n    if ('string' !== typeof name || 'function' !== typeof fn)\r\n      throw new Error('Wrong parameters');\r\n\r\n    instance.on(eventName(name), adapt(fn));\r\n  };\r\n\r\n  $.unsubscribe = function (name, fn) {\r\n    deprecated();\r\n    if ('string' !== typeof name || 'function' !== typeof fn)\r\n      throw new Error('Wrong arguments');\r\n    window.Parsley.off(eventName(name), fn.parsleyAdaptedCallback);\r\n  };\r\n\r\n  $.unsubscribeTo = function (instance, name) {\r\n    deprecated();\r\n    if (!(instance instanceof parsley_field) && !(instance instanceof ParsleyForm))\r\n      throw new Error('Must give Parsley instance');\r\n    instance.off(eventName(name));\r\n  };\r\n\r\n  $.unsubscribeAll = function (name) {\r\n    deprecated();\r\n    window.Parsley.off(eventName(name));\r\n    $('form,input,textarea,select').each(function () {\r\n      var instance = $(this).data('Parsley');\r\n      if (instance) {\r\n        instance.off(eventName(name));\r\n      }\r\n    });\r\n  };\r\n\r\n  // $.emit is deprecated. Use jQuery events instead.\r\n  $.emit = function (name, instance) {\r\n    deprecated();\r\n    var instanceGiven = (instance instanceof parsley_field) || (instance instanceof ParsleyForm);\r\n    var args = Array.prototype.slice.call(arguments, instanceGiven ? 2 : 1);\r\n    args.unshift(eventName(name));\r\n    if (!instanceGiven) {\r\n      instance = window.Parsley;\r\n    }\r\n    instance.trigger(...args);\r\n  };\r\n\r\n  var pubsub = {};\n\n  $.extend(true, Parsley, {\r\n    asyncValidators: {\r\n      'default': {\r\n        fn: function (xhr) {\r\n          // By default, only status 2xx are deemed successful.\r\n          // Note: we use status instead of state() because responses with status 200\r\n          // but invalid messages (e.g. an empty body for content type set to JSON) will\r\n          // result in state() === 'rejected'.\r\n          return xhr.status >= 200 && xhr.status < 300;\r\n        },\r\n        url: false\r\n      },\r\n      reverse: {\r\n        fn: function (xhr) {\r\n          // If reverse option is set, a failing ajax request is considered successful\r\n          return xhr.status < 200 || xhr.status >= 300;\r\n        },\r\n        url: false\r\n      }\r\n    },\r\n\r\n    addAsyncValidator: function (name, fn, url, options) {\r\n      Parsley.asyncValidators[name] = {\r\n        fn: fn,\r\n        url: url || false,\r\n        options: options || {}\r\n      };\r\n\r\n      return this;\r\n    }\r\n\r\n  });\r\n\r\n  Parsley.addValidator('remote', {\r\n    requirementType: {\r\n      '': 'string',\r\n      'validator': 'string',\r\n      'reverse': 'boolean',\r\n      'options': 'object'\r\n    },\r\n\r\n    validateString: function validateString(value, url, options, instance) {\r\n      var data = {};\r\n      var ajaxOptions;\r\n      var csr;\r\n      var validator = options.validator || (true === options.reverse ? 'reverse' : 'default');\r\n\r\n      if ('undefined' === typeof Parsley.asyncValidators[validator]) throw new Error('Calling an undefined async validator: `' + validator + '`');\r\n\r\n      url = Parsley.asyncValidators[validator].url || url;\r\n\r\n      // Fill current value\r\n      if (url.indexOf('{value}') > -1) {\r\n        url = url.replace('{value}', encodeURIComponent(value));\r\n      } else {\r\n        data[instance.$element.attr('name') || instance.$element.attr('id')] = value;\r\n      }\r\n\r\n      // Merge options passed in from the function with the ones in the attribute\r\n      var remoteOptions = $.extend(true, options.options || {}, Parsley.asyncValidators[validator].options);\r\n\r\n      // All `$.ajax(options)` could be overridden or extended directly from DOM in `data-parsley-remote-options`\r\n      ajaxOptions = $.extend(true, {}, {\r\n        url: url,\r\n        data: data,\r\n        type: 'GET',\r\n        useCache: true\r\n      }, remoteOptions);\r\n\r\n      if (ajaxOptions.useCache === \"false\") ajaxOptions.useCache = false;\r\n\r\n      // Generate store key based on ajax options\r\n      instance.trigger('field:ajaxoptions', instance, ajaxOptions);\r\n\r\n      if (ajaxOptions.useCache) {\r\n        try {\r\n          csr = $.param(ajaxOptions);\r\n        } catch (e) {\r\n          ajaxOptions.useCache = false;\r\n        }\r\n      }\r\n\r\n      // Initialise query cache\r\n      if ('undefined' === typeof Parsley._remoteCache) Parsley._remoteCache = {};\r\n\r\n      // Try to retrieve stored xhr\r\n      var xhr = ajaxOptions.useCache ? (Parsley._remoteCache[csr] = Parsley._remoteCache[csr] || $.ajax(ajaxOptions))\r\n                             : $.ajax(ajaxOptions);\r\n\r\n      var handleXhr = function handleXhr() {\r\n        var result = Parsley.asyncValidators[validator].fn.call(instance, xhr, url, options);\r\n        if (!result) // Map falsy results to rejected promise\r\n          result = $.Deferred().reject();\r\n        return $.when(result);\r\n      };\r\n\r\n      return xhr.then(handleXhr, handleXhr);\r\n    },\r\n\r\n    priority: -1\r\n  });\r\n\r\n  Parsley.on('form:submit', function () {\r\n    Parsley._remoteCache = {};\r\n  });\r\n\r\n  window.ParsleyExtend.addAsyncValidator = function () {\r\n    ParsleyUtils.warnOnce('Accessing the method `addAsyncValidator` through an instance is deprecated. Simply call `Parsley.addAsyncValidator(...)`');\r\n    return Parsley.addAsyncValidator(...arguments);\r\n  };\n\n  // This is included with the Parsley library itself,\r\n  // thus there is no use in adding it to your project.\r\n  Parsley.addMessages('en', {\r\n    defaultMessage: \"This value seems to be invalid.\",\r\n    type: {\r\n      email:        \"This value should be a valid email.\",\r\n      url:          \"This value should be a valid url.\",\r\n      number:       \"This value should be a valid number.\",\r\n      integer:      \"This value should be a valid integer.\",\r\n      digits:       \"This value should be digits.\",\r\n      alphanum:     \"This value should be alphanumeric.\"\r\n    },\r\n    notblank:       \"This value should not be blank.\",\r\n    required:       \"This value is required.\",\r\n    pattern:        \"This value seems to be invalid.\",\r\n    min:            \"This value should be greater than or equal to %s.\",\r\n    max:            \"This value should be lower than or equal to %s.\",\r\n    range:          \"This value should be between %s and %s.\",\r\n    minlength:      \"This value is too short. It should have %s characters or more.\",\r\n    maxlength:      \"This value is too long. It should have %s characters or fewer.\",\r\n    length:         \"This value length is invalid. It should be between %s and %s characters long.\",\r\n    mincheck:       \"You must select at least %s choices.\",\r\n    maxcheck:       \"You must select %s choices or fewer.\",\r\n    check:          \"You must select between %s and %s choices.\",\r\n    equalto:        \"This value should be the same.\"\r\n  });\r\n\r\n  Parsley.setLocale('en');\n\n  var parsley = Parsley;\n\n  return parsley;\n\n}));\n","import $ from 'jquery';\r\nimport ParsleyField from './field';\r\nimport ParsleyForm from './form';\r\nimport ParsleyUtils from './utils';\r\n\r\nvar o = $({});\r\nvar deprecated = function () {\r\n  ParsleyUtils.warnOnce(\"Parsley's pubsub module is deprecated; use the 'on' and 'off' methods on parsley instances or window.Parsley\");\r\n};\r\n\r\n// Returns an event handler that calls `fn` with the arguments it expects\r\nfunction adapt(fn, context) {\r\n  // Store to allow unbinding\r\n  if (!fn.parsleyAdaptedCallback) {\r\n    fn.parsleyAdaptedCallback = function () {\r\n      var args = Array.prototype.slice.call(arguments, 0);\r\n      args.unshift(this);\r\n      fn.apply(context || o, args);\r\n    };\r\n  }\r\n  return fn.parsleyAdaptedCallback;\r\n}\r\n\r\nvar eventPrefix = 'parsley:';\r\n// Converts 'parsley:form:validate' into 'form:validate'\r\nfunction eventName(name) {\r\n  if (name.lastIndexOf(eventPrefix, 0) === 0)\r\n    return name.substr(eventPrefix.length);\r\n  return name;\r\n}\r\n\r\n// $.listen is deprecated. Use Parsley.on instead.\r\n$.listen = function (name, callback) {\r\n  var context;\r\n  deprecated();\r\n  if ('object' === typeof arguments[1] && 'function' === typeof arguments[2]) {\r\n    context = arguments[1];\r\n    callback = arguments[2];\r\n  }\r\n\r\n  if ('function' !== typeof callback)\r\n    throw new Error('Wrong parameters');\r\n\r\n  window.Parsley.on(eventName(name), adapt(callback, context));\r\n};\r\n\r\n$.listenTo = function (instance, name, fn) {\r\n  deprecated();\r\n  if (!(instance instanceof ParsleyField) && !(instance instanceof ParsleyForm))\r\n    throw new Error('Must give Parsley instance');\r\n\r\n  if ('string' !== typeof name || 'function' !== typeof fn)\r\n    throw new Error('Wrong parameters');\r\n\r\n  instance.on(eventName(name), adapt(fn));\r\n};\r\n\r\n$.unsubscribe = function (name, fn) {\r\n  deprecated();\r\n  if ('string' !== typeof name || 'function' !== typeof fn)\r\n    throw new Error('Wrong arguments');\r\n  window.Parsley.off(eventName(name), fn.parsleyAdaptedCallback);\r\n};\r\n\r\n$.unsubscribeTo = function (instance, name) {\r\n  deprecated();\r\n  if (!(instance instanceof ParsleyField) && !(instance instanceof ParsleyForm))\r\n    throw new Error('Must give Parsley instance');\r\n  instance.off(eventName(name));\r\n};\r\n\r\n$.unsubscribeAll = function (name) {\r\n  deprecated();\r\n  window.Parsley.off(eventName(name));\r\n  $('form,input,textarea,select').each(function () {\r\n    var instance = $(this).data('Parsley');\r\n    if (instance) {\r\n      instance.off(eventName(name));\r\n    }\r\n  });\r\n};\r\n\r\n// $.emit is deprecated. Use jQuery events instead.\r\n$.emit = function (name, instance) {\r\n  deprecated();\r\n  var instanceGiven = (instance instanceof ParsleyField) || (instance instanceof ParsleyForm);\r\n  var args = Array.prototype.slice.call(arguments, instanceGiven ? 2 : 1);\r\n  args.unshift(eventName(name));\r\n  if (!instanceGiven) {\r\n    instance = window.Parsley;\r\n  }\r\n  instance.trigger(...args);\r\n};\r\n\r\nexport default {};\r\n","import $ from 'jquery';\r\n\r\nvar globalID = 1;\r\nvar pastWarnings = {};\r\n\r\nvar ParsleyUtils = {\r\n  // Parsley DOM-API\r\n  // returns object from dom attributes and values\r\n  attr: function ($element, namespace, obj) {\r\n    var i;\r\n    var attribute;\r\n    var attributes;\r\n    var regex = new RegExp('^' + namespace, 'i');\r\n\r\n    if ('undefined' === typeof obj)\r\n      obj = {};\r\n    else {\r\n      // Clear all own properties. This won't affect prototype's values\r\n      for (i in obj) {\r\n        if (obj.hasOwnProperty(i))\r\n          delete obj[i];\r\n      }\r\n    }\r\n\r\n    if ('undefined' === typeof $element || 'undefined' === typeof $element[0])\r\n      return obj;\r\n\r\n    attributes = $element[0].attributes;\r\n    for (i = attributes.length; i--; ) {\r\n      attribute = attributes[i];\r\n\r\n      if (attribute && attribute.specified && regex.test(attribute.name)) {\r\n        obj[this.camelize(attribute.name.slice(namespace.length))] = this.deserializeValue(attribute.value);\r\n      }\r\n    }\r\n\r\n    return obj;\r\n  },\r\n\r\n  checkAttr: function ($element, namespace, checkAttr) {\r\n    return $element.is('[' + namespace + checkAttr + ']');\r\n  },\r\n\r\n  setAttr: function ($element, namespace, attr, value) {\r\n    $element[0].setAttribute(this.dasherize(namespace + attr), String(value));\r\n  },\r\n\r\n  generateID: function () {\r\n    return '' + globalID++;\r\n  },\r\n\r\n  /** Third party functions **/\r\n  // Zepto deserialize function\r\n  deserializeValue: function (value) {\r\n    var num;\r\n\r\n    try {\r\n      return value ?\r\n        value == \"true\" ||\r\n        (value == \"false\" ? false :\r\n        value == \"null\" ? null :\r\n        !isNaN(num = Number(value)) ? num :\r\n        /^[\\[\\{]/.test(value) ? $.parseJSON(value) :\r\n        value)\r\n        : value;\r\n    } catch (e) { return value; }\r\n  },\r\n\r\n  // Zepto camelize function\r\n  camelize: function (str) {\r\n    return str.replace(/-+(.)?/g, function (match, chr) {\r\n      return chr ? chr.toUpperCase() : '';\r\n    });\r\n  },\r\n\r\n  // Zepto dasherize function\r\n  dasherize: function (str) {\r\n    return str.replace(/::/g, '/')\r\n      .replace(/([A-Z]+)([A-Z][a-z])/g, '$1_$2')\r\n      .replace(/([a-z\\d])([A-Z])/g, '$1_$2')\r\n      .replace(/_/g, '-')\r\n      .toLowerCase();\r\n  },\r\n\r\n  warn: function () {\r\n    if (window.console && 'function' === typeof window.console.warn)\r\n      window.console.warn(...arguments);\r\n  },\r\n\r\n  warnOnce: function(msg) {\r\n    if (!pastWarnings[msg]) {\r\n      pastWarnings[msg] = true;\r\n      this.warn(...arguments);\r\n    }\r\n  },\r\n\r\n  _resetWarnings: function () {\r\n    pastWarnings = {};\r\n  },\r\n\r\n  trimString: function(string) {\r\n    return string.replace(/^\\s+|\\s+$/g, '');\r\n  },\r\n\r\n  namespaceEvents: function(events, namespace) {\r\n    events = this.trimString(events || '').split(/\\s+/);\r\n    if (!events[0])\r\n      return '';\r\n    return $.map(events, evt => { return `${evt}.${namespace}`; }).join(' ');\r\n  },\r\n\r\n  // Object.create polyfill, see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/create#Polyfill\r\n  objectCreate: Object.create || (function () {\r\n    var Object = function () {};\r\n    return function (prototype) {\r\n      if (arguments.length > 1) {\r\n        throw Error('Second argument not supported');\r\n      }\r\n      if (typeof prototype != 'object') {\r\n        throw TypeError('Argument must be an object');\r\n      }\r\n      Object.prototype = prototype;\r\n      var result = new Object();\r\n      Object.prototype = null;\r\n      return result;\r\n    };\r\n  })()\r\n};\r\n\r\nexport default ParsleyUtils;\r\n","// All these options could be overriden and specified directly in DOM using\r\n// `data-parsley-` default DOM-API\r\n// eg: `inputs` can be set in DOM using `data-parsley-inputs=\"input, textarea\"`\r\n// eg: `data-parsley-stop-on-first-failing-constraint=\"false\"`\r\n\r\nvar ParsleyDefaults = {\r\n  // ### General\r\n\r\n  // Default data-namespace for DOM API\r\n  namespace: 'data-parsley-',\r\n\r\n  // Supported inputs by default\r\n  inputs: 'input, textarea, select',\r\n\r\n  // Excluded inputs by default\r\n  excluded: 'input[type=button], input[type=submit], input[type=reset], input[type=hidden]',\r\n\r\n  // Stop validating field on highest priority failing constraint\r\n  priorityEnabled: true,\r\n\r\n  // ### Field only\r\n\r\n  // identifier used to group together inputs (e.g. radio buttons...)\r\n  multiple: null,\r\n\r\n  // identifier (or array of identifiers) used to validate only a select group of inputs\r\n  group: null,\r\n\r\n  // ### UI\r\n  // Enable\\Disable error messages\r\n  uiEnabled: true,\r\n\r\n  // Key events threshold before validation\r\n  validationThreshold: 3,\r\n\r\n  // Focused field on form validation error. 'first'|'last'|'none'\r\n  focus: 'first',\r\n\r\n  // event(s) that will trigger validation before first failure. eg: `input`...\r\n  trigger: false,\r\n\r\n  // event(s) that will trigger validation after first failure.\r\n  triggerAfterFailure: 'input',\r\n\r\n  // Class that would be added on every failing validation Parsley field\r\n  errorClass: 'parsley-error',\r\n\r\n  // Same for success validation\r\n  successClass: 'parsley-success',\r\n\r\n  // Return the `$element` that will receive these above success or error classes\r\n  // Could also be (and given directly from DOM) a valid selector like `'#div'`\r\n  classHandler: function (ParsleyField) {},\r\n\r\n  // Return the `$element` where errors will be appended\r\n  // Could also be (and given directly from DOM) a valid selector like `'#div'`\r\n  errorsContainer: function (ParsleyField) {},\r\n\r\n  // ul elem that would receive errors' list\r\n  errorsWrapper: '<ul class=\"parsley-errors-list\"></ul>',\r\n\r\n  // li elem that would receive error message\r\n  errorTemplate: '<li></li>'\r\n};\r\n\r\nexport default ParsleyDefaults;\r\n","import $ from 'jquery';\r\nimport ParsleyUtils from './utils';\r\n\r\nvar ParsleyAbstract = function () {};\r\n\r\nParsleyAbstract.prototype = {\r\n  asyncSupport: true, // Deprecated\r\n\r\n  actualizeOptions: function () {\r\n    ParsleyUtils.attr(this.$element, this.options.namespace, this.domOptions);\r\n    if (this.parent && this.parent.actualizeOptions)\r\n      this.parent.actualizeOptions();\r\n    return this;\r\n  },\r\n\r\n  _resetOptions: function (initOptions) {\r\n    this.domOptions = ParsleyUtils.objectCreate(this.parent.options);\r\n    this.options = ParsleyUtils.objectCreate(this.domOptions);\r\n    // Shallow copy of ownProperties of initOptions:\r\n    for (var i in initOptions) {\r\n      if (initOptions.hasOwnProperty(i))\r\n        this.options[i] = initOptions[i];\r\n    }\r\n    this.actualizeOptions();\r\n  },\r\n\r\n  _listeners: null,\r\n\r\n  // Register a callback for the given event name\r\n  // Callback is called with context as the first argument and the `this`\r\n  // The context is the current parsley instance, or window.Parsley if global\r\n  // A return value of `false` will interrupt the calls\r\n  on: function (name, fn) {\r\n    this._listeners = this._listeners || {};\r\n    var queue = this._listeners[name] = this._listeners[name] || [];\r\n    queue.push(fn);\r\n\r\n    return this;\r\n  },\r\n\r\n  // Deprecated. Use `on` instead\r\n  subscribe: function(name, fn) {\r\n    $.listenTo(this, name.toLowerCase(), fn);\r\n  },\r\n\r\n  // Unregister a callback (or all if none is given) for the given event name\r\n  off: function (name, fn) {\r\n    var queue = this._listeners && this._listeners[name];\r\n    if (queue) {\r\n      if (!fn) {\r\n        delete this._listeners[name];\r\n      } else {\r\n        for (var i = queue.length; i--; )\r\n          if (queue[i] === fn)\r\n            queue.splice(i, 1);\r\n      }\r\n    }\r\n    return this;\r\n  },\r\n\r\n  // Deprecated. Use `off`\r\n  unsubscribe: function(name, fn) {\r\n    $.unsubscribeTo(this, name.toLowerCase());\r\n  },\r\n\r\n  // Trigger an event of the given name\r\n  // A return value of `false` interrupts the callback chain\r\n  // Returns false if execution was interrupted\r\n  trigger: function (name, target, extraArg) {\r\n    target = target || this;\r\n    var queue = this._listeners && this._listeners[name];\r\n    var result;\r\n    var parentResult;\r\n    if (queue) {\r\n      for (var i = queue.length; i--; ) {\r\n        result = queue[i].call(target, target, extraArg);\r\n        if (result === false) return result;\r\n      }\r\n    }\r\n    if (this.parent) {\r\n      return this.parent.trigger(name, target, extraArg);\r\n    }\r\n    return true;\r\n  },\r\n\r\n  // Reset UI\r\n  reset: function () {\r\n    // Field case: just emit a reset event for UI\r\n    if ('ParsleyForm' !== this.__class__) {\r\n      this._resetUI();\r\n      return this._trigger('reset');\r\n    }\r\n\r\n    // Form case: emit a reset event for each field\r\n    for (var i = 0; i < this.fields.length; i++)\r\n      this.fields[i].reset();\r\n\r\n    this._trigger('reset');\r\n  },\r\n\r\n  // Destroy Parsley instance (+ UI)\r\n  destroy: function () {\r\n    // Field case: emit destroy event to clean UI and then destroy stored instance\r\n    this._destroyUI();\r\n    if ('ParsleyForm' !== this.__class__) {\r\n      this.$element.removeData('Parsley');\r\n      this.$element.removeData('ParsleyFieldMultiple');\r\n      this._trigger('destroy');\r\n\r\n      return;\r\n    }\r\n\r\n    // Form case: destroy all its fields and then destroy stored instance\r\n    for (var i = 0; i < this.fields.length; i++)\r\n      this.fields[i].destroy();\r\n\r\n    this.$element.removeData('Parsley');\r\n    this._trigger('destroy');\r\n  },\r\n\r\n  asyncIsValid: function (group, force) {\r\n    ParsleyUtils.warnOnce(\"asyncIsValid is deprecated; please use whenValid instead\");\r\n    return this.whenValid({group, force});\r\n  },\r\n\r\n  _findRelated: function () {\r\n    return this.options.multiple ?\r\n      this.parent.$element.find(`[${this.options.namespace}multiple=\"${this.options.multiple}\"]`)\r\n    : this.$element;\r\n  }\r\n};\r\n\r\nexport default ParsleyAbstract;\r\n","import $ from 'jquery';\r\nimport ParsleyUtils from './utils';\r\n\r\nvar requirementConverters = {\r\n  string: function(string) {\r\n    return string;\r\n  },\r\n  integer: function(string) {\r\n    if (isNaN(string))\r\n      throw 'Requirement is not an integer: \"' + string + '\"';\r\n    return parseInt(string, 10);\r\n  },\r\n  number: function(string) {\r\n    if (isNaN(string))\r\n      throw 'Requirement is not a number: \"' + string + '\"';\r\n    return parseFloat(string);\r\n  },\r\n  reference: function(string) { // Unused for now\r\n    var result = $(string);\r\n    if (result.length === 0)\r\n      throw 'No such reference: \"' + string + '\"';\r\n    return result;\r\n  },\r\n  boolean: function(string) {\r\n    return string !== 'false';\r\n  },\r\n  object: function(string) {\r\n    return ParsleyUtils.deserializeValue(string);\r\n  },\r\n  regexp: function(regexp) {\r\n    var flags = '';\r\n\r\n    // Test if RegExp is literal, if not, nothing to be done, otherwise, we need to isolate flags and pattern\r\n    if (/^\\/.*\\/(?:[gimy]*)$/.test(regexp)) {\r\n      // Replace the regexp literal string with the first match group: ([gimy]*)\r\n      // If no flag is present, this will be a blank string\r\n      flags = regexp.replace(/.*\\/([gimy]*)$/, '$1');\r\n      // Again, replace the regexp literal string with the first match group:\r\n      // everything excluding the opening and closing slashes and the flags\r\n      regexp = regexp.replace(new RegExp('^/(.*?)/' + flags + '$'), '$1');\r\n    } else {\r\n      // Anchor regexp:\r\n      regexp = '^' + regexp + '$';\r\n    }\r\n    return new RegExp(regexp, flags);\r\n  }\r\n};\r\n\r\nvar convertArrayRequirement = function(string, length) {\r\n  var m = string.match(/^\\s*\\[(.*)\\]\\s*$/);\r\n  if (!m)\r\n    throw 'Requirement is not an array: \"' + string + '\"';\r\n  var values = m[1].split(',').map(ParsleyUtils.trimString);\r\n  if (values.length !== length)\r\n    throw 'Requirement has ' + values.length + ' values when ' + length + ' are needed';\r\n  return values;\r\n};\r\n\r\nvar convertRequirement = function(requirementType, string) {\r\n  var converter = requirementConverters[requirementType || 'string'];\r\n  if (!converter)\r\n    throw 'Unknown requirement specification: \"' + requirementType + '\"';\r\n  return converter(string);\r\n};\r\n\r\nvar convertExtraOptionRequirement = function(requirementSpec, string, extraOptionReader) {\r\n  var main = null;\r\n  var extra = {};\r\n  for (var key in requirementSpec) {\r\n    if (key) {\r\n      var value = extraOptionReader(key);\r\n      if ('string' === typeof value)\r\n        value = convertRequirement(requirementSpec[key], value);\r\n      extra[key] = value;\r\n    } else {\r\n      main = convertRequirement(requirementSpec[key], string);\r\n    }\r\n  }\r\n  return [main, extra];\r\n};\r\n\r\n// A Validator needs to implement the methods `validate` and `parseRequirements`\r\n\r\nvar ParsleyValidator = function(spec) {\r\n  $.extend(true, this, spec);\r\n};\r\n\r\nParsleyValidator.prototype = {\r\n  // Returns `true` iff the given `value` is valid according the given requirements.\r\n  validate: function(value, requirementFirstArg) {\r\n    if (this.fn) { // Legacy style validator\r\n\r\n      if (arguments.length > 3)  // If more args then value, requirement, instance...\r\n        requirementFirstArg = [].slice.call(arguments, 1, -1);  // Skip first arg (value) and last (instance), combining the rest\r\n      return this.fn.call(this, value, requirementFirstArg);\r\n    }\r\n\r\n    if ($.isArray(value)) {\r\n      if (!this.validateMultiple)\r\n        throw 'Validator `' + this.name + '` does not handle multiple values';\r\n      return this.validateMultiple(...arguments);\r\n    } else {\r\n      if (this.validateNumber) {\r\n        if (isNaN(value))\r\n          return false;\r\n        arguments[0] = parseFloat(arguments[0]);\r\n        return this.validateNumber(...arguments);\r\n      }\r\n      if (this.validateString) {\r\n        return this.validateString(...arguments);\r\n      }\r\n      throw 'Validator `' + this.name + '` only handles multiple values';\r\n    }\r\n  },\r\n\r\n  // Parses `requirements` into an array of arguments,\r\n  // according to `this.requirementType`\r\n  parseRequirements: function(requirements, extraOptionReader) {\r\n    if ('string' !== typeof requirements) {\r\n      // Assume requirement already parsed\r\n      // but make sure we return an array\r\n      return $.isArray(requirements) ? requirements : [requirements];\r\n    }\r\n    var type = this.requirementType;\r\n    if ($.isArray(type)) {\r\n      var values = convertArrayRequirement(requirements, type.length);\r\n      for (var i = 0; i < values.length; i++)\r\n        values[i] = convertRequirement(type[i], values[i]);\r\n      return values;\r\n    } else if ($.isPlainObject(type)) {\r\n      return convertExtraOptionRequirement(type, requirements, extraOptionReader);\r\n    } else {\r\n      return [convertRequirement(type, requirements)];\r\n    }\r\n  },\r\n  // Defaults:\r\n  requirementType: 'string',\r\n\r\n  priority: 2\r\n\r\n};\r\n\r\nexport default ParsleyValidator;\r\n","import $ from 'jquery';\r\nimport ParsleyUtils from './utils';\r\nimport ParsleyDefaults from './defaults';\r\nimport ParsleyValidator from './validator';\r\n\r\nvar ParsleyValidatorRegistry = function (validators, catalog) {\r\n  this.__class__ = 'ParsleyValidatorRegistry';\r\n\r\n  // Default Parsley locale is en\r\n  this.locale = 'en';\r\n\r\n  this.init(validators || {}, catalog || {});\r\n};\r\n\r\nvar typeRegexes =  {\r\n  email: /^((([a-z]|\\d|[!#\\$%&'\\*\\+\\-\\/=\\?\\^_`{\\|}~]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])+(\\.([a-z]|\\d|[!#\\$%&'\\*\\+\\-\\/=\\?\\^_`{\\|}~]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])+)*)|((\\x22)((((\\x20|\\x09)*(\\x0d\\x0a))?(\\x20|\\x09)+)?(([\\x01-\\x08\\x0b\\x0c\\x0e-\\x1f\\x7f]|\\x21|[\\x23-\\x5b]|[\\x5d-\\x7e]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])|(\\\\([\\x01-\\x09\\x0b\\x0c\\x0d-\\x7f]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF]))))*(((\\x20|\\x09)*(\\x0d\\x0a))?(\\x20|\\x09)+)?(\\x22)))@((([a-z]|\\d|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])|(([a-z]|\\d|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])([a-z]|\\d|-|\\.|_|~|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])*([a-z]|\\d|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])))\\.)+(([a-z]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])|(([a-z]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])([a-z]|\\d|-|\\.|_|~|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])*([a-z]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])))$/i,\r\n\r\n  // Follow https://www.w3.org/TR/html5/infrastructure.html#floating-point-numbers\r\n  number: /^-?(\\d*\\.)?\\d+(e[-+]?\\d+)?$/i,\r\n\r\n  integer: /^-?\\d+$/,\r\n\r\n  digits: /^\\d+$/,\r\n\r\n  alphanum: /^\\w+$/i,\r\n\r\n  url: new RegExp(\r\n      \"^\" +\r\n        // protocol identifier\r\n        \"(?:(?:https?|ftp)://)?\" + // ** mod: make scheme optional\r\n        // user:pass authentication\r\n        \"(?:\\\\S+(?::\\\\S*)?@)?\" +\r\n        \"(?:\" +\r\n          // IP address exclusion\r\n          // private & local networks\r\n          // \"(?!(?:10|127)(?:\\\\.\\\\d{1,3}){3})\" +   // ** mod: allow local networks\r\n          // \"(?!(?:169\\\\.254|192\\\\.168)(?:\\\\.\\\\d{1,3}){2})\" +  // ** mod: allow local networks\r\n          // \"(?!172\\\\.(?:1[6-9]|2\\\\d|3[0-1])(?:\\\\.\\\\d{1,3}){2})\" +  // ** mod: allow local networks\r\n          // IP address dotted notation octets\r\n          // excludes loopback network 0.0.0.0\r\n          // excludes reserved space >= 224.0.0.0\r\n          // excludes network & broacast addresses\r\n          // (first & last IP address of each class)\r\n          \"(?:[1-9]\\\\d?|1\\\\d\\\\d|2[01]\\\\d|22[0-3])\" +\r\n          \"(?:\\\\.(?:1?\\\\d{1,2}|2[0-4]\\\\d|25[0-5])){2}\" +\r\n          \"(?:\\\\.(?:[1-9]\\\\d?|1\\\\d\\\\d|2[0-4]\\\\d|25[0-4]))\" +\r\n        \"|\" +\r\n          // host name\r\n          \"(?:(?:[a-z\\\\u00a1-\\\\uffff0-9]-*)*[a-z\\\\u00a1-\\\\uffff0-9]+)\" +\r\n          // domain name\r\n          \"(?:\\\\.(?:[a-z\\\\u00a1-\\\\uffff0-9]-*)*[a-z\\\\u00a1-\\\\uffff0-9]+)*\" +\r\n          // TLD identifier\r\n          \"(?:\\\\.(?:[a-z\\\\u00a1-\\\\uffff]{2,}))\" +\r\n        \")\" +\r\n        // port number\r\n        \"(?::\\\\d{2,5})?\" +\r\n        // resource path\r\n        \"(?:/\\\\S*)?\" +\r\n      \"$\", 'i'\r\n    )\r\n};\r\ntypeRegexes.range = typeRegexes.number;\r\n\r\n// See http://stackoverflow.com/a/10454560/8279\r\nvar decimalPlaces = num => {\r\n  var match = ('' + num).match(/(?:\\.(\\d+))?(?:[eE]([+-]?\\d+))?$/);\r\n  if (!match) { return 0; }\r\n  return Math.max(\r\n       0,\r\n       // Number of digits right of decimal point.\r\n       (match[1] ? match[1].length : 0) -\r\n       // Adjust for scientific notation.\r\n       (match[2] ? +match[2] : 0));\r\n};\r\n\r\nParsleyValidatorRegistry.prototype = {\r\n  init: function (validators, catalog) {\r\n    this.catalog = catalog;\r\n    // Copy prototype's validators:\r\n    this.validators = $.extend({}, this.validators);\r\n\r\n    for (var name in validators)\r\n      this.addValidator(name, validators[name].fn, validators[name].priority);\r\n\r\n    window.Parsley.trigger('parsley:validator:init');\r\n  },\r\n\r\n  // Set new messages locale if we have dictionary loaded in ParsleyConfig.i18n\r\n  setLocale: function (locale) {\r\n    if ('undefined' === typeof this.catalog[locale])\r\n      throw new Error(locale + ' is not available in the catalog');\r\n\r\n    this.locale = locale;\r\n\r\n    return this;\r\n  },\r\n\r\n  // Add a new messages catalog for a given locale. Set locale for this catalog if set === `true`\r\n  addCatalog: function (locale, messages, set) {\r\n    if ('object' === typeof messages)\r\n      this.catalog[locale] = messages;\r\n\r\n    if (true === set)\r\n      return this.setLocale(locale);\r\n\r\n    return this;\r\n  },\r\n\r\n  // Add a specific message for a given constraint in a given locale\r\n  addMessage: function (locale, name, message) {\r\n    if ('undefined' === typeof this.catalog[locale])\r\n      this.catalog[locale] = {};\r\n\r\n    this.catalog[locale][name] = message;\r\n\r\n    return this;\r\n  },\r\n\r\n  // Add messages for a given locale\r\n  addMessages: function (locale, nameMessageObject) {\r\n    for (var name in nameMessageObject)\r\n      this.addMessage(locale, name, nameMessageObject[name]);\r\n\r\n    return this;\r\n  },\r\n\r\n  // Add a new validator\r\n  //\r\n  //    addValidator('custom', {\r\n  //        requirementType: ['integer', 'integer'],\r\n  //        validateString: function(value, from, to) {},\r\n  //        priority: 22,\r\n  //        messages: {\r\n  //          en: \"Hey, that's no good\",\r\n  //          fr: \"Aye aye, pas bon du tout\",\r\n  //        }\r\n  //    })\r\n  //\r\n  // Old API was addValidator(name, function, priority)\r\n  //\r\n  addValidator: function (name, arg1, arg2) {\r\n    if (this.validators[name])\r\n      ParsleyUtils.warn('Validator \"' + name + '\" is already defined.');\r\n    else if (ParsleyDefaults.hasOwnProperty(name)) {\r\n      ParsleyUtils.warn('\"' + name + '\" is a restricted keyword and is not a valid validator name.');\r\n      return;\r\n    }\r\n    return this._setValidator(...arguments);\r\n  },\r\n\r\n  updateValidator: function (name, arg1, arg2) {\r\n    if (!this.validators[name]) {\r\n      ParsleyUtils.warn('Validator \"' + name + '\" is not already defined.');\r\n      return this.addValidator(...arguments);\r\n    }\r\n    return this._setValidator(this, arguments);\r\n  },\r\n\r\n  removeValidator: function (name) {\r\n    if (!this.validators[name])\r\n      ParsleyUtils.warn('Validator \"' + name + '\" is not defined.');\r\n\r\n    delete this.validators[name];\r\n\r\n    return this;\r\n  },\r\n\r\n  _setValidator: function (name, validator, priority) {\r\n    if ('object' !== typeof validator) {\r\n      // Old style validator, with `fn` and `priority`\r\n      validator = {\r\n        fn: validator,\r\n        priority: priority\r\n      };\r\n    }\r\n    if (!validator.validate) {\r\n      validator = new ParsleyValidator(validator);\r\n    }\r\n    this.validators[name] = validator;\r\n\r\n    for (var locale in validator.messages || {})\r\n      this.addMessage(locale, name, validator.messages[locale]);\r\n\r\n    return this;\r\n  },\r\n\r\n  getErrorMessage: function (constraint) {\r\n    var message;\r\n\r\n    // Type constraints are a bit different, we have to match their requirements too to find right error message\r\n    if ('type' === constraint.name) {\r\n      var typeMessages = this.catalog[this.locale][constraint.name] || {};\r\n      message = typeMessages[constraint.requirements];\r\n    } else\r\n      message = this.formatMessage(this.catalog[this.locale][constraint.name], constraint.requirements);\r\n\r\n    return message || this.catalog[this.locale].defaultMessage || this.catalog.en.defaultMessage;\r\n  },\r\n\r\n  // Kind of light `sprintf()` implementation\r\n  formatMessage: function (string, parameters) {\r\n    if ('object' === typeof parameters) {\r\n      for (var i in parameters)\r\n        string = this.formatMessage(string, parameters[i]);\r\n\r\n      return string;\r\n    }\r\n\r\n    return 'string' === typeof string ? string.replace(/%s/i, parameters) : '';\r\n  },\r\n\r\n  // Here is the Parsley default validators list.\r\n  // A validator is an object with the following key values:\r\n  //  - priority: an integer\r\n  //  - requirement: 'string' (default), 'integer', 'number', 'regexp' or an Array of these\r\n  //  - validateString, validateMultiple, validateNumber: functions returning `true`, `false` or a promise\r\n  // Alternatively, a validator can be a function that returns such an object\r\n  //\r\n  validators: {\r\n    notblank: {\r\n      validateString: function(value) {\r\n        return /\\S/.test(value);\r\n      },\r\n      priority: 2\r\n    },\r\n    required: {\r\n      validateMultiple: function(values) {\r\n        return values.length > 0;\r\n      },\r\n      validateString: function(value) {\r\n        return /\\S/.test(value);\r\n      },\r\n      priority: 512\r\n    },\r\n    type: {\r\n      validateString: function(value, type, {step = '1', base = 0} = {}) {\r\n        var regex = typeRegexes[type];\r\n        if (!regex) {\r\n          throw new Error('validator type `' + type + '` is not supported');\r\n        }\r\n        if (!regex.test(value))\r\n          return false;\r\n        if ('number' === type) {\r\n          if (!/^any$/i.test(step || '')) {\r\n            var nb = Number(value);\r\n            var decimals = Math.max(decimalPlaces(step), decimalPlaces(base));\r\n            if (decimalPlaces(nb) > decimals) // Value can't have too many decimals\r\n              return false;\r\n            // Be careful of rounding errors by using integers.\r\n            var toInt = f => { return Math.round(f * Math.pow(10, decimals)); };\r\n            if ((toInt(nb) - toInt(base)) % toInt(step) != 0)\r\n              return false;\r\n          }\r\n        }\r\n        return true;\r\n      },\r\n      requirementType: {\r\n        '': 'string',\r\n        step: 'string',\r\n        base: 'number'\r\n      },\r\n      priority: 256\r\n    },\r\n    pattern: {\r\n      validateString: function(value, regexp) {\r\n        return regexp.test(value);\r\n      },\r\n      requirementType: 'regexp',\r\n      priority: 64\r\n    },\r\n    minlength: {\r\n      validateString: function (value, requirement) {\r\n        return value.length >= requirement;\r\n      },\r\n      requirementType: 'integer',\r\n      priority: 30\r\n    },\r\n    maxlength: {\r\n      validateString: function (value, requirement) {\r\n        return value.length <= requirement;\r\n      },\r\n      requirementType: 'integer',\r\n      priority: 30\r\n    },\r\n    length: {\r\n      validateString: function (value, min, max) {\r\n        return value.length >= min && value.length <= max;\r\n      },\r\n      requirementType: ['integer', 'integer'],\r\n      priority: 30\r\n    },\r\n    mincheck: {\r\n      validateMultiple: function (values, requirement) {\r\n        return values.length >= requirement;\r\n      },\r\n      requirementType: 'integer',\r\n      priority: 30\r\n    },\r\n    maxcheck: {\r\n      validateMultiple: function (values, requirement) {\r\n        return values.length <= requirement;\r\n      },\r\n      requirementType: 'integer',\r\n      priority: 30\r\n    },\r\n    check: {\r\n      validateMultiple: function (values, min, max) {\r\n        return values.length >= min && values.length <= max;\r\n      },\r\n      requirementType: ['integer', 'integer'],\r\n      priority: 30\r\n    },\r\n    min: {\r\n      validateNumber: function (value, requirement) {\r\n        return value >= requirement;\r\n      },\r\n      requirementType: 'number',\r\n      priority: 30\r\n    },\r\n    max: {\r\n      validateNumber: function (value, requirement) {\r\n        return value <= requirement;\r\n      },\r\n      requirementType: 'number',\r\n      priority: 30\r\n    },\r\n    range: {\r\n      validateNumber: function (value, min, max) {\r\n        return value >= min && value <= max;\r\n      },\r\n      requirementType: ['number', 'number'],\r\n      priority: 30\r\n    },\r\n    equalto: {\r\n      validateString: function (value, refOrValue) {\r\n        var $reference = $(refOrValue);\r\n        if ($reference.length)\r\n          return value === $reference.val();\r\n        else\r\n          return value === refOrValue;\r\n      },\r\n      priority: 256\r\n    }\r\n  }\r\n};\r\n\r\nexport default ParsleyValidatorRegistry;\r\n","import $ from 'jquery';\r\nimport ParsleyUtils from './utils';\r\n\r\nvar ParsleyUI = {};\r\n\r\nvar diffResults = function (newResult, oldResult, deep) {\r\n  var added = [];\r\n  var kept = [];\r\n\r\n  for (var i = 0; i < newResult.length; i++) {\r\n    var found = false;\r\n\r\n    for (var j = 0; j < oldResult.length; j++)\r\n      if (newResult[i].assert.name === oldResult[j].assert.name) {\r\n        found = true;\r\n        break;\r\n      }\r\n\r\n    if (found)\r\n      kept.push(newResult[i]);\r\n    else\r\n      added.push(newResult[i]);\r\n  }\r\n\r\n  return {\r\n    kept: kept,\r\n    added: added,\r\n    removed: !deep ? diffResults(oldResult, newResult, true).added : []\r\n  };\r\n};\r\n\r\nParsleyUI.Form = {\r\n\r\n  _actualizeTriggers: function () {\r\n    this.$element.on('submit.Parsley', evt => { this.onSubmitValidate(evt); });\r\n    this.$element.on('click.Parsley', 'input[type=\"submit\"], button[type=\"submit\"]', evt => { this.onSubmitButton(evt); });\r\n\r\n    // UI could be disabled\r\n    if (false === this.options.uiEnabled)\r\n      return;\r\n\r\n    this.$element.attr('novalidate', '');\r\n  },\r\n\r\n  focus: function () {\r\n    this._focusedField = null;\r\n\r\n    if (true === this.validationResult || 'none' === this.options.focus)\r\n      return null;\r\n\r\n    for (var i = 0; i < this.fields.length; i++) {\r\n      var field = this.fields[i];\r\n      if (true !== field.validationResult && field.validationResult.length > 0 && 'undefined' === typeof field.options.noFocus) {\r\n        this._focusedField = field.$element;\r\n        if ('first' === this.options.focus)\r\n          break;\r\n      }\r\n    }\r\n\r\n    if (null === this._focusedField)\r\n      return null;\r\n\r\n    return this._focusedField.focus();\r\n  },\r\n\r\n  _destroyUI: function () {\r\n    // Reset all event listeners\r\n    this.$element.off('.Parsley');\r\n  }\r\n\r\n};\r\n\r\nParsleyUI.Field = {\r\n\r\n  _reflowUI: function () {\r\n    this._buildUI();\r\n\r\n    // If this field doesn't have an active UI don't bother doing something\r\n    if (!this._ui)\r\n      return;\r\n\r\n    // Diff between two validation results\r\n    var diff = diffResults(this.validationResult, this._ui.lastValidationResult);\r\n\r\n    // Then store current validation result for next reflow\r\n    this._ui.lastValidationResult = this.validationResult;\r\n\r\n    // Handle valid / invalid / none field class\r\n    this._manageStatusClass();\r\n\r\n    // Add, remove, updated errors messages\r\n    this._manageErrorsMessages(diff);\r\n\r\n    // Triggers impl\r\n    this._actualizeTriggers();\r\n\r\n    // If field is not valid for the first time, bind keyup trigger to ease UX and quickly inform user\r\n    if ((diff.kept.length || diff.added.length) && !this._failedOnce) {\r\n      this._failedOnce = true;\r\n      this._actualizeTriggers();\r\n    }\r\n  },\r\n\r\n  // Returns an array of field's error message(s)\r\n  getErrorsMessages: function () {\r\n    // No error message, field is valid\r\n    if (true === this.validationResult)\r\n      return [];\r\n\r\n    var messages = [];\r\n\r\n    for (var i = 0; i < this.validationResult.length; i++)\r\n      messages.push(this.validationResult[i].errorMessage ||\r\n       this._getErrorMessage(this.validationResult[i].assert));\r\n\r\n    return messages;\r\n  },\r\n\r\n  // It's a goal of Parsley that this method is no longer required [#1073]\r\n  addError: function (name, {message, assert, updateClass = true} = {}) {\r\n    this._buildUI();\r\n    this._addError(name, {message, assert});\r\n\r\n    if (updateClass)\r\n      this._errorClass();\r\n  },\r\n\r\n  // It's a goal of Parsley that this method is no longer required [#1073]\r\n  updateError: function (name, {message, assert, updateClass = true} = {}) {\r\n    this._buildUI();\r\n    this._updateError(name, {message, assert});\r\n\r\n    if (updateClass)\r\n      this._errorClass();\r\n  },\r\n\r\n  // It's a goal of Parsley that this method is no longer required [#1073]\r\n  removeError: function (name, {updateClass = true} = {}) {\r\n    this._buildUI();\r\n    this._removeError(name);\r\n\r\n    // edge case possible here: remove a standard Parsley error that is still failing in this.validationResult\r\n    // but highly improbable cuz' manually removing a well Parsley handled error makes no sense.\r\n    if (updateClass)\r\n      this._manageStatusClass();\r\n  },\r\n\r\n  _manageStatusClass: function () {\r\n    if (this.hasConstraints() && this.needsValidation() && true === this.validationResult)\r\n      this._successClass();\r\n    else if (this.validationResult.length > 0)\r\n      this._errorClass();\r\n    else\r\n      this._resetClass();\r\n  },\r\n\r\n  _manageErrorsMessages: function (diff) {\r\n    if ('undefined' !== typeof this.options.errorsMessagesDisabled)\r\n      return;\r\n\r\n    // Case where we have errorMessage option that configure an unique field error message, regardless failing validators\r\n    if ('undefined' !== typeof this.options.errorMessage) {\r\n      if ((diff.added.length || diff.kept.length)) {\r\n        this._insertErrorWrapper();\r\n\r\n        if (0 === this._ui.$errorsWrapper.find('.parsley-custom-error-message').length)\r\n          this._ui.$errorsWrapper\r\n            .append(\r\n              $(this.options.errorTemplate)\r\n              .addClass('parsley-custom-error-message')\r\n            );\r\n\r\n        return this._ui.$errorsWrapper\r\n          .addClass('filled')\r\n          .find('.parsley-custom-error-message')\r\n          .html(this.options.errorMessage);\r\n      }\r\n\r\n      return this._ui.$errorsWrapper\r\n        .removeClass('filled')\r\n        .find('.parsley-custom-error-message')\r\n        .remove();\r\n    }\r\n\r\n    // Show, hide, update failing constraints messages\r\n    for (var i = 0; i < diff.removed.length; i++)\r\n      this._removeError(diff.removed[i].assert.name);\r\n\r\n    for (i = 0; i < diff.added.length; i++)\r\n      this._addError(diff.added[i].assert.name, {message: diff.added[i].errorMessage, assert: diff.added[i].assert});\r\n\r\n    for (i = 0; i < diff.kept.length; i++)\r\n      this._updateError(diff.kept[i].assert.name, {message: diff.kept[i].errorMessage, assert: diff.kept[i].assert});\r\n  },\r\n\r\n\r\n  _addError: function (name, {message, assert}) {\r\n    this._insertErrorWrapper();\r\n    this._ui.$errorsWrapper\r\n      .addClass('filled')\r\n      .append(\r\n        $(this.options.errorTemplate)\r\n        .addClass('parsley-' + name)\r\n        .html(message || this._getErrorMessage(assert))\r\n      );\r\n  },\r\n\r\n  _updateError: function (name, {message, assert}) {\r\n    this._ui.$errorsWrapper\r\n      .addClass('filled')\r\n      .find('.parsley-' + name)\r\n      .html(message || this._getErrorMessage(assert));\r\n  },\r\n\r\n  _removeError: function (name) {\r\n    this._ui.$errorsWrapper\r\n      .removeClass('filled')\r\n      .find('.parsley-' + name)\r\n      .remove();\r\n  },\r\n\r\n  _getErrorMessage: function (constraint) {\r\n    var customConstraintErrorMessage = constraint.name + 'Message';\r\n\r\n    if ('undefined' !== typeof this.options[customConstraintErrorMessage])\r\n      return window.Parsley.formatMessage(this.options[customConstraintErrorMessage], constraint.requirements);\r\n\r\n    return window.Parsley.getErrorMessage(constraint);\r\n  },\r\n\r\n  _buildUI: function () {\r\n    // UI could be already built or disabled\r\n    if (this._ui || false === this.options.uiEnabled)\r\n      return;\r\n\r\n    var _ui = {};\r\n\r\n    // Give field its Parsley id in DOM\r\n    this.$element.attr(this.options.namespace + 'id', this.__id__);\r\n\r\n    /** Generate important UI elements and store them in this **/\r\n    // $errorClassHandler is the $element that woul have parsley-error and parsley-success classes\r\n    _ui.$errorClassHandler = this._manageClassHandler();\r\n\r\n    // $errorsWrapper is a div that would contain the various field errors, it will be appended into $errorsContainer\r\n    _ui.errorsWrapperId = 'parsley-id-' + (this.options.multiple ? 'multiple-' + this.options.multiple : this.__id__);\r\n    _ui.$errorsWrapper = $(this.options.errorsWrapper).attr('id', _ui.errorsWrapperId);\r\n\r\n    // ValidationResult UI storage to detect what have changed bwt two validations, and update DOM accordingly\r\n    _ui.lastValidationResult = [];\r\n    _ui.validationInformationVisible = false;\r\n\r\n    // Store it in this for later\r\n    this._ui = _ui;\r\n  },\r\n\r\n  // Determine which element will have `parsley-error` and `parsley-success` classes\r\n  _manageClassHandler: function () {\r\n    // An element selector could be passed through DOM with `data-parsley-class-handler=#foo`\r\n    if ('string' === typeof this.options.classHandler && $(this.options.classHandler).length)\r\n      return $(this.options.classHandler);\r\n\r\n    // Class handled could also be determined by function given in Parsley options\r\n    var $handler = this.options.classHandler.call(this, this);\r\n\r\n    // If this function returned a valid existing DOM element, go for it\r\n    if ('undefined' !== typeof $handler && $handler.length)\r\n      return $handler;\r\n\r\n    // Otherwise, if simple element (input, texatrea, select...) it will perfectly host the classes\r\n    if (!this.options.multiple || this.$element.is('select'))\r\n      return this.$element;\r\n\r\n    // But if multiple element (radio, checkbox), that would be their parent\r\n    return this.$element.parent();\r\n  },\r\n\r\n  _insertErrorWrapper: function () {\r\n    var $errorsContainer;\r\n\r\n    // Nothing to do if already inserted\r\n    if (0 !== this._ui.$errorsWrapper.parent().length)\r\n      return this._ui.$errorsWrapper.parent();\r\n\r\n    if ('string' === typeof this.options.errorsContainer) {\r\n      if ($(this.options.errorsContainer).length)\r\n        return $(this.options.errorsContainer).append(this._ui.$errorsWrapper);\r\n      else\r\n        ParsleyUtils.warn('The errors container `' + this.options.errorsContainer + '` does not exist in DOM');\r\n    } else if ('function' === typeof this.options.errorsContainer)\r\n      $errorsContainer = this.options.errorsContainer.call(this, this);\r\n\r\n    if ('undefined' !== typeof $errorsContainer && $errorsContainer.length)\r\n      return $errorsContainer.append(this._ui.$errorsWrapper);\r\n\r\n    var $from = this.$element;\r\n    if (this.options.multiple)\r\n      $from = $from.parent();\r\n    return $from.after(this._ui.$errorsWrapper);\r\n  },\r\n\r\n  _actualizeTriggers: function () {\r\n    var $toBind = this._findRelated();\r\n\r\n    // Remove Parsley events already bound on this field\r\n    $toBind.off('.Parsley');\r\n    if (this._failedOnce)\r\n      $toBind.on(ParsleyUtils.namespaceEvents(this.options.triggerAfterFailure, 'Parsley'), () => {\r\n        this.validate();\r\n      });\r\n    else {\r\n      $toBind.on(ParsleyUtils.namespaceEvents(this.options.trigger, 'Parsley'), event => {\r\n        this._eventValidate(event);\r\n      });\r\n    }\r\n  },\r\n\r\n  _eventValidate: function (event) {\r\n    // For keyup, keypress, keydown, input... events that could be a little bit obstrusive\r\n    // do not validate if val length < min threshold on first validation. Once field have been validated once and info\r\n    // about success or failure have been displayed, always validate with this trigger to reflect every yalidation change.\r\n    if (/key|input/.test(event.type))\r\n      if (!(this._ui && this._ui.validationInformationVisible) && this.getValue().length <= this.options.validationThreshold)\r\n        return;\r\n\r\n    this.validate();\r\n  },\r\n\r\n  _resetUI: function () {\r\n    // Reset all event listeners\r\n    this._failedOnce = false;\r\n    this._actualizeTriggers();\r\n\r\n    // Nothing to do if UI never initialized for this field\r\n    if ('undefined' === typeof this._ui)\r\n      return;\r\n\r\n    // Reset all errors' li\r\n    this._ui.$errorsWrapper\r\n      .removeClass('filled')\r\n      .children()\r\n      .remove();\r\n\r\n    // Reset validation class\r\n    this._resetClass();\r\n\r\n    // Reset validation flags and last validation result\r\n    this._ui.lastValidationResult = [];\r\n    this._ui.validationInformationVisible = false;\r\n  },\r\n\r\n  _destroyUI: function () {\r\n    this._resetUI();\r\n\r\n    if ('undefined' !== typeof this._ui)\r\n      this._ui.$errorsWrapper.remove();\r\n\r\n    delete this._ui;\r\n  },\r\n\r\n  _successClass: function () {\r\n    this._ui.validationInformationVisible = true;\r\n    this._ui.$errorClassHandler.removeClass(this.options.errorClass).addClass(this.options.successClass);\r\n  },\r\n  _errorClass: function () {\r\n    this._ui.validationInformationVisible = true;\r\n    this._ui.$errorClassHandler.removeClass(this.options.successClass).addClass(this.options.errorClass);\r\n  },\r\n  _resetClass: function () {\r\n    this._ui.$errorClassHandler.removeClass(this.options.successClass).removeClass(this.options.errorClass);\r\n  }\r\n};\r\n\r\nexport default ParsleyUI;\r\n","import $ from 'jquery';\r\nimport ParsleyAbstract from './abstract';\r\nimport ParsleyUtils from './utils';\r\n\r\nvar ParsleyForm = function (element, domOptions, options) {\r\n  this.__class__ = 'ParsleyForm';\r\n  this.__id__ = ParsleyUtils.generateID();\r\n\r\n  this.$element = $(element);\r\n  this.domOptions = domOptions;\r\n  this.options = options;\r\n  this.parent = window.Parsley;\r\n\r\n  this.fields = [];\r\n  this.validationResult = null;\r\n};\r\n\r\nvar statusMapping = {pending: null, resolved: true, rejected: false};\r\n\r\nParsleyForm.prototype = {\r\n  onSubmitValidate: function (event) {\r\n    // This is a Parsley generated submit event, do not validate, do not prevent, simply exit and keep normal behavior\r\n    if (true === event.parsley)\r\n      return;\r\n\r\n    // If we didn't come here through a submit button, use the first one in the form\r\n    var $submitSource = this._$submitSource || this.$element.find('input[type=\"submit\"], button[type=\"submit\"]').first();\r\n    this._$submitSource = null;\r\n    this.$element.find('.parsley-synthetic-submit-button').prop('disabled', true);\r\n    if ($submitSource.is('[formnovalidate]'))\r\n      return;\r\n\r\n    var promise = this.whenValidate({event});\r\n\r\n    if ('resolved' === promise.state() && false !== this._trigger('submit')) {\r\n      // All good, let event go through. We make this distinction because browsers\r\n      // differ in their handling of `submit` being called from inside a submit event [#1047]\r\n    } else {\r\n      // Rejected or pending: cancel this submit\r\n      event.stopImmediatePropagation();\r\n      event.preventDefault();\r\n      if ('pending' === promise.state())\r\n        promise.done(() => { this._submit($submitSource); });\r\n    }\r\n  },\r\n\r\n  onSubmitButton: function(event) {\r\n    this._$submitSource = $(event.target);\r\n  },\r\n  // internal\r\n  // _submit submits the form, this time without going through the validations.\r\n  // Care must be taken to \"fake\" the actual submit button being clicked.\r\n  _submit: function ($submitSource) {\r\n    if (false === this._trigger('submit'))\r\n      return;\r\n    // Add submit button's data\r\n    if ($submitSource) {\r\n      var $synthetic = this.$element.find('.parsley-synthetic-submit-button').prop('disabled', false);\r\n      if (0 === $synthetic.length)\r\n        $synthetic = $('<input class=\"parsley-synthetic-submit-button\" type=\"hidden\">').appendTo(this.$element);\r\n      $synthetic.attr({\r\n        name: $submitSource.attr('name'),\r\n        value: $submitSource.attr('value')\r\n      });\r\n    }\r\n\r\n    this.$element.trigger($.extend($.Event('submit'), {parsley: true}));\r\n  },\r\n\r\n  // Performs validation on fields while triggering events.\r\n  // @returns `true` if all validations succeeds, `false`\r\n  // if a failure is immediately detected, or `null`\r\n  // if dependant on a promise.\r\n  // Consider using `whenValidate` instead.\r\n  validate: function (options) {\r\n    if (arguments.length >= 1 && !$.isPlainObject(options)) {\r\n      ParsleyUtils.warnOnce('Calling validate on a parsley form without passing arguments as an object is deprecated.');\r\n      var [group, force, event] = arguments;\r\n      options = {group, force, event};\r\n    }\r\n    return statusMapping[ this.whenValidate(options).state() ];\r\n  },\r\n\r\n  whenValidate: function ({group, force, event} = {}) {\r\n    this.submitEvent = event;\r\n    if (event) {\r\n      this.submitEvent = $.extend({}, event, {preventDefault: () => {\r\n        ParsleyUtils.warnOnce(\"Using `this.submitEvent.preventDefault()` is deprecated; instead, call `this.validationResult = false`\");\r\n        this.validationResult = false;\r\n      }});\r\n    }\r\n    this.validationResult = true;\r\n\r\n    // fire validate event to eventually modify things before very validation\r\n    this._trigger('validate');\r\n\r\n    // Refresh form DOM options and form's fields that could have changed\r\n    this._refreshFields();\r\n\r\n    var promises = this._withoutReactualizingFormOptions(() => {\r\n      return $.map(this.fields, field => {\r\n        return field.whenValidate({force, group});\r\n      });\r\n    });\r\n\r\n    var promiseBasedOnValidationResult = () => {\r\n      var r = $.Deferred();\r\n      if (false === this.validationResult)\r\n        r.reject();\r\n      return r.resolve().promise();\r\n    };\r\n\r\n    return $.when(...promises)\r\n      .done(  () => { this._trigger('success'); })\r\n      .fail(  () => {\r\n        this.validationResult = false;\r\n        this.focus();\r\n        this._trigger('error');\r\n      })\r\n      .always(() => { this._trigger('validated'); })\r\n      .pipe(  promiseBasedOnValidationResult, promiseBasedOnValidationResult);\r\n  },\r\n\r\n  // Iterate over refreshed fields, and stop on first failure.\r\n  // Returns `true` if all fields are valid, `false` if a failure is detected\r\n  // or `null` if the result depends on an unresolved promise.\r\n  // Prefer using `whenValid` instead.\r\n  isValid: function (options) {\r\n    if (arguments.length >= 1 && !$.isPlainObject(options)) {\r\n      ParsleyUtils.warnOnce('Calling isValid on a parsley form without passing arguments as an object is deprecated.');\r\n      var [group, force] = arguments;\r\n      options = {group, force};\r\n    }\r\n    return statusMapping[ this.whenValid(options).state() ];\r\n  },\r\n\r\n  // Iterate over refreshed fields and validate them.\r\n  // Returns a promise.\r\n  // A validation that immediately fails will interrupt the validations.\r\n  whenValid: function ({group, force} = {}) {\r\n    this._refreshFields();\r\n\r\n    var promises = this._withoutReactualizingFormOptions(() => {\r\n      return $.map(this.fields, field => {\r\n        return field.whenValid({group, force});\r\n      });\r\n    });\r\n    return $.when(...promises);\r\n  },\r\n\r\n  _refreshFields: function () {\r\n    return this.actualizeOptions()._bindFields();\r\n  },\r\n\r\n  _bindFields: function () {\r\n    var oldFields = this.fields;\r\n\r\n    this.fields = [];\r\n    this.fieldsMappedById = {};\r\n\r\n    this._withoutReactualizingFormOptions(() => {\r\n      this.$element\r\n      .find(this.options.inputs)\r\n      .not(this.options.excluded)\r\n      .each((_, element) => {\r\n        var fieldInstance = new window.Parsley.Factory(element, {}, this);\r\n\r\n        // Only add valid and not excluded `ParsleyField` and `ParsleyFieldMultiple` children\r\n        if (('ParsleyField' === fieldInstance.__class__ || 'ParsleyFieldMultiple' === fieldInstance.__class__) && (true !== fieldInstance.options.excluded))\r\n          if ('undefined' === typeof this.fieldsMappedById[fieldInstance.__class__ + '-' + fieldInstance.__id__]) {\r\n            this.fieldsMappedById[fieldInstance.__class__ + '-' + fieldInstance.__id__] = fieldInstance;\r\n            this.fields.push(fieldInstance);\r\n          }\r\n      });\r\n\r\n      $(oldFields).not(this.fields).each((_, field) => {\r\n        field._trigger('reset');\r\n      });\r\n    });\r\n    return this;\r\n  },\r\n\r\n  // Internal only.\r\n  // Looping on a form's fields to do validation or similar\r\n  // will trigger reactualizing options on all of them, which\r\n  // in turn will reactualize the form's options.\r\n  // To avoid calling actualizeOptions so many times on the form\r\n  // for nothing, _withoutReactualizingFormOptions temporarily disables\r\n  // the method actualizeOptions on this form while `fn` is called.\r\n  _withoutReactualizingFormOptions: function (fn) {\r\n    var oldActualizeOptions = this.actualizeOptions;\r\n    this.actualizeOptions = function () { return this; };\r\n    var result = fn();\r\n    this.actualizeOptions = oldActualizeOptions;\r\n    return result;\r\n  },\r\n\r\n  // Internal only.\r\n  // Shortcut to trigger an event\r\n  // Returns true iff event is not interrupted and default not prevented.\r\n  _trigger: function (eventName) {\r\n    return this.trigger('form:' + eventName);\r\n  }\r\n\r\n};\r\n\r\nexport default ParsleyForm;\r\n","import $ from 'jquery';\r\nimport ParsleyUtils from '../utils';\r\nimport ParsleyValidator from '../validator';\r\n\r\n\r\nvar ConstraintFactory = function (parsleyField, name, requirements, priority, isDomConstraint) {\r\n  if (!/ParsleyField/.test(parsleyField.__class__))\r\n    throw new Error('ParsleyField or ParsleyFieldMultiple instance expected');\r\n\r\n  var validatorSpec = window.Parsley._validatorRegistry.validators[name];\r\n  var validator = new ParsleyValidator(validatorSpec);\r\n\r\n  $.extend(this, {\r\n    validator: validator,\r\n    name: name,\r\n    requirements: requirements,\r\n    priority: priority || parsleyField.options[name + 'Priority'] || validator.priority,\r\n    isDomConstraint: true === isDomConstraint\r\n  });\r\n  this._parseRequirements(parsleyField.options);\r\n};\r\n\r\nvar capitalize = function(str) {\r\n  var cap = str[0].toUpperCase();\r\n  return cap + str.slice(1);\r\n};\r\n\r\nConstraintFactory.prototype = {\r\n  validate: function(value, instance) {\r\n    var args = this.requirementList.slice(0); // Make copy\r\n    args.unshift(value);\r\n    args.push(instance);\r\n    return this.validator.validate.apply(this.validator, args);\r\n  },\r\n\r\n  _parseRequirements: function(options) {\r\n    this.requirementList = this.validator.parseRequirements(this.requirements, key => {\r\n      return options[this.name + capitalize(key)];\r\n    });\r\n  }\r\n};\r\n\r\nexport default ConstraintFactory;\r\n\r\n","import $ from 'jquery';\r\nimport ConstraintFactory from './factory/constraint';\r\nimport ParsleyUI from './ui';\r\nimport ParsleyUtils from './utils';\r\n\r\nvar ParsleyField = function (field, domOptions, options, parsleyFormInstance) {\r\n  this.__class__ = 'ParsleyField';\r\n  this.__id__ = ParsleyUtils.generateID();\r\n\r\n  this.$element = $(field);\r\n\r\n  // Set parent if we have one\r\n  if ('undefined' !== typeof parsleyFormInstance) {\r\n    this.parent = parsleyFormInstance;\r\n  }\r\n\r\n  this.options = options;\r\n  this.domOptions = domOptions;\r\n\r\n  // Initialize some properties\r\n  this.constraints = [];\r\n  this.constraintsByName = {};\r\n  this.validationResult = [];\r\n\r\n  // Bind constraints\r\n  this._bindConstraints();\r\n};\r\n\r\nvar statusMapping = {pending: null, resolved: true, rejected: false};\r\n\r\nParsleyField.prototype = {\r\n  // # Public API\r\n  // Validate field and trigger some events for mainly `ParsleyUI`\r\n  // @returns `true`, an array of the validators that failed, or\r\n  // `null` if validation is not finished. Prefer using whenValidate\r\n  validate: function (options) {\r\n    if (arguments.length >= 1 && !$.isPlainObject(options)) {\r\n      ParsleyUtils.warnOnce('Calling validate on a parsley field without passing arguments as an object is deprecated.');\r\n      options = {options};\r\n    }\r\n    var promise = this.whenValidate(options);\r\n    if (!promise)  // If excluded with `group` option\r\n      return true;\r\n    switch (promise.state()) {\r\n      case 'pending': return null;\r\n      case 'resolved': return true;\r\n      case 'rejected': return this.validationResult;\r\n    }\r\n  },\r\n\r\n  // Validate field and trigger some events for mainly `ParsleyUI`\r\n  // @returns a promise that succeeds only when all validations do\r\n  // or `undefined` if field is not in the given `group`.\r\n  whenValidate: function ({force, group} =  {}) {\r\n    // do not validate a field if not the same as given validation group\r\n    this.refreshConstraints();\r\n    if (group && !this._isInGroup(group))\r\n      return;\r\n\r\n    this.value = this.getValue();\r\n\r\n    // Field Validate event. `this.value` could be altered for custom needs\r\n    this._trigger('validate');\r\n\r\n    return this.whenValid({force, value: this.value, _refreshed: true})\r\n      .always(() => { this._reflowUI(); })\r\n      .done(() =>   { this._trigger('success'); })\r\n      .fail(() =>   { this._trigger('error'); })\r\n      .always(() => { this._trigger('validated'); });\r\n  },\r\n\r\n  hasConstraints: function () {\r\n    return 0 !== this.constraints.length;\r\n  },\r\n\r\n  // An empty optional field does not need validation\r\n  needsValidation: function (value) {\r\n    if ('undefined' === typeof value)\r\n      value = this.getValue();\r\n\r\n    // If a field is empty and not required, it is valid\r\n    // Except if `data-parsley-validate-if-empty` explicitely added, useful for some custom validators\r\n    if (!value.length && !this._isRequired() && 'undefined' === typeof this.options.validateIfEmpty)\r\n      return false;\r\n\r\n    return true;\r\n  },\r\n\r\n  _isInGroup: function (group) {\r\n    if ($.isArray(this.options.group))\r\n      return -1 !== $.inArray(group, this.options.group);\r\n    return this.options.group === group;\r\n  },\r\n\r\n  // Just validate field. Do not trigger any event.\r\n  // Returns `true` iff all constraints pass, `false` if there are failures,\r\n  // or `null` if the result can not be determined yet (depends on a promise)\r\n  // See also `whenValid`.\r\n  isValid: function (options) {\r\n    if (arguments.length >= 1 && !$.isPlainObject(options)) {\r\n      ParsleyUtils.warnOnce('Calling isValid on a parsley field without passing arguments as an object is deprecated.');\r\n      var [force, value] = arguments;\r\n      options = {force, value};\r\n    }\r\n    var promise = this.whenValid(options);\r\n    if (!promise) // Excluded via `group`\r\n      return true;\r\n    return statusMapping[promise.state()];\r\n  },\r\n\r\n  // Just validate field. Do not trigger any event.\r\n  // @returns a promise that succeeds only when all validations do\r\n  // or `undefined` if the field is not in the given `group`.\r\n  // The argument `force` will force validation of empty fields.\r\n  // If a `value` is given, it will be validated instead of the value of the input.\r\n  whenValid: function ({force = false, value, group, _refreshed} = {}) {\r\n    // Recompute options and rebind constraints to have latest changes\r\n    if (!_refreshed)\r\n      this.refreshConstraints();\r\n    // do not validate a field if not the same as given validation group\r\n    if (group && !this._isInGroup(group))\r\n      return;\r\n\r\n    this.validationResult = true;\r\n\r\n    // A field without constraint is valid\r\n    if (!this.hasConstraints())\r\n      return $.when();\r\n\r\n    // Value could be passed as argument, needed to add more power to 'parsley:field:validate'\r\n    if ('undefined' === typeof value || null === value)\r\n      value = this.getValue();\r\n\r\n    if (!this.needsValidation(value) && true !== force)\r\n      return $.when();\r\n\r\n    var groupedConstraints = this._getGroupedConstraints();\r\n    var promises = [];\r\n    $.each(groupedConstraints, (_, constraints) => {\r\n      // Process one group of constraints at a time, we validate the constraints\r\n      // and combine the promises together.\r\n      var promise = $.when(\r\n        ...$.map(constraints, constraint => this._validateConstraint(value, constraint))\r\n      );\r\n      promises.push(promise);\r\n      if (promise.state() === 'rejected')\r\n        return false; // Interrupt processing if a group has already failed\r\n    });\r\n    return $.when.apply($, promises);\r\n  },\r\n\r\n  // @returns a promise\r\n  _validateConstraint: function(value, constraint) {\r\n    var result = constraint.validate(value, this);\r\n    // Map false to a failed promise\r\n    if (false === result)\r\n      result = $.Deferred().reject();\r\n    // Make sure we return a promise and that we record failures\r\n    return $.when(result).fail(errorMessage => {\r\n      if (true === this.validationResult)\r\n        this.validationResult = [];\r\n      this.validationResult.push({\r\n        assert: constraint,\r\n        errorMessage: 'string' === typeof errorMessage && errorMessage\r\n      });\r\n    });\r\n  },\r\n\r\n  // @returns Parsley field computed value that could be overrided or configured in DOM\r\n  getValue: function () {\r\n    var value;\r\n\r\n    // Value could be overriden in DOM or with explicit options\r\n    if ('function' === typeof this.options.value)\r\n      value = this.options.value(this);\r\n    else if ('undefined' !== typeof this.options.value)\r\n      value = this.options.value;\r\n    else\r\n      value = this.$element.val();\r\n\r\n    // Handle wrong DOM or configurations\r\n    if ('undefined' === typeof value || null === value)\r\n      return '';\r\n\r\n    return this._handleWhitespace(value);\r\n  },\r\n\r\n  // Actualize options that could have change since previous validation\r\n  // Re-bind accordingly constraints (could be some new, removed or updated)\r\n  refreshConstraints: function () {\r\n    return this.actualizeOptions()._bindConstraints();\r\n  },\r\n\r\n  /**\r\n  * Add a new constraint to a field\r\n  *\r\n  * @param {String}   name\r\n  * @param {Mixed}    requirements      optional\r\n  * @param {Number}   priority          optional\r\n  * @param {Boolean}  isDomConstraint   optional\r\n  */\r\n  addConstraint: function (name, requirements, priority, isDomConstraint) {\r\n\r\n    if (window.Parsley._validatorRegistry.validators[name]) {\r\n      var constraint = new ConstraintFactory(this, name, requirements, priority, isDomConstraint);\r\n\r\n      // if constraint already exist, delete it and push new version\r\n      if ('undefined' !== this.constraintsByName[constraint.name])\r\n        this.removeConstraint(constraint.name);\r\n\r\n      this.constraints.push(constraint);\r\n      this.constraintsByName[constraint.name] = constraint;\r\n    }\r\n\r\n    return this;\r\n  },\r\n\r\n  // Remove a constraint\r\n  removeConstraint: function (name) {\r\n    for (var i = 0; i < this.constraints.length; i++)\r\n      if (name === this.constraints[i].name) {\r\n        this.constraints.splice(i, 1);\r\n        break;\r\n      }\r\n    delete this.constraintsByName[name];\r\n    return this;\r\n  },\r\n\r\n  // Update a constraint (Remove + re-add)\r\n  updateConstraint: function (name, parameters, priority) {\r\n    return this.removeConstraint(name)\r\n      .addConstraint(name, parameters, priority);\r\n  },\r\n\r\n  // # Internals\r\n\r\n  // Internal only.\r\n  // Bind constraints from config + options + DOM\r\n  _bindConstraints: function () {\r\n    var constraints = [];\r\n    var constraintsByName = {};\r\n\r\n    // clean all existing DOM constraints to only keep javascript user constraints\r\n    for (var i = 0; i < this.constraints.length; i++)\r\n      if (false === this.constraints[i].isDomConstraint) {\r\n        constraints.push(this.constraints[i]);\r\n        constraintsByName[this.constraints[i].name] = this.constraints[i];\r\n      }\r\n\r\n    this.constraints = constraints;\r\n    this.constraintsByName = constraintsByName;\r\n\r\n    // then re-add Parsley DOM-API constraints\r\n    for (var name in this.options)\r\n      this.addConstraint(name, this.options[name], undefined, true);\r\n\r\n    // finally, bind special HTML5 constraints\r\n    return this._bindHtml5Constraints();\r\n  },\r\n\r\n  // Internal only.\r\n  // Bind specific HTML5 constraints to be HTML5 compliant\r\n  _bindHtml5Constraints: function () {\r\n    // html5 required\r\n    if (this.$element.hasClass('required') || this.$element.attr('required'))\r\n      this.addConstraint('required', true, undefined, true);\r\n\r\n    // html5 pattern\r\n    if ('string' === typeof this.$element.attr('pattern'))\r\n      this.addConstraint('pattern', this.$element.attr('pattern'), undefined, true);\r\n\r\n    // range\r\n    if ('undefined' !== typeof this.$element.attr('min') && 'undefined' !== typeof this.$element.attr('max'))\r\n      this.addConstraint('range', [this.$element.attr('min'), this.$element.attr('max')], undefined, true);\r\n\r\n    // HTML5 min\r\n    else if ('undefined' !== typeof this.$element.attr('min'))\r\n      this.addConstraint('min', this.$element.attr('min'), undefined, true);\r\n\r\n    // HTML5 max\r\n    else if ('undefined' !== typeof this.$element.attr('max'))\r\n      this.addConstraint('max', this.$element.attr('max'), undefined, true);\r\n\r\n\r\n    // length\r\n    if ('undefined' !== typeof this.$element.attr('minlength') && 'undefined' !== typeof this.$element.attr('maxlength'))\r\n      this.addConstraint('length', [this.$element.attr('minlength'), this.$element.attr('maxlength')], undefined, true);\r\n\r\n    // HTML5 minlength\r\n    else if ('undefined' !== typeof this.$element.attr('minlength'))\r\n      this.addConstraint('minlength', this.$element.attr('minlength'), undefined, true);\r\n\r\n    // HTML5 maxlength\r\n    else if ('undefined' !== typeof this.$element.attr('maxlength'))\r\n      this.addConstraint('maxlength', this.$element.attr('maxlength'), undefined, true);\r\n\r\n\r\n    // html5 types\r\n    var type = this.$element.attr('type');\r\n\r\n    if ('undefined' === typeof type)\r\n      return this;\r\n\r\n    // Small special case here for HTML5 number: integer validator if step attribute is undefined or an integer value, number otherwise\r\n    if ('number' === type) {\r\n      return this.addConstraint('type', ['number', {\r\n        step: this.$element.attr('step'),\r\n        base: this.$element.attr('min') || this.$element.attr('value')\r\n      }], undefined, true);\r\n    // Regular other HTML5 supported types\r\n    } else if (/^(email|url|range)$/i.test(type)) {\r\n      return this.addConstraint('type', type, undefined, true);\r\n    }\r\n    return this;\r\n  },\r\n\r\n  // Internal only.\r\n  // Field is required if have required constraint without `false` value\r\n  _isRequired: function () {\r\n    if ('undefined' === typeof this.constraintsByName.required)\r\n      return false;\r\n\r\n    return false !== this.constraintsByName.required.requirements;\r\n  },\r\n\r\n  // Internal only.\r\n  // Shortcut to trigger an event\r\n  _trigger: function (eventName) {\r\n    return this.trigger('field:' + eventName);\r\n  },\r\n\r\n  // Internal only\r\n  // Handles whitespace in a value\r\n  // Use `data-parsley-whitespace=\"squish\"` to auto squish input value\r\n  // Use `data-parsley-whitespace=\"trim\"` to auto trim input value\r\n  _handleWhitespace: function (value) {\r\n    if (true === this.options.trimValue)\r\n      ParsleyUtils.warnOnce('data-parsley-trim-value=\"true\" is deprecated, please use data-parsley-whitespace=\"trim\"');\r\n\r\n    if ('squish' === this.options.whitespace)\r\n      value = value.replace(/\\s{2,}/g, ' ');\r\n\r\n    if (('trim' === this.options.whitespace) || ('squish' === this.options.whitespace) || (true === this.options.trimValue))\r\n      value = ParsleyUtils.trimString(value);\r\n\r\n    return value;\r\n  },\r\n\r\n  // Internal only.\r\n  // Returns the constraints, grouped by descending priority.\r\n  // The result is thus an array of arrays of constraints.\r\n  _getGroupedConstraints: function () {\r\n    if (false === this.options.priorityEnabled)\r\n      return [this.constraints];\r\n\r\n    var groupedConstraints = [];\r\n    var index = {};\r\n\r\n    // Create array unique of priorities\r\n    for (var i = 0; i < this.constraints.length; i++) {\r\n      var p = this.constraints[i].priority;\r\n      if (!index[p])\r\n        groupedConstraints.push(index[p] = []);\r\n      index[p].push(this.constraints[i]);\r\n    }\r\n    // Sort them by priority DESC\r\n    groupedConstraints.sort(function (a, b) { return b[0].priority - a[0].priority; });\r\n\r\n    return groupedConstraints;\r\n  }\r\n\r\n};\r\n\r\nexport default ParsleyField;\r\n","import $ from 'jquery';\r\n\r\nvar ParsleyMultiple = function () {\r\n  this.__class__ = 'ParsleyFieldMultiple';\r\n};\r\n\r\nParsleyMultiple.prototype = {\r\n  // Add new `$element` sibling for multiple field\r\n  addElement: function ($element) {\r\n    this.$elements.push($element);\r\n\r\n    return this;\r\n  },\r\n\r\n  // See `ParsleyField.refreshConstraints()`\r\n  refreshConstraints: function () {\r\n    var fieldConstraints;\r\n\r\n    this.constraints = [];\r\n\r\n    // Select multiple special treatment\r\n    if (this.$element.is('select')) {\r\n      this.actualizeOptions()._bindConstraints();\r\n\r\n      return this;\r\n    }\r\n\r\n    // Gather all constraints for each input in the multiple group\r\n    for (var i = 0; i < this.$elements.length; i++) {\r\n\r\n      // Check if element have not been dynamically removed since last binding\r\n      if (!$('html').has(this.$elements[i]).length) {\r\n        this.$elements.splice(i, 1);\r\n        continue;\r\n      }\r\n\r\n      fieldConstraints = this.$elements[i].data('ParsleyFieldMultiple').refreshConstraints().constraints;\r\n\r\n      for (var j = 0; j < fieldConstraints.length; j++)\r\n        this.addConstraint(fieldConstraints[j].name, fieldConstraints[j].requirements, fieldConstraints[j].priority, fieldConstraints[j].isDomConstraint);\r\n    }\r\n\r\n    return this;\r\n  },\r\n\r\n  // See `ParsleyField.getValue()`\r\n  getValue: function () {\r\n    // Value could be overriden in DOM\r\n    if ('function' === typeof this.options.value)\r\n      value = this.options.value(this);\r\n    else if ('undefined' !== typeof this.options.value)\r\n      return this.options.value;\r\n\r\n    // Radio input case\r\n    if (this.$element.is('input[type=radio]'))\r\n      return this._findRelated().filter(':checked').val() || '';\r\n\r\n    // checkbox input case\r\n    if (this.$element.is('input[type=checkbox]')) {\r\n      var values = [];\r\n\r\n      this._findRelated().filter(':checked').each(function () {\r\n        values.push($(this).val());\r\n      });\r\n\r\n      return values;\r\n    }\r\n\r\n    // Select multiple case\r\n    if (this.$element.is('select') && null === this.$element.val())\r\n      return [];\r\n\r\n    // Default case that should never happen\r\n    return this.$element.val();\r\n  },\r\n\r\n  _init: function () {\r\n    this.$elements = [this.$element];\r\n\r\n    return this;\r\n  }\r\n};\r\n\r\nexport default ParsleyMultiple;\r\n","import $ from 'jquery';\r\nimport ParsleyUtils from './utils';\r\nimport ParsleyAbstract from './abstract';\r\nimport ParsleyForm from './form';\r\nimport ParsleyField from './field';\r\nimport ParsleyMultiple from './multiple';\r\n\r\nvar ParsleyFactory = function (element, options, parsleyFormInstance) {\r\n  this.$element = $(element);\r\n\r\n  // If the element has already been bound, returns its saved Parsley instance\r\n  var savedparsleyFormInstance = this.$element.data('Parsley');\r\n  if (savedparsleyFormInstance) {\r\n\r\n    // If the saved instance has been bound without a ParsleyForm parent and there is one given in this call, add it\r\n    if ('undefined' !== typeof parsleyFormInstance && savedparsleyFormInstance.parent === window.Parsley) {\r\n      savedparsleyFormInstance.parent = parsleyFormInstance;\r\n      savedparsleyFormInstance._resetOptions(savedparsleyFormInstance.options);\r\n    }\r\n\r\n    return savedparsleyFormInstance;\r\n  }\r\n\r\n  // Parsley must be instantiated with a DOM element or jQuery $element\r\n  if (!this.$element.length)\r\n    throw new Error('You must bind Parsley on an existing element.');\r\n\r\n  if ('undefined' !== typeof parsleyFormInstance && 'ParsleyForm' !== parsleyFormInstance.__class__)\r\n    throw new Error('Parent instance must be a ParsleyForm instance');\r\n\r\n  this.parent = parsleyFormInstance || window.Parsley;\r\n  return this.init(options);\r\n};\r\n\r\nParsleyFactory.prototype = {\r\n  init: function (options) {\r\n    this.__class__ = 'Parsley';\r\n    this.__version__ = '@@version';\r\n    this.__id__ = ParsleyUtils.generateID();\r\n\r\n    // Pre-compute options\r\n    this._resetOptions(options);\r\n\r\n    // A ParsleyForm instance is obviously a `<form>` element but also every node that is not an input and has the `data-parsley-validate` attribute\r\n    if (this.$element.is('form') || (ParsleyUtils.checkAttr(this.$element, this.options.namespace, 'validate') && !this.$element.is(this.options.inputs)))\r\n      return this.bind('parsleyForm');\r\n\r\n    // Every other element is bound as a `ParsleyField` or `ParsleyFieldMultiple`\r\n    return this.isMultiple() ? this.handleMultiple() : this.bind('parsleyField');\r\n  },\r\n\r\n  isMultiple: function () {\r\n    return (this.$element.is('input[type=radio], input[type=checkbox]')) || (this.$element.is('select') && 'undefined' !== typeof this.$element.attr('multiple'));\r\n  },\r\n\r\n  // Multiples fields are a real nightmare :(\r\n  // Maybe some refactoring would be appreciated here...\r\n  handleMultiple: function () {\r\n    var name;\r\n    var multiple;\r\n    var parsleyMultipleInstance;\r\n\r\n    // Handle multiple name\r\n    if (this.options.multiple)\r\n      ; // We already have our 'multiple' identifier\r\n    else if ('undefined' !== typeof this.$element.attr('name') && this.$element.attr('name').length)\r\n      this.options.multiple = name = this.$element.attr('name');\r\n    else if ('undefined' !== typeof this.$element.attr('id') && this.$element.attr('id').length)\r\n      this.options.multiple = this.$element.attr('id');\r\n\r\n    // Special select multiple input\r\n    if (this.$element.is('select') && 'undefined' !== typeof this.$element.attr('multiple')) {\r\n      this.options.multiple = this.options.multiple || this.__id__;\r\n      return this.bind('parsleyFieldMultiple');\r\n\r\n    // Else for radio / checkboxes, we need a `name` or `data-parsley-multiple` to properly bind it\r\n    } else if (!this.options.multiple) {\r\n      ParsleyUtils.warn('To be bound by Parsley, a radio, a checkbox and a multiple select input must have either a name or a multiple option.', this.$element);\r\n      return this;\r\n    }\r\n\r\n    // Remove special chars\r\n    this.options.multiple = this.options.multiple.replace(/(:|\\.|\\[|\\]|\\{|\\}|\\$)/g, '');\r\n\r\n    // Add proper `data-parsley-multiple` to siblings if we have a valid multiple name\r\n    if ('undefined' !== typeof name) {\r\n      $('input[name=\"' + name + '\"]').each((i, input) => {\r\n        if ($(input).is('input[type=radio], input[type=checkbox]'))\r\n          $(input).attr(this.options.namespace + 'multiple', this.options.multiple);\r\n      });\r\n    }\r\n\r\n    // Check here if we don't already have a related multiple instance saved\r\n    var $previouslyRelated = this._findRelated();\r\n    for (var i = 0; i < $previouslyRelated.length; i++) {\r\n      parsleyMultipleInstance = $($previouslyRelated.get(i)).data('Parsley');\r\n      if ('undefined' !== typeof parsleyMultipleInstance) {\r\n\r\n        if (!this.$element.data('ParsleyFieldMultiple')) {\r\n          parsleyMultipleInstance.addElement(this.$element);\r\n        }\r\n\r\n        break;\r\n      }\r\n    }\r\n\r\n    // Create a secret ParsleyField instance for every multiple field. It will be stored in `data('ParsleyFieldMultiple')`\r\n    // And will be useful later to access classic `ParsleyField` stuff while being in a `ParsleyFieldMultiple` instance\r\n    this.bind('parsleyField', true);\r\n\r\n    return parsleyMultipleInstance || this.bind('parsleyFieldMultiple');\r\n  },\r\n\r\n  // Return proper `ParsleyForm`, `ParsleyField` or `ParsleyFieldMultiple`\r\n  bind: function (type, doNotStore) {\r\n    var parsleyInstance;\r\n\r\n    switch (type) {\r\n      case 'parsleyForm':\r\n        parsleyInstance = $.extend(\r\n          new ParsleyForm(this.$element, this.domOptions, this.options),\r\n          window.ParsleyExtend\r\n        )._bindFields();\r\n        break;\r\n      case 'parsleyField':\r\n        parsleyInstance = $.extend(\r\n          new ParsleyField(this.$element, this.domOptions, this.options, this.parent),\r\n          window.ParsleyExtend\r\n        );\r\n        break;\r\n      case 'parsleyFieldMultiple':\r\n        parsleyInstance = $.extend(\r\n          new ParsleyField(this.$element, this.domOptions, this.options, this.parent),\r\n          new ParsleyMultiple(),\r\n          window.ParsleyExtend\r\n        )._init();\r\n        break;\r\n      default:\r\n        throw new Error(type + 'is not a supported Parsley type');\r\n    }\r\n\r\n    if (this.options.multiple)\r\n      ParsleyUtils.setAttr(this.$element, this.options.namespace, 'multiple', this.options.multiple);\r\n\r\n    if ('undefined' !== typeof doNotStore) {\r\n      this.$element.data('ParsleyFieldMultiple', parsleyInstance);\r\n\r\n      return parsleyInstance;\r\n    }\r\n\r\n    // Store the freshly bound instance in a DOM element for later access using jQuery `data()`\r\n    this.$element.data('Parsley', parsleyInstance);\r\n\r\n    // Tell the world we have a new ParsleyForm or ParsleyField instance!\r\n    parsleyInstance._actualizeTriggers();\r\n    parsleyInstance._trigger('init');\r\n\r\n    return parsleyInstance;\r\n  }\r\n};\r\n\r\nexport default ParsleyFactory;\r\n","import $ from 'jquery';\r\nimport ParsleyUtils from './utils';\r\nimport ParsleyDefaults from './defaults';\r\nimport ParsleyAbstract from './abstract';\r\nimport ParsleyValidatorRegistry from './validator_registry';\r\nimport ParsleyUI from './ui';\r\nimport ParsleyForm from './form';\r\nimport ParsleyField from './field';\r\nimport ParsleyMultiple from './multiple';\r\nimport ParsleyFactory from './factory';\r\n\r\nvar vernums = $.fn.jquery.split('.');\r\nif (parseInt(vernums[0]) <= 1 && parseInt(vernums[1]) < 8) {\r\n  throw \"The loaded version of jQuery is too old. Please upgrade to 1.8.x or better.\";\r\n}\r\nif (!vernums.forEach) {\r\n  ParsleyUtils.warn('Parsley requires ES5 to run properly. Please include https://github.com/es-shims/es5-shim');\r\n}\r\n// Inherit `on`, `off` & `trigger` to Parsley:\r\nvar Parsley = $.extend(new ParsleyAbstract(), {\r\n    $element: $(document),\r\n    actualizeOptions: null,\r\n    _resetOptions: null,\r\n    Factory: ParsleyFactory,\r\n    version: '@@version'\r\n  });\r\n\r\n// Supplement ParsleyField and Form with ParsleyAbstract\r\n// This way, the constructors will have access to those methods\r\n$.extend(ParsleyField.prototype, ParsleyUI.Field, ParsleyAbstract.prototype);\r\n$.extend(ParsleyForm.prototype, ParsleyUI.Form, ParsleyAbstract.prototype);\r\n// Inherit actualizeOptions and _resetOptions:\r\n$.extend(ParsleyFactory.prototype, ParsleyAbstract.prototype);\r\n\r\n// ### jQuery API\r\n// `$('.elem').parsley(options)` or `$('.elem').psly(options)`\r\n$.fn.parsley = $.fn.psly = function (options) {\r\n  if (this.length > 1) {\r\n    var instances = [];\r\n\r\n    this.each(function () {\r\n      instances.push($(this).parsley(options));\r\n    });\r\n\r\n    return instances;\r\n  }\r\n\r\n  // Return undefined if applied to non existing DOM element\r\n  if (!$(this).length) {\r\n    ParsleyUtils.warn('You must bind Parsley on an existing element.');\r\n\r\n    return;\r\n  }\r\n\r\n  return new ParsleyFactory(this, options);\r\n};\r\n\r\n// ### ParsleyField and ParsleyForm extension\r\n// Ensure the extension is now defined if it wasn't previously\r\nif ('undefined' === typeof window.ParsleyExtend)\r\n  window.ParsleyExtend = {};\r\n\r\n// ### Parsley config\r\n// Inherit from ParsleyDefault, and copy over any existing values\r\nParsley.options = $.extend(ParsleyUtils.objectCreate(ParsleyDefaults), window.ParsleyConfig);\r\nwindow.ParsleyConfig = Parsley.options; // Old way of accessing global options\r\n\r\n// ### Globals\r\nwindow.Parsley = window.psly = Parsley;\r\nwindow.ParsleyUtils = ParsleyUtils;\r\n\r\n// ### Define methods that forward to the registry, and deprecate all access except through window.Parsley\r\nvar registry = window.Parsley._validatorRegistry = new ParsleyValidatorRegistry(window.ParsleyConfig.validators, window.ParsleyConfig.i18n);\r\nwindow.ParsleyValidator = {};\r\n$.each('setLocale addCatalog addMessage addMessages getErrorMessage formatMessage addValidator updateValidator removeValidator'.split(' '), function (i, method) {\r\n  window.Parsley[method] = $.proxy(registry, method);\r\n  window.ParsleyValidator[method] = function () {\r\n    ParsleyUtils.warnOnce(`Accessing the method '${method}' through ParsleyValidator is deprecated. Simply call 'window.Parsley.${method}(...)'`);\r\n    return window.Parsley[method](...arguments);\r\n  };\r\n});\r\n\r\n// ### ParsleyUI\r\n// Deprecated global object\r\nwindow.Parsley.UI = ParsleyUI;\r\nwindow.ParsleyUI = {\r\n  removeError: function (instance, name, doNotUpdateClass) {\r\n    var updateClass = true !== doNotUpdateClass;\r\n    ParsleyUtils.warnOnce(`Accessing ParsleyUI is deprecated. Call 'removeError' on the instance directly. Please comment in issue 1073 as to your need to call this method.`);\r\n    return instance.removeError(name, {updateClass});\r\n  },\r\n  getErrorsMessages: function (instance) {\r\n    ParsleyUtils.warnOnce(`Accessing ParsleyUI is deprecated. Call 'getErrorsMessages' on the instance directly.`);\r\n    return instance.getErrorsMessages();\r\n  }\r\n};\r\n$.each('addError updateError'.split(' '), function (i, method) {\r\n  window.ParsleyUI[method] = function (instance, name, message, assert, doNotUpdateClass) {\r\n    var updateClass = true !== doNotUpdateClass;\r\n    ParsleyUtils.warnOnce(`Accessing ParsleyUI is deprecated. Call '${method}' on the instance directly. Please comment in issue 1073 as to your need to call this method.`);\r\n    return instance[method](name, {message, assert, updateClass});\r\n  };\r\n});\r\n\r\n// Alleviate glaring Firefox bug https://bugzilla.mozilla.org/show_bug.cgi?id=1250521\r\n// See also https://github.com/guillaumepotier/Parsley.js/issues/1068\r\nif (/firefox/i.test(navigator.userAgent)) {\r\n  $(document).on('change', 'select', evt => {\r\n    $(evt.target).trigger('input');\r\n  });\r\n}\r\n\r\n// ### PARSLEY auto-binding\r\n// Prevent it by setting `ParsleyConfig.autoBind` to `false`\r\nif (false !== window.ParsleyConfig.autoBind) {\r\n  $(function () {\r\n    // Works only on `data-parsley-validate`.\r\n    if ($('[data-parsley-validate]').length)\r\n      $('[data-parsley-validate]').parsley();\r\n  });\r\n}\r\n\r\nexport default Parsley;\r\n","import $ from 'jquery';\r\n\r\nimport Parsley from './main';\r\n\r\n$.extend(true, Parsley, {\r\n  asyncValidators: {\r\n    'default': {\r\n      fn: function (xhr) {\r\n        // By default, only status 2xx are deemed successful.\r\n        // Note: we use status instead of state() because responses with status 200\r\n        // but invalid messages (e.g. an empty body for content type set to JSON) will\r\n        // result in state() === 'rejected'.\r\n        return xhr.status >= 200 && xhr.status < 300;\r\n      },\r\n      url: false\r\n    },\r\n    reverse: {\r\n      fn: function (xhr) {\r\n        // If reverse option is set, a failing ajax request is considered successful\r\n        return xhr.status < 200 || xhr.status >= 300;\r\n      },\r\n      url: false\r\n    }\r\n  },\r\n\r\n  addAsyncValidator: function (name, fn, url, options) {\r\n    Parsley.asyncValidators[name] = {\r\n      fn: fn,\r\n      url: url || false,\r\n      options: options || {}\r\n    };\r\n\r\n    return this;\r\n  }\r\n\r\n});\r\n\r\nParsley.addValidator('remote', {\r\n  requirementType: {\r\n    '': 'string',\r\n    'validator': 'string',\r\n    'reverse': 'boolean',\r\n    'options': 'object'\r\n  },\r\n\r\n  validateString: function validateString(value, url, options, instance) {\r\n    var data = {};\r\n    var ajaxOptions;\r\n    var csr;\r\n    var validator = options.validator || (true === options.reverse ? 'reverse' : 'default');\r\n\r\n    if ('undefined' === typeof Parsley.asyncValidators[validator]) throw new Error('Calling an undefined async validator: `' + validator + '`');\r\n\r\n    url = Parsley.asyncValidators[validator].url || url;\r\n\r\n    // Fill current value\r\n    if (url.indexOf('{value}') > -1) {\r\n      url = url.replace('{value}', encodeURIComponent(value));\r\n    } else {\r\n      data[instance.$element.attr('name') || instance.$element.attr('id')] = value;\r\n    }\r\n\r\n    // Merge options passed in from the function with the ones in the attribute\r\n    var remoteOptions = $.extend(true, options.options || {}, Parsley.asyncValidators[validator].options);\r\n\r\n    // All `$.ajax(options)` could be overridden or extended directly from DOM in `data-parsley-remote-options`\r\n    ajaxOptions = $.extend(true, {}, {\r\n      url: url,\r\n      data: data,\r\n      type: 'GET',\r\n      useCache: true\r\n    }, remoteOptions);\r\n\r\n    if (ajaxOptions.useCache === \"false\") ajaxOptions.useCache = false;\r\n\r\n    // Generate store key based on ajax options\r\n    instance.trigger('field:ajaxoptions', instance, ajaxOptions);\r\n\r\n    if (ajaxOptions.useCache) {\r\n      try {\r\n        csr = $.param(ajaxOptions);\r\n      } catch (e) {\r\n        ajaxOptions.useCache = false;\r\n      }\r\n    }\r\n\r\n    // Initialise query cache\r\n    if ('undefined' === typeof Parsley._remoteCache) Parsley._remoteCache = {};\r\n\r\n    // Try to retrieve stored xhr\r\n    var xhr = ajaxOptions.useCache ? (Parsley._remoteCache[csr] = Parsley._remoteCache[csr] || $.ajax(ajaxOptions))\r\n                           : $.ajax(ajaxOptions);\r\n\r\n    var handleXhr = function handleXhr() {\r\n      var result = Parsley.asyncValidators[validator].fn.call(instance, xhr, url, options);\r\n      if (!result) // Map falsy results to rejected promise\r\n        result = $.Deferred().reject();\r\n      return $.when(result);\r\n    };\r\n\r\n    return xhr.then(handleXhr, handleXhr);\r\n  },\r\n\r\n  priority: -1\r\n});\r\n\r\nParsley.on('form:submit', function () {\r\n  Parsley._remoteCache = {};\r\n});\r\n\r\nwindow.ParsleyExtend.addAsyncValidator = function () {\r\n  ParsleyUtils.warnOnce('Accessing the method `addAsyncValidator` through an instance is deprecated. Simply call `Parsley.addAsyncValidator(...)`');\r\n  return Parsley.addAsyncValidator(...arguments);\r\n};\r\n","// This is included with the Parsley library itself,\r\n// thus there is no use in adding it to your project.\r\nimport Parsley from '../parsley/main';\r\n\r\nParsley.addMessages('en', {\r\n  defaultMessage: \"This value seems to be invalid.\",\r\n  type: {\r\n    email:        \"This value should be a valid email.\",\r\n    url:          \"This value should be a valid url.\",\r\n    number:       \"This value should be a valid number.\",\r\n    integer:      \"This value should be a valid integer.\",\r\n    digits:       \"This value should be digits.\",\r\n    alphanum:     \"This value should be alphanumeric.\"\r\n  },\r\n  notblank:       \"This value should not be blank.\",\r\n  required:       \"This value is required.\",\r\n  pattern:        \"This value seems to be invalid.\",\r\n  min:            \"This value should be greater than or equal to %s.\",\r\n  max:            \"This value should be lower than or equal to %s.\",\r\n  range:          \"This value should be between %s and %s.\",\r\n  minlength:      \"This value is too short. It should have %s characters or more.\",\r\n  maxlength:      \"This value is too long. It should have %s characters or fewer.\",\r\n  length:         \"This value length is invalid. It should be between %s and %s characters long.\",\r\n  mincheck:       \"You must select at least %s choices.\",\r\n  maxcheck:       \"You must select %s choices or fewer.\",\r\n  check:          \"You must select between %s and %s choices.\",\r\n  equalto:        \"This value should be the same.\"\r\n});\r\n\r\nParsley.setLocale('en');\r\n","import $ from 'jquery';\r\nimport Parsley from './parsley/main';\r\nimport './parsley/pubsub';\r\nimport './parsley/remote';\r\nimport './i18n/en';\r\n\r\nexport default Parsley;\r\n"],"sourceRoot":"/source/"}