{"version":3,"sources":["parsley.js","src/parsley/utils.js","src/parsley/defaults.js","src/parsley/abstract.js","src/parsley/validator.js","src/parsley/validator_registry.js","src/parsley/ui.js","src/parsley/form.js","src/parsley/factory/constraint.js","src/parsley/field.js","src/parsley/multiple.js","src/parsley/factory.js","src/parsley/main.js","src/parsley/pubsub.js","src/parsley/remote.js","src/i18n/en.js","src/parsley.js"],"names":[],"mappings":"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","file":"parsley.js","sourcesContent":["(function (global, factory) {\n  typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory(require('jquery')) :\n  typeof define === 'function' && define.amd ? define(['jquery'], factory) :\n  global.parsley = factory(global.$)\n}(this, function ($) { 'use strict';\n\n  var globalID = 1;\r\n  var pastWarnings = {};\r\n\r\n  var ParsleyUtils__ParsleyUtils = {\r\n    // Parsley DOM-API\r\n    // returns object from dom attributes and values\r\n    attr: function ($element, namespace, obj) {\r\n      var i;\r\n      var attribute;\r\n      var attributes;\r\n      var regex = new RegExp('^' + namespace, 'i');\r\n\r\n      if ('undefined' === typeof obj)\r\n        obj = {};\r\n      else {\r\n        // Clear all own properties. This won't affect prototype's values\r\n        for (i in obj) {\r\n          if (obj.hasOwnProperty(i))\r\n            delete obj[i];\r\n        }\r\n      }\r\n\r\n      if ('undefined' === typeof $element || 'undefined' === typeof $element[0])\r\n        return obj;\r\n\r\n      attributes = $element[0].attributes;\r\n      for (i = attributes.length; i--; ) {\r\n        attribute = attributes[i];\r\n\r\n        if (attribute && attribute.specified && regex.test(attribute.name)) {\r\n          obj[this.camelize(attribute.name.slice(namespace.length))] = this.deserializeValue(attribute.value);\r\n        }\r\n      }\r\n\r\n      return obj;\r\n    },\r\n\r\n    checkAttr: function ($element, namespace, checkAttr) {\r\n      return $element.is('[' + namespace + checkAttr + ']');\r\n    },\r\n\r\n    setAttr: function ($element, namespace, attr, value) {\r\n      $element[0].setAttribute(this.dasherize(namespace + attr), String(value));\r\n    },\r\n\r\n    generateID: function () {\r\n      return '' + globalID++;\r\n    },\r\n\r\n    /** Third party functions **/\r\n    // Zepto deserialize function\r\n    deserializeValue: function (value) {\r\n      var num;\r\n\r\n      try {\r\n        return value ?\r\n          value == \"true\" ||\r\n          (value == \"false\" ? false :\r\n          value == \"null\" ? null :\r\n          !isNaN(num = Number(value)) ? num :\r\n          /^[\\[\\{]/.test(value) ? $.parseJSON(value) :\r\n          value)\r\n          : value;\r\n      } catch (e) { return value; }\r\n    },\r\n\r\n    // Zepto camelize function\r\n    camelize: function (str) {\r\n      return str.replace(/-+(.)?/g, function (match, chr) {\r\n        return chr ? chr.toUpperCase() : '';\r\n      });\r\n    },\r\n\r\n    // Zepto dasherize function\r\n    dasherize: function (str) {\r\n      return str.replace(/::/g, '/')\r\n        .replace(/([A-Z]+)([A-Z][a-z])/g, '$1_$2')\r\n        .replace(/([a-z\\d])([A-Z])/g, '$1_$2')\r\n        .replace(/_/g, '-')\r\n        .toLowerCase();\r\n    },\r\n\r\n    warn: function () {\r\n      if (window.console && 'function' === typeof window.console.warn)\r\n        window.console.warn(...arguments);\r\n    },\r\n\r\n    warnOnce: function(msg) {\r\n      if (!pastWarnings[msg]) {\r\n        pastWarnings[msg] = true;\r\n        this.warn(...arguments);\r\n      }\r\n    },\r\n\r\n    _resetWarnings: function () {\r\n      pastWarnings = {};\r\n    },\r\n\r\n    trimString: function(string) {\r\n      return string.replace(/^\\s+|\\s+$/g, '');\r\n    },\r\n\r\n    namespaceEvents: function(events, namespace) {\r\n      events = this.trimString(events || '').split(/\\s+/);\r\n      if (!events[0])\r\n        return '';\r\n      return $.map(events, evt => { return `${evt}.${namespace}`; }).join(' ');\r\n    },\r\n\r\n    // Object.create polyfill, see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/create#Polyfill\r\n    objectCreate: Object.create || (function () {\r\n      var Object = function () {};\r\n      return function (prototype) {\r\n        if (arguments.length > 1) {\r\n          throw Error('Second argument not supported');\r\n        }\r\n        if (typeof prototype != 'object') {\r\n          throw TypeError('Argument must be an object');\r\n        }\r\n        Object.prototype = prototype;\r\n        var result = new Object();\r\n        Object.prototype = null;\r\n        return result;\r\n      };\r\n    })()\r\n  };\r\n\r\n  var ParsleyUtils__default = ParsleyUtils__ParsleyUtils;\n\n  // All these options could be overriden and specified directly in DOM using\r\n  // `data-parsley-` default DOM-API\r\n  // eg: `inputs` can be set in DOM using `data-parsley-inputs=\"input, textarea\"`\r\n  // eg: `data-parsley-stop-on-first-failing-constraint=\"false\"`\r\n\r\n  var ParsleyDefaults = {\r\n    // ### General\r\n\r\n    // Default data-namespace for DOM API\r\n    namespace: 'data-parsley-',\r\n\r\n    // Supported inputs by default\r\n    inputs: 'input, textarea, select',\r\n\r\n    // Excluded inputs by default\r\n    excluded: 'input[type=button], input[type=submit], input[type=reset], input[type=hidden]',\r\n\r\n    // Stop validating field on highest priority failing constraint\r\n    priorityEnabled: true,\r\n\r\n    // ### Field only\r\n\r\n    // identifier used to group together inputs (e.g. radio buttons...)\r\n    multiple: null,\r\n\r\n    // identifier (or array of identifiers) used to validate only a select group of inputs\r\n    group: null,\r\n\r\n    // ### UI\r\n    // Enable\\Disable error messages\r\n    uiEnabled: true,\r\n\r\n    // Key events threshold before validation\r\n    validationThreshold: 3,\r\n\r\n    // Focused field on form validation error. 'first'|'last'|'none'\r\n    focus: 'first',\r\n\r\n    // event(s) that will trigger validation before first failure. eg: `input`...\r\n    trigger: false,\r\n\r\n    // event(s) that will trigger validation after first failure.\r\n    triggerAfterFailure: 'input',\r\n\r\n    // Class that would be added on every failing validation Parsley field\r\n    errorClass: 'parsley-error',\r\n\r\n    // Same for success validation\r\n    successClass: 'parsley-success',\r\n\r\n    // Return the `$element` that will receive these above success or error classes\r\n    // Could also be (and given directly from DOM) a valid selector like `'#div'`\r\n    classHandler: function (ParsleyField) {},\r\n\r\n    // Return the `$element` where errors will be appended\r\n    // Could also be (and given directly from DOM) a valid selector like `'#div'`\r\n    errorsContainer: function (ParsleyField) {},\r\n\r\n    // ul elem that would receive errors' list\r\n    errorsWrapper: '<ul class=\"parsley-errors-list\"></ul>',\r\n\r\n    // li elem that would receive error message\r\n    errorTemplate: '<li></li>'\r\n  };\n\n  var ParsleyAbstract = function () {};\r\n\r\n  ParsleyAbstract.prototype = {\r\n    asyncSupport: true, // Deprecated\r\n\r\n    actualizeOptions: function () {\r\n      ParsleyUtils__default.attr(this.$element, this.options.namespace, this.domOptions);\r\n      if (this.parent && this.parent.actualizeOptions)\r\n        this.parent.actualizeOptions();\r\n      return this;\r\n    },\r\n\r\n    _resetOptions: function (initOptions) {\r\n      this.domOptions = ParsleyUtils__default.objectCreate(this.parent.options);\r\n      this.options = ParsleyUtils__default.objectCreate(this.domOptions);\r\n      // Shallow copy of ownProperties of initOptions:\r\n      for (var i in initOptions) {\r\n        if (initOptions.hasOwnProperty(i))\r\n          this.options[i] = initOptions[i];\r\n      }\r\n      this.actualizeOptions();\r\n    },\r\n\r\n    _listeners: null,\r\n\r\n    // Register a callback for the given event name\r\n    // Callback is called with context as the first argument and the `this`\r\n    // The context is the current parsley instance, or window.Parsley if global\r\n    // A return value of `false` will interrupt the calls\r\n    on: function (name, fn) {\r\n      this._listeners = this._listeners || {};\r\n      var queue = this._listeners[name] = this._listeners[name] || [];\r\n      queue.push(fn);\r\n\r\n      return this;\r\n    },\r\n\r\n    // Deprecated. Use `on` instead\r\n    subscribe: function(name, fn) {\r\n      $.listenTo(this, name.toLowerCase(), fn);\r\n    },\r\n\r\n    // Unregister a callback (or all if none is given) for the given event name\r\n    off: function (name, fn) {\r\n      var queue = this._listeners && this._listeners[name];\r\n      if (queue) {\r\n        if (!fn) {\r\n          delete this._listeners[name];\r\n        } else {\r\n          for (var i = queue.length; i--; )\r\n            if (queue[i] === fn)\r\n              queue.splice(i, 1);\r\n        }\r\n      }\r\n      return this;\r\n    },\r\n\r\n    // Deprecated. Use `off`\r\n    unsubscribe: function(name, fn) {\r\n      $.unsubscribeTo(this, name.toLowerCase());\r\n    },\r\n\r\n    // Trigger an event of the given name\r\n    // A return value of `false` interrupts the callback chain\r\n    // Returns false if execution was interrupted\r\n    trigger: function (name, target, extraArg) {\r\n      target = target || this;\r\n      var queue = this._listeners && this._listeners[name];\r\n      var result;\r\n      var parentResult;\r\n      if (queue) {\r\n        for (var i = queue.length; i--; ) {\r\n          result = queue[i].call(target, target, extraArg);\r\n          if (result === false) return result;\r\n        }\r\n      }\r\n      if (this.parent) {\r\n        return this.parent.trigger(name, target, extraArg);\r\n      }\r\n      return true;\r\n    },\r\n\r\n    // Reset UI\r\n    reset: function () {\r\n      // Field case: just emit a reset event for UI\r\n      if ('ParsleyForm' !== this.__class__) {\r\n        this._resetUI();\r\n        return this._trigger('reset');\r\n      }\r\n\r\n      // Form case: emit a reset event for each field\r\n      for (var i = 0; i < this.fields.length; i++)\r\n        this.fields[i].reset();\r\n\r\n      this._trigger('reset');\r\n    },\r\n\r\n    // Destroy Parsley instance (+ UI)\r\n    destroy: function () {\r\n      // Field case: emit destroy event to clean UI and then destroy stored instance\r\n      this._destroyUI();\r\n      if ('ParsleyForm' !== this.__class__) {\r\n        this.$element.removeData('Parsley');\r\n        this.$element.removeData('ParsleyFieldMultiple');\r\n        this._trigger('destroy');\r\n\r\n        return;\r\n      }\r\n\r\n      // Form case: destroy all its fields and then destroy stored instance\r\n      for (var i = 0; i < this.fields.length; i++)\r\n        this.fields[i].destroy();\r\n\r\n      this.$element.removeData('Parsley');\r\n      this._trigger('destroy');\r\n    },\r\n\r\n    asyncIsValid: function (group, force) {\r\n      ParsleyUtils__default.warnOnce(\"asyncIsValid is deprecated; please use whenValid instead\");\r\n      return this.whenValid({group, force});\r\n    },\r\n\r\n    _findRelated: function () {\r\n      return this.options.multiple ?\r\n        this.parent.$element.find(`[${this.options.namespace}multiple=\"${this.options.multiple}\"]`)\r\n      : this.$element;\r\n    }\r\n  };\n\n  var requirementConverters = {\r\n    string: function(string) {\r\n      return string;\r\n    },\r\n    integer: function(string) {\r\n      if (isNaN(string))\r\n        throw 'Requirement is not an integer: \"' + string + '\"';\r\n      return parseInt(string, 10);\r\n    },\r\n    number: function(string) {\r\n      if (isNaN(string))\r\n        throw 'Requirement is not a number: \"' + string + '\"';\r\n      return parseFloat(string);\r\n    },\r\n    reference: function(string) { // Unused for now\r\n      var result = $(string);\r\n      if (result.length === 0)\r\n        throw 'No such reference: \"' + string + '\"';\r\n      return result;\r\n    },\r\n    boolean: function(string) {\r\n      return string !== 'false';\r\n    },\r\n    object: function(string) {\r\n      return ParsleyUtils__default.deserializeValue(string);\r\n    },\r\n    regexp: function(regexp) {\r\n      var flags = '';\r\n\r\n      // Test if RegExp is literal, if not, nothing to be done, otherwise, we need to isolate flags and pattern\r\n      if (/^\\/.*\\/(?:[gimy]*)$/.test(regexp)) {\r\n        // Replace the regexp literal string with the first match group: ([gimy]*)\r\n        // If no flag is present, this will be a blank string\r\n        flags = regexp.replace(/.*\\/([gimy]*)$/, '$1');\r\n        // Again, replace the regexp literal string with the first match group:\r\n        // everything excluding the opening and closing slashes and the flags\r\n        regexp = regexp.replace(new RegExp('^/(.*?)/' + flags + '$'), '$1');\r\n      } else {\r\n        // Anchor regexp:\r\n        regexp = '^' + regexp + '$';\r\n      }\r\n      return new RegExp(regexp, flags);\r\n    }\r\n  };\r\n\r\n  var convertArrayRequirement = function(string, length) {\r\n    var m = string.match(/^\\s*\\[(.*)\\]\\s*$/);\r\n    if (!m)\r\n      throw 'Requirement is not an array: \"' + string + '\"';\r\n    var values = m[1].split(',').map(ParsleyUtils__default.trimString);\r\n    if (values.length !== length)\r\n      throw 'Requirement has ' + values.length + ' values when ' + length + ' are needed';\r\n    return values;\r\n  };\r\n\r\n  var convertRequirement = function(requirementType, string) {\r\n    var converter = requirementConverters[requirementType || 'string'];\r\n    if (!converter)\r\n      throw 'Unknown requirement specification: \"' + requirementType + '\"';\r\n    return converter(string);\r\n  };\r\n\r\n  var convertExtraOptionRequirement = function(requirementSpec, string, extraOptionReader) {\r\n    var main = null;\r\n    var extra = {};\r\n    for (var key in requirementSpec) {\r\n      if (key) {\r\n        var value = extraOptionReader(key);\r\n        if ('string' === typeof value)\r\n          value = convertRequirement(requirementSpec[key], value);\r\n        extra[key] = value;\r\n      } else {\r\n        main = convertRequirement(requirementSpec[key], string);\r\n      }\r\n    }\r\n    return [main, extra];\r\n  };\r\n\r\n  // A Validator needs to implement the methods `validate` and `parseRequirements`\r\n\r\n  var ParsleyValidator = function(spec) {\r\n    $.extend(true, this, spec);\r\n  };\r\n\r\n  ParsleyValidator.prototype = {\r\n    // Returns `true` iff the given `value` is valid according the given requirements.\r\n    validate: function(value, requirementFirstArg) {\r\n      if (this.fn) { // Legacy style validator\r\n\r\n        if (arguments.length > 3)  // If more args then value, requirement, instance...\r\n          requirementFirstArg = [].slice.call(arguments, 1, -1);  // Skip first arg (value) and last (instance), combining the rest\r\n        return this.fn.call(this, value, requirementFirstArg);\r\n      }\r\n\r\n      if ($.isArray(value)) {\r\n        if (!this.validateMultiple)\r\n          throw 'Validator `' + this.name + '` does not handle multiple values';\r\n        return this.validateMultiple(...arguments);\r\n      } else {\r\n        if (this.validateNumber) {\r\n          if (isNaN(value))\r\n            return false;\r\n          arguments[0] = parseFloat(arguments[0]);\r\n          return this.validateNumber(...arguments);\r\n        }\r\n        if (this.validateString) {\r\n          return this.validateString(...arguments);\r\n        }\r\n        throw 'Validator `' + this.name + '` only handles multiple values';\r\n      }\r\n    },\r\n\r\n    // Parses `requirements` into an array of arguments,\r\n    // according to `this.requirementType`\r\n    parseRequirements: function(requirements, extraOptionReader) {\r\n      if ('string' !== typeof requirements) {\r\n        // Assume requirement already parsed\r\n        // but make sure we return an array\r\n        return $.isArray(requirements) ? requirements : [requirements];\r\n      }\r\n      var type = this.requirementType;\r\n      if ($.isArray(type)) {\r\n        var values = convertArrayRequirement(requirements, type.length);\r\n        for (var i = 0; i < values.length; i++)\r\n          values[i] = convertRequirement(type[i], values[i]);\r\n        return values;\r\n      } else if ($.isPlainObject(type)) {\r\n        return convertExtraOptionRequirement(type, requirements, extraOptionReader);\r\n      } else {\r\n        return [convertRequirement(type, requirements)];\r\n      }\r\n    },\r\n    // Defaults:\r\n    requirementType: 'string',\r\n\r\n    priority: 2\r\n\r\n  };\n\n  var ParsleyValidatorRegistry = function (validators, catalog) {\r\n    this.__class__ = 'ParsleyValidatorRegistry';\r\n\r\n    // Default Parsley locale is en\r\n    this.locale = 'en';\r\n\r\n    this.init(validators || {}, catalog || {});\r\n  };\r\n\r\n  var typeRegexes =  {\r\n    email: /^((([a-z]|\\d|[!#\\$%&'\\*\\+\\-\\/=\\?\\^_`{\\|}~]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])+(\\.([a-z]|\\d|[!#\\$%&'\\*\\+\\-\\/=\\?\\^_`{\\|}~]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])+)*)|((\\x22)((((\\x20|\\x09)*(\\x0d\\x0a))?(\\x20|\\x09)+)?(([\\x01-\\x08\\x0b\\x0c\\x0e-\\x1f\\x7f]|\\x21|[\\x23-\\x5b]|[\\x5d-\\x7e]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])|(\\\\([\\x01-\\x09\\x0b\\x0c\\x0d-\\x7f]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF]))))*(((\\x20|\\x09)*(\\x0d\\x0a))?(\\x20|\\x09)+)?(\\x22)))@((([a-z]|\\d|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])|(([a-z]|\\d|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])([a-z]|\\d|-|\\.|_|~|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])*([a-z]|\\d|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])))\\.)+(([a-z]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])|(([a-z]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])([a-z]|\\d|-|\\.|_|~|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])*([a-z]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])))$/i,\r\n\r\n    // Follow https://www.w3.org/TR/html5/infrastructure.html#floating-point-numbers\r\n    number: /^-?(\\d*\\.)?\\d+(e[-+]?\\d+)?$/i,\r\n\r\n    integer: /^-?\\d+$/,\r\n\r\n    digits: /^\\d+$/,\r\n\r\n    alphanum: /^\\w+$/i,\r\n\r\n    url: new RegExp(\r\n        \"^\" +\r\n          // protocol identifier\r\n          \"(?:(?:https?|ftp)://)?\" + // ** mod: make scheme optional\r\n          // user:pass authentication\r\n          \"(?:\\\\S+(?::\\\\S*)?@)?\" +\r\n          \"(?:\" +\r\n            // IP address exclusion\r\n            // private & local networks\r\n            // \"(?!(?:10|127)(?:\\\\.\\\\d{1,3}){3})\" +   // ** mod: allow local networks\r\n            // \"(?!(?:169\\\\.254|192\\\\.168)(?:\\\\.\\\\d{1,3}){2})\" +  // ** mod: allow local networks\r\n            // \"(?!172\\\\.(?:1[6-9]|2\\\\d|3[0-1])(?:\\\\.\\\\d{1,3}){2})\" +  // ** mod: allow local networks\r\n            // IP address dotted notation octets\r\n            // excludes loopback network 0.0.0.0\r\n            // excludes reserved space >= 224.0.0.0\r\n            // excludes network & broacast addresses\r\n            // (first & last IP address of each class)\r\n            \"(?:[1-9]\\\\d?|1\\\\d\\\\d|2[01]\\\\d|22[0-3])\" +\r\n            \"(?:\\\\.(?:1?\\\\d{1,2}|2[0-4]\\\\d|25[0-5])){2}\" +\r\n            \"(?:\\\\.(?:[1-9]\\\\d?|1\\\\d\\\\d|2[0-4]\\\\d|25[0-4]))\" +\r\n          \"|\" +\r\n            // host name\r\n            \"(?:(?:[a-z\\\\u00a1-\\\\uffff0-9]-*)*[a-z\\\\u00a1-\\\\uffff0-9]+)\" +\r\n            // domain name\r\n            \"(?:\\\\.(?:[a-z\\\\u00a1-\\\\uffff0-9]-*)*[a-z\\\\u00a1-\\\\uffff0-9]+)*\" +\r\n            // TLD identifier\r\n            \"(?:\\\\.(?:[a-z\\\\u00a1-\\\\uffff]{2,}))\" +\r\n          \")\" +\r\n          // port number\r\n          \"(?::\\\\d{2,5})?\" +\r\n          // resource path\r\n          \"(?:/\\\\S*)?\" +\r\n        \"$\", 'i'\r\n      )\r\n  };\r\n  typeRegexes.range = typeRegexes.number;\r\n\r\n  // See http://stackoverflow.com/a/10454560/8279\r\n  var decimalPlaces = num => {\r\n    var match = ('' + num).match(/(?:\\.(\\d+))?(?:[eE]([+-]?\\d+))?$/);\r\n    if (!match) { return 0; }\r\n    return Math.max(\r\n         0,\r\n         // Number of digits right of decimal point.\r\n         (match[1] ? match[1].length : 0) -\r\n         // Adjust for scientific notation.\r\n         (match[2] ? +match[2] : 0));\r\n  };\r\n\r\n  ParsleyValidatorRegistry.prototype = {\r\n    init: function (validators, catalog) {\r\n      this.catalog = catalog;\r\n      // Copy prototype's validators:\r\n      this.validators = $.extend({}, this.validators);\r\n\r\n      for (var name in validators)\r\n        this.addValidator(name, validators[name].fn, validators[name].priority);\r\n\r\n      window.Parsley.trigger('parsley:validator:init');\r\n    },\r\n\r\n    // Set new messages locale if we have dictionary loaded in ParsleyConfig.i18n\r\n    setLocale: function (locale) {\r\n      if ('undefined' === typeof this.catalog[locale])\r\n        throw new Error(locale + ' is not available in the catalog');\r\n\r\n      this.locale = locale;\r\n\r\n      return this;\r\n    },\r\n\r\n    // Add a new messages catalog for a given locale. Set locale for this catalog if set === `true`\r\n    addCatalog: function (locale, messages, set) {\r\n      if ('object' === typeof messages)\r\n        this.catalog[locale] = messages;\r\n\r\n      if (true === set)\r\n        return this.setLocale(locale);\r\n\r\n      return this;\r\n    },\r\n\r\n    // Add a specific message for a given constraint in a given locale\r\n    addMessage: function (locale, name, message) {\r\n      if ('undefined' === typeof this.catalog[locale])\r\n        this.catalog[locale] = {};\r\n\r\n      this.catalog[locale][name] = message;\r\n\r\n      return this;\r\n    },\r\n\r\n    // Add messages for a given locale\r\n    addMessages: function (locale, nameMessageObject) {\r\n      for (var name in nameMessageObject)\r\n        this.addMessage(locale, name, nameMessageObject[name]);\r\n\r\n      return this;\r\n    },\r\n\r\n    // Add a new validator\r\n    //\r\n    //    addValidator('custom', {\r\n    //        requirementType: ['integer', 'integer'],\r\n    //        validateString: function(value, from, to) {},\r\n    //        priority: 22,\r\n    //        messages: {\r\n    //          en: \"Hey, that's no good\",\r\n    //          fr: \"Aye aye, pas bon du tout\",\r\n    //        }\r\n    //    })\r\n    //\r\n    // Old API was addValidator(name, function, priority)\r\n    //\r\n    addValidator: function (name, arg1, arg2) {\r\n      if (this.validators[name])\r\n        ParsleyUtils__default.warn('Validator \"' + name + '\" is already defined.');\r\n      else if (ParsleyDefaults.hasOwnProperty(name)) {\r\n        ParsleyUtils__default.warn('\"' + name + '\" is a restricted keyword and is not a valid validator name.');\r\n        return;\r\n      }\r\n      return this._setValidator(...arguments);\r\n    },\r\n\r\n    updateValidator: function (name, arg1, arg2) {\r\n      if (!this.validators[name]) {\r\n        ParsleyUtils__default.warn('Validator \"' + name + '\" is not already defined.');\r\n        return this.addValidator(...arguments);\r\n      }\r\n      return this._setValidator(this, arguments);\r\n    },\r\n\r\n    removeValidator: function (name) {\r\n      if (!this.validators[name])\r\n        ParsleyUtils__default.warn('Validator \"' + name + '\" is not defined.');\r\n\r\n      delete this.validators[name];\r\n\r\n      return this;\r\n    },\r\n\r\n    _setValidator: function (name, validator, priority) {\r\n      if ('object' !== typeof validator) {\r\n        // Old style validator, with `fn` and `priority`\r\n        validator = {\r\n          fn: validator,\r\n          priority: priority\r\n        };\r\n      }\r\n      if (!validator.validate) {\r\n        validator = new ParsleyValidator(validator);\r\n      }\r\n      this.validators[name] = validator;\r\n\r\n      for (var locale in validator.messages || {})\r\n        this.addMessage(locale, name, validator.messages[locale]);\r\n\r\n      return this;\r\n    },\r\n\r\n    getErrorMessage: function (constraint) {\r\n      var message;\r\n\r\n      // Type constraints are a bit different, we have to match their requirements too to find right error message\r\n      if ('type' === constraint.name) {\r\n        var typeMessages = this.catalog[this.locale][constraint.name] || {};\r\n        message = typeMessages[constraint.requirements];\r\n      } else\r\n        message = this.formatMessage(this.catalog[this.locale][constraint.name], constraint.requirements);\r\n\r\n      return message || this.catalog[this.locale].defaultMessage || this.catalog.en.defaultMessage;\r\n    },\r\n\r\n    // Kind of light `sprintf()` implementation\r\n    formatMessage: function (string, parameters) {\r\n      if ('object' === typeof parameters) {\r\n        for (var i in parameters)\r\n          string = this.formatMessage(string, parameters[i]);\r\n\r\n        return string;\r\n      }\r\n\r\n      return 'string' === typeof string ? string.replace(/%s/i, parameters) : '';\r\n    },\r\n\r\n    // Here is the Parsley default validators list.\r\n    // A validator is an object with the following key values:\r\n    //  - priority: an integer\r\n    //  - requirement: 'string' (default), 'integer', 'number', 'regexp' or an Array of these\r\n    //  - validateString, validateMultiple, validateNumber: functions returning `true`, `false` or a promise\r\n    // Alternatively, a validator can be a function that returns such an object\r\n    //\r\n    validators: {\r\n      notblank: {\r\n        validateString: function(value) {\r\n          return /\\S/.test(value);\r\n        },\r\n        priority: 2\r\n      },\r\n      required: {\r\n        validateMultiple: function(values) {\r\n          return values.length > 0;\r\n        },\r\n        validateString: function(value) {\r\n          return /\\S/.test(value);\r\n        },\r\n        priority: 512\r\n      },\r\n      type: {\r\n        validateString: function(value, type, {step = '1', base = 0} = {}) {\r\n          var regex = typeRegexes[type];\r\n          if (!regex) {\r\n            throw new Error('validator type `' + type + '` is not supported');\r\n          }\r\n          if (!regex.test(value))\r\n            return false;\r\n          if ('number' === type) {\r\n            if (!/^any$/i.test(step || '')) {\r\n              var nb = Number(value);\r\n              var decimals = Math.max(decimalPlaces(step), decimalPlaces(base));\r\n              if (decimalPlaces(nb) > decimals) // Value can't have too many decimals\r\n                return false;\r\n              // Be careful of rounding errors by using integers.\r\n              var toInt = f => { return Math.round(f * Math.pow(10, decimals)); };\r\n              if ((toInt(nb) - toInt(base)) % toInt(step) != 0)\r\n                return false;\r\n            }\r\n          }\r\n          return true;\r\n        },\r\n        requirementType: {\r\n          '': 'string',\r\n          step: 'string',\r\n          base: 'number'\r\n        },\r\n        priority: 256\r\n      },\r\n      pattern: {\r\n        validateString: function(value, regexp) {\r\n          return regexp.test(value);\r\n        },\r\n        requirementType: 'regexp',\r\n        priority: 64\r\n      },\r\n      minlength: {\r\n        validateString: function (value, requirement) {\r\n          return value.length >= requirement;\r\n        },\r\n        requirementType: 'integer',\r\n        priority: 30\r\n      },\r\n      maxlength: {\r\n        validateString: function (value, requirement) {\r\n          return value.length <= requirement;\r\n        },\r\n        requirementType: 'integer',\r\n        priority: 30\r\n      },\r\n      length: {\r\n        validateString: function (value, min, max) {\r\n          return value.length >= min && value.length <= max;\r\n        },\r\n        requirementType: ['integer', 'integer'],\r\n        priority: 30\r\n      },\r\n      mincheck: {\r\n        validateMultiple: function (values, requirement) {\r\n          return values.length >= requirement;\r\n        },\r\n        requirementType: 'integer',\r\n        priority: 30\r\n      },\r\n      maxcheck: {\r\n        validateMultiple: function (values, requirement) {\r\n          return values.length <= requirement;\r\n        },\r\n        requirementType: 'integer',\r\n        priority: 30\r\n      },\r\n      check: {\r\n        validateMultiple: function (values, min, max) {\r\n          return values.length >= min && values.length <= max;\r\n        },\r\n        requirementType: ['integer', 'integer'],\r\n        priority: 30\r\n      },\r\n      min: {\r\n        validateNumber: function (value, requirement) {\r\n          return value >= requirement;\r\n        },\r\n        requirementType: 'number',\r\n        priority: 30\r\n      },\r\n      max: {\r\n        validateNumber: function (value, requirement) {\r\n          return value <= requirement;\r\n        },\r\n        requirementType: 'number',\r\n        priority: 30\r\n      },\r\n      range: {\r\n        validateNumber: function (value, min, max) {\r\n          return value >= min && value <= max;\r\n        },\r\n        requirementType: ['number', 'number'],\r\n        priority: 30\r\n      },\r\n      equalto: {\r\n        validateString: function (value, refOrValue) {\r\n          var $reference = $(refOrValue);\r\n          if ($reference.length)\r\n            return value === $reference.val();\r\n          else\r\n            return value === refOrValue;\r\n        },\r\n        priority: 256\r\n      }\r\n    }\r\n  };\n\n  var ParsleyUI = {};\r\n\r\n  var diffResults = function (newResult, oldResult, deep) {\r\n    var added = [];\r\n    var kept = [];\r\n\r\n    for (var i = 0; i < newResult.length; i++) {\r\n      var found = false;\r\n\r\n      for (var j = 0; j < oldResult.length; j++)\r\n        if (newResult[i].assert.name === oldResult[j].assert.name) {\r\n          found = true;\r\n          break;\r\n        }\r\n\r\n      if (found)\r\n        kept.push(newResult[i]);\r\n      else\r\n        added.push(newResult[i]);\r\n    }\r\n\r\n    return {\r\n      kept: kept,\r\n      added: added,\r\n      removed: !deep ? diffResults(oldResult, newResult, true).added : []\r\n    };\r\n  };\r\n\r\n  ParsleyUI.Form = {\r\n\r\n    _actualizeTriggers: function () {\r\n      this.$element.on('submit.Parsley', evt => { this.onSubmitValidate(evt); });\r\n      this.$element.on('click.Parsley', 'input[type=\"submit\"], button[type=\"submit\"]', evt => { this.onSubmitButton(evt); });\r\n\r\n      // UI could be disabled\r\n      if (false === this.options.uiEnabled)\r\n        return;\r\n\r\n      this.$element.attr('novalidate', '');\r\n    },\r\n\r\n    focus: function () {\r\n      this._focusedField = null;\r\n\r\n      if (true === this.validationResult || 'none' === this.options.focus)\r\n        return null;\r\n\r\n      for (var i = 0; i < this.fields.length; i++) {\r\n        var field = this.fields[i];\r\n        if (true !== field.validationResult && field.validationResult.length > 0 && 'undefined' === typeof field.options.noFocus) {\r\n          this._focusedField = field.$element;\r\n          if ('first' === this.options.focus)\r\n            break;\r\n        }\r\n      }\r\n\r\n      if (null === this._focusedField)\r\n        return null;\r\n\r\n      return this._focusedField.focus();\r\n    },\r\n\r\n    _destroyUI: function () {\r\n      // Reset all event listeners\r\n      this.$element.off('.Parsley');\r\n    }\r\n\r\n  };\r\n\r\n  ParsleyUI.Field = {\r\n\r\n    _reflowUI: function () {\r\n      this._buildUI();\r\n\r\n      // If this field doesn't have an active UI don't bother doing something\r\n      if (!this._ui)\r\n        return;\r\n\r\n      // Diff between two validation results\r\n      var diff = diffResults(this.validationResult, this._ui.lastValidationResult);\r\n\r\n      // Then store current validation result for next reflow\r\n      this._ui.lastValidationResult = this.validationResult;\r\n\r\n      // Handle valid / invalid / none field class\r\n      this._manageStatusClass();\r\n\r\n      // Add, remove, updated errors messages\r\n      this._manageErrorsMessages(diff);\r\n\r\n      // Triggers impl\r\n      this._actualizeTriggers();\r\n\r\n      // If field is not valid for the first time, bind keyup trigger to ease UX and quickly inform user\r\n      if ((diff.kept.length || diff.added.length) && !this._failedOnce) {\r\n        this._failedOnce = true;\r\n        this._actualizeTriggers();\r\n      }\r\n    },\r\n\r\n    // Returns an array of field's error message(s)\r\n    getErrorsMessages: function () {\r\n      // No error message, field is valid\r\n      if (true === this.validationResult)\r\n        return [];\r\n\r\n      var messages = [];\r\n\r\n      for (var i = 0; i < this.validationResult.length; i++)\r\n        messages.push(this.validationResult[i].errorMessage ||\r\n         this._getErrorMessage(this.validationResult[i].assert));\r\n\r\n      return messages;\r\n    },\r\n\r\n    // It's a goal of Parsley that this method is no longer required [#1073]\r\n    addError: function (name, {message, assert, updateClass = true} = {}) {\r\n      this._buildUI();\r\n      this._addError(name, {message, assert});\r\n\r\n      if (updateClass)\r\n        this._errorClass();\r\n    },\r\n\r\n    // It's a goal of Parsley that this method is no longer required [#1073]\r\n    updateError: function (name, {message, assert, updateClass = true} = {}) {\r\n      this._buildUI();\r\n      this._updateError(name, {message, assert});\r\n\r\n      if (updateClass)\r\n        this._errorClass();\r\n    },\r\n\r\n    // It's a goal of Parsley that this method is no longer required [#1073]\r\n    removeError: function (name, {updateClass = true} = {}) {\r\n      this._buildUI();\r\n      this._removeError(name);\r\n\r\n      // edge case possible here: remove a standard Parsley error that is still failing in this.validationResult\r\n      // but highly improbable cuz' manually removing a well Parsley handled error makes no sense.\r\n      if (updateClass)\r\n        this._manageStatusClass();\r\n    },\r\n\r\n    _manageStatusClass: function () {\r\n      if (this.hasConstraints() && this.needsValidation() && true === this.validationResult)\r\n        this._successClass();\r\n      else if (this.validationResult.length > 0)\r\n        this._errorClass();\r\n      else\r\n        this._resetClass();\r\n    },\r\n\r\n    _manageErrorsMessages: function (diff) {\r\n      if ('undefined' !== typeof this.options.errorsMessagesDisabled)\r\n        return;\r\n\r\n      // Case where we have errorMessage option that configure an unique field error message, regardless failing validators\r\n      if ('undefined' !== typeof this.options.errorMessage) {\r\n        if ((diff.added.length || diff.kept.length)) {\r\n          this._insertErrorWrapper();\r\n\r\n          if (0 === this._ui.$errorsWrapper.find('.parsley-custom-error-message').length)\r\n            this._ui.$errorsWrapper\r\n              .append(\r\n                $(this.options.errorTemplate)\r\n                .addClass('parsley-custom-error-message')\r\n              );\r\n\r\n          return this._ui.$errorsWrapper\r\n            .addClass('filled')\r\n            .find('.parsley-custom-error-message')\r\n            .html(this.options.errorMessage);\r\n        }\r\n\r\n        return this._ui.$errorsWrapper\r\n          .removeClass('filled')\r\n          .find('.parsley-custom-error-message')\r\n          .remove();\r\n      }\r\n\r\n      // Show, hide, update failing constraints messages\r\n      for (var i = 0; i < diff.removed.length; i++)\r\n        this._removeError(diff.removed[i].assert.name);\r\n\r\n      for (i = 0; i < diff.added.length; i++)\r\n        this._addError(diff.added[i].assert.name, {message: diff.added[i].errorMessage, assert: diff.added[i].assert});\r\n\r\n      for (i = 0; i < diff.kept.length; i++)\r\n        this._updateError(diff.kept[i].assert.name, {message: diff.kept[i].errorMessage, assert: diff.kept[i].assert});\r\n    },\r\n\r\n\r\n    _addError: function (name, {message, assert}) {\r\n      this._insertErrorWrapper();\r\n      this._ui.$errorsWrapper\r\n        .addClass('filled')\r\n        .append(\r\n          $(this.options.errorTemplate)\r\n          .addClass('parsley-' + name)\r\n          .html(message || this._getErrorMessage(assert))\r\n        );\r\n    },\r\n\r\n    _updateError: function (name, {message, assert}) {\r\n      this._ui.$errorsWrapper\r\n        .addClass('filled')\r\n        .find('.parsley-' + name)\r\n        .html(message || this._getErrorMessage(assert));\r\n    },\r\n\r\n    _removeError: function (name) {\r\n      this._ui.$errorsWrapper\r\n        .removeClass('filled')\r\n        .find('.parsley-' + name)\r\n        .remove();\r\n    },\r\n\r\n    _getErrorMessage: function (constraint) {\r\n      var customConstraintErrorMessage = constraint.name + 'Message';\r\n\r\n      if ('undefined' !== typeof this.options[customConstraintErrorMessage])\r\n        return window.Parsley.formatMessage(this.options[customConstraintErrorMessage], constraint.requirements);\r\n\r\n      return window.Parsley.getErrorMessage(constraint);\r\n    },\r\n\r\n    _buildUI: function () {\r\n      // UI could be already built or disabled\r\n      if (this._ui || false === this.options.uiEnabled)\r\n        return;\r\n\r\n      var _ui = {};\r\n\r\n      // Give field its Parsley id in DOM\r\n      this.$element.attr(this.options.namespace + 'id', this.__id__);\r\n\r\n      /** Generate important UI elements and store them in this **/\r\n      // $errorClassHandler is the $element that woul have parsley-error and parsley-success classes\r\n      _ui.$errorClassHandler = this._manageClassHandler();\r\n\r\n      // $errorsWrapper is a div that would contain the various field errors, it will be appended into $errorsContainer\r\n      _ui.errorsWrapperId = 'parsley-id-' + (this.options.multiple ? 'multiple-' + this.options.multiple : this.__id__);\r\n      _ui.$errorsWrapper = $(this.options.errorsWrapper).attr('id', _ui.errorsWrapperId);\r\n\r\n      // ValidationResult UI storage to detect what have changed bwt two validations, and update DOM accordingly\r\n      _ui.lastValidationResult = [];\r\n      _ui.validationInformationVisible = false;\r\n\r\n      // Store it in this for later\r\n      this._ui = _ui;\r\n    },\r\n\r\n    // Determine which element will have `parsley-error` and `parsley-success` classes\r\n    _manageClassHandler: function () {\r\n      // An element selector could be passed through DOM with `data-parsley-class-handler=#foo`\r\n      if ('string' === typeof this.options.classHandler && $(this.options.classHandler).length)\r\n        return $(this.options.classHandler);\r\n\r\n      // Class handled could also be determined by function given in Parsley options\r\n      var $handler = this.options.classHandler.call(this, this);\r\n\r\n      // If this function returned a valid existing DOM element, go for it\r\n      if ('undefined' !== typeof $handler && $handler.length)\r\n        return $handler;\r\n\r\n      // Otherwise, if simple element (input, texatrea, select...) it will perfectly host the classes\r\n      if (!this.options.multiple || this.$element.is('select'))\r\n        return this.$element;\r\n\r\n      // But if multiple element (radio, checkbox), that would be their parent\r\n      return this.$element.parent();\r\n    },\r\n\r\n    _insertErrorWrapper: function () {\r\n      var $errorsContainer;\r\n\r\n      // Nothing to do if already inserted\r\n      if (0 !== this._ui.$errorsWrapper.parent().length)\r\n        return this._ui.$errorsWrapper.parent();\r\n\r\n      if ('string' === typeof this.options.errorsContainer) {\r\n        if ($(this.options.errorsContainer).length)\r\n          return $(this.options.errorsContainer).append(this._ui.$errorsWrapper);\r\n        else\r\n          ParsleyUtils__default.warn('The errors container `' + this.options.errorsContainer + '` does not exist in DOM');\r\n      } else if ('function' === typeof this.options.errorsContainer)\r\n        $errorsContainer = this.options.errorsContainer.call(this, this);\r\n\r\n      if ('undefined' !== typeof $errorsContainer && $errorsContainer.length)\r\n        return $errorsContainer.append(this._ui.$errorsWrapper);\r\n\r\n      var $from = this.$element;\r\n      if (this.options.multiple)\r\n        $from = $from.parent();\r\n      return $from.after(this._ui.$errorsWrapper);\r\n    },\r\n\r\n    _actualizeTriggers: function () {\r\n      var $toBind = this._findRelated();\r\n\r\n      // Remove Parsley events already bound on this field\r\n      $toBind.off('.Parsley');\r\n      if (this._failedOnce)\r\n        $toBind.on(ParsleyUtils__default.namespaceEvents(this.options.triggerAfterFailure, 'Parsley'), () => {\r\n          this.validate();\r\n        });\r\n      else {\r\n        $toBind.on(ParsleyUtils__default.namespaceEvents(this.options.trigger, 'Parsley'), event => {\r\n          this._eventValidate(event);\r\n        });\r\n      }\r\n    },\r\n\r\n    _eventValidate: function (event) {\r\n      // For keyup, keypress, keydown, input... events that could be a little bit obstrusive\r\n      // do not validate if val length < min threshold on first validation. Once field have been validated once and info\r\n      // about success or failure have been displayed, always validate with this trigger to reflect every yalidation change.\r\n      if (/key|input/.test(event.type))\r\n        if (!(this._ui && this._ui.validationInformationVisible) && this.getValue().length <= this.options.validationThreshold)\r\n          return;\r\n\r\n      this.validate();\r\n    },\r\n\r\n    _resetUI: function () {\r\n      // Reset all event listeners\r\n      this._failedOnce = false;\r\n      this._actualizeTriggers();\r\n\r\n      // Nothing to do if UI never initialized for this field\r\n      if ('undefined' === typeof this._ui)\r\n        return;\r\n\r\n      // Reset all errors' li\r\n      this._ui.$errorsWrapper\r\n        .removeClass('filled')\r\n        .children()\r\n        .remove();\r\n\r\n      // Reset validation class\r\n      this._resetClass();\r\n\r\n      // Reset validation flags and last validation result\r\n      this._ui.lastValidationResult = [];\r\n      this._ui.validationInformationVisible = false;\r\n    },\r\n\r\n    _destroyUI: function () {\r\n      this._resetUI();\r\n\r\n      if ('undefined' !== typeof this._ui)\r\n        this._ui.$errorsWrapper.remove();\r\n\r\n      delete this._ui;\r\n    },\r\n\r\n    _successClass: function () {\r\n      this._ui.validationInformationVisible = true;\r\n      this._ui.$errorClassHandler.removeClass(this.options.errorClass).addClass(this.options.successClass);\r\n    },\r\n    _errorClass: function () {\r\n      this._ui.validationInformationVisible = true;\r\n      this._ui.$errorClassHandler.removeClass(this.options.successClass).addClass(this.options.errorClass);\r\n    },\r\n    _resetClass: function () {\r\n      this._ui.$errorClassHandler.removeClass(this.options.successClass).removeClass(this.options.errorClass);\r\n    }\r\n  };\n\n  var ParsleyForm = function (element, domOptions, options) {\r\n    this.__class__ = 'ParsleyForm';\r\n    this.__id__ = ParsleyUtils__default.generateID();\r\n\r\n    this.$element = $(element);\r\n    this.domOptions = domOptions;\r\n    this.options = options;\r\n    this.parent = window.Parsley;\r\n\r\n    this.fields = [];\r\n    this.validationResult = null;\r\n  };\r\n\r\n  var ParsleyForm__statusMapping = {pending: null, resolved: true, rejected: false};\r\n\r\n  ParsleyForm.prototype = {\r\n    onSubmitValidate: function (event) {\r\n      // This is a Parsley generated submit event, do not validate, do not prevent, simply exit and keep normal behavior\r\n      if (true === event.parsley)\r\n        return;\r\n\r\n      // If we didn't come here through a submit button, use the first one in the form\r\n      var $submitSource = this._$submitSource || this.$element.find('input[type=\"submit\"], button[type=\"submit\"]').first();\r\n      this._$submitSource = null;\r\n      this.$element.find('.parsley-synthetic-submit-button').prop('disabled', true);\r\n      if ($submitSource.is('[formnovalidate]'))\r\n        return;\r\n\r\n      var promise = this.whenValidate({event});\r\n\r\n      if ('resolved' === promise.state() && false !== this._trigger('submit')) {\r\n        // All good, let event go through. We make this distinction because browsers\r\n        // differ in their handling of `submit` being called from inside a submit event [#1047]\r\n      } else {\r\n        // Rejected or pending: cancel this submit\r\n        event.stopImmediatePropagation();\r\n        event.preventDefault();\r\n        if ('pending' === promise.state())\r\n          promise.done(() => { this._submit($submitSource); });\r\n      }\r\n    },\r\n\r\n    onSubmitButton: function(event) {\r\n      this._$submitSource = $(event.target);\r\n    },\r\n    // internal\r\n    // _submit submits the form, this time without going through the validations.\r\n    // Care must be taken to \"fake\" the actual submit button being clicked.\r\n    _submit: function ($submitSource) {\r\n      if (false === this._trigger('submit'))\r\n        return;\r\n      // Add submit button's data\r\n      if ($submitSource) {\r\n        var $synthetic = this.$element.find('.parsley-synthetic-submit-button').prop('disabled', false);\r\n        if (0 === $synthetic.length)\r\n          $synthetic = $('<input class=\"parsley-synthetic-submit-button\" type=\"hidden\">').appendTo(this.$element);\r\n        $synthetic.attr({\r\n          name: $submitSource.attr('name'),\r\n          value: $submitSource.attr('value')\r\n        });\r\n      }\r\n\r\n      this.$element.trigger($.extend($.Event('submit'), {parsley: true}));\r\n    },\r\n\r\n    // Performs validation on fields while triggering events.\r\n    // @returns `true` if all validations succeeds, `false`\r\n    // if a failure is immediately detected, or `null`\r\n    // if dependant on a promise.\r\n    // Consider using `whenValidate` instead.\r\n    validate: function (options) {\r\n      if (arguments.length >= 1 && !$.isPlainObject(options)) {\r\n        ParsleyUtils__default.warnOnce('Calling validate on a parsley form without passing arguments as an object is deprecated.');\r\n        var [group, force, event] = arguments;\r\n        options = {group, force, event};\r\n      }\r\n      return ParsleyForm__statusMapping[ this.whenValidate(options).state() ];\r\n    },\r\n\r\n    whenValidate: function ({group, force, event} = {}) {\r\n      this.submitEvent = event;\r\n      if (event) {\r\n        this.submitEvent = $.extend({}, event, {preventDefault: () => {\r\n          ParsleyUtils__default.warnOnce(\"Using `this.submitEvent.preventDefault()` is deprecated; instead, call `this.validationResult = false`\");\r\n          this.validationResult = false;\r\n        }});\r\n      }\r\n      this.validationResult = true;\r\n\r\n      // fire validate event to eventually modify things before very validation\r\n      this._trigger('validate');\r\n\r\n      // Refresh form DOM options and form's fields that could have changed\r\n      this._refreshFields();\r\n\r\n      var promises = this._withoutReactualizingFormOptions(() => {\r\n        return $.map(this.fields, field => {\r\n          return field.whenValidate({force, group});\r\n        });\r\n      });\r\n\r\n      var promiseBasedOnValidationResult = () => {\r\n        var r = $.Deferred();\r\n        if (false === this.validationResult)\r\n          r.reject();\r\n        return r.resolve().promise();\r\n      };\r\n\r\n      return $.when(...promises)\r\n        .done(  () => { this._trigger('success'); })\r\n        .fail(  () => {\r\n          this.validationResult = false;\r\n          this.focus();\r\n          this._trigger('error');\r\n        })\r\n        .always(() => { this._trigger('validated'); })\r\n        .pipe(  promiseBasedOnValidationResult, promiseBasedOnValidationResult);\r\n    },\r\n\r\n    // Iterate over refreshed fields, and stop on first failure.\r\n    // Returns `true` if all fields are valid, `false` if a failure is detected\r\n    // or `null` if the result depends on an unresolved promise.\r\n    // Prefer using `whenValid` instead.\r\n    isValid: function (options) {\r\n      if (arguments.length >= 1 && !$.isPlainObject(options)) {\r\n        ParsleyUtils__default.warnOnce('Calling isValid on a parsley form without passing arguments as an object is deprecated.');\r\n        var [group, force] = arguments;\r\n        options = {group, force};\r\n      }\r\n      return ParsleyForm__statusMapping[ this.whenValid(options).state() ];\r\n    },\r\n\r\n    // Iterate over refreshed fields and validate them.\r\n    // Returns a promise.\r\n    // A validation that immediately fails will interrupt the validations.\r\n    whenValid: function ({group, force} = {}) {\r\n      this._refreshFields();\r\n\r\n      var promises = this._withoutReactualizingFormOptions(() => {\r\n        return $.map(this.fields, field => {\r\n          return field.whenValid({group, force});\r\n        });\r\n      });\r\n      return $.when(...promises);\r\n    },\r\n\r\n    _refreshFields: function () {\r\n      return this.actualizeOptions()._bindFields();\r\n    },\r\n\r\n    _bindFields: function () {\r\n      var oldFields = this.fields;\r\n\r\n      this.fields = [];\r\n      this.fieldsMappedById = {};\r\n\r\n      this._withoutReactualizingFormOptions(() => {\r\n        this.$element\r\n        .find(this.options.inputs)\r\n        .not(this.options.excluded)\r\n        .each((_, element) => {\r\n          var fieldInstance = new window.Parsley.Factory(element, {}, this);\r\n\r\n          // Only add valid and not excluded `ParsleyField` and `ParsleyFieldMultiple` children\r\n          if (('ParsleyField' === fieldInstance.__class__ || 'ParsleyFieldMultiple' === fieldInstance.__class__) && (true !== fieldInstance.options.excluded))\r\n            if ('undefined' === typeof this.fieldsMappedById[fieldInstance.__class__ + '-' + fieldInstance.__id__]) {\r\n              this.fieldsMappedById[fieldInstance.__class__ + '-' + fieldInstance.__id__] = fieldInstance;\r\n              this.fields.push(fieldInstance);\r\n            }\r\n        });\r\n\r\n        $(oldFields).not(this.fields).each((_, field) => {\r\n          field._trigger('reset');\r\n        });\r\n      });\r\n      return this;\r\n    },\r\n\r\n    // Internal only.\r\n    // Looping on a form's fields to do validation or similar\r\n    // will trigger reactualizing options on all of them, which\r\n    // in turn will reactualize the form's options.\r\n    // To avoid calling actualizeOptions so many times on the form\r\n    // for nothing, _withoutReactualizingFormOptions temporarily disables\r\n    // the method actualizeOptions on this form while `fn` is called.\r\n    _withoutReactualizingFormOptions: function (fn) {\r\n      var oldActualizeOptions = this.actualizeOptions;\r\n      this.actualizeOptions = function () { return this; };\r\n      var result = fn();\r\n      this.actualizeOptions = oldActualizeOptions;\r\n      return result;\r\n    },\r\n\r\n    // Internal only.\r\n    // Shortcut to trigger an event\r\n    // Returns true iff event is not interrupted and default not prevented.\r\n    _trigger: function (eventName) {\r\n      return this.trigger('form:' + eventName);\r\n    }\r\n\r\n  };\n\n  var ConstraintFactory = function (parsleyField, name, requirements, priority, isDomConstraint) {\r\n    if (!/ParsleyField/.test(parsleyField.__class__))\r\n      throw new Error('ParsleyField or ParsleyFieldMultiple instance expected');\r\n\r\n    var validatorSpec = window.Parsley._validatorRegistry.validators[name];\r\n    var validator = new ParsleyValidator(validatorSpec);\r\n\r\n    $.extend(this, {\r\n      validator: validator,\r\n      name: name,\r\n      requirements: requirements,\r\n      priority: priority || parsleyField.options[name + 'Priority'] || validator.priority,\r\n      isDomConstraint: true === isDomConstraint\r\n    });\r\n    this._parseRequirements(parsleyField.options);\r\n  };\r\n\r\n  var capitalize = function(str) {\r\n    var cap = str[0].toUpperCase();\r\n    return cap + str.slice(1);\r\n  };\r\n\r\n  ConstraintFactory.prototype = {\r\n    validate: function(value, instance) {\r\n      var args = this.requirementList.slice(0); // Make copy\r\n      args.unshift(value);\r\n      args.push(instance);\r\n      return this.validator.validate.apply(this.validator, args);\r\n    },\r\n\r\n    _parseRequirements: function(options) {\r\n      this.requirementList = this.validator.parseRequirements(this.requirements, key => {\r\n        return options[this.name + capitalize(key)];\r\n      });\r\n    }\r\n  };\n\n  var ParsleyField = function (field, domOptions, options, parsleyFormInstance) {\r\n    this.__class__ = 'ParsleyField';\r\n    this.__id__ = ParsleyUtils__default.generateID();\r\n\r\n    this.$element = $(field);\r\n\r\n    // Set parent if we have one\r\n    if ('undefined' !== typeof parsleyFormInstance) {\r\n      this.parent = parsleyFormInstance;\r\n    }\r\n\r\n    this.options = options;\r\n    this.domOptions = domOptions;\r\n\r\n    // Initialize some properties\r\n    this.constraints = [];\r\n    this.constraintsByName = {};\r\n    this.validationResult = [];\r\n\r\n    // Bind constraints\r\n    this._bindConstraints();\r\n  };\r\n\r\n  var parsley_field__statusMapping = {pending: null, resolved: true, rejected: false};\r\n\r\n  ParsleyField.prototype = {\r\n    // # Public API\r\n    // Validate field and trigger some events for mainly `ParsleyUI`\r\n    // @returns `true`, an array of the validators that failed, or\r\n    // `null` if validation is not finished. Prefer using whenValidate\r\n    validate: function (options) {\r\n      if (arguments.length >= 1 && !$.isPlainObject(options)) {\r\n        ParsleyUtils__default.warnOnce('Calling validate on a parsley field without passing arguments as an object is deprecated.');\r\n        options = {options};\r\n      }\r\n      var promise = this.whenValidate(options);\r\n      if (!promise)  // If excluded with `group` option\r\n        return true;\r\n      switch (promise.state()) {\r\n        case 'pending': return null;\r\n        case 'resolved': return true;\r\n        case 'rejected': return this.validationResult;\r\n      }\r\n    },\r\n\r\n    // Validate field and trigger some events for mainly `ParsleyUI`\r\n    // @returns a promise that succeeds only when all validations do\r\n    // or `undefined` if field is not in the given `group`.\r\n    whenValidate: function ({force, group} =  {}) {\r\n      // do not validate a field if not the same as given validation group\r\n      this.refreshConstraints();\r\n      if (group && !this._isInGroup(group))\r\n        return;\r\n\r\n      this.value = this.getValue();\r\n\r\n      // Field Validate event. `this.value` could be altered for custom needs\r\n      this._trigger('validate');\r\n\r\n      return this.whenValid({force, value: this.value, _refreshed: true})\r\n        .always(() => { this._reflowUI(); })\r\n        .done(() =>   { this._trigger('success'); })\r\n        .fail(() =>   { this._trigger('error'); })\r\n        .always(() => { this._trigger('validated'); });\r\n    },\r\n\r\n    hasConstraints: function () {\r\n      return 0 !== this.constraints.length;\r\n    },\r\n\r\n    // An empty optional field does not need validation\r\n    needsValidation: function (value) {\r\n      if ('undefined' === typeof value)\r\n        value = this.getValue();\r\n\r\n      // If a field is empty and not required, it is valid\r\n      // Except if `data-parsley-validate-if-empty` explicitely added, useful for some custom validators\r\n      if (!value.length && !this._isRequired() && 'undefined' === typeof this.options.validateIfEmpty)\r\n        return false;\r\n\r\n      return true;\r\n    },\r\n\r\n    _isInGroup: function (group) {\r\n      if ($.isArray(this.options.group))\r\n        return -1 !== $.inArray(group, this.options.group);\r\n      return this.options.group === group;\r\n    },\r\n\r\n    // Just validate field. Do not trigger any event.\r\n    // Returns `true` iff all constraints pass, `false` if there are failures,\r\n    // or `null` if the result can not be determined yet (depends on a promise)\r\n    // See also `whenValid`.\r\n    isValid: function (options) {\r\n      if (arguments.length >= 1 && !$.isPlainObject(options)) {\r\n        ParsleyUtils__default.warnOnce('Calling isValid on a parsley field without passing arguments as an object is deprecated.');\r\n        var [force, value] = arguments;\r\n        options = {force, value};\r\n      }\r\n      var promise = this.whenValid(options);\r\n      if (!promise) // Excluded via `group`\r\n        return true;\r\n      return parsley_field__statusMapping[promise.state()];\r\n    },\r\n\r\n    // Just validate field. Do not trigger any event.\r\n    // @returns a promise that succeeds only when all validations do\r\n    // or `undefined` if the field is not in the given `group`.\r\n    // The argument `force` will force validation of empty fields.\r\n    // If a `value` is given, it will be validated instead of the value of the input.\r\n    whenValid: function ({force = false, value, group, _refreshed} = {}) {\r\n      // Recompute options and rebind constraints to have latest changes\r\n      if (!_refreshed)\r\n        this.refreshConstraints();\r\n      // do not validate a field if not the same as given validation group\r\n      if (group && !this._isInGroup(group))\r\n        return;\r\n\r\n      this.validationResult = true;\r\n\r\n      // A field without constraint is valid\r\n      if (!this.hasConstraints())\r\n        return $.when();\r\n\r\n      // Value could be passed as argument, needed to add more power to 'parsley:field:validate'\r\n      if ('undefined' === typeof value || null === value)\r\n        value = this.getValue();\r\n\r\n      if (!this.needsValidation(value) && true !== force)\r\n        return $.when();\r\n\r\n      var groupedConstraints = this._getGroupedConstraints();\r\n      var promises = [];\r\n      $.each(groupedConstraints, (_, constraints) => {\r\n        // Process one group of constraints at a time, we validate the constraints\r\n        // and combine the promises together.\r\n        var promise = $.when(\r\n          ...$.map(constraints, constraint => this._validateConstraint(value, constraint))\r\n        );\r\n        promises.push(promise);\r\n        if (promise.state() === 'rejected')\r\n          return false; // Interrupt processing if a group has already failed\r\n      });\r\n      return $.when.apply($, promises);\r\n    },\r\n\r\n    // @returns a promise\r\n    _validateConstraint: function(value, constraint) {\r\n      var result = constraint.validate(value, this);\r\n      // Map false to a failed promise\r\n      if (false === result)\r\n        result = $.Deferred().reject();\r\n      // Make sure we return a promise and that we record failures\r\n      return $.when(result).fail(errorMessage => {\r\n        if (true === this.validationResult)\r\n          this.validationResult = [];\r\n        this.validationResult.push({\r\n          assert: constraint,\r\n          errorMessage: 'string' === typeof errorMessage && errorMessage\r\n        });\r\n      });\r\n    },\r\n\r\n    // @returns Parsley field computed value that could be overrided or configured in DOM\r\n    getValue: function () {\r\n      var value;\r\n\r\n      // Value could be overriden in DOM or with explicit options\r\n      if ('function' === typeof this.options.value)\r\n        value = this.options.value(this);\r\n      else if ('undefined' !== typeof this.options.value)\r\n        value = this.options.value;\r\n      else\r\n        value = this.$element.val();\r\n\r\n      // Handle wrong DOM or configurations\r\n      if ('undefined' === typeof value || null === value)\r\n        return '';\r\n\r\n      return this._handleWhitespace(value);\r\n    },\r\n\r\n    // Actualize options that could have change since previous validation\r\n    // Re-bind accordingly constraints (could be some new, removed or updated)\r\n    refreshConstraints: function () {\r\n      return this.actualizeOptions()._bindConstraints();\r\n    },\r\n\r\n    /**\r\n    * Add a new constraint to a field\r\n    *\r\n    * @param {String}   name\r\n    * @param {Mixed}    requirements      optional\r\n    * @param {Number}   priority          optional\r\n    * @param {Boolean}  isDomConstraint   optional\r\n    */\r\n    addConstraint: function (name, requirements, priority, isDomConstraint) {\r\n\r\n      if (window.Parsley._validatorRegistry.validators[name]) {\r\n        var constraint = new ConstraintFactory(this, name, requirements, priority, isDomConstraint);\r\n\r\n        // if constraint already exist, delete it and push new version\r\n        if ('undefined' !== this.constraintsByName[constraint.name])\r\n          this.removeConstraint(constraint.name);\r\n\r\n        this.constraints.push(constraint);\r\n        this.constraintsByName[constraint.name] = constraint;\r\n      }\r\n\r\n      return this;\r\n    },\r\n\r\n    // Remove a constraint\r\n    removeConstraint: function (name) {\r\n      for (var i = 0; i < this.constraints.length; i++)\r\n        if (name === this.constraints[i].name) {\r\n          this.constraints.splice(i, 1);\r\n          break;\r\n        }\r\n      delete this.constraintsByName[name];\r\n      return this;\r\n    },\r\n\r\n    // Update a constraint (Remove + re-add)\r\n    updateConstraint: function (name, parameters, priority) {\r\n      return this.removeConstraint(name)\r\n        .addConstraint(name, parameters, priority);\r\n    },\r\n\r\n    // # Internals\r\n\r\n    // Internal only.\r\n    // Bind constraints from config + options + DOM\r\n    _bindConstraints: function () {\r\n      var constraints = [];\r\n      var constraintsByName = {};\r\n\r\n      // clean all existing DOM constraints to only keep javascript user constraints\r\n      for (var i = 0; i < this.constraints.length; i++)\r\n        if (false === this.constraints[i].isDomConstraint) {\r\n          constraints.push(this.constraints[i]);\r\n          constraintsByName[this.constraints[i].name] = this.constraints[i];\r\n        }\r\n\r\n      this.constraints = constraints;\r\n      this.constraintsByName = constraintsByName;\r\n\r\n      // then re-add Parsley DOM-API constraints\r\n      for (var name in this.options)\r\n        this.addConstraint(name, this.options[name], undefined, true);\r\n\r\n      // finally, bind special HTML5 constraints\r\n      return this._bindHtml5Constraints();\r\n    },\r\n\r\n    // Internal only.\r\n    // Bind specific HTML5 constraints to be HTML5 compliant\r\n    _bindHtml5Constraints: function () {\r\n      // html5 required\r\n      if (this.$element.hasClass('required') || this.$element.attr('required'))\r\n        this.addConstraint('required', true, undefined, true);\r\n\r\n      // html5 pattern\r\n      if ('string' === typeof this.$element.attr('pattern'))\r\n        this.addConstraint('pattern', this.$element.attr('pattern'), undefined, true);\r\n\r\n      // range\r\n      if ('undefined' !== typeof this.$element.attr('min') && 'undefined' !== typeof this.$element.attr('max'))\r\n        this.addConstraint('range', [this.$element.attr('min'), this.$element.attr('max')], undefined, true);\r\n\r\n      // HTML5 min\r\n      else if ('undefined' !== typeof this.$element.attr('min'))\r\n        this.addConstraint('min', this.$element.attr('min'), undefined, true);\r\n\r\n      // HTML5 max\r\n      else if ('undefined' !== typeof this.$element.attr('max'))\r\n        this.addConstraint('max', this.$element.attr('max'), undefined, true);\r\n\r\n\r\n      // length\r\n      if ('undefined' !== typeof this.$element.attr('minlength') && 'undefined' !== typeof this.$element.attr('maxlength'))\r\n        this.addConstraint('length', [this.$element.attr('minlength'), this.$element.attr('maxlength')], undefined, true);\r\n\r\n      // HTML5 minlength\r\n      else if ('undefined' !== typeof this.$element.attr('minlength'))\r\n        this.addConstraint('minlength', this.$element.attr('minlength'), undefined, true);\r\n\r\n      // HTML5 maxlength\r\n      else if ('undefined' !== typeof this.$element.attr('maxlength'))\r\n        this.addConstraint('maxlength', this.$element.attr('maxlength'), undefined, true);\r\n\r\n\r\n      // html5 types\r\n      var type = this.$element.attr('type');\r\n\r\n      if ('undefined' === typeof type)\r\n        return this;\r\n\r\n      // Small special case here for HTML5 number: integer validator if step attribute is undefined or an integer value, number otherwise\r\n      if ('number' === type) {\r\n        return this.addConstraint('type', ['number', {\r\n          step: this.$element.attr('step'),\r\n          base: this.$element.attr('min') || this.$element.attr('value')\r\n        }], undefined, true);\r\n      // Regular other HTML5 supported types\r\n      } else if (/^(email|url|range)$/i.test(type)) {\r\n        return this.addConstraint('type', type, undefined, true);\r\n      }\r\n      return this;\r\n    },\r\n\r\n    // Internal only.\r\n    // Field is required if have required constraint without `false` value\r\n    _isRequired: function () {\r\n      if ('undefined' === typeof this.constraintsByName.required)\r\n        return false;\r\n\r\n      return false !== this.constraintsByName.required.requirements;\r\n    },\r\n\r\n    // Internal only.\r\n    // Shortcut to trigger an event\r\n    _trigger: function (eventName) {\r\n      return this.trigger('field:' + eventName);\r\n    },\r\n\r\n    // Internal only\r\n    // Handles whitespace in a value\r\n    // Use `data-parsley-whitespace=\"squish\"` to auto squish input value\r\n    // Use `data-parsley-whitespace=\"trim\"` to auto trim input value\r\n    _handleWhitespace: function (value) {\r\n      if (true === this.options.trimValue)\r\n        ParsleyUtils__default.warnOnce('data-parsley-trim-value=\"true\" is deprecated, please use data-parsley-whitespace=\"trim\"');\r\n\r\n      if ('squish' === this.options.whitespace)\r\n        value = value.replace(/\\s{2,}/g, ' ');\r\n\r\n      if (('trim' === this.options.whitespace) || ('squish' === this.options.whitespace) || (true === this.options.trimValue))\r\n        value = ParsleyUtils__default.trimString(value);\r\n\r\n      return value;\r\n    },\r\n\r\n    // Internal only.\r\n    // Returns the constraints, grouped by descending priority.\r\n    // The result is thus an array of arrays of constraints.\r\n    _getGroupedConstraints: function () {\r\n      if (false === this.options.priorityEnabled)\r\n        return [this.constraints];\r\n\r\n      var groupedConstraints = [];\r\n      var index = {};\r\n\r\n      // Create array unique of priorities\r\n      for (var i = 0; i < this.constraints.length; i++) {\r\n        var p = this.constraints[i].priority;\r\n        if (!index[p])\r\n          groupedConstraints.push(index[p] = []);\r\n        index[p].push(this.constraints[i]);\r\n      }\r\n      // Sort them by priority DESC\r\n      groupedConstraints.sort(function (a, b) { return b[0].priority - a[0].priority; });\r\n\r\n      return groupedConstraints;\r\n    }\r\n\r\n  };\r\n\r\n  var parsley_field = ParsleyField;\n\n  var ParsleyMultiple = function () {\r\n    this.__class__ = 'ParsleyFieldMultiple';\r\n  };\r\n\r\n  ParsleyMultiple.prototype = {\r\n    // Add new `$element` sibling for multiple field\r\n    addElement: function ($element) {\r\n      this.$elements.push($element);\r\n\r\n      return this;\r\n    },\r\n\r\n    // See `ParsleyField.refreshConstraints()`\r\n    refreshConstraints: function () {\r\n      var fieldConstraints;\r\n\r\n      this.constraints = [];\r\n\r\n      // Select multiple special treatment\r\n      if (this.$element.is('select')) {\r\n        this.actualizeOptions()._bindConstraints();\r\n\r\n        return this;\r\n      }\r\n\r\n      // Gather all constraints for each input in the multiple group\r\n      for (var i = 0; i < this.$elements.length; i++) {\r\n\r\n        // Check if element have not been dynamically removed since last binding\r\n        if (!$('html').has(this.$elements[i]).length) {\r\n          this.$elements.splice(i, 1);\r\n          continue;\r\n        }\r\n\r\n        fieldConstraints = this.$elements[i].data('ParsleyFieldMultiple').refreshConstraints().constraints;\r\n\r\n        for (var j = 0; j < fieldConstraints.length; j++)\r\n          this.addConstraint(fieldConstraints[j].name, fieldConstraints[j].requirements, fieldConstraints[j].priority, fieldConstraints[j].isDomConstraint);\r\n      }\r\n\r\n      return this;\r\n    },\r\n\r\n    // See `ParsleyField.getValue()`\r\n    getValue: function () {\r\n      // Value could be overriden in DOM\r\n      if ('function' === typeof this.options.value)\r\n        value = this.options.value(this);\r\n      else if ('undefined' !== typeof this.options.value)\r\n        return this.options.value;\r\n\r\n      // Radio input case\r\n      if (this.$element.is('input[type=radio]'))\r\n        return this._findRelated().filter(':checked').val() || '';\r\n\r\n      // checkbox input case\r\n      if (this.$element.is('input[type=checkbox]')) {\r\n        var values = [];\r\n\r\n        this._findRelated().filter(':checked').each(function () {\r\n          values.push($(this).val());\r\n        });\r\n\r\n        return values;\r\n      }\r\n\r\n      // Select multiple case\r\n      if (this.$element.is('select') && null === this.$element.val())\r\n        return [];\r\n\r\n      // Default case that should never happen\r\n      return this.$element.val();\r\n    },\r\n\r\n    _init: function () {\r\n      this.$elements = [this.$element];\r\n\r\n      return this;\r\n    }\r\n  };\n\n  var ParsleyFactory = function (element, options, parsleyFormInstance) {\r\n    this.$element = $(element);\r\n\r\n    // If the element has already been bound, returns its saved Parsley instance\r\n    var savedparsleyFormInstance = this.$element.data('Parsley');\r\n    if (savedparsleyFormInstance) {\r\n\r\n      // If the saved instance has been bound without a ParsleyForm parent and there is one given in this call, add it\r\n      if ('undefined' !== typeof parsleyFormInstance && savedparsleyFormInstance.parent === window.Parsley) {\r\n        savedparsleyFormInstance.parent = parsleyFormInstance;\r\n        savedparsleyFormInstance._resetOptions(savedparsleyFormInstance.options);\r\n      }\r\n\r\n      return savedparsleyFormInstance;\r\n    }\r\n\r\n    // Parsley must be instantiated with a DOM element or jQuery $element\r\n    if (!this.$element.length)\r\n      throw new Error('You must bind Parsley on an existing element.');\r\n\r\n    if ('undefined' !== typeof parsleyFormInstance && 'ParsleyForm' !== parsleyFormInstance.__class__)\r\n      throw new Error('Parent instance must be a ParsleyForm instance');\r\n\r\n    this.parent = parsleyFormInstance || window.Parsley;\r\n    return this.init(options);\r\n  };\r\n\r\n  ParsleyFactory.prototype = {\r\n    init: function (options) {\r\n      this.__class__ = 'Parsley';\r\n      this.__version__ = '2.3.5';\r\n      this.__id__ = ParsleyUtils__default.generateID();\r\n\r\n      // Pre-compute options\r\n      this._resetOptions(options);\r\n\r\n      // A ParsleyForm instance is obviously a `<form>` element but also every node that is not an input and has the `data-parsley-validate` attribute\r\n      if (this.$element.is('form') || (ParsleyUtils__default.checkAttr(this.$element, this.options.namespace, 'validate') && !this.$element.is(this.options.inputs)))\r\n        return this.bind('parsleyForm');\r\n\r\n      // Every other element is bound as a `ParsleyField` or `ParsleyFieldMultiple`\r\n      return this.isMultiple() ? this.handleMultiple() : this.bind('parsleyField');\r\n    },\r\n\r\n    isMultiple: function () {\r\n      return (this.$element.is('input[type=radio], input[type=checkbox]')) || (this.$element.is('select') && 'undefined' !== typeof this.$element.attr('multiple'));\r\n    },\r\n\r\n    // Multiples fields are a real nightmare :(\r\n    // Maybe some refactoring would be appreciated here...\r\n    handleMultiple: function () {\r\n      var name;\r\n      var multiple;\r\n      var parsleyMultipleInstance;\r\n\r\n      // Handle multiple name\r\n      if (this.options.multiple)\r\n        ; // We already have our 'multiple' identifier\r\n      else if ('undefined' !== typeof this.$element.attr('name') && this.$element.attr('name').length)\r\n        this.options.multiple = name = this.$element.attr('name');\r\n      else if ('undefined' !== typeof this.$element.attr('id') && this.$element.attr('id').length)\r\n        this.options.multiple = this.$element.attr('id');\r\n\r\n      // Special select multiple input\r\n      if (this.$element.is('select') && 'undefined' !== typeof this.$element.attr('multiple')) {\r\n        this.options.multiple = this.options.multiple || this.__id__;\r\n        return this.bind('parsleyFieldMultiple');\r\n\r\n      // Else for radio / checkboxes, we need a `name` or `data-parsley-multiple` to properly bind it\r\n      } else if (!this.options.multiple) {\r\n        ParsleyUtils__default.warn('To be bound by Parsley, a radio, a checkbox and a multiple select input must have either a name or a multiple option.', this.$element);\r\n        return this;\r\n      }\r\n\r\n      // Remove special chars\r\n      this.options.multiple = this.options.multiple.replace(/(:|\\.|\\[|\\]|\\{|\\}|\\$)/g, '');\r\n\r\n      // Add proper `data-parsley-multiple` to siblings if we have a valid multiple name\r\n      if ('undefined' !== typeof name) {\r\n        $('input[name=\"' + name + '\"]').each((i, input) => {\r\n          if ($(input).is('input[type=radio], input[type=checkbox]'))\r\n            $(input).attr(this.options.namespace + 'multiple', this.options.multiple);\r\n        });\r\n      }\r\n\r\n      // Check here if we don't already have a related multiple instance saved\r\n      var $previouslyRelated = this._findRelated();\r\n      for (var i = 0; i < $previouslyRelated.length; i++) {\r\n        parsleyMultipleInstance = $($previouslyRelated.get(i)).data('Parsley');\r\n        if ('undefined' !== typeof parsleyMultipleInstance) {\r\n\r\n          if (!this.$element.data('ParsleyFieldMultiple')) {\r\n            parsleyMultipleInstance.addElement(this.$element);\r\n          }\r\n\r\n          break;\r\n        }\r\n      }\r\n\r\n      // Create a secret ParsleyField instance for every multiple field. It will be stored in `data('ParsleyFieldMultiple')`\r\n      // And will be useful later to access classic `ParsleyField` stuff while being in a `ParsleyFieldMultiple` instance\r\n      this.bind('parsleyField', true);\r\n\r\n      return parsleyMultipleInstance || this.bind('parsleyFieldMultiple');\r\n    },\r\n\r\n    // Return proper `ParsleyForm`, `ParsleyField` or `ParsleyFieldMultiple`\r\n    bind: function (type, doNotStore) {\r\n      var parsleyInstance;\r\n\r\n      switch (type) {\r\n        case 'parsleyForm':\r\n          parsleyInstance = $.extend(\r\n            new ParsleyForm(this.$element, this.domOptions, this.options),\r\n            window.ParsleyExtend\r\n          )._bindFields();\r\n          break;\r\n        case 'parsleyField':\r\n          parsleyInstance = $.extend(\r\n            new parsley_field(this.$element, this.domOptions, this.options, this.parent),\r\n            window.ParsleyExtend\r\n          );\r\n          break;\r\n        case 'parsleyFieldMultiple':\r\n          parsleyInstance = $.extend(\r\n            new parsley_field(this.$element, this.domOptions, this.options, this.parent),\r\n            new ParsleyMultiple(),\r\n            window.ParsleyExtend\r\n          )._init();\r\n          break;\r\n        default:\r\n          throw new Error(type + 'is not a supported Parsley type');\r\n      }\r\n\r\n      if (this.options.multiple)\r\n        ParsleyUtils__default.setAttr(this.$element, this.options.namespace, 'multiple', this.options.multiple);\r\n\r\n      if ('undefined' !== typeof doNotStore) {\r\n        this.$element.data('ParsleyFieldMultiple', parsleyInstance);\r\n\r\n        return parsleyInstance;\r\n      }\r\n\r\n      // Store the freshly bound instance in a DOM element for later access using jQuery `data()`\r\n      this.$element.data('Parsley', parsleyInstance);\r\n\r\n      // Tell the world we have a new ParsleyForm or ParsleyField instance!\r\n      parsleyInstance._actualizeTriggers();\r\n      parsleyInstance._trigger('init');\r\n\r\n      return parsleyInstance;\r\n    }\r\n  };\n\n  var vernums = $.fn.jquery.split('.');\r\n  if (parseInt(vernums[0]) <= 1 && parseInt(vernums[1]) < 8) {\r\n    throw \"The loaded version of jQuery is too old. Please upgrade to 1.8.x or better.\";\r\n  }\r\n  if (!vernums.forEach) {\r\n    ParsleyUtils__default.warn('Parsley requires ES5 to run properly. Please include https://github.com/es-shims/es5-shim');\r\n  }\r\n  // Inherit `on`, `off` & `trigger` to Parsley:\r\n  var Parsley = $.extend(new ParsleyAbstract(), {\r\n      $element: $(document),\r\n      actualizeOptions: null,\r\n      _resetOptions: null,\r\n      Factory: ParsleyFactory,\r\n      version: '2.3.5'\r\n    });\r\n\r\n  // Supplement ParsleyField and Form with ParsleyAbstract\r\n  // This way, the constructors will have access to those methods\r\n  $.extend(parsley_field.prototype, ParsleyUI.Field, ParsleyAbstract.prototype);\r\n  $.extend(ParsleyForm.prototype, ParsleyUI.Form, ParsleyAbstract.prototype);\r\n  // Inherit actualizeOptions and _resetOptions:\r\n  $.extend(ParsleyFactory.prototype, ParsleyAbstract.prototype);\r\n\r\n  // ### jQuery API\r\n  // `$('.elem').parsley(options)` or `$('.elem').psly(options)`\r\n  $.fn.parsley = $.fn.psly = function (options) {\r\n    if (this.length > 1) {\r\n      var instances = [];\r\n\r\n      this.each(function () {\r\n        instances.push($(this).parsley(options));\r\n      });\r\n\r\n      return instances;\r\n    }\r\n\r\n    // Return undefined if applied to non existing DOM element\r\n    if (!$(this).length) {\r\n      ParsleyUtils__default.warn('You must bind Parsley on an existing element.');\r\n\r\n      return;\r\n    }\r\n\r\n    return new ParsleyFactory(this, options);\r\n  };\r\n\r\n  // ### ParsleyField and ParsleyForm extension\r\n  // Ensure the extension is now defined if it wasn't previously\r\n  if ('undefined' === typeof window.ParsleyExtend)\r\n    window.ParsleyExtend = {};\r\n\r\n  // ### Parsley config\r\n  // Inherit from ParsleyDefault, and copy over any existing values\r\n  Parsley.options = $.extend(ParsleyUtils__default.objectCreate(ParsleyDefaults), window.ParsleyConfig);\r\n  window.ParsleyConfig = Parsley.options; // Old way of accessing global options\r\n\r\n  // ### Globals\r\n  window.Parsley = window.psly = Parsley;\r\n  window.ParsleyUtils = ParsleyUtils__default;\r\n\r\n  // ### Define methods that forward to the registry, and deprecate all access except through window.Parsley\r\n  var registry = window.Parsley._validatorRegistry = new ParsleyValidatorRegistry(window.ParsleyConfig.validators, window.ParsleyConfig.i18n);\r\n  window.ParsleyValidator = {};\r\n  $.each('setLocale addCatalog addMessage addMessages getErrorMessage formatMessage addValidator updateValidator removeValidator'.split(' '), function (i, method) {\r\n    window.Parsley[method] = $.proxy(registry, method);\r\n    window.ParsleyValidator[method] = function () {\r\n      ParsleyUtils__default.warnOnce(`Accessing the method '${method}' through ParsleyValidator is deprecated. Simply call 'window.Parsley.${method}(...)'`);\r\n      return window.Parsley[method](...arguments);\r\n    };\r\n  });\r\n\r\n  // ### ParsleyUI\r\n  // Deprecated global object\r\n  window.Parsley.UI = ParsleyUI;\r\n  window.ParsleyUI = {\r\n    removeError: function (instance, name, doNotUpdateClass) {\r\n      var updateClass = true !== doNotUpdateClass;\r\n      ParsleyUtils__default.warnOnce(`Accessing ParsleyUI is deprecated. Call 'removeError' on the instance directly. Please comment in issue 1073 as to your need to call this method.`);\r\n      return instance.removeError(name, {updateClass});\r\n    },\r\n    getErrorsMessages: function (instance) {\r\n      ParsleyUtils__default.warnOnce(`Accessing ParsleyUI is deprecated. Call 'getErrorsMessages' on the instance directly.`);\r\n      return instance.getErrorsMessages();\r\n    }\r\n  };\r\n  $.each('addError updateError'.split(' '), function (i, method) {\r\n    window.ParsleyUI[method] = function (instance, name, message, assert, doNotUpdateClass) {\r\n      var updateClass = true !== doNotUpdateClass;\r\n      ParsleyUtils__default.warnOnce(`Accessing ParsleyUI is deprecated. Call '${method}' on the instance directly. Please comment in issue 1073 as to your need to call this method.`);\r\n      return instance[method](name, {message, assert, updateClass});\r\n    };\r\n  });\r\n\r\n  // Alleviate glaring Firefox bug https://bugzilla.mozilla.org/show_bug.cgi?id=1250521\r\n  // See also https://github.com/guillaumepotier/Parsley.js/issues/1068\r\n  if (/firefox/i.test(navigator.userAgent)) {\r\n    $(document).on('change', 'select', evt => {\r\n      $(evt.target).trigger('input');\r\n    });\r\n  }\r\n\r\n  // ### PARSLEY auto-binding\r\n  // Prevent it by setting `ParsleyConfig.autoBind` to `false`\r\n  if (false !== window.ParsleyConfig.autoBind) {\r\n    $(function () {\r\n      // Works only on `data-parsley-validate`.\r\n      if ($('[data-parsley-validate]').length)\r\n        $('[data-parsley-validate]').parsley();\r\n    });\r\n  }\n\n  var o = $({});\r\n  var deprecated = function () {\r\n    ParsleyUtils__default.warnOnce(\"Parsley's pubsub module is deprecated; use the 'on' and 'off' methods on parsley instances or window.Parsley\");\r\n  };\r\n\r\n  // Returns an event handler that calls `fn` with the arguments it expects\r\n  function adapt(fn, context) {\r\n    // Store to allow unbinding\r\n    if (!fn.parsleyAdaptedCallback) {\r\n      fn.parsleyAdaptedCallback = function () {\r\n        var args = Array.prototype.slice.call(arguments, 0);\r\n        args.unshift(this);\r\n        fn.apply(context || o, args);\r\n      };\r\n    }\r\n    return fn.parsleyAdaptedCallback;\r\n  }\r\n\r\n  var eventPrefix = 'parsley:';\r\n  // Converts 'parsley:form:validate' into 'form:validate'\r\n  function eventName(name) {\r\n    if (name.lastIndexOf(eventPrefix, 0) === 0)\r\n      return name.substr(eventPrefix.length);\r\n    return name;\r\n  }\r\n\r\n  // $.listen is deprecated. Use Parsley.on instead.\r\n  $.listen = function (name, callback) {\r\n    var context;\r\n    deprecated();\r\n    if ('object' === typeof arguments[1] && 'function' === typeof arguments[2]) {\r\n      context = arguments[1];\r\n      callback = arguments[2];\r\n    }\r\n\r\n    if ('function' !== typeof callback)\r\n      throw new Error('Wrong parameters');\r\n\r\n    window.Parsley.on(eventName(name), adapt(callback, context));\r\n  };\r\n\r\n  $.listenTo = function (instance, name, fn) {\r\n    deprecated();\r\n    if (!(instance instanceof parsley_field) && !(instance instanceof ParsleyForm))\r\n      throw new Error('Must give Parsley instance');\r\n\r\n    if ('string' !== typeof name || 'function' !== typeof fn)\r\n      throw new Error('Wrong parameters');\r\n\r\n    instance.on(eventName(name), adapt(fn));\r\n  };\r\n\r\n  $.unsubscribe = function (name, fn) {\r\n    deprecated();\r\n    if ('string' !== typeof name || 'function' !== typeof fn)\r\n      throw new Error('Wrong arguments');\r\n    window.Parsley.off(eventName(name), fn.parsleyAdaptedCallback);\r\n  };\r\n\r\n  $.unsubscribeTo = function (instance, name) {\r\n    deprecated();\r\n    if (!(instance instanceof parsley_field) && !(instance instanceof ParsleyForm))\r\n      throw new Error('Must give Parsley instance');\r\n    instance.off(eventName(name));\r\n  };\r\n\r\n  $.unsubscribeAll = function (name) {\r\n    deprecated();\r\n    window.Parsley.off(eventName(name));\r\n    $('form,input,textarea,select').each(function () {\r\n      var instance = $(this).data('Parsley');\r\n      if (instance) {\r\n        instance.off(eventName(name));\r\n      }\r\n    });\r\n  };\r\n\r\n  // $.emit is deprecated. Use jQuery events instead.\r\n  $.emit = function (name, instance) {\r\n    deprecated();\r\n    var instanceGiven = (instance instanceof parsley_field) || (instance instanceof ParsleyForm);\r\n    var args = Array.prototype.slice.call(arguments, instanceGiven ? 2 : 1);\r\n    args.unshift(eventName(name));\r\n    if (!instanceGiven) {\r\n      instance = window.Parsley;\r\n    }\r\n    instance.trigger(...args);\r\n  };\r\n\r\n  var pubsub = {};\n\n  $.extend(true, Parsley, {\r\n    asyncValidators: {\r\n      'default': {\r\n        fn: function (xhr) {\r\n          // By default, only status 2xx are deemed successful.\r\n          // Note: we use status instead of state() because responses with status 200\r\n          // but invalid messages (e.g. an empty body for content type set to JSON) will\r\n          // result in state() === 'rejected'.\r\n          return xhr.status >= 200 && xhr.status < 300;\r\n        },\r\n        url: false\r\n      },\r\n      reverse: {\r\n        fn: function (xhr) {\r\n          // If reverse option is set, a failing ajax request is considered successful\r\n          return xhr.status < 200 || xhr.status >= 300;\r\n        },\r\n        url: false\r\n      }\r\n    },\r\n\r\n    addAsyncValidator: function (name, fn, url, options) {\r\n      Parsley.asyncValidators[name] = {\r\n        fn: fn,\r\n        url: url || false,\r\n        options: options || {}\r\n      };\r\n\r\n      return this;\r\n    }\r\n\r\n  });\r\n\r\n  Parsley.addValidator('remote', {\r\n    requirementType: {\r\n      '': 'string',\r\n      'validator': 'string',\r\n      'reverse': 'boolean',\r\n      'options': 'object'\r\n    },\r\n\r\n    validateString: function validateString(value, url, options, instance) {\r\n      var data = {};\r\n      var ajaxOptions;\r\n      var csr;\r\n      var validator = options.validator || (true === options.reverse ? 'reverse' : 'default');\r\n\r\n      if ('undefined' === typeof Parsley.asyncValidators[validator]) throw new Error('Calling an undefined async validator: `' + validator + '`');\r\n\r\n      url = Parsley.asyncValidators[validator].url || url;\r\n\r\n      // Fill current value\r\n      if (url.indexOf('{value}') > -1) {\r\n        url = url.replace('{value}', encodeURIComponent(value));\r\n      } else {\r\n        data[instance.$element.attr('name') || instance.$element.attr('id')] = value;\r\n      }\r\n\r\n      // Merge options passed in from the function with the ones in the attribute\r\n      var remoteOptions = $.extend(true, options.options || {}, Parsley.asyncValidators[validator].options);\r\n\r\n      // All `$.ajax(options)` could be overridden or extended directly from DOM in `data-parsley-remote-options`\r\n      ajaxOptions = $.extend(true, {}, {\r\n        url: url,\r\n        data: data,\r\n        type: 'GET',\r\n        useCache: true\r\n      }, remoteOptions);\r\n\r\n      if (ajaxOptions.useCache === \"false\") ajaxOptions.useCache = false;\r\n\r\n      // Generate store key based on ajax options\r\n      instance.trigger('field:ajaxoptions', instance, ajaxOptions);\r\n\r\n      if (ajaxOptions.useCache) {\r\n        try {\r\n          csr = $.param(ajaxOptions);\r\n        } catch (e) {\r\n          ajaxOptions.useCache = false;\r\n        }\r\n      }\r\n\r\n      // Initialise query cache\r\n      if ('undefined' === typeof Parsley._remoteCache) Parsley._remoteCache = {};\r\n\r\n      // Try to retrieve stored xhr\r\n      var xhr = ajaxOptions.useCache ? (Parsley._remoteCache[csr] = Parsley._remoteCache[csr] || $.ajax(ajaxOptions))\r\n                             : $.ajax(ajaxOptions);\r\n\r\n      var handleXhr = function handleXhr() {\r\n        var result = Parsley.asyncValidators[validator].fn.call(instance, xhr, url, options);\r\n        if (!result) // Map falsy results to rejected promise\r\n          result = $.Deferred().reject();\r\n        return $.when(result);\r\n      };\r\n\r\n      return xhr.then(handleXhr, handleXhr);\r\n    },\r\n\r\n    priority: -1\r\n  });\r\n\r\n  Parsley.on('form:submit', function () {\r\n    Parsley._remoteCache = {};\r\n  });\r\n\r\n  window.ParsleyExtend.addAsyncValidator = function () {\r\n    ParsleyUtils.warnOnce('Accessing the method `addAsyncValidator` through an instance is deprecated. Simply call `Parsley.addAsyncValidator(...)`');\r\n    return Parsley.addAsyncValidator(...arguments);\r\n  };\n\n  // This is included with the Parsley library itself,\r\n  // thus there is no use in adding it to your project.\r\n  Parsley.addMessages('en', {\r\n    defaultMessage: \"This value seems to be invalid.\",\r\n    type: {\r\n      email:        \"This value should be a valid email.\",\r\n      url:          \"This value should be a valid url.\",\r\n      number:       \"This value should be a valid number.\",\r\n      integer:      \"This value should be a valid integer.\",\r\n      digits:       \"This value should be digits.\",\r\n      alphanum:     \"This value should be alphanumeric.\"\r\n    },\r\n    notblank:       \"This value should not be blank.\",\r\n    required:       \"This value is required.\",\r\n    pattern:        \"This value seems to be invalid.\",\r\n    min:            \"This value should be greater than or equal to %s.\",\r\n    max:            \"This value should be lower than or equal to %s.\",\r\n    range:          \"This value should be between %s and %s.\",\r\n    minlength:      \"This value is too short. It should have %s characters or more.\",\r\n    maxlength:      \"This value is too long. It should have %s characters or fewer.\",\r\n    length:         \"This value length is invalid. It should be between %s and %s characters long.\",\r\n    mincheck:       \"You must select at least %s choices.\",\r\n    maxcheck:       \"You must select %s choices or fewer.\",\r\n    check:          \"You must select between %s and %s choices.\",\r\n    equalto:        \"This value should be the same.\"\r\n  });\r\n\r\n  Parsley.setLocale('en');\n\n  var parsley = Parsley;\n\n  return parsley;\n\n}));\n","import $ from 'jquery';\r\n\r\nvar globalID = 1;\r\nvar pastWarnings = {};\r\n\r\nvar ParsleyUtils = {\r\n  // Parsley DOM-API\r\n  // returns object from dom attributes and values\r\n  attr: function ($element, namespace, obj) {\r\n    var i;\r\n    var attribute;\r\n    var attributes;\r\n    var regex = new RegExp('^' + namespace, 'i');\r\n\r\n    if ('undefined' === typeof obj)\r\n      obj = {};\r\n    else {\r\n      // Clear all own properties. This won't affect prototype's values\r\n      for (i in obj) {\r\n        if (obj.hasOwnProperty(i))\r\n          delete obj[i];\r\n      }\r\n    }\r\n\r\n    if ('undefined' === typeof $element || 'undefined' === typeof $element[0])\r\n      return obj;\r\n\r\n    attributes = $element[0].attributes;\r\n    for (i = attributes.length; i--; ) {\r\n      attribute = attributes[i];\r\n\r\n      if (attribute && attribute.specified && regex.test(attribute.name)) {\r\n        obj[this.camelize(attribute.name.slice(namespace.length))] = this.deserializeValue(attribute.value);\r\n      }\r\n    }\r\n\r\n    return obj;\r\n  },\r\n\r\n  checkAttr: function ($element, namespace, checkAttr) {\r\n    return $element.is('[' + namespace + checkAttr + ']');\r\n  },\r\n\r\n  setAttr: function ($element, namespace, attr, value) {\r\n    $element[0].setAttribute(this.dasherize(namespace + attr), String(value));\r\n  },\r\n\r\n  generateID: function () {\r\n    return '' + globalID++;\r\n  },\r\n\r\n  /** Third party functions **/\r\n  // Zepto deserialize function\r\n  deserializeValue: function (value) {\r\n    var num;\r\n\r\n    try {\r\n      return value ?\r\n        value == \"true\" ||\r\n        (value == \"false\" ? false :\r\n        value == \"null\" ? null :\r\n        !isNaN(num = Number(value)) ? num :\r\n        /^[\\[\\{]/.test(value) ? $.parseJSON(value) :\r\n        value)\r\n        : value;\r\n    } catch (e) { return value; }\r\n  },\r\n\r\n  // Zepto camelize function\r\n  camelize: function (str) {\r\n    return str.replace(/-+(.)?/g, function (match, chr) {\r\n      return chr ? chr.toUpperCase() : '';\r\n    });\r\n  },\r\n\r\n  // Zepto dasherize function\r\n  dasherize: function (str) {\r\n    return str.replace(/::/g, '/')\r\n      .replace(/([A-Z]+)([A-Z][a-z])/g, '$1_$2')\r\n      .replace(/([a-z\\d])([A-Z])/g, '$1_$2')\r\n      .replace(/_/g, '-')\r\n      .toLowerCase();\r\n  },\r\n\r\n  warn: function () {\r\n    if (window.console && 'function' === typeof window.console.warn)\r\n      window.console.warn(...arguments);\r\n  },\r\n\r\n  warnOnce: function(msg) {\r\n    if (!pastWarnings[msg]) {\r\n      pastWarnings[msg] = true;\r\n      this.warn(...arguments);\r\n    }\r\n  },\r\n\r\n  _resetWarnings: function () {\r\n    pastWarnings = {};\r\n  },\r\n\r\n  trimString: function(string) {\r\n    return string.replace(/^\\s+|\\s+$/g, '');\r\n  },\r\n\r\n  namespaceEvents: function(events, namespace) {\r\n    events = this.trimString(events || '').split(/\\s+/);\r\n    if (!events[0])\r\n      return '';\r\n    return $.map(events, evt => { return `${evt}.${namespace}`; }).join(' ');\r\n  },\r\n\r\n  // Object.create polyfill, see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/create#Polyfill\r\n  objectCreate: Object.create || (function () {\r\n    var Object = function () {};\r\n    return function (prototype) {\r\n      if (arguments.length > 1) {\r\n        throw Error('Second argument not supported');\r\n      }\r\n      if (typeof prototype != 'object') {\r\n        throw TypeError('Argument must be an object');\r\n      }\r\n      Object.prototype = prototype;\r\n      var result = new Object();\r\n      Object.prototype = null;\r\n      return result;\r\n    };\r\n  })()\r\n};\r\n\r\nexport default ParsleyUtils;\r\n","// All these options could be overriden and specified directly in DOM using\r\n// `data-parsley-` default DOM-API\r\n// eg: `inputs` can be set in DOM using `data-parsley-inputs=\"input, textarea\"`\r\n// eg: `data-parsley-stop-on-first-failing-constraint=\"false\"`\r\n\r\nvar ParsleyDefaults = {\r\n  // ### General\r\n\r\n  // Default data-namespace for DOM API\r\n  namespace: 'data-parsley-',\r\n\r\n  // Supported inputs by default\r\n  inputs: 'input, textarea, select',\r\n\r\n  // Excluded inputs by default\r\n  excluded: 'input[type=button], input[type=submit], input[type=reset], input[type=hidden]',\r\n\r\n  // Stop validating field on highest priority failing constraint\r\n  priorityEnabled: true,\r\n\r\n  // ### Field only\r\n\r\n  // identifier used to group together inputs (e.g. radio buttons...)\r\n  multiple: null,\r\n\r\n  // identifier (or array of identifiers) used to validate only a select group of inputs\r\n  group: null,\r\n\r\n  // ### UI\r\n  // Enable\\Disable error messages\r\n  uiEnabled: true,\r\n\r\n  // Key events threshold before validation\r\n  validationThreshold: 3,\r\n\r\n  // Focused field on form validation error. 'first'|'last'|'none'\r\n  focus: 'first',\r\n\r\n  // event(s) that will trigger validation before first failure. eg: `input`...\r\n  trigger: false,\r\n\r\n  // event(s) that will trigger validation after first failure.\r\n  triggerAfterFailure: 'input',\r\n\r\n  // Class that would be added on every failing validation Parsley field\r\n  errorClass: 'parsley-error',\r\n\r\n  // Same for success validation\r\n  successClass: 'parsley-success',\r\n\r\n  // Return the `$element` that will receive these above success or error classes\r\n  // Could also be (and given directly from DOM) a valid selector like `'#div'`\r\n  classHandler: function (ParsleyField) {},\r\n\r\n  // Return the `$element` where errors will be appended\r\n  // Could also be (and given directly from DOM) a valid selector like `'#div'`\r\n  errorsContainer: function (ParsleyField) {},\r\n\r\n  // ul elem that would receive errors' list\r\n  errorsWrapper: '<ul class=\"parsley-errors-list\"></ul>',\r\n\r\n  // li elem that would receive error message\r\n  errorTemplate: '<li></li>'\r\n};\r\n\r\nexport default ParsleyDefaults;\r\n","import $ from 'jquery';\r\nimport ParsleyUtils from './utils';\r\n\r\nvar ParsleyAbstract = function () {};\r\n\r\nParsleyAbstract.prototype = {\r\n  asyncSupport: true, // Deprecated\r\n\r\n  actualizeOptions: function () {\r\n    ParsleyUtils.attr(this.$element, this.options.namespace, this.domOptions);\r\n    if (this.parent && this.parent.actualizeOptions)\r\n      this.parent.actualizeOptions();\r\n    return this;\r\n  },\r\n\r\n  _resetOptions: function (initOptions) {\r\n    this.domOptions = ParsleyUtils.objectCreate(this.parent.options);\r\n    this.options = ParsleyUtils.objectCreate(this.domOptions);\r\n    // Shallow copy of ownProperties of initOptions:\r\n    for (var i in initOptions) {\r\n      if (initOptions.hasOwnProperty(i))\r\n        this.options[i] = initOptions[i];\r\n    }\r\n    this.actualizeOptions();\r\n  },\r\n\r\n  _listeners: null,\r\n\r\n  // Register a callback for the given event name\r\n  // Callback is called with context as the first argument and the `this`\r\n  // The context is the current parsley instance, or window.Parsley if global\r\n  // A return value of `false` will interrupt the calls\r\n  on: function (name, fn) {\r\n    this._listeners = this._listeners || {};\r\n    var queue = this._listeners[name] = this._listeners[name] || [];\r\n    queue.push(fn);\r\n\r\n    return this;\r\n  },\r\n\r\n  // Deprecated. Use `on` instead\r\n  subscribe: function(name, fn) {\r\n    $.listenTo(this, name.toLowerCase(), fn);\r\n  },\r\n\r\n  // Unregister a callback (or all if none is given) for the given event name\r\n  off: function (name, fn) {\r\n    var queue = this._listeners && this._listeners[name];\r\n    if (queue) {\r\n      if (!fn) {\r\n        delete this._listeners[name];\r\n      } else {\r\n        for (var i = queue.length; i--; )\r\n          if (queue[i] === fn)\r\n            queue.splice(i, 1);\r\n      }\r\n    }\r\n    return this;\r\n  },\r\n\r\n  // Deprecated. Use `off`\r\n  unsubscribe: function(name, fn) {\r\n    $.unsubscribeTo(this, name.toLowerCase());\r\n  },\r\n\r\n  // Trigger an event of the given name\r\n  // A return value of `false` interrupts the callback chain\r\n  // Returns false if execution was interrupted\r\n  trigger: function (name, target, extraArg) {\r\n    target = target || this;\r\n    var queue = this._listeners && this._listeners[name];\r\n    var result;\r\n    var parentResult;\r\n    if (queue) {\r\n      for (var i = queue.length; i--; ) {\r\n        result = queue[i].call(target, target, extraArg);\r\n        if (result === false) return result;\r\n      }\r\n    }\r\n    if (this.parent) {\r\n      return this.parent.trigger(name, target, extraArg);\r\n    }\r\n    return true;\r\n  },\r\n\r\n  // Reset UI\r\n  reset: function () {\r\n    // Field case: just emit a reset event for UI\r\n    if ('ParsleyForm' !== this.__class__) {\r\n      this._resetUI();\r\n      return this._trigger('reset');\r\n    }\r\n\r\n    // Form case: emit a reset event for each field\r\n    for (var i = 0; i < this.fields.length; i++)\r\n      this.fields[i].reset();\r\n\r\n    this._trigger('reset');\r\n  },\r\n\r\n  // Destroy Parsley instance (+ UI)\r\n  destroy: function () {\r\n    // Field case: emit destroy event to clean UI and then destroy stored instance\r\n    this._destroyUI();\r\n    if ('ParsleyForm' !== this.__class__) {\r\n      this.$element.removeData('Parsley');\r\n      this.$element.removeData('ParsleyFieldMultiple');\r\n      this._trigger('destroy');\r\n\r\n      return;\r\n    }\r\n\r\n    // Form case: destroy all its fields and then destroy stored instance\r\n    for (var i = 0; i < this.fields.length; i++)\r\n      this.fields[i].destroy();\r\n\r\n    this.$element.removeData('Parsley');\r\n    this._trigger('destroy');\r\n  },\r\n\r\n  asyncIsValid: function (group, force) {\r\n    ParsleyUtils.warnOnce(\"asyncIsValid is deprecated; please use whenValid instead\");\r\n    return this.whenValid({group, force});\r\n  },\r\n\r\n  _findRelated: function () {\r\n    return this.options.multiple ?\r\n      this.parent.$element.find(`[${this.options.namespace}multiple=\"${this.options.multiple}\"]`)\r\n    : this.$element;\r\n  }\r\n};\r\n\r\nexport default ParsleyAbstract;\r\n","import $ from 'jquery';\r\nimport ParsleyUtils from './utils';\r\n\r\nvar requirementConverters = {\r\n  string: function(string) {\r\n    return string;\r\n  },\r\n  integer: function(string) {\r\n    if (isNaN(string))\r\n      throw 'Requirement is not an integer: \"' + string + '\"';\r\n    return parseInt(string, 10);\r\n  },\r\n  number: function(string) {\r\n    if (isNaN(string))\r\n      throw 'Requirement is not a number: \"' + string + '\"';\r\n    return parseFloat(string);\r\n  },\r\n  reference: function(string) { // Unused for now\r\n    var result = $(string);\r\n    if (result.length === 0)\r\n      throw 'No such reference: \"' + string + '\"';\r\n    return result;\r\n  },\r\n  boolean: function(string) {\r\n    return string !== 'false';\r\n  },\r\n  object: function(string) {\r\n    return ParsleyUtils.deserializeValue(string);\r\n  },\r\n  regexp: function(regexp) {\r\n    var flags = '';\r\n\r\n    // Test if RegExp is literal, if not, nothing to be done, otherwise, we need to isolate flags and pattern\r\n    if (/^\\/.*\\/(?:[gimy]*)$/.test(regexp)) {\r\n      // Replace the regexp literal string with the first match group: ([gimy]*)\r\n      // If no flag is present, this will be a blank string\r\n      flags = regexp.replace(/.*\\/([gimy]*)$/, '$1');\r\n      // Again, replace the regexp literal string with the first match group:\r\n      // everything excluding the opening and closing slashes and the flags\r\n      regexp = regexp.replace(new RegExp('^/(.*?)/' + flags + '$'), '$1');\r\n    } else {\r\n      // Anchor regexp:\r\n      regexp = '^' + regexp + '$';\r\n    }\r\n    return new RegExp(regexp, flags);\r\n  }\r\n};\r\n\r\nvar convertArrayRequirement = function(string, length) {\r\n  var m = string.match(/^\\s*\\[(.*)\\]\\s*$/);\r\n  if (!m)\r\n    throw 'Requirement is not an array: \"' + string + '\"';\r\n  var values = m[1].split(',').map(ParsleyUtils.trimString);\r\n  if (values.length !== length)\r\n    throw 'Requirement has ' + values.length + ' values when ' + length + ' are needed';\r\n  return values;\r\n};\r\n\r\nvar convertRequirement = function(requirementType, string) {\r\n  var converter = requirementConverters[requirementType || 'string'];\r\n  if (!converter)\r\n    throw 'Unknown requirement specification: \"' + requirementType + '\"';\r\n  return converter(string);\r\n};\r\n\r\nvar convertExtraOptionRequirement = function(requirementSpec, string, extraOptionReader) {\r\n  var main = null;\r\n  var extra = {};\r\n  for (var key in requirementSpec) {\r\n    if (key) {\r\n      var value = extraOptionReader(key);\r\n      if ('string' === typeof value)\r\n        value = convertRequirement(requirementSpec[key], value);\r\n      extra[key] = value;\r\n    } else {\r\n      main = convertRequirement(requirementSpec[key], string);\r\n    }\r\n  }\r\n  return [main, extra];\r\n};\r\n\r\n// A Validator needs to implement the methods `validate` and `parseRequirements`\r\n\r\nvar ParsleyValidator = function(spec) {\r\n  $.extend(true, this, spec);\r\n};\r\n\r\nParsleyValidator.prototype = {\r\n  // Returns `true` iff the given `value` is valid according the given requirements.\r\n  validate: function(value, requirementFirstArg) {\r\n    if (this.fn) { // Legacy style validator\r\n\r\n      if (arguments.length > 3)  // If more args then value, requirement, instance...\r\n        requirementFirstArg = [].slice.call(arguments, 1, -1);  // Skip first arg (value) and last (instance), combining the rest\r\n      return this.fn.call(this, value, requirementFirstArg);\r\n    }\r\n\r\n    if ($.isArray(value)) {\r\n      if (!this.validateMultiple)\r\n        throw 'Validator `' + this.name + '` does not handle multiple values';\r\n      return this.validateMultiple(...arguments);\r\n    } else {\r\n      if (this.validateNumber) {\r\n        if (isNaN(value))\r\n          return false;\r\n        arguments[0] = parseFloat(arguments[0]);\r\n        return this.validateNumber(...arguments);\r\n      }\r\n      if (this.validateString) {\r\n        return this.validateString(...arguments);\r\n      }\r\n      throw 'Validator `' + this.name + '` only handles multiple values';\r\n    }\r\n  },\r\n\r\n  // Parses `requirements` into an array of arguments,\r\n  // according to `this.requirementType`\r\n  parseRequirements: function(requirements, extraOptionReader) {\r\n    if ('string' !== typeof requirements) {\r\n      // Assume requirement already parsed\r\n      // but make sure we return an array\r\n      return $.isArray(requirements) ? requirements : [requirements];\r\n    }\r\n    var type = this.requirementType;\r\n    if ($.isArray(type)) {\r\n      var values = convertArrayRequirement(requirements, type.length);\r\n      for (var i = 0; i < values.length; i++)\r\n        values[i] = convertRequirement(type[i], values[i]);\r\n      return values;\r\n    } else if ($.isPlainObject(type)) {\r\n      return convertExtraOptionRequirement(type, requirements, extraOptionReader);\r\n    } else {\r\n      return [convertRequirement(type, requirements)];\r\n    }\r\n  },\r\n  // Defaults:\r\n  requirementType: 'string',\r\n\r\n  priority: 2\r\n\r\n};\r\n\r\nexport default ParsleyValidator;\r\n","import $ from 'jquery';\r\nimport ParsleyUtils from './utils';\r\nimport ParsleyDefaults from './defaults';\r\nimport ParsleyValidator from './validator';\r\n\r\nvar ParsleyValidatorRegistry = function (validators, catalog) {\r\n  this.__class__ = 'ParsleyValidatorRegistry';\r\n\r\n  // Default Parsley locale is en\r\n  this.locale = 'en';\r\n\r\n  this.init(validators || {}, catalog || {});\r\n};\r\n\r\nvar typeRegexes =  {\r\n  email: /^((([a-z]|\\d|[!#\\$%&'\\*\\+\\-\\/=\\?\\^_`{\\|}~]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])+(\\.([a-z]|\\d|[!#\\$%&'\\*\\+\\-\\/=\\?\\^_`{\\|}~]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])+)*)|((\\x22)((((\\x20|\\x09)*(\\x0d\\x0a))?(\\x20|\\x09)+)?(([\\x01-\\x08\\x0b\\x0c\\x0e-\\x1f\\x7f]|\\x21|[\\x23-\\x5b]|[\\x5d-\\x7e]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])|(\\\\([\\x01-\\x09\\x0b\\x0c\\x0d-\\x7f]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF]))))*(((\\x20|\\x09)*(\\x0d\\x0a))?(\\x20|\\x09)+)?(\\x22)))@((([a-z]|\\d|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])|(([a-z]|\\d|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])([a-z]|\\d|-|\\.|_|~|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])*([a-z]|\\d|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])))\\.)+(([a-z]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])|(([a-z]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])([a-z]|\\d|-|\\.|_|~|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])*([a-z]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])))$/i,\r\n\r\n  // Follow https://www.w3.org/TR/html5/infrastructure.html#floating-point-numbers\r\n  number: /^-?(\\d*\\.)?\\d+(e[-+]?\\d+)?$/i,\r\n\r\n  integer: /^-?\\d+$/,\r\n\r\n  digits: /^\\d+$/,\r\n\r\n  alphanum: /^\\w+$/i,\r\n\r\n  url: new RegExp(\r\n      \"^\" +\r\n        // protocol identifier\r\n        \"(?:(?:https?|ftp)://)?\" + // ** mod: make scheme optional\r\n        // user:pass authentication\r\n        \"(?:\\\\S+(?::\\\\S*)?@)?\" +\r\n        \"(?:\" +\r\n          // IP address exclusion\r\n          // private & local networks\r\n          // \"(?!(?:10|127)(?:\\\\.\\\\d{1,3}){3})\" +   // ** mod: allow local networks\r\n          // \"(?!(?:169\\\\.254|192\\\\.168)(?:\\\\.\\\\d{1,3}){2})\" +  // ** mod: allow local networks\r\n          // \"(?!172\\\\.(?:1[6-9]|2\\\\d|3[0-1])(?:\\\\.\\\\d{1,3}){2})\" +  // ** mod: allow local networks\r\n          // IP address dotted notation octets\r\n          // excludes loopback network 0.0.0.0\r\n          // excludes reserved space >= 224.0.0.0\r\n          // excludes network & broacast addresses\r\n          // (first & last IP address of each class)\r\n          \"(?:[1-9]\\\\d?|1\\\\d\\\\d|2[01]\\\\d|22[0-3])\" +\r\n          \"(?:\\\\.(?:1?\\\\d{1,2}|2[0-4]\\\\d|25[0-5])){2}\" +\r\n          \"(?:\\\\.(?:[1-9]\\\\d?|1\\\\d\\\\d|2[0-4]\\\\d|25[0-4]))\" +\r\n        \"|\" +\r\n          // host name\r\n          \"(?:(?:[a-z\\\\u00a1-\\\\uffff0-9]-*)*[a-z\\\\u00a1-\\\\uffff0-9]+)\" +\r\n          // domain name\r\n          \"(?:\\\\.(?:[a-z\\\\u00a1-\\\\uffff0-9]-*)*[a-z\\\\u00a1-\\\\uffff0-9]+)*\" +\r\n          // TLD identifier\r\n          \"(?:\\\\.(?:[a-z\\\\u00a1-\\\\uffff]{2,}))\" +\r\n        \")\" +\r\n        // port number\r\n        \"(?::\\\\d{2,5})?\" +\r\n        // resource path\r\n        \"(?:/\\\\S*)?\" +\r\n      \"$\", 'i'\r\n    )\r\n};\r\ntypeRegexes.range = typeRegexes.number;\r\n\r\n// See http://stackoverflow.com/a/10454560/8279\r\nvar decimalPlaces = num => {\r\n  var match = ('' + num).match(/(?:\\.(\\d+))?(?:[eE]([+-]?\\d+))?$/);\r\n  if (!match) { return 0; }\r\n  return Math.max(\r\n       0,\r\n       // Number of digits right of decimal point.\r\n       (match[1] ? match[1].length : 0) -\r\n       // Adjust for scientific notation.\r\n       (match[2] ? +match[2] : 0));\r\n};\r\n\r\nParsleyValidatorRegistry.prototype = {\r\n  init: function (validators, catalog) {\r\n    this.catalog = catalog;\r\n    // Copy prototype's validators:\r\n    this.validators = $.extend({}, this.validators);\r\n\r\n    for (var name in validators)\r\n      this.addValidator(name, validators[name].fn, validators[name].priority);\r\n\r\n    window.Parsley.trigger('parsley:validator:init');\r\n  },\r\n\r\n  // Set new messages locale if we have dictionary loaded in ParsleyConfig.i18n\r\n  setLocale: function (locale) {\r\n    if ('undefined' === typeof this.catalog[locale])\r\n      throw new Error(locale + ' is not available in the catalog');\r\n\r\n    this.locale = locale;\r\n\r\n    return this;\r\n  },\r\n\r\n  // Add a new messages catalog for a given locale. Set locale for this catalog if set === `true`\r\n  addCatalog: function (locale, messages, set) {\r\n    if ('object' === typeof messages)\r\n      this.catalog[locale] = messages;\r\n\r\n    if (true === set)\r\n      return this.setLocale(locale);\r\n\r\n    return this;\r\n  },\r\n\r\n  // Add a specific message for a given constraint in a given locale\r\n  addMessage: function (locale, name, message) {\r\n    if ('undefined' === typeof this.catalog[locale])\r\n      this.catalog[locale] = {};\r\n\r\n    this.catalog[locale][name] = message;\r\n\r\n    return this;\r\n  },\r\n\r\n  // Add messages for a given locale\r\n  addMessages: function (locale, nameMessageObject) {\r\n    for (var name in nameMessageObject)\r\n      this.addMessage(locale, name, nameMessageObject[name]);\r\n\r\n    return this;\r\n  },\r\n\r\n  // Add a new validator\r\n  //\r\n  //    addValidator('custom', {\r\n  //        requirementType: ['integer', 'integer'],\r\n  //        validateString: function(value, from, to) {},\r\n  //        priority: 22,\r\n  //        messages: {\r\n  //          en: \"Hey, that's no good\",\r\n  //          fr: \"Aye aye, pas bon du tout\",\r\n  //        }\r\n  //    })\r\n  //\r\n  // Old API was addValidator(name, function, priority)\r\n  //\r\n  addValidator: function (name, arg1, arg2) {\r\n    if (this.validators[name])\r\n      ParsleyUtils.warn('Validator \"' + name + '\" is already defined.');\r\n    else if (ParsleyDefaults.hasOwnProperty(name)) {\r\n      ParsleyUtils.warn('\"' + name + '\" is a restricted keyword and is not a valid validator name.');\r\n      return;\r\n    }\r\n    return this._setValidator(...arguments);\r\n  },\r\n\r\n  updateValidator: function (name, arg1, arg2) {\r\n    if (!this.validators[name]) {\r\n      ParsleyUtils.warn('Validator \"' + name + '\" is not already defined.');\r\n      return this.addValidator(...arguments);\r\n    }\r\n    return this._setValidator(this, arguments);\r\n  },\r\n\r\n  removeValidator: function (name) {\r\n    if (!this.validators[name])\r\n      ParsleyUtils.warn('Validator \"' + name + '\" is not defined.');\r\n\r\n    delete this.validators[name];\r\n\r\n    return this;\r\n  },\r\n\r\n  _setValidator: function (name, validator, priority) {\r\n    if ('object' !== typeof validator) {\r\n      // Old style validator, with `fn` and `priority`\r\n      validator = {\r\n        fn: validator,\r\n        priority: priority\r\n      };\r\n    }\r\n    if (!validator.validate) {\r\n      validator = new ParsleyValidator(validator);\r\n    }\r\n    this.validators[name] = validator;\r\n\r\n    for (var locale in validator.messages || {})\r\n      this.addMessage(locale, name, validator.messages[locale]);\r\n\r\n    return this;\r\n  },\r\n\r\n  getErrorMessage: function (constraint) {\r\n    var message;\r\n\r\n    // Type constraints are a bit different, we have to match their requirements too to find right error message\r\n    if ('type' === constraint.name) {\r\n      var typeMessages = this.catalog[this.locale][constraint.name] || {};\r\n      message = typeMessages[constraint.requirements];\r\n    } else\r\n      message = this.formatMessage(this.catalog[this.locale][constraint.name], constraint.requirements);\r\n\r\n    return message || this.catalog[this.locale].defaultMessage || this.catalog.en.defaultMessage;\r\n  },\r\n\r\n  // Kind of light `sprintf()` implementation\r\n  formatMessage: function (string, parameters) {\r\n    if ('object' === typeof parameters) {\r\n      for (var i in parameters)\r\n        string = this.formatMessage(string, parameters[i]);\r\n\r\n      return string;\r\n    }\r\n\r\n    return 'string' === typeof string ? string.replace(/%s/i, parameters) : '';\r\n  },\r\n\r\n  // Here is the Parsley default validators list.\r\n  // A validator is an object with the following key values:\r\n  //  - priority: an integer\r\n  //  - requirement: 'string' (default), 'integer', 'number', 'regexp' or an Array of these\r\n  //  - validateString, validateMultiple, validateNumber: functions returning `true`, `false` or a promise\r\n  // Alternatively, a validator can be a function that returns such an object\r\n  //\r\n  validators: {\r\n    notblank: {\r\n      validateString: function(value) {\r\n        return /\\S/.test(value);\r\n      },\r\n      priority: 2\r\n    },\r\n    required: {\r\n      validateMultiple: function(values) {\r\n        return values.length > 0;\r\n      },\r\n      validateString: function(value) {\r\n        return /\\S/.test(value);\r\n      },\r\n      priority: 512\r\n    },\r\n    type: {\r\n      validateString: function(value, type, {step = '1', base = 0} = {}) {\r\n        var regex = typeRegexes[type];\r\n        if (!regex) {\r\n          throw new Error('validator type `' + type + '` is not supported');\r\n        }\r\n        if (!regex.test(value))\r\n          return false;\r\n        if ('number' === type) {\r\n          if (!/^any$/i.test(step || '')) {\r\n            var nb = Number(value);\r\n            var decimals = Math.max(decimalPlaces(step), decimalPlaces(base));\r\n            if (decimalPlaces(nb) > decimals) // Value can't have too many decimals\r\n              return false;\r\n            // Be careful of rounding errors by using integers.\r\n            var toInt = f => { return Math.round(f * Math.pow(10, decimals)); };\r\n            if ((toInt(nb) - toInt(base)) % toInt(step) != 0)\r\n              return false;\r\n          }\r\n        }\r\n        return true;\r\n      },\r\n      requirementType: {\r\n        '': 'string',\r\n        step: 'string',\r\n        base: 'number'\r\n      },\r\n      priority: 256\r\n    },\r\n    pattern: {\r\n      validateString: function(value, regexp) {\r\n        return regexp.test(value);\r\n      },\r\n      requirementType: 'regexp',\r\n      priority: 64\r\n    },\r\n    minlength: {\r\n      validateString: function (value, requirement) {\r\n        return value.length >= requirement;\r\n      },\r\n      requirementType: 'integer',\r\n      priority: 30\r\n    },\r\n    maxlength: {\r\n      validateString: function (value, requirement) {\r\n        return value.length <= requirement;\r\n      },\r\n      requirementType: 'integer',\r\n      priority: 30\r\n    },\r\n    length: {\r\n      validateString: function (value, min, max) {\r\n        return value.length >= min && value.length <= max;\r\n      },\r\n      requirementType: ['integer', 'integer'],\r\n      priority: 30\r\n    },\r\n    mincheck: {\r\n      validateMultiple: function (values, requirement) {\r\n        return values.length >= requirement;\r\n      },\r\n      requirementType: 'integer',\r\n      priority: 30\r\n    },\r\n    maxcheck: {\r\n      validateMultiple: function (values, requirement) {\r\n        return values.length <= requirement;\r\n      },\r\n      requirementType: 'integer',\r\n      priority: 30\r\n    },\r\n    check: {\r\n      validateMultiple: function (values, min, max) {\r\n        return values.length >= min && values.length <= max;\r\n      },\r\n      requirementType: ['integer', 'integer'],\r\n      priority: 30\r\n    },\r\n    min: {\r\n      validateNumber: function (value, requirement) {\r\n        return value >= requirement;\r\n      },\r\n      requirementType: 'number',\r\n      priority: 30\r\n    },\r\n    max: {\r\n      validateNumber: function (value, requirement) {\r\n        return value <= requirement;\r\n      },\r\n      requirementType: 'number',\r\n      priority: 30\r\n    },\r\n    range: {\r\n      validateNumber: function (value, min, max) {\r\n        return value >= min && value <= max;\r\n      },\r\n      requirementType: ['number', 'number'],\r\n      priority: 30\r\n    },\r\n    equalto: {\r\n      validateString: function (value, refOrValue) {\r\n        var $reference = $(refOrValue);\r\n        if ($reference.length)\r\n          return value === $reference.val();\r\n        else\r\n          return value === refOrValue;\r\n      },\r\n      priority: 256\r\n    }\r\n  }\r\n};\r\n\r\nexport default ParsleyValidatorRegistry;\r\n","import $ from 'jquery';\r\nimport ParsleyUtils from './utils';\r\n\r\nvar ParsleyUI = {};\r\n\r\nvar diffResults = function (newResult, oldResult, deep) {\r\n  var added = [];\r\n  var kept = [];\r\n\r\n  for (var i = 0; i < newResult.length; i++) {\r\n    var found = false;\r\n\r\n    for (var j = 0; j < oldResult.length; j++)\r\n      if (newResult[i].assert.name === oldResult[j].assert.name) {\r\n        found = true;\r\n        break;\r\n      }\r\n\r\n    if (found)\r\n      kept.push(newResult[i]);\r\n    else\r\n      added.push(newResult[i]);\r\n  }\r\n\r\n  return {\r\n    kept: kept,\r\n    added: added,\r\n    removed: !deep ? diffResults(oldResult, newResult, true).added : []\r\n  };\r\n};\r\n\r\nParsleyUI.Form = {\r\n\r\n  _actualizeTriggers: function () {\r\n    this.$element.on('submit.Parsley', evt => { this.onSubmitValidate(evt); });\r\n    this.$element.on('click.Parsley', 'input[type=\"submit\"], button[type=\"submit\"]', evt => { this.onSubmitButton(evt); });\r\n\r\n    // UI could be disabled\r\n    if (false === this.options.uiEnabled)\r\n      return;\r\n\r\n    this.$element.attr('novalidate', '');\r\n  },\r\n\r\n  focus: function () {\r\n    this._focusedField = null;\r\n\r\n    if (true === this.validationResult || 'none' === this.options.focus)\r\n      return null;\r\n\r\n    for (var i = 0; i < this.fields.length; i++) {\r\n      var field = this.fields[i];\r\n      if (true !== field.validationResult && field.validationResult.length > 0 && 'undefined' === typeof field.options.noFocus) {\r\n        this._focusedField = field.$element;\r\n        if ('first' === this.options.focus)\r\n          break;\r\n      }\r\n    }\r\n\r\n    if (null === this._focusedField)\r\n      return null;\r\n\r\n    return this._focusedField.focus();\r\n  },\r\n\r\n  _destroyUI: function () {\r\n    // Reset all event listeners\r\n    this.$element.off('.Parsley');\r\n  }\r\n\r\n};\r\n\r\nParsleyUI.Field = {\r\n\r\n  _reflowUI: function () {\r\n    this._buildUI();\r\n\r\n    // If this field doesn't have an active UI don't bother doing something\r\n    if (!this._ui)\r\n      return;\r\n\r\n    // Diff between two validation results\r\n    var diff = diffResults(this.validationResult, this._ui.lastValidationResult);\r\n\r\n    // Then store current validation result for next reflow\r\n    this._ui.lastValidationResult = this.validationResult;\r\n\r\n    // Handle valid / invalid / none field class\r\n    this._manageStatusClass();\r\n\r\n    // Add, remove, updated errors messages\r\n    this._manageErrorsMessages(diff);\r\n\r\n    // Triggers impl\r\n    this._actualizeTriggers();\r\n\r\n    // If field is not valid for the first time, bind keyup trigger to ease UX and quickly inform user\r\n    if ((diff.kept.length || diff.added.length) && !this._failedOnce) {\r\n      this._failedOnce = true;\r\n      this._actualizeTriggers();\r\n    }\r\n  },\r\n\r\n  // Returns an array of field's error message(s)\r\n  getErrorsMessages: function () {\r\n    // No error message, field is valid\r\n    if (true === this.validationResult)\r\n      return [];\r\n\r\n    var messages = [];\r\n\r\n    for (var i = 0; i < this.validationResult.length; i++)\r\n      messages.push(this.validationResult[i].errorMessage ||\r\n       this._getErrorMessage(this.validationResult[i].assert));\r\n\r\n    return messages;\r\n  },\r\n\r\n  // It's a goal of Parsley that this method is no longer required [#1073]\r\n  addError: function (name, {message, assert, updateClass = true} = {}) {\r\n    this._buildUI();\r\n    this._addError(name, {message, assert});\r\n\r\n    if (updateClass)\r\n      this._errorClass();\r\n  },\r\n\r\n  // It's a goal of Parsley that this method is no longer required [#1073]\r\n  updateError: function (name, {message, assert, updateClass = true} = {}) {\r\n    this._buildUI();\r\n    this._updateError(name, {message, assert});\r\n\r\n    if (updateClass)\r\n      this._errorClass();\r\n  },\r\n\r\n  // It's a goal of Parsley that this method is no longer required [#1073]\r\n  removeError: function (name, {updateClass = true} = {}) {\r\n    this._buildUI();\r\n    this._removeError(name);\r\n\r\n    // edge case possible here: remove a standard Parsley error that is still failing in this.validationResult\r\n    // but highly improbable cuz' manually removing a well Parsley handled error makes no sense.\r\n    if (updateClass)\r\n      this._manageStatusClass();\r\n  },\r\n\r\n  _manageStatusClass: function () {\r\n    if (this.hasConstraints() && this.needsValidation() && true === this.validationResult)\r\n      this._successClass();\r\n    else if (this.validationResult.length > 0)\r\n      this._errorClass();\r\n    else\r\n      this._resetClass();\r\n  },\r\n\r\n  _manageErrorsMessages: function (diff) {\r\n    if ('undefined' !== typeof this.options.errorsMessagesDisabled)\r\n      return;\r\n\r\n    // Case where we have errorMessage option that configure an unique field error message, regardless failing validators\r\n    if ('undefined' !== typeof this.options.errorMessage) {\r\n      if ((diff.added.length || diff.kept.length)) {\r\n        this._insertErrorWrapper();\r\n\r\n        if (0 === this._ui.$errorsWrapper.find('.parsley-custom-error-message').length)\r\n          this._ui.$errorsWrapper\r\n            .append(\r\n              $(this.options.errorTemplate)\r\n              .addClass('parsley-custom-error-message')\r\n            );\r\n\r\n        return this._ui.$errorsWrapper\r\n          .addClass('filled')\r\n          .find('.parsley-custom-error-message')\r\n          .html(this.options.errorMessage);\r\n      }\r\n\r\n      return this._ui.$errorsWrapper\r\n        .removeClass('filled')\r\n        .find('.parsley-custom-error-message')\r\n        .remove();\r\n    }\r\n\r\n    // Show, hide, update failing constraints messages\r\n    for (var i = 0; i < diff.removed.length; i++)\r\n      this._removeError(diff.removed[i].assert.name);\r\n\r\n    for (i = 0; i < diff.added.length; i++)\r\n      this._addError(diff.added[i].assert.name, {message: diff.added[i].errorMessage, assert: diff.added[i].assert});\r\n\r\n    for (i = 0; i < diff.kept.length; i++)\r\n      this._updateError(diff.kept[i].assert.name, {message: diff.kept[i].errorMessage, assert: diff.kept[i].assert});\r\n  },\r\n\r\n\r\n  _addError: function (name, {message, assert}) {\r\n    this._insertErrorWrapper();\r\n    this._ui.$errorsWrapper\r\n      .addClass('filled')\r\n      .append(\r\n        $(this.options.errorTemplate)\r\n        .addClass('parsley-' + name)\r\n        .html(message || this._getErrorMessage(assert))\r\n      );\r\n  },\r\n\r\n  _updateError: function (name, {message, assert}) {\r\n    this._ui.$errorsWrapper\r\n      .addClass('filled')\r\n      .find('.parsley-' + name)\r\n      .html(message || this._getErrorMessage(assert));\r\n  },\r\n\r\n  _removeError: function (name) {\r\n    this._ui.$errorsWrapper\r\n      .removeClass('filled')\r\n      .find('.parsley-' + name)\r\n      .remove();\r\n  },\r\n\r\n  _getErrorMessage: function (constraint) {\r\n    var customConstraintErrorMessage = constraint.name + 'Message';\r\n\r\n    if ('undefined' !== typeof this.options[customConstraintErrorMessage])\r\n      return window.Parsley.formatMessage(this.options[customConstraintErrorMessage], constraint.requirements);\r\n\r\n    return window.Parsley.getErrorMessage(constraint);\r\n  },\r\n\r\n  _buildUI: function () {\r\n    // UI could be already built or disabled\r\n    if (this._ui || false === this.options.uiEnabled)\r\n      return;\r\n\r\n    var _ui = {};\r\n\r\n    // Give field its Parsley id in DOM\r\n    this.$element.attr(this.options.namespace + 'id', this.__id__);\r\n\r\n    /** Generate important UI elements and store them in this **/\r\n    // $errorClassHandler is the $element that woul have parsley-error and parsley-success classes\r\n    _ui.$errorClassHandler = this._manageClassHandler();\r\n\r\n    // $errorsWrapper is a div that would contain the various field errors, it will be appended into $errorsContainer\r\n    _ui.errorsWrapperId = 'parsley-id-' + (this.options.multiple ? 'multiple-' + this.options.multiple : this.__id__);\r\n    _ui.$errorsWrapper = $(this.options.errorsWrapper).attr('id', _ui.errorsWrapperId);\r\n\r\n    // ValidationResult UI storage to detect what have changed bwt two validations, and update DOM accordingly\r\n    _ui.lastValidationResult = [];\r\n    _ui.validationInformationVisible = false;\r\n\r\n    // Store it in this for later\r\n    this._ui = _ui;\r\n  },\r\n\r\n  // Determine which element will have `parsley-error` and `parsley-success` classes\r\n  _manageClassHandler: function () {\r\n    // An element selector could be passed through DOM with `data-parsley-class-handler=#foo`\r\n    if ('string' === typeof this.options.classHandler && $(this.options.classHandler).length)\r\n      return $(this.options.classHandler);\r\n\r\n    // Class handled could also be determined by function given in Parsley options\r\n    var $handler = this.options.classHandler.call(this, this);\r\n\r\n    // If this function returned a valid existing DOM element, go for it\r\n    if ('undefined' !== typeof $handler && $handler.length)\r\n      return $handler;\r\n\r\n    // Otherwise, if simple element (input, texatrea, select...) it will perfectly host the classes\r\n    if (!this.options.multiple || this.$element.is('select'))\r\n      return this.$element;\r\n\r\n    // But if multiple element (radio, checkbox), that would be their parent\r\n    return this.$element.parent();\r\n  },\r\n\r\n  _insertErrorWrapper: function () {\r\n    var $errorsContainer;\r\n\r\n    // Nothing to do if already inserted\r\n    if (0 !== this._ui.$errorsWrapper.parent().length)\r\n      return this._ui.$errorsWrapper.parent();\r\n\r\n    if ('string' === typeof this.options.errorsContainer) {\r\n      if ($(this.options.errorsContainer).length)\r\n        return $(this.options.errorsContainer).append(this._ui.$errorsWrapper);\r\n      else\r\n        ParsleyUtils.warn('The errors container `' + this.options.errorsContainer + '` does not exist in DOM');\r\n    } else if ('function' === typeof this.options.errorsContainer)\r\n      $errorsContainer = this.options.errorsContainer.call(this, this);\r\n\r\n    if ('undefined' !== typeof $errorsContainer && $errorsContainer.length)\r\n      return $errorsContainer.append(this._ui.$errorsWrapper);\r\n\r\n    var $from = this.$element;\r\n    if (this.options.multiple)\r\n      $from = $from.parent();\r\n    return $from.after(this._ui.$errorsWrapper);\r\n  },\r\n\r\n  _actualizeTriggers: function () {\r\n    var $toBind = this._findRelated();\r\n\r\n    // Remove Parsley events already bound on this field\r\n    $toBind.off('.Parsley');\r\n    if (this._failedOnce)\r\n      $toBind.on(ParsleyUtils.namespaceEvents(this.options.triggerAfterFailure, 'Parsley'), () => {\r\n        this.validate();\r\n      });\r\n    else {\r\n      $toBind.on(ParsleyUtils.namespaceEvents(this.options.trigger, 'Parsley'), event => {\r\n        this._eventValidate(event);\r\n      });\r\n    }\r\n  },\r\n\r\n  _eventValidate: function (event) {\r\n    // For keyup, keypress, keydown, input... events that could be a little bit obstrusive\r\n    // do not validate if val length < min threshold on first validation. Once field have been validated once and info\r\n    // about success or failure have been displayed, always validate with this trigger to reflect every yalidation change.\r\n    if (/key|input/.test(event.type))\r\n      if (!(this._ui && this._ui.validationInformationVisible) && this.getValue().length <= this.options.validationThreshold)\r\n        return;\r\n\r\n    this.validate();\r\n  },\r\n\r\n  _resetUI: function () {\r\n    // Reset all event listeners\r\n    this._failedOnce = false;\r\n    this._actualizeTriggers();\r\n\r\n    // Nothing to do if UI never initialized for this field\r\n    if ('undefined' === typeof this._ui)\r\n      return;\r\n\r\n    // Reset all errors' li\r\n    this._ui.$errorsWrapper\r\n      .removeClass('filled')\r\n      .children()\r\n      .remove();\r\n\r\n    // Reset validation class\r\n    this._resetClass();\r\n\r\n    // Reset validation flags and last validation result\r\n    this._ui.lastValidationResult = [];\r\n    this._ui.validationInformationVisible = false;\r\n  },\r\n\r\n  _destroyUI: function () {\r\n    this._resetUI();\r\n\r\n    if ('undefined' !== typeof this._ui)\r\n      this._ui.$errorsWrapper.remove();\r\n\r\n    delete this._ui;\r\n  },\r\n\r\n  _successClass: function () {\r\n    this._ui.validationInformationVisible = true;\r\n    this._ui.$errorClassHandler.removeClass(this.options.errorClass).addClass(this.options.successClass);\r\n  },\r\n  _errorClass: function () {\r\n    this._ui.validationInformationVisible = true;\r\n    this._ui.$errorClassHandler.removeClass(this.options.successClass).addClass(this.options.errorClass);\r\n  },\r\n  _resetClass: function () {\r\n    this._ui.$errorClassHandler.removeClass(this.options.successClass).removeClass(this.options.errorClass);\r\n  }\r\n};\r\n\r\nexport default ParsleyUI;\r\n","import $ from 'jquery';\r\nimport ParsleyAbstract from './abstract';\r\nimport ParsleyUtils from './utils';\r\n\r\nvar ParsleyForm = function (element, domOptions, options) {\r\n  this.__class__ = 'ParsleyForm';\r\n  this.__id__ = ParsleyUtils.generateID();\r\n\r\n  this.$element = $(element);\r\n  this.domOptions = domOptions;\r\n  this.options = options;\r\n  this.parent = window.Parsley;\r\n\r\n  this.fields = [];\r\n  this.validationResult = null;\r\n};\r\n\r\nvar statusMapping = {pending: null, resolved: true, rejected: false};\r\n\r\nParsleyForm.prototype = {\r\n  onSubmitValidate: function (event) {\r\n    // This is a Parsley generated submit event, do not validate, do not prevent, simply exit and keep normal behavior\r\n    if (true === event.parsley)\r\n      return;\r\n\r\n    // If we didn't come here through a submit button, use the first one in the form\r\n    var $submitSource = this._$submitSource || this.$element.find('input[type=\"submit\"], button[type=\"submit\"]').first();\r\n    this._$submitSource = null;\r\n    this.$element.find('.parsley-synthetic-submit-button').prop('disabled', true);\r\n    if ($submitSource.is('[formnovalidate]'))\r\n      return;\r\n\r\n    var promise = this.whenValidate({event});\r\n\r\n    if ('resolved' === promise.state() && false !== this._trigger('submit')) {\r\n      // All good, let event go through. We make this distinction because browsers\r\n      // differ in their handling of `submit` being called from inside a submit event [#1047]\r\n    } else {\r\n      // Rejected or pending: cancel this submit\r\n      event.stopImmediatePropagation();\r\n      event.preventDefault();\r\n      if ('pending' === promise.state())\r\n        promise.done(() => { this._submit($submitSource); });\r\n    }\r\n  },\r\n\r\n  onSubmitButton: function(event) {\r\n    this._$submitSource = $(event.target);\r\n  },\r\n  // internal\r\n  // _submit submits the form, this time without going through the validations.\r\n  // Care must be taken to \"fake\" the actual submit button being clicked.\r\n  _submit: function ($submitSource) {\r\n    if (false === this._trigger('submit'))\r\n      return;\r\n    // Add submit button's data\r\n    if ($submitSource) {\r\n      var $synthetic = this.$element.find('.parsley-synthetic-submit-button').prop('disabled', false);\r\n      if (0 === $synthetic.length)\r\n        $synthetic = $('<input class=\"parsley-synthetic-submit-button\" type=\"hidden\">').appendTo(this.$element);\r\n      $synthetic.attr({\r\n        name: $submitSource.attr('name'),\r\n        value: $submitSource.attr('value')\r\n      });\r\n    }\r\n\r\n    this.$element.trigger($.extend($.Event('submit'), {parsley: true}));\r\n  },\r\n\r\n  // Performs validation on fields while triggering events.\r\n  // @returns `true` if all validations succeeds, `false`\r\n  // if a failure is immediately detected, or `null`\r\n  // if dependant on a promise.\r\n  // Consider using `whenValidate` instead.\r\n  validate: function (options) {\r\n    if (arguments.length >= 1 && !$.isPlainObject(options)) {\r\n      ParsleyUtils.warnOnce('Calling validate on a parsley form without passing arguments as an object is deprecated.');\r\n      var [group, force, event] = arguments;\r\n      options = {group, force, event};\r\n    }\r\n    return statusMapping[ this.whenValidate(options).state() ];\r\n  },\r\n\r\n  whenValidate: function ({group, force, event} = {}) {\r\n    this.submitEvent = event;\r\n    if (event) {\r\n      this.submitEvent = $.extend({}, event, {preventDefault: () => {\r\n        ParsleyUtils.warnOnce(\"Using `this.submitEvent.preventDefault()` is deprecated; instead, call `this.validationResult = false`\");\r\n        this.validationResult = false;\r\n      }});\r\n    }\r\n    this.validationResult = true;\r\n\r\n    // fire validate event to eventually modify things before very validation\r\n    this._trigger('validate');\r\n\r\n    // Refresh form DOM options and form's fields that could have changed\r\n    this._refreshFields();\r\n\r\n    var promises = this._withoutReactualizingFormOptions(() => {\r\n      return $.map(this.fields, field => {\r\n        return field.whenValidate({force, group});\r\n      });\r\n    });\r\n\r\n    var promiseBasedOnValidationResult = () => {\r\n      var r = $.Deferred();\r\n      if (false === this.validationResult)\r\n        r.reject();\r\n      return r.resolve().promise();\r\n    };\r\n\r\n    return $.when(...promises)\r\n      .done(  () => { this._trigger('success'); })\r\n      .fail(  () => {\r\n        this.validationResult = false;\r\n        this.focus();\r\n        this._trigger('error');\r\n      })\r\n      .always(() => { this._trigger('validated'); })\r\n      .pipe(  promiseBasedOnValidationResult, promiseBasedOnValidationResult);\r\n  },\r\n\r\n  // Iterate over refreshed fields, and stop on first failure.\r\n  // Returns `true` if all fields are valid, `false` if a failure is detected\r\n  // or `null` if the result depends on an unresolved promise.\r\n  // Prefer using `whenValid` instead.\r\n  isValid: function (options) {\r\n    if (arguments.length >= 1 && !$.isPlainObject(options)) {\r\n      ParsleyUtils.warnOnce('Calling isValid on a parsley form without passing arguments as an object is deprecated.');\r\n      var [group, force] = arguments;\r\n      options = {group, force};\r\n    }\r\n    return statusMapping[ this.whenValid(options).state() ];\r\n  },\r\n\r\n  // Iterate over refreshed fields and validate them.\r\n  // Returns a promise.\r\n  // A validation that immediately fails will interrupt the validations.\r\n  whenValid: function ({group, force} = {}) {\r\n    this._refreshFields();\r\n\r\n    var promises = this._withoutReactualizingFormOptions(() => {\r\n      return $.map(this.fields, field => {\r\n        return field.whenValid({group, force});\r\n      });\r\n    });\r\n    return $.when(...promises);\r\n  },\r\n\r\n  _refreshFields: function () {\r\n    return this.actualizeOptions()._bindFields();\r\n  },\r\n\r\n  _bindFields: function () {\r\n    var oldFields = this.fields;\r\n\r\n    this.fields = [];\r\n    this.fieldsMappedById = {};\r\n\r\n    this._withoutReactualizingFormOptions(() => {\r\n      this.$element\r\n      .find(this.options.inputs)\r\n      .not(this.options.excluded)\r\n      .each((_, element) => {\r\n        var fieldInstance = new window.Parsley.Factory(element, {}, this);\r\n\r\n        // Only add valid and not excluded `ParsleyField` and `ParsleyFieldMultiple` children\r\n        if (('ParsleyField' === fieldInstance.__class__ || 'ParsleyFieldMultiple' === fieldInstance.__class__) && (true !== fieldInstance.options.excluded))\r\n          if ('undefined' === typeof this.fieldsMappedById[fieldInstance.__class__ + '-' + fieldInstance.__id__]) {\r\n            this.fieldsMappedById[fieldInstance.__class__ + '-' + fieldInstance.__id__] = fieldInstance;\r\n            this.fields.push(fieldInstance);\r\n          }\r\n      });\r\n\r\n      $(oldFields).not(this.fields).each((_, field) => {\r\n        field._trigger('reset');\r\n      });\r\n    });\r\n    return this;\r\n  },\r\n\r\n  // Internal only.\r\n  // Looping on a form's fields to do validation or similar\r\n  // will trigger reactualizing options on all of them, which\r\n  // in turn will reactualize the form's options.\r\n  // To avoid calling actualizeOptions so many times on the form\r\n  // for nothing, _withoutReactualizingFormOptions temporarily disables\r\n  // the method actualizeOptions on this form while `fn` is called.\r\n  _withoutReactualizingFormOptions: function (fn) {\r\n    var oldActualizeOptions = this.actualizeOptions;\r\n    this.actualizeOptions = function () { return this; };\r\n    var result = fn();\r\n    this.actualizeOptions = oldActualizeOptions;\r\n    return result;\r\n  },\r\n\r\n  // Internal only.\r\n  // Shortcut to trigger an event\r\n  // Returns true iff event is not interrupted and default not prevented.\r\n  _trigger: function (eventName) {\r\n    return this.trigger('form:' + eventName);\r\n  }\r\n\r\n};\r\n\r\nexport default ParsleyForm;\r\n","import $ from 'jquery';\r\nimport ParsleyUtils from '../utils';\r\nimport ParsleyValidator from '../validator';\r\n\r\n\r\nvar ConstraintFactory = function (parsleyField, name, requirements, priority, isDomConstraint) {\r\n  if (!/ParsleyField/.test(parsleyField.__class__))\r\n    throw new Error('ParsleyField or ParsleyFieldMultiple instance expected');\r\n\r\n  var validatorSpec = window.Parsley._validatorRegistry.validators[name];\r\n  var validator = new ParsleyValidator(validatorSpec);\r\n\r\n  $.extend(this, {\r\n    validator: validator,\r\n    name: name,\r\n    requirements: requirements,\r\n    priority: priority || parsleyField.options[name + 'Priority'] || validator.priority,\r\n    isDomConstraint: true === isDomConstraint\r\n  });\r\n  this._parseRequirements(parsleyField.options);\r\n};\r\n\r\nvar capitalize = function(str) {\r\n  var cap = str[0].toUpperCase();\r\n  return cap + str.slice(1);\r\n};\r\n\r\nConstraintFactory.prototype = {\r\n  validate: function(value, instance) {\r\n    var args = this.requirementList.slice(0); // Make copy\r\n    args.unshift(value);\r\n    args.push(instance);\r\n    return this.validator.validate.apply(this.validator, args);\r\n  },\r\n\r\n  _parseRequirements: function(options) {\r\n    this.requirementList = this.validator.parseRequirements(this.requirements, key => {\r\n      return options[this.name + capitalize(key)];\r\n    });\r\n  }\r\n};\r\n\r\nexport default ConstraintFactory;\r\n\r\n","import $ from 'jquery';\r\nimport ConstraintFactory from './factory/constraint';\r\nimport ParsleyUI from './ui';\r\nimport ParsleyUtils from './utils';\r\n\r\nvar ParsleyField = function (field, domOptions, options, parsleyFormInstance) {\r\n  this.__class__ = 'ParsleyField';\r\n  this.__id__ = ParsleyUtils.generateID();\r\n\r\n  this.$element = $(field);\r\n\r\n  // Set parent if we have one\r\n  if ('undefined' !== typeof parsleyFormInstance) {\r\n    this.parent = parsleyFormInstance;\r\n  }\r\n\r\n  this.options = options;\r\n  this.domOptions = domOptions;\r\n\r\n  // Initialize some properties\r\n  this.constraints = [];\r\n  this.constraintsByName = {};\r\n  this.validationResult = [];\r\n\r\n  // Bind constraints\r\n  this._bindConstraints();\r\n};\r\n\r\nvar statusMapping = {pending: null, resolved: true, rejected: false};\r\n\r\nParsleyField.prototype = {\r\n  // # Public API\r\n  // Validate field and trigger some events for mainly `ParsleyUI`\r\n  // @returns `true`, an array of the validators that failed, or\r\n  // `null` if validation is not finished. Prefer using whenValidate\r\n  validate: function (options) {\r\n    if (arguments.length >= 1 && !$.isPlainObject(options)) {\r\n      ParsleyUtils.warnOnce('Calling validate on a parsley field without passing arguments as an object is deprecated.');\r\n      options = {options};\r\n    }\r\n    var promise = this.whenValidate(options);\r\n    if (!promise)  // If excluded with `group` option\r\n      return true;\r\n    switch (promise.state()) {\r\n      case 'pending': return null;\r\n      case 'resolved': return true;\r\n      case 'rejected': return this.validationResult;\r\n    }\r\n  },\r\n\r\n  // Validate field and trigger some events for mainly `ParsleyUI`\r\n  // @returns a promise that succeeds only when all validations do\r\n  // or `undefined` if field is not in the given `group`.\r\n  whenValidate: function ({force, group} =  {}) {\r\n    // do not validate a field if not the same as given validation group\r\n    this.refreshConstraints();\r\n    if (group && !this._isInGroup(group))\r\n      return;\r\n\r\n    this.value = this.getValue();\r\n\r\n    // Field Validate event. `this.value` could be altered for custom needs\r\n    this._trigger('validate');\r\n\r\n    return this.whenValid({force, value: this.value, _refreshed: true})\r\n      .always(() => { this._reflowUI(); })\r\n      .done(() =>   { this._trigger('success'); })\r\n      .fail(() =>   { this._trigger('error'); })\r\n      .always(() => { this._trigger('validated'); });\r\n  },\r\n\r\n  hasConstraints: function () {\r\n    return 0 !== this.constraints.length;\r\n  },\r\n\r\n  // An empty optional field does not need validation\r\n  needsValidation: function (value) {\r\n    if ('undefined' === typeof value)\r\n      value = this.getValue();\r\n\r\n    // If a field is empty and not required, it is valid\r\n    // Except if `data-parsley-validate-if-empty` explicitely added, useful for some custom validators\r\n    if (!value.length && !this._isRequired() && 'undefined' === typeof this.options.validateIfEmpty)\r\n      return false;\r\n\r\n    return true;\r\n  },\r\n\r\n  _isInGroup: function (group) {\r\n    if ($.isArray(this.options.group))\r\n      return -1 !== $.inArray(group, this.options.group);\r\n    return this.options.group === group;\r\n  },\r\n\r\n  // Just validate field. Do not trigger any event.\r\n  // Returns `true` iff all constraints pass, `false` if there are failures,\r\n  // or `null` if the result can not be determined yet (depends on a promise)\r\n  // See also `whenValid`.\r\n  isValid: function (options) {\r\n    if (arguments.length >= 1 && !$.isPlainObject(options)) {\r\n      ParsleyUtils.warnOnce('Calling isValid on a parsley field without passing arguments as an object is deprecated.');\r\n      var [force, value] = arguments;\r\n      options = {force, value};\r\n    }\r\n    var promise = this.whenValid(options);\r\n    if (!promise) // Excluded via `group`\r\n      return true;\r\n    return statusMapping[promise.state()];\r\n  },\r\n\r\n  // Just validate field. Do not trigger any event.\r\n  // @returns a promise that succeeds only when all validations do\r\n  // or `undefined` if the field is not in the given `group`.\r\n  // The argument `force` will force validation of empty fields.\r\n  // If a `value` is given, it will be validated instead of the value of the input.\r\n  whenValid: function ({force = false, value, group, _refreshed} = {}) {\r\n    // Recompute options and rebind constraints to have latest changes\r\n    if (!_refreshed)\r\n      this.refreshConstraints();\r\n    // do not validate a field if not the same as given validation group\r\n    if (group && !this._isInGroup(group))\r\n      return;\r\n\r\n    this.validationResult = true;\r\n\r\n    // A field without constraint is valid\r\n    if (!this.hasConstraints())\r\n      return $.when();\r\n\r\n    // Value could be passed as argument, needed to add more power to 'parsley:field:validate'\r\n    if ('undefined' === typeof value || null === value)\r\n      value = this.getValue();\r\n\r\n    if (!this.needsValidation(value) && true !== force)\r\n      return $.when();\r\n\r\n    var groupedConstraints = this._getGroupedConstraints();\r\n    var promises = [];\r\n    $.each(groupedConstraints, (_, constraints) => {\r\n      // Process one group of constraints at a time, we validate the constraints\r\n      // and combine the promises together.\r\n      var promise = $.when(\r\n        ...$.map(constraints, constraint => this._validateConstraint(value, constraint))\r\n      );\r\n      promises.push(promise);\r\n      if (promise.state() === 'rejected')\r\n        return false; // Interrupt processing if a group has already failed\r\n    });\r\n    return $.when.apply($, promises);\r\n  },\r\n\r\n  // @returns a promise\r\n  _validateConstraint: function(value, constraint) {\r\n    var result = constraint.validate(value, this);\r\n    // Map false to a failed promise\r\n    if (false === result)\r\n      result = $.Deferred().reject();\r\n    // Make sure we return a promise and that we record failures\r\n    return $.when(result).fail(errorMessage => {\r\n      if (true === this.validationResult)\r\n        this.validationResult = [];\r\n      this.validationResult.push({\r\n        assert: constraint,\r\n        errorMessage: 'string' === typeof errorMessage && errorMessage\r\n      });\r\n    });\r\n  },\r\n\r\n  // @returns Parsley field computed value that could be overrided or configured in DOM\r\n  getValue: function () {\r\n    var value;\r\n\r\n    // Value could be overriden in DOM or with explicit options\r\n    if ('function' === typeof this.options.value)\r\n      value = this.options.value(this);\r\n    else if ('undefined' !== typeof this.options.value)\r\n      value = this.options.value;\r\n    else\r\n      value = this.$element.val();\r\n\r\n    // Handle wrong DOM or configurations\r\n    if ('undefined' === typeof value || null === value)\r\n      return '';\r\n\r\n    return this._handleWhitespace(value);\r\n  },\r\n\r\n  // Actualize options that could have change since previous validation\r\n  // Re-bind accordingly constraints (could be some new, removed or updated)\r\n  refreshConstraints: function () {\r\n    return this.actualizeOptions()._bindConstraints();\r\n  },\r\n\r\n  /**\r\n  * Add a new constraint to a field\r\n  *\r\n  * @param {String}   name\r\n  * @param {Mixed}    requirements      optional\r\n  * @param {Number}   priority          optional\r\n  * @param {Boolean}  isDomConstraint   optional\r\n  */\r\n  addConstraint: function (name, requirements, priority, isDomConstraint) {\r\n\r\n    if (window.Parsley._validatorRegistry.validators[name]) {\r\n      var constraint = new ConstraintFactory(this, name, requirements, priority, isDomConstraint);\r\n\r\n      // if constraint already exist, delete it and push new version\r\n      if ('undefined' !== this.constraintsByName[constraint.name])\r\n        this.removeConstraint(constraint.name);\r\n\r\n      this.constraints.push(constraint);\r\n      this.constraintsByName[constraint.name] = constraint;\r\n    }\r\n\r\n    return this;\r\n  },\r\n\r\n  // Remove a constraint\r\n  removeConstraint: function (name) {\r\n    for (var i = 0; i < this.constraints.length; i++)\r\n      if (name === this.constraints[i].name) {\r\n        this.constraints.splice(i, 1);\r\n        break;\r\n      }\r\n    delete this.constraintsByName[name];\r\n    return this;\r\n  },\r\n\r\n  // Update a constraint (Remove + re-add)\r\n  updateConstraint: function (name, parameters, priority) {\r\n    return this.removeConstraint(name)\r\n      .addConstraint(name, parameters, priority);\r\n  },\r\n\r\n  // # Internals\r\n\r\n  // Internal only.\r\n  // Bind constraints from config + options + DOM\r\n  _bindConstraints: function () {\r\n    var constraints = [];\r\n    var constraintsByName = {};\r\n\r\n    // clean all existing DOM constraints to only keep javascript user constraints\r\n    for (var i = 0; i < this.constraints.length; i++)\r\n      if (false === this.constraints[i].isDomConstraint) {\r\n        constraints.push(this.constraints[i]);\r\n        constraintsByName[this.constraints[i].name] = this.constraints[i];\r\n      }\r\n\r\n    this.constraints = constraints;\r\n    this.constraintsByName = constraintsByName;\r\n\r\n    // then re-add Parsley DOM-API constraints\r\n    for (var name in this.options)\r\n      this.addConstraint(name, this.options[name], undefined, true);\r\n\r\n    // finally, bind special HTML5 constraints\r\n    return this._bindHtml5Constraints();\r\n  },\r\n\r\n  // Internal only.\r\n  // Bind specific HTML5 constraints to be HTML5 compliant\r\n  _bindHtml5Constraints: function () {\r\n    // html5 required\r\n    if (this.$element.hasClass('required') || this.$element.attr('required'))\r\n      this.addConstraint('required', true, undefined, true);\r\n\r\n    // html5 pattern\r\n    if ('string' === typeof this.$element.attr('pattern'))\r\n      this.addConstraint('pattern', this.$element.attr('pattern'), undefined, true);\r\n\r\n    // range\r\n    if ('undefined' !== typeof this.$element.attr('min') && 'undefined' !== typeof this.$element.attr('max'))\r\n      this.addConstraint('range', [this.$element.attr('min'), this.$element.attr('max')], undefined, true);\r\n\r\n    // HTML5 min\r\n    else if ('undefined' !== typeof this.$element.attr('min'))\r\n      this.addConstraint('min', this.$element.attr('min'), undefined, true);\r\n\r\n    // HTML5 max\r\n    else if ('undefined' !== typeof this.$element.attr('max'))\r\n      this.addConstraint('max', this.$element.attr('max'), undefined, true);\r\n\r\n\r\n    // length\r\n    if ('undefined' !== typeof this.$element.attr('minlength') && 'undefined' !== typeof this.$element.attr('maxlength'))\r\n      this.addConstraint('length', [this.$element.attr('minlength'), this.$element.attr('maxlength')], undefined, true);\r\n\r\n    // HTML5 minlength\r\n    else if ('undefined' !== typeof this.$element.attr('minlength'))\r\n      this.addConstraint('minlength', this.$element.attr('minlength'), undefined, true);\r\n\r\n    // HTML5 maxlength\r\n    else if ('undefined' !== typeof this.$element.attr('maxlength'))\r\n      this.addConstraint('maxlength', this.$element.attr('maxlength'), undefined, true);\r\n\r\n\r\n    // html5 types\r\n    var type = this.$element.attr('type');\r\n\r\n    if ('undefined' === typeof type)\r\n      return this;\r\n\r\n    // Small special case here for HTML5 number: integer validator if step attribute is undefined or an integer value, number otherwise\r\n    if ('number' === type) {\r\n      return this.addConstraint('type', ['number', {\r\n        step: this.$element.attr('step'),\r\n        base: this.$element.attr('min') || this.$element.attr('value')\r\n      }], undefined, true);\r\n    // Regular other HTML5 supported types\r\n    } else if (/^(email|url|range)$/i.test(type)) {\r\n      return this.addConstraint('type', type, undefined, true);\r\n    }\r\n    return this;\r\n  },\r\n\r\n  // Internal only.\r\n  // Field is required if have required constraint without `false` value\r\n  _isRequired: function () {\r\n    if ('undefined' === typeof this.constraintsByName.required)\r\n      return false;\r\n\r\n    return false !== this.constraintsByName.required.requirements;\r\n  },\r\n\r\n  // Internal only.\r\n  // Shortcut to trigger an event\r\n  _trigger: function (eventName) {\r\n    return this.trigger('field:' + eventName);\r\n  },\r\n\r\n  // Internal only\r\n  // Handles whitespace in a value\r\n  // Use `data-parsley-whitespace=\"squish\"` to auto squish input value\r\n  // Use `data-parsley-whitespace=\"trim\"` to auto trim input value\r\n  _handleWhitespace: function (value) {\r\n    if (true === this.options.trimValue)\r\n      ParsleyUtils.warnOnce('data-parsley-trim-value=\"true\" is deprecated, please use data-parsley-whitespace=\"trim\"');\r\n\r\n    if ('squish' === this.options.whitespace)\r\n      value = value.replace(/\\s{2,}/g, ' ');\r\n\r\n    if (('trim' === this.options.whitespace) || ('squish' === this.options.whitespace) || (true === this.options.trimValue))\r\n      value = ParsleyUtils.trimString(value);\r\n\r\n    return value;\r\n  },\r\n\r\n  // Internal only.\r\n  // Returns the constraints, grouped by descending priority.\r\n  // The result is thus an array of arrays of constraints.\r\n  _getGroupedConstraints: function () {\r\n    if (false === this.options.priorityEnabled)\r\n      return [this.constraints];\r\n\r\n    var groupedConstraints = [];\r\n    var index = {};\r\n\r\n    // Create array unique of priorities\r\n    for (var i = 0; i < this.constraints.length; i++) {\r\n      var p = this.constraints[i].priority;\r\n      if (!index[p])\r\n        groupedConstraints.push(index[p] = []);\r\n      index[p].push(this.constraints[i]);\r\n    }\r\n    // Sort them by priority DESC\r\n    groupedConstraints.sort(function (a, b) { return b[0].priority - a[0].priority; });\r\n\r\n    return groupedConstraints;\r\n  }\r\n\r\n};\r\n\r\nexport default ParsleyField;\r\n","import $ from 'jquery';\r\n\r\nvar ParsleyMultiple = function () {\r\n  this.__class__ = 'ParsleyFieldMultiple';\r\n};\r\n\r\nParsleyMultiple.prototype = {\r\n  // Add new `$element` sibling for multiple field\r\n  addElement: function ($element) {\r\n    this.$elements.push($element);\r\n\r\n    return this;\r\n  },\r\n\r\n  // See `ParsleyField.refreshConstraints()`\r\n  refreshConstraints: function () {\r\n    var fieldConstraints;\r\n\r\n    this.constraints = [];\r\n\r\n    // Select multiple special treatment\r\n    if (this.$element.is('select')) {\r\n      this.actualizeOptions()._bindConstraints();\r\n\r\n      return this;\r\n    }\r\n\r\n    // Gather all constraints for each input in the multiple group\r\n    for (var i = 0; i < this.$elements.length; i++) {\r\n\r\n      // Check if element have not been dynamically removed since last binding\r\n      if (!$('html').has(this.$elements[i]).length) {\r\n        this.$elements.splice(i, 1);\r\n        continue;\r\n      }\r\n\r\n      fieldConstraints = this.$elements[i].data('ParsleyFieldMultiple').refreshConstraints().constraints;\r\n\r\n      for (var j = 0; j < fieldConstraints.length; j++)\r\n        this.addConstraint(fieldConstraints[j].name, fieldConstraints[j].requirements, fieldConstraints[j].priority, fieldConstraints[j].isDomConstraint);\r\n    }\r\n\r\n    return this;\r\n  },\r\n\r\n  // See `ParsleyField.getValue()`\r\n  getValue: function () {\r\n    // Value could be overriden in DOM\r\n    if ('function' === typeof this.options.value)\r\n      value = this.options.value(this);\r\n    else if ('undefined' !== typeof this.options.value)\r\n      return this.options.value;\r\n\r\n    // Radio input case\r\n    if (this.$element.is('input[type=radio]'))\r\n      return this._findRelated().filter(':checked').val() || '';\r\n\r\n    // checkbox input case\r\n    if (this.$element.is('input[type=checkbox]')) {\r\n      var values = [];\r\n\r\n      this._findRelated().filter(':checked').each(function () {\r\n        values.push($(this).val());\r\n      });\r\n\r\n      return values;\r\n    }\r\n\r\n    // Select multiple case\r\n    if (this.$element.is('select') && null === this.$element.val())\r\n      return [];\r\n\r\n    // Default case that should never happen\r\n    return this.$element.val();\r\n  },\r\n\r\n  _init: function () {\r\n    this.$elements = [this.$element];\r\n\r\n    return this;\r\n  }\r\n};\r\n\r\nexport default ParsleyMultiple;\r\n","import $ from 'jquery';\r\nimport ParsleyUtils from './utils';\r\nimport ParsleyAbstract from './abstract';\r\nimport ParsleyForm from './form';\r\nimport ParsleyField from './field';\r\nimport ParsleyMultiple from './multiple';\r\n\r\nvar ParsleyFactory = function (element, options, parsleyFormInstance) {\r\n  this.$element = $(element);\r\n\r\n  // If the element has already been bound, returns its saved Parsley instance\r\n  var savedparsleyFormInstance = this.$element.data('Parsley');\r\n  if (savedparsleyFormInstance) {\r\n\r\n    // If the saved instance has been bound without a ParsleyForm parent and there is one given in this call, add it\r\n    if ('undefined' !== typeof parsleyFormInstance && savedparsleyFormInstance.parent === window.Parsley) {\r\n      savedparsleyFormInstance.parent = parsleyFormInstance;\r\n      savedparsleyFormInstance._resetOptions(savedparsleyFormInstance.options);\r\n    }\r\n\r\n    return savedparsleyFormInstance;\r\n  }\r\n\r\n  // Parsley must be instantiated with a DOM element or jQuery $element\r\n  if (!this.$element.length)\r\n    throw new Error('You must bind Parsley on an existing element.');\r\n\r\n  if ('undefined' !== typeof parsleyFormInstance && 'ParsleyForm' !== parsleyFormInstance.__class__)\r\n    throw new Error('Parent instance must be a ParsleyForm instance');\r\n\r\n  this.parent = parsleyFormInstance || window.Parsley;\r\n  return this.init(options);\r\n};\r\n\r\nParsleyFactory.prototype = {\r\n  init: function (options) {\r\n    this.__class__ = 'Parsley';\r\n    this.__version__ = '@@version';\r\n    this.__id__ = ParsleyUtils.generateID();\r\n\r\n    // Pre-compute options\r\n    this._resetOptions(options);\r\n\r\n    // A ParsleyForm instance is obviously a `<form>` element but also every node that is not an input and has the `data-parsley-validate` attribute\r\n    if (this.$element.is('form') || (ParsleyUtils.checkAttr(this.$element, this.options.namespace, 'validate') && !this.$element.is(this.options.inputs)))\r\n      return this.bind('parsleyForm');\r\n\r\n    // Every other element is bound as a `ParsleyField` or `ParsleyFieldMultiple`\r\n    return this.isMultiple() ? this.handleMultiple() : this.bind('parsleyField');\r\n  },\r\n\r\n  isMultiple: function () {\r\n    return (this.$element.is('input[type=radio], input[type=checkbox]')) || (this.$element.is('select') && 'undefined' !== typeof this.$element.attr('multiple'));\r\n  },\r\n\r\n  // Multiples fields are a real nightmare :(\r\n  // Maybe some refactoring would be appreciated here...\r\n  handleMultiple: function () {\r\n    var name;\r\n    var multiple;\r\n    var parsleyMultipleInstance;\r\n\r\n    // Handle multiple name\r\n    if (this.options.multiple)\r\n      ; // We already have our 'multiple' identifier\r\n    else if ('undefined' !== typeof this.$element.attr('name') && this.$element.attr('name').length)\r\n      this.options.multiple = name = this.$element.attr('name');\r\n    else if ('undefined' !== typeof this.$element.attr('id') && this.$element.attr('id').length)\r\n      this.options.multiple = this.$element.attr('id');\r\n\r\n    // Special select multiple input\r\n    if (this.$element.is('select') && 'undefined' !== typeof this.$element.attr('multiple')) {\r\n      this.options.multiple = this.options.multiple || this.__id__;\r\n      return this.bind('parsleyFieldMultiple');\r\n\r\n    // Else for radio / checkboxes, we need a `name` or `data-parsley-multiple` to properly bind it\r\n    } else if (!this.options.multiple) {\r\n      ParsleyUtils.warn('To be bound by Parsley, a radio, a checkbox and a multiple select input must have either a name or a multiple option.', this.$element);\r\n      return this;\r\n    }\r\n\r\n    // Remove special chars\r\n    this.options.multiple = this.options.multiple.replace(/(:|\\.|\\[|\\]|\\{|\\}|\\$)/g, '');\r\n\r\n    // Add proper `data-parsley-multiple` to siblings if we have a valid multiple name\r\n    if ('undefined' !== typeof name) {\r\n      $('input[name=\"' + name + '\"]').each((i, input) => {\r\n        if ($(input).is('input[type=radio], input[type=checkbox]'))\r\n          $(input).attr(this.options.namespace + 'multiple', this.options.multiple);\r\n      });\r\n    }\r\n\r\n    // Check here if we don't already have a related multiple instance saved\r\n    var $previouslyRelated = this._findRelated();\r\n    for (var i = 0; i < $previouslyRelated.length; i++) {\r\n      parsleyMultipleInstance = $($previouslyRelated.get(i)).data('Parsley');\r\n      if ('undefined' !== typeof parsleyMultipleInstance) {\r\n\r\n        if (!this.$element.data('ParsleyFieldMultiple')) {\r\n          parsleyMultipleInstance.addElement(this.$element);\r\n        }\r\n\r\n        break;\r\n      }\r\n    }\r\n\r\n    // Create a secret ParsleyField instance for every multiple field. It will be stored in `data('ParsleyFieldMultiple')`\r\n    // And will be useful later to access classic `ParsleyField` stuff while being in a `ParsleyFieldMultiple` instance\r\n    this.bind('parsleyField', true);\r\n\r\n    return parsleyMultipleInstance || this.bind('parsleyFieldMultiple');\r\n  },\r\n\r\n  // Return proper `ParsleyForm`, `ParsleyField` or `ParsleyFieldMultiple`\r\n  bind: function (type, doNotStore) {\r\n    var parsleyInstance;\r\n\r\n    switch (type) {\r\n      case 'parsleyForm':\r\n        parsleyInstance = $.extend(\r\n          new ParsleyForm(this.$element, this.domOptions, this.options),\r\n          window.ParsleyExtend\r\n        )._bindFields();\r\n        break;\r\n      case 'parsleyField':\r\n        parsleyInstance = $.extend(\r\n          new ParsleyField(this.$element, this.domOptions, this.options, this.parent),\r\n          window.ParsleyExtend\r\n        );\r\n        break;\r\n      case 'parsleyFieldMultiple':\r\n        parsleyInstance = $.extend(\r\n          new ParsleyField(this.$element, this.domOptions, this.options, this.parent),\r\n          new ParsleyMultiple(),\r\n          window.ParsleyExtend\r\n        )._init();\r\n        break;\r\n      default:\r\n        throw new Error(type + 'is not a supported Parsley type');\r\n    }\r\n\r\n    if (this.options.multiple)\r\n      ParsleyUtils.setAttr(this.$element, this.options.namespace, 'multiple', this.options.multiple);\r\n\r\n    if ('undefined' !== typeof doNotStore) {\r\n      this.$element.data('ParsleyFieldMultiple', parsleyInstance);\r\n\r\n      return parsleyInstance;\r\n    }\r\n\r\n    // Store the freshly bound instance in a DOM element for later access using jQuery `data()`\r\n    this.$element.data('Parsley', parsleyInstance);\r\n\r\n    // Tell the world we have a new ParsleyForm or ParsleyField instance!\r\n    parsleyInstance._actualizeTriggers();\r\n    parsleyInstance._trigger('init');\r\n\r\n    return parsleyInstance;\r\n  }\r\n};\r\n\r\nexport default ParsleyFactory;\r\n","import $ from 'jquery';\r\nimport ParsleyUtils from './utils';\r\nimport ParsleyDefaults from './defaults';\r\nimport ParsleyAbstract from './abstract';\r\nimport ParsleyValidatorRegistry from './validator_registry';\r\nimport ParsleyUI from './ui';\r\nimport ParsleyForm from './form';\r\nimport ParsleyField from './field';\r\nimport ParsleyMultiple from './multiple';\r\nimport ParsleyFactory from './factory';\r\n\r\nvar vernums = $.fn.jquery.split('.');\r\nif (parseInt(vernums[0]) <= 1 && parseInt(vernums[1]) < 8) {\r\n  throw \"The loaded version of jQuery is too old. Please upgrade to 1.8.x or better.\";\r\n}\r\nif (!vernums.forEach) {\r\n  ParsleyUtils.warn('Parsley requires ES5 to run properly. Please include https://github.com/es-shims/es5-shim');\r\n}\r\n// Inherit `on`, `off` & `trigger` to Parsley:\r\nvar Parsley = $.extend(new ParsleyAbstract(), {\r\n    $element: $(document),\r\n    actualizeOptions: null,\r\n    _resetOptions: null,\r\n    Factory: ParsleyFactory,\r\n    version: '@@version'\r\n  });\r\n\r\n// Supplement ParsleyField and Form with ParsleyAbstract\r\n// This way, the constructors will have access to those methods\r\n$.extend(ParsleyField.prototype, ParsleyUI.Field, ParsleyAbstract.prototype);\r\n$.extend(ParsleyForm.prototype, ParsleyUI.Form, ParsleyAbstract.prototype);\r\n// Inherit actualizeOptions and _resetOptions:\r\n$.extend(ParsleyFactory.prototype, ParsleyAbstract.prototype);\r\n\r\n// ### jQuery API\r\n// `$('.elem').parsley(options)` or `$('.elem').psly(options)`\r\n$.fn.parsley = $.fn.psly = function (options) {\r\n  if (this.length > 1) {\r\n    var instances = [];\r\n\r\n    this.each(function () {\r\n      instances.push($(this).parsley(options));\r\n    });\r\n\r\n    return instances;\r\n  }\r\n\r\n  // Return undefined if applied to non existing DOM element\r\n  if (!$(this).length) {\r\n    ParsleyUtils.warn('You must bind Parsley on an existing element.');\r\n\r\n    return;\r\n  }\r\n\r\n  return new ParsleyFactory(this, options);\r\n};\r\n\r\n// ### ParsleyField and ParsleyForm extension\r\n// Ensure the extension is now defined if it wasn't previously\r\nif ('undefined' === typeof window.ParsleyExtend)\r\n  window.ParsleyExtend = {};\r\n\r\n// ### Parsley config\r\n// Inherit from ParsleyDefault, and copy over any existing values\r\nParsley.options = $.extend(ParsleyUtils.objectCreate(ParsleyDefaults), window.ParsleyConfig);\r\nwindow.ParsleyConfig = Parsley.options; // Old way of accessing global options\r\n\r\n// ### Globals\r\nwindow.Parsley = window.psly = Parsley;\r\nwindow.ParsleyUtils = ParsleyUtils;\r\n\r\n// ### Define methods that forward to the registry, and deprecate all access except through window.Parsley\r\nvar registry = window.Parsley._validatorRegistry = new ParsleyValidatorRegistry(window.ParsleyConfig.validators, window.ParsleyConfig.i18n);\r\nwindow.ParsleyValidator = {};\r\n$.each('setLocale addCatalog addMessage addMessages getErrorMessage formatMessage addValidator updateValidator removeValidator'.split(' '), function (i, method) {\r\n  window.Parsley[method] = $.proxy(registry, method);\r\n  window.ParsleyValidator[method] = function () {\r\n    ParsleyUtils.warnOnce(`Accessing the method '${method}' through ParsleyValidator is deprecated. Simply call 'window.Parsley.${method}(...)'`);\r\n    return window.Parsley[method](...arguments);\r\n  };\r\n});\r\n\r\n// ### ParsleyUI\r\n// Deprecated global object\r\nwindow.Parsley.UI = ParsleyUI;\r\nwindow.ParsleyUI = {\r\n  removeError: function (instance, name, doNotUpdateClass) {\r\n    var updateClass = true !== doNotUpdateClass;\r\n    ParsleyUtils.warnOnce(`Accessing ParsleyUI is deprecated. Call 'removeError' on the instance directly. Please comment in issue 1073 as to your need to call this method.`);\r\n    return instance.removeError(name, {updateClass});\r\n  },\r\n  getErrorsMessages: function (instance) {\r\n    ParsleyUtils.warnOnce(`Accessing ParsleyUI is deprecated. Call 'getErrorsMessages' on the instance directly.`);\r\n    return instance.getErrorsMessages();\r\n  }\r\n};\r\n$.each('addError updateError'.split(' '), function (i, method) {\r\n  window.ParsleyUI[method] = function (instance, name, message, assert, doNotUpdateClass) {\r\n    var updateClass = true !== doNotUpdateClass;\r\n    ParsleyUtils.warnOnce(`Accessing ParsleyUI is deprecated. Call '${method}' on the instance directly. Please comment in issue 1073 as to your need to call this method.`);\r\n    return instance[method](name, {message, assert, updateClass});\r\n  };\r\n});\r\n\r\n// Alleviate glaring Firefox bug https://bugzilla.mozilla.org/show_bug.cgi?id=1250521\r\n// See also https://github.com/guillaumepotier/Parsley.js/issues/1068\r\nif (/firefox/i.test(navigator.userAgent)) {\r\n  $(document).on('change', 'select', evt => {\r\n    $(evt.target).trigger('input');\r\n  });\r\n}\r\n\r\n// ### PARSLEY auto-binding\r\n// Prevent it by setting `ParsleyConfig.autoBind` to `false`\r\nif (false !== window.ParsleyConfig.autoBind) {\r\n  $(function () {\r\n    // Works only on `data-parsley-validate`.\r\n    if ($('[data-parsley-validate]').length)\r\n      $('[data-parsley-validate]').parsley();\r\n  });\r\n}\r\n\r\nexport default Parsley;\r\n","import $ from 'jquery';\r\nimport ParsleyField from './field';\r\nimport ParsleyForm from './form';\r\nimport ParsleyUtils from './utils';\r\n\r\nvar o = $({});\r\nvar deprecated = function () {\r\n  ParsleyUtils.warnOnce(\"Parsley's pubsub module is deprecated; use the 'on' and 'off' methods on parsley instances or window.Parsley\");\r\n};\r\n\r\n// Returns an event handler that calls `fn` with the arguments it expects\r\nfunction adapt(fn, context) {\r\n  // Store to allow unbinding\r\n  if (!fn.parsleyAdaptedCallback) {\r\n    fn.parsleyAdaptedCallback = function () {\r\n      var args = Array.prototype.slice.call(arguments, 0);\r\n      args.unshift(this);\r\n      fn.apply(context || o, args);\r\n    };\r\n  }\r\n  return fn.parsleyAdaptedCallback;\r\n}\r\n\r\nvar eventPrefix = 'parsley:';\r\n// Converts 'parsley:form:validate' into 'form:validate'\r\nfunction eventName(name) {\r\n  if (name.lastIndexOf(eventPrefix, 0) === 0)\r\n    return name.substr(eventPrefix.length);\r\n  return name;\r\n}\r\n\r\n// $.listen is deprecated. Use Parsley.on instead.\r\n$.listen = function (name, callback) {\r\n  var context;\r\n  deprecated();\r\n  if ('object' === typeof arguments[1] && 'function' === typeof arguments[2]) {\r\n    context = arguments[1];\r\n    callback = arguments[2];\r\n  }\r\n\r\n  if ('function' !== typeof callback)\r\n    throw new Error('Wrong parameters');\r\n\r\n  window.Parsley.on(eventName(name), adapt(callback, context));\r\n};\r\n\r\n$.listenTo = function (instance, name, fn) {\r\n  deprecated();\r\n  if (!(instance instanceof ParsleyField) && !(instance instanceof ParsleyForm))\r\n    throw new Error('Must give Parsley instance');\r\n\r\n  if ('string' !== typeof name || 'function' !== typeof fn)\r\n    throw new Error('Wrong parameters');\r\n\r\n  instance.on(eventName(name), adapt(fn));\r\n};\r\n\r\n$.unsubscribe = function (name, fn) {\r\n  deprecated();\r\n  if ('string' !== typeof name || 'function' !== typeof fn)\r\n    throw new Error('Wrong arguments');\r\n  window.Parsley.off(eventName(name), fn.parsleyAdaptedCallback);\r\n};\r\n\r\n$.unsubscribeTo = function (instance, name) {\r\n  deprecated();\r\n  if (!(instance instanceof ParsleyField) && !(instance instanceof ParsleyForm))\r\n    throw new Error('Must give Parsley instance');\r\n  instance.off(eventName(name));\r\n};\r\n\r\n$.unsubscribeAll = function (name) {\r\n  deprecated();\r\n  window.Parsley.off(eventName(name));\r\n  $('form,input,textarea,select').each(function () {\r\n    var instance = $(this).data('Parsley');\r\n    if (instance) {\r\n      instance.off(eventName(name));\r\n    }\r\n  });\r\n};\r\n\r\n// $.emit is deprecated. Use jQuery events instead.\r\n$.emit = function (name, instance) {\r\n  deprecated();\r\n  var instanceGiven = (instance instanceof ParsleyField) || (instance instanceof ParsleyForm);\r\n  var args = Array.prototype.slice.call(arguments, instanceGiven ? 2 : 1);\r\n  args.unshift(eventName(name));\r\n  if (!instanceGiven) {\r\n    instance = window.Parsley;\r\n  }\r\n  instance.trigger(...args);\r\n};\r\n\r\nexport default {};\r\n","import $ from 'jquery';\r\n\r\nimport Parsley from './main';\r\n\r\n$.extend(true, Parsley, {\r\n  asyncValidators: {\r\n    'default': {\r\n      fn: function (xhr) {\r\n        // By default, only status 2xx are deemed successful.\r\n        // Note: we use status instead of state() because responses with status 200\r\n        // but invalid messages (e.g. an empty body for content type set to JSON) will\r\n        // result in state() === 'rejected'.\r\n        return xhr.status >= 200 && xhr.status < 300;\r\n      },\r\n      url: false\r\n    },\r\n    reverse: {\r\n      fn: function (xhr) {\r\n        // If reverse option is set, a failing ajax request is considered successful\r\n        return xhr.status < 200 || xhr.status >= 300;\r\n      },\r\n      url: false\r\n    }\r\n  },\r\n\r\n  addAsyncValidator: function (name, fn, url, options) {\r\n    Parsley.asyncValidators[name] = {\r\n      fn: fn,\r\n      url: url || false,\r\n      options: options || {}\r\n    };\r\n\r\n    return this;\r\n  }\r\n\r\n});\r\n\r\nParsley.addValidator('remote', {\r\n  requirementType: {\r\n    '': 'string',\r\n    'validator': 'string',\r\n    'reverse': 'boolean',\r\n    'options': 'object'\r\n  },\r\n\r\n  validateString: function validateString(value, url, options, instance) {\r\n    var data = {};\r\n    var ajaxOptions;\r\n    var csr;\r\n    var validator = options.validator || (true === options.reverse ? 'reverse' : 'default');\r\n\r\n    if ('undefined' === typeof Parsley.asyncValidators[validator]) throw new Error('Calling an undefined async validator: `' + validator + '`');\r\n\r\n    url = Parsley.asyncValidators[validator].url || url;\r\n\r\n    // Fill current value\r\n    if (url.indexOf('{value}') > -1) {\r\n      url = url.replace('{value}', encodeURIComponent(value));\r\n    } else {\r\n      data[instance.$element.attr('name') || instance.$element.attr('id')] = value;\r\n    }\r\n\r\n    // Merge options passed in from the function with the ones in the attribute\r\n    var remoteOptions = $.extend(true, options.options || {}, Parsley.asyncValidators[validator].options);\r\n\r\n    // All `$.ajax(options)` could be overridden or extended directly from DOM in `data-parsley-remote-options`\r\n    ajaxOptions = $.extend(true, {}, {\r\n      url: url,\r\n      data: data,\r\n      type: 'GET',\r\n      useCache: true\r\n    }, remoteOptions);\r\n\r\n    if (ajaxOptions.useCache === \"false\") ajaxOptions.useCache = false;\r\n\r\n    // Generate store key based on ajax options\r\n    instance.trigger('field:ajaxoptions', instance, ajaxOptions);\r\n\r\n    if (ajaxOptions.useCache) {\r\n      try {\r\n        csr = $.param(ajaxOptions);\r\n      } catch (e) {\r\n        ajaxOptions.useCache = false;\r\n      }\r\n    }\r\n\r\n    // Initialise query cache\r\n    if ('undefined' === typeof Parsley._remoteCache) Parsley._remoteCache = {};\r\n\r\n    // Try to retrieve stored xhr\r\n    var xhr = ajaxOptions.useCache ? (Parsley._remoteCache[csr] = Parsley._remoteCache[csr] || $.ajax(ajaxOptions))\r\n                           : $.ajax(ajaxOptions);\r\n\r\n    var handleXhr = function handleXhr() {\r\n      var result = Parsley.asyncValidators[validator].fn.call(instance, xhr, url, options);\r\n      if (!result) // Map falsy results to rejected promise\r\n        result = $.Deferred().reject();\r\n      return $.when(result);\r\n    };\r\n\r\n    return xhr.then(handleXhr, handleXhr);\r\n  },\r\n\r\n  priority: -1\r\n});\r\n\r\nParsley.on('form:submit', function () {\r\n  Parsley._remoteCache = {};\r\n});\r\n\r\nwindow.ParsleyExtend.addAsyncValidator = function () {\r\n  ParsleyUtils.warnOnce('Accessing the method `addAsyncValidator` through an instance is deprecated. Simply call `Parsley.addAsyncValidator(...)`');\r\n  return Parsley.addAsyncValidator(...arguments);\r\n};\r\n","// This is included with the Parsley library itself,\r\n// thus there is no use in adding it to your project.\r\nimport Parsley from '../parsley/main';\r\n\r\nParsley.addMessages('en', {\r\n  defaultMessage: \"This value seems to be invalid.\",\r\n  type: {\r\n    email:        \"This value should be a valid email.\",\r\n    url:          \"This value should be a valid url.\",\r\n    number:       \"This value should be a valid number.\",\r\n    integer:      \"This value should be a valid integer.\",\r\n    digits:       \"This value should be digits.\",\r\n    alphanum:     \"This value should be alphanumeric.\"\r\n  },\r\n  notblank:       \"This value should not be blank.\",\r\n  required:       \"This value is required.\",\r\n  pattern:        \"This value seems to be invalid.\",\r\n  min:            \"This value should be greater than or equal to %s.\",\r\n  max:            \"This value should be lower than or equal to %s.\",\r\n  range:          \"This value should be between %s and %s.\",\r\n  minlength:      \"This value is too short. It should have %s characters or more.\",\r\n  maxlength:      \"This value is too long. It should have %s characters or fewer.\",\r\n  length:         \"This value length is invalid. It should be between %s and %s characters long.\",\r\n  mincheck:       \"You must select at least %s choices.\",\r\n  maxcheck:       \"You must select %s choices or fewer.\",\r\n  check:          \"You must select between %s and %s choices.\",\r\n  equalto:        \"This value should be the same.\"\r\n});\r\n\r\nParsley.setLocale('en');\r\n","import $ from 'jquery';\r\nimport Parsley from './parsley/main';\r\nimport './parsley/pubsub';\r\nimport './parsley/remote';\r\nimport './i18n/en';\r\n\r\nexport default Parsley;\r\n"],"sourceRoot":"/source/"}