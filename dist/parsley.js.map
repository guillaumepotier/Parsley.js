{"version":3,"sources":["parsley.js","src/parsley/utils.js","src/parsley/defaults.js","src/parsley/base.js","src/parsley/validator.js","src/parsley/validator_registry.js","src/parsley/ui.js","src/parsley/form.js","src/parsley/constraint.js","src/parsley/field.js","src/parsley/multiple.js","src/parsley/factory.js","src/parsley/main.js","src/parsley/pubsub.js","src/parsley/remote.js","src/i18n/en.js","src/vendor/inputevent.js","src/parsley.js"],"names":["global","factory","exports","module","require","define","amd","parsley","$","globalID","pastWarnings","Utils","attr","element","namespace","obj","i","attribute","attributes","regex","RegExp","hasOwnProperty","length","specified","test","name","camelize","slice","deserializeValue","value","checkAttr","hasAttribute","setAttr","setAttribute","dasherize","String","getType","getAttribute","generateID","num","isNaN","Number","JSON","parse","e","str","replace","match","chr","toUpperCase","toLowerCase","warn","window","console","arguments","warnOnce","msg","_resetWarnings","trimString","string","date","parsed","map","parseInt","x","_","year","month","day","Date","getFullYear","getMonth","getDate","integer","number","parseFloat","_boolean","object","regexp","flags","parseRequirement","requirementType","converter","converted","namespaceEvents","events","split","evt","join","difference","array","remove","result","each","elem","indexOf","push","all","promises","when","objectCreate","Object","create","prototype","Error","TypeError","_SubmitSelector","Defaults","inputs","excluded","priorityEnabled","multiple","group","uiEnabled","validationThreshold","focus","trigger","triggerAfterFailure","errorClass","successClass","classHandler","Field","errorsContainer","errorsWrapper","errorTemplate","Base","__id__","asyncSupport","_pipeAccordingToValidationResult","pipe","r","Deferred","validationResult","reject","resolve","promise","actualizeOptions","options","domOptions","parent","_resetOptions","initOptions","_listeners","on","fn","queue","subscribe","listenTo","off","splice","unsubscribe","unsubscribeTo","target","extraArg","parentResult","call","asyncIsValid","force","whenValid","_findRelated","querySelectorAll","$element","convertArrayRequirement","m","values","convertExtraOptionRequirement","requirementSpec","extraOptionReader","main","extra","key","Validator","spec","extend","validate","requirementFirstArg","Array","isArray","validateMultiple","instance","validateDate","_isDateInput","validateNumber","validateString","parseRequirements","requirements","type","isPlainObject","priority","ValidatorRegistry","validators","catalog","__class__","locale","init","typeTesters","email","digits","alphanum","url","range","decimalPlaces","Math","max","ValidatorRegistry__parseArguments","args","ValidatorRegistry__operatorToValidator","operator","requirementsAndInput","pop","ValidatorRegistry__comparisonOperator","assign","addValidator","Parsley","setLocale","addCatalog","messages","set","addMessage","message","addMessages","nameMessageObject","arg1","arg2","_setValidator","hasValidator","updateValidator","removeValidator","validator","getErrorMessage","constraint","typeMessages","formatMessage","defaultMessage","en","parameters","notblank","required","step","base","tester","nb","decimals","toInt","round","f","pow","pattern","minlength","requirement","maxlength","min","mincheck","maxcheck","check","equalto","refOrValue","$reference","val","UI","diffResults","newResult","oldResult","deep","added","kept","found","j","assert","removed","Form","_actualizeTriggers","onSubmitValidate","onSubmitButton","_focusedField","fields","field","noFocus","_destroyUI","_reflowUI","_buildUI","_ui","diff","lastValidationResult","_manageStatusClass","_manageErrorsMessages","_failedOnce","getErrorsMessages","errorMessage","_getErrorMessage","addError","updateClass","_addError","_errorClass","updateError","_updateError","removeError","_removeError","hasConstraints","needsValidation","_successClass","_resetClass","errorsMessagesDisabled","_insertErrorWrapper","$errorsWrapper","find","append","addClass","html","removeClass","$errorClassHandler","errorsWrapperId","removeAttr","customConstraintErrorMessage","_manageClassHandler","validationInformationVisible","$handlerFunction","$handler","jQuery","_inputHolder","nodeName","$errorsContainer","after","$toBind","_validateIfNeeded","event","getValue","debounce","clearTimeout","_debounced","setTimeout","_resetUI","children","Form__statusMapping","pending","resolved","rejected","submitSource","_submitSource","prop","_remoteCache","whenValidate","state","_trigger","stopImmediatePropagation","preventDefault","done","_submit","currentTarget","$synthetic","appendTo","Event","submitEvent","_refreshFields","_withoutReactualizingFormOptions","fail","always","isValid","refresh","reset","destroy","removeData","_bindFields","oldFields","fieldsMappedById","not","fieldInstance","Factory","uniqueId","oldActualizeOptions","eventName","Constraint","parsleyField","isDomConstraint","validatorSpec","_validatorRegistry","_parseRequirements","capitalize","cap","requirementList","parsleyFormInstance","constraints","constraintsByName","_bindConstraints","parsley_field__statusMapping","_isInGroup","_refreshed","_isRequired","validateIfEmpty","inArray","groupedConstraints","_getGroupedConstraints","_validateConstraint","_handleWhitespace","_refreshConstraints","refreshConstraints","addConstraint","removeConstraint","updateConstraint","undefined","_bindHtml5Constraints","trimValue","whitespace","c","index","p","sort","a","b","parsley_field","Multiple","addElement","$elements","fieldConstraints","has","data","filter","_init","savedparsleyFormInstance","__version__","is","bind","isMultiple","handleMultiple","parsleyMultipleInstance","input","$previouslyRelated","get","doNotStore","parsleyInstance","ParsleyExtend","vernums","jquery","forEach","document","version","psly","instances","ParsleyConfig","ParsleyUtils","registry","i18n","ParsleyValidator","method","ParsleyUI","doNotUpdateClass","autoBind","o","deprecated","adapt","context","parsleyAdaptedCallback","unshift","apply","eventPrefix","lastIndexOf","substr","listen","callback","unsubscribeAll","emit","instanceGiven","pubsub","asyncValidators","xhr","status","reverse","addAsyncValidator","ajaxOptions","csr","encodeURIComponent","remoteOptions","param","ajax","handleXhr","then","InputEvent","globals","isNativeEvent","originalEvent","isTrusted","fakeInputEvent","misbehaves","behavesOk","selector","install","inputEventPatched","uninstall","inputevent"],"mappings":"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","file":"parsley.js","sourcesContent":["(function (global, factory) {\n  typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory(require('jquery')) :\n  typeof define === 'function' && define.amd ? define(['jquery'], factory) :\n  global.parsley = factory(global.$)\n}(this, function ($) { 'use strict';\n\n  var globalID = 1;\n  var pastWarnings = {};\n\n  var Utils = {\n    // Parsley DOM-API\n    // returns object from dom attributes and values\n    attr: function (element, namespace, obj) {\n      var i;\n      var attribute;\n      var attributes;\n      var regex = new RegExp('^' + namespace, 'i');\n\n      if ('undefined' === typeof obj)\n        obj = {};\n      else {\n        // Clear all own properties. This won't affect prototype's values\n        for (i in obj) {\n          if (obj.hasOwnProperty(i))\n            delete obj[i];\n        }\n      }\n\n      if (!element)\n        return obj;\n\n      attributes = element.attributes;\n      for (i = attributes.length; i--; ) {\n        attribute = attributes[i];\n\n        if (attribute && attribute.specified && regex.test(attribute.name)) {\n          obj[this.camelize(attribute.name.slice(namespace.length))] = this.deserializeValue(attribute.value);\n        }\n      }\n\n      return obj;\n    },\n\n    checkAttr: function (element, namespace, checkAttr) {\n      return element.hasAttribute(namespace + checkAttr);\n    },\n\n    setAttr: function (element, namespace, attr, value) {\n      element.setAttribute(this.dasherize(namespace + attr), String(value));\n    },\n\n    getType: function(element) {\n      return element.getAttribute('type') || 'text';\n    },\n\n    generateID: function () {\n      return '' + globalID++;\n    },\n\n    /** Third party functions **/\n    deserializeValue: function (value) {\n      var num;\n\n      try {\n        return value ?\n          value == \"true\" ||\n          (value == \"false\" ? false :\n          value == \"null\" ? null :\n          !isNaN(num = Number(value)) ? num :\n          /^[\\[\\{]/.test(value) ? JSON.parse(value) :\n          value)\n          : value;\n      } catch (e) { return value; }\n    },\n\n    // Zepto camelize function\n    camelize: function (str) {\n      return str.replace(/-+(.)?/g, function (match, chr) {\n        return chr ? chr.toUpperCase() : '';\n      });\n    },\n\n    // Zepto dasherize function\n    dasherize: function (str) {\n      return str.replace(/::/g, '/')\n        .replace(/([A-Z]+)([A-Z][a-z])/g, '$1_$2')\n        .replace(/([a-z\\d])([A-Z])/g, '$1_$2')\n        .replace(/_/g, '-')\n        .toLowerCase();\n    },\n\n    warn: function () {\n      if (window.console && 'function' === typeof window.console.warn)\n        window.console.warn(...arguments);\n    },\n\n    warnOnce: function(msg) {\n      if (!pastWarnings[msg]) {\n        pastWarnings[msg] = true;\n        this.warn(...arguments);\n      }\n    },\n\n    _resetWarnings: function () {\n      pastWarnings = {};\n    },\n\n    trimString: function(string) {\n      return string.replace(/^\\s+|\\s+$/g, '');\n    },\n\n    parse: {\n      date: function(string) {\n        let parsed = string.match(/^(\\d{4,})-(\\d\\d)-(\\d\\d)$/);\n        if (!parsed)\n          return null;\n        let [_, year, month, day] = parsed.map(x => parseInt(x, 10));\n        let date = new Date(year, month - 1, day);\n        if (date.getFullYear() !== year || date.getMonth() + 1 !== month || date.getDate() !== day)\n          return null;\n        return date;\n      },\n      string: function(string) {\n        return string;\n      },\n      integer: function(string) {\n        if (isNaN(string))\n          return null;\n        return parseInt(string, 10);\n      },\n      number: function(string) {\n        if (isNaN(string))\n          throw null;\n        return parseFloat(string);\n      },\n      'boolean': function _boolean(string) {\n        return !(/^\\s*false\\s*$/i.test(string));\n      },\n      object: function(string) {\n        return Utils.deserializeValue(string);\n      },\n      regexp: function(regexp) {\n        var flags = '';\n\n        // Test if RegExp is literal, if not, nothing to be done, otherwise, we need to isolate flags and pattern\n        if (/^\\/.*\\/(?:[gimy]*)$/.test(regexp)) {\n          // Replace the regexp literal string with the first match group: ([gimy]*)\n          // If no flag is present, this will be a blank string\n          flags = regexp.replace(/.*\\/([gimy]*)$/, '$1');\n          // Again, replace the regexp literal string with the first match group:\n          // everything excluding the opening and closing slashes and the flags\n          regexp = regexp.replace(new RegExp('^/(.*?)/' + flags + '$'), '$1');\n        } else {\n          // Anchor regexp:\n          regexp = '^' + regexp + '$';\n        }\n        return new RegExp(regexp, flags);\n      }\n    },\n\n    parseRequirement: function(requirementType, string) {\n      var converter = this.parse[requirementType || 'string'];\n      if (!converter)\n        throw 'Unknown requirement specification: \"' + requirementType + '\"';\n      let converted = converter(string);\n      if (converted === null)\n        throw `Requirement is not a ${requirementType}: \"${string}\"`;\n      return converted;\n    },\n\n    namespaceEvents: function(events, namespace) {\n      events = this.trimString(events || '').split(/\\s+/);\n      if (!events[0])\n        return '';\n      return $.map(events, evt => `${evt}.${namespace}`).join(' ');\n    },\n\n    difference: function(array, remove) {\n      // This is O(N^2), should be optimized\n      let result = [];\n      $.each(array, (_, elem) => {\n        if (remove.indexOf(elem) == -1)\n          result.push(elem);\n      });\n      return result;\n    },\n\n    // Alter-ego to native Promise.all, but for jQuery\n    all: function(promises) {\n      // jQuery treats $.when() and $.when(singlePromise) differently; let's avoid that and add spurious elements\n      return $.when(...promises, 42, 42);\n    },\n\n    // Object.create polyfill, see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/create#Polyfill\n    objectCreate: Object.create || (function () {\n      var Object = function () {};\n      return function (prototype) {\n        if (arguments.length > 1) {\n          throw Error('Second argument not supported');\n        }\n        if (typeof prototype != 'object') {\n          throw TypeError('Argument must be an object');\n        }\n        Object.prototype = prototype;\n        var result = new Object();\n        Object.prototype = null;\n        return result;\n      };\n    })(),\n\n    _SubmitSelector: 'input[type=\"submit\"], button:submit'\n  };\n\n  // All these options could be overriden and specified directly in DOM using\n  // `data-parsley-` default DOM-API\n  // eg: `inputs` can be set in DOM using `data-parsley-inputs=\"input, textarea\"`\n  // eg: `data-parsley-stop-on-first-failing-constraint=\"false\"`\n\n  var Defaults = {\n    // ### General\n\n    // Default data-namespace for DOM API\n    namespace: 'data-parsley-',\n\n    // Supported inputs by default\n    inputs: 'input, textarea, select',\n\n    // Excluded inputs by default\n    excluded: 'input[type=button], input[type=submit], input[type=reset], input[type=hidden]',\n\n    // Stop validating field on highest priority failing constraint\n    priorityEnabled: true,\n\n    // ### Field only\n\n    // identifier used to group together inputs (e.g. radio buttons...)\n    multiple: null,\n\n    // identifier (or array of identifiers) used to validate only a select group of inputs\n    group: null,\n\n    // ### UI\n    // Enable\\Disable error messages\n    uiEnabled: true,\n\n    // Key events threshold before validation\n    validationThreshold: 3,\n\n    // Focused field on form validation error. 'first'|'last'|'none'\n    focus: 'first',\n\n    // event(s) that will trigger validation before first failure. eg: `input`...\n    trigger: false,\n\n    // event(s) that will trigger validation after first failure.\n    triggerAfterFailure: 'input',\n\n    // Class that would be added on every failing validation Parsley field\n    errorClass: 'parsley-error',\n\n    // Same for success validation\n    successClass: 'parsley-success',\n\n    // Return the `$element` that will receive these above success or error classes\n    // Could also be (and given directly from DOM) a valid selector like `'#div'`\n    classHandler: function (Field) {},\n\n    // Return the `$element` where errors will be appended\n    // Could also be (and given directly from DOM) a valid selector like `'#div'`\n    errorsContainer: function (Field) {},\n\n    // ul elem that would receive errors' list\n    errorsWrapper: '<ul class=\"parsley-errors-list\"></ul>',\n\n    // li elem that would receive error message\n    errorTemplate: '<li></li>'\n  };\n\n  var Base = function () {\n    this.__id__ = Utils.generateID();\n  };\n\n  Base.prototype = {\n    asyncSupport: true, // Deprecated\n\n    _pipeAccordingToValidationResult: function () {\n      var pipe = () => {\n        var r = $.Deferred();\n        if (true !== this.validationResult)\n          r.reject();\n        return r.resolve().promise();\n      };\n      return [pipe, pipe];\n    },\n\n    actualizeOptions: function () {\n      Utils.attr(this.element, this.options.namespace, this.domOptions);\n      if (this.parent && this.parent.actualizeOptions)\n        this.parent.actualizeOptions();\n      return this;\n    },\n\n    _resetOptions: function (initOptions) {\n      this.domOptions = Utils.objectCreate(this.parent.options);\n      this.options = Utils.objectCreate(this.domOptions);\n      // Shallow copy of ownProperties of initOptions:\n      for (var i in initOptions) {\n        if (initOptions.hasOwnProperty(i))\n          this.options[i] = initOptions[i];\n      }\n      this.actualizeOptions();\n    },\n\n    _listeners: null,\n\n    // Register a callback for the given event name\n    // Callback is called with context as the first argument and the `this`\n    // The context is the current parsley instance, or window.Parsley if global\n    // A return value of `false` will interrupt the calls\n    on: function (name, fn) {\n      this._listeners = this._listeners || {};\n      var queue = this._listeners[name] = this._listeners[name] || [];\n      queue.push(fn);\n\n      return this;\n    },\n\n    // Deprecated. Use `on` instead\n    subscribe: function(name, fn) {\n      $.listenTo(this, name.toLowerCase(), fn);\n    },\n\n    // Unregister a callback (or all if none is given) for the given event name\n    off: function (name, fn) {\n      var queue = this._listeners && this._listeners[name];\n      if (queue) {\n        if (!fn) {\n          delete this._listeners[name];\n        } else {\n          for (var i = queue.length; i--; )\n            if (queue[i] === fn)\n              queue.splice(i, 1);\n        }\n      }\n      return this;\n    },\n\n    // Deprecated. Use `off`\n    unsubscribe: function(name, fn) {\n      $.unsubscribeTo(this, name.toLowerCase());\n    },\n\n    // Trigger an event of the given name\n    // A return value of `false` interrupts the callback chain\n    // Returns false if execution was interrupted\n    trigger: function (name, target, extraArg) {\n      target = target || this;\n      var queue = this._listeners && this._listeners[name];\n      var result;\n      var parentResult;\n      if (queue) {\n        for (var i = queue.length; i--; ) {\n          result = queue[i].call(target, target, extraArg);\n          if (result === false) return result;\n        }\n      }\n      if (this.parent) {\n        return this.parent.trigger(name, target, extraArg);\n      }\n      return true;\n    },\n\n    asyncIsValid: function (group, force) {\n      Utils.warnOnce(\"asyncIsValid is deprecated; please use whenValid instead\");\n      return this.whenValid({group, force});\n    },\n\n    _findRelated: function () {\n      return this.options.multiple ?\n        $(this.parent.element.querySelectorAll(`[${this.options.namespace}multiple=\"${this.options.multiple}\"]`))\n      : this.$element;\n    }\n  };\n\n  var convertArrayRequirement = function(string, length) {\n    var m = string.match(/^\\s*\\[(.*)\\]\\s*$/);\n    if (!m)\n      throw 'Requirement is not an array: \"' + string + '\"';\n    var values = m[1].split(',').map(Utils.trimString);\n    if (values.length !== length)\n      throw 'Requirement has ' + values.length + ' values when ' + length + ' are needed';\n    return values;\n  };\n\n  var convertExtraOptionRequirement = function(requirementSpec, string, extraOptionReader) {\n    var main = null;\n    var extra = {};\n    for (var key in requirementSpec) {\n      if (key) {\n        var value = extraOptionReader(key);\n        if ('string' === typeof value)\n          value = Utils.parseRequirement(requirementSpec[key], value);\n        extra[key] = value;\n      } else {\n        main = Utils.parseRequirement(requirementSpec[key], string);\n      }\n    }\n    return [main, extra];\n  };\n\n  // A Validator needs to implement the methods `validate` and `parseRequirements`\n\n  var Validator = function(spec) {\n    $.extend(true, this, spec);\n  };\n\n  Validator.prototype = {\n    // Returns `true` iff the given `value` is valid according the given requirements.\n    validate: function(value, requirementFirstArg) {\n      if (this.fn) { // Legacy style validator\n\n        if (arguments.length > 3)  // If more args then value, requirement, instance...\n          requirementFirstArg = [].slice.call(arguments, 1, -1);  // Skip first arg (value) and last (instance), combining the rest\n        return this.fn(value, requirementFirstArg);\n      }\n\n      if (Array.isArray(value)) {\n        if (!this.validateMultiple)\n          throw 'Validator `' + this.name + '` does not handle multiple values';\n        return this.validateMultiple(...arguments);\n      } else {\n        let instance = arguments[arguments.length - 1];\n        if (this.validateDate && instance._isDateInput()) {\n          arguments[0] = Utils.parse.date(arguments[0]);\n          if (arguments[0] === null)\n            return false;\n          return this.validateDate(...arguments);\n        }\n        if (this.validateNumber) {\n          if (isNaN(value))\n            return false;\n          arguments[0] = parseFloat(arguments[0]);\n          return this.validateNumber(...arguments);\n        }\n        if (this.validateString) {\n          return this.validateString(...arguments);\n        }\n        throw 'Validator `' + this.name + '` only handles multiple values';\n      }\n    },\n\n    // Parses `requirements` into an array of arguments,\n    // according to `this.requirementType`\n    parseRequirements: function(requirements, extraOptionReader) {\n      if ('string' !== typeof requirements) {\n        // Assume requirement already parsed\n        // but make sure we return an array\n        return Array.isArray(requirements) ? requirements : [requirements];\n      }\n      var type = this.requirementType;\n      if (Array.isArray(type)) {\n        var values = convertArrayRequirement(requirements, type.length);\n        for (var i = 0; i < values.length; i++)\n          values[i] = Utils.parseRequirement(type[i], values[i]);\n        return values;\n      } else if ($.isPlainObject(type)) {\n        return convertExtraOptionRequirement(type, requirements, extraOptionReader);\n      } else {\n        return [Utils.parseRequirement(type, requirements)];\n      }\n    },\n    // Defaults:\n    requirementType: 'string',\n\n    priority: 2\n\n  };\n\n  var ValidatorRegistry = function (validators, catalog) {\n    this.__class__ = 'ValidatorRegistry';\n\n    // Default Parsley locale is en\n    this.locale = 'en';\n\n    this.init(validators || {}, catalog || {});\n  };\n\n  var typeTesters =  {\n    email: /^((([a-zA-Z]|\\d|[!#\\$%&'\\*\\+\\-\\/=\\?\\^_`{\\|}~]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])+(\\.([a-zA-Z]|\\d|[!#\\$%&'\\*\\+\\-\\/=\\?\\^_`{\\|}~]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])+)*)|((\\x22)((((\\x20|\\x09)*(\\x0d\\x0a))?(\\x20|\\x09)+)?(([\\x01-\\x08\\x0b\\x0c\\x0e-\\x1f\\x7f]|\\x21|[\\x23-\\x5b]|[\\x5d-\\x7e]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])|(\\\\([\\x01-\\x09\\x0b\\x0c\\x0d-\\x7f]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF]))))*(((\\x20|\\x09)*(\\x0d\\x0a))?(\\x20|\\x09)+)?(\\x22)))@((([a-zA-Z]|\\d|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])|(([a-zA-Z]|\\d|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])([a-zA-Z]|\\d|-|_|~|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])*([a-zA-Z]|\\d|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])))\\.)+(([a-zA-Z]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])|(([a-zA-Z]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])([a-zA-Z]|\\d|-|_|~|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])*([a-zA-Z]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])))$/,\n\n    // Follow https://www.w3.org/TR/html5/infrastructure.html#floating-point-numbers\n    number: /^-?(\\d*\\.)?\\d+(e[-+]?\\d+)?$/i,\n\n    integer: /^-?\\d+$/,\n\n    digits: /^\\d+$/,\n\n    alphanum: /^\\w+$/i,\n\n    date: {\n      test: value => Utils.parse.date(value) !== null\n    },\n\n    url: new RegExp(\n        \"^\" +\n          // protocol identifier\n          \"(?:(?:https?|ftp)://)?\" + // ** mod: make scheme optional\n          // user:pass authentication\n          \"(?:\\\\S+(?::\\\\S*)?@)?\" +\n          \"(?:\" +\n            // IP address exclusion\n            // private & local networks\n            // \"(?!(?:10|127)(?:\\\\.\\\\d{1,3}){3})\" +   // ** mod: allow local networks\n            // \"(?!(?:169\\\\.254|192\\\\.168)(?:\\\\.\\\\d{1,3}){2})\" +  // ** mod: allow local networks\n            // \"(?!172\\\\.(?:1[6-9]|2\\\\d|3[0-1])(?:\\\\.\\\\d{1,3}){2})\" +  // ** mod: allow local networks\n            // IP address dotted notation octets\n            // excludes loopback network 0.0.0.0\n            // excludes reserved space >= 224.0.0.0\n            // excludes network & broacast addresses\n            // (first & last IP address of each class)\n            \"(?:[1-9]\\\\d?|1\\\\d\\\\d|2[01]\\\\d|22[0-3])\" +\n            \"(?:\\\\.(?:1?\\\\d{1,2}|2[0-4]\\\\d|25[0-5])){2}\" +\n            \"(?:\\\\.(?:[1-9]\\\\d?|1\\\\d\\\\d|2[0-4]\\\\d|25[0-4]))\" +\n          \"|\" +\n            // host name\n            \"(?:(?:[a-zA-Z\\\\u00a1-\\\\uffff0-9]-*)*[a-zA-Z\\\\u00a1-\\\\uffff0-9]+)\" +\n            // domain name\n            \"(?:\\\\.(?:[a-zA-Z\\\\u00a1-\\\\uffff0-9]-*)*[a-zA-Z\\\\u00a1-\\\\uffff0-9]+)*\" +\n            // TLD identifier\n            \"(?:\\\\.(?:[a-zA-Z\\\\u00a1-\\\\uffff]{2,}))\" +\n          \")\" +\n          // port number\n          \"(?::\\\\d{2,5})?\" +\n          // resource path\n          \"(?:/\\\\S*)?\" +\n        \"$\"\n      )\n  };\n  typeTesters.range = typeTesters.number;\n\n  // See http://stackoverflow.com/a/10454560/8279\n  var decimalPlaces = num => {\n    var match = ('' + num).match(/(?:\\.(\\d+))?(?:[eE]([+-]?\\d+))?$/);\n    if (!match) { return 0; }\n    return Math.max(\n         0,\n         // Number of digits right of decimal point.\n         (match[1] ? match[1].length : 0) -\n         // Adjust for scientific notation.\n         (match[2] ? +match[2] : 0));\n  };\n\n  // parseArguments('number', ['1', '2']) => [1, 2]\n  let ValidatorRegistry__parseArguments = (type, args) => args.map(Utils.parse[type]);\n  // operatorToValidator returns a validating function for an operator function, applied to the given type\n  let ValidatorRegistry__operatorToValidator = (type, operator) => {\n    return (value, ...requirementsAndInput) => {\n      requirementsAndInput.pop(); // Get rid of `input` argument\n      if (!value)\n        return true;  // Builtin validators all accept empty strings, except `required` of course\n      return operator(value, ...ValidatorRegistry__parseArguments(type, requirementsAndInput));\n    };\n  };\n\n  let ValidatorRegistry__comparisonOperator = operator => ({\n    validateDate: ValidatorRegistry__operatorToValidator('date', operator),\n    validateNumber: ValidatorRegistry__operatorToValidator('number', operator),\n    requirementType: operator.length <= 2 ? 'string' : ['string', 'string'], // Support operators with a 1 or 2 requirement(s)\n    priority: 30\n  });\n\n  ValidatorRegistry.prototype = {\n    init: function (validators, catalog) {\n      this.catalog = catalog;\n      // Copy prototype's validators:\n      this.validators = Object.assign({}, this.validators);\n\n      for (var name in validators)\n        this.addValidator(name, validators[name].fn, validators[name].priority);\n\n      window.Parsley.trigger('parsley:validator:init');\n    },\n\n    // Set new messages locale if we have dictionary loaded in ParsleyConfig.i18n\n    setLocale: function (locale) {\n      if ('undefined' === typeof this.catalog[locale])\n        throw new Error(locale + ' is not available in the catalog');\n\n      this.locale = locale;\n\n      return this;\n    },\n\n    // Add a new messages catalog for a given locale. Set locale for this catalog if set === `true`\n    addCatalog: function (locale, messages, set) {\n      if ('object' === typeof messages)\n        this.catalog[locale] = messages;\n\n      if (true === set)\n        return this.setLocale(locale);\n\n      return this;\n    },\n\n    // Add a specific message for a given constraint in a given locale\n    addMessage: function (locale, name, message) {\n      if ('undefined' === typeof this.catalog[locale])\n        this.catalog[locale] = {};\n\n      this.catalog[locale][name] = message;\n\n      return this;\n    },\n\n    // Add messages for a given locale\n    addMessages: function (locale, nameMessageObject) {\n      for (var name in nameMessageObject)\n        this.addMessage(locale, name, nameMessageObject[name]);\n\n      return this;\n    },\n\n    // Add a new validator\n    //\n    //    addValidator('custom', {\n    //        requirementType: ['integer', 'integer'],\n    //        validateString: function(value, from, to) {},\n    //        priority: 22,\n    //        messages: {\n    //          en: \"Hey, that's no good\",\n    //          fr: \"Aye aye, pas bon du tout\",\n    //        }\n    //    })\n    //\n    // Old API was addValidator(name, function, priority)\n    //\n    addValidator: function (name, arg1, arg2) {\n      if (this.validators[name])\n        Utils.warn('Validator \"' + name + '\" is already defined.');\n      else if (Defaults.hasOwnProperty(name)) {\n        Utils.warn('\"' + name + '\" is a restricted keyword and is not a valid validator name.');\n        return;\n      }\n      return this._setValidator(...arguments);\n    },\n\n    hasValidator: function (name) {\n      return !!this.validators[name];\n    },\n\n    updateValidator: function (name, arg1, arg2) {\n      if (!this.validators[name]) {\n        Utils.warn('Validator \"' + name + '\" is not already defined.');\n        return this.addValidator(...arguments);\n      }\n      return this._setValidator(...arguments);\n    },\n\n    removeValidator: function (name) {\n      if (!this.validators[name])\n        Utils.warn('Validator \"' + name + '\" is not defined.');\n\n      delete this.validators[name];\n\n      return this;\n    },\n\n    _setValidator: function (name, validator, priority) {\n      if ('object' !== typeof validator) {\n        // Old style validator, with `fn` and `priority`\n        validator = {\n          fn: validator,\n          priority: priority\n        };\n      }\n      if (!validator.validate) {\n        validator = new Validator(validator);\n      }\n      this.validators[name] = validator;\n\n      for (var locale in validator.messages || {})\n        this.addMessage(locale, name, validator.messages[locale]);\n\n      return this;\n    },\n\n    getErrorMessage: function (constraint) {\n      var message;\n\n      // Type constraints are a bit different, we have to match their requirements too to find right error message\n      if ('type' === constraint.name) {\n        var typeMessages = this.catalog[this.locale][constraint.name] || {};\n        message = typeMessages[constraint.requirements];\n      } else\n        message = this.formatMessage(this.catalog[this.locale][constraint.name], constraint.requirements);\n\n      return message || this.catalog[this.locale].defaultMessage || this.catalog.en.defaultMessage;\n    },\n\n    // Kind of light `sprintf()` implementation\n    formatMessage: function (string, parameters) {\n      if ('object' === typeof parameters) {\n        for (var i in parameters)\n          string = this.formatMessage(string, parameters[i]);\n\n        return string;\n      }\n\n      return 'string' === typeof string ? string.replace(/%s/i, parameters) : '';\n    },\n\n    // Here is the Parsley default validators list.\n    // A validator is an object with the following key values:\n    //  - priority: an integer\n    //  - requirement: 'string' (default), 'integer', 'number', 'regexp' or an Array of these\n    //  - validateString, validateMultiple, validateNumber: functions returning `true`, `false` or a promise\n    // Alternatively, a validator can be a function that returns such an object\n    //\n    validators: {\n      notblank: {\n        validateString: function(value) {\n          return /\\S/.test(value);\n        },\n        priority: 2\n      },\n      required: {\n        validateMultiple: function(values) {\n          return values.length > 0;\n        },\n        validateString: function(value) {\n          return /\\S/.test(value);\n        },\n        priority: 512\n      },\n      type: {\n        validateString: function(value, type, {step = 'any', base = 0} = {}) {\n          var tester = typeTesters[type];\n          if (!tester) {\n            throw new Error('validator type `' + type + '` is not supported');\n          }\n          if (!value)\n            return true;  // Builtin validators all accept empty strings, except `required` of course\n          if (!tester.test(value))\n            return false;\n          if ('number' === type) {\n            if (!/^any$/i.test(step || '')) {\n              var nb = Number(value);\n              var decimals = Math.max(decimalPlaces(step), decimalPlaces(base));\n              if (decimalPlaces(nb) > decimals) // Value can't have too many decimals\n                return false;\n              // Be careful of rounding errors by using integers.\n              var toInt = f => Math.round(f * Math.pow(10, decimals));\n              if ((toInt(nb) - toInt(base)) % toInt(step) != 0)\n                return false;\n            }\n          }\n          return true;\n        },\n        requirementType: {\n          '': 'string',\n          step: 'string',\n          base: 'number'\n        },\n        priority: 256\n      },\n      pattern: {\n        validateString: function(value, regexp) {\n          if (!value)\n            return true;  // Builtin validators all accept empty strings, except `required` of course\n          return regexp.test(value);\n        },\n        requirementType: 'regexp',\n        priority: 64\n      },\n      minlength: {\n        validateString: function (value, requirement) {\n          if (!value)\n            return true;  // Builtin validators all accept empty strings, except `required` of course\n          return value.length >= requirement;\n        },\n        requirementType: 'integer',\n        priority: 30\n      },\n      maxlength: {\n        validateString: function (value, requirement) {\n          return value.length <= requirement;\n        },\n        requirementType: 'integer',\n        priority: 30\n      },\n      length: {\n        validateString: function (value, min, max) {\n          if (!value)\n            return true;  // Builtin validators all accept empty strings, except `required` of course\n          return value.length >= min && value.length <= max;\n        },\n        requirementType: ['integer', 'integer'],\n        priority: 30\n      },\n      mincheck: {\n        validateMultiple: function (values, requirement) {\n          return values.length >= requirement;\n        },\n        requirementType: 'integer',\n        priority: 30\n      },\n      maxcheck: {\n        validateMultiple: function (values, requirement) {\n          return values.length <= requirement;\n        },\n        requirementType: 'integer',\n        priority: 30\n      },\n      check: {\n        validateMultiple: function (values, min, max) {\n          return values.length >= min && values.length <= max;\n        },\n        requirementType: ['integer', 'integer'],\n        priority: 30\n      },\n      min: ValidatorRegistry__comparisonOperator((value, requirement) => value >= requirement),\n      max: ValidatorRegistry__comparisonOperator((value, requirement) => value <= requirement),\n      range: ValidatorRegistry__comparisonOperator((value, min, max) => value >= min && value <= max),\n      equalto: {\n        validateString: function (value, refOrValue) {\n          if (!value)\n            return true;  // Builtin validators all accept empty strings, except `required` of course\n          var $reference = $(refOrValue);\n          if ($reference.length)\n            return value === $reference.val();\n          else\n            return value === refOrValue;\n        },\n        priority: 256\n      }\n    }\n  };\n\n  var UI = {};\n\n  var diffResults = function (newResult, oldResult, deep) {\n    var added = [];\n    var kept = [];\n\n    for (var i = 0; i < newResult.length; i++) {\n      var found = false;\n\n      for (var j = 0; j < oldResult.length; j++)\n        if (newResult[i].assert.name === oldResult[j].assert.name) {\n          found = true;\n          break;\n        }\n\n      if (found)\n        kept.push(newResult[i]);\n      else\n        added.push(newResult[i]);\n    }\n\n    return {\n      kept: kept,\n      added: added,\n      removed: !deep ? diffResults(oldResult, newResult, true).added : []\n    };\n  };\n\n  UI.Form = {\n\n    _actualizeTriggers: function () {\n      this.$element.on('submit.Parsley', evt => { this.onSubmitValidate(evt); });\n      this.$element.on('click.Parsley', Utils._SubmitSelector, evt => { this.onSubmitButton(evt); });\n\n      // UI could be disabled\n      if (false === this.options.uiEnabled)\n        return;\n\n      this.element.setAttribute('novalidate', '');\n    },\n\n    focus: function () {\n      this._focusedField = null;\n\n      if (true === this.validationResult || 'none' === this.options.focus)\n        return null;\n\n      for (var i = 0; i < this.fields.length; i++) {\n        var field = this.fields[i];\n        if (true !== field.validationResult && field.validationResult.length > 0 && 'undefined' === typeof field.options.noFocus) {\n          this._focusedField = field.$element;\n          if ('first' === this.options.focus)\n            break;\n        }\n      }\n\n      if (null === this._focusedField)\n        return null;\n\n      return this._focusedField.focus();\n    },\n\n    _destroyUI: function () {\n      // Reset all event listeners\n      this.$element.off('.Parsley');\n    }\n\n  };\n\n  UI.Field = {\n\n    _reflowUI: function () {\n      this._buildUI();\n\n      // If this field doesn't have an active UI don't bother doing something\n      if (!this._ui)\n        return;\n\n      // Diff between two validation results\n      var diff = diffResults(this.validationResult, this._ui.lastValidationResult);\n\n      // Then store current validation result for next reflow\n      this._ui.lastValidationResult = this.validationResult;\n\n      // Handle valid / invalid / none field class\n      this._manageStatusClass();\n\n      // Add, remove, updated errors messages\n      this._manageErrorsMessages(diff);\n\n      // Triggers impl\n      this._actualizeTriggers();\n\n      // If field is not valid for the first time, bind keyup trigger to ease UX and quickly inform user\n      if ((diff.kept.length || diff.added.length) && !this._failedOnce) {\n        this._failedOnce = true;\n        this._actualizeTriggers();\n      }\n    },\n\n    // Returns an array of field's error message(s)\n    getErrorsMessages: function () {\n      // No error message, field is valid\n      if (true === this.validationResult)\n        return [];\n\n      var messages = [];\n\n      for (var i = 0; i < this.validationResult.length; i++)\n        messages.push(this.validationResult[i].errorMessage ||\n         this._getErrorMessage(this.validationResult[i].assert));\n\n      return messages;\n    },\n\n    // It's a goal of Parsley that this method is no longer required [#1073]\n    addError: function (name, {message, assert, updateClass = true} = {}) {\n      this._buildUI();\n      this._addError(name, {message, assert});\n\n      if (updateClass)\n        this._errorClass();\n    },\n\n    // It's a goal of Parsley that this method is no longer required [#1073]\n    updateError: function (name, {message, assert, updateClass = true} = {}) {\n      this._buildUI();\n      this._updateError(name, {message, assert});\n\n      if (updateClass)\n        this._errorClass();\n    },\n\n    // It's a goal of Parsley that this method is no longer required [#1073]\n    removeError: function (name, {updateClass = true} = {}) {\n      this._buildUI();\n      this._removeError(name);\n\n      // edge case possible here: remove a standard Parsley error that is still failing in this.validationResult\n      // but highly improbable cuz' manually removing a well Parsley handled error makes no sense.\n      if (updateClass)\n        this._manageStatusClass();\n    },\n\n    _manageStatusClass: function () {\n      if (this.hasConstraints() && this.needsValidation() && true === this.validationResult)\n        this._successClass();\n      else if (this.validationResult.length > 0)\n        this._errorClass();\n      else\n        this._resetClass();\n    },\n\n    _manageErrorsMessages: function (diff) {\n      if ('undefined' !== typeof this.options.errorsMessagesDisabled)\n        return;\n\n      // Case where we have errorMessage option that configure an unique field error message, regardless failing validators\n      if ('undefined' !== typeof this.options.errorMessage) {\n        if ((diff.added.length || diff.kept.length)) {\n          this._insertErrorWrapper();\n\n          if (0 === this._ui.$errorsWrapper.find('.parsley-custom-error-message').length)\n            this._ui.$errorsWrapper\n              .append(\n                $(this.options.errorTemplate)\n                .addClass('parsley-custom-error-message')\n              );\n\n          return this._ui.$errorsWrapper\n            .addClass('filled')\n            .find('.parsley-custom-error-message')\n            .html(this.options.errorMessage);\n        }\n\n        return this._ui.$errorsWrapper\n          .removeClass('filled')\n          .find('.parsley-custom-error-message')\n          .remove();\n      }\n\n      // Show, hide, update failing constraints messages\n      for (var i = 0; i < diff.removed.length; i++)\n        this._removeError(diff.removed[i].assert.name);\n\n      for (i = 0; i < diff.added.length; i++)\n        this._addError(diff.added[i].assert.name, {message: diff.added[i].errorMessage, assert: diff.added[i].assert});\n\n      for (i = 0; i < diff.kept.length; i++)\n        this._updateError(diff.kept[i].assert.name, {message: diff.kept[i].errorMessage, assert: diff.kept[i].assert});\n    },\n\n\n    _addError: function (name, {message, assert}) {\n      this._insertErrorWrapper();\n      this._ui.$errorClassHandler\n        .attr('aria-describedby', this._ui.errorsWrapperId);\n      this._ui.$errorsWrapper\n        .addClass('filled')\n        .append(\n          $(this.options.errorTemplate)\n          .addClass('parsley-' + name)\n          .html(message || this._getErrorMessage(assert))\n        );\n    },\n\n    _updateError: function (name, {message, assert}) {\n      this._ui.$errorsWrapper\n        .addClass('filled')\n        .find('.parsley-' + name)\n        .html(message || this._getErrorMessage(assert));\n    },\n\n    _removeError: function (name) {\n      this._ui.$errorClassHandler\n        .removeAttr('aria-describedby');\n      this._ui.$errorsWrapper\n        .removeClass('filled')\n        .find('.parsley-' + name)\n        .remove();\n    },\n\n    _getErrorMessage: function (constraint) {\n      var customConstraintErrorMessage = constraint.name + 'Message';\n\n      if ('undefined' !== typeof this.options[customConstraintErrorMessage])\n        return window.Parsley.formatMessage(this.options[customConstraintErrorMessage], constraint.requirements);\n\n      return window.Parsley.getErrorMessage(constraint);\n    },\n\n    _buildUI: function () {\n      // UI could be already built or disabled\n      if (this._ui || false === this.options.uiEnabled)\n        return;\n\n      var _ui = {};\n\n      // Give field its Parsley id in DOM\n      this.element.setAttribute(this.options.namespace + 'id', this.__id__);\n\n      /** Generate important UI elements and store them in this **/\n      // $errorClassHandler is the $element that woul have parsley-error and parsley-success classes\n      _ui.$errorClassHandler = this._manageClassHandler();\n\n      // $errorsWrapper is a div that would contain the various field errors, it will be appended into $errorsContainer\n      _ui.errorsWrapperId = 'parsley-id-' + (this.options.multiple ? 'multiple-' + this.options.multiple : this.__id__);\n      _ui.$errorsWrapper = $(this.options.errorsWrapper).attr('id', _ui.errorsWrapperId);\n\n      // ValidationResult UI storage to detect what have changed bwt two validations, and update DOM accordingly\n      _ui.lastValidationResult = [];\n      _ui.validationInformationVisible = false;\n\n      // Store it in this for later\n      this._ui = _ui;\n    },\n\n    // Determine which element will have `parsley-error` and `parsley-success` classes\n    _manageClassHandler: function () {\n      // Class handled could also be determined by function given in Parsley options\n      if ('string' === typeof this.options.classHandler && $(this.options.classHandler).length)\n        return $(this.options.classHandler);\n\n      // Class handled could also be determined by function given in Parsley options\n      var $handlerFunction = this.options.classHandler;\n\n      // It might also be the function name of a global function\n      if ('string' === typeof this.options.classHandler && 'function' === typeof window[this.options.classHandler])\n        $handlerFunction = window[this.options.classHandler];\n\n      if ('function' === typeof $handlerFunction) {\n        var $handler = $handlerFunction.call(this, this);\n\n        // If this function returned a valid existing DOM element, go for it\n        if ('undefined' !== typeof $handler && $handler.length)\n          return $handler;\n      } else if ('object' === typeof $handlerFunction && $handlerFunction instanceof jQuery && $handlerFunction.length) {\n        return $handlerFunction;\n      } else if ($handlerFunction) {\n        Utils.warn('The class handler `' + $handlerFunction + '` does not exist in DOM nor as a global JS function');\n      }\n\n      return this._inputHolder();\n    },\n\n    _inputHolder: function() {\n      // if simple element (input, texatrea, select...) it will perfectly host the classes and precede the error container\n      if (!this.options.multiple || this.element.nodeName === 'SELECT')\n        return this.$element;\n\n      // But if multiple element (radio, checkbox), that would be their parent\n      return this.$element.parent();\n    },\n\n    _insertErrorWrapper: function () {\n      var $errorsContainer = this.options.errorsContainer;\n\n      // Nothing to do if already inserted\n      if (0 !== this._ui.$errorsWrapper.parent().length)\n        return this._ui.$errorsWrapper.parent();\n\n      if ('string' === typeof $errorsContainer) {\n        if ($($errorsContainer).length)\n          return $($errorsContainer).append(this._ui.$errorsWrapper);\n        else if ('function' === typeof window[$errorsContainer])\n          $errorsContainer = window[$errorsContainer];\n        else\n          Utils.warn('The errors container `' + $errorsContainer + '` does not exist in DOM nor as a global JS function');\n      }\n\n      if ('function' === typeof $errorsContainer)\n        $errorsContainer = $errorsContainer.call(this, this);\n\n      if ('object' === typeof $errorsContainer && $errorsContainer.length)\n        return $errorsContainer.append(this._ui.$errorsWrapper);\n\n      return this._inputHolder().after(this._ui.$errorsWrapper);\n    },\n\n    _actualizeTriggers: function () {\n      var $toBind = this._findRelated();\n      var trigger;\n\n      // Remove Parsley events already bound on this field\n      $toBind.off('.Parsley');\n      if (this._failedOnce)\n        $toBind.on(Utils.namespaceEvents(this.options.triggerAfterFailure, 'Parsley'), () => {\n          this._validateIfNeeded();\n        });\n      else if (trigger = Utils.namespaceEvents(this.options.trigger, 'Parsley')) {\n        $toBind.on(trigger, event => {\n          this._validateIfNeeded(event);\n        });\n      }\n    },\n\n    _validateIfNeeded: function (event) {\n      // For keyup, keypress, keydown, input... events that could be a little bit obstrusive\n      // do not validate if val length < min threshold on first validation. Once field have been validated once and info\n      // about success or failure have been displayed, always validate with this trigger to reflect every yalidation change.\n      if (event && /key|input/.test(event.type))\n        if (!(this._ui && this._ui.validationInformationVisible) && this.getValue().length <= this.options.validationThreshold)\n          return;\n\n      if (this.options.debounce) {\n        window.clearTimeout(this._debounced);\n        this._debounced = window.setTimeout(() => this.validate(), this.options.debounce);\n      } else\n        this.validate();\n    },\n\n    _resetUI: function () {\n      // Reset all event listeners\n      this._failedOnce = false;\n      this._actualizeTriggers();\n\n      // Nothing to do if UI never initialized for this field\n      if ('undefined' === typeof this._ui)\n        return;\n\n      // Reset all errors' li\n      this._ui.$errorsWrapper\n        .removeClass('filled')\n        .children()\n        .remove();\n\n      // Reset validation class\n      this._resetClass();\n\n      // Reset validation flags and last validation result\n      this._ui.lastValidationResult = [];\n      this._ui.validationInformationVisible = false;\n    },\n\n    _destroyUI: function () {\n      this._resetUI();\n\n      if ('undefined' !== typeof this._ui)\n        this._ui.$errorsWrapper.remove();\n\n      delete this._ui;\n    },\n\n    _successClass: function () {\n      this._ui.validationInformationVisible = true;\n      this._ui.$errorClassHandler.removeClass(this.options.errorClass).addClass(this.options.successClass);\n    },\n    _errorClass: function () {\n      this._ui.validationInformationVisible = true;\n      this._ui.$errorClassHandler.removeClass(this.options.successClass).addClass(this.options.errorClass);\n    },\n    _resetClass: function () {\n      this._ui.$errorClassHandler.removeClass(this.options.successClass).removeClass(this.options.errorClass);\n    }\n  };\n\n  var Form = function (element, domOptions, options) {\n    this.__class__ = 'Form';\n\n    this.element = element;\n    this.$element = $(element);\n    this.domOptions = domOptions;\n    this.options = options;\n    this.parent = window.Parsley;\n\n    this.fields = [];\n    this.validationResult = null;\n  };\n\n  var Form__statusMapping = {pending: null, resolved: true, rejected: false};\n\n  Form.prototype = {\n    onSubmitValidate: function (event) {\n      // This is a Parsley generated submit event, do not validate, do not prevent, simply exit and keep normal behavior\n      if (true === event.parsley)\n        return;\n\n      // If we didn't come here through a submit button, use the first one in the form\n      var submitSource = this._submitSource || this.$element.find(Utils._SubmitSelector)[0];\n      this._submitSource = null;\n      this.$element.find('.parsley-synthetic-submit-button').prop('disabled', true);\n      if (submitSource && null !== submitSource.getAttribute('formnovalidate'))\n        return;\n\n      window.Parsley._remoteCache = {};\n\n      var promise = this.whenValidate({event});\n\n      if ('resolved' === promise.state() && false !== this._trigger('submit')) {\n        // All good, let event go through. We make this distinction because browsers\n        // differ in their handling of `submit` being called from inside a submit event [#1047]\n      } else {\n        // Rejected or pending: cancel this submit\n        event.stopImmediatePropagation();\n        event.preventDefault();\n        if ('pending' === promise.state())\n          promise.done(() => { this._submit(submitSource); });\n      }\n    },\n\n    onSubmitButton: function(event) {\n      this._submitSource = event.currentTarget;\n    },\n    // internal\n    // _submit submits the form, this time without going through the validations.\n    // Care must be taken to \"fake\" the actual submit button being clicked.\n    _submit: function (submitSource) {\n      if (false === this._trigger('submit'))\n        return;\n      // Add submit button's data\n      if (submitSource) {\n        var $synthetic = this.$element.find('.parsley-synthetic-submit-button').prop('disabled', false);\n        if (0 === $synthetic.length)\n          $synthetic = $('<input class=\"parsley-synthetic-submit-button\" type=\"hidden\">').appendTo(this.$element);\n        $synthetic.attr({\n          name: submitSource.getAttribute('name'),\n          value: submitSource.getAttribute('value')\n        });\n      }\n\n      this.$element.trigger(Object.assign($.Event('submit'), {parsley: true}));\n    },\n\n    // Performs validation on fields while triggering events.\n    // @returns `true` if all validations succeeds, `false`\n    // if a failure is immediately detected, or `null`\n    // if dependant on a promise.\n    // Consider using `whenValidate` instead.\n    validate: function (options) {\n      if (arguments.length >= 1 && !$.isPlainObject(options)) {\n        Utils.warnOnce('Calling validate on a parsley form without passing arguments as an object is deprecated.');\n        var [group, force, event] = arguments;\n        options = {group, force, event};\n      }\n      return Form__statusMapping[ this.whenValidate(options).state() ];\n    },\n\n    whenValidate: function ({group, force, event} = {}) {\n      this.submitEvent = event;\n      if (event) {\n        this.submitEvent = Object.assign({}, event, {preventDefault: () => {\n          Utils.warnOnce(\"Using `this.submitEvent.preventDefault()` is deprecated; instead, call `this.validationResult = false`\");\n          this.validationResult = false;\n        }});\n      }\n      this.validationResult = true;\n\n      // fire validate event to eventually modify things before every validation\n      this._trigger('validate');\n\n      // Refresh form DOM options and form's fields that could have changed\n      this._refreshFields();\n\n      var promises = this._withoutReactualizingFormOptions(() => {\n        return $.map(this.fields, field => field.whenValidate({force, group}));\n      });\n\n      return Utils.all(promises)\n        .done(  () => { this._trigger('success'); })\n        .fail(  () => {\n          this.validationResult = false;\n          this.focus();\n          this._trigger('error');\n        })\n        .always(() => { this._trigger('validated'); })\n        .pipe(...this._pipeAccordingToValidationResult());\n    },\n\n    // Iterate over refreshed fields, and stop on first failure.\n    // Returns `true` if all fields are valid, `false` if a failure is detected\n    // or `null` if the result depends on an unresolved promise.\n    // Prefer using `whenValid` instead.\n    isValid: function (options) {\n      if (arguments.length >= 1 && !$.isPlainObject(options)) {\n        Utils.warnOnce('Calling isValid on a parsley form without passing arguments as an object is deprecated.');\n        var [group, force] = arguments;\n        options = {group, force};\n      }\n      return Form__statusMapping[ this.whenValid(options).state() ];\n    },\n\n    // Iterate over refreshed fields and validate them.\n    // Returns a promise.\n    // A validation that immediately fails will interrupt the validations.\n    whenValid: function ({group, force} = {}) {\n      this._refreshFields();\n\n      var promises = this._withoutReactualizingFormOptions(() => {\n        return $.map(this.fields, field => field.whenValid({group, force}));\n      });\n      return Utils.all(promises);\n    },\n\n    refresh: function() {\n      this._refreshFields();\n      return this;\n    },\n\n    // Reset UI\n    reset: function () {\n      // Form case: emit a reset event for each field\n      for (var i = 0; i < this.fields.length; i++)\n        this.fields[i].reset();\n\n      this._trigger('reset');\n    },\n\n    // Destroy Parsley instance (+ UI)\n    destroy: function () {\n      // Field case: emit destroy event to clean UI and then destroy stored instance\n      this._destroyUI();\n\n      // Form case: destroy all its fields and then destroy stored instance\n      for (var i = 0; i < this.fields.length; i++)\n        this.fields[i].destroy();\n\n      this.$element.removeData('Parsley');\n      this._trigger('destroy');\n    },\n\n    _refreshFields: function () {\n      return this.actualizeOptions()._bindFields();\n    },\n\n    _bindFields: function () {\n      var oldFields = this.fields;\n\n      this.fields = [];\n      this.fieldsMappedById = {};\n\n      this._withoutReactualizingFormOptions(() => {\n        this.$element\n        .find(this.options.inputs)\n        .not(this.options.excluded)\n        .each((_, element) => {\n          var fieldInstance = new window.Parsley.Factory(element, {}, this);\n\n          // Only add valid and not excluded `Field` and `FieldMultiple` children\n          if (('Field' === fieldInstance.__class__ || 'FieldMultiple' === fieldInstance.__class__) && (true !== fieldInstance.options.excluded)) {\n            let uniqueId = fieldInstance.__class__ + '-' + fieldInstance.__id__;\n            if ('undefined' === typeof this.fieldsMappedById[uniqueId]) {\n              this.fieldsMappedById[uniqueId] = fieldInstance;\n              this.fields.push(fieldInstance);\n            }\n          }\n        });\n\n        $.each(Utils.difference(oldFields, this.fields), (_, field) => {\n          field.reset();\n        });\n      });\n      return this;\n    },\n\n    // Internal only.\n    // Looping on a form's fields to do validation or similar\n    // will trigger reactualizing options on all of them, which\n    // in turn will reactualize the form's options.\n    // To avoid calling actualizeOptions so many times on the form\n    // for nothing, _withoutReactualizingFormOptions temporarily disables\n    // the method actualizeOptions on this form while `fn` is called.\n    _withoutReactualizingFormOptions: function (fn) {\n      var oldActualizeOptions = this.actualizeOptions;\n      this.actualizeOptions = function () { return this; };\n      var result = fn();\n      this.actualizeOptions = oldActualizeOptions;\n      return result;\n    },\n\n    // Internal only.\n    // Shortcut to trigger an event\n    // Returns true iff event is not interrupted and default not prevented.\n    _trigger: function (eventName) {\n      return this.trigger('form:' + eventName);\n    }\n\n  };\n\n  const Constraint = function(parsleyField, name, requirements, priority, isDomConstraint) {\n    const validatorSpec = window.Parsley._validatorRegistry.validators[name];\n    const validator = new Validator(validatorSpec);\n    priority = priority || parsleyField.options[name + 'Priority'] || validator.priority;\n    isDomConstraint = (true === isDomConstraint);\n\n    Object.assign(this, {\n      validator,\n      name,\n      requirements,\n      priority,\n      isDomConstraint\n    });\n    this._parseRequirements(parsleyField.options);\n  };\n\n  const capitalize = function(str) {\n    const cap = str[0].toUpperCase();\n    return cap + str.slice(1);\n  };\n\n  Constraint.prototype = {\n    validate: function(value, instance) {\n      return this.validator.validate(value, ...this.requirementList, instance);\n    },\n\n    _parseRequirements: function(options) {\n      this.requirementList = this.validator.parseRequirements(this.requirements,\n        key => options[this.name + capitalize(key)]\n      );\n    }\n  };\n\n  var Field = function (field, domOptions, options, parsleyFormInstance) {\n    this.__class__ = 'Field';\n\n    this.element = field;\n    this.$element = $(field);\n\n    // Set parent if we have one\n    if ('undefined' !== typeof parsleyFormInstance) {\n      this.parent = parsleyFormInstance;\n    }\n\n    this.options = options;\n    this.domOptions = domOptions;\n\n    // Initialize some properties\n    this.constraints = [];\n    this.constraintsByName = {};\n    this.validationResult = true;\n\n    // Bind constraints\n    this._bindConstraints();\n  };\n\n  var parsley_field__statusMapping = {pending: null, resolved: true, rejected: false};\n\n  Field.prototype = {\n    // # Public API\n    // Validate field and trigger some events for mainly `UI`\n    // @returns `true`, an array of the validators that failed, or\n    // `null` if validation is not finished. Prefer using whenValidate\n    validate: function (options) {\n      if (arguments.length >= 1 && !$.isPlainObject(options)) {\n        Utils.warnOnce('Calling validate on a parsley field without passing arguments as an object is deprecated.');\n        options = {options};\n      }\n      var promise = this.whenValidate(options);\n      if (!promise)  // If excluded with `group` option\n        return true;\n      switch (promise.state()) {\n        case 'pending': return null;\n        case 'resolved': return true;\n        case 'rejected': return this.validationResult;\n      }\n    },\n\n    // Validate field and trigger some events for mainly `UI`\n    // @returns a promise that succeeds only when all validations do\n    // or `undefined` if field is not in the given `group`.\n    whenValidate: function ({force, group} =  {}) {\n      // do not validate a field if not the same as given validation group\n      this.refresh();\n      if (group && !this._isInGroup(group))\n        return;\n\n      this.value = this.getValue();\n\n      // Field Validate event. `this.value` could be altered for custom needs\n      this._trigger('validate');\n\n      return this.whenValid({force, value: this.value, _refreshed: true})\n        .always(() => { this._reflowUI(); })\n        .done(() =>   { this._trigger('success'); })\n        .fail(() =>   { this._trigger('error'); })\n        .always(() => { this._trigger('validated'); })\n        .pipe(...this._pipeAccordingToValidationResult());\n    },\n\n    hasConstraints: function () {\n      return 0 !== this.constraints.length;\n    },\n\n    // An empty optional field does not need validation\n    needsValidation: function (value) {\n      if ('undefined' === typeof value)\n        value = this.getValue();\n\n      // If a field is empty and not required, it is valid\n      // Except if `data-parsley-validate-if-empty` explicitely added, useful for some custom validators\n      if (!value.length && !this._isRequired() && 'undefined' === typeof this.options.validateIfEmpty)\n        return false;\n\n      return true;\n    },\n\n    _isInGroup: function (group) {\n      if (Array.isArray(this.options.group))\n        return -1 !== $.inArray(group, this.options.group);\n      return this.options.group === group;\n    },\n\n    // Just validate field. Do not trigger any event.\n    // Returns `true` iff all constraints pass, `false` if there are failures,\n    // or `null` if the result can not be determined yet (depends on a promise)\n    // See also `whenValid`.\n    isValid: function (options) {\n      if (arguments.length >= 1 && !$.isPlainObject(options)) {\n        Utils.warnOnce('Calling isValid on a parsley field without passing arguments as an object is deprecated.');\n        var [force, value] = arguments;\n        options = {force, value};\n      }\n      var promise = this.whenValid(options);\n      if (!promise) // Excluded via `group`\n        return true;\n      return parsley_field__statusMapping[promise.state()];\n    },\n\n    // Just validate field. Do not trigger any event.\n    // @returns a promise that succeeds only when all validations do\n    // or `undefined` if the field is not in the given `group`.\n    // The argument `force` will force validation of empty fields.\n    // If a `value` is given, it will be validated instead of the value of the input.\n    whenValid: function ({force = false, value, group, _refreshed} = {}) {\n      // Recompute options and rebind constraints to have latest changes\n      if (!_refreshed)\n        this.refresh();\n      // do not validate a field if not the same as given validation group\n      if (group && !this._isInGroup(group))\n        return;\n\n      this.validationResult = true;\n\n      // A field without constraint is valid\n      if (!this.hasConstraints())\n        return $.when();\n\n      // Value could be passed as argument, needed to add more power to 'field:validate'\n      if ('undefined' === typeof value || null === value)\n        value = this.getValue();\n\n      if (!this.needsValidation(value) && true !== force)\n        return $.when();\n\n      var groupedConstraints = this._getGroupedConstraints();\n      var promises = [];\n      $.each(groupedConstraints, (_, constraints) => {\n        // Process one group of constraints at a time, we validate the constraints\n        // and combine the promises together.\n        var promise = Utils.all(\n          $.map(constraints, constraint => this._validateConstraint(value, constraint))\n        );\n        promises.push(promise);\n        if (promise.state() === 'rejected')\n          return false; // Interrupt processing if a group has already failed\n      });\n      return Utils.all(promises);\n    },\n\n    // @returns a promise\n    _validateConstraint: function(value, constraint) {\n      var result = constraint.validate(value, this);\n      // Map false to a failed promise\n      if (false === result)\n        result = $.Deferred().reject();\n      // Make sure we return a promise and that we record failures\n      return Utils.all([result]).fail(errorMessage => {\n        if (!(this.validationResult instanceof Array))\n          this.validationResult = [];\n        this.validationResult.push({\n          assert: constraint,\n          errorMessage: 'string' === typeof errorMessage && errorMessage\n        });\n      });\n    },\n\n    // @returns Parsley field computed value that could be overrided or configured in DOM\n    getValue: function () {\n      var value;\n\n      // Value could be overriden in DOM or with explicit options\n      if ('function' === typeof this.options.value)\n        value = this.options.value(this);\n      else if ('undefined' !== typeof this.options.value)\n        value = this.options.value;\n      else\n        value = this.$element.val();\n\n      // Handle wrong DOM or configurations\n      if ('undefined' === typeof value || null === value)\n        return '';\n\n      return this._handleWhitespace(value);\n    },\n\n    // Reset UI\n    reset: function () {\n      this._resetUI();\n      return this._trigger('reset');\n    },\n\n    // Destroy Parsley instance (+ UI)\n    destroy: function () {\n      // Field case: emit destroy event to clean UI and then destroy stored instance\n      this._destroyUI();\n      this.$element.removeData('Parsley');\n      this.$element.removeData('FieldMultiple');\n      this._trigger('destroy');\n    },\n\n    // Actualize options and rebind constraints\n    refresh: function () {\n      this._refreshConstraints();\n      return this;\n    },\n\n    _refreshConstraints: function () {\n      return this.actualizeOptions()._bindConstraints();\n    },\n\n    refreshConstraints: function() {\n      Utils.warnOnce(\"Parsley's refreshConstraints is deprecated. Please use refresh\");\n      return this.refresh();\n    },\n\n    /**\n    * Add a new constraint to a field\n    *\n    * @param {String}   name\n    * @param {Mixed}    requirements      optional\n    * @param {Number}   priority          optional\n    * @param {Boolean}  isDomConstraint   optional\n    */\n    addConstraint: function (name, requirements, priority, isDomConstraint) {\n\n      if (window.Parsley._validatorRegistry.validators[name]) {\n        var constraint = new Constraint(this, name, requirements, priority, isDomConstraint);\n\n        // if constraint already exist, delete it and push new version\n        if ('undefined' !== this.constraintsByName[constraint.name])\n          this.removeConstraint(constraint.name);\n\n        this.constraints.push(constraint);\n        this.constraintsByName[constraint.name] = constraint;\n      }\n\n      return this;\n    },\n\n    // Remove a constraint\n    removeConstraint: function (name) {\n      for (var i = 0; i < this.constraints.length; i++)\n        if (name === this.constraints[i].name) {\n          this.constraints.splice(i, 1);\n          break;\n        }\n      delete this.constraintsByName[name];\n      return this;\n    },\n\n    // Update a constraint (Remove + re-add)\n    updateConstraint: function (name, parameters, priority) {\n      return this.removeConstraint(name)\n        .addConstraint(name, parameters, priority);\n    },\n\n    // # Internals\n\n    // Internal only.\n    // Bind constraints from config + options + DOM\n    _bindConstraints: function () {\n      var constraints = [];\n      var constraintsByName = {};\n\n      // clean all existing DOM constraints to only keep javascript user constraints\n      for (var i = 0; i < this.constraints.length; i++)\n        if (false === this.constraints[i].isDomConstraint) {\n          constraints.push(this.constraints[i]);\n          constraintsByName[this.constraints[i].name] = this.constraints[i];\n        }\n\n      this.constraints = constraints;\n      this.constraintsByName = constraintsByName;\n\n      // then re-add Parsley DOM-API constraints\n      for (var name in this.options)\n        this.addConstraint(name, this.options[name], undefined, true);\n\n      // finally, bind special HTML5 constraints\n      return this._bindHtml5Constraints();\n    },\n\n    // Internal only.\n    // Bind specific HTML5 constraints to be HTML5 compliant\n    _bindHtml5Constraints: function () {\n      // html5 required\n      if (null !== this.element.getAttribute('required'))\n        this.addConstraint('required', true, undefined, true);\n\n      // html5 pattern\n      if (null !== this.element.getAttribute('pattern'))\n        this.addConstraint('pattern', this.element.getAttribute('pattern'), undefined, true);\n\n      // range\n      let min = this.element.getAttribute('min');\n      let max = this.element.getAttribute('max');\n      if (null !== min && null !== max)\n        this.addConstraint('range', [min, max], undefined, true);\n\n      // HTML5 min\n      else if (null !== min)\n        this.addConstraint('min', min, undefined, true);\n\n      // HTML5 max\n      else if (null !== max)\n        this.addConstraint('max', max, undefined, true);\n\n\n      // length\n      if (null !== this.element.getAttribute('minlength') && null !== this.element.getAttribute('maxlength'))\n        this.addConstraint('length', [this.element.getAttribute('minlength'), this.element.getAttribute('maxlength')], undefined, true);\n\n      // HTML5 minlength\n      else if (null !== this.element.getAttribute('minlength'))\n        this.addConstraint('minlength', this.element.getAttribute('minlength'), undefined, true);\n\n      // HTML5 maxlength\n      else if (null !== this.element.getAttribute('maxlength'))\n        this.addConstraint('maxlength', this.element.getAttribute('maxlength'), undefined, true);\n\n\n      // html5 types\n      var type = Utils.getType(this.element);\n\n      // Small special case here for HTML5 number: integer validator if step attribute is undefined or an integer value, number otherwise\n      if ('number' === type) {\n        return this.addConstraint('type', ['number', {\n          step: this.element.getAttribute('step') || '1',\n          base: min || this.element.getAttribute('value')\n        }], undefined, true);\n      // Regular other HTML5 supported types\n      } else if (/^(email|url|range|date)$/i.test(type)) {\n        return this.addConstraint('type', type, undefined, true);\n      }\n      return this;\n    },\n\n    // Internal only.\n    // Field is required if have required constraint without `false` value\n    _isRequired: function () {\n      if ('undefined' === typeof this.constraintsByName.required)\n        return false;\n\n      return false !== this.constraintsByName.required.requirements;\n    },\n\n    // Internal only.\n    // Shortcut to trigger an event\n    _trigger: function (eventName) {\n      return this.trigger('field:' + eventName);\n    },\n\n    // Internal only\n    // Handles whitespace in a value\n    // Use `data-parsley-whitespace=\"squish\"` to auto squish input value\n    // Use `data-parsley-whitespace=\"trim\"` to auto trim input value\n    _handleWhitespace: function (value) {\n      if (true === this.options.trimValue)\n        Utils.warnOnce('data-parsley-trim-value=\"true\" is deprecated, please use data-parsley-whitespace=\"trim\"');\n\n      if ('squish' === this.options.whitespace)\n        value = value.replace(/\\s{2,}/g, ' ');\n\n      if (('trim' === this.options.whitespace) || ('squish' === this.options.whitespace) || (true === this.options.trimValue))\n        value = Utils.trimString(value);\n\n      return value;\n    },\n\n    _isDateInput: function() {\n      var c = this.constraintsByName.type;\n      return c && c.requirements === 'date';\n    },\n\n    // Internal only.\n    // Returns the constraints, grouped by descending priority.\n    // The result is thus an array of arrays of constraints.\n    _getGroupedConstraints: function () {\n      if (false === this.options.priorityEnabled)\n        return [this.constraints];\n\n      var groupedConstraints = [];\n      var index = {};\n\n      // Create array unique of priorities\n      for (var i = 0; i < this.constraints.length; i++) {\n        var p = this.constraints[i].priority;\n        if (!index[p])\n          groupedConstraints.push(index[p] = []);\n        index[p].push(this.constraints[i]);\n      }\n      // Sort them by priority DESC\n      groupedConstraints.sort(function (a, b) { return b[0].priority - a[0].priority; });\n\n      return groupedConstraints;\n    }\n\n  };\n\n  var parsley_field = Field;\n\n  var Multiple = function () {\n    this.__class__ = 'FieldMultiple';\n  };\n\n  Multiple.prototype = {\n    // Add new `$element` sibling for multiple field\n    addElement: function ($element) {\n      this.$elements.push($element);\n\n      return this;\n    },\n\n    // See `Field._refreshConstraints()`\n    _refreshConstraints: function () {\n      var fieldConstraints;\n\n      this.constraints = [];\n\n      // Select multiple special treatment\n      if (this.element.nodeName === 'SELECT') {\n        this.actualizeOptions()._bindConstraints();\n\n        return this;\n      }\n\n      // Gather all constraints for each input in the multiple group\n      for (var i = 0; i < this.$elements.length; i++) {\n\n        // Check if element have not been dynamically removed since last binding\n        if (!$('html').has(this.$elements[i]).length) {\n          this.$elements.splice(i, 1);\n          continue;\n        }\n\n        fieldConstraints = this.$elements[i].data('FieldMultiple')._refreshConstraints().constraints;\n\n        for (var j = 0; j < fieldConstraints.length; j++)\n          this.addConstraint(fieldConstraints[j].name, fieldConstraints[j].requirements, fieldConstraints[j].priority, fieldConstraints[j].isDomConstraint);\n      }\n\n      return this;\n    },\n\n    // See `Field.getValue()`\n    getValue: function () {\n      // Value could be overriden in DOM\n      if ('function' === typeof this.options.value)\n        return this.options.value(this);\n      else if ('undefined' !== typeof this.options.value)\n        return this.options.value;\n\n      // Radio input case\n      if (this.element.nodeName === 'INPUT') {\n        var type = Utils.getType(this.element);\n        if (type === 'radio')\n          return this._findRelated().filter(':checked').val() || '';\n\n        // checkbox input case\n        if (type === 'checkbox') {\n          var values = [];\n\n          this._findRelated().filter(':checked').each(function () {\n            values.push($(this).val());\n          });\n\n          return values;\n        }\n      }\n\n      // Select multiple case\n      if (this.element.nodeName === 'SELECT' && null === this.$element.val())\n        return [];\n\n      // Default case that should never happen\n      return this.$element.val();\n    },\n\n    _init: function () {\n      this.$elements = [this.$element];\n\n      return this;\n    }\n  };\n\n  var Factory = function (element, options, parsleyFormInstance) {\n    this.element = element;\n    this.$element = $(element);\n\n    // If the element has already been bound, returns its saved Parsley instance\n    var savedparsleyFormInstance = this.$element.data('Parsley');\n    if (savedparsleyFormInstance) {\n\n      // If the saved instance has been bound without a Form parent and there is one given in this call, add it\n      if ('undefined' !== typeof parsleyFormInstance && savedparsleyFormInstance.parent === window.Parsley) {\n        savedparsleyFormInstance.parent = parsleyFormInstance;\n        savedparsleyFormInstance._resetOptions(savedparsleyFormInstance.options);\n      }\n\n      if ('object' === typeof options) {\n        Object.assign(savedparsleyFormInstance.options, options);\n      }\n\n      return savedparsleyFormInstance;\n    }\n\n    // Parsley must be instantiated with a DOM element or jQuery $element\n    if (!this.$element.length)\n      throw new Error('You must bind Parsley on an existing element.');\n\n    if ('undefined' !== typeof parsleyFormInstance && 'Form' !== parsleyFormInstance.__class__)\n      throw new Error('Parent instance must be a Form instance');\n\n    this.parent = parsleyFormInstance || window.Parsley;\n    return this.init(options);\n  };\n\n  Factory.prototype = {\n    init: function (options) {\n      this.__class__ = 'Parsley';\n      this.__version__ = '2.8.1';\n      this.__id__ = Utils.generateID();\n\n      // Pre-compute options\n      this._resetOptions(options);\n\n      // A Form instance is obviously a `<form>` element but also every node that is not an input and has the `data-parsley-validate` attribute\n      if (this.element.nodeName === 'FORM' || (Utils.checkAttr(this.element, this.options.namespace, 'validate') && !this.$element.is(this.options.inputs)))\n        return this.bind('parsleyForm');\n\n      // Every other element is bound as a `Field` or `FieldMultiple`\n      return this.isMultiple() ? this.handleMultiple() : this.bind('parsleyField');\n    },\n\n    isMultiple: function () {\n      var type = Utils.getType(this.element);\n      return ((type === 'radio' || type === 'checkbox') ||\n        (this.element.nodeName === 'SELECT' && null !== this.element.getAttribute('multiple')));\n    },\n\n    // Multiples fields are a real nightmare :(\n    // Maybe some refactoring would be appreciated here...\n    handleMultiple: function () {\n      var name;\n      var multiple;\n      var parsleyMultipleInstance;\n\n      // Handle multiple name\n      this.options.multiple = this.options.multiple ||\n        (name = this.element.getAttribute('name')) ||\n        this.element.getAttribute('id');\n\n      // Special select multiple input\n      if (this.element.nodeName === 'SELECT' && null !== this.element.getAttribute('multiple')) {\n        this.options.multiple = this.options.multiple || this.__id__;\n        return this.bind('parsleyFieldMultiple');\n\n      // Else for radio / checkboxes, we need a `name` or `data-parsley-multiple` to properly bind it\n      } else if (!this.options.multiple) {\n        Utils.warn('To be bound by Parsley, a radio, a checkbox and a multiple select input must have either a name or a multiple option.', this.$element);\n        return this;\n      }\n\n      // Remove special chars\n      this.options.multiple = this.options.multiple.replace(/(:|\\.|\\[|\\]|\\{|\\}|\\$)/g, '');\n\n      // Add proper `data-parsley-multiple` to siblings if we have a valid multiple name\n      if (name) {\n        $('input[name=\"' + name + '\"]').each((i, input) => {\n          var type = Utils.getType(input);\n          if ((type === 'radio' || type === 'checkbox'))\n            input.setAttribute(this.options.namespace + 'multiple', this.options.multiple);\n        });\n      }\n\n      // Check here if we don't already have a related multiple instance saved\n      var $previouslyRelated = this._findRelated();\n      for (var i = 0; i < $previouslyRelated.length; i++) {\n        parsleyMultipleInstance = $($previouslyRelated.get(i)).data('Parsley');\n        if ('undefined' !== typeof parsleyMultipleInstance) {\n\n          if (!this.$element.data('FieldMultiple')) {\n            parsleyMultipleInstance.addElement(this.$element);\n          }\n\n          break;\n        }\n      }\n\n      // Create a secret Field instance for every multiple field. It will be stored in `data('FieldMultiple')`\n      // And will be useful later to access classic `Field` stuff while being in a `FieldMultiple` instance\n      this.bind('parsleyField', true);\n\n      return parsleyMultipleInstance || this.bind('parsleyFieldMultiple');\n    },\n\n    // Return proper `Form`, `Field` or `FieldMultiple`\n    bind: function (type, doNotStore) {\n      var parsleyInstance;\n\n      switch (type) {\n        case 'parsleyForm':\n          parsleyInstance = $.extend(\n            new Form(this.element, this.domOptions, this.options),\n            new Base(),\n            window.ParsleyExtend\n          )._bindFields();\n          break;\n        case 'parsleyField':\n          parsleyInstance = $.extend(\n            new parsley_field(this.element, this.domOptions, this.options, this.parent),\n            new Base(),\n            window.ParsleyExtend\n          );\n          break;\n        case 'parsleyFieldMultiple':\n          parsleyInstance = $.extend(\n            new parsley_field(this.element, this.domOptions, this.options, this.parent),\n            new Multiple(),\n            new Base(),\n            window.ParsleyExtend\n          )._init();\n          break;\n        default:\n          throw new Error(type + 'is not a supported Parsley type');\n      }\n\n      if (this.options.multiple)\n        Utils.setAttr(this.element, this.options.namespace, 'multiple', this.options.multiple);\n\n      if ('undefined' !== typeof doNotStore) {\n        this.$element.data('FieldMultiple', parsleyInstance);\n\n        return parsleyInstance;\n      }\n\n      // Store the freshly bound instance in a DOM element for later access using jQuery `data()`\n      this.$element.data('Parsley', parsleyInstance);\n\n      // Tell the world we have a new Form or Field instance!\n      parsleyInstance._actualizeTriggers();\n      parsleyInstance._trigger('init');\n\n      return parsleyInstance;\n    }\n  };\n\n  var vernums = $.fn.jquery.split('.');\n  if (parseInt(vernums[0]) <= 1 && parseInt(vernums[1]) < 8) {\n    throw \"The loaded version of jQuery is too old. Please upgrade to 1.8.x or better.\";\n  }\n  if (!vernums.forEach) {\n    Utils.warn('Parsley requires ES5 to run properly. Please include https://github.com/es-shims/es5-shim');\n  }\n  // Inherit `on`, `off` & `trigger` to Parsley:\n  var Parsley = Object.assign(new Base(), {\n      element: document,\n      $element: $(document),\n      actualizeOptions: null,\n      _resetOptions: null,\n      Factory: Factory,\n      version: '2.8.1'\n    });\n\n  // Supplement Field and Form with Base\n  // This way, the constructors will have access to those methods\n  Object.assign(parsley_field.prototype, UI.Field, Base.prototype);\n  Object.assign(Form.prototype, UI.Form, Base.prototype);\n  // Inherit actualizeOptions and _resetOptions:\n  Object.assign(Factory.prototype, Base.prototype);\n\n  // ### jQuery API\n  // `$('.elem').parsley(options)` or `$('.elem').psly(options)`\n  $.fn.parsley = $.fn.psly = function (options) {\n    if (this.length > 1) {\n      var instances = [];\n\n      this.each(function () {\n        instances.push($(this).parsley(options));\n      });\n\n      return instances;\n    }\n\n    // Return undefined if applied to non existing DOM element\n    if (this.length == 0) {\n      return;\n    }\n\n    return new Factory(this[0], options);\n  };\n\n  // ### Field and Form extension\n  // Ensure the extension is now defined if it wasn't previously\n  if ('undefined' === typeof window.ParsleyExtend)\n    window.ParsleyExtend = {};\n\n  // ### Parsley config\n  // Inherit from ParsleyDefault, and copy over any existing values\n  Parsley.options = Object.assign(Utils.objectCreate(Defaults), window.ParsleyConfig);\n  window.ParsleyConfig = Parsley.options; // Old way of accessing global options\n\n  // ### Globals\n  window.Parsley = window.psly = Parsley;\n  Parsley.Utils = Utils;\n  window.ParsleyUtils = {};\n  $.each(Utils, (key, value) => {\n    if ('function' === typeof value) {\n      window.ParsleyUtils[key] = (...args) => {\n        Utils.warnOnce('Accessing `window.ParsleyUtils` is deprecated. Use `window.Parsley.Utils` instead.');\n        return Utils[key](...args);\n      };\n    }\n  });\n\n  // ### Define methods that forward to the registry, and deprecate all access except through window.Parsley\n  var registry = window.Parsley._validatorRegistry = new ValidatorRegistry(window.ParsleyConfig.validators, window.ParsleyConfig.i18n);\n  window.ParsleyValidator = {};\n  $.each('setLocale addCatalog addMessage addMessages getErrorMessage formatMessage addValidator updateValidator removeValidator hasValidator'.split(' '), function (i, method) {\n    window.Parsley[method] = (...args) => registry[method](...args);\n    window.ParsleyValidator[method] = function () {\n      Utils.warnOnce(`Accessing the method '${method}' through Validator is deprecated. Simply call 'window.Parsley.${method}(...)'`);\n      return window.Parsley[method](...arguments);\n    };\n  });\n\n  // ### UI\n  // Deprecated global object\n  window.Parsley.UI = UI;\n  window.ParsleyUI = {\n    removeError: function (instance, name, doNotUpdateClass) {\n      var updateClass = true !== doNotUpdateClass;\n      Utils.warnOnce(`Accessing UI is deprecated. Call 'removeError' on the instance directly. Please comment in issue 1073 as to your need to call this method.`);\n      return instance.removeError(name, {updateClass});\n    },\n    getErrorsMessages: function (instance) {\n      Utils.warnOnce(`Accessing UI is deprecated. Call 'getErrorsMessages' on the instance directly.`);\n      return instance.getErrorsMessages();\n    }\n  };\n  $.each('addError updateError'.split(' '), function (i, method) {\n    window.ParsleyUI[method] = function (instance, name, message, assert, doNotUpdateClass) {\n      var updateClass = true !== doNotUpdateClass;\n      Utils.warnOnce(`Accessing UI is deprecated. Call '${method}' on the instance directly. Please comment in issue 1073 as to your need to call this method.`);\n      return instance[method](name, {message, assert, updateClass});\n    };\n  });\n\n  // ### PARSLEY auto-binding\n  // Prevent it by setting `ParsleyConfig.autoBind` to `false`\n  if (false !== window.ParsleyConfig.autoBind) {\n    $(function () {\n      // Works only on `data-parsley-validate`.\n      if ($('[data-parsley-validate]').length)\n        $('[data-parsley-validate]').parsley();\n    });\n  }\n\n  var o = $({});\n  var deprecated = function () {\n    Utils.warnOnce(\"Parsley's pubsub module is deprecated; use the 'on' and 'off' methods on parsley instances or window.Parsley\");\n  };\n\n  // Returns an event handler that calls `fn` with the arguments it expects\n  function adapt(fn, context) {\n    // Store to allow unbinding\n    if (!fn.parsleyAdaptedCallback) {\n      fn.parsleyAdaptedCallback = function () {\n        var args = Array.prototype.slice.call(arguments, 0);\n        args.unshift(this);\n        fn.apply(context || o, args);\n      };\n    }\n    return fn.parsleyAdaptedCallback;\n  }\n\n  var eventPrefix = 'parsley:';\n  // Converts 'parsley:form:validate' into 'form:validate'\n  function eventName(name) {\n    if (name.lastIndexOf(eventPrefix, 0) === 0)\n      return name.substr(eventPrefix.length);\n    return name;\n  }\n\n  // $.listen is deprecated. Use Parsley.on instead.\n  $.listen = function (name, callback) {\n    var context;\n    deprecated();\n    if ('object' === typeof arguments[1] && 'function' === typeof arguments[2]) {\n      context = arguments[1];\n      callback = arguments[2];\n    }\n\n    if ('function' !== typeof callback)\n      throw new Error('Wrong parameters');\n\n    window.Parsley.on(eventName(name), adapt(callback, context));\n  };\n\n  $.listenTo = function (instance, name, fn) {\n    deprecated();\n    if (!(instance instanceof parsley_field) && !(instance instanceof Form))\n      throw new Error('Must give Parsley instance');\n\n    if ('string' !== typeof name || 'function' !== typeof fn)\n      throw new Error('Wrong parameters');\n\n    instance.on(eventName(name), adapt(fn));\n  };\n\n  $.unsubscribe = function (name, fn) {\n    deprecated();\n    if ('string' !== typeof name || 'function' !== typeof fn)\n      throw new Error('Wrong arguments');\n    window.Parsley.off(eventName(name), fn.parsleyAdaptedCallback);\n  };\n\n  $.unsubscribeTo = function (instance, name) {\n    deprecated();\n    if (!(instance instanceof parsley_field) && !(instance instanceof Form))\n      throw new Error('Must give Parsley instance');\n    instance.off(eventName(name));\n  };\n\n  $.unsubscribeAll = function (name) {\n    deprecated();\n    window.Parsley.off(eventName(name));\n    $('form,input,textarea,select').each(function () {\n      var instance = $(this).data('Parsley');\n      if (instance) {\n        instance.off(eventName(name));\n      }\n    });\n  };\n\n  // $.emit is deprecated. Use jQuery events instead.\n  $.emit = function (name, instance) {\n    deprecated();\n    var instanceGiven = (instance instanceof parsley_field) || (instance instanceof Form);\n    var args = Array.prototype.slice.call(arguments, instanceGiven ? 2 : 1);\n    args.unshift(eventName(name));\n    if (!instanceGiven) {\n      instance = window.Parsley;\n    }\n    instance.trigger(...args);\n  };\n\n  var pubsub = {};\n\n  $.extend(true, Parsley, {\n    asyncValidators: {\n      'default': {\n        fn: function (xhr) {\n          // By default, only status 2xx are deemed successful.\n          // Note: we use status instead of state() because responses with status 200\n          // but invalid messages (e.g. an empty body for content type set to JSON) will\n          // result in state() === 'rejected'.\n          return xhr.status >= 200 && xhr.status < 300;\n        },\n        url: false\n      },\n      reverse: {\n        fn: function (xhr) {\n          // If reverse option is set, a failing ajax request is considered successful\n          return xhr.status < 200 || xhr.status >= 300;\n        },\n        url: false\n      }\n    },\n\n    addAsyncValidator: function (name, fn, url, options) {\n      Parsley.asyncValidators[name] = {\n        fn: fn,\n        url: url || false,\n        options: options || {}\n      };\n\n      return this;\n    }\n\n  });\n\n  Parsley.addValidator('remote', {\n    requirementType: {\n      '': 'string',\n      'validator': 'string',\n      'reverse': 'boolean',\n      'options': 'object'\n    },\n\n    validateString: function (value, url, options, instance) {\n      var data = {};\n      var ajaxOptions;\n      var csr;\n      var validator = options.validator || (true === options.reverse ? 'reverse' : 'default');\n\n      if ('undefined' === typeof Parsley.asyncValidators[validator])\n        throw new Error('Calling an undefined async validator: `' + validator + '`');\n\n      url = Parsley.asyncValidators[validator].url || url;\n\n      // Fill current value\n      if (url.indexOf('{value}') > -1) {\n        url = url.replace('{value}', encodeURIComponent(value));\n      } else {\n        data[instance.element.getAttribute('name') || instance.element.getAttribute('id')] = value;\n      }\n\n      // Merge options passed in from the function with the ones in the attribute\n      var remoteOptions = $.extend(true, options.options || {} , Parsley.asyncValidators[validator].options);\n\n      // All `$.ajax(options)` could be overridden or extended directly from DOM in `data-parsley-remote-options`\n      ajaxOptions = $.extend(true, {}, {\n        url: url,\n        data: data,\n        type: 'GET'\n      }, remoteOptions);\n\n      // Generate store key based on ajax options\n      instance.trigger('field:ajaxoptions', instance, ajaxOptions);\n\n      csr = $.param(ajaxOptions);\n\n      // Initialise querry cache\n      if ('undefined' === typeof Parsley._remoteCache)\n        Parsley._remoteCache = {};\n\n      // Try to retrieve stored xhr\n      var xhr = Parsley._remoteCache[csr] = Parsley._remoteCache[csr] || $.ajax(ajaxOptions);\n\n      var handleXhr = function () {\n        var result = Parsley.asyncValidators[validator].fn.call(instance, xhr, url, options);\n        if (!result) // Map falsy results to rejected promise\n          result = $.Deferred().reject();\n        return $.when(result);\n      };\n\n      return xhr.then(handleXhr, handleXhr);\n    },\n\n    priority: -1\n  });\n\n  Parsley.on('form:submit', function () {\n    Parsley._remoteCache = {};\n  });\n\n  Base.prototype.addAsyncValidator = function () {\n    Utils.warnOnce('Accessing the method `addAsyncValidator` through an instance is deprecated. Simply call `Parsley.addAsyncValidator(...)`');\n    return Parsley.addAsyncValidator(...arguments);\n  };\n\n  // This is included with the Parsley library itself,\n  // thus there is no use in adding it to your project.\n  Parsley.addMessages('en', {\n    defaultMessage: \"This value seems to be invalid.\",\n    type: {\n      email:        \"This value should be a valid email.\",\n      url:          \"This value should be a valid url.\",\n      number:       \"This value should be a valid number.\",\n      integer:      \"This value should be a valid integer.\",\n      digits:       \"This value should be digits.\",\n      alphanum:     \"This value should be alphanumeric.\"\n    },\n    notblank:       \"This value should not be blank.\",\n    required:       \"This value is required.\",\n    pattern:        \"This value seems to be invalid.\",\n    min:            \"This value should be greater than or equal to %s.\",\n    max:            \"This value should be lower than or equal to %s.\",\n    range:          \"This value should be between %s and %s.\",\n    minlength:      \"This value is too short. It should have %s characters or more.\",\n    maxlength:      \"This value is too long. It should have %s characters or fewer.\",\n    length:         \"This value length is invalid. It should be between %s and %s characters long.\",\n    mincheck:       \"You must select at least %s choices.\",\n    maxcheck:       \"You must select %s choices or fewer.\",\n    check:          \"You must select between %s and %s choices.\",\n    equalto:        \"This value should be the same.\"\n  });\n\n  Parsley.setLocale('en');\n\n  /**\n   * inputevent - Alleviate browser bugs for input events\n   * https://github.com/marcandre/inputevent\n   * @version v0.0.3 - (built Thu, Apr 14th 2016, 5:58 pm)\n   * @author Marc-Andre Lafortune <github@marc-andre.ca>\n   * @license MIT\n   */\n\n  function InputEvent() {\n    let globals = window || global;\n\n    // Slightly odd way construct our object. This way methods are force bound.\n    // Used to test for duplicate library.\n    Object.assign(this, {\n\n      // For browsers that do not support isTrusted, assumes event is native.\n      isNativeEvent: evt => {\n        return evt.originalEvent && evt.originalEvent.isTrusted !== false;\n      },\n\n      fakeInputEvent: evt => {\n        if (this.isNativeEvent(evt)) {\n          $(evt.target).trigger('input');\n        }\n      },\n\n      misbehaves: evt => {\n        if (this.isNativeEvent(evt)) {\n          this.behavesOk(evt);\n          $(document)\n            .on('change.inputevent', evt.data.selector, this.fakeInputEvent);\n          this.fakeInputEvent(evt);\n        }\n      },\n\n      behavesOk: evt => {\n        if (this.isNativeEvent(evt)) {\n          $(document) // Simply unbinds the testing handler\n            .off('input.inputevent', evt.data.selector, this.behavesOk)\n            .off('change.inputevent', evt.data.selector, this.misbehaves);\n        }\n      },\n\n      // Bind the testing handlers\n      install: () => {\n        if (globals.inputEventPatched) {\n          return;\n        }\n        globals.inputEventPatched = '0.0.3';\n        for (let selector of ['select', 'input[type=\"checkbox\"]', 'input[type=\"radio\"]', 'input[type=\"file\"]']) {\n          $(document)\n            .on('input.inputevent', selector, {selector}, this.behavesOk)\n            .on('change.inputevent', selector, {selector}, this.misbehaves);\n        }\n      },\n\n      uninstall: () => {\n        delete globals.inputEventPatched;\n        $(document).off('.inputevent');\n      }\n\n    });\n  };\n\n  var inputevent = new InputEvent();\n\n  inputevent.install();\n\n  var parsley = Parsley;\n\n  return parsley;\n\n}));\n","import $ from 'jquery';\n\nvar globalID = 1;\nvar pastWarnings = {};\n\nvar Utils = {\n  // Parsley DOM-API\n  // returns object from dom attributes and values\n  attr: function (element, namespace, obj) {\n    var i;\n    var attribute;\n    var attributes;\n    var regex = new RegExp('^' + namespace, 'i');\n\n    if ('undefined' === typeof obj)\n      obj = {};\n    else {\n      // Clear all own properties. This won't affect prototype's values\n      for (i in obj) {\n        if (obj.hasOwnProperty(i))\n          delete obj[i];\n      }\n    }\n\n    if (!element)\n      return obj;\n\n    attributes = element.attributes;\n    for (i = attributes.length; i--; ) {\n      attribute = attributes[i];\n\n      if (attribute && attribute.specified && regex.test(attribute.name)) {\n        obj[this.camelize(attribute.name.slice(namespace.length))] = this.deserializeValue(attribute.value);\n      }\n    }\n\n    return obj;\n  },\n\n  checkAttr: function (element, namespace, checkAttr) {\n    return element.hasAttribute(namespace + checkAttr);\n  },\n\n  setAttr: function (element, namespace, attr, value) {\n    element.setAttribute(this.dasherize(namespace + attr), String(value));\n  },\n\n  getType: function(element) {\n    return element.getAttribute('type') || 'text';\n  },\n\n  generateID: function () {\n    return '' + globalID++;\n  },\n\n  /** Third party functions **/\n  deserializeValue: function (value) {\n    var num;\n\n    try {\n      return value ?\n        value == \"true\" ||\n        (value == \"false\" ? false :\n        value == \"null\" ? null :\n        !isNaN(num = Number(value)) ? num :\n        /^[\\[\\{]/.test(value) ? JSON.parse(value) :\n        value)\n        : value;\n    } catch (e) { return value; }\n  },\n\n  // Zepto camelize function\n  camelize: function (str) {\n    return str.replace(/-+(.)?/g, function (match, chr) {\n      return chr ? chr.toUpperCase() : '';\n    });\n  },\n\n  // Zepto dasherize function\n  dasherize: function (str) {\n    return str.replace(/::/g, '/')\n      .replace(/([A-Z]+)([A-Z][a-z])/g, '$1_$2')\n      .replace(/([a-z\\d])([A-Z])/g, '$1_$2')\n      .replace(/_/g, '-')\n      .toLowerCase();\n  },\n\n  warn: function () {\n    if (window.console && 'function' === typeof window.console.warn)\n      window.console.warn(...arguments);\n  },\n\n  warnOnce: function(msg) {\n    if (!pastWarnings[msg]) {\n      pastWarnings[msg] = true;\n      this.warn(...arguments);\n    }\n  },\n\n  _resetWarnings: function () {\n    pastWarnings = {};\n  },\n\n  trimString: function(string) {\n    return string.replace(/^\\s+|\\s+$/g, '');\n  },\n\n  parse: {\n    date: function(string) {\n      let parsed = string.match(/^(\\d{4,})-(\\d\\d)-(\\d\\d)$/);\n      if (!parsed)\n        return null;\n      let [_, year, month, day] = parsed.map(x => parseInt(x, 10));\n      let date = new Date(year, month - 1, day);\n      if (date.getFullYear() !== year || date.getMonth() + 1 !== month || date.getDate() !== day)\n        return null;\n      return date;\n    },\n    string: function(string) {\n      return string;\n    },\n    integer: function(string) {\n      if (isNaN(string))\n        return null;\n      return parseInt(string, 10);\n    },\n    number: function(string) {\n      if (isNaN(string))\n        throw null;\n      return parseFloat(string);\n    },\n    'boolean': function _boolean(string) {\n      return !(/^\\s*false\\s*$/i.test(string));\n    },\n    object: function(string) {\n      return Utils.deserializeValue(string);\n    },\n    regexp: function(regexp) {\n      var flags = '';\n\n      // Test if RegExp is literal, if not, nothing to be done, otherwise, we need to isolate flags and pattern\n      if (/^\\/.*\\/(?:[gimy]*)$/.test(regexp)) {\n        // Replace the regexp literal string with the first match group: ([gimy]*)\n        // If no flag is present, this will be a blank string\n        flags = regexp.replace(/.*\\/([gimy]*)$/, '$1');\n        // Again, replace the regexp literal string with the first match group:\n        // everything excluding the opening and closing slashes and the flags\n        regexp = regexp.replace(new RegExp('^/(.*?)/' + flags + '$'), '$1');\n      } else {\n        // Anchor regexp:\n        regexp = '^' + regexp + '$';\n      }\n      return new RegExp(regexp, flags);\n    }\n  },\n\n  parseRequirement: function(requirementType, string) {\n    var converter = this.parse[requirementType || 'string'];\n    if (!converter)\n      throw 'Unknown requirement specification: \"' + requirementType + '\"';\n    let converted = converter(string);\n    if (converted === null)\n      throw `Requirement is not a ${requirementType}: \"${string}\"`;\n    return converted;\n  },\n\n  namespaceEvents: function(events, namespace) {\n    events = this.trimString(events || '').split(/\\s+/);\n    if (!events[0])\n      return '';\n    return $.map(events, evt => `${evt}.${namespace}`).join(' ');\n  },\n\n  difference: function(array, remove) {\n    // This is O(N^2), should be optimized\n    let result = [];\n    $.each(array, (_, elem) => {\n      if (remove.indexOf(elem) == -1)\n        result.push(elem);\n    });\n    return result;\n  },\n\n  // Alter-ego to native Promise.all, but for jQuery\n  all: function(promises) {\n    // jQuery treats $.when() and $.when(singlePromise) differently; let's avoid that and add spurious elements\n    return $.when(...promises, 42, 42);\n  },\n\n  // Object.create polyfill, see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/create#Polyfill\n  objectCreate: Object.create || (function () {\n    var Object = function () {};\n    return function (prototype) {\n      if (arguments.length > 1) {\n        throw Error('Second argument not supported');\n      }\n      if (typeof prototype != 'object') {\n        throw TypeError('Argument must be an object');\n      }\n      Object.prototype = prototype;\n      var result = new Object();\n      Object.prototype = null;\n      return result;\n    };\n  })(),\n\n  _SubmitSelector: 'input[type=\"submit\"], button:submit'\n};\n\nexport default Utils;\n","// All these options could be overriden and specified directly in DOM using\n// `data-parsley-` default DOM-API\n// eg: `inputs` can be set in DOM using `data-parsley-inputs=\"input, textarea\"`\n// eg: `data-parsley-stop-on-first-failing-constraint=\"false\"`\n\nvar Defaults = {\n  // ### General\n\n  // Default data-namespace for DOM API\n  namespace: 'data-parsley-',\n\n  // Supported inputs by default\n  inputs: 'input, textarea, select',\n\n  // Excluded inputs by default\n  excluded: 'input[type=button], input[type=submit], input[type=reset], input[type=hidden]',\n\n  // Stop validating field on highest priority failing constraint\n  priorityEnabled: true,\n\n  // ### Field only\n\n  // identifier used to group together inputs (e.g. radio buttons...)\n  multiple: null,\n\n  // identifier (or array of identifiers) used to validate only a select group of inputs\n  group: null,\n\n  // ### UI\n  // Enable\\Disable error messages\n  uiEnabled: true,\n\n  // Key events threshold before validation\n  validationThreshold: 3,\n\n  // Focused field on form validation error. 'first'|'last'|'none'\n  focus: 'first',\n\n  // event(s) that will trigger validation before first failure. eg: `input`...\n  trigger: false,\n\n  // event(s) that will trigger validation after first failure.\n  triggerAfterFailure: 'input',\n\n  // Class that would be added on every failing validation Parsley field\n  errorClass: 'parsley-error',\n\n  // Same for success validation\n  successClass: 'parsley-success',\n\n  // Return the `$element` that will receive these above success or error classes\n  // Could also be (and given directly from DOM) a valid selector like `'#div'`\n  classHandler: function (Field) {},\n\n  // Return the `$element` where errors will be appended\n  // Could also be (and given directly from DOM) a valid selector like `'#div'`\n  errorsContainer: function (Field) {},\n\n  // ul elem that would receive errors' list\n  errorsWrapper: '<ul class=\"parsley-errors-list\"></ul>',\n\n  // li elem that would receive error message\n  errorTemplate: '<li></li>'\n};\n\nexport default Defaults;\n","import $ from 'jquery';\nimport Utils from './utils';\n\nvar Base = function () {\n  this.__id__ = Utils.generateID();\n};\n\nBase.prototype = {\n  asyncSupport: true, // Deprecated\n\n  _pipeAccordingToValidationResult: function () {\n    var pipe = () => {\n      var r = $.Deferred();\n      if (true !== this.validationResult)\n        r.reject();\n      return r.resolve().promise();\n    };\n    return [pipe, pipe];\n  },\n\n  actualizeOptions: function () {\n    Utils.attr(this.element, this.options.namespace, this.domOptions);\n    if (this.parent && this.parent.actualizeOptions)\n      this.parent.actualizeOptions();\n    return this;\n  },\n\n  _resetOptions: function (initOptions) {\n    this.domOptions = Utils.objectCreate(this.parent.options);\n    this.options = Utils.objectCreate(this.domOptions);\n    // Shallow copy of ownProperties of initOptions:\n    for (var i in initOptions) {\n      if (initOptions.hasOwnProperty(i))\n        this.options[i] = initOptions[i];\n    }\n    this.actualizeOptions();\n  },\n\n  _listeners: null,\n\n  // Register a callback for the given event name\n  // Callback is called with context as the first argument and the `this`\n  // The context is the current parsley instance, or window.Parsley if global\n  // A return value of `false` will interrupt the calls\n  on: function (name, fn) {\n    this._listeners = this._listeners || {};\n    var queue = this._listeners[name] = this._listeners[name] || [];\n    queue.push(fn);\n\n    return this;\n  },\n\n  // Deprecated. Use `on` instead\n  subscribe: function(name, fn) {\n    $.listenTo(this, name.toLowerCase(), fn);\n  },\n\n  // Unregister a callback (or all if none is given) for the given event name\n  off: function (name, fn) {\n    var queue = this._listeners && this._listeners[name];\n    if (queue) {\n      if (!fn) {\n        delete this._listeners[name];\n      } else {\n        for (var i = queue.length; i--; )\n          if (queue[i] === fn)\n            queue.splice(i, 1);\n      }\n    }\n    return this;\n  },\n\n  // Deprecated. Use `off`\n  unsubscribe: function(name, fn) {\n    $.unsubscribeTo(this, name.toLowerCase());\n  },\n\n  // Trigger an event of the given name\n  // A return value of `false` interrupts the callback chain\n  // Returns false if execution was interrupted\n  trigger: function (name, target, extraArg) {\n    target = target || this;\n    var queue = this._listeners && this._listeners[name];\n    var result;\n    var parentResult;\n    if (queue) {\n      for (var i = queue.length; i--; ) {\n        result = queue[i].call(target, target, extraArg);\n        if (result === false) return result;\n      }\n    }\n    if (this.parent) {\n      return this.parent.trigger(name, target, extraArg);\n    }\n    return true;\n  },\n\n  asyncIsValid: function (group, force) {\n    Utils.warnOnce(\"asyncIsValid is deprecated; please use whenValid instead\");\n    return this.whenValid({group, force});\n  },\n\n  _findRelated: function () {\n    return this.options.multiple ?\n      $(this.parent.element.querySelectorAll(`[${this.options.namespace}multiple=\"${this.options.multiple}\"]`))\n    : this.$element;\n  }\n};\n\nexport default Base;\n","import $ from 'jquery';\nimport Utils from './utils';\n\nvar convertArrayRequirement = function(string, length) {\n  var m = string.match(/^\\s*\\[(.*)\\]\\s*$/);\n  if (!m)\n    throw 'Requirement is not an array: \"' + string + '\"';\n  var values = m[1].split(',').map(Utils.trimString);\n  if (values.length !== length)\n    throw 'Requirement has ' + values.length + ' values when ' + length + ' are needed';\n  return values;\n};\n\nvar convertExtraOptionRequirement = function(requirementSpec, string, extraOptionReader) {\n  var main = null;\n  var extra = {};\n  for (var key in requirementSpec) {\n    if (key) {\n      var value = extraOptionReader(key);\n      if ('string' === typeof value)\n        value = Utils.parseRequirement(requirementSpec[key], value);\n      extra[key] = value;\n    } else {\n      main = Utils.parseRequirement(requirementSpec[key], string);\n    }\n  }\n  return [main, extra];\n};\n\n// A Validator needs to implement the methods `validate` and `parseRequirements`\n\nvar Validator = function(spec) {\n  $.extend(true, this, spec);\n};\n\nValidator.prototype = {\n  // Returns `true` iff the given `value` is valid according the given requirements.\n  validate: function(value, requirementFirstArg) {\n    if (this.fn) { // Legacy style validator\n\n      if (arguments.length > 3)  // If more args then value, requirement, instance...\n        requirementFirstArg = [].slice.call(arguments, 1, -1);  // Skip first arg (value) and last (instance), combining the rest\n      return this.fn(value, requirementFirstArg);\n    }\n\n    if (Array.isArray(value)) {\n      if (!this.validateMultiple)\n        throw 'Validator `' + this.name + '` does not handle multiple values';\n      return this.validateMultiple(...arguments);\n    } else {\n      let instance = arguments[arguments.length - 1];\n      if (this.validateDate && instance._isDateInput()) {\n        arguments[0] = Utils.parse.date(arguments[0]);\n        if (arguments[0] === null)\n          return false;\n        return this.validateDate(...arguments);\n      }\n      if (this.validateNumber) {\n        if (isNaN(value))\n          return false;\n        arguments[0] = parseFloat(arguments[0]);\n        return this.validateNumber(...arguments);\n      }\n      if (this.validateString) {\n        return this.validateString(...arguments);\n      }\n      throw 'Validator `' + this.name + '` only handles multiple values';\n    }\n  },\n\n  // Parses `requirements` into an array of arguments,\n  // according to `this.requirementType`\n  parseRequirements: function(requirements, extraOptionReader) {\n    if ('string' !== typeof requirements) {\n      // Assume requirement already parsed\n      // but make sure we return an array\n      return Array.isArray(requirements) ? requirements : [requirements];\n    }\n    var type = this.requirementType;\n    if (Array.isArray(type)) {\n      var values = convertArrayRequirement(requirements, type.length);\n      for (var i = 0; i < values.length; i++)\n        values[i] = Utils.parseRequirement(type[i], values[i]);\n      return values;\n    } else if ($.isPlainObject(type)) {\n      return convertExtraOptionRequirement(type, requirements, extraOptionReader);\n    } else {\n      return [Utils.parseRequirement(type, requirements)];\n    }\n  },\n  // Defaults:\n  requirementType: 'string',\n\n  priority: 2\n\n};\n\nexport default Validator;\n","import $ from 'jquery';\nimport Utils from './utils';\nimport Defaults from './defaults';\nimport Validator from './validator';\n\nvar ValidatorRegistry = function (validators, catalog) {\n  this.__class__ = 'ValidatorRegistry';\n\n  // Default Parsley locale is en\n  this.locale = 'en';\n\n  this.init(validators || {}, catalog || {});\n};\n\nvar typeTesters =  {\n  email: /^((([a-zA-Z]|\\d|[!#\\$%&'\\*\\+\\-\\/=\\?\\^_`{\\|}~]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])+(\\.([a-zA-Z]|\\d|[!#\\$%&'\\*\\+\\-\\/=\\?\\^_`{\\|}~]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])+)*)|((\\x22)((((\\x20|\\x09)*(\\x0d\\x0a))?(\\x20|\\x09)+)?(([\\x01-\\x08\\x0b\\x0c\\x0e-\\x1f\\x7f]|\\x21|[\\x23-\\x5b]|[\\x5d-\\x7e]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])|(\\\\([\\x01-\\x09\\x0b\\x0c\\x0d-\\x7f]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF]))))*(((\\x20|\\x09)*(\\x0d\\x0a))?(\\x20|\\x09)+)?(\\x22)))@((([a-zA-Z]|\\d|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])|(([a-zA-Z]|\\d|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])([a-zA-Z]|\\d|-|_|~|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])*([a-zA-Z]|\\d|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])))\\.)+(([a-zA-Z]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])|(([a-zA-Z]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])([a-zA-Z]|\\d|-|_|~|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])*([a-zA-Z]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])))$/,\n\n  // Follow https://www.w3.org/TR/html5/infrastructure.html#floating-point-numbers\n  number: /^-?(\\d*\\.)?\\d+(e[-+]?\\d+)?$/i,\n\n  integer: /^-?\\d+$/,\n\n  digits: /^\\d+$/,\n\n  alphanum: /^\\w+$/i,\n\n  date: {\n    test: value => Utils.parse.date(value) !== null\n  },\n\n  url: new RegExp(\n      \"^\" +\n        // protocol identifier\n        \"(?:(?:https?|ftp)://)?\" + // ** mod: make scheme optional\n        // user:pass authentication\n        \"(?:\\\\S+(?::\\\\S*)?@)?\" +\n        \"(?:\" +\n          // IP address exclusion\n          // private & local networks\n          // \"(?!(?:10|127)(?:\\\\.\\\\d{1,3}){3})\" +   // ** mod: allow local networks\n          // \"(?!(?:169\\\\.254|192\\\\.168)(?:\\\\.\\\\d{1,3}){2})\" +  // ** mod: allow local networks\n          // \"(?!172\\\\.(?:1[6-9]|2\\\\d|3[0-1])(?:\\\\.\\\\d{1,3}){2})\" +  // ** mod: allow local networks\n          // IP address dotted notation octets\n          // excludes loopback network 0.0.0.0\n          // excludes reserved space >= 224.0.0.0\n          // excludes network & broacast addresses\n          // (first & last IP address of each class)\n          \"(?:[1-9]\\\\d?|1\\\\d\\\\d|2[01]\\\\d|22[0-3])\" +\n          \"(?:\\\\.(?:1?\\\\d{1,2}|2[0-4]\\\\d|25[0-5])){2}\" +\n          \"(?:\\\\.(?:[1-9]\\\\d?|1\\\\d\\\\d|2[0-4]\\\\d|25[0-4]))\" +\n        \"|\" +\n          // host name\n          \"(?:(?:[a-zA-Z\\\\u00a1-\\\\uffff0-9]-*)*[a-zA-Z\\\\u00a1-\\\\uffff0-9]+)\" +\n          // domain name\n          \"(?:\\\\.(?:[a-zA-Z\\\\u00a1-\\\\uffff0-9]-*)*[a-zA-Z\\\\u00a1-\\\\uffff0-9]+)*\" +\n          // TLD identifier\n          \"(?:\\\\.(?:[a-zA-Z\\\\u00a1-\\\\uffff]{2,}))\" +\n        \")\" +\n        // port number\n        \"(?::\\\\d{2,5})?\" +\n        // resource path\n        \"(?:/\\\\S*)?\" +\n      \"$\"\n    )\n};\ntypeTesters.range = typeTesters.number;\n\n// See http://stackoverflow.com/a/10454560/8279\nvar decimalPlaces = num => {\n  var match = ('' + num).match(/(?:\\.(\\d+))?(?:[eE]([+-]?\\d+))?$/);\n  if (!match) { return 0; }\n  return Math.max(\n       0,\n       // Number of digits right of decimal point.\n       (match[1] ? match[1].length : 0) -\n       // Adjust for scientific notation.\n       (match[2] ? +match[2] : 0));\n};\n\n// parseArguments('number', ['1', '2']) => [1, 2]\nlet parseArguments = (type, args) => args.map(Utils.parse[type]);\n// operatorToValidator returns a validating function for an operator function, applied to the given type\nlet operatorToValidator = (type, operator) => {\n  return (value, ...requirementsAndInput) => {\n    requirementsAndInput.pop(); // Get rid of `input` argument\n    if (!value)\n      return true;  // Builtin validators all accept empty strings, except `required` of course\n    return operator(value, ...parseArguments(type, requirementsAndInput));\n  };\n};\n\nlet comparisonOperator = operator => ({\n  validateDate: operatorToValidator('date', operator),\n  validateNumber: operatorToValidator('number', operator),\n  requirementType: operator.length <= 2 ? 'string' : ['string', 'string'], // Support operators with a 1 or 2 requirement(s)\n  priority: 30\n});\n\nValidatorRegistry.prototype = {\n  init: function (validators, catalog) {\n    this.catalog = catalog;\n    // Copy prototype's validators:\n    this.validators = Object.assign({}, this.validators);\n\n    for (var name in validators)\n      this.addValidator(name, validators[name].fn, validators[name].priority);\n\n    window.Parsley.trigger('parsley:validator:init');\n  },\n\n  // Set new messages locale if we have dictionary loaded in ParsleyConfig.i18n\n  setLocale: function (locale) {\n    if ('undefined' === typeof this.catalog[locale])\n      throw new Error(locale + ' is not available in the catalog');\n\n    this.locale = locale;\n\n    return this;\n  },\n\n  // Add a new messages catalog for a given locale. Set locale for this catalog if set === `true`\n  addCatalog: function (locale, messages, set) {\n    if ('object' === typeof messages)\n      this.catalog[locale] = messages;\n\n    if (true === set)\n      return this.setLocale(locale);\n\n    return this;\n  },\n\n  // Add a specific message for a given constraint in a given locale\n  addMessage: function (locale, name, message) {\n    if ('undefined' === typeof this.catalog[locale])\n      this.catalog[locale] = {};\n\n    this.catalog[locale][name] = message;\n\n    return this;\n  },\n\n  // Add messages for a given locale\n  addMessages: function (locale, nameMessageObject) {\n    for (var name in nameMessageObject)\n      this.addMessage(locale, name, nameMessageObject[name]);\n\n    return this;\n  },\n\n  // Add a new validator\n  //\n  //    addValidator('custom', {\n  //        requirementType: ['integer', 'integer'],\n  //        validateString: function(value, from, to) {},\n  //        priority: 22,\n  //        messages: {\n  //          en: \"Hey, that's no good\",\n  //          fr: \"Aye aye, pas bon du tout\",\n  //        }\n  //    })\n  //\n  // Old API was addValidator(name, function, priority)\n  //\n  addValidator: function (name, arg1, arg2) {\n    if (this.validators[name])\n      Utils.warn('Validator \"' + name + '\" is already defined.');\n    else if (Defaults.hasOwnProperty(name)) {\n      Utils.warn('\"' + name + '\" is a restricted keyword and is not a valid validator name.');\n      return;\n    }\n    return this._setValidator(...arguments);\n  },\n\n  hasValidator: function (name) {\n    return !!this.validators[name];\n  },\n\n  updateValidator: function (name, arg1, arg2) {\n    if (!this.validators[name]) {\n      Utils.warn('Validator \"' + name + '\" is not already defined.');\n      return this.addValidator(...arguments);\n    }\n    return this._setValidator(...arguments);\n  },\n\n  removeValidator: function (name) {\n    if (!this.validators[name])\n      Utils.warn('Validator \"' + name + '\" is not defined.');\n\n    delete this.validators[name];\n\n    return this;\n  },\n\n  _setValidator: function (name, validator, priority) {\n    if ('object' !== typeof validator) {\n      // Old style validator, with `fn` and `priority`\n      validator = {\n        fn: validator,\n        priority: priority\n      };\n    }\n    if (!validator.validate) {\n      validator = new Validator(validator);\n    }\n    this.validators[name] = validator;\n\n    for (var locale in validator.messages || {})\n      this.addMessage(locale, name, validator.messages[locale]);\n\n    return this;\n  },\n\n  getErrorMessage: function (constraint) {\n    var message;\n\n    // Type constraints are a bit different, we have to match their requirements too to find right error message\n    if ('type' === constraint.name) {\n      var typeMessages = this.catalog[this.locale][constraint.name] || {};\n      message = typeMessages[constraint.requirements];\n    } else\n      message = this.formatMessage(this.catalog[this.locale][constraint.name], constraint.requirements);\n\n    return message || this.catalog[this.locale].defaultMessage || this.catalog.en.defaultMessage;\n  },\n\n  // Kind of light `sprintf()` implementation\n  formatMessage: function (string, parameters) {\n    if ('object' === typeof parameters) {\n      for (var i in parameters)\n        string = this.formatMessage(string, parameters[i]);\n\n      return string;\n    }\n\n    return 'string' === typeof string ? string.replace(/%s/i, parameters) : '';\n  },\n\n  // Here is the Parsley default validators list.\n  // A validator is an object with the following key values:\n  //  - priority: an integer\n  //  - requirement: 'string' (default), 'integer', 'number', 'regexp' or an Array of these\n  //  - validateString, validateMultiple, validateNumber: functions returning `true`, `false` or a promise\n  // Alternatively, a validator can be a function that returns such an object\n  //\n  validators: {\n    notblank: {\n      validateString: function(value) {\n        return /\\S/.test(value);\n      },\n      priority: 2\n    },\n    required: {\n      validateMultiple: function(values) {\n        return values.length > 0;\n      },\n      validateString: function(value) {\n        return /\\S/.test(value);\n      },\n      priority: 512\n    },\n    type: {\n      validateString: function(value, type, {step = 'any', base = 0} = {}) {\n        var tester = typeTesters[type];\n        if (!tester) {\n          throw new Error('validator type `' + type + '` is not supported');\n        }\n        if (!value)\n          return true;  // Builtin validators all accept empty strings, except `required` of course\n        if (!tester.test(value))\n          return false;\n        if ('number' === type) {\n          if (!/^any$/i.test(step || '')) {\n            var nb = Number(value);\n            var decimals = Math.max(decimalPlaces(step), decimalPlaces(base));\n            if (decimalPlaces(nb) > decimals) // Value can't have too many decimals\n              return false;\n            // Be careful of rounding errors by using integers.\n            var toInt = f => Math.round(f * Math.pow(10, decimals));\n            if ((toInt(nb) - toInt(base)) % toInt(step) != 0)\n              return false;\n          }\n        }\n        return true;\n      },\n      requirementType: {\n        '': 'string',\n        step: 'string',\n        base: 'number'\n      },\n      priority: 256\n    },\n    pattern: {\n      validateString: function(value, regexp) {\n        if (!value)\n          return true;  // Builtin validators all accept empty strings, except `required` of course\n        return regexp.test(value);\n      },\n      requirementType: 'regexp',\n      priority: 64\n    },\n    minlength: {\n      validateString: function (value, requirement) {\n        if (!value)\n          return true;  // Builtin validators all accept empty strings, except `required` of course\n        return value.length >= requirement;\n      },\n      requirementType: 'integer',\n      priority: 30\n    },\n    maxlength: {\n      validateString: function (value, requirement) {\n        return value.length <= requirement;\n      },\n      requirementType: 'integer',\n      priority: 30\n    },\n    length: {\n      validateString: function (value, min, max) {\n        if (!value)\n          return true;  // Builtin validators all accept empty strings, except `required` of course\n        return value.length >= min && value.length <= max;\n      },\n      requirementType: ['integer', 'integer'],\n      priority: 30\n    },\n    mincheck: {\n      validateMultiple: function (values, requirement) {\n        return values.length >= requirement;\n      },\n      requirementType: 'integer',\n      priority: 30\n    },\n    maxcheck: {\n      validateMultiple: function (values, requirement) {\n        return values.length <= requirement;\n      },\n      requirementType: 'integer',\n      priority: 30\n    },\n    check: {\n      validateMultiple: function (values, min, max) {\n        return values.length >= min && values.length <= max;\n      },\n      requirementType: ['integer', 'integer'],\n      priority: 30\n    },\n    min: comparisonOperator((value, requirement) => value >= requirement),\n    max: comparisonOperator((value, requirement) => value <= requirement),\n    range: comparisonOperator((value, min, max) => value >= min && value <= max),\n    equalto: {\n      validateString: function (value, refOrValue) {\n        if (!value)\n          return true;  // Builtin validators all accept empty strings, except `required` of course\n        var $reference = $(refOrValue);\n        if ($reference.length)\n          return value === $reference.val();\n        else\n          return value === refOrValue;\n      },\n      priority: 256\n    }\n  }\n};\n\nexport default ValidatorRegistry;\n","import $ from 'jquery';\nimport Utils from './utils';\n\nvar UI = {};\n\nvar diffResults = function (newResult, oldResult, deep) {\n  var added = [];\n  var kept = [];\n\n  for (var i = 0; i < newResult.length; i++) {\n    var found = false;\n\n    for (var j = 0; j < oldResult.length; j++)\n      if (newResult[i].assert.name === oldResult[j].assert.name) {\n        found = true;\n        break;\n      }\n\n    if (found)\n      kept.push(newResult[i]);\n    else\n      added.push(newResult[i]);\n  }\n\n  return {\n    kept: kept,\n    added: added,\n    removed: !deep ? diffResults(oldResult, newResult, true).added : []\n  };\n};\n\nUI.Form = {\n\n  _actualizeTriggers: function () {\n    this.$element.on('submit.Parsley', evt => { this.onSubmitValidate(evt); });\n    this.$element.on('click.Parsley', Utils._SubmitSelector, evt => { this.onSubmitButton(evt); });\n\n    // UI could be disabled\n    if (false === this.options.uiEnabled)\n      return;\n\n    this.element.setAttribute('novalidate', '');\n  },\n\n  focus: function () {\n    this._focusedField = null;\n\n    if (true === this.validationResult || 'none' === this.options.focus)\n      return null;\n\n    for (var i = 0; i < this.fields.length; i++) {\n      var field = this.fields[i];\n      if (true !== field.validationResult && field.validationResult.length > 0 && 'undefined' === typeof field.options.noFocus) {\n        this._focusedField = field.$element;\n        if ('first' === this.options.focus)\n          break;\n      }\n    }\n\n    if (null === this._focusedField)\n      return null;\n\n    return this._focusedField.focus();\n  },\n\n  _destroyUI: function () {\n    // Reset all event listeners\n    this.$element.off('.Parsley');\n  }\n\n};\n\nUI.Field = {\n\n  _reflowUI: function () {\n    this._buildUI();\n\n    // If this field doesn't have an active UI don't bother doing something\n    if (!this._ui)\n      return;\n\n    // Diff between two validation results\n    var diff = diffResults(this.validationResult, this._ui.lastValidationResult);\n\n    // Then store current validation result for next reflow\n    this._ui.lastValidationResult = this.validationResult;\n\n    // Handle valid / invalid / none field class\n    this._manageStatusClass();\n\n    // Add, remove, updated errors messages\n    this._manageErrorsMessages(diff);\n\n    // Triggers impl\n    this._actualizeTriggers();\n\n    // If field is not valid for the first time, bind keyup trigger to ease UX and quickly inform user\n    if ((diff.kept.length || diff.added.length) && !this._failedOnce) {\n      this._failedOnce = true;\n      this._actualizeTriggers();\n    }\n  },\n\n  // Returns an array of field's error message(s)\n  getErrorsMessages: function () {\n    // No error message, field is valid\n    if (true === this.validationResult)\n      return [];\n\n    var messages = [];\n\n    for (var i = 0; i < this.validationResult.length; i++)\n      messages.push(this.validationResult[i].errorMessage ||\n       this._getErrorMessage(this.validationResult[i].assert));\n\n    return messages;\n  },\n\n  // It's a goal of Parsley that this method is no longer required [#1073]\n  addError: function (name, {message, assert, updateClass = true} = {}) {\n    this._buildUI();\n    this._addError(name, {message, assert});\n\n    if (updateClass)\n      this._errorClass();\n  },\n\n  // It's a goal of Parsley that this method is no longer required [#1073]\n  updateError: function (name, {message, assert, updateClass = true} = {}) {\n    this._buildUI();\n    this._updateError(name, {message, assert});\n\n    if (updateClass)\n      this._errorClass();\n  },\n\n  // It's a goal of Parsley that this method is no longer required [#1073]\n  removeError: function (name, {updateClass = true} = {}) {\n    this._buildUI();\n    this._removeError(name);\n\n    // edge case possible here: remove a standard Parsley error that is still failing in this.validationResult\n    // but highly improbable cuz' manually removing a well Parsley handled error makes no sense.\n    if (updateClass)\n      this._manageStatusClass();\n  },\n\n  _manageStatusClass: function () {\n    if (this.hasConstraints() && this.needsValidation() && true === this.validationResult)\n      this._successClass();\n    else if (this.validationResult.length > 0)\n      this._errorClass();\n    else\n      this._resetClass();\n  },\n\n  _manageErrorsMessages: function (diff) {\n    if ('undefined' !== typeof this.options.errorsMessagesDisabled)\n      return;\n\n    // Case where we have errorMessage option that configure an unique field error message, regardless failing validators\n    if ('undefined' !== typeof this.options.errorMessage) {\n      if ((diff.added.length || diff.kept.length)) {\n        this._insertErrorWrapper();\n\n        if (0 === this._ui.$errorsWrapper.find('.parsley-custom-error-message').length)\n          this._ui.$errorsWrapper\n            .append(\n              $(this.options.errorTemplate)\n              .addClass('parsley-custom-error-message')\n            );\n\n        return this._ui.$errorsWrapper\n          .addClass('filled')\n          .find('.parsley-custom-error-message')\n          .html(this.options.errorMessage);\n      }\n\n      return this._ui.$errorsWrapper\n        .removeClass('filled')\n        .find('.parsley-custom-error-message')\n        .remove();\n    }\n\n    // Show, hide, update failing constraints messages\n    for (var i = 0; i < diff.removed.length; i++)\n      this._removeError(diff.removed[i].assert.name);\n\n    for (i = 0; i < diff.added.length; i++)\n      this._addError(diff.added[i].assert.name, {message: diff.added[i].errorMessage, assert: diff.added[i].assert});\n\n    for (i = 0; i < diff.kept.length; i++)\n      this._updateError(diff.kept[i].assert.name, {message: diff.kept[i].errorMessage, assert: diff.kept[i].assert});\n  },\n\n\n  _addError: function (name, {message, assert}) {\n    this._insertErrorWrapper();\n    this._ui.$errorClassHandler\n      .attr('aria-describedby', this._ui.errorsWrapperId);\n    this._ui.$errorsWrapper\n      .addClass('filled')\n      .append(\n        $(this.options.errorTemplate)\n        .addClass('parsley-' + name)\n        .html(message || this._getErrorMessage(assert))\n      );\n  },\n\n  _updateError: function (name, {message, assert}) {\n    this._ui.$errorsWrapper\n      .addClass('filled')\n      .find('.parsley-' + name)\n      .html(message || this._getErrorMessage(assert));\n  },\n\n  _removeError: function (name) {\n    this._ui.$errorClassHandler\n      .removeAttr('aria-describedby');\n    this._ui.$errorsWrapper\n      .removeClass('filled')\n      .find('.parsley-' + name)\n      .remove();\n  },\n\n  _getErrorMessage: function (constraint) {\n    var customConstraintErrorMessage = constraint.name + 'Message';\n\n    if ('undefined' !== typeof this.options[customConstraintErrorMessage])\n      return window.Parsley.formatMessage(this.options[customConstraintErrorMessage], constraint.requirements);\n\n    return window.Parsley.getErrorMessage(constraint);\n  },\n\n  _buildUI: function () {\n    // UI could be already built or disabled\n    if (this._ui || false === this.options.uiEnabled)\n      return;\n\n    var _ui = {};\n\n    // Give field its Parsley id in DOM\n    this.element.setAttribute(this.options.namespace + 'id', this.__id__);\n\n    /** Generate important UI elements and store them in this **/\n    // $errorClassHandler is the $element that woul have parsley-error and parsley-success classes\n    _ui.$errorClassHandler = this._manageClassHandler();\n\n    // $errorsWrapper is a div that would contain the various field errors, it will be appended into $errorsContainer\n    _ui.errorsWrapperId = 'parsley-id-' + (this.options.multiple ? 'multiple-' + this.options.multiple : this.__id__);\n    _ui.$errorsWrapper = $(this.options.errorsWrapper).attr('id', _ui.errorsWrapperId);\n\n    // ValidationResult UI storage to detect what have changed bwt two validations, and update DOM accordingly\n    _ui.lastValidationResult = [];\n    _ui.validationInformationVisible = false;\n\n    // Store it in this for later\n    this._ui = _ui;\n  },\n\n  // Determine which element will have `parsley-error` and `parsley-success` classes\n  _manageClassHandler: function () {\n    // Class handled could also be determined by function given in Parsley options\n    if ('string' === typeof this.options.classHandler && $(this.options.classHandler).length)\n      return $(this.options.classHandler);\n\n    // Class handled could also be determined by function given in Parsley options\n    var $handlerFunction = this.options.classHandler;\n\n    // It might also be the function name of a global function\n    if ('string' === typeof this.options.classHandler && 'function' === typeof window[this.options.classHandler])\n      $handlerFunction = window[this.options.classHandler];\n\n    if ('function' === typeof $handlerFunction) {\n      var $handler = $handlerFunction.call(this, this);\n\n      // If this function returned a valid existing DOM element, go for it\n      if ('undefined' !== typeof $handler && $handler.length)\n        return $handler;\n    } else if ('object' === typeof $handlerFunction && $handlerFunction instanceof jQuery && $handlerFunction.length) {\n      return $handlerFunction;\n    } else if ($handlerFunction) {\n      Utils.warn('The class handler `' + $handlerFunction + '` does not exist in DOM nor as a global JS function');\n    }\n\n    return this._inputHolder();\n  },\n\n  _inputHolder: function() {\n    // if simple element (input, texatrea, select...) it will perfectly host the classes and precede the error container\n    if (!this.options.multiple || this.element.nodeName === 'SELECT')\n      return this.$element;\n\n    // But if multiple element (radio, checkbox), that would be their parent\n    return this.$element.parent();\n  },\n\n  _insertErrorWrapper: function () {\n    var $errorsContainer = this.options.errorsContainer;\n\n    // Nothing to do if already inserted\n    if (0 !== this._ui.$errorsWrapper.parent().length)\n      return this._ui.$errorsWrapper.parent();\n\n    if ('string' === typeof $errorsContainer) {\n      if ($($errorsContainer).length)\n        return $($errorsContainer).append(this._ui.$errorsWrapper);\n      else if ('function' === typeof window[$errorsContainer])\n        $errorsContainer = window[$errorsContainer];\n      else\n        Utils.warn('The errors container `' + $errorsContainer + '` does not exist in DOM nor as a global JS function');\n    }\n\n    if ('function' === typeof $errorsContainer)\n      $errorsContainer = $errorsContainer.call(this, this);\n\n    if ('object' === typeof $errorsContainer && $errorsContainer.length)\n      return $errorsContainer.append(this._ui.$errorsWrapper);\n\n    return this._inputHolder().after(this._ui.$errorsWrapper);\n  },\n\n  _actualizeTriggers: function () {\n    var $toBind = this._findRelated();\n    var trigger;\n\n    // Remove Parsley events already bound on this field\n    $toBind.off('.Parsley');\n    if (this._failedOnce)\n      $toBind.on(Utils.namespaceEvents(this.options.triggerAfterFailure, 'Parsley'), () => {\n        this._validateIfNeeded();\n      });\n    else if (trigger = Utils.namespaceEvents(this.options.trigger, 'Parsley')) {\n      $toBind.on(trigger, event => {\n        this._validateIfNeeded(event);\n      });\n    }\n  },\n\n  _validateIfNeeded: function (event) {\n    // For keyup, keypress, keydown, input... events that could be a little bit obstrusive\n    // do not validate if val length < min threshold on first validation. Once field have been validated once and info\n    // about success or failure have been displayed, always validate with this trigger to reflect every yalidation change.\n    if (event && /key|input/.test(event.type))\n      if (!(this._ui && this._ui.validationInformationVisible) && this.getValue().length <= this.options.validationThreshold)\n        return;\n\n    if (this.options.debounce) {\n      window.clearTimeout(this._debounced);\n      this._debounced = window.setTimeout(() => this.validate(), this.options.debounce);\n    } else\n      this.validate();\n  },\n\n  _resetUI: function () {\n    // Reset all event listeners\n    this._failedOnce = false;\n    this._actualizeTriggers();\n\n    // Nothing to do if UI never initialized for this field\n    if ('undefined' === typeof this._ui)\n      return;\n\n    // Reset all errors' li\n    this._ui.$errorsWrapper\n      .removeClass('filled')\n      .children()\n      .remove();\n\n    // Reset validation class\n    this._resetClass();\n\n    // Reset validation flags and last validation result\n    this._ui.lastValidationResult = [];\n    this._ui.validationInformationVisible = false;\n  },\n\n  _destroyUI: function () {\n    this._resetUI();\n\n    if ('undefined' !== typeof this._ui)\n      this._ui.$errorsWrapper.remove();\n\n    delete this._ui;\n  },\n\n  _successClass: function () {\n    this._ui.validationInformationVisible = true;\n    this._ui.$errorClassHandler.removeClass(this.options.errorClass).addClass(this.options.successClass);\n  },\n  _errorClass: function () {\n    this._ui.validationInformationVisible = true;\n    this._ui.$errorClassHandler.removeClass(this.options.successClass).addClass(this.options.errorClass);\n  },\n  _resetClass: function () {\n    this._ui.$errorClassHandler.removeClass(this.options.successClass).removeClass(this.options.errorClass);\n  }\n};\n\nexport default UI;\n","import $ from 'jquery';\nimport Base from './base';\nimport Utils from './utils';\n\nvar Form = function (element, domOptions, options) {\n  this.__class__ = 'Form';\n\n  this.element = element;\n  this.$element = $(element);\n  this.domOptions = domOptions;\n  this.options = options;\n  this.parent = window.Parsley;\n\n  this.fields = [];\n  this.validationResult = null;\n};\n\nvar statusMapping = {pending: null, resolved: true, rejected: false};\n\nForm.prototype = {\n  onSubmitValidate: function (event) {\n    // This is a Parsley generated submit event, do not validate, do not prevent, simply exit and keep normal behavior\n    if (true === event.parsley)\n      return;\n\n    // If we didn't come here through a submit button, use the first one in the form\n    var submitSource = this._submitSource || this.$element.find(Utils._SubmitSelector)[0];\n    this._submitSource = null;\n    this.$element.find('.parsley-synthetic-submit-button').prop('disabled', true);\n    if (submitSource && null !== submitSource.getAttribute('formnovalidate'))\n      return;\n\n    window.Parsley._remoteCache = {};\n\n    var promise = this.whenValidate({event});\n\n    if ('resolved' === promise.state() && false !== this._trigger('submit')) {\n      // All good, let event go through. We make this distinction because browsers\n      // differ in their handling of `submit` being called from inside a submit event [#1047]\n    } else {\n      // Rejected or pending: cancel this submit\n      event.stopImmediatePropagation();\n      event.preventDefault();\n      if ('pending' === promise.state())\n        promise.done(() => { this._submit(submitSource); });\n    }\n  },\n\n  onSubmitButton: function(event) {\n    this._submitSource = event.currentTarget;\n  },\n  // internal\n  // _submit submits the form, this time without going through the validations.\n  // Care must be taken to \"fake\" the actual submit button being clicked.\n  _submit: function (submitSource) {\n    if (false === this._trigger('submit'))\n      return;\n    // Add submit button's data\n    if (submitSource) {\n      var $synthetic = this.$element.find('.parsley-synthetic-submit-button').prop('disabled', false);\n      if (0 === $synthetic.length)\n        $synthetic = $('<input class=\"parsley-synthetic-submit-button\" type=\"hidden\">').appendTo(this.$element);\n      $synthetic.attr({\n        name: submitSource.getAttribute('name'),\n        value: submitSource.getAttribute('value')\n      });\n    }\n\n    this.$element.trigger(Object.assign($.Event('submit'), {parsley: true}));\n  },\n\n  // Performs validation on fields while triggering events.\n  // @returns `true` if all validations succeeds, `false`\n  // if a failure is immediately detected, or `null`\n  // if dependant on a promise.\n  // Consider using `whenValidate` instead.\n  validate: function (options) {\n    if (arguments.length >= 1 && !$.isPlainObject(options)) {\n      Utils.warnOnce('Calling validate on a parsley form without passing arguments as an object is deprecated.');\n      var [group, force, event] = arguments;\n      options = {group, force, event};\n    }\n    return statusMapping[ this.whenValidate(options).state() ];\n  },\n\n  whenValidate: function ({group, force, event} = {}) {\n    this.submitEvent = event;\n    if (event) {\n      this.submitEvent = Object.assign({}, event, {preventDefault: () => {\n        Utils.warnOnce(\"Using `this.submitEvent.preventDefault()` is deprecated; instead, call `this.validationResult = false`\");\n        this.validationResult = false;\n      }});\n    }\n    this.validationResult = true;\n\n    // fire validate event to eventually modify things before every validation\n    this._trigger('validate');\n\n    // Refresh form DOM options and form's fields that could have changed\n    this._refreshFields();\n\n    var promises = this._withoutReactualizingFormOptions(() => {\n      return $.map(this.fields, field => field.whenValidate({force, group}));\n    });\n\n    return Utils.all(promises)\n      .done(  () => { this._trigger('success'); })\n      .fail(  () => {\n        this.validationResult = false;\n        this.focus();\n        this._trigger('error');\n      })\n      .always(() => { this._trigger('validated'); })\n      .pipe(...this._pipeAccordingToValidationResult());\n  },\n\n  // Iterate over refreshed fields, and stop on first failure.\n  // Returns `true` if all fields are valid, `false` if a failure is detected\n  // or `null` if the result depends on an unresolved promise.\n  // Prefer using `whenValid` instead.\n  isValid: function (options) {\n    if (arguments.length >= 1 && !$.isPlainObject(options)) {\n      Utils.warnOnce('Calling isValid on a parsley form without passing arguments as an object is deprecated.');\n      var [group, force] = arguments;\n      options = {group, force};\n    }\n    return statusMapping[ this.whenValid(options).state() ];\n  },\n\n  // Iterate over refreshed fields and validate them.\n  // Returns a promise.\n  // A validation that immediately fails will interrupt the validations.\n  whenValid: function ({group, force} = {}) {\n    this._refreshFields();\n\n    var promises = this._withoutReactualizingFormOptions(() => {\n      return $.map(this.fields, field => field.whenValid({group, force}));\n    });\n    return Utils.all(promises);\n  },\n\n  refresh: function() {\n    this._refreshFields();\n    return this;\n  },\n\n  // Reset UI\n  reset: function () {\n    // Form case: emit a reset event for each field\n    for (var i = 0; i < this.fields.length; i++)\n      this.fields[i].reset();\n\n    this._trigger('reset');\n  },\n\n  // Destroy Parsley instance (+ UI)\n  destroy: function () {\n    // Field case: emit destroy event to clean UI and then destroy stored instance\n    this._destroyUI();\n\n    // Form case: destroy all its fields and then destroy stored instance\n    for (var i = 0; i < this.fields.length; i++)\n      this.fields[i].destroy();\n\n    this.$element.removeData('Parsley');\n    this._trigger('destroy');\n  },\n\n  _refreshFields: function () {\n    return this.actualizeOptions()._bindFields();\n  },\n\n  _bindFields: function () {\n    var oldFields = this.fields;\n\n    this.fields = [];\n    this.fieldsMappedById = {};\n\n    this._withoutReactualizingFormOptions(() => {\n      this.$element\n      .find(this.options.inputs)\n      .not(this.options.excluded)\n      .each((_, element) => {\n        var fieldInstance = new window.Parsley.Factory(element, {}, this);\n\n        // Only add valid and not excluded `Field` and `FieldMultiple` children\n        if (('Field' === fieldInstance.__class__ || 'FieldMultiple' === fieldInstance.__class__) && (true !== fieldInstance.options.excluded)) {\n          let uniqueId = fieldInstance.__class__ + '-' + fieldInstance.__id__;\n          if ('undefined' === typeof this.fieldsMappedById[uniqueId]) {\n            this.fieldsMappedById[uniqueId] = fieldInstance;\n            this.fields.push(fieldInstance);\n          }\n        }\n      });\n\n      $.each(Utils.difference(oldFields, this.fields), (_, field) => {\n        field.reset();\n      });\n    });\n    return this;\n  },\n\n  // Internal only.\n  // Looping on a form's fields to do validation or similar\n  // will trigger reactualizing options on all of them, which\n  // in turn will reactualize the form's options.\n  // To avoid calling actualizeOptions so many times on the form\n  // for nothing, _withoutReactualizingFormOptions temporarily disables\n  // the method actualizeOptions on this form while `fn` is called.\n  _withoutReactualizingFormOptions: function (fn) {\n    var oldActualizeOptions = this.actualizeOptions;\n    this.actualizeOptions = function () { return this; };\n    var result = fn();\n    this.actualizeOptions = oldActualizeOptions;\n    return result;\n  },\n\n  // Internal only.\n  // Shortcut to trigger an event\n  // Returns true iff event is not interrupted and default not prevented.\n  _trigger: function (eventName) {\n    return this.trigger('form:' + eventName);\n  }\n\n};\n\nexport default Form;\n","import Utils from './utils';\nimport Validator from './validator';\n\nconst Constraint = function(parsleyField, name, requirements, priority, isDomConstraint) {\n  const validatorSpec = window.Parsley._validatorRegistry.validators[name];\n  const validator = new Validator(validatorSpec);\n  priority = priority || parsleyField.options[name + 'Priority'] || validator.priority;\n  isDomConstraint = (true === isDomConstraint);\n\n  Object.assign(this, {\n    validator,\n    name,\n    requirements,\n    priority,\n    isDomConstraint\n  });\n  this._parseRequirements(parsleyField.options);\n};\n\nconst capitalize = function(str) {\n  const cap = str[0].toUpperCase();\n  return cap + str.slice(1);\n};\n\nConstraint.prototype = {\n  validate: function(value, instance) {\n    return this.validator.validate(value, ...this.requirementList, instance);\n  },\n\n  _parseRequirements: function(options) {\n    this.requirementList = this.validator.parseRequirements(this.requirements,\n      key => options[this.name + capitalize(key)]\n    );\n  }\n};\n\nexport default Constraint;\n","import $ from 'jquery';\nimport Constraint from './constraint';\nimport UI from './ui';\nimport Utils from './utils';\n\nvar Field = function (field, domOptions, options, parsleyFormInstance) {\n  this.__class__ = 'Field';\n\n  this.element = field;\n  this.$element = $(field);\n\n  // Set parent if we have one\n  if ('undefined' !== typeof parsleyFormInstance) {\n    this.parent = parsleyFormInstance;\n  }\n\n  this.options = options;\n  this.domOptions = domOptions;\n\n  // Initialize some properties\n  this.constraints = [];\n  this.constraintsByName = {};\n  this.validationResult = true;\n\n  // Bind constraints\n  this._bindConstraints();\n};\n\nvar statusMapping = {pending: null, resolved: true, rejected: false};\n\nField.prototype = {\n  // # Public API\n  // Validate field and trigger some events for mainly `UI`\n  // @returns `true`, an array of the validators that failed, or\n  // `null` if validation is not finished. Prefer using whenValidate\n  validate: function (options) {\n    if (arguments.length >= 1 && !$.isPlainObject(options)) {\n      Utils.warnOnce('Calling validate on a parsley field without passing arguments as an object is deprecated.');\n      options = {options};\n    }\n    var promise = this.whenValidate(options);\n    if (!promise)  // If excluded with `group` option\n      return true;\n    switch (promise.state()) {\n      case 'pending': return null;\n      case 'resolved': return true;\n      case 'rejected': return this.validationResult;\n    }\n  },\n\n  // Validate field and trigger some events for mainly `UI`\n  // @returns a promise that succeeds only when all validations do\n  // or `undefined` if field is not in the given `group`.\n  whenValidate: function ({force, group} =  {}) {\n    // do not validate a field if not the same as given validation group\n    this.refresh();\n    if (group && !this._isInGroup(group))\n      return;\n\n    this.value = this.getValue();\n\n    // Field Validate event. `this.value` could be altered for custom needs\n    this._trigger('validate');\n\n    return this.whenValid({force, value: this.value, _refreshed: true})\n      .always(() => { this._reflowUI(); })\n      .done(() =>   { this._trigger('success'); })\n      .fail(() =>   { this._trigger('error'); })\n      .always(() => { this._trigger('validated'); })\n      .pipe(...this._pipeAccordingToValidationResult());\n  },\n\n  hasConstraints: function () {\n    return 0 !== this.constraints.length;\n  },\n\n  // An empty optional field does not need validation\n  needsValidation: function (value) {\n    if ('undefined' === typeof value)\n      value = this.getValue();\n\n    // If a field is empty and not required, it is valid\n    // Except if `data-parsley-validate-if-empty` explicitely added, useful for some custom validators\n    if (!value.length && !this._isRequired() && 'undefined' === typeof this.options.validateIfEmpty)\n      return false;\n\n    return true;\n  },\n\n  _isInGroup: function (group) {\n    if (Array.isArray(this.options.group))\n      return -1 !== $.inArray(group, this.options.group);\n    return this.options.group === group;\n  },\n\n  // Just validate field. Do not trigger any event.\n  // Returns `true` iff all constraints pass, `false` if there are failures,\n  // or `null` if the result can not be determined yet (depends on a promise)\n  // See also `whenValid`.\n  isValid: function (options) {\n    if (arguments.length >= 1 && !$.isPlainObject(options)) {\n      Utils.warnOnce('Calling isValid on a parsley field without passing arguments as an object is deprecated.');\n      var [force, value] = arguments;\n      options = {force, value};\n    }\n    var promise = this.whenValid(options);\n    if (!promise) // Excluded via `group`\n      return true;\n    return statusMapping[promise.state()];\n  },\n\n  // Just validate field. Do not trigger any event.\n  // @returns a promise that succeeds only when all validations do\n  // or `undefined` if the field is not in the given `group`.\n  // The argument `force` will force validation of empty fields.\n  // If a `value` is given, it will be validated instead of the value of the input.\n  whenValid: function ({force = false, value, group, _refreshed} = {}) {\n    // Recompute options and rebind constraints to have latest changes\n    if (!_refreshed)\n      this.refresh();\n    // do not validate a field if not the same as given validation group\n    if (group && !this._isInGroup(group))\n      return;\n\n    this.validationResult = true;\n\n    // A field without constraint is valid\n    if (!this.hasConstraints())\n      return $.when();\n\n    // Value could be passed as argument, needed to add more power to 'field:validate'\n    if ('undefined' === typeof value || null === value)\n      value = this.getValue();\n\n    if (!this.needsValidation(value) && true !== force)\n      return $.when();\n\n    var groupedConstraints = this._getGroupedConstraints();\n    var promises = [];\n    $.each(groupedConstraints, (_, constraints) => {\n      // Process one group of constraints at a time, we validate the constraints\n      // and combine the promises together.\n      var promise = Utils.all(\n        $.map(constraints, constraint => this._validateConstraint(value, constraint))\n      );\n      promises.push(promise);\n      if (promise.state() === 'rejected')\n        return false; // Interrupt processing if a group has already failed\n    });\n    return Utils.all(promises);\n  },\n\n  // @returns a promise\n  _validateConstraint: function(value, constraint) {\n    var result = constraint.validate(value, this);\n    // Map false to a failed promise\n    if (false === result)\n      result = $.Deferred().reject();\n    // Make sure we return a promise and that we record failures\n    return Utils.all([result]).fail(errorMessage => {\n      if (!(this.validationResult instanceof Array))\n        this.validationResult = [];\n      this.validationResult.push({\n        assert: constraint,\n        errorMessage: 'string' === typeof errorMessage && errorMessage\n      });\n    });\n  },\n\n  // @returns Parsley field computed value that could be overrided or configured in DOM\n  getValue: function () {\n    var value;\n\n    // Value could be overriden in DOM or with explicit options\n    if ('function' === typeof this.options.value)\n      value = this.options.value(this);\n    else if ('undefined' !== typeof this.options.value)\n      value = this.options.value;\n    else\n      value = this.$element.val();\n\n    // Handle wrong DOM or configurations\n    if ('undefined' === typeof value || null === value)\n      return '';\n\n    return this._handleWhitespace(value);\n  },\n\n  // Reset UI\n  reset: function () {\n    this._resetUI();\n    return this._trigger('reset');\n  },\n\n  // Destroy Parsley instance (+ UI)\n  destroy: function () {\n    // Field case: emit destroy event to clean UI and then destroy stored instance\n    this._destroyUI();\n    this.$element.removeData('Parsley');\n    this.$element.removeData('FieldMultiple');\n    this._trigger('destroy');\n  },\n\n  // Actualize options and rebind constraints\n  refresh: function () {\n    this._refreshConstraints();\n    return this;\n  },\n\n  _refreshConstraints: function () {\n    return this.actualizeOptions()._bindConstraints();\n  },\n\n  refreshConstraints: function() {\n    Utils.warnOnce(\"Parsley's refreshConstraints is deprecated. Please use refresh\");\n    return this.refresh();\n  },\n\n  /**\n  * Add a new constraint to a field\n  *\n  * @param {String}   name\n  * @param {Mixed}    requirements      optional\n  * @param {Number}   priority          optional\n  * @param {Boolean}  isDomConstraint   optional\n  */\n  addConstraint: function (name, requirements, priority, isDomConstraint) {\n\n    if (window.Parsley._validatorRegistry.validators[name]) {\n      var constraint = new Constraint(this, name, requirements, priority, isDomConstraint);\n\n      // if constraint already exist, delete it and push new version\n      if ('undefined' !== this.constraintsByName[constraint.name])\n        this.removeConstraint(constraint.name);\n\n      this.constraints.push(constraint);\n      this.constraintsByName[constraint.name] = constraint;\n    }\n\n    return this;\n  },\n\n  // Remove a constraint\n  removeConstraint: function (name) {\n    for (var i = 0; i < this.constraints.length; i++)\n      if (name === this.constraints[i].name) {\n        this.constraints.splice(i, 1);\n        break;\n      }\n    delete this.constraintsByName[name];\n    return this;\n  },\n\n  // Update a constraint (Remove + re-add)\n  updateConstraint: function (name, parameters, priority) {\n    return this.removeConstraint(name)\n      .addConstraint(name, parameters, priority);\n  },\n\n  // # Internals\n\n  // Internal only.\n  // Bind constraints from config + options + DOM\n  _bindConstraints: function () {\n    var constraints = [];\n    var constraintsByName = {};\n\n    // clean all existing DOM constraints to only keep javascript user constraints\n    for (var i = 0; i < this.constraints.length; i++)\n      if (false === this.constraints[i].isDomConstraint) {\n        constraints.push(this.constraints[i]);\n        constraintsByName[this.constraints[i].name] = this.constraints[i];\n      }\n\n    this.constraints = constraints;\n    this.constraintsByName = constraintsByName;\n\n    // then re-add Parsley DOM-API constraints\n    for (var name in this.options)\n      this.addConstraint(name, this.options[name], undefined, true);\n\n    // finally, bind special HTML5 constraints\n    return this._bindHtml5Constraints();\n  },\n\n  // Internal only.\n  // Bind specific HTML5 constraints to be HTML5 compliant\n  _bindHtml5Constraints: function () {\n    // html5 required\n    if (null !== this.element.getAttribute('required'))\n      this.addConstraint('required', true, undefined, true);\n\n    // html5 pattern\n    if (null !== this.element.getAttribute('pattern'))\n      this.addConstraint('pattern', this.element.getAttribute('pattern'), undefined, true);\n\n    // range\n    let min = this.element.getAttribute('min');\n    let max = this.element.getAttribute('max');\n    if (null !== min && null !== max)\n      this.addConstraint('range', [min, max], undefined, true);\n\n    // HTML5 min\n    else if (null !== min)\n      this.addConstraint('min', min, undefined, true);\n\n    // HTML5 max\n    else if (null !== max)\n      this.addConstraint('max', max, undefined, true);\n\n\n    // length\n    if (null !== this.element.getAttribute('minlength') && null !== this.element.getAttribute('maxlength'))\n      this.addConstraint('length', [this.element.getAttribute('minlength'), this.element.getAttribute('maxlength')], undefined, true);\n\n    // HTML5 minlength\n    else if (null !== this.element.getAttribute('minlength'))\n      this.addConstraint('minlength', this.element.getAttribute('minlength'), undefined, true);\n\n    // HTML5 maxlength\n    else if (null !== this.element.getAttribute('maxlength'))\n      this.addConstraint('maxlength', this.element.getAttribute('maxlength'), undefined, true);\n\n\n    // html5 types\n    var type = Utils.getType(this.element);\n\n    // Small special case here for HTML5 number: integer validator if step attribute is undefined or an integer value, number otherwise\n    if ('number' === type) {\n      return this.addConstraint('type', ['number', {\n        step: this.element.getAttribute('step') || '1',\n        base: min || this.element.getAttribute('value')\n      }], undefined, true);\n    // Regular other HTML5 supported types\n    } else if (/^(email|url|range|date)$/i.test(type)) {\n      return this.addConstraint('type', type, undefined, true);\n    }\n    return this;\n  },\n\n  // Internal only.\n  // Field is required if have required constraint without `false` value\n  _isRequired: function () {\n    if ('undefined' === typeof this.constraintsByName.required)\n      return false;\n\n    return false !== this.constraintsByName.required.requirements;\n  },\n\n  // Internal only.\n  // Shortcut to trigger an event\n  _trigger: function (eventName) {\n    return this.trigger('field:' + eventName);\n  },\n\n  // Internal only\n  // Handles whitespace in a value\n  // Use `data-parsley-whitespace=\"squish\"` to auto squish input value\n  // Use `data-parsley-whitespace=\"trim\"` to auto trim input value\n  _handleWhitespace: function (value) {\n    if (true === this.options.trimValue)\n      Utils.warnOnce('data-parsley-trim-value=\"true\" is deprecated, please use data-parsley-whitespace=\"trim\"');\n\n    if ('squish' === this.options.whitespace)\n      value = value.replace(/\\s{2,}/g, ' ');\n\n    if (('trim' === this.options.whitespace) || ('squish' === this.options.whitespace) || (true === this.options.trimValue))\n      value = Utils.trimString(value);\n\n    return value;\n  },\n\n  _isDateInput: function() {\n    var c = this.constraintsByName.type;\n    return c && c.requirements === 'date';\n  },\n\n  // Internal only.\n  // Returns the constraints, grouped by descending priority.\n  // The result is thus an array of arrays of constraints.\n  _getGroupedConstraints: function () {\n    if (false === this.options.priorityEnabled)\n      return [this.constraints];\n\n    var groupedConstraints = [];\n    var index = {};\n\n    // Create array unique of priorities\n    for (var i = 0; i < this.constraints.length; i++) {\n      var p = this.constraints[i].priority;\n      if (!index[p])\n        groupedConstraints.push(index[p] = []);\n      index[p].push(this.constraints[i]);\n    }\n    // Sort them by priority DESC\n    groupedConstraints.sort(function (a, b) { return b[0].priority - a[0].priority; });\n\n    return groupedConstraints;\n  }\n\n};\n\nexport default Field;\n","import $ from 'jquery';\nimport Utils from './utils';\n\nvar Multiple = function () {\n  this.__class__ = 'FieldMultiple';\n};\n\nMultiple.prototype = {\n  // Add new `$element` sibling for multiple field\n  addElement: function ($element) {\n    this.$elements.push($element);\n\n    return this;\n  },\n\n  // See `Field._refreshConstraints()`\n  _refreshConstraints: function () {\n    var fieldConstraints;\n\n    this.constraints = [];\n\n    // Select multiple special treatment\n    if (this.element.nodeName === 'SELECT') {\n      this.actualizeOptions()._bindConstraints();\n\n      return this;\n    }\n\n    // Gather all constraints for each input in the multiple group\n    for (var i = 0; i < this.$elements.length; i++) {\n\n      // Check if element have not been dynamically removed since last binding\n      if (!$('html').has(this.$elements[i]).length) {\n        this.$elements.splice(i, 1);\n        continue;\n      }\n\n      fieldConstraints = this.$elements[i].data('FieldMultiple')._refreshConstraints().constraints;\n\n      for (var j = 0; j < fieldConstraints.length; j++)\n        this.addConstraint(fieldConstraints[j].name, fieldConstraints[j].requirements, fieldConstraints[j].priority, fieldConstraints[j].isDomConstraint);\n    }\n\n    return this;\n  },\n\n  // See `Field.getValue()`\n  getValue: function () {\n    // Value could be overriden in DOM\n    if ('function' === typeof this.options.value)\n      return this.options.value(this);\n    else if ('undefined' !== typeof this.options.value)\n      return this.options.value;\n\n    // Radio input case\n    if (this.element.nodeName === 'INPUT') {\n      var type = Utils.getType(this.element);\n      if (type === 'radio')\n        return this._findRelated().filter(':checked').val() || '';\n\n      // checkbox input case\n      if (type === 'checkbox') {\n        var values = [];\n\n        this._findRelated().filter(':checked').each(function () {\n          values.push($(this).val());\n        });\n\n        return values;\n      }\n    }\n\n    // Select multiple case\n    if (this.element.nodeName === 'SELECT' && null === this.$element.val())\n      return [];\n\n    // Default case that should never happen\n    return this.$element.val();\n  },\n\n  _init: function () {\n    this.$elements = [this.$element];\n\n    return this;\n  }\n};\n\nexport default Multiple;\n","import $ from 'jquery';\nimport Utils from './utils';\nimport Base from './base';\nimport Form from './form';\nimport Field from './field';\nimport Multiple from './multiple';\n\nvar Factory = function (element, options, parsleyFormInstance) {\n  this.element = element;\n  this.$element = $(element);\n\n  // If the element has already been bound, returns its saved Parsley instance\n  var savedparsleyFormInstance = this.$element.data('Parsley');\n  if (savedparsleyFormInstance) {\n\n    // If the saved instance has been bound without a Form parent and there is one given in this call, add it\n    if ('undefined' !== typeof parsleyFormInstance && savedparsleyFormInstance.parent === window.Parsley) {\n      savedparsleyFormInstance.parent = parsleyFormInstance;\n      savedparsleyFormInstance._resetOptions(savedparsleyFormInstance.options);\n    }\n\n    if ('object' === typeof options) {\n      Object.assign(savedparsleyFormInstance.options, options);\n    }\n\n    return savedparsleyFormInstance;\n  }\n\n  // Parsley must be instantiated with a DOM element or jQuery $element\n  if (!this.$element.length)\n    throw new Error('You must bind Parsley on an existing element.');\n\n  if ('undefined' !== typeof parsleyFormInstance && 'Form' !== parsleyFormInstance.__class__)\n    throw new Error('Parent instance must be a Form instance');\n\n  this.parent = parsleyFormInstance || window.Parsley;\n  return this.init(options);\n};\n\nFactory.prototype = {\n  init: function (options) {\n    this.__class__ = 'Parsley';\n    this.__version__ = '@@version';\n    this.__id__ = Utils.generateID();\n\n    // Pre-compute options\n    this._resetOptions(options);\n\n    // A Form instance is obviously a `<form>` element but also every node that is not an input and has the `data-parsley-validate` attribute\n    if (this.element.nodeName === 'FORM' || (Utils.checkAttr(this.element, this.options.namespace, 'validate') && !this.$element.is(this.options.inputs)))\n      return this.bind('parsleyForm');\n\n    // Every other element is bound as a `Field` or `FieldMultiple`\n    return this.isMultiple() ? this.handleMultiple() : this.bind('parsleyField');\n  },\n\n  isMultiple: function () {\n    var type = Utils.getType(this.element);\n    return ((type === 'radio' || type === 'checkbox') ||\n      (this.element.nodeName === 'SELECT' && null !== this.element.getAttribute('multiple')));\n  },\n\n  // Multiples fields are a real nightmare :(\n  // Maybe some refactoring would be appreciated here...\n  handleMultiple: function () {\n    var name;\n    var multiple;\n    var parsleyMultipleInstance;\n\n    // Handle multiple name\n    this.options.multiple = this.options.multiple ||\n      (name = this.element.getAttribute('name')) ||\n      this.element.getAttribute('id');\n\n    // Special select multiple input\n    if (this.element.nodeName === 'SELECT' && null !== this.element.getAttribute('multiple')) {\n      this.options.multiple = this.options.multiple || this.__id__;\n      return this.bind('parsleyFieldMultiple');\n\n    // Else for radio / checkboxes, we need a `name` or `data-parsley-multiple` to properly bind it\n    } else if (!this.options.multiple) {\n      Utils.warn('To be bound by Parsley, a radio, a checkbox and a multiple select input must have either a name or a multiple option.', this.$element);\n      return this;\n    }\n\n    // Remove special chars\n    this.options.multiple = this.options.multiple.replace(/(:|\\.|\\[|\\]|\\{|\\}|\\$)/g, '');\n\n    // Add proper `data-parsley-multiple` to siblings if we have a valid multiple name\n    if (name) {\n      $('input[name=\"' + name + '\"]').each((i, input) => {\n        var type = Utils.getType(input);\n        if ((type === 'radio' || type === 'checkbox'))\n          input.setAttribute(this.options.namespace + 'multiple', this.options.multiple);\n      });\n    }\n\n    // Check here if we don't already have a related multiple instance saved\n    var $previouslyRelated = this._findRelated();\n    for (var i = 0; i < $previouslyRelated.length; i++) {\n      parsleyMultipleInstance = $($previouslyRelated.get(i)).data('Parsley');\n      if ('undefined' !== typeof parsleyMultipleInstance) {\n\n        if (!this.$element.data('FieldMultiple')) {\n          parsleyMultipleInstance.addElement(this.$element);\n        }\n\n        break;\n      }\n    }\n\n    // Create a secret Field instance for every multiple field. It will be stored in `data('FieldMultiple')`\n    // And will be useful later to access classic `Field` stuff while being in a `FieldMultiple` instance\n    this.bind('parsleyField', true);\n\n    return parsleyMultipleInstance || this.bind('parsleyFieldMultiple');\n  },\n\n  // Return proper `Form`, `Field` or `FieldMultiple`\n  bind: function (type, doNotStore) {\n    var parsleyInstance;\n\n    switch (type) {\n      case 'parsleyForm':\n        parsleyInstance = $.extend(\n          new Form(this.element, this.domOptions, this.options),\n          new Base(),\n          window.ParsleyExtend\n        )._bindFields();\n        break;\n      case 'parsleyField':\n        parsleyInstance = $.extend(\n          new Field(this.element, this.domOptions, this.options, this.parent),\n          new Base(),\n          window.ParsleyExtend\n        );\n        break;\n      case 'parsleyFieldMultiple':\n        parsleyInstance = $.extend(\n          new Field(this.element, this.domOptions, this.options, this.parent),\n          new Multiple(),\n          new Base(),\n          window.ParsleyExtend\n        )._init();\n        break;\n      default:\n        throw new Error(type + 'is not a supported Parsley type');\n    }\n\n    if (this.options.multiple)\n      Utils.setAttr(this.element, this.options.namespace, 'multiple', this.options.multiple);\n\n    if ('undefined' !== typeof doNotStore) {\n      this.$element.data('FieldMultiple', parsleyInstance);\n\n      return parsleyInstance;\n    }\n\n    // Store the freshly bound instance in a DOM element for later access using jQuery `data()`\n    this.$element.data('Parsley', parsleyInstance);\n\n    // Tell the world we have a new Form or Field instance!\n    parsleyInstance._actualizeTriggers();\n    parsleyInstance._trigger('init');\n\n    return parsleyInstance;\n  }\n};\n\nexport default Factory;\n","import $ from 'jquery';\nimport Utils from './utils';\nimport Defaults from './defaults';\nimport Base from './base';\nimport ValidatorRegistry from './validator_registry';\nimport UI from './ui';\nimport Form from './form';\nimport Field from './field';\nimport Multiple from './multiple';\nimport Factory from './factory';\n\nvar vernums = $.fn.jquery.split('.');\nif (parseInt(vernums[0]) <= 1 && parseInt(vernums[1]) < 8) {\n  throw \"The loaded version of jQuery is too old. Please upgrade to 1.8.x or better.\";\n}\nif (!vernums.forEach) {\n  Utils.warn('Parsley requires ES5 to run properly. Please include https://github.com/es-shims/es5-shim');\n}\n// Inherit `on`, `off` & `trigger` to Parsley:\nvar Parsley = Object.assign(new Base(), {\n    element: document,\n    $element: $(document),\n    actualizeOptions: null,\n    _resetOptions: null,\n    Factory: Factory,\n    version: '@@version'\n  });\n\n// Supplement Field and Form with Base\n// This way, the constructors will have access to those methods\nObject.assign(Field.prototype, UI.Field, Base.prototype);\nObject.assign(Form.prototype, UI.Form, Base.prototype);\n// Inherit actualizeOptions and _resetOptions:\nObject.assign(Factory.prototype, Base.prototype);\n\n// ### jQuery API\n// `$('.elem').parsley(options)` or `$('.elem').psly(options)`\n$.fn.parsley = $.fn.psly = function (options) {\n  if (this.length > 1) {\n    var instances = [];\n\n    this.each(function () {\n      instances.push($(this).parsley(options));\n    });\n\n    return instances;\n  }\n\n  // Return undefined if applied to non existing DOM element\n  if (this.length == 0) {\n    return;\n  }\n\n  return new Factory(this[0], options);\n};\n\n// ### Field and Form extension\n// Ensure the extension is now defined if it wasn't previously\nif ('undefined' === typeof window.ParsleyExtend)\n  window.ParsleyExtend = {};\n\n// ### Parsley config\n// Inherit from ParsleyDefault, and copy over any existing values\nParsley.options = Object.assign(Utils.objectCreate(Defaults), window.ParsleyConfig);\nwindow.ParsleyConfig = Parsley.options; // Old way of accessing global options\n\n// ### Globals\nwindow.Parsley = window.psly = Parsley;\nParsley.Utils = Utils;\nwindow.ParsleyUtils = {};\n$.each(Utils, (key, value) => {\n  if ('function' === typeof value) {\n    window.ParsleyUtils[key] = (...args) => {\n      Utils.warnOnce('Accessing `window.ParsleyUtils` is deprecated. Use `window.Parsley.Utils` instead.');\n      return Utils[key](...args);\n    };\n  }\n});\n\n// ### Define methods that forward to the registry, and deprecate all access except through window.Parsley\nvar registry = window.Parsley._validatorRegistry = new ValidatorRegistry(window.ParsleyConfig.validators, window.ParsleyConfig.i18n);\nwindow.ParsleyValidator = {};\n$.each('setLocale addCatalog addMessage addMessages getErrorMessage formatMessage addValidator updateValidator removeValidator hasValidator'.split(' '), function (i, method) {\n  window.Parsley[method] = (...args) => registry[method](...args);\n  window.ParsleyValidator[method] = function () {\n    Utils.warnOnce(`Accessing the method '${method}' through Validator is deprecated. Simply call 'window.Parsley.${method}(...)'`);\n    return window.Parsley[method](...arguments);\n  };\n});\n\n// ### UI\n// Deprecated global object\nwindow.Parsley.UI = UI;\nwindow.ParsleyUI = {\n  removeError: function (instance, name, doNotUpdateClass) {\n    var updateClass = true !== doNotUpdateClass;\n    Utils.warnOnce(`Accessing UI is deprecated. Call 'removeError' on the instance directly. Please comment in issue 1073 as to your need to call this method.`);\n    return instance.removeError(name, {updateClass});\n  },\n  getErrorsMessages: function (instance) {\n    Utils.warnOnce(`Accessing UI is deprecated. Call 'getErrorsMessages' on the instance directly.`);\n    return instance.getErrorsMessages();\n  }\n};\n$.each('addError updateError'.split(' '), function (i, method) {\n  window.ParsleyUI[method] = function (instance, name, message, assert, doNotUpdateClass) {\n    var updateClass = true !== doNotUpdateClass;\n    Utils.warnOnce(`Accessing UI is deprecated. Call '${method}' on the instance directly. Please comment in issue 1073 as to your need to call this method.`);\n    return instance[method](name, {message, assert, updateClass});\n  };\n});\n\n// ### PARSLEY auto-binding\n// Prevent it by setting `ParsleyConfig.autoBind` to `false`\nif (false !== window.ParsleyConfig.autoBind) {\n  $(function () {\n    // Works only on `data-parsley-validate`.\n    if ($('[data-parsley-validate]').length)\n      $('[data-parsley-validate]').parsley();\n  });\n}\n\nexport default Parsley;\n","import $ from 'jquery';\nimport Field from './field';\nimport Form from './form';\nimport Utils from './utils';\n\nvar o = $({});\nvar deprecated = function () {\n  Utils.warnOnce(\"Parsley's pubsub module is deprecated; use the 'on' and 'off' methods on parsley instances or window.Parsley\");\n};\n\n// Returns an event handler that calls `fn` with the arguments it expects\nfunction adapt(fn, context) {\n  // Store to allow unbinding\n  if (!fn.parsleyAdaptedCallback) {\n    fn.parsleyAdaptedCallback = function () {\n      var args = Array.prototype.slice.call(arguments, 0);\n      args.unshift(this);\n      fn.apply(context || o, args);\n    };\n  }\n  return fn.parsleyAdaptedCallback;\n}\n\nvar eventPrefix = 'parsley:';\n// Converts 'parsley:form:validate' into 'form:validate'\nfunction eventName(name) {\n  if (name.lastIndexOf(eventPrefix, 0) === 0)\n    return name.substr(eventPrefix.length);\n  return name;\n}\n\n// $.listen is deprecated. Use Parsley.on instead.\n$.listen = function (name, callback) {\n  var context;\n  deprecated();\n  if ('object' === typeof arguments[1] && 'function' === typeof arguments[2]) {\n    context = arguments[1];\n    callback = arguments[2];\n  }\n\n  if ('function' !== typeof callback)\n    throw new Error('Wrong parameters');\n\n  window.Parsley.on(eventName(name), adapt(callback, context));\n};\n\n$.listenTo = function (instance, name, fn) {\n  deprecated();\n  if (!(instance instanceof Field) && !(instance instanceof Form))\n    throw new Error('Must give Parsley instance');\n\n  if ('string' !== typeof name || 'function' !== typeof fn)\n    throw new Error('Wrong parameters');\n\n  instance.on(eventName(name), adapt(fn));\n};\n\n$.unsubscribe = function (name, fn) {\n  deprecated();\n  if ('string' !== typeof name || 'function' !== typeof fn)\n    throw new Error('Wrong arguments');\n  window.Parsley.off(eventName(name), fn.parsleyAdaptedCallback);\n};\n\n$.unsubscribeTo = function (instance, name) {\n  deprecated();\n  if (!(instance instanceof Field) && !(instance instanceof Form))\n    throw new Error('Must give Parsley instance');\n  instance.off(eventName(name));\n};\n\n$.unsubscribeAll = function (name) {\n  deprecated();\n  window.Parsley.off(eventName(name));\n  $('form,input,textarea,select').each(function () {\n    var instance = $(this).data('Parsley');\n    if (instance) {\n      instance.off(eventName(name));\n    }\n  });\n};\n\n// $.emit is deprecated. Use jQuery events instead.\n$.emit = function (name, instance) {\n  deprecated();\n  var instanceGiven = (instance instanceof Field) || (instance instanceof Form);\n  var args = Array.prototype.slice.call(arguments, instanceGiven ? 2 : 1);\n  args.unshift(eventName(name));\n  if (!instanceGiven) {\n    instance = window.Parsley;\n  }\n  instance.trigger(...args);\n};\n\nexport default {};\n","import $ from 'jquery';\nimport Utils from './utils';\nimport Base from './base';\n\nimport Parsley from './main';\n\n$.extend(true, Parsley, {\n  asyncValidators: {\n    'default': {\n      fn: function (xhr) {\n        // By default, only status 2xx are deemed successful.\n        // Note: we use status instead of state() because responses with status 200\n        // but invalid messages (e.g. an empty body for content type set to JSON) will\n        // result in state() === 'rejected'.\n        return xhr.status >= 200 && xhr.status < 300;\n      },\n      url: false\n    },\n    reverse: {\n      fn: function (xhr) {\n        // If reverse option is set, a failing ajax request is considered successful\n        return xhr.status < 200 || xhr.status >= 300;\n      },\n      url: false\n    }\n  },\n\n  addAsyncValidator: function (name, fn, url, options) {\n    Parsley.asyncValidators[name] = {\n      fn: fn,\n      url: url || false,\n      options: options || {}\n    };\n\n    return this;\n  }\n\n});\n\nParsley.addValidator('remote', {\n  requirementType: {\n    '': 'string',\n    'validator': 'string',\n    'reverse': 'boolean',\n    'options': 'object'\n  },\n\n  validateString: function (value, url, options, instance) {\n    var data = {};\n    var ajaxOptions;\n    var csr;\n    var validator = options.validator || (true === options.reverse ? 'reverse' : 'default');\n\n    if ('undefined' === typeof Parsley.asyncValidators[validator])\n      throw new Error('Calling an undefined async validator: `' + validator + '`');\n\n    url = Parsley.asyncValidators[validator].url || url;\n\n    // Fill current value\n    if (url.indexOf('{value}') > -1) {\n      url = url.replace('{value}', encodeURIComponent(value));\n    } else {\n      data[instance.element.getAttribute('name') || instance.element.getAttribute('id')] = value;\n    }\n\n    // Merge options passed in from the function with the ones in the attribute\n    var remoteOptions = $.extend(true, options.options || {} , Parsley.asyncValidators[validator].options);\n\n    // All `$.ajax(options)` could be overridden or extended directly from DOM in `data-parsley-remote-options`\n    ajaxOptions = $.extend(true, {}, {\n      url: url,\n      data: data,\n      type: 'GET'\n    }, remoteOptions);\n\n    // Generate store key based on ajax options\n    instance.trigger('field:ajaxoptions', instance, ajaxOptions);\n\n    csr = $.param(ajaxOptions);\n\n    // Initialise querry cache\n    if ('undefined' === typeof Parsley._remoteCache)\n      Parsley._remoteCache = {};\n\n    // Try to retrieve stored xhr\n    var xhr = Parsley._remoteCache[csr] = Parsley._remoteCache[csr] || $.ajax(ajaxOptions);\n\n    var handleXhr = function () {\n      var result = Parsley.asyncValidators[validator].fn.call(instance, xhr, url, options);\n      if (!result) // Map falsy results to rejected promise\n        result = $.Deferred().reject();\n      return $.when(result);\n    };\n\n    return xhr.then(handleXhr, handleXhr);\n  },\n\n  priority: -1\n});\n\nParsley.on('form:submit', function () {\n  Parsley._remoteCache = {};\n});\n\nBase.prototype.addAsyncValidator = function () {\n  Utils.warnOnce('Accessing the method `addAsyncValidator` through an instance is deprecated. Simply call `Parsley.addAsyncValidator(...)`');\n  return Parsley.addAsyncValidator(...arguments);\n};\n","// This is included with the Parsley library itself,\n// thus there is no use in adding it to your project.\nimport Parsley from '../parsley/main';\n\nParsley.addMessages('en', {\n  defaultMessage: \"This value seems to be invalid.\",\n  type: {\n    email:        \"This value should be a valid email.\",\n    url:          \"This value should be a valid url.\",\n    number:       \"This value should be a valid number.\",\n    integer:      \"This value should be a valid integer.\",\n    digits:       \"This value should be digits.\",\n    alphanum:     \"This value should be alphanumeric.\"\n  },\n  notblank:       \"This value should not be blank.\",\n  required:       \"This value is required.\",\n  pattern:        \"This value seems to be invalid.\",\n  min:            \"This value should be greater than or equal to %s.\",\n  max:            \"This value should be lower than or equal to %s.\",\n  range:          \"This value should be between %s and %s.\",\n  minlength:      \"This value is too short. It should have %s characters or more.\",\n  maxlength:      \"This value is too long. It should have %s characters or fewer.\",\n  length:         \"This value length is invalid. It should be between %s and %s characters long.\",\n  mincheck:       \"You must select at least %s choices.\",\n  maxcheck:       \"You must select %s choices or fewer.\",\n  check:          \"You must select between %s and %s choices.\",\n  equalto:        \"This value should be the same.\"\n});\n\nParsley.setLocale('en');\n","/**\n * inputevent - Alleviate browser bugs for input events\n * https://github.com/marcandre/inputevent\n * @version v0.0.3 - (built Thu, Apr 14th 2016, 5:58 pm)\n * @author Marc-Andre Lafortune <github@marc-andre.ca>\n * @license MIT\n */\n\nimport $ from 'jquery';\n\nfunction InputEvent() {\n  let globals = window || global;\n\n  // Slightly odd way construct our object. This way methods are force bound.\n  // Used to test for duplicate library.\n  Object.assign(this, {\n\n    // For browsers that do not support isTrusted, assumes event is native.\n    isNativeEvent: evt => {\n      return evt.originalEvent && evt.originalEvent.isTrusted !== false;\n    },\n\n    fakeInputEvent: evt => {\n      if (this.isNativeEvent(evt)) {\n        $(evt.target).trigger('input');\n      }\n    },\n\n    misbehaves: evt => {\n      if (this.isNativeEvent(evt)) {\n        this.behavesOk(evt);\n        $(document)\n          .on('change.inputevent', evt.data.selector, this.fakeInputEvent);\n        this.fakeInputEvent(evt);\n      }\n    },\n\n    behavesOk: evt => {\n      if (this.isNativeEvent(evt)) {\n        $(document) // Simply unbinds the testing handler\n          .off('input.inputevent', evt.data.selector, this.behavesOk)\n          .off('change.inputevent', evt.data.selector, this.misbehaves);\n      }\n    },\n\n    // Bind the testing handlers\n    install: () => {\n      if (globals.inputEventPatched) {\n        return;\n      }\n      globals.inputEventPatched = '0.0.3';\n      for (let selector of ['select', 'input[type=\"checkbox\"]', 'input[type=\"radio\"]', 'input[type=\"file\"]']) {\n        $(document)\n          .on('input.inputevent', selector, {selector}, this.behavesOk)\n          .on('change.inputevent', selector, {selector}, this.misbehaves);\n      }\n    },\n\n    uninstall: () => {\n      delete globals.inputEventPatched;\n      $(document).off('.inputevent');\n    }\n\n  });\n};\n\nexport default new InputEvent();\n","import $ from 'jquery';\nimport Parsley from './parsley/main';\nimport './parsley/pubsub';\nimport './parsley/remote';\nimport './i18n/en';\nimport inputevent from './vendor/inputevent';\n\ninputevent.install();\n\nexport default Parsley;\n"]}