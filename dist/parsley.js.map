{"version":3,"sources":["parsley.js","src/parsley/utils.js","src/parsley/defaults.js","src/parsley/base.js","src/parsley/validator.js","src/parsley/validator_registry.js","src/parsley/ui.js","src/parsley/form.js","src/parsley/constraint.js","src/parsley/field.js","src/parsley/multiple.js","src/parsley/factory.js","src/parsley/main.js","src/parsley/pubsub.js","src/parsley/remote.js","src/i18n/en.js","src/vendor/inputevent.js","src/parsley.js"],"names":[],"mappings":"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","file":"parsley.js","sourcesContent":["(function (global, factory) {\n  typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory(require('jquery')) :\n  typeof define === 'function' && define.amd ? define(['jquery'], factory) :\n  global.parsley = factory(global.$)\n}(this, function ($) { 'use strict';\n\n  var globalID = 1;\n  var pastWarnings = {};\n\n  var Utils = {\n    // Parsley DOM-API\n    // returns object from dom attributes and values\n    attr: function (element, namespace, obj) {\n      var i;\n      var attribute;\n      var attributes;\n      var regex = new RegExp('^' + namespace, 'i');\n\n      if ('undefined' === typeof obj)\n        obj = {};\n      else {\n        // Clear all own properties. This won't affect prototype's values\n        for (i in obj) {\n          if (obj.hasOwnProperty(i))\n            delete obj[i];\n        }\n      }\n\n      if (!element)\n        return obj;\n\n      attributes = element.attributes;\n      for (i = attributes.length; i--; ) {\n        attribute = attributes[i];\n\n        if (attribute && attribute.specified && regex.test(attribute.name)) {\n          obj[this.camelize(attribute.name.slice(namespace.length))] = this.deserializeValue(attribute.value);\n        }\n      }\n\n      return obj;\n    },\n\n    checkAttr: function (element, namespace, checkAttr) {\n      return element.hasAttribute(namespace + checkAttr);\n    },\n\n    setAttr: function (element, namespace, attr, value) {\n      element.setAttribute(this.dasherize(namespace + attr), String(value));\n    },\n\n    getType: function(element) {\n      return element.getAttribute('type') || 'text';\n    },\n\n    generateID: function () {\n      return '' + globalID++;\n    },\n\n    /** Third party functions **/\n    deserializeValue: function (value) {\n      var num;\n\n      try {\n        return value ?\n          value == \"true\" ||\n          (value == \"false\" ? false :\n          value == \"null\" ? null :\n          !isNaN(num = Number(value)) ? num :\n          /^[\\[\\{]/.test(value) ? JSON.parse(value) :\n          value)\n          : value;\n      } catch (e) { return value; }\n    },\n\n    // Zepto camelize function\n    camelize: function (str) {\n      return str.replace(/-+(.)?/g, function (match, chr) {\n        return chr ? chr.toUpperCase() : '';\n      });\n    },\n\n    // Zepto dasherize function\n    dasherize: function (str) {\n      return str.replace(/::/g, '/')\n        .replace(/([A-Z]+)([A-Z][a-z])/g, '$1_$2')\n        .replace(/([a-z\\d])([A-Z])/g, '$1_$2')\n        .replace(/_/g, '-')\n        .toLowerCase();\n    },\n\n    warn: function () {\n      if (window.console && 'function' === typeof window.console.warn)\n        window.console.warn(...arguments);\n    },\n\n    warnOnce: function(msg) {\n      if (!pastWarnings[msg]) {\n        pastWarnings[msg] = true;\n        this.warn(...arguments);\n      }\n    },\n\n    _resetWarnings: function () {\n      pastWarnings = {};\n    },\n\n    trimString: function(string) {\n      return string.replace(/^\\s+|\\s+$/g, '');\n    },\n\n    parse: {\n      date: function(string) {\n        let parsed = string.match(/^(\\d{4,})-(\\d\\d)-(\\d\\d)$/);\n        if (!parsed)\n          return null;\n        let [_, year, month, day] = parsed.map(x => parseInt(x, 10));\n        let date = new Date(year, month - 1, day);\n        if (date.getFullYear() !== year || date.getMonth() + 1 !== month || date.getDate() !== day)\n          return null;\n        return date;\n      },\n      string: function(string) {\n        return string;\n      },\n      integer: function(string) {\n        if (isNaN(string))\n          return null;\n        return parseInt(string, 10);\n      },\n      number: function(string) {\n        if (isNaN(string))\n          throw null;\n        return parseFloat(string);\n      },\n      'boolean': function _boolean(string) {\n        return !(/^\\s*false\\s*$/i.test(string));\n      },\n      object: function(string) {\n        return Utils.deserializeValue(string);\n      },\n      regexp: function(regexp) {\n        var flags = '';\n\n        // Test if RegExp is literal, if not, nothing to be done, otherwise, we need to isolate flags and pattern\n        if (/^\\/.*\\/(?:[gimy]*)$/.test(regexp)) {\n          // Replace the regexp literal string with the first match group: ([gimy]*)\n          // If no flag is present, this will be a blank string\n          flags = regexp.replace(/.*\\/([gimy]*)$/, '$1');\n          // Again, replace the regexp literal string with the first match group:\n          // everything excluding the opening and closing slashes and the flags\n          regexp = regexp.replace(new RegExp('^/(.*?)/' + flags + '$'), '$1');\n        } else {\n          // Anchor regexp:\n          regexp = '^' + regexp + '$';\n        }\n        return new RegExp(regexp, flags);\n      }\n    },\n\n    parseRequirement: function(requirementType, string) {\n      var converter = this.parse[requirementType || 'string'];\n      if (!converter)\n        throw 'Unknown requirement specification: \"' + requirementType + '\"';\n      let converted = converter(string);\n      if (converted === null)\n        throw `Requirement is not a ${requirementType}: \"${string}\"`;\n      return converted;\n    },\n\n    namespaceEvents: function(events, namespace) {\n      events = this.trimString(events || '').split(/\\s+/);\n      if (!events[0])\n        return '';\n      return $.map(events, evt => `${evt}.${namespace}`).join(' ');\n    },\n\n    difference: function(array, remove) {\n      // This is O(N^2), should be optimized\n      let result = [];\n      $.each(array, (_, elem) => {\n        if (remove.indexOf(elem) == -1)\n          result.push(elem);\n      });\n      return result;\n    },\n\n    // Alter-ego to native Promise.all, but for jQuery\n    all: function(promises) {\n      // jQuery treats $.when() and $.when(singlePromise) differently; let's avoid that and add spurious elements\n      return $.when(...promises, 42, 42);\n    },\n\n    // Object.create polyfill, see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/create#Polyfill\n    objectCreate: Object.create || (function () {\n      var Object = function () {};\n      return function (prototype) {\n        if (arguments.length > 1) {\n          throw Error('Second argument not supported');\n        }\n        if (typeof prototype != 'object') {\n          throw TypeError('Argument must be an object');\n        }\n        Object.prototype = prototype;\n        var result = new Object();\n        Object.prototype = null;\n        return result;\n      };\n    })(),\n\n    _SubmitSelector: 'input[type=\"submit\"], button:submit'\n  };\n\n  // All these options could be overriden and specified directly in DOM using\n  // `data-parsley-` default DOM-API\n  // eg: `inputs` can be set in DOM using `data-parsley-inputs=\"input, textarea\"`\n  // eg: `data-parsley-stop-on-first-failing-constraint=\"false\"`\n\n  var Defaults = {\n    // ### General\n\n    // Default data-namespace for DOM API\n    namespace: 'data-parsley-',\n\n    // Supported inputs by default\n    inputs: 'input, textarea, select',\n\n    // Excluded inputs by default\n    excluded: 'input[type=button], input[type=submit], input[type=reset], input[type=hidden]',\n\n    // Stop validating field on highest priority failing constraint\n    priorityEnabled: true,\n\n    // ### Field only\n\n    // identifier used to group together inputs (e.g. radio buttons...)\n    multiple: null,\n\n    // identifier (or array of identifiers) used to validate only a select group of inputs\n    group: null,\n\n    // ### UI\n    // Enable\\Disable error messages\n    uiEnabled: true,\n\n    // Key events threshold before validation\n    validationThreshold: 3,\n\n    // Focused field on form validation error. 'first'|'last'|'none'\n    focus: 'first',\n\n    // event(s) that will trigger validation before first failure. eg: `input`...\n    trigger: false,\n\n    // event(s) that will trigger validation after first failure.\n    triggerAfterFailure: 'input',\n\n    // Class that would be added on every failing validation Parsley field\n    errorClass: 'parsley-error',\n\n    // Same for success validation\n    successClass: 'parsley-success',\n\n    // Return the `$element` that will receive these above success or error classes\n    // Could also be (and given directly from DOM) a valid selector like `'#div'`\n    classHandler: function (Field) {},\n\n    // Return the `$element` where errors will be appended\n    // Could also be (and given directly from DOM) a valid selector like `'#div'`\n    errorsContainer: function (Field) {},\n\n    // ul elem that would receive errors' list\n    errorsWrapper: '<ul class=\"parsley-errors-list\"></ul>',\n\n    // li elem that would receive error message\n    errorTemplate: '<li></li>'\n  };\n\n  var Base = function () {\n    this.__id__ = Utils.generateID();\n  };\n\n  Base.prototype = {\n    asyncSupport: true, // Deprecated\n\n    _pipeAccordingToValidationResult: function () {\n      var pipe = () => {\n        var r = $.Deferred();\n        if (true !== this.validationResult)\n          r.reject();\n        return r.resolve().promise();\n      };\n      return [pipe, pipe];\n    },\n\n    actualizeOptions: function () {\n      Utils.attr(this.element, this.options.namespace, this.domOptions);\n      if (this.parent && this.parent.actualizeOptions)\n        this.parent.actualizeOptions();\n      return this;\n    },\n\n    _resetOptions: function (initOptions) {\n      this.domOptions = Utils.objectCreate(this.parent.options);\n      this.options = Utils.objectCreate(this.domOptions);\n      // Shallow copy of ownProperties of initOptions:\n      for (var i in initOptions) {\n        if (initOptions.hasOwnProperty(i))\n          this.options[i] = initOptions[i];\n      }\n      this.actualizeOptions();\n    },\n\n    _listeners: null,\n\n    // Register a callback for the given event name\n    // Callback is called with context as the first argument and the `this`\n    // The context is the current parsley instance, or window.Parsley if global\n    // A return value of `false` will interrupt the calls\n    on: function (name, fn) {\n      this._listeners = this._listeners || {};\n      var queue = this._listeners[name] = this._listeners[name] || [];\n      queue.push(fn);\n\n      return this;\n    },\n\n    // Deprecated. Use `on` instead\n    subscribe: function(name, fn) {\n      $.listenTo(this, name.toLowerCase(), fn);\n    },\n\n    // Unregister a callback (or all if none is given) for the given event name\n    off: function (name, fn) {\n      var queue = this._listeners && this._listeners[name];\n      if (queue) {\n        if (!fn) {\n          delete this._listeners[name];\n        } else {\n          for (var i = queue.length; i--; )\n            if (queue[i] === fn)\n              queue.splice(i, 1);\n        }\n      }\n      return this;\n    },\n\n    // Deprecated. Use `off`\n    unsubscribe: function(name, fn) {\n      $.unsubscribeTo(this, name.toLowerCase());\n    },\n\n    // Trigger an event of the given name\n    // A return value of `false` interrupts the callback chain\n    // Returns false if execution was interrupted\n    trigger: function (name, target, extraArg) {\n      target = target || this;\n      var queue = this._listeners && this._listeners[name];\n      var result;\n      var parentResult;\n      if (queue) {\n        for (var i = queue.length; i--; ) {\n          result = queue[i].call(target, target, extraArg);\n          if (result === false) return result;\n        }\n      }\n      if (this.parent) {\n        return this.parent.trigger(name, target, extraArg);\n      }\n      return true;\n    },\n\n    asyncIsValid: function (group, force) {\n      Utils.warnOnce(\"asyncIsValid is deprecated; please use whenValid instead\");\n      return this.whenValid({group, force});\n    },\n\n    _findRelated: function () {\n      return this.options.multiple ?\n        $(this.parent.element.querySelectorAll(`[${this.options.namespace}multiple=\"${this.options.multiple}\"]`))\n      : this.$element;\n    }\n  };\n\n  var convertArrayRequirement = function(string, length) {\n    var m = string.match(/^\\s*\\[(.*)\\]\\s*$/);\n    if (!m)\n      throw 'Requirement is not an array: \"' + string + '\"';\n    var values = m[1].split(',').map(Utils.trimString);\n    if (values.length !== length)\n      throw 'Requirement has ' + values.length + ' values when ' + length + ' are needed';\n    return values;\n  };\n\n  var convertExtraOptionRequirement = function(requirementSpec, string, extraOptionReader) {\n    var main = null;\n    var extra = {};\n    for (var key in requirementSpec) {\n      if (key) {\n        var value = extraOptionReader(key);\n        if ('string' === typeof value)\n          value = Utils.parseRequirement(requirementSpec[key], value);\n        extra[key] = value;\n      } else {\n        main = Utils.parseRequirement(requirementSpec[key], string);\n      }\n    }\n    return [main, extra];\n  };\n\n  // A Validator needs to implement the methods `validate` and `parseRequirements`\n\n  var Validator = function(spec) {\n    $.extend(true, this, spec);\n  };\n\n  Validator.prototype = {\n    // Returns `true` iff the given `value` is valid according the given requirements.\n    validate: function(value, requirementFirstArg) {\n      if (this.fn) { // Legacy style validator\n\n        if (arguments.length > 3)  // If more args then value, requirement, instance...\n          requirementFirstArg = [].slice.call(arguments, 1, -1);  // Skip first arg (value) and last (instance), combining the rest\n        return this.fn(value, requirementFirstArg);\n      }\n\n      if (Array.isArray(value)) {\n        if (!this.validateMultiple)\n          throw 'Validator `' + this.name + '` does not handle multiple values';\n        return this.validateMultiple(...arguments);\n      } else {\n        let instance = arguments[arguments.length - 1];\n        if (this.validateDate && instance._isDateInput()) {\n          arguments[0] = Utils.parse.date(arguments[0]);\n          if (arguments[0] === null)\n            return false;\n          return this.validateDate(...arguments);\n        }\n        if (this.validateNumber) {\n          if (isNaN(value))\n            return false;\n          arguments[0] = parseFloat(arguments[0]);\n          return this.validateNumber(...arguments);\n        }\n        if (this.validateString) {\n          return this.validateString(...arguments);\n        }\n        throw 'Validator `' + this.name + '` only handles multiple values';\n      }\n    },\n\n    // Parses `requirements` into an array of arguments,\n    // according to `this.requirementType`\n    parseRequirements: function(requirements, extraOptionReader) {\n      if ('string' !== typeof requirements) {\n        // Assume requirement already parsed\n        // but make sure we return an array\n        return Array.isArray(requirements) ? requirements : [requirements];\n      }\n      var type = this.requirementType;\n      if (Array.isArray(type)) {\n        var values = convertArrayRequirement(requirements, type.length);\n        for (var i = 0; i < values.length; i++)\n          values[i] = Utils.parseRequirement(type[i], values[i]);\n        return values;\n      } else if ($.isPlainObject(type)) {\n        return convertExtraOptionRequirement(type, requirements, extraOptionReader);\n      } else {\n        return [Utils.parseRequirement(type, requirements)];\n      }\n    },\n    // Defaults:\n    requirementType: 'string',\n\n    priority: 2\n\n  };\n\n  var ValidatorRegistry = function (validators, catalog) {\n    this.__class__ = 'ValidatorRegistry';\n\n    // Default Parsley locale is en\n    this.locale = 'en';\n\n    this.init(validators || {}, catalog || {});\n  };\n\n  var typeTesters =  {\n    email: /^((([a-zA-Z]|\\d|[!#\\$%&'\\*\\+\\-\\/=\\?\\^_`{\\|}~]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])+(\\.([a-zA-Z]|\\d|[!#\\$%&'\\*\\+\\-\\/=\\?\\^_`{\\|}~]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])+)*)|((\\x22)((((\\x20|\\x09)*(\\x0d\\x0a))?(\\x20|\\x09)+)?(([\\x01-\\x08\\x0b\\x0c\\x0e-\\x1f\\x7f]|\\x21|[\\x23-\\x5b]|[\\x5d-\\x7e]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])|(\\\\([\\x01-\\x09\\x0b\\x0c\\x0d-\\x7f]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF]))))*(((\\x20|\\x09)*(\\x0d\\x0a))?(\\x20|\\x09)+)?(\\x22)))@((([a-zA-Z]|\\d|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])|(([a-zA-Z]|\\d|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])([a-zA-Z]|\\d|-|_|~|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])*([a-zA-Z]|\\d|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])))\\.)+(([a-zA-Z]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])|(([a-zA-Z]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])([a-zA-Z]|\\d|-|_|~|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])*([a-zA-Z]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])))$/,\n\n    // Follow https://www.w3.org/TR/html5/infrastructure.html#floating-point-numbers\n    number: /^-?(\\d*\\.)?\\d+(e[-+]?\\d+)?$/i,\n\n    integer: /^-?\\d+$/,\n\n    digits: /^\\d+$/,\n\n    alphanum: /^\\w+$/i,\n\n    date: {\n      test: value => Utils.parse.date(value) !== null\n    },\n\n    url: new RegExp(\n        \"^\" +\n          // protocol identifier\n          \"(?:(?:https?|ftp)://)?\" + // ** mod: make scheme optional\n          // user:pass authentication\n          \"(?:\\\\S+(?::\\\\S*)?@)?\" +\n          \"(?:\" +\n            // IP address exclusion\n            // private & local networks\n            // \"(?!(?:10|127)(?:\\\\.\\\\d{1,3}){3})\" +   // ** mod: allow local networks\n            // \"(?!(?:169\\\\.254|192\\\\.168)(?:\\\\.\\\\d{1,3}){2})\" +  // ** mod: allow local networks\n            // \"(?!172\\\\.(?:1[6-9]|2\\\\d|3[0-1])(?:\\\\.\\\\d{1,3}){2})\" +  // ** mod: allow local networks\n            // IP address dotted notation octets\n            // excludes loopback network 0.0.0.0\n            // excludes reserved space >= 224.0.0.0\n            // excludes network & broacast addresses\n            // (first & last IP address of each class)\n            \"(?:[1-9]\\\\d?|1\\\\d\\\\d|2[01]\\\\d|22[0-3])\" +\n            \"(?:\\\\.(?:1?\\\\d{1,2}|2[0-4]\\\\d|25[0-5])){2}\" +\n            \"(?:\\\\.(?:[1-9]\\\\d?|1\\\\d\\\\d|2[0-4]\\\\d|25[0-4]))\" +\n          \"|\" +\n            // host name\n            \"(?:(?:[a-zA-Z\\\\u00a1-\\\\uffff0-9]-*)*[a-zA-Z\\\\u00a1-\\\\uffff0-9]+)\" +\n            // domain name\n            \"(?:\\\\.(?:[a-zA-Z\\\\u00a1-\\\\uffff0-9]-*)*[a-zA-Z\\\\u00a1-\\\\uffff0-9]+)*\" +\n            // TLD identifier\n            \"(?:\\\\.(?:[a-zA-Z\\\\u00a1-\\\\uffff]{2,}))\" +\n          \")\" +\n          // port number\n          \"(?::\\\\d{2,5})?\" +\n          // resource path\n          \"(?:/\\\\S*)?\" +\n        \"$\"\n      )\n  };\n  typeTesters.range = typeTesters.number;\n\n  // See http://stackoverflow.com/a/10454560/8279\n  var decimalPlaces = num => {\n    var match = ('' + num).match(/(?:\\.(\\d+))?(?:[eE]([+-]?\\d+))?$/);\n    if (!match) { return 0; }\n    return Math.max(\n         0,\n         // Number of digits right of decimal point.\n         (match[1] ? match[1].length : 0) -\n         // Adjust for scientific notation.\n         (match[2] ? +match[2] : 0));\n  };\n\n  // parseArguments('number', ['1', '2']) => [1, 2]\n  let ValidatorRegistry__parseArguments = (type, args) => args.map(Utils.parse[type]);\n  // operatorToValidator returns a validating function for an operator function, applied to the given type\n  let ValidatorRegistry__operatorToValidator = (type, operator) => {\n    return (value, ...requirementsAndInput) => {\n      requirementsAndInput.pop(); // Get rid of `input` argument\n      if (!value)\n        return true;  // Builtin validators all accept empty strings, except `required` of course\n      return operator(value, ...ValidatorRegistry__parseArguments(type, requirementsAndInput));\n    };\n  };\n\n  let ValidatorRegistry__comparisonOperator = operator => ({\n    validateDate: ValidatorRegistry__operatorToValidator('date', operator),\n    validateNumber: ValidatorRegistry__operatorToValidator('number', operator),\n    requirementType: operator.length <= 2 ? 'string' : ['string', 'string'], // Support operators with a 1 or 2 requirement(s)\n    priority: 30\n  });\n\n  ValidatorRegistry.prototype = {\n    init: function (validators, catalog) {\n      this.catalog = catalog;\n      // Copy prototype's validators:\n      this.validators = Object.assign({}, this.validators);\n\n      for (var name in validators)\n        this.addValidator(name, validators[name].fn, validators[name].priority);\n\n      window.Parsley.trigger('parsley:validator:init');\n    },\n\n    // Set new messages locale if we have dictionary loaded in ParsleyConfig.i18n\n    setLocale: function (locale) {\n      if ('undefined' === typeof this.catalog[locale])\n        throw new Error(locale + ' is not available in the catalog');\n\n      this.locale = locale;\n\n      return this;\n    },\n\n    // Add a new messages catalog for a given locale. Set locale for this catalog if set === `true`\n    addCatalog: function (locale, messages, set) {\n      if ('object' === typeof messages)\n        this.catalog[locale] = messages;\n\n      if (true === set)\n        return this.setLocale(locale);\n\n      return this;\n    },\n\n    // Add a specific message for a given constraint in a given locale\n    addMessage: function (locale, name, message) {\n      if ('undefined' === typeof this.catalog[locale])\n        this.catalog[locale] = {};\n\n      this.catalog[locale][name] = message;\n\n      return this;\n    },\n\n    // Add messages for a given locale\n    addMessages: function (locale, nameMessageObject) {\n      for (var name in nameMessageObject)\n        this.addMessage(locale, name, nameMessageObject[name]);\n\n      return this;\n    },\n\n    // Add a new validator\n    //\n    //    addValidator('custom', {\n    //        requirementType: ['integer', 'integer'],\n    //        validateString: function(value, from, to) {},\n    //        priority: 22,\n    //        messages: {\n    //          en: \"Hey, that's no good\",\n    //          fr: \"Aye aye, pas bon du tout\",\n    //        }\n    //    })\n    //\n    // Old API was addValidator(name, function, priority)\n    //\n    addValidator: function (name, arg1, arg2) {\n      if (this.validators[name])\n        Utils.warn('Validator \"' + name + '\" is already defined.');\n      else if (Defaults.hasOwnProperty(name)) {\n        Utils.warn('\"' + name + '\" is a restricted keyword and is not a valid validator name.');\n        return;\n      }\n      return this._setValidator(...arguments);\n    },\n\n    hasValidator: function (name) {\n      return !!this.validators[name];\n    },\n\n    updateValidator: function (name, arg1, arg2) {\n      if (!this.validators[name]) {\n        Utils.warn('Validator \"' + name + '\" is not already defined.');\n        return this.addValidator(...arguments);\n      }\n      return this._setValidator(...arguments);\n    },\n\n    removeValidator: function (name) {\n      if (!this.validators[name])\n        Utils.warn('Validator \"' + name + '\" is not defined.');\n\n      delete this.validators[name];\n\n      return this;\n    },\n\n    _setValidator: function (name, validator, priority) {\n      if ('object' !== typeof validator) {\n        // Old style validator, with `fn` and `priority`\n        validator = {\n          fn: validator,\n          priority: priority\n        };\n      }\n      if (!validator.validate) {\n        validator = new Validator(validator);\n      }\n      this.validators[name] = validator;\n\n      for (var locale in validator.messages || {})\n        this.addMessage(locale, name, validator.messages[locale]);\n\n      return this;\n    },\n\n    getErrorMessage: function (constraint) {\n      var message;\n\n      // Type constraints are a bit different, we have to match their requirements too to find right error message\n      if ('type' === constraint.name) {\n        var typeMessages = this.catalog[this.locale][constraint.name] || {};\n        message = typeMessages[constraint.requirements];\n      } else\n        message = this.formatMessage(this.catalog[this.locale][constraint.name], constraint.requirements);\n\n      return message || this.catalog[this.locale].defaultMessage || this.catalog.en.defaultMessage;\n    },\n\n    // Kind of light `sprintf()` implementation\n    formatMessage: function (string, parameters) {\n      if ('object' === typeof parameters) {\n        for (var i in parameters)\n          string = this.formatMessage(string, parameters[i]);\n\n        return string;\n      }\n\n      return 'string' === typeof string ? string.replace(/%s/i, parameters) : '';\n    },\n\n    // Here is the Parsley default validators list.\n    // A validator is an object with the following key values:\n    //  - priority: an integer\n    //  - requirement: 'string' (default), 'integer', 'number', 'regexp' or an Array of these\n    //  - validateString, validateMultiple, validateNumber: functions returning `true`, `false` or a promise\n    // Alternatively, a validator can be a function that returns such an object\n    //\n    validators: {\n      notblank: {\n        validateString: function(value) {\n          return /\\S/.test(value);\n        },\n        priority: 2\n      },\n      required: {\n        validateMultiple: function(values) {\n          return values.length > 0;\n        },\n        validateString: function(value) {\n          return /\\S/.test(value);\n        },\n        priority: 512\n      },\n      type: {\n        validateString: function(value, type, {step = 'any', base = 0} = {}) {\n          var tester = typeTesters[type];\n          if (!tester) {\n            throw new Error('validator type `' + type + '` is not supported');\n          }\n          if (!value)\n            return true;  // Builtin validators all accept empty strings, except `required` of course\n          if (!tester.test(value))\n            return false;\n          if ('number' === type) {\n            if (!/^any$/i.test(step || '')) {\n              var nb = Number(value);\n              var decimals = Math.max(decimalPlaces(step), decimalPlaces(base));\n              if (decimalPlaces(nb) > decimals) // Value can't have too many decimals\n                return false;\n              // Be careful of rounding errors by using integers.\n              var toInt = f => Math.round(f * Math.pow(10, decimals));\n              if ((toInt(nb) - toInt(base)) % toInt(step) != 0)\n                return false;\n            }\n          }\n          return true;\n        },\n        requirementType: {\n          '': 'string',\n          step: 'string',\n          base: 'number'\n        },\n        priority: 256\n      },\n      pattern: {\n        validateString: function(value, regexp) {\n          if (!value)\n            return true;  // Builtin validators all accept empty strings, except `required` of course\n          return regexp.test(value);\n        },\n        requirementType: 'regexp',\n        priority: 64\n      },\n      minlength: {\n        validateString: function (value, requirement) {\n          if (!value)\n            return true;  // Builtin validators all accept empty strings, except `required` of course\n          return value.length >= requirement;\n        },\n        requirementType: 'integer',\n        priority: 30\n      },\n      maxlength: {\n        validateString: function (value, requirement) {\n          return value.length <= requirement;\n        },\n        requirementType: 'integer',\n        priority: 30\n      },\n      length: {\n        validateString: function (value, min, max) {\n          if (!value)\n            return true;  // Builtin validators all accept empty strings, except `required` of course\n          return value.length >= min && value.length <= max;\n        },\n        requirementType: ['integer', 'integer'],\n        priority: 30\n      },\n      mincheck: {\n        validateMultiple: function (values, requirement) {\n          return values.length >= requirement;\n        },\n        requirementType: 'integer',\n        priority: 30\n      },\n      maxcheck: {\n        validateMultiple: function (values, requirement) {\n          return values.length <= requirement;\n        },\n        requirementType: 'integer',\n        priority: 30\n      },\n      check: {\n        validateMultiple: function (values, min, max) {\n          return values.length >= min && values.length <= max;\n        },\n        requirementType: ['integer', 'integer'],\n        priority: 30\n      },\n      min: ValidatorRegistry__comparisonOperator((value, requirement) => value >= requirement),\n      max: ValidatorRegistry__comparisonOperator((value, requirement) => value <= requirement),\n      range: ValidatorRegistry__comparisonOperator((value, min, max) => value >= min && value <= max),\n      equalto: {\n        validateString: function (value, refOrValue) {\n          if (!value)\n            return true;  // Builtin validators all accept empty strings, except `required` of course\n          var $reference = $(refOrValue);\n          if ($reference.length)\n            return value === $reference.val();\n          else\n            return value === refOrValue;\n        },\n        priority: 256\n      }\n    }\n  };\n\n  var UI = {};\n\n  var diffResults = function (newResult, oldResult, deep) {\n    var added = [];\n    var kept = [];\n\n    for (var i = 0; i < newResult.length; i++) {\n      var found = false;\n\n      for (var j = 0; j < oldResult.length; j++)\n        if (newResult[i].assert.name === oldResult[j].assert.name) {\n          found = true;\n          break;\n        }\n\n      if (found)\n        kept.push(newResult[i]);\n      else\n        added.push(newResult[i]);\n    }\n\n    return {\n      kept: kept,\n      added: added,\n      removed: !deep ? diffResults(oldResult, newResult, true).added : []\n    };\n  };\n\n  UI.Form = {\n\n    _actualizeTriggers: function () {\n      this.$element.on('submit.Parsley', evt => { this.onSubmitValidate(evt); });\n      this.$element.on('click.Parsley', Utils._SubmitSelector, evt => { this.onSubmitButton(evt); });\n\n      // UI could be disabled\n      if (false === this.options.uiEnabled)\n        return;\n\n      this.element.setAttribute('novalidate', '');\n    },\n\n    focus: function () {\n      this._focusedField = null;\n\n      if (true === this.validationResult || 'none' === this.options.focus)\n        return null;\n\n      for (var i = 0; i < this.fields.length; i++) {\n        var field = this.fields[i];\n        if (true !== field.validationResult && field.validationResult.length > 0 && 'undefined' === typeof field.options.noFocus) {\n          this._focusedField = field.$element;\n          if ('first' === this.options.focus)\n            break;\n        }\n      }\n\n      if (null === this._focusedField)\n        return null;\n\n      return this._focusedField.focus();\n    },\n\n    _destroyUI: function () {\n      // Reset all event listeners\n      this.$element.off('.Parsley');\n    }\n\n  };\n\n  UI.Field = {\n\n    _reflowUI: function () {\n      this._buildUI();\n\n      // If this field doesn't have an active UI don't bother doing something\n      if (!this._ui)\n        return;\n\n      // Diff between two validation results\n      var diff = diffResults(this.validationResult, this._ui.lastValidationResult);\n\n      // Then store current validation result for next reflow\n      this._ui.lastValidationResult = this.validationResult;\n\n      // Handle valid / invalid / none field class\n      this._manageStatusClass();\n\n      // Add, remove, updated errors messages\n      this._manageErrorsMessages(diff);\n\n      // Triggers impl\n      this._actualizeTriggers();\n\n      // If field is not valid for the first time, bind keyup trigger to ease UX and quickly inform user\n      if ((diff.kept.length || diff.added.length) && !this._failedOnce) {\n        this._failedOnce = true;\n        this._actualizeTriggers();\n      }\n    },\n\n    // Returns an array of field's error message(s)\n    getErrorsMessages: function () {\n      // No error message, field is valid\n      if (true === this.validationResult)\n        return [];\n\n      var messages = [];\n\n      for (var i = 0; i < this.validationResult.length; i++)\n        messages.push(this.validationResult[i].errorMessage ||\n         this._getErrorMessage(this.validationResult[i].assert));\n\n      return messages;\n    },\n\n    // It's a goal of Parsley that this method is no longer required [#1073]\n    addError: function (name, {message, assert, updateClass = true} = {}) {\n      this._buildUI();\n      this._addError(name, {message, assert});\n\n      if (updateClass)\n        this._errorClass();\n    },\n\n    // It's a goal of Parsley that this method is no longer required [#1073]\n    updateError: function (name, {message, assert, updateClass = true} = {}) {\n      this._buildUI();\n      this._updateError(name, {message, assert});\n\n      if (updateClass)\n        this._errorClass();\n    },\n\n    // It's a goal of Parsley that this method is no longer required [#1073]\n    removeError: function (name, {updateClass = true} = {}) {\n      this._buildUI();\n      this._removeError(name);\n\n      // edge case possible here: remove a standard Parsley error that is still failing in this.validationResult\n      // but highly improbable cuz' manually removing a well Parsley handled error makes no sense.\n      if (updateClass)\n        this._manageStatusClass();\n    },\n\n    _manageStatusClass: function () {\n      if (this.hasConstraints() && this.needsValidation() && true === this.validationResult)\n        this._successClass();\n      else if (this.validationResult.length > 0)\n        this._errorClass();\n      else\n        this._resetClass();\n    },\n\n    _manageErrorsMessages: function (diff) {\n      if ('undefined' !== typeof this.options.errorsMessagesDisabled)\n        return;\n\n      // Case where we have errorMessage option that configure an unique field error message, regardless failing validators\n      if ('undefined' !== typeof this.options.errorMessage) {\n        if ((diff.added.length || diff.kept.length)) {\n          this._insertErrorWrapper();\n\n          if (0 === this._ui.$errorsWrapper.find('.parsley-custom-error-message').length)\n            this._ui.$errorsWrapper\n              .append(\n                $(this.options.errorTemplate)\n                .addClass('parsley-custom-error-message')\n              );\n\n          return this._ui.$errorsWrapper\n            .addClass('filled')\n            .find('.parsley-custom-error-message')\n            .html(this.options.errorMessage);\n        }\n\n        return this._ui.$errorsWrapper\n          .removeClass('filled')\n          .find('.parsley-custom-error-message')\n          .remove();\n      }\n\n      // Show, hide, update failing constraints messages\n      for (var i = 0; i < diff.removed.length; i++)\n        this._removeError(diff.removed[i].assert.name);\n\n      for (i = 0; i < diff.added.length; i++)\n        this._addError(diff.added[i].assert.name, {message: diff.added[i].errorMessage, assert: diff.added[i].assert});\n\n      for (i = 0; i < diff.kept.length; i++)\n        this._updateError(diff.kept[i].assert.name, {message: diff.kept[i].errorMessage, assert: diff.kept[i].assert});\n    },\n\n\n    _addError: function (name, {message, assert}) {\n      this._insertErrorWrapper();\n      this._ui.$errorClassHandler\n        .attr('aria-describedby', this._ui.errorsWrapperId);\n      this._ui.$errorsWrapper\n        .addClass('filled')\n        .append(\n          $(this.options.errorTemplate)\n          .addClass('parsley-' + name)\n          .html(message || this._getErrorMessage(assert))\n        );\n    },\n\n    _updateError: function (name, {message, assert}) {\n      this._ui.$errorsWrapper\n        .addClass('filled')\n        .find('.parsley-' + name)\n        .html(message || this._getErrorMessage(assert));\n    },\n\n    _removeError: function (name) {\n      this._ui.$errorClassHandler\n        .removeAttr('aria-describedby');\n      this._ui.$errorsWrapper\n        .removeClass('filled')\n        .find('.parsley-' + name)\n        .remove();\n    },\n\n    _getErrorMessage: function (constraint) {\n      var customConstraintErrorMessage = constraint.name + 'Message';\n\n      if ('undefined' !== typeof this.options[customConstraintErrorMessage])\n        return window.Parsley.formatMessage(this.options[customConstraintErrorMessage], constraint.requirements);\n\n      return window.Parsley.getErrorMessage(constraint);\n    },\n\n    _buildUI: function () {\n      // UI could be already built or disabled\n      if (this._ui || false === this.options.uiEnabled)\n        return;\n\n      var _ui = {};\n\n      // Give field its Parsley id in DOM\n      this.element.setAttribute(this.options.namespace + 'id', this.__id__);\n\n      /** Generate important UI elements and store them in this **/\n      // $errorClassHandler is the $element that woul have parsley-error and parsley-success classes\n      _ui.$errorClassHandler = this._manageClassHandler();\n\n      // $errorsWrapper is a div that would contain the various field errors, it will be appended into $errorsContainer\n      _ui.errorsWrapperId = 'parsley-id-' + (this.options.multiple ? 'multiple-' + this.options.multiple : this.__id__);\n      _ui.$errorsWrapper = $(this.options.errorsWrapper).attr('id', _ui.errorsWrapperId);\n\n      // ValidationResult UI storage to detect what have changed bwt two validations, and update DOM accordingly\n      _ui.lastValidationResult = [];\n      _ui.validationInformationVisible = false;\n\n      // Store it in this for later\n      this._ui = _ui;\n    },\n\n    // Determine which element will have `parsley-error` and `parsley-success` classes\n    _manageClassHandler: function () {\n      // Class handled could also be determined by function given in Parsley options\n      if ('string' === typeof this.options.classHandler && $(this.options.classHandler).length)\n        return $(this.options.classHandler);\n\n      // Class handled could also be determined by function given in Parsley options\n      var $handlerFunction = this.options.classHandler;\n\n      // It might also be the function name of a global function\n      if ('string' === typeof this.options.classHandler && 'function' === typeof window[this.options.classHandler])\n        $handlerFunction = window[this.options.classHandler];\n\n      if ('function' === typeof $handlerFunction) {\n        var $handler = $handlerFunction.call(this, this);\n\n        // If this function returned a valid existing DOM element, go for it\n        if ('undefined' !== typeof $handler && $handler.length)\n          return $handler;\n      } else if ('object' === typeof $handlerFunction && $handlerFunction instanceof jQuery && $handlerFunction.length) {\n        return $handlerFunction;\n      } else if ($handlerFunction) {\n        Utils.warn('The class handler `' + $handlerFunction + '` does not exist in DOM nor as a global JS function');\n      }\n\n      return this._inputHolder();\n    },\n\n    _inputHolder: function() {\n      // if simple element (input, texatrea, select...) it will perfectly host the classes and precede the error container\n      if (!this.options.multiple || this.element.nodeName === 'SELECT')\n        return this.$element;\n\n      // But if multiple element (radio, checkbox), that would be their parent\n      return this.$element.parent();\n    },\n\n    _insertErrorWrapper: function () {\n      var $errorsContainer = this.options.errorsContainer;\n\n      // Nothing to do if already inserted\n      if (0 !== this._ui.$errorsWrapper.parent().length)\n        return this._ui.$errorsWrapper.parent();\n\n      if ('string' === typeof $errorsContainer) {\n        if ($($errorsContainer).length)\n          return $($errorsContainer).append(this._ui.$errorsWrapper);\n        else if ('function' === typeof window[$errorsContainer])\n          $errorsContainer = window[$errorsContainer];\n        else\n          Utils.warn('The errors container `' + $errorsContainer + '` does not exist in DOM nor as a global JS function');\n      }\n\n      if ('function' === typeof $errorsContainer)\n        $errorsContainer = $errorsContainer.call(this, this);\n\n      if ('object' === typeof $errorsContainer && $errorsContainer.length)\n        return $errorsContainer.append(this._ui.$errorsWrapper);\n\n      return this._inputHolder().after(this._ui.$errorsWrapper);\n    },\n\n    _actualizeTriggers: function () {\n      var $toBind = this._findRelated();\n      var trigger;\n\n      // Remove Parsley events already bound on this field\n      $toBind.off('.Parsley');\n      if (this._failedOnce)\n        $toBind.on(Utils.namespaceEvents(this.options.triggerAfterFailure, 'Parsley'), () => {\n          this._validateIfNeeded();\n        });\n      else if (trigger = Utils.namespaceEvents(this.options.trigger, 'Parsley')) {\n        $toBind.on(trigger, event => {\n          this._validateIfNeeded(event);\n        });\n      }\n    },\n\n    _validateIfNeeded: function (event) {\n      // For keyup, keypress, keydown, input... events that could be a little bit obstrusive\n      // do not validate if val length < min threshold on first validation. Once field have been validated once and info\n      // about success or failure have been displayed, always validate with this trigger to reflect every yalidation change.\n      if (event && /key|input/.test(event.type))\n        if (!(this._ui && this._ui.validationInformationVisible) && this.getValue().length <= this.options.validationThreshold)\n          return;\n\n      if (this.options.debounce) {\n        window.clearTimeout(this._debounced);\n        this._debounced = window.setTimeout(() => this.validate(), this.options.debounce);\n      } else\n        this.validate();\n    },\n\n    _resetUI: function () {\n      // Reset all event listeners\n      this._failedOnce = false;\n      this._actualizeTriggers();\n\n      // Nothing to do if UI never initialized for this field\n      if ('undefined' === typeof this._ui)\n        return;\n\n      // Reset all errors' li\n      this._ui.$errorsWrapper\n        .removeClass('filled')\n        .children()\n        .remove();\n\n      // Reset validation class\n      this._resetClass();\n\n      // Reset validation flags and last validation result\n      this._ui.lastValidationResult = [];\n      this._ui.validationInformationVisible = false;\n    },\n\n    _destroyUI: function () {\n      this._resetUI();\n\n      if ('undefined' !== typeof this._ui)\n        this._ui.$errorsWrapper.remove();\n\n      delete this._ui;\n    },\n\n    _successClass: function () {\n      this._ui.validationInformationVisible = true;\n      this._ui.$errorClassHandler.removeClass(this.options.errorClass).addClass(this.options.successClass);\n    },\n    _errorClass: function () {\n      this._ui.validationInformationVisible = true;\n      this._ui.$errorClassHandler.removeClass(this.options.successClass).addClass(this.options.errorClass);\n    },\n    _resetClass: function () {\n      this._ui.$errorClassHandler.removeClass(this.options.successClass).removeClass(this.options.errorClass);\n    }\n  };\n\n  var Form = function (element, domOptions, options) {\n    this.__class__ = 'Form';\n\n    this.element = element;\n    this.$element = $(element);\n    this.domOptions = domOptions;\n    this.options = options;\n    this.parent = window.Parsley;\n\n    this.fields = [];\n    this.validationResult = null;\n  };\n\n  var Form__statusMapping = {pending: null, resolved: true, rejected: false};\n\n  Form.prototype = {\n    onSubmitValidate: function (event) {\n      // This is a Parsley generated submit event, do not validate, do not prevent, simply exit and keep normal behavior\n      if (true === event.parsley)\n        return;\n\n      // If we didn't come here through a submit button, use the first one in the form\n      var submitSource = this._submitSource || this.$element.find(Utils._SubmitSelector)[0];\n      this._submitSource = null;\n      this.$element.find('.parsley-synthetic-submit-button').prop('disabled', true);\n      if (submitSource && null !== submitSource.getAttribute('formnovalidate'))\n        return;\n\n      window.Parsley._remoteCache = {};\n\n      var promise = this.whenValidate({event});\n\n      if ('resolved' === promise.state() && false !== this._trigger('submit')) {\n        // All good, let event go through. We make this distinction because browsers\n        // differ in their handling of `submit` being called from inside a submit event [#1047]\n      } else {\n        // Rejected or pending: cancel this submit\n        event.stopImmediatePropagation();\n        event.preventDefault();\n        if ('pending' === promise.state())\n          promise.done(() => { this._submit(submitSource); });\n      }\n    },\n\n    onSubmitButton: function(event) {\n      this._submitSource = event.currentTarget;\n    },\n    // internal\n    // _submit submits the form, this time without going through the validations.\n    // Care must be taken to \"fake\" the actual submit button being clicked.\n    _submit: function (submitSource) {\n      if (false === this._trigger('submit'))\n        return;\n      // Add submit button's data\n      if (submitSource) {\n        var $synthetic = this.$element.find('.parsley-synthetic-submit-button').prop('disabled', false);\n        if (0 === $synthetic.length)\n          $synthetic = $('<input class=\"parsley-synthetic-submit-button\" type=\"hidden\">').appendTo(this.$element);\n        $synthetic.attr({\n          name: submitSource.getAttribute('name'),\n          value: submitSource.getAttribute('value')\n        });\n      }\n\n      this.$element.trigger(Object.assign($.Event('submit'), {parsley: true}));\n    },\n\n    // Performs validation on fields while triggering events.\n    // @returns `true` if all validations succeeds, `false`\n    // if a failure is immediately detected, or `null`\n    // if dependant on a promise.\n    // Consider using `whenValidate` instead.\n    validate: function (options) {\n      if (arguments.length >= 1 && !$.isPlainObject(options)) {\n        Utils.warnOnce('Calling validate on a parsley form without passing arguments as an object is deprecated.');\n        var [group, force, event] = arguments;\n        options = {group, force, event};\n      }\n      return Form__statusMapping[ this.whenValidate(options).state() ];\n    },\n\n    whenValidate: function ({group, force, event} = {}) {\n      this.submitEvent = event;\n      if (event) {\n        this.submitEvent = Object.assign({}, event, {preventDefault: () => {\n          Utils.warnOnce(\"Using `this.submitEvent.preventDefault()` is deprecated; instead, call `this.validationResult = false`\");\n          this.validationResult = false;\n        }});\n      }\n      this.validationResult = true;\n\n      // fire validate event to eventually modify things before every validation\n      this._trigger('validate');\n\n      // Refresh form DOM options and form's fields that could have changed\n      this._refreshFields();\n\n      var promises = this._withoutReactualizingFormOptions(() => {\n        return $.map(this.fields, field => field.whenValidate({force, group}));\n      });\n\n      return Utils.all(promises)\n        .done(  () => { this._trigger('success'); })\n        .fail(  () => {\n          this.validationResult = false;\n          this.focus();\n          this._trigger('error');\n        })\n        .always(() => { this._trigger('validated'); })\n        .pipe(...this._pipeAccordingToValidationResult());\n    },\n\n    // Iterate over refreshed fields, and stop on first failure.\n    // Returns `true` if all fields are valid, `false` if a failure is detected\n    // or `null` if the result depends on an unresolved promise.\n    // Prefer using `whenValid` instead.\n    isValid: function (options) {\n      if (arguments.length >= 1 && !$.isPlainObject(options)) {\n        Utils.warnOnce('Calling isValid on a parsley form without passing arguments as an object is deprecated.');\n        var [group, force] = arguments;\n        options = {group, force};\n      }\n      return Form__statusMapping[ this.whenValid(options).state() ];\n    },\n\n    // Iterate over refreshed fields and validate them.\n    // Returns a promise.\n    // A validation that immediately fails will interrupt the validations.\n    whenValid: function ({group, force} = {}) {\n      this._refreshFields();\n\n      var promises = this._withoutReactualizingFormOptions(() => {\n        return $.map(this.fields, field => field.whenValid({group, force}));\n      });\n      return Utils.all(promises);\n    },\n\n    refresh: function() {\n      this._refreshFields();\n      return this;\n    },\n\n    // Reset UI\n    reset: function () {\n      // Form case: emit a reset event for each field\n      for (var i = 0; i < this.fields.length; i++)\n        this.fields[i].reset();\n\n      this._trigger('reset');\n    },\n\n    // Destroy Parsley instance (+ UI)\n    destroy: function () {\n      // Field case: emit destroy event to clean UI and then destroy stored instance\n      this._destroyUI();\n\n      // Form case: destroy all its fields and then destroy stored instance\n      for (var i = 0; i < this.fields.length; i++)\n        this.fields[i].destroy();\n\n      this.$element.removeData('Parsley');\n      this._trigger('destroy');\n    },\n\n    _refreshFields: function () {\n      return this.actualizeOptions()._bindFields();\n    },\n\n    _bindFields: function () {\n      var oldFields = this.fields;\n\n      this.fields = [];\n      this.fieldsMappedById = {};\n\n      this._withoutReactualizingFormOptions(() => {\n        this.$element\n        .find(this.options.inputs)\n        .not(this.options.excluded)\n        .each((_, element) => {\n          var fieldInstance = new window.Parsley.Factory(element, {}, this);\n\n          // Only add valid and not excluded `Field` and `FieldMultiple` children\n          if (('Field' === fieldInstance.__class__ || 'FieldMultiple' === fieldInstance.__class__) && (true !== fieldInstance.options.excluded)) {\n            let uniqueId = fieldInstance.__class__ + '-' + fieldInstance.__id__;\n            if ('undefined' === typeof this.fieldsMappedById[uniqueId]) {\n              this.fieldsMappedById[uniqueId] = fieldInstance;\n              this.fields.push(fieldInstance);\n            }\n          }\n        });\n\n        $.each(Utils.difference(oldFields, this.fields), (_, field) => {\n          field.reset();\n        });\n      });\n      return this;\n    },\n\n    // Internal only.\n    // Looping on a form's fields to do validation or similar\n    // will trigger reactualizing options on all of them, which\n    // in turn will reactualize the form's options.\n    // To avoid calling actualizeOptions so many times on the form\n    // for nothing, _withoutReactualizingFormOptions temporarily disables\n    // the method actualizeOptions on this form while `fn` is called.\n    _withoutReactualizingFormOptions: function (fn) {\n      var oldActualizeOptions = this.actualizeOptions;\n      this.actualizeOptions = function () { return this; };\n      var result = fn();\n      this.actualizeOptions = oldActualizeOptions;\n      return result;\n    },\n\n    // Internal only.\n    // Shortcut to trigger an event\n    // Returns true iff event is not interrupted and default not prevented.\n    _trigger: function (eventName) {\n      return this.trigger('form:' + eventName);\n    }\n\n  };\n\n  const Constraint = function(parsleyField, name, requirements, priority, isDomConstraint) {\n    const validatorSpec = window.Parsley._validatorRegistry.validators[name];\n    const validator = new Validator(validatorSpec);\n    priority = priority || parsleyField.options[name + 'Priority'] || validator.priority;\n    isDomConstraint = (true === isDomConstraint);\n\n    Object.assign(this, {\n      validator,\n      name,\n      requirements,\n      priority,\n      isDomConstraint\n    });\n    this._parseRequirements(parsleyField.options);\n  };\n\n  const capitalize = function(str) {\n    const cap = str[0].toUpperCase();\n    return cap + str.slice(1);\n  };\n\n  Constraint.prototype = {\n    validate: function(value, instance) {\n      return this.validator.validate(value, ...this.requirementList, instance);\n    },\n\n    _parseRequirements: function(options) {\n      this.requirementList = this.validator.parseRequirements(this.requirements,\n        key => options[this.name + capitalize(key)]\n      );\n    }\n  };\n\n  var Field = function (field, domOptions, options, parsleyFormInstance) {\n    this.__class__ = 'Field';\n\n    this.element = field;\n    this.$element = $(field);\n\n    // Set parent if we have one\n    if ('undefined' !== typeof parsleyFormInstance) {\n      this.parent = parsleyFormInstance;\n    }\n\n    this.options = options;\n    this.domOptions = domOptions;\n\n    // Initialize some properties\n    this.constraints = [];\n    this.constraintsByName = {};\n    this.validationResult = true;\n\n    // Bind constraints\n    this._bindConstraints();\n  };\n\n  var parsley_field__statusMapping = {pending: null, resolved: true, rejected: false};\n\n  Field.prototype = {\n    // # Public API\n    // Validate field and trigger some events for mainly `UI`\n    // @returns `true`, an array of the validators that failed, or\n    // `null` if validation is not finished. Prefer using whenValidate\n    validate: function (options) {\n      if (arguments.length >= 1 && !$.isPlainObject(options)) {\n        Utils.warnOnce('Calling validate on a parsley field without passing arguments as an object is deprecated.');\n        options = {options};\n      }\n      var promise = this.whenValidate(options);\n      if (!promise)  // If excluded with `group` option\n        return true;\n      switch (promise.state()) {\n        case 'pending': return null;\n        case 'resolved': return true;\n        case 'rejected': return this.validationResult;\n      }\n    },\n\n    // Validate field and trigger some events for mainly `UI`\n    // @returns a promise that succeeds only when all validations do\n    // or `undefined` if field is not in the given `group`.\n    whenValidate: function ({force, group} =  {}) {\n      // do not validate a field if not the same as given validation group\n      this.refresh();\n      if (group && !this._isInGroup(group))\n        return;\n\n      this.value = this.getValue();\n\n      // Field Validate event. `this.value` could be altered for custom needs\n      this._trigger('validate');\n\n      return this.whenValid({force, value: this.value, _refreshed: true})\n        .always(() => { this._reflowUI(); })\n        .done(() =>   { this._trigger('success'); })\n        .fail(() =>   { this._trigger('error'); })\n        .always(() => { this._trigger('validated'); })\n        .pipe(...this._pipeAccordingToValidationResult());\n    },\n\n    hasConstraints: function () {\n      return 0 !== this.constraints.length;\n    },\n\n    // An empty optional field does not need validation\n    needsValidation: function (value) {\n      if ('undefined' === typeof value)\n        value = this.getValue();\n\n      // If a field is empty and not required, it is valid\n      // Except if `data-parsley-validate-if-empty` explicitely added, useful for some custom validators\n      if (!value.length && !this._isRequired() && 'undefined' === typeof this.options.validateIfEmpty)\n        return false;\n\n      return true;\n    },\n\n    _isInGroup: function (group) {\n      if (Array.isArray(this.options.group))\n        return -1 !== $.inArray(group, this.options.group);\n      return this.options.group === group;\n    },\n\n    // Just validate field. Do not trigger any event.\n    // Returns `true` iff all constraints pass, `false` if there are failures,\n    // or `null` if the result can not be determined yet (depends on a promise)\n    // See also `whenValid`.\n    isValid: function (options) {\n      if (arguments.length >= 1 && !$.isPlainObject(options)) {\n        Utils.warnOnce('Calling isValid on a parsley field without passing arguments as an object is deprecated.');\n        var [force, value] = arguments;\n        options = {force, value};\n      }\n      var promise = this.whenValid(options);\n      if (!promise) // Excluded via `group`\n        return true;\n      return parsley_field__statusMapping[promise.state()];\n    },\n\n    // Just validate field. Do not trigger any event.\n    // @returns a promise that succeeds only when all validations do\n    // or `undefined` if the field is not in the given `group`.\n    // The argument `force` will force validation of empty fields.\n    // If a `value` is given, it will be validated instead of the value of the input.\n    whenValid: function ({force = false, value, group, _refreshed} = {}) {\n      // Recompute options and rebind constraints to have latest changes\n      if (!_refreshed)\n        this.refresh();\n      // do not validate a field if not the same as given validation group\n      if (group && !this._isInGroup(group))\n        return;\n\n      this.validationResult = true;\n\n      // A field without constraint is valid\n      if (!this.hasConstraints())\n        return $.when();\n\n      // Value could be passed as argument, needed to add more power to 'field:validate'\n      if ('undefined' === typeof value || null === value)\n        value = this.getValue();\n\n      if (!this.needsValidation(value) && true !== force)\n        return $.when();\n\n      var groupedConstraints = this._getGroupedConstraints();\n      var promises = [];\n      $.each(groupedConstraints, (_, constraints) => {\n        // Process one group of constraints at a time, we validate the constraints\n        // and combine the promises together.\n        var promise = Utils.all(\n          $.map(constraints, constraint => this._validateConstraint(value, constraint))\n        );\n        promises.push(promise);\n        if (promise.state() === 'rejected')\n          return false; // Interrupt processing if a group has already failed\n      });\n      return Utils.all(promises);\n    },\n\n    // @returns a promise\n    _validateConstraint: function(value, constraint) {\n      var result = constraint.validate(value, this);\n      // Map false to a failed promise\n      if (false === result)\n        result = $.Deferred().reject();\n      // Make sure we return a promise and that we record failures\n      return Utils.all([result]).fail(errorMessage => {\n        if (!(this.validationResult instanceof Array))\n          this.validationResult = [];\n        this.validationResult.push({\n          assert: constraint,\n          errorMessage: 'string' === typeof errorMessage && errorMessage\n        });\n      });\n    },\n\n    // @returns Parsley field computed value that could be overrided or configured in DOM\n    getValue: function () {\n      var value;\n\n      // Value could be overriden in DOM or with explicit options\n      if ('function' === typeof this.options.value)\n        value = this.options.value(this);\n      else if ('undefined' !== typeof this.options.value)\n        value = this.options.value;\n      else\n        value = this.$element.val();\n\n      // Handle wrong DOM or configurations\n      if ('undefined' === typeof value || null === value)\n        return '';\n\n      return this._handleWhitespace(value);\n    },\n\n    // Reset UI\n    reset: function () {\n      this._resetUI();\n      return this._trigger('reset');\n    },\n\n    // Destroy Parsley instance (+ UI)\n    destroy: function () {\n      // Field case: emit destroy event to clean UI and then destroy stored instance\n      this._destroyUI();\n      this.$element.removeData('Parsley');\n      this.$element.removeData('FieldMultiple');\n      this._trigger('destroy');\n    },\n\n    // Actualize options and rebind constraints\n    refresh: function () {\n      this._refreshConstraints();\n      return this;\n    },\n\n    _refreshConstraints: function () {\n      return this.actualizeOptions()._bindConstraints();\n    },\n\n    refreshConstraints: function() {\n      Utils.warnOnce(\"Parsley's refreshConstraints is deprecated. Please use refresh\");\n      return this.refresh();\n    },\n\n    /**\n    * Add a new constraint to a field\n    *\n    * @param {String}   name\n    * @param {Mixed}    requirements      optional\n    * @param {Number}   priority          optional\n    * @param {Boolean}  isDomConstraint   optional\n    */\n    addConstraint: function (name, requirements, priority, isDomConstraint) {\n\n      if (window.Parsley._validatorRegistry.validators[name]) {\n        var constraint = new Constraint(this, name, requirements, priority, isDomConstraint);\n\n        // if constraint already exist, delete it and push new version\n        if ('undefined' !== this.constraintsByName[constraint.name])\n          this.removeConstraint(constraint.name);\n\n        this.constraints.push(constraint);\n        this.constraintsByName[constraint.name] = constraint;\n      }\n\n      return this;\n    },\n\n    // Remove a constraint\n    removeConstraint: function (name) {\n      for (var i = 0; i < this.constraints.length; i++)\n        if (name === this.constraints[i].name) {\n          this.constraints.splice(i, 1);\n          break;\n        }\n      delete this.constraintsByName[name];\n      return this;\n    },\n\n    // Update a constraint (Remove + re-add)\n    updateConstraint: function (name, parameters, priority) {\n      return this.removeConstraint(name)\n        .addConstraint(name, parameters, priority);\n    },\n\n    // # Internals\n\n    // Internal only.\n    // Bind constraints from config + options + DOM\n    _bindConstraints: function () {\n      var constraints = [];\n      var constraintsByName = {};\n\n      // clean all existing DOM constraints to only keep javascript user constraints\n      for (var i = 0; i < this.constraints.length; i++)\n        if (false === this.constraints[i].isDomConstraint) {\n          constraints.push(this.constraints[i]);\n          constraintsByName[this.constraints[i].name] = this.constraints[i];\n        }\n\n      this.constraints = constraints;\n      this.constraintsByName = constraintsByName;\n\n      // then re-add Parsley DOM-API constraints\n      for (var name in this.options)\n        this.addConstraint(name, this.options[name], undefined, true);\n\n      // finally, bind special HTML5 constraints\n      return this._bindHtml5Constraints();\n    },\n\n    // Internal only.\n    // Bind specific HTML5 constraints to be HTML5 compliant\n    _bindHtml5Constraints: function () {\n      // html5 required\n      if (null !== this.element.getAttribute('required'))\n        this.addConstraint('required', true, undefined, true);\n\n      // html5 pattern\n      if (null !== this.element.getAttribute('pattern'))\n        this.addConstraint('pattern', this.element.getAttribute('pattern'), undefined, true);\n\n      // range\n      let min = this.element.getAttribute('min');\n      let max = this.element.getAttribute('max');\n      if (null !== min && null !== max)\n        this.addConstraint('range', [min, max], undefined, true);\n\n      // HTML5 min\n      else if (null !== min)\n        this.addConstraint('min', min, undefined, true);\n\n      // HTML5 max\n      else if (null !== max)\n        this.addConstraint('max', max, undefined, true);\n\n\n      // length\n      if (null !== this.element.getAttribute('minlength') && null !== this.element.getAttribute('maxlength'))\n        this.addConstraint('length', [this.element.getAttribute('minlength'), this.element.getAttribute('maxlength')], undefined, true);\n\n      // HTML5 minlength\n      else if (null !== this.element.getAttribute('minlength'))\n        this.addConstraint('minlength', this.element.getAttribute('minlength'), undefined, true);\n\n      // HTML5 maxlength\n      else if (null !== this.element.getAttribute('maxlength'))\n        this.addConstraint('maxlength', this.element.getAttribute('maxlength'), undefined, true);\n\n\n      // html5 types\n      var type = Utils.getType(this.element);\n\n      // Small special case here for HTML5 number: integer validator if step attribute is undefined or an integer value, number otherwise\n      if ('number' === type) {\n        return this.addConstraint('type', ['number', {\n          step: this.element.getAttribute('step') || '1',\n          base: min || this.element.getAttribute('value')\n        }], undefined, true);\n      // Regular other HTML5 supported types\n      } else if (/^(email|url|range|date)$/i.test(type)) {\n        return this.addConstraint('type', type, undefined, true);\n      }\n      return this;\n    },\n\n    // Internal only.\n    // Field is required if have required constraint without `false` value\n    _isRequired: function () {\n      if ('undefined' === typeof this.constraintsByName.required)\n        return false;\n\n      return false !== this.constraintsByName.required.requirements;\n    },\n\n    // Internal only.\n    // Shortcut to trigger an event\n    _trigger: function (eventName) {\n      return this.trigger('field:' + eventName);\n    },\n\n    // Internal only\n    // Handles whitespace in a value\n    // Use `data-parsley-whitespace=\"squish\"` to auto squish input value\n    // Use `data-parsley-whitespace=\"trim\"` to auto trim input value\n    _handleWhitespace: function (value) {\n      if (true === this.options.trimValue)\n        Utils.warnOnce('data-parsley-trim-value=\"true\" is deprecated, please use data-parsley-whitespace=\"trim\"');\n\n      if ('squish' === this.options.whitespace)\n        value = value.replace(/\\s{2,}/g, ' ');\n\n      if (('trim' === this.options.whitespace) || ('squish' === this.options.whitespace) || (true === this.options.trimValue))\n        value = Utils.trimString(value);\n\n      return value;\n    },\n\n    _isDateInput: function() {\n      var c = this.constraintsByName.type;\n      return c && c.requirements === 'date';\n    },\n\n    // Internal only.\n    // Returns the constraints, grouped by descending priority.\n    // The result is thus an array of arrays of constraints.\n    _getGroupedConstraints: function () {\n      if (false === this.options.priorityEnabled)\n        return [this.constraints];\n\n      var groupedConstraints = [];\n      var index = {};\n\n      // Create array unique of priorities\n      for (var i = 0; i < this.constraints.length; i++) {\n        var p = this.constraints[i].priority;\n        if (!index[p])\n          groupedConstraints.push(index[p] = []);\n        index[p].push(this.constraints[i]);\n      }\n      // Sort them by priority DESC\n      groupedConstraints.sort(function (a, b) { return b[0].priority - a[0].priority; });\n\n      return groupedConstraints;\n    }\n\n  };\n\n  var parsley_field = Field;\n\n  var Multiple = function () {\n    this.__class__ = 'FieldMultiple';\n  };\n\n  Multiple.prototype = {\n    // Add new `$element` sibling for multiple field\n    addElement: function ($element) {\n      this.$elements.push($element);\n\n      return this;\n    },\n\n    // See `Field._refreshConstraints()`\n    _refreshConstraints: function () {\n      var fieldConstraints;\n\n      this.constraints = [];\n\n      // Select multiple special treatment\n      if (this.element.nodeName === 'SELECT') {\n        this.actualizeOptions()._bindConstraints();\n\n        return this;\n      }\n\n      // Gather all constraints for each input in the multiple group\n      for (var i = 0; i < this.$elements.length; i++) {\n\n        // Check if element have not been dynamically removed since last binding\n        if (!$('html').has(this.$elements[i]).length) {\n          this.$elements.splice(i, 1);\n          continue;\n        }\n\n        fieldConstraints = this.$elements[i].data('FieldMultiple')._refreshConstraints().constraints;\n\n        for (var j = 0; j < fieldConstraints.length; j++)\n          this.addConstraint(fieldConstraints[j].name, fieldConstraints[j].requirements, fieldConstraints[j].priority, fieldConstraints[j].isDomConstraint);\n      }\n\n      return this;\n    },\n\n    // See `Field.getValue()`\n    getValue: function () {\n      // Value could be overriden in DOM\n      if ('function' === typeof this.options.value)\n        return this.options.value(this);\n      else if ('undefined' !== typeof this.options.value)\n        return this.options.value;\n\n      // Radio input case\n      if (this.element.nodeName === 'INPUT') {\n        var type = Utils.getType(this.element);\n        if (type === 'radio')\n          return this._findRelated().filter(':checked').val() || '';\n\n        // checkbox input case\n        if (type === 'checkbox') {\n          var values = [];\n\n          this._findRelated().filter(':checked').each(function () {\n            values.push($(this).val());\n          });\n\n          return values;\n        }\n      }\n\n      // Select multiple case\n      if (this.element.nodeName === 'SELECT' && null === this.$element.val())\n        return [];\n\n      // Default case that should never happen\n      return this.$element.val();\n    },\n\n    _init: function () {\n      this.$elements = [this.$element];\n\n      return this;\n    }\n  };\n\n  var Factory = function (element, options, parsleyFormInstance) {\n    this.element = element;\n    this.$element = $(element);\n\n    // If the element has already been bound, returns its saved Parsley instance\n    var savedparsleyFormInstance = this.$element.data('Parsley');\n    if (savedparsleyFormInstance) {\n\n      // If the saved instance has been bound without a Form parent and there is one given in this call, add it\n      if ('undefined' !== typeof parsleyFormInstance && savedparsleyFormInstance.parent === window.Parsley) {\n        savedparsleyFormInstance.parent = parsleyFormInstance;\n        savedparsleyFormInstance._resetOptions(savedparsleyFormInstance.options);\n      }\n\n      if ('object' === typeof options) {\n        Object.assign(savedparsleyFormInstance.options, options);\n      }\n\n      return savedparsleyFormInstance;\n    }\n\n    // Parsley must be instantiated with a DOM element or jQuery $element\n    if (!this.$element.length)\n      throw new Error('You must bind Parsley on an existing element.');\n\n    if ('undefined' !== typeof parsleyFormInstance && 'Form' !== parsleyFormInstance.__class__)\n      throw new Error('Parent instance must be a Form instance');\n\n    this.parent = parsleyFormInstance || window.Parsley;\n    return this.init(options);\n  };\n\n  Factory.prototype = {\n    init: function (options) {\n      this.__class__ = 'Parsley';\n      this.__version__ = '2.8.1';\n      this.__id__ = Utils.generateID();\n\n      // Pre-compute options\n      this._resetOptions(options);\n\n      // A Form instance is obviously a `<form>` element but also every node that is not an input and has the `data-parsley-validate` attribute\n      if (this.element.nodeName === 'FORM' || (Utils.checkAttr(this.element, this.options.namespace, 'validate') && !this.$element.is(this.options.inputs)))\n        return this.bind('parsleyForm');\n\n      // Every other element is bound as a `Field` or `FieldMultiple`\n      return this.isMultiple() ? this.handleMultiple() : this.bind('parsleyField');\n    },\n\n    isMultiple: function () {\n      var type = Utils.getType(this.element);\n      return ((type === 'radio' || type === 'checkbox') ||\n        (this.element.nodeName === 'SELECT' && null !== this.element.getAttribute('multiple')));\n    },\n\n    // Multiples fields are a real nightmare :(\n    // Maybe some refactoring would be appreciated here...\n    handleMultiple: function () {\n      var name;\n      var parsleyMultipleInstance;\n\n      // Handle multiple name\n      this.options.multiple = this.options.multiple ||\n        (name = this.element.getAttribute('name')) ||\n        this.element.getAttribute('id');\n\n      // Special select multiple input\n      if (this.element.nodeName === 'SELECT' && null !== this.element.getAttribute('multiple')) {\n        this.options.multiple = this.options.multiple || this.__id__;\n        return this.bind('parsleyFieldMultiple');\n\n      // Else for radio / checkboxes, we need a `name` or `data-parsley-multiple` to properly bind it\n      } else if (!this.options.multiple) {\n        Utils.warn('To be bound by Parsley, a radio, a checkbox and a multiple select input must have either a name or a multiple option.', this.$element);\n        return this;\n      }\n\n      // Reflect names that are numbers - the removing of special chars fails for numbers\n      if(typeof(this.options.multiple) === 'number') {\n        this.options.multiple = this.options.multiple.toString();\n      }\n\n      // Remove special chars\n      this.options.multiple = this.options.multiple.replace(/(:|\\.|\\[|\\]|\\{|\\}|\\$)/g, '');\n\n      // Add proper `data-parsley-multiple` to siblings if we have a valid multiple name\n      if (name) {\n        $('input[name=\"' + name + '\"]').each((i, input) => {\n          var type = Utils.getType(input);\n          if ((type === 'radio' || type === 'checkbox'))\n            input.setAttribute(this.options.namespace + 'multiple', this.options.multiple);\n        });\n      }\n\n      // Check here if we don't already have a related multiple instance saved\n      var $previouslyRelated = this._findRelated();\n      for (var i = 0; i < $previouslyRelated.length; i++) {\n        parsleyMultipleInstance = $($previouslyRelated.get(i)).data('Parsley');\n        if ('undefined' !== typeof parsleyMultipleInstance) {\n\n          if (!this.$element.data('FieldMultiple')) {\n            parsleyMultipleInstance.addElement(this.$element);\n          }\n\n          break;\n        }\n      }\n\n      // Create a secret Field instance for every multiple field. It will be stored in `data('FieldMultiple')`\n      // And will be useful later to access classic `Field` stuff while being in a `FieldMultiple` instance\n      this.bind('parsleyField', true);\n\n      return parsleyMultipleInstance || this.bind('parsleyFieldMultiple');\n    },\n\n    // Return proper `Form`, `Field` or `FieldMultiple`\n    bind: function (type, doNotStore) {\n      var parsleyInstance;\n\n      switch (type) {\n        case 'parsleyForm':\n          parsleyInstance = $.extend(\n            new Form(this.element, this.domOptions, this.options),\n            new Base(),\n            window.ParsleyExtend\n          )._bindFields();\n          break;\n        case 'parsleyField':\n          parsleyInstance = $.extend(\n            new parsley_field(this.element, this.domOptions, this.options, this.parent),\n            new Base(),\n            window.ParsleyExtend\n          );\n          break;\n        case 'parsleyFieldMultiple':\n          parsleyInstance = $.extend(\n            new parsley_field(this.element, this.domOptions, this.options, this.parent),\n            new Multiple(),\n            new Base(),\n            window.ParsleyExtend\n          )._init();\n          break;\n        default:\n          throw new Error(type + 'is not a supported Parsley type');\n      }\n\n      if (this.options.multiple)\n        Utils.setAttr(this.element, this.options.namespace, 'multiple', this.options.multiple);\n\n      if ('undefined' !== typeof doNotStore) {\n        this.$element.data('FieldMultiple', parsleyInstance);\n\n        return parsleyInstance;\n      }\n\n      // Store the freshly bound instance in a DOM element for later access using jQuery `data()`\n      this.$element.data('Parsley', parsleyInstance);\n\n      // Tell the world we have a new Form or Field instance!\n      parsleyInstance._actualizeTriggers();\n      parsleyInstance._trigger('init');\n\n      return parsleyInstance;\n    }\n  };\n\n  var vernums = $.fn.jquery.split('.');\n  if (parseInt(vernums[0]) <= 1 && parseInt(vernums[1]) < 8) {\n    throw \"The loaded version of jQuery is too old. Please upgrade to 1.8.x or better.\";\n  }\n  if (!vernums.forEach) {\n    Utils.warn('Parsley requires ES5 to run properly. Please include https://github.com/es-shims/es5-shim');\n  }\n  // Inherit `on`, `off` & `trigger` to Parsley:\n  var Parsley = Object.assign(new Base(), {\n      element: document,\n      $element: $(document),\n      actualizeOptions: null,\n      _resetOptions: null,\n      Factory: Factory,\n      version: '2.8.1'\n    });\n\n  // Supplement Field and Form with Base\n  // This way, the constructors will have access to those methods\n  Object.assign(parsley_field.prototype, UI.Field, Base.prototype);\n  Object.assign(Form.prototype, UI.Form, Base.prototype);\n  // Inherit actualizeOptions and _resetOptions:\n  Object.assign(Factory.prototype, Base.prototype);\n\n  // ### jQuery API\n  // `$('.elem').parsley(options)` or `$('.elem').psly(options)`\n  $.fn.parsley = $.fn.psly = function (options) {\n    if (this.length > 1) {\n      var instances = [];\n\n      this.each(function () {\n        instances.push($(this).parsley(options));\n      });\n\n      return instances;\n    }\n\n    // Return undefined if applied to non existing DOM element\n    if (this.length == 0) {\n      return;\n    }\n\n    return new Factory(this[0], options);\n  };\n\n  // ### Field and Form extension\n  // Ensure the extension is now defined if it wasn't previously\n  if ('undefined' === typeof window.ParsleyExtend)\n    window.ParsleyExtend = {};\n\n  // ### Parsley config\n  // Inherit from ParsleyDefault, and copy over any existing values\n  Parsley.options = Object.assign(Utils.objectCreate(Defaults), window.ParsleyConfig);\n  window.ParsleyConfig = Parsley.options; // Old way of accessing global options\n\n  // ### Globals\n  window.Parsley = window.psly = Parsley;\n  Parsley.Utils = Utils;\n  window.ParsleyUtils = {};\n  $.each(Utils, (key, value) => {\n    if ('function' === typeof value) {\n      window.ParsleyUtils[key] = (...args) => {\n        Utils.warnOnce('Accessing `window.ParsleyUtils` is deprecated. Use `window.Parsley.Utils` instead.');\n        return Utils[key](...args);\n      };\n    }\n  });\n\n  // ### Define methods that forward to the registry, and deprecate all access except through window.Parsley\n  var registry = window.Parsley._validatorRegistry = new ValidatorRegistry(window.ParsleyConfig.validators, window.ParsleyConfig.i18n);\n  window.ParsleyValidator = {};\n  $.each('setLocale addCatalog addMessage addMessages getErrorMessage formatMessage addValidator updateValidator removeValidator hasValidator'.split(' '), function (i, method) {\n    window.Parsley[method] = (...args) => registry[method](...args);\n    window.ParsleyValidator[method] = function () {\n      Utils.warnOnce(`Accessing the method '${method}' through Validator is deprecated. Simply call 'window.Parsley.${method}(...)'`);\n      return window.Parsley[method](...arguments);\n    };\n  });\n\n  // ### UI\n  // Deprecated global object\n  window.Parsley.UI = UI;\n  window.ParsleyUI = {\n    removeError: function (instance, name, doNotUpdateClass) {\n      var updateClass = true !== doNotUpdateClass;\n      Utils.warnOnce(`Accessing UI is deprecated. Call 'removeError' on the instance directly. Please comment in issue 1073 as to your need to call this method.`);\n      return instance.removeError(name, {updateClass});\n    },\n    getErrorsMessages: function (instance) {\n      Utils.warnOnce(`Accessing UI is deprecated. Call 'getErrorsMessages' on the instance directly.`);\n      return instance.getErrorsMessages();\n    }\n  };\n  $.each('addError updateError'.split(' '), function (i, method) {\n    window.ParsleyUI[method] = function (instance, name, message, assert, doNotUpdateClass) {\n      var updateClass = true !== doNotUpdateClass;\n      Utils.warnOnce(`Accessing UI is deprecated. Call '${method}' on the instance directly. Please comment in issue 1073 as to your need to call this method.`);\n      return instance[method](name, {message, assert, updateClass});\n    };\n  });\n\n  // ### PARSLEY auto-binding\n  // Prevent it by setting `ParsleyConfig.autoBind` to `false`\n  if (false !== window.ParsleyConfig.autoBind) {\n    $(function () {\n      // Works only on `data-parsley-validate`.\n      if ($('[data-parsley-validate]').length)\n        $('[data-parsley-validate]').parsley();\n    });\n  }\n\n  var o = $({});\n  var deprecated = function () {\n    Utils.warnOnce(\"Parsley's pubsub module is deprecated; use the 'on' and 'off' methods on parsley instances or window.Parsley\");\n  };\n\n  // Returns an event handler that calls `fn` with the arguments it expects\n  function adapt(fn, context) {\n    // Store to allow unbinding\n    if (!fn.parsleyAdaptedCallback) {\n      fn.parsleyAdaptedCallback = function () {\n        var args = Array.prototype.slice.call(arguments, 0);\n        args.unshift(this);\n        fn.apply(context || o, args);\n      };\n    }\n    return fn.parsleyAdaptedCallback;\n  }\n\n  var eventPrefix = 'parsley:';\n  // Converts 'parsley:form:validate' into 'form:validate'\n  function eventName(name) {\n    if (name.lastIndexOf(eventPrefix, 0) === 0)\n      return name.substr(eventPrefix.length);\n    return name;\n  }\n\n  // $.listen is deprecated. Use Parsley.on instead.\n  $.listen = function (name, callback) {\n    var context;\n    deprecated();\n    if ('object' === typeof arguments[1] && 'function' === typeof arguments[2]) {\n      context = arguments[1];\n      callback = arguments[2];\n    }\n\n    if ('function' !== typeof callback)\n      throw new Error('Wrong parameters');\n\n    window.Parsley.on(eventName(name), adapt(callback, context));\n  };\n\n  $.listenTo = function (instance, name, fn) {\n    deprecated();\n    if (!(instance instanceof parsley_field) && !(instance instanceof Form))\n      throw new Error('Must give Parsley instance');\n\n    if ('string' !== typeof name || 'function' !== typeof fn)\n      throw new Error('Wrong parameters');\n\n    instance.on(eventName(name), adapt(fn));\n  };\n\n  $.unsubscribe = function (name, fn) {\n    deprecated();\n    if ('string' !== typeof name || 'function' !== typeof fn)\n      throw new Error('Wrong arguments');\n    window.Parsley.off(eventName(name), fn.parsleyAdaptedCallback);\n  };\n\n  $.unsubscribeTo = function (instance, name) {\n    deprecated();\n    if (!(instance instanceof parsley_field) && !(instance instanceof Form))\n      throw new Error('Must give Parsley instance');\n    instance.off(eventName(name));\n  };\n\n  $.unsubscribeAll = function (name) {\n    deprecated();\n    window.Parsley.off(eventName(name));\n    $('form,input,textarea,select').each(function () {\n      var instance = $(this).data('Parsley');\n      if (instance) {\n        instance.off(eventName(name));\n      }\n    });\n  };\n\n  // $.emit is deprecated. Use jQuery events instead.\n  $.emit = function (name, instance) {\n    deprecated();\n    var instanceGiven = (instance instanceof parsley_field) || (instance instanceof Form);\n    var args = Array.prototype.slice.call(arguments, instanceGiven ? 2 : 1);\n    args.unshift(eventName(name));\n    if (!instanceGiven) {\n      instance = window.Parsley;\n    }\n    instance.trigger(...args);\n  };\n\n  var pubsub = {};\n\n  $.extend(true, Parsley, {\n    asyncValidators: {\n      'default': {\n        fn: function (xhr) {\n          // By default, only status 2xx are deemed successful.\n          // Note: we use status instead of state() because responses with status 200\n          // but invalid messages (e.g. an empty body for content type set to JSON) will\n          // result in state() === 'rejected'.\n          return xhr.status >= 200 && xhr.status < 300;\n        },\n        url: false\n      },\n      reverse: {\n        fn: function (xhr) {\n          // If reverse option is set, a failing ajax request is considered successful\n          return xhr.status < 200 || xhr.status >= 300;\n        },\n        url: false\n      }\n    },\n\n    addAsyncValidator: function (name, fn, url, options) {\n      Parsley.asyncValidators[name] = {\n        fn: fn,\n        url: url || false,\n        options: options || {}\n      };\n\n      return this;\n    }\n\n  });\n\n  Parsley.addValidator('remote', {\n    requirementType: {\n      '': 'string',\n      'validator': 'string',\n      'reverse': 'boolean',\n      'options': 'object'\n    },\n\n    validateString: function (value, url, options, instance) {\n      var data = {};\n      var ajaxOptions;\n      var csr;\n      var validator = options.validator || (true === options.reverse ? 'reverse' : 'default');\n\n      if ('undefined' === typeof Parsley.asyncValidators[validator])\n        throw new Error('Calling an undefined async validator: `' + validator + '`');\n\n      url = Parsley.asyncValidators[validator].url || url;\n\n      // Fill current value\n      if (url.indexOf('{value}') > -1) {\n        url = url.replace('{value}', encodeURIComponent(value));\n      } else {\n        data[instance.element.getAttribute('name') || instance.element.getAttribute('id')] = value;\n      }\n\n      // Merge options passed in from the function with the ones in the attribute\n      var remoteOptions = $.extend(true, options.options || {} , Parsley.asyncValidators[validator].options);\n\n      // All `$.ajax(options)` could be overridden or extended directly from DOM in `data-parsley-remote-options`\n      ajaxOptions = $.extend(true, {}, {\n        url: url,\n        data: data,\n        type: 'GET'\n      }, remoteOptions);\n\n      // Generate store key based on ajax options\n      instance.trigger('field:ajaxoptions', instance, ajaxOptions);\n\n      csr = $.param(ajaxOptions);\n\n      // Initialise querry cache\n      if ('undefined' === typeof Parsley._remoteCache)\n        Parsley._remoteCache = {};\n\n      // Try to retrieve stored xhr\n      var xhr = Parsley._remoteCache[csr] = Parsley._remoteCache[csr] || $.ajax(ajaxOptions);\n\n      var handleXhr = function () {\n        var result = Parsley.asyncValidators[validator].fn.call(instance, xhr, url, options);\n        if (!result) // Map falsy results to rejected promise\n          result = $.Deferred().reject();\n        return $.when(result);\n      };\n\n      return xhr.then(handleXhr, handleXhr);\n    },\n\n    priority: -1\n  });\n\n  Parsley.on('form:submit', function () {\n    Parsley._remoteCache = {};\n  });\n\n  Base.prototype.addAsyncValidator = function () {\n    Utils.warnOnce('Accessing the method `addAsyncValidator` through an instance is deprecated. Simply call `Parsley.addAsyncValidator(...)`');\n    return Parsley.addAsyncValidator(...arguments);\n  };\n\n  // This is included with the Parsley library itself,\n  // thus there is no use in adding it to your project.\n  Parsley.addMessages('en', {\n    defaultMessage: \"This value seems to be invalid.\",\n    type: {\n      email:        \"This value should be a valid email.\",\n      url:          \"This value should be a valid url.\",\n      number:       \"This value should be a valid number.\",\n      integer:      \"This value should be a valid integer.\",\n      digits:       \"This value should be digits.\",\n      alphanum:     \"This value should be alphanumeric.\"\n    },\n    notblank:       \"This value should not be blank.\",\n    required:       \"This value is required.\",\n    pattern:        \"This value seems to be invalid.\",\n    min:            \"This value should be greater than or equal to %s.\",\n    max:            \"This value should be lower than or equal to %s.\",\n    range:          \"This value should be between %s and %s.\",\n    minlength:      \"This value is too short. It should have %s characters or more.\",\n    maxlength:      \"This value is too long. It should have %s characters or fewer.\",\n    length:         \"This value length is invalid. It should be between %s and %s characters long.\",\n    mincheck:       \"You must select at least %s choices.\",\n    maxcheck:       \"You must select %s choices or fewer.\",\n    check:          \"You must select between %s and %s choices.\",\n    equalto:        \"This value should be the same.\"\n  });\n\n  Parsley.setLocale('en');\n\n  /**\n   * inputevent - Alleviate browser bugs for input events\n   * https://github.com/marcandre/inputevent\n   * @version v0.0.3 - (built Thu, Apr 14th 2016, 5:58 pm)\n   * @author Marc-Andre Lafortune <github@marc-andre.ca>\n   * @license MIT\n   */\n\n  function InputEvent() {\n    let globals = window || global;\n\n    // Slightly odd way construct our object. This way methods are force bound.\n    // Used to test for duplicate library.\n    Object.assign(this, {\n\n      // For browsers that do not support isTrusted, assumes event is native.\n      isNativeEvent: evt => {\n        return evt.originalEvent && evt.originalEvent.isTrusted !== false;\n      },\n\n      fakeInputEvent: evt => {\n        if (this.isNativeEvent(evt)) {\n          $(evt.target).trigger('input');\n        }\n      },\n\n      misbehaves: evt => {\n        if (this.isNativeEvent(evt)) {\n          this.behavesOk(evt);\n          $(document)\n            .on('change.inputevent', evt.data.selector, this.fakeInputEvent);\n          this.fakeInputEvent(evt);\n        }\n      },\n\n      behavesOk: evt => {\n        if (this.isNativeEvent(evt)) {\n          $(document) // Simply unbinds the testing handler\n            .off('input.inputevent', evt.data.selector, this.behavesOk)\n            .off('change.inputevent', evt.data.selector, this.misbehaves);\n        }\n      },\n\n      // Bind the testing handlers\n      install: () => {\n        if (globals.inputEventPatched) {\n          return;\n        }\n        globals.inputEventPatched = '0.0.3';\n        for (let selector of ['select', 'input[type=\"checkbox\"]', 'input[type=\"radio\"]', 'input[type=\"file\"]']) {\n          $(document)\n            .on('input.inputevent', selector, {selector}, this.behavesOk)\n            .on('change.inputevent', selector, {selector}, this.misbehaves);\n        }\n      },\n\n      uninstall: () => {\n        delete globals.inputEventPatched;\n        $(document).off('.inputevent');\n      }\n\n    });\n  };\n\n  var inputevent = new InputEvent();\n\n  inputevent.install();\n\n  var parsley = Parsley;\n\n  return parsley;\n\n}));\n","import $ from 'jquery';\n\nvar globalID = 1;\nvar pastWarnings = {};\n\nvar Utils = {\n  // Parsley DOM-API\n  // returns object from dom attributes and values\n  attr: function (element, namespace, obj) {\n    var i;\n    var attribute;\n    var attributes;\n    var regex = new RegExp('^' + namespace, 'i');\n\n    if ('undefined' === typeof obj)\n      obj = {};\n    else {\n      // Clear all own properties. This won't affect prototype's values\n      for (i in obj) {\n        if (obj.hasOwnProperty(i))\n          delete obj[i];\n      }\n    }\n\n    if (!element)\n      return obj;\n\n    attributes = element.attributes;\n    for (i = attributes.length; i--; ) {\n      attribute = attributes[i];\n\n      if (attribute && attribute.specified && regex.test(attribute.name)) {\n        obj[this.camelize(attribute.name.slice(namespace.length))] = this.deserializeValue(attribute.value);\n      }\n    }\n\n    return obj;\n  },\n\n  checkAttr: function (element, namespace, checkAttr) {\n    return element.hasAttribute(namespace + checkAttr);\n  },\n\n  setAttr: function (element, namespace, attr, value) {\n    element.setAttribute(this.dasherize(namespace + attr), String(value));\n  },\n\n  getType: function(element) {\n    return element.getAttribute('type') || 'text';\n  },\n\n  generateID: function () {\n    return '' + globalID++;\n  },\n\n  /** Third party functions **/\n  deserializeValue: function (value) {\n    var num;\n\n    try {\n      return value ?\n        value == \"true\" ||\n        (value == \"false\" ? false :\n        value == \"null\" ? null :\n        !isNaN(num = Number(value)) ? num :\n        /^[\\[\\{]/.test(value) ? JSON.parse(value) :\n        value)\n        : value;\n    } catch (e) { return value; }\n  },\n\n  // Zepto camelize function\n  camelize: function (str) {\n    return str.replace(/-+(.)?/g, function (match, chr) {\n      return chr ? chr.toUpperCase() : '';\n    });\n  },\n\n  // Zepto dasherize function\n  dasherize: function (str) {\n    return str.replace(/::/g, '/')\n      .replace(/([A-Z]+)([A-Z][a-z])/g, '$1_$2')\n      .replace(/([a-z\\d])([A-Z])/g, '$1_$2')\n      .replace(/_/g, '-')\n      .toLowerCase();\n  },\n\n  warn: function () {\n    if (window.console && 'function' === typeof window.console.warn)\n      window.console.warn(...arguments);\n  },\n\n  warnOnce: function(msg) {\n    if (!pastWarnings[msg]) {\n      pastWarnings[msg] = true;\n      this.warn(...arguments);\n    }\n  },\n\n  _resetWarnings: function () {\n    pastWarnings = {};\n  },\n\n  trimString: function(string) {\n    return string.replace(/^\\s+|\\s+$/g, '');\n  },\n\n  parse: {\n    date: function(string) {\n      let parsed = string.match(/^(\\d{4,})-(\\d\\d)-(\\d\\d)$/);\n      if (!parsed)\n        return null;\n      let [_, year, month, day] = parsed.map(x => parseInt(x, 10));\n      let date = new Date(year, month - 1, day);\n      if (date.getFullYear() !== year || date.getMonth() + 1 !== month || date.getDate() !== day)\n        return null;\n      return date;\n    },\n    string: function(string) {\n      return string;\n    },\n    integer: function(string) {\n      if (isNaN(string))\n        return null;\n      return parseInt(string, 10);\n    },\n    number: function(string) {\n      if (isNaN(string))\n        throw null;\n      return parseFloat(string);\n    },\n    'boolean': function _boolean(string) {\n      return !(/^\\s*false\\s*$/i.test(string));\n    },\n    object: function(string) {\n      return Utils.deserializeValue(string);\n    },\n    regexp: function(regexp) {\n      var flags = '';\n\n      // Test if RegExp is literal, if not, nothing to be done, otherwise, we need to isolate flags and pattern\n      if (/^\\/.*\\/(?:[gimy]*)$/.test(regexp)) {\n        // Replace the regexp literal string with the first match group: ([gimy]*)\n        // If no flag is present, this will be a blank string\n        flags = regexp.replace(/.*\\/([gimy]*)$/, '$1');\n        // Again, replace the regexp literal string with the first match group:\n        // everything excluding the opening and closing slashes and the flags\n        regexp = regexp.replace(new RegExp('^/(.*?)/' + flags + '$'), '$1');\n      } else {\n        // Anchor regexp:\n        regexp = '^' + regexp + '$';\n      }\n      return new RegExp(regexp, flags);\n    }\n  },\n\n  parseRequirement: function(requirementType, string) {\n    var converter = this.parse[requirementType || 'string'];\n    if (!converter)\n      throw 'Unknown requirement specification: \"' + requirementType + '\"';\n    let converted = converter(string);\n    if (converted === null)\n      throw `Requirement is not a ${requirementType}: \"${string}\"`;\n    return converted;\n  },\n\n  namespaceEvents: function(events, namespace) {\n    events = this.trimString(events || '').split(/\\s+/);\n    if (!events[0])\n      return '';\n    return $.map(events, evt => `${evt}.${namespace}`).join(' ');\n  },\n\n  difference: function(array, remove) {\n    // This is O(N^2), should be optimized\n    let result = [];\n    $.each(array, (_, elem) => {\n      if (remove.indexOf(elem) == -1)\n        result.push(elem);\n    });\n    return result;\n  },\n\n  // Alter-ego to native Promise.all, but for jQuery\n  all: function(promises) {\n    // jQuery treats $.when() and $.when(singlePromise) differently; let's avoid that and add spurious elements\n    return $.when(...promises, 42, 42);\n  },\n\n  // Object.create polyfill, see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/create#Polyfill\n  objectCreate: Object.create || (function () {\n    var Object = function () {};\n    return function (prototype) {\n      if (arguments.length > 1) {\n        throw Error('Second argument not supported');\n      }\n      if (typeof prototype != 'object') {\n        throw TypeError('Argument must be an object');\n      }\n      Object.prototype = prototype;\n      var result = new Object();\n      Object.prototype = null;\n      return result;\n    };\n  })(),\n\n  _SubmitSelector: 'input[type=\"submit\"], button:submit'\n};\n\nexport default Utils;\n","// All these options could be overriden and specified directly in DOM using\n// `data-parsley-` default DOM-API\n// eg: `inputs` can be set in DOM using `data-parsley-inputs=\"input, textarea\"`\n// eg: `data-parsley-stop-on-first-failing-constraint=\"false\"`\n\nvar Defaults = {\n  // ### General\n\n  // Default data-namespace for DOM API\n  namespace: 'data-parsley-',\n\n  // Supported inputs by default\n  inputs: 'input, textarea, select',\n\n  // Excluded inputs by default\n  excluded: 'input[type=button], input[type=submit], input[type=reset], input[type=hidden]',\n\n  // Stop validating field on highest priority failing constraint\n  priorityEnabled: true,\n\n  // ### Field only\n\n  // identifier used to group together inputs (e.g. radio buttons...)\n  multiple: null,\n\n  // identifier (or array of identifiers) used to validate only a select group of inputs\n  group: null,\n\n  // ### UI\n  // Enable\\Disable error messages\n  uiEnabled: true,\n\n  // Key events threshold before validation\n  validationThreshold: 3,\n\n  // Focused field on form validation error. 'first'|'last'|'none'\n  focus: 'first',\n\n  // event(s) that will trigger validation before first failure. eg: `input`...\n  trigger: false,\n\n  // event(s) that will trigger validation after first failure.\n  triggerAfterFailure: 'input',\n\n  // Class that would be added on every failing validation Parsley field\n  errorClass: 'parsley-error',\n\n  // Same for success validation\n  successClass: 'parsley-success',\n\n  // Return the `$element` that will receive these above success or error classes\n  // Could also be (and given directly from DOM) a valid selector like `'#div'`\n  classHandler: function (Field) {},\n\n  // Return the `$element` where errors will be appended\n  // Could also be (and given directly from DOM) a valid selector like `'#div'`\n  errorsContainer: function (Field) {},\n\n  // ul elem that would receive errors' list\n  errorsWrapper: '<ul class=\"parsley-errors-list\"></ul>',\n\n  // li elem that would receive error message\n  errorTemplate: '<li></li>'\n};\n\nexport default Defaults;\n","import $ from 'jquery';\nimport Utils from './utils';\n\nvar Base = function () {\n  this.__id__ = Utils.generateID();\n};\n\nBase.prototype = {\n  asyncSupport: true, // Deprecated\n\n  _pipeAccordingToValidationResult: function () {\n    var pipe = () => {\n      var r = $.Deferred();\n      if (true !== this.validationResult)\n        r.reject();\n      return r.resolve().promise();\n    };\n    return [pipe, pipe];\n  },\n\n  actualizeOptions: function () {\n    Utils.attr(this.element, this.options.namespace, this.domOptions);\n    if (this.parent && this.parent.actualizeOptions)\n      this.parent.actualizeOptions();\n    return this;\n  },\n\n  _resetOptions: function (initOptions) {\n    this.domOptions = Utils.objectCreate(this.parent.options);\n    this.options = Utils.objectCreate(this.domOptions);\n    // Shallow copy of ownProperties of initOptions:\n    for (var i in initOptions) {\n      if (initOptions.hasOwnProperty(i))\n        this.options[i] = initOptions[i];\n    }\n    this.actualizeOptions();\n  },\n\n  _listeners: null,\n\n  // Register a callback for the given event name\n  // Callback is called with context as the first argument and the `this`\n  // The context is the current parsley instance, or window.Parsley if global\n  // A return value of `false` will interrupt the calls\n  on: function (name, fn) {\n    this._listeners = this._listeners || {};\n    var queue = this._listeners[name] = this._listeners[name] || [];\n    queue.push(fn);\n\n    return this;\n  },\n\n  // Deprecated. Use `on` instead\n  subscribe: function(name, fn) {\n    $.listenTo(this, name.toLowerCase(), fn);\n  },\n\n  // Unregister a callback (or all if none is given) for the given event name\n  off: function (name, fn) {\n    var queue = this._listeners && this._listeners[name];\n    if (queue) {\n      if (!fn) {\n        delete this._listeners[name];\n      } else {\n        for (var i = queue.length; i--; )\n          if (queue[i] === fn)\n            queue.splice(i, 1);\n      }\n    }\n    return this;\n  },\n\n  // Deprecated. Use `off`\n  unsubscribe: function(name, fn) {\n    $.unsubscribeTo(this, name.toLowerCase());\n  },\n\n  // Trigger an event of the given name\n  // A return value of `false` interrupts the callback chain\n  // Returns false if execution was interrupted\n  trigger: function (name, target, extraArg) {\n    target = target || this;\n    var queue = this._listeners && this._listeners[name];\n    var result;\n    var parentResult;\n    if (queue) {\n      for (var i = queue.length; i--; ) {\n        result = queue[i].call(target, target, extraArg);\n        if (result === false) return result;\n      }\n    }\n    if (this.parent) {\n      return this.parent.trigger(name, target, extraArg);\n    }\n    return true;\n  },\n\n  asyncIsValid: function (group, force) {\n    Utils.warnOnce(\"asyncIsValid is deprecated; please use whenValid instead\");\n    return this.whenValid({group, force});\n  },\n\n  _findRelated: function () {\n    return this.options.multiple ?\n      $(this.parent.element.querySelectorAll(`[${this.options.namespace}multiple=\"${this.options.multiple}\"]`))\n    : this.$element;\n  }\n};\n\nexport default Base;\n","import $ from 'jquery';\nimport Utils from './utils';\n\nvar convertArrayRequirement = function(string, length) {\n  var m = string.match(/^\\s*\\[(.*)\\]\\s*$/);\n  if (!m)\n    throw 'Requirement is not an array: \"' + string + '\"';\n  var values = m[1].split(',').map(Utils.trimString);\n  if (values.length !== length)\n    throw 'Requirement has ' + values.length + ' values when ' + length + ' are needed';\n  return values;\n};\n\nvar convertExtraOptionRequirement = function(requirementSpec, string, extraOptionReader) {\n  var main = null;\n  var extra = {};\n  for (var key in requirementSpec) {\n    if (key) {\n      var value = extraOptionReader(key);\n      if ('string' === typeof value)\n        value = Utils.parseRequirement(requirementSpec[key], value);\n      extra[key] = value;\n    } else {\n      main = Utils.parseRequirement(requirementSpec[key], string);\n    }\n  }\n  return [main, extra];\n};\n\n// A Validator needs to implement the methods `validate` and `parseRequirements`\n\nvar Validator = function(spec) {\n  $.extend(true, this, spec);\n};\n\nValidator.prototype = {\n  // Returns `true` iff the given `value` is valid according the given requirements.\n  validate: function(value, requirementFirstArg) {\n    if (this.fn) { // Legacy style validator\n\n      if (arguments.length > 3)  // If more args then value, requirement, instance...\n        requirementFirstArg = [].slice.call(arguments, 1, -1);  // Skip first arg (value) and last (instance), combining the rest\n      return this.fn(value, requirementFirstArg);\n    }\n\n    if (Array.isArray(value)) {\n      if (!this.validateMultiple)\n        throw 'Validator `' + this.name + '` does not handle multiple values';\n      return this.validateMultiple(...arguments);\n    } else {\n      let instance = arguments[arguments.length - 1];\n      if (this.validateDate && instance._isDateInput()) {\n        arguments[0] = Utils.parse.date(arguments[0]);\n        if (arguments[0] === null)\n          return false;\n        return this.validateDate(...arguments);\n      }\n      if (this.validateNumber) {\n        if (isNaN(value))\n          return false;\n        arguments[0] = parseFloat(arguments[0]);\n        return this.validateNumber(...arguments);\n      }\n      if (this.validateString) {\n        return this.validateString(...arguments);\n      }\n      throw 'Validator `' + this.name + '` only handles multiple values';\n    }\n  },\n\n  // Parses `requirements` into an array of arguments,\n  // according to `this.requirementType`\n  parseRequirements: function(requirements, extraOptionReader) {\n    if ('string' !== typeof requirements) {\n      // Assume requirement already parsed\n      // but make sure we return an array\n      return Array.isArray(requirements) ? requirements : [requirements];\n    }\n    var type = this.requirementType;\n    if (Array.isArray(type)) {\n      var values = convertArrayRequirement(requirements, type.length);\n      for (var i = 0; i < values.length; i++)\n        values[i] = Utils.parseRequirement(type[i], values[i]);\n      return values;\n    } else if ($.isPlainObject(type)) {\n      return convertExtraOptionRequirement(type, requirements, extraOptionReader);\n    } else {\n      return [Utils.parseRequirement(type, requirements)];\n    }\n  },\n  // Defaults:\n  requirementType: 'string',\n\n  priority: 2\n\n};\n\nexport default Validator;\n","import $ from 'jquery';\nimport Utils from './utils';\nimport Defaults from './defaults';\nimport Validator from './validator';\n\nvar ValidatorRegistry = function (validators, catalog) {\n  this.__class__ = 'ValidatorRegistry';\n\n  // Default Parsley locale is en\n  this.locale = 'en';\n\n  this.init(validators || {}, catalog || {});\n};\n\nvar typeTesters =  {\n  email: /^((([a-zA-Z]|\\d|[!#\\$%&'\\*\\+\\-\\/=\\?\\^_`{\\|}~]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])+(\\.([a-zA-Z]|\\d|[!#\\$%&'\\*\\+\\-\\/=\\?\\^_`{\\|}~]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])+)*)|((\\x22)((((\\x20|\\x09)*(\\x0d\\x0a))?(\\x20|\\x09)+)?(([\\x01-\\x08\\x0b\\x0c\\x0e-\\x1f\\x7f]|\\x21|[\\x23-\\x5b]|[\\x5d-\\x7e]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])|(\\\\([\\x01-\\x09\\x0b\\x0c\\x0d-\\x7f]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF]))))*(((\\x20|\\x09)*(\\x0d\\x0a))?(\\x20|\\x09)+)?(\\x22)))@((([a-zA-Z]|\\d|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])|(([a-zA-Z]|\\d|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])([a-zA-Z]|\\d|-|_|~|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])*([a-zA-Z]|\\d|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])))\\.)+(([a-zA-Z]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])|(([a-zA-Z]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])([a-zA-Z]|\\d|-|_|~|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])*([a-zA-Z]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])))$/,\n\n  // Follow https://www.w3.org/TR/html5/infrastructure.html#floating-point-numbers\n  number: /^-?(\\d*\\.)?\\d+(e[-+]?\\d+)?$/i,\n\n  integer: /^-?\\d+$/,\n\n  digits: /^\\d+$/,\n\n  alphanum: /^\\w+$/i,\n\n  date: {\n    test: value => Utils.parse.date(value) !== null\n  },\n\n  url: new RegExp(\n      \"^\" +\n        // protocol identifier\n        \"(?:(?:https?|ftp)://)?\" + // ** mod: make scheme optional\n        // user:pass authentication\n        \"(?:\\\\S+(?::\\\\S*)?@)?\" +\n        \"(?:\" +\n          // IP address exclusion\n          // private & local networks\n          // \"(?!(?:10|127)(?:\\\\.\\\\d{1,3}){3})\" +   // ** mod: allow local networks\n          // \"(?!(?:169\\\\.254|192\\\\.168)(?:\\\\.\\\\d{1,3}){2})\" +  // ** mod: allow local networks\n          // \"(?!172\\\\.(?:1[6-9]|2\\\\d|3[0-1])(?:\\\\.\\\\d{1,3}){2})\" +  // ** mod: allow local networks\n          // IP address dotted notation octets\n          // excludes loopback network 0.0.0.0\n          // excludes reserved space >= 224.0.0.0\n          // excludes network & broacast addresses\n          // (first & last IP address of each class)\n          \"(?:[1-9]\\\\d?|1\\\\d\\\\d|2[01]\\\\d|22[0-3])\" +\n          \"(?:\\\\.(?:1?\\\\d{1,2}|2[0-4]\\\\d|25[0-5])){2}\" +\n          \"(?:\\\\.(?:[1-9]\\\\d?|1\\\\d\\\\d|2[0-4]\\\\d|25[0-4]))\" +\n        \"|\" +\n          // host name\n          \"(?:(?:[a-zA-Z\\\\u00a1-\\\\uffff0-9]-*)*[a-zA-Z\\\\u00a1-\\\\uffff0-9]+)\" +\n          // domain name\n          \"(?:\\\\.(?:[a-zA-Z\\\\u00a1-\\\\uffff0-9]-*)*[a-zA-Z\\\\u00a1-\\\\uffff0-9]+)*\" +\n          // TLD identifier\n          \"(?:\\\\.(?:[a-zA-Z\\\\u00a1-\\\\uffff]{2,}))\" +\n        \")\" +\n        // port number\n        \"(?::\\\\d{2,5})?\" +\n        // resource path\n        \"(?:/\\\\S*)?\" +\n      \"$\"\n    )\n};\ntypeTesters.range = typeTesters.number;\n\n// See http://stackoverflow.com/a/10454560/8279\nvar decimalPlaces = num => {\n  var match = ('' + num).match(/(?:\\.(\\d+))?(?:[eE]([+-]?\\d+))?$/);\n  if (!match) { return 0; }\n  return Math.max(\n       0,\n       // Number of digits right of decimal point.\n       (match[1] ? match[1].length : 0) -\n       // Adjust for scientific notation.\n       (match[2] ? +match[2] : 0));\n};\n\n// parseArguments('number', ['1', '2']) => [1, 2]\nlet parseArguments = (type, args) => args.map(Utils.parse[type]);\n// operatorToValidator returns a validating function for an operator function, applied to the given type\nlet operatorToValidator = (type, operator) => {\n  return (value, ...requirementsAndInput) => {\n    requirementsAndInput.pop(); // Get rid of `input` argument\n    if (!value)\n      return true;  // Builtin validators all accept empty strings, except `required` of course\n    return operator(value, ...parseArguments(type, requirementsAndInput));\n  };\n};\n\nlet comparisonOperator = operator => ({\n  validateDate: operatorToValidator('date', operator),\n  validateNumber: operatorToValidator('number', operator),\n  requirementType: operator.length <= 2 ? 'string' : ['string', 'string'], // Support operators with a 1 or 2 requirement(s)\n  priority: 30\n});\n\nValidatorRegistry.prototype = {\n  init: function (validators, catalog) {\n    this.catalog = catalog;\n    // Copy prototype's validators:\n    this.validators = Object.assign({}, this.validators);\n\n    for (var name in validators)\n      this.addValidator(name, validators[name].fn, validators[name].priority);\n\n    window.Parsley.trigger('parsley:validator:init');\n  },\n\n  // Set new messages locale if we have dictionary loaded in ParsleyConfig.i18n\n  setLocale: function (locale) {\n    if ('undefined' === typeof this.catalog[locale])\n      throw new Error(locale + ' is not available in the catalog');\n\n    this.locale = locale;\n\n    return this;\n  },\n\n  // Add a new messages catalog for a given locale. Set locale for this catalog if set === `true`\n  addCatalog: function (locale, messages, set) {\n    if ('object' === typeof messages)\n      this.catalog[locale] = messages;\n\n    if (true === set)\n      return this.setLocale(locale);\n\n    return this;\n  },\n\n  // Add a specific message for a given constraint in a given locale\n  addMessage: function (locale, name, message) {\n    if ('undefined' === typeof this.catalog[locale])\n      this.catalog[locale] = {};\n\n    this.catalog[locale][name] = message;\n\n    return this;\n  },\n\n  // Add messages for a given locale\n  addMessages: function (locale, nameMessageObject) {\n    for (var name in nameMessageObject)\n      this.addMessage(locale, name, nameMessageObject[name]);\n\n    return this;\n  },\n\n  // Add a new validator\n  //\n  //    addValidator('custom', {\n  //        requirementType: ['integer', 'integer'],\n  //        validateString: function(value, from, to) {},\n  //        priority: 22,\n  //        messages: {\n  //          en: \"Hey, that's no good\",\n  //          fr: \"Aye aye, pas bon du tout\",\n  //        }\n  //    })\n  //\n  // Old API was addValidator(name, function, priority)\n  //\n  addValidator: function (name, arg1, arg2) {\n    if (this.validators[name])\n      Utils.warn('Validator \"' + name + '\" is already defined.');\n    else if (Defaults.hasOwnProperty(name)) {\n      Utils.warn('\"' + name + '\" is a restricted keyword and is not a valid validator name.');\n      return;\n    }\n    return this._setValidator(...arguments);\n  },\n\n  hasValidator: function (name) {\n    return !!this.validators[name];\n  },\n\n  updateValidator: function (name, arg1, arg2) {\n    if (!this.validators[name]) {\n      Utils.warn('Validator \"' + name + '\" is not already defined.');\n      return this.addValidator(...arguments);\n    }\n    return this._setValidator(...arguments);\n  },\n\n  removeValidator: function (name) {\n    if (!this.validators[name])\n      Utils.warn('Validator \"' + name + '\" is not defined.');\n\n    delete this.validators[name];\n\n    return this;\n  },\n\n  _setValidator: function (name, validator, priority) {\n    if ('object' !== typeof validator) {\n      // Old style validator, with `fn` and `priority`\n      validator = {\n        fn: validator,\n        priority: priority\n      };\n    }\n    if (!validator.validate) {\n      validator = new Validator(validator);\n    }\n    this.validators[name] = validator;\n\n    for (var locale in validator.messages || {})\n      this.addMessage(locale, name, validator.messages[locale]);\n\n    return this;\n  },\n\n  getErrorMessage: function (constraint) {\n    var message;\n\n    // Type constraints are a bit different, we have to match their requirements too to find right error message\n    if ('type' === constraint.name) {\n      var typeMessages = this.catalog[this.locale][constraint.name] || {};\n      message = typeMessages[constraint.requirements];\n    } else\n      message = this.formatMessage(this.catalog[this.locale][constraint.name], constraint.requirements);\n\n    return message || this.catalog[this.locale].defaultMessage || this.catalog.en.defaultMessage;\n  },\n\n  // Kind of light `sprintf()` implementation\n  formatMessage: function (string, parameters) {\n    if ('object' === typeof parameters) {\n      for (var i in parameters)\n        string = this.formatMessage(string, parameters[i]);\n\n      return string;\n    }\n\n    return 'string' === typeof string ? string.replace(/%s/i, parameters) : '';\n  },\n\n  // Here is the Parsley default validators list.\n  // A validator is an object with the following key values:\n  //  - priority: an integer\n  //  - requirement: 'string' (default), 'integer', 'number', 'regexp' or an Array of these\n  //  - validateString, validateMultiple, validateNumber: functions returning `true`, `false` or a promise\n  // Alternatively, a validator can be a function that returns such an object\n  //\n  validators: {\n    notblank: {\n      validateString: function(value) {\n        return /\\S/.test(value);\n      },\n      priority: 2\n    },\n    required: {\n      validateMultiple: function(values) {\n        return values.length > 0;\n      },\n      validateString: function(value) {\n        return /\\S/.test(value);\n      },\n      priority: 512\n    },\n    type: {\n      validateString: function(value, type, {step = 'any', base = 0} = {}) {\n        var tester = typeTesters[type];\n        if (!tester) {\n          throw new Error('validator type `' + type + '` is not supported');\n        }\n        if (!value)\n          return true;  // Builtin validators all accept empty strings, except `required` of course\n        if (!tester.test(value))\n          return false;\n        if ('number' === type) {\n          if (!/^any$/i.test(step || '')) {\n            var nb = Number(value);\n            var decimals = Math.max(decimalPlaces(step), decimalPlaces(base));\n            if (decimalPlaces(nb) > decimals) // Value can't have too many decimals\n              return false;\n            // Be careful of rounding errors by using integers.\n            var toInt = f => Math.round(f * Math.pow(10, decimals));\n            if ((toInt(nb) - toInt(base)) % toInt(step) != 0)\n              return false;\n          }\n        }\n        return true;\n      },\n      requirementType: {\n        '': 'string',\n        step: 'string',\n        base: 'number'\n      },\n      priority: 256\n    },\n    pattern: {\n      validateString: function(value, regexp) {\n        if (!value)\n          return true;  // Builtin validators all accept empty strings, except `required` of course\n        return regexp.test(value);\n      },\n      requirementType: 'regexp',\n      priority: 64\n    },\n    minlength: {\n      validateString: function (value, requirement) {\n        if (!value)\n          return true;  // Builtin validators all accept empty strings, except `required` of course\n        return value.length >= requirement;\n      },\n      requirementType: 'integer',\n      priority: 30\n    },\n    maxlength: {\n      validateString: function (value, requirement) {\n        return value.length <= requirement;\n      },\n      requirementType: 'integer',\n      priority: 30\n    },\n    length: {\n      validateString: function (value, min, max) {\n        if (!value)\n          return true;  // Builtin validators all accept empty strings, except `required` of course\n        return value.length >= min && value.length <= max;\n      },\n      requirementType: ['integer', 'integer'],\n      priority: 30\n    },\n    mincheck: {\n      validateMultiple: function (values, requirement) {\n        return values.length >= requirement;\n      },\n      requirementType: 'integer',\n      priority: 30\n    },\n    maxcheck: {\n      validateMultiple: function (values, requirement) {\n        return values.length <= requirement;\n      },\n      requirementType: 'integer',\n      priority: 30\n    },\n    check: {\n      validateMultiple: function (values, min, max) {\n        return values.length >= min && values.length <= max;\n      },\n      requirementType: ['integer', 'integer'],\n      priority: 30\n    },\n    min: comparisonOperator((value, requirement) => value >= requirement),\n    max: comparisonOperator((value, requirement) => value <= requirement),\n    range: comparisonOperator((value, min, max) => value >= min && value <= max),\n    equalto: {\n      validateString: function (value, refOrValue) {\n        if (!value)\n          return true;  // Builtin validators all accept empty strings, except `required` of course\n        var $reference = $(refOrValue);\n        if ($reference.length)\n          return value === $reference.val();\n        else\n          return value === refOrValue;\n      },\n      priority: 256\n    }\n  }\n};\n\nexport default ValidatorRegistry;\n","import $ from 'jquery';\nimport Utils from './utils';\n\nvar UI = {};\n\nvar diffResults = function (newResult, oldResult, deep) {\n  var added = [];\n  var kept = [];\n\n  for (var i = 0; i < newResult.length; i++) {\n    var found = false;\n\n    for (var j = 0; j < oldResult.length; j++)\n      if (newResult[i].assert.name === oldResult[j].assert.name) {\n        found = true;\n        break;\n      }\n\n    if (found)\n      kept.push(newResult[i]);\n    else\n      added.push(newResult[i]);\n  }\n\n  return {\n    kept: kept,\n    added: added,\n    removed: !deep ? diffResults(oldResult, newResult, true).added : []\n  };\n};\n\nUI.Form = {\n\n  _actualizeTriggers: function () {\n    this.$element.on('submit.Parsley', evt => { this.onSubmitValidate(evt); });\n    this.$element.on('click.Parsley', Utils._SubmitSelector, evt => { this.onSubmitButton(evt); });\n\n    // UI could be disabled\n    if (false === this.options.uiEnabled)\n      return;\n\n    this.element.setAttribute('novalidate', '');\n  },\n\n  focus: function () {\n    this._focusedField = null;\n\n    if (true === this.validationResult || 'none' === this.options.focus)\n      return null;\n\n    for (var i = 0; i < this.fields.length; i++) {\n      var field = this.fields[i];\n      if (true !== field.validationResult && field.validationResult.length > 0 && 'undefined' === typeof field.options.noFocus) {\n        this._focusedField = field.$element;\n        if ('first' === this.options.focus)\n          break;\n      }\n    }\n\n    if (null === this._focusedField)\n      return null;\n\n    return this._focusedField.focus();\n  },\n\n  _destroyUI: function () {\n    // Reset all event listeners\n    this.$element.off('.Parsley');\n  }\n\n};\n\nUI.Field = {\n\n  _reflowUI: function () {\n    this._buildUI();\n\n    // If this field doesn't have an active UI don't bother doing something\n    if (!this._ui)\n      return;\n\n    // Diff between two validation results\n    var diff = diffResults(this.validationResult, this._ui.lastValidationResult);\n\n    // Then store current validation result for next reflow\n    this._ui.lastValidationResult = this.validationResult;\n\n    // Handle valid / invalid / none field class\n    this._manageStatusClass();\n\n    // Add, remove, updated errors messages\n    this._manageErrorsMessages(diff);\n\n    // Triggers impl\n    this._actualizeTriggers();\n\n    // If field is not valid for the first time, bind keyup trigger to ease UX and quickly inform user\n    if ((diff.kept.length || diff.added.length) && !this._failedOnce) {\n      this._failedOnce = true;\n      this._actualizeTriggers();\n    }\n  },\n\n  // Returns an array of field's error message(s)\n  getErrorsMessages: function () {\n    // No error message, field is valid\n    if (true === this.validationResult)\n      return [];\n\n    var messages = [];\n\n    for (var i = 0; i < this.validationResult.length; i++)\n      messages.push(this.validationResult[i].errorMessage ||\n       this._getErrorMessage(this.validationResult[i].assert));\n\n    return messages;\n  },\n\n  // It's a goal of Parsley that this method is no longer required [#1073]\n  addError: function (name, {message, assert, updateClass = true} = {}) {\n    this._buildUI();\n    this._addError(name, {message, assert});\n\n    if (updateClass)\n      this._errorClass();\n  },\n\n  // It's a goal of Parsley that this method is no longer required [#1073]\n  updateError: function (name, {message, assert, updateClass = true} = {}) {\n    this._buildUI();\n    this._updateError(name, {message, assert});\n\n    if (updateClass)\n      this._errorClass();\n  },\n\n  // It's a goal of Parsley that this method is no longer required [#1073]\n  removeError: function (name, {updateClass = true} = {}) {\n    this._buildUI();\n    this._removeError(name);\n\n    // edge case possible here: remove a standard Parsley error that is still failing in this.validationResult\n    // but highly improbable cuz' manually removing a well Parsley handled error makes no sense.\n    if (updateClass)\n      this._manageStatusClass();\n  },\n\n  _manageStatusClass: function () {\n    if (this.hasConstraints() && this.needsValidation() && true === this.validationResult)\n      this._successClass();\n    else if (this.validationResult.length > 0)\n      this._errorClass();\n    else\n      this._resetClass();\n  },\n\n  _manageErrorsMessages: function (diff) {\n    if ('undefined' !== typeof this.options.errorsMessagesDisabled)\n      return;\n\n    // Case where we have errorMessage option that configure an unique field error message, regardless failing validators\n    if ('undefined' !== typeof this.options.errorMessage) {\n      if ((diff.added.length || diff.kept.length)) {\n        this._insertErrorWrapper();\n\n        if (0 === this._ui.$errorsWrapper.find('.parsley-custom-error-message').length)\n          this._ui.$errorsWrapper\n            .append(\n              $(this.options.errorTemplate)\n              .addClass('parsley-custom-error-message')\n            );\n\n        return this._ui.$errorsWrapper\n          .addClass('filled')\n          .find('.parsley-custom-error-message')\n          .html(this.options.errorMessage);\n      }\n\n      return this._ui.$errorsWrapper\n        .removeClass('filled')\n        .find('.parsley-custom-error-message')\n        .remove();\n    }\n\n    // Show, hide, update failing constraints messages\n    for (var i = 0; i < diff.removed.length; i++)\n      this._removeError(diff.removed[i].assert.name);\n\n    for (i = 0; i < diff.added.length; i++)\n      this._addError(diff.added[i].assert.name, {message: diff.added[i].errorMessage, assert: diff.added[i].assert});\n\n    for (i = 0; i < diff.kept.length; i++)\n      this._updateError(diff.kept[i].assert.name, {message: diff.kept[i].errorMessage, assert: diff.kept[i].assert});\n  },\n\n\n  _addError: function (name, {message, assert}) {\n    this._insertErrorWrapper();\n    this._ui.$errorClassHandler\n      .attr('aria-describedby', this._ui.errorsWrapperId);\n    this._ui.$errorsWrapper\n      .addClass('filled')\n      .append(\n        $(this.options.errorTemplate)\n        .addClass('parsley-' + name)\n        .html(message || this._getErrorMessage(assert))\n      );\n  },\n\n  _updateError: function (name, {message, assert}) {\n    this._ui.$errorsWrapper\n      .addClass('filled')\n      .find('.parsley-' + name)\n      .html(message || this._getErrorMessage(assert));\n  },\n\n  _removeError: function (name) {\n    this._ui.$errorClassHandler\n      .removeAttr('aria-describedby');\n    this._ui.$errorsWrapper\n      .removeClass('filled')\n      .find('.parsley-' + name)\n      .remove();\n  },\n\n  _getErrorMessage: function (constraint) {\n    var customConstraintErrorMessage = constraint.name + 'Message';\n\n    if ('undefined' !== typeof this.options[customConstraintErrorMessage])\n      return window.Parsley.formatMessage(this.options[customConstraintErrorMessage], constraint.requirements);\n\n    return window.Parsley.getErrorMessage(constraint);\n  },\n\n  _buildUI: function () {\n    // UI could be already built or disabled\n    if (this._ui || false === this.options.uiEnabled)\n      return;\n\n    var _ui = {};\n\n    // Give field its Parsley id in DOM\n    this.element.setAttribute(this.options.namespace + 'id', this.__id__);\n\n    /** Generate important UI elements and store them in this **/\n    // $errorClassHandler is the $element that woul have parsley-error and parsley-success classes\n    _ui.$errorClassHandler = this._manageClassHandler();\n\n    // $errorsWrapper is a div that would contain the various field errors, it will be appended into $errorsContainer\n    _ui.errorsWrapperId = 'parsley-id-' + (this.options.multiple ? 'multiple-' + this.options.multiple : this.__id__);\n    _ui.$errorsWrapper = $(this.options.errorsWrapper).attr('id', _ui.errorsWrapperId);\n\n    // ValidationResult UI storage to detect what have changed bwt two validations, and update DOM accordingly\n    _ui.lastValidationResult = [];\n    _ui.validationInformationVisible = false;\n\n    // Store it in this for later\n    this._ui = _ui;\n  },\n\n  // Determine which element will have `parsley-error` and `parsley-success` classes\n  _manageClassHandler: function () {\n    // Class handled could also be determined by function given in Parsley options\n    if ('string' === typeof this.options.classHandler && $(this.options.classHandler).length)\n      return $(this.options.classHandler);\n\n    // Class handled could also be determined by function given in Parsley options\n    var $handlerFunction = this.options.classHandler;\n\n    // It might also be the function name of a global function\n    if ('string' === typeof this.options.classHandler && 'function' === typeof window[this.options.classHandler])\n      $handlerFunction = window[this.options.classHandler];\n\n    if ('function' === typeof $handlerFunction) {\n      var $handler = $handlerFunction.call(this, this);\n\n      // If this function returned a valid existing DOM element, go for it\n      if ('undefined' !== typeof $handler && $handler.length)\n        return $handler;\n    } else if ('object' === typeof $handlerFunction && $handlerFunction instanceof jQuery && $handlerFunction.length) {\n      return $handlerFunction;\n    } else if ($handlerFunction) {\n      Utils.warn('The class handler `' + $handlerFunction + '` does not exist in DOM nor as a global JS function');\n    }\n\n    return this._inputHolder();\n  },\n\n  _inputHolder: function() {\n    // if simple element (input, texatrea, select...) it will perfectly host the classes and precede the error container\n    if (!this.options.multiple || this.element.nodeName === 'SELECT')\n      return this.$element;\n\n    // But if multiple element (radio, checkbox), that would be their parent\n    return this.$element.parent();\n  },\n\n  _insertErrorWrapper: function () {\n    var $errorsContainer = this.options.errorsContainer;\n\n    // Nothing to do if already inserted\n    if (0 !== this._ui.$errorsWrapper.parent().length)\n      return this._ui.$errorsWrapper.parent();\n\n    if ('string' === typeof $errorsContainer) {\n      if ($($errorsContainer).length)\n        return $($errorsContainer).append(this._ui.$errorsWrapper);\n      else if ('function' === typeof window[$errorsContainer])\n        $errorsContainer = window[$errorsContainer];\n      else\n        Utils.warn('The errors container `' + $errorsContainer + '` does not exist in DOM nor as a global JS function');\n    }\n\n    if ('function' === typeof $errorsContainer)\n      $errorsContainer = $errorsContainer.call(this, this);\n\n    if ('object' === typeof $errorsContainer && $errorsContainer.length)\n      return $errorsContainer.append(this._ui.$errorsWrapper);\n\n    return this._inputHolder().after(this._ui.$errorsWrapper);\n  },\n\n  _actualizeTriggers: function () {\n    var $toBind = this._findRelated();\n    var trigger;\n\n    // Remove Parsley events already bound on this field\n    $toBind.off('.Parsley');\n    if (this._failedOnce)\n      $toBind.on(Utils.namespaceEvents(this.options.triggerAfterFailure, 'Parsley'), () => {\n        this._validateIfNeeded();\n      });\n    else if (trigger = Utils.namespaceEvents(this.options.trigger, 'Parsley')) {\n      $toBind.on(trigger, event => {\n        this._validateIfNeeded(event);\n      });\n    }\n  },\n\n  _validateIfNeeded: function (event) {\n    // For keyup, keypress, keydown, input... events that could be a little bit obstrusive\n    // do not validate if val length < min threshold on first validation. Once field have been validated once and info\n    // about success or failure have been displayed, always validate with this trigger to reflect every yalidation change.\n    if (event && /key|input/.test(event.type))\n      if (!(this._ui && this._ui.validationInformationVisible) && this.getValue().length <= this.options.validationThreshold)\n        return;\n\n    if (this.options.debounce) {\n      window.clearTimeout(this._debounced);\n      this._debounced = window.setTimeout(() => this.validate(), this.options.debounce);\n    } else\n      this.validate();\n  },\n\n  _resetUI: function () {\n    // Reset all event listeners\n    this._failedOnce = false;\n    this._actualizeTriggers();\n\n    // Nothing to do if UI never initialized for this field\n    if ('undefined' === typeof this._ui)\n      return;\n\n    // Reset all errors' li\n    this._ui.$errorsWrapper\n      .removeClass('filled')\n      .children()\n      .remove();\n\n    // Reset validation class\n    this._resetClass();\n\n    // Reset validation flags and last validation result\n    this._ui.lastValidationResult = [];\n    this._ui.validationInformationVisible = false;\n  },\n\n  _destroyUI: function () {\n    this._resetUI();\n\n    if ('undefined' !== typeof this._ui)\n      this._ui.$errorsWrapper.remove();\n\n    delete this._ui;\n  },\n\n  _successClass: function () {\n    this._ui.validationInformationVisible = true;\n    this._ui.$errorClassHandler.removeClass(this.options.errorClass).addClass(this.options.successClass);\n  },\n  _errorClass: function () {\n    this._ui.validationInformationVisible = true;\n    this._ui.$errorClassHandler.removeClass(this.options.successClass).addClass(this.options.errorClass);\n  },\n  _resetClass: function () {\n    this._ui.$errorClassHandler.removeClass(this.options.successClass).removeClass(this.options.errorClass);\n  }\n};\n\nexport default UI;\n","import $ from 'jquery';\nimport Base from './base';\nimport Utils from './utils';\n\nvar Form = function (element, domOptions, options) {\n  this.__class__ = 'Form';\n\n  this.element = element;\n  this.$element = $(element);\n  this.domOptions = domOptions;\n  this.options = options;\n  this.parent = window.Parsley;\n\n  this.fields = [];\n  this.validationResult = null;\n};\n\nvar statusMapping = {pending: null, resolved: true, rejected: false};\n\nForm.prototype = {\n  onSubmitValidate: function (event) {\n    // This is a Parsley generated submit event, do not validate, do not prevent, simply exit and keep normal behavior\n    if (true === event.parsley)\n      return;\n\n    // If we didn't come here through a submit button, use the first one in the form\n    var submitSource = this._submitSource || this.$element.find(Utils._SubmitSelector)[0];\n    this._submitSource = null;\n    this.$element.find('.parsley-synthetic-submit-button').prop('disabled', true);\n    if (submitSource && null !== submitSource.getAttribute('formnovalidate'))\n      return;\n\n    window.Parsley._remoteCache = {};\n\n    var promise = this.whenValidate({event});\n\n    if ('resolved' === promise.state() && false !== this._trigger('submit')) {\n      // All good, let event go through. We make this distinction because browsers\n      // differ in their handling of `submit` being called from inside a submit event [#1047]\n    } else {\n      // Rejected or pending: cancel this submit\n      event.stopImmediatePropagation();\n      event.preventDefault();\n      if ('pending' === promise.state())\n        promise.done(() => { this._submit(submitSource); });\n    }\n  },\n\n  onSubmitButton: function(event) {\n    this._submitSource = event.currentTarget;\n  },\n  // internal\n  // _submit submits the form, this time without going through the validations.\n  // Care must be taken to \"fake\" the actual submit button being clicked.\n  _submit: function (submitSource) {\n    if (false === this._trigger('submit'))\n      return;\n    // Add submit button's data\n    if (submitSource) {\n      var $synthetic = this.$element.find('.parsley-synthetic-submit-button').prop('disabled', false);\n      if (0 === $synthetic.length)\n        $synthetic = $('<input class=\"parsley-synthetic-submit-button\" type=\"hidden\">').appendTo(this.$element);\n      $synthetic.attr({\n        name: submitSource.getAttribute('name'),\n        value: submitSource.getAttribute('value')\n      });\n    }\n\n    this.$element.trigger(Object.assign($.Event('submit'), {parsley: true}));\n  },\n\n  // Performs validation on fields while triggering events.\n  // @returns `true` if all validations succeeds, `false`\n  // if a failure is immediately detected, or `null`\n  // if dependant on a promise.\n  // Consider using `whenValidate` instead.\n  validate: function (options) {\n    if (arguments.length >= 1 && !$.isPlainObject(options)) {\n      Utils.warnOnce('Calling validate on a parsley form without passing arguments as an object is deprecated.');\n      var [group, force, event] = arguments;\n      options = {group, force, event};\n    }\n    return statusMapping[ this.whenValidate(options).state() ];\n  },\n\n  whenValidate: function ({group, force, event} = {}) {\n    this.submitEvent = event;\n    if (event) {\n      this.submitEvent = Object.assign({}, event, {preventDefault: () => {\n        Utils.warnOnce(\"Using `this.submitEvent.preventDefault()` is deprecated; instead, call `this.validationResult = false`\");\n        this.validationResult = false;\n      }});\n    }\n    this.validationResult = true;\n\n    // fire validate event to eventually modify things before every validation\n    this._trigger('validate');\n\n    // Refresh form DOM options and form's fields that could have changed\n    this._refreshFields();\n\n    var promises = this._withoutReactualizingFormOptions(() => {\n      return $.map(this.fields, field => field.whenValidate({force, group}));\n    });\n\n    return Utils.all(promises)\n      .done(  () => { this._trigger('success'); })\n      .fail(  () => {\n        this.validationResult = false;\n        this.focus();\n        this._trigger('error');\n      })\n      .always(() => { this._trigger('validated'); })\n      .pipe(...this._pipeAccordingToValidationResult());\n  },\n\n  // Iterate over refreshed fields, and stop on first failure.\n  // Returns `true` if all fields are valid, `false` if a failure is detected\n  // or `null` if the result depends on an unresolved promise.\n  // Prefer using `whenValid` instead.\n  isValid: function (options) {\n    if (arguments.length >= 1 && !$.isPlainObject(options)) {\n      Utils.warnOnce('Calling isValid on a parsley form without passing arguments as an object is deprecated.');\n      var [group, force] = arguments;\n      options = {group, force};\n    }\n    return statusMapping[ this.whenValid(options).state() ];\n  },\n\n  // Iterate over refreshed fields and validate them.\n  // Returns a promise.\n  // A validation that immediately fails will interrupt the validations.\n  whenValid: function ({group, force} = {}) {\n    this._refreshFields();\n\n    var promises = this._withoutReactualizingFormOptions(() => {\n      return $.map(this.fields, field => field.whenValid({group, force}));\n    });\n    return Utils.all(promises);\n  },\n\n  refresh: function() {\n    this._refreshFields();\n    return this;\n  },\n\n  // Reset UI\n  reset: function () {\n    // Form case: emit a reset event for each field\n    for (var i = 0; i < this.fields.length; i++)\n      this.fields[i].reset();\n\n    this._trigger('reset');\n  },\n\n  // Destroy Parsley instance (+ UI)\n  destroy: function () {\n    // Field case: emit destroy event to clean UI and then destroy stored instance\n    this._destroyUI();\n\n    // Form case: destroy all its fields and then destroy stored instance\n    for (var i = 0; i < this.fields.length; i++)\n      this.fields[i].destroy();\n\n    this.$element.removeData('Parsley');\n    this._trigger('destroy');\n  },\n\n  _refreshFields: function () {\n    return this.actualizeOptions()._bindFields();\n  },\n\n  _bindFields: function () {\n    var oldFields = this.fields;\n\n    this.fields = [];\n    this.fieldsMappedById = {};\n\n    this._withoutReactualizingFormOptions(() => {\n      this.$element\n      .find(this.options.inputs)\n      .not(this.options.excluded)\n      .each((_, element) => {\n        var fieldInstance = new window.Parsley.Factory(element, {}, this);\n\n        // Only add valid and not excluded `Field` and `FieldMultiple` children\n        if (('Field' === fieldInstance.__class__ || 'FieldMultiple' === fieldInstance.__class__) && (true !== fieldInstance.options.excluded)) {\n          let uniqueId = fieldInstance.__class__ + '-' + fieldInstance.__id__;\n          if ('undefined' === typeof this.fieldsMappedById[uniqueId]) {\n            this.fieldsMappedById[uniqueId] = fieldInstance;\n            this.fields.push(fieldInstance);\n          }\n        }\n      });\n\n      $.each(Utils.difference(oldFields, this.fields), (_, field) => {\n        field.reset();\n      });\n    });\n    return this;\n  },\n\n  // Internal only.\n  // Looping on a form's fields to do validation or similar\n  // will trigger reactualizing options on all of them, which\n  // in turn will reactualize the form's options.\n  // To avoid calling actualizeOptions so many times on the form\n  // for nothing, _withoutReactualizingFormOptions temporarily disables\n  // the method actualizeOptions on this form while `fn` is called.\n  _withoutReactualizingFormOptions: function (fn) {\n    var oldActualizeOptions = this.actualizeOptions;\n    this.actualizeOptions = function () { return this; };\n    var result = fn();\n    this.actualizeOptions = oldActualizeOptions;\n    return result;\n  },\n\n  // Internal only.\n  // Shortcut to trigger an event\n  // Returns true iff event is not interrupted and default not prevented.\n  _trigger: function (eventName) {\n    return this.trigger('form:' + eventName);\n  }\n\n};\n\nexport default Form;\n","import Utils from './utils';\nimport Validator from './validator';\n\nconst Constraint = function(parsleyField, name, requirements, priority, isDomConstraint) {\n  const validatorSpec = window.Parsley._validatorRegistry.validators[name];\n  const validator = new Validator(validatorSpec);\n  priority = priority || parsleyField.options[name + 'Priority'] || validator.priority;\n  isDomConstraint = (true === isDomConstraint);\n\n  Object.assign(this, {\n    validator,\n    name,\n    requirements,\n    priority,\n    isDomConstraint\n  });\n  this._parseRequirements(parsleyField.options);\n};\n\nconst capitalize = function(str) {\n  const cap = str[0].toUpperCase();\n  return cap + str.slice(1);\n};\n\nConstraint.prototype = {\n  validate: function(value, instance) {\n    return this.validator.validate(value, ...this.requirementList, instance);\n  },\n\n  _parseRequirements: function(options) {\n    this.requirementList = this.validator.parseRequirements(this.requirements,\n      key => options[this.name + capitalize(key)]\n    );\n  }\n};\n\nexport default Constraint;\n","import $ from 'jquery';\nimport Constraint from './constraint';\nimport UI from './ui';\nimport Utils from './utils';\n\nvar Field = function (field, domOptions, options, parsleyFormInstance) {\n  this.__class__ = 'Field';\n\n  this.element = field;\n  this.$element = $(field);\n\n  // Set parent if we have one\n  if ('undefined' !== typeof parsleyFormInstance) {\n    this.parent = parsleyFormInstance;\n  }\n\n  this.options = options;\n  this.domOptions = domOptions;\n\n  // Initialize some properties\n  this.constraints = [];\n  this.constraintsByName = {};\n  this.validationResult = true;\n\n  // Bind constraints\n  this._bindConstraints();\n};\n\nvar statusMapping = {pending: null, resolved: true, rejected: false};\n\nField.prototype = {\n  // # Public API\n  // Validate field and trigger some events for mainly `UI`\n  // @returns `true`, an array of the validators that failed, or\n  // `null` if validation is not finished. Prefer using whenValidate\n  validate: function (options) {\n    if (arguments.length >= 1 && !$.isPlainObject(options)) {\n      Utils.warnOnce('Calling validate on a parsley field without passing arguments as an object is deprecated.');\n      options = {options};\n    }\n    var promise = this.whenValidate(options);\n    if (!promise)  // If excluded with `group` option\n      return true;\n    switch (promise.state()) {\n      case 'pending': return null;\n      case 'resolved': return true;\n      case 'rejected': return this.validationResult;\n    }\n  },\n\n  // Validate field and trigger some events for mainly `UI`\n  // @returns a promise that succeeds only when all validations do\n  // or `undefined` if field is not in the given `group`.\n  whenValidate: function ({force, group} =  {}) {\n    // do not validate a field if not the same as given validation group\n    this.refresh();\n    if (group && !this._isInGroup(group))\n      return;\n\n    this.value = this.getValue();\n\n    // Field Validate event. `this.value` could be altered for custom needs\n    this._trigger('validate');\n\n    return this.whenValid({force, value: this.value, _refreshed: true})\n      .always(() => { this._reflowUI(); })\n      .done(() =>   { this._trigger('success'); })\n      .fail(() =>   { this._trigger('error'); })\n      .always(() => { this._trigger('validated'); })\n      .pipe(...this._pipeAccordingToValidationResult());\n  },\n\n  hasConstraints: function () {\n    return 0 !== this.constraints.length;\n  },\n\n  // An empty optional field does not need validation\n  needsValidation: function (value) {\n    if ('undefined' === typeof value)\n      value = this.getValue();\n\n    // If a field is empty and not required, it is valid\n    // Except if `data-parsley-validate-if-empty` explicitely added, useful for some custom validators\n    if (!value.length && !this._isRequired() && 'undefined' === typeof this.options.validateIfEmpty)\n      return false;\n\n    return true;\n  },\n\n  _isInGroup: function (group) {\n    if (Array.isArray(this.options.group))\n      return -1 !== $.inArray(group, this.options.group);\n    return this.options.group === group;\n  },\n\n  // Just validate field. Do not trigger any event.\n  // Returns `true` iff all constraints pass, `false` if there are failures,\n  // or `null` if the result can not be determined yet (depends on a promise)\n  // See also `whenValid`.\n  isValid: function (options) {\n    if (arguments.length >= 1 && !$.isPlainObject(options)) {\n      Utils.warnOnce('Calling isValid on a parsley field without passing arguments as an object is deprecated.');\n      var [force, value] = arguments;\n      options = {force, value};\n    }\n    var promise = this.whenValid(options);\n    if (!promise) // Excluded via `group`\n      return true;\n    return statusMapping[promise.state()];\n  },\n\n  // Just validate field. Do not trigger any event.\n  // @returns a promise that succeeds only when all validations do\n  // or `undefined` if the field is not in the given `group`.\n  // The argument `force` will force validation of empty fields.\n  // If a `value` is given, it will be validated instead of the value of the input.\n  whenValid: function ({force = false, value, group, _refreshed} = {}) {\n    // Recompute options and rebind constraints to have latest changes\n    if (!_refreshed)\n      this.refresh();\n    // do not validate a field if not the same as given validation group\n    if (group && !this._isInGroup(group))\n      return;\n\n    this.validationResult = true;\n\n    // A field without constraint is valid\n    if (!this.hasConstraints())\n      return $.when();\n\n    // Value could be passed as argument, needed to add more power to 'field:validate'\n    if ('undefined' === typeof value || null === value)\n      value = this.getValue();\n\n    if (!this.needsValidation(value) && true !== force)\n      return $.when();\n\n    var groupedConstraints = this._getGroupedConstraints();\n    var promises = [];\n    $.each(groupedConstraints, (_, constraints) => {\n      // Process one group of constraints at a time, we validate the constraints\n      // and combine the promises together.\n      var promise = Utils.all(\n        $.map(constraints, constraint => this._validateConstraint(value, constraint))\n      );\n      promises.push(promise);\n      if (promise.state() === 'rejected')\n        return false; // Interrupt processing if a group has already failed\n    });\n    return Utils.all(promises);\n  },\n\n  // @returns a promise\n  _validateConstraint: function(value, constraint) {\n    var result = constraint.validate(value, this);\n    // Map false to a failed promise\n    if (false === result)\n      result = $.Deferred().reject();\n    // Make sure we return a promise and that we record failures\n    return Utils.all([result]).fail(errorMessage => {\n      if (!(this.validationResult instanceof Array))\n        this.validationResult = [];\n      this.validationResult.push({\n        assert: constraint,\n        errorMessage: 'string' === typeof errorMessage && errorMessage\n      });\n    });\n  },\n\n  // @returns Parsley field computed value that could be overrided or configured in DOM\n  getValue: function () {\n    var value;\n\n    // Value could be overriden in DOM or with explicit options\n    if ('function' === typeof this.options.value)\n      value = this.options.value(this);\n    else if ('undefined' !== typeof this.options.value)\n      value = this.options.value;\n    else\n      value = this.$element.val();\n\n    // Handle wrong DOM or configurations\n    if ('undefined' === typeof value || null === value)\n      return '';\n\n    return this._handleWhitespace(value);\n  },\n\n  // Reset UI\n  reset: function () {\n    this._resetUI();\n    return this._trigger('reset');\n  },\n\n  // Destroy Parsley instance (+ UI)\n  destroy: function () {\n    // Field case: emit destroy event to clean UI and then destroy stored instance\n    this._destroyUI();\n    this.$element.removeData('Parsley');\n    this.$element.removeData('FieldMultiple');\n    this._trigger('destroy');\n  },\n\n  // Actualize options and rebind constraints\n  refresh: function () {\n    this._refreshConstraints();\n    return this;\n  },\n\n  _refreshConstraints: function () {\n    return this.actualizeOptions()._bindConstraints();\n  },\n\n  refreshConstraints: function() {\n    Utils.warnOnce(\"Parsley's refreshConstraints is deprecated. Please use refresh\");\n    return this.refresh();\n  },\n\n  /**\n  * Add a new constraint to a field\n  *\n  * @param {String}   name\n  * @param {Mixed}    requirements      optional\n  * @param {Number}   priority          optional\n  * @param {Boolean}  isDomConstraint   optional\n  */\n  addConstraint: function (name, requirements, priority, isDomConstraint) {\n\n    if (window.Parsley._validatorRegistry.validators[name]) {\n      var constraint = new Constraint(this, name, requirements, priority, isDomConstraint);\n\n      // if constraint already exist, delete it and push new version\n      if ('undefined' !== this.constraintsByName[constraint.name])\n        this.removeConstraint(constraint.name);\n\n      this.constraints.push(constraint);\n      this.constraintsByName[constraint.name] = constraint;\n    }\n\n    return this;\n  },\n\n  // Remove a constraint\n  removeConstraint: function (name) {\n    for (var i = 0; i < this.constraints.length; i++)\n      if (name === this.constraints[i].name) {\n        this.constraints.splice(i, 1);\n        break;\n      }\n    delete this.constraintsByName[name];\n    return this;\n  },\n\n  // Update a constraint (Remove + re-add)\n  updateConstraint: function (name, parameters, priority) {\n    return this.removeConstraint(name)\n      .addConstraint(name, parameters, priority);\n  },\n\n  // # Internals\n\n  // Internal only.\n  // Bind constraints from config + options + DOM\n  _bindConstraints: function () {\n    var constraints = [];\n    var constraintsByName = {};\n\n    // clean all existing DOM constraints to only keep javascript user constraints\n    for (var i = 0; i < this.constraints.length; i++)\n      if (false === this.constraints[i].isDomConstraint) {\n        constraints.push(this.constraints[i]);\n        constraintsByName[this.constraints[i].name] = this.constraints[i];\n      }\n\n    this.constraints = constraints;\n    this.constraintsByName = constraintsByName;\n\n    // then re-add Parsley DOM-API constraints\n    for (var name in this.options)\n      this.addConstraint(name, this.options[name], undefined, true);\n\n    // finally, bind special HTML5 constraints\n    return this._bindHtml5Constraints();\n  },\n\n  // Internal only.\n  // Bind specific HTML5 constraints to be HTML5 compliant\n  _bindHtml5Constraints: function () {\n    // html5 required\n    if (null !== this.element.getAttribute('required'))\n      this.addConstraint('required', true, undefined, true);\n\n    // html5 pattern\n    if (null !== this.element.getAttribute('pattern'))\n      this.addConstraint('pattern', this.element.getAttribute('pattern'), undefined, true);\n\n    // range\n    let min = this.element.getAttribute('min');\n    let max = this.element.getAttribute('max');\n    if (null !== min && null !== max)\n      this.addConstraint('range', [min, max], undefined, true);\n\n    // HTML5 min\n    else if (null !== min)\n      this.addConstraint('min', min, undefined, true);\n\n    // HTML5 max\n    else if (null !== max)\n      this.addConstraint('max', max, undefined, true);\n\n\n    // length\n    if (null !== this.element.getAttribute('minlength') && null !== this.element.getAttribute('maxlength'))\n      this.addConstraint('length', [this.element.getAttribute('minlength'), this.element.getAttribute('maxlength')], undefined, true);\n\n    // HTML5 minlength\n    else if (null !== this.element.getAttribute('minlength'))\n      this.addConstraint('minlength', this.element.getAttribute('minlength'), undefined, true);\n\n    // HTML5 maxlength\n    else if (null !== this.element.getAttribute('maxlength'))\n      this.addConstraint('maxlength', this.element.getAttribute('maxlength'), undefined, true);\n\n\n    // html5 types\n    var type = Utils.getType(this.element);\n\n    // Small special case here for HTML5 number: integer validator if step attribute is undefined or an integer value, number otherwise\n    if ('number' === type) {\n      return this.addConstraint('type', ['number', {\n        step: this.element.getAttribute('step') || '1',\n        base: min || this.element.getAttribute('value')\n      }], undefined, true);\n    // Regular other HTML5 supported types\n    } else if (/^(email|url|range|date)$/i.test(type)) {\n      return this.addConstraint('type', type, undefined, true);\n    }\n    return this;\n  },\n\n  // Internal only.\n  // Field is required if have required constraint without `false` value\n  _isRequired: function () {\n    if ('undefined' === typeof this.constraintsByName.required)\n      return false;\n\n    return false !== this.constraintsByName.required.requirements;\n  },\n\n  // Internal only.\n  // Shortcut to trigger an event\n  _trigger: function (eventName) {\n    return this.trigger('field:' + eventName);\n  },\n\n  // Internal only\n  // Handles whitespace in a value\n  // Use `data-parsley-whitespace=\"squish\"` to auto squish input value\n  // Use `data-parsley-whitespace=\"trim\"` to auto trim input value\n  _handleWhitespace: function (value) {\n    if (true === this.options.trimValue)\n      Utils.warnOnce('data-parsley-trim-value=\"true\" is deprecated, please use data-parsley-whitespace=\"trim\"');\n\n    if ('squish' === this.options.whitespace)\n      value = value.replace(/\\s{2,}/g, ' ');\n\n    if (('trim' === this.options.whitespace) || ('squish' === this.options.whitespace) || (true === this.options.trimValue))\n      value = Utils.trimString(value);\n\n    return value;\n  },\n\n  _isDateInput: function() {\n    var c = this.constraintsByName.type;\n    return c && c.requirements === 'date';\n  },\n\n  // Internal only.\n  // Returns the constraints, grouped by descending priority.\n  // The result is thus an array of arrays of constraints.\n  _getGroupedConstraints: function () {\n    if (false === this.options.priorityEnabled)\n      return [this.constraints];\n\n    var groupedConstraints = [];\n    var index = {};\n\n    // Create array unique of priorities\n    for (var i = 0; i < this.constraints.length; i++) {\n      var p = this.constraints[i].priority;\n      if (!index[p])\n        groupedConstraints.push(index[p] = []);\n      index[p].push(this.constraints[i]);\n    }\n    // Sort them by priority DESC\n    groupedConstraints.sort(function (a, b) { return b[0].priority - a[0].priority; });\n\n    return groupedConstraints;\n  }\n\n};\n\nexport default Field;\n","import $ from 'jquery';\nimport Utils from './utils';\n\nvar Multiple = function () {\n  this.__class__ = 'FieldMultiple';\n};\n\nMultiple.prototype = {\n  // Add new `$element` sibling for multiple field\n  addElement: function ($element) {\n    this.$elements.push($element);\n\n    return this;\n  },\n\n  // See `Field._refreshConstraints()`\n  _refreshConstraints: function () {\n    var fieldConstraints;\n\n    this.constraints = [];\n\n    // Select multiple special treatment\n    if (this.element.nodeName === 'SELECT') {\n      this.actualizeOptions()._bindConstraints();\n\n      return this;\n    }\n\n    // Gather all constraints for each input in the multiple group\n    for (var i = 0; i < this.$elements.length; i++) {\n\n      // Check if element have not been dynamically removed since last binding\n      if (!$('html').has(this.$elements[i]).length) {\n        this.$elements.splice(i, 1);\n        continue;\n      }\n\n      fieldConstraints = this.$elements[i].data('FieldMultiple')._refreshConstraints().constraints;\n\n      for (var j = 0; j < fieldConstraints.length; j++)\n        this.addConstraint(fieldConstraints[j].name, fieldConstraints[j].requirements, fieldConstraints[j].priority, fieldConstraints[j].isDomConstraint);\n    }\n\n    return this;\n  },\n\n  // See `Field.getValue()`\n  getValue: function () {\n    // Value could be overriden in DOM\n    if ('function' === typeof this.options.value)\n      return this.options.value(this);\n    else if ('undefined' !== typeof this.options.value)\n      return this.options.value;\n\n    // Radio input case\n    if (this.element.nodeName === 'INPUT') {\n      var type = Utils.getType(this.element);\n      if (type === 'radio')\n        return this._findRelated().filter(':checked').val() || '';\n\n      // checkbox input case\n      if (type === 'checkbox') {\n        var values = [];\n\n        this._findRelated().filter(':checked').each(function () {\n          values.push($(this).val());\n        });\n\n        return values;\n      }\n    }\n\n    // Select multiple case\n    if (this.element.nodeName === 'SELECT' && null === this.$element.val())\n      return [];\n\n    // Default case that should never happen\n    return this.$element.val();\n  },\n\n  _init: function () {\n    this.$elements = [this.$element];\n\n    return this;\n  }\n};\n\nexport default Multiple;\n","import $ from 'jquery';\nimport Utils from './utils';\nimport Base from './base';\nimport Form from './form';\nimport Field from './field';\nimport Multiple from './multiple';\n\nvar Factory = function (element, options, parsleyFormInstance) {\n  this.element = element;\n  this.$element = $(element);\n\n  // If the element has already been bound, returns its saved Parsley instance\n  var savedparsleyFormInstance = this.$element.data('Parsley');\n  if (savedparsleyFormInstance) {\n\n    // If the saved instance has been bound without a Form parent and there is one given in this call, add it\n    if ('undefined' !== typeof parsleyFormInstance && savedparsleyFormInstance.parent === window.Parsley) {\n      savedparsleyFormInstance.parent = parsleyFormInstance;\n      savedparsleyFormInstance._resetOptions(savedparsleyFormInstance.options);\n    }\n\n    if ('object' === typeof options) {\n      Object.assign(savedparsleyFormInstance.options, options);\n    }\n\n    return savedparsleyFormInstance;\n  }\n\n  // Parsley must be instantiated with a DOM element or jQuery $element\n  if (!this.$element.length)\n    throw new Error('You must bind Parsley on an existing element.');\n\n  if ('undefined' !== typeof parsleyFormInstance && 'Form' !== parsleyFormInstance.__class__)\n    throw new Error('Parent instance must be a Form instance');\n\n  this.parent = parsleyFormInstance || window.Parsley;\n  return this.init(options);\n};\n\nFactory.prototype = {\n  init: function (options) {\n    this.__class__ = 'Parsley';\n    this.__version__ = '@@version';\n    this.__id__ = Utils.generateID();\n\n    // Pre-compute options\n    this._resetOptions(options);\n\n    // A Form instance is obviously a `<form>` element but also every node that is not an input and has the `data-parsley-validate` attribute\n    if (this.element.nodeName === 'FORM' || (Utils.checkAttr(this.element, this.options.namespace, 'validate') && !this.$element.is(this.options.inputs)))\n      return this.bind('parsleyForm');\n\n    // Every other element is bound as a `Field` or `FieldMultiple`\n    return this.isMultiple() ? this.handleMultiple() : this.bind('parsleyField');\n  },\n\n  isMultiple: function () {\n    var type = Utils.getType(this.element);\n    return ((type === 'radio' || type === 'checkbox') ||\n      (this.element.nodeName === 'SELECT' && null !== this.element.getAttribute('multiple')));\n  },\n\n  // Multiples fields are a real nightmare :(\n  // Maybe some refactoring would be appreciated here...\n  handleMultiple: function () {\n    var name;\n    var parsleyMultipleInstance;\n\n    // Handle multiple name\n    this.options.multiple = this.options.multiple ||\n      (name = this.element.getAttribute('name')) ||\n      this.element.getAttribute('id');\n\n    // Special select multiple input\n    if (this.element.nodeName === 'SELECT' && null !== this.element.getAttribute('multiple')) {\n      this.options.multiple = this.options.multiple || this.__id__;\n      return this.bind('parsleyFieldMultiple');\n\n    // Else for radio / checkboxes, we need a `name` or `data-parsley-multiple` to properly bind it\n    } else if (!this.options.multiple) {\n      Utils.warn('To be bound by Parsley, a radio, a checkbox and a multiple select input must have either a name or a multiple option.', this.$element);\n      return this;\n    }\n\n    // Reflect names that are numbers - the removing of special chars fails for numbers\n    if(typeof(this.options.multiple) === 'number') {\n      this.options.multiple = this.options.multiple.toString();\n    }\n\n    // Remove special chars\n    this.options.multiple = this.options.multiple.replace(/(:|\\.|\\[|\\]|\\{|\\}|\\$)/g, '');\n\n    // Add proper `data-parsley-multiple` to siblings if we have a valid multiple name\n    if (name) {\n      $('input[name=\"' + name + '\"]').each((i, input) => {\n        var type = Utils.getType(input);\n        if ((type === 'radio' || type === 'checkbox'))\n          input.setAttribute(this.options.namespace + 'multiple', this.options.multiple);\n      });\n    }\n\n    // Check here if we don't already have a related multiple instance saved\n    var $previouslyRelated = this._findRelated();\n    for (var i = 0; i < $previouslyRelated.length; i++) {\n      parsleyMultipleInstance = $($previouslyRelated.get(i)).data('Parsley');\n      if ('undefined' !== typeof parsleyMultipleInstance) {\n\n        if (!this.$element.data('FieldMultiple')) {\n          parsleyMultipleInstance.addElement(this.$element);\n        }\n\n        break;\n      }\n    }\n\n    // Create a secret Field instance for every multiple field. It will be stored in `data('FieldMultiple')`\n    // And will be useful later to access classic `Field` stuff while being in a `FieldMultiple` instance\n    this.bind('parsleyField', true);\n\n    return parsleyMultipleInstance || this.bind('parsleyFieldMultiple');\n  },\n\n  // Return proper `Form`, `Field` or `FieldMultiple`\n  bind: function (type, doNotStore) {\n    var parsleyInstance;\n\n    switch (type) {\n      case 'parsleyForm':\n        parsleyInstance = $.extend(\n          new Form(this.element, this.domOptions, this.options),\n          new Base(),\n          window.ParsleyExtend\n        )._bindFields();\n        break;\n      case 'parsleyField':\n        parsleyInstance = $.extend(\n          new Field(this.element, this.domOptions, this.options, this.parent),\n          new Base(),\n          window.ParsleyExtend\n        );\n        break;\n      case 'parsleyFieldMultiple':\n        parsleyInstance = $.extend(\n          new Field(this.element, this.domOptions, this.options, this.parent),\n          new Multiple(),\n          new Base(),\n          window.ParsleyExtend\n        )._init();\n        break;\n      default:\n        throw new Error(type + 'is not a supported Parsley type');\n    }\n\n    if (this.options.multiple)\n      Utils.setAttr(this.element, this.options.namespace, 'multiple', this.options.multiple);\n\n    if ('undefined' !== typeof doNotStore) {\n      this.$element.data('FieldMultiple', parsleyInstance);\n\n      return parsleyInstance;\n    }\n\n    // Store the freshly bound instance in a DOM element for later access using jQuery `data()`\n    this.$element.data('Parsley', parsleyInstance);\n\n    // Tell the world we have a new Form or Field instance!\n    parsleyInstance._actualizeTriggers();\n    parsleyInstance._trigger('init');\n\n    return parsleyInstance;\n  }\n};\n\nexport default Factory;\n","import $ from 'jquery';\nimport Utils from './utils';\nimport Defaults from './defaults';\nimport Base from './base';\nimport ValidatorRegistry from './validator_registry';\nimport UI from './ui';\nimport Form from './form';\nimport Field from './field';\nimport Multiple from './multiple';\nimport Factory from './factory';\n\nvar vernums = $.fn.jquery.split('.');\nif (parseInt(vernums[0]) <= 1 && parseInt(vernums[1]) < 8) {\n  throw \"The loaded version of jQuery is too old. Please upgrade to 1.8.x or better.\";\n}\nif (!vernums.forEach) {\n  Utils.warn('Parsley requires ES5 to run properly. Please include https://github.com/es-shims/es5-shim');\n}\n// Inherit `on`, `off` & `trigger` to Parsley:\nvar Parsley = Object.assign(new Base(), {\n    element: document,\n    $element: $(document),\n    actualizeOptions: null,\n    _resetOptions: null,\n    Factory: Factory,\n    version: '@@version'\n  });\n\n// Supplement Field and Form with Base\n// This way, the constructors will have access to those methods\nObject.assign(Field.prototype, UI.Field, Base.prototype);\nObject.assign(Form.prototype, UI.Form, Base.prototype);\n// Inherit actualizeOptions and _resetOptions:\nObject.assign(Factory.prototype, Base.prototype);\n\n// ### jQuery API\n// `$('.elem').parsley(options)` or `$('.elem').psly(options)`\n$.fn.parsley = $.fn.psly = function (options) {\n  if (this.length > 1) {\n    var instances = [];\n\n    this.each(function () {\n      instances.push($(this).parsley(options));\n    });\n\n    return instances;\n  }\n\n  // Return undefined if applied to non existing DOM element\n  if (this.length == 0) {\n    return;\n  }\n\n  return new Factory(this[0], options);\n};\n\n// ### Field and Form extension\n// Ensure the extension is now defined if it wasn't previously\nif ('undefined' === typeof window.ParsleyExtend)\n  window.ParsleyExtend = {};\n\n// ### Parsley config\n// Inherit from ParsleyDefault, and copy over any existing values\nParsley.options = Object.assign(Utils.objectCreate(Defaults), window.ParsleyConfig);\nwindow.ParsleyConfig = Parsley.options; // Old way of accessing global options\n\n// ### Globals\nwindow.Parsley = window.psly = Parsley;\nParsley.Utils = Utils;\nwindow.ParsleyUtils = {};\n$.each(Utils, (key, value) => {\n  if ('function' === typeof value) {\n    window.ParsleyUtils[key] = (...args) => {\n      Utils.warnOnce('Accessing `window.ParsleyUtils` is deprecated. Use `window.Parsley.Utils` instead.');\n      return Utils[key](...args);\n    };\n  }\n});\n\n// ### Define methods that forward to the registry, and deprecate all access except through window.Parsley\nvar registry = window.Parsley._validatorRegistry = new ValidatorRegistry(window.ParsleyConfig.validators, window.ParsleyConfig.i18n);\nwindow.ParsleyValidator = {};\n$.each('setLocale addCatalog addMessage addMessages getErrorMessage formatMessage addValidator updateValidator removeValidator hasValidator'.split(' '), function (i, method) {\n  window.Parsley[method] = (...args) => registry[method](...args);\n  window.ParsleyValidator[method] = function () {\n    Utils.warnOnce(`Accessing the method '${method}' through Validator is deprecated. Simply call 'window.Parsley.${method}(...)'`);\n    return window.Parsley[method](...arguments);\n  };\n});\n\n// ### UI\n// Deprecated global object\nwindow.Parsley.UI = UI;\nwindow.ParsleyUI = {\n  removeError: function (instance, name, doNotUpdateClass) {\n    var updateClass = true !== doNotUpdateClass;\n    Utils.warnOnce(`Accessing UI is deprecated. Call 'removeError' on the instance directly. Please comment in issue 1073 as to your need to call this method.`);\n    return instance.removeError(name, {updateClass});\n  },\n  getErrorsMessages: function (instance) {\n    Utils.warnOnce(`Accessing UI is deprecated. Call 'getErrorsMessages' on the instance directly.`);\n    return instance.getErrorsMessages();\n  }\n};\n$.each('addError updateError'.split(' '), function (i, method) {\n  window.ParsleyUI[method] = function (instance, name, message, assert, doNotUpdateClass) {\n    var updateClass = true !== doNotUpdateClass;\n    Utils.warnOnce(`Accessing UI is deprecated. Call '${method}' on the instance directly. Please comment in issue 1073 as to your need to call this method.`);\n    return instance[method](name, {message, assert, updateClass});\n  };\n});\n\n// ### PARSLEY auto-binding\n// Prevent it by setting `ParsleyConfig.autoBind` to `false`\nif (false !== window.ParsleyConfig.autoBind) {\n  $(function () {\n    // Works only on `data-parsley-validate`.\n    if ($('[data-parsley-validate]').length)\n      $('[data-parsley-validate]').parsley();\n  });\n}\n\nexport default Parsley;\n","import $ from 'jquery';\nimport Field from './field';\nimport Form from './form';\nimport Utils from './utils';\n\nvar o = $({});\nvar deprecated = function () {\n  Utils.warnOnce(\"Parsley's pubsub module is deprecated; use the 'on' and 'off' methods on parsley instances or window.Parsley\");\n};\n\n// Returns an event handler that calls `fn` with the arguments it expects\nfunction adapt(fn, context) {\n  // Store to allow unbinding\n  if (!fn.parsleyAdaptedCallback) {\n    fn.parsleyAdaptedCallback = function () {\n      var args = Array.prototype.slice.call(arguments, 0);\n      args.unshift(this);\n      fn.apply(context || o, args);\n    };\n  }\n  return fn.parsleyAdaptedCallback;\n}\n\nvar eventPrefix = 'parsley:';\n// Converts 'parsley:form:validate' into 'form:validate'\nfunction eventName(name) {\n  if (name.lastIndexOf(eventPrefix, 0) === 0)\n    return name.substr(eventPrefix.length);\n  return name;\n}\n\n// $.listen is deprecated. Use Parsley.on instead.\n$.listen = function (name, callback) {\n  var context;\n  deprecated();\n  if ('object' === typeof arguments[1] && 'function' === typeof arguments[2]) {\n    context = arguments[1];\n    callback = arguments[2];\n  }\n\n  if ('function' !== typeof callback)\n    throw new Error('Wrong parameters');\n\n  window.Parsley.on(eventName(name), adapt(callback, context));\n};\n\n$.listenTo = function (instance, name, fn) {\n  deprecated();\n  if (!(instance instanceof Field) && !(instance instanceof Form))\n    throw new Error('Must give Parsley instance');\n\n  if ('string' !== typeof name || 'function' !== typeof fn)\n    throw new Error('Wrong parameters');\n\n  instance.on(eventName(name), adapt(fn));\n};\n\n$.unsubscribe = function (name, fn) {\n  deprecated();\n  if ('string' !== typeof name || 'function' !== typeof fn)\n    throw new Error('Wrong arguments');\n  window.Parsley.off(eventName(name), fn.parsleyAdaptedCallback);\n};\n\n$.unsubscribeTo = function (instance, name) {\n  deprecated();\n  if (!(instance instanceof Field) && !(instance instanceof Form))\n    throw new Error('Must give Parsley instance');\n  instance.off(eventName(name));\n};\n\n$.unsubscribeAll = function (name) {\n  deprecated();\n  window.Parsley.off(eventName(name));\n  $('form,input,textarea,select').each(function () {\n    var instance = $(this).data('Parsley');\n    if (instance) {\n      instance.off(eventName(name));\n    }\n  });\n};\n\n// $.emit is deprecated. Use jQuery events instead.\n$.emit = function (name, instance) {\n  deprecated();\n  var instanceGiven = (instance instanceof Field) || (instance instanceof Form);\n  var args = Array.prototype.slice.call(arguments, instanceGiven ? 2 : 1);\n  args.unshift(eventName(name));\n  if (!instanceGiven) {\n    instance = window.Parsley;\n  }\n  instance.trigger(...args);\n};\n\nexport default {};\n","import $ from 'jquery';\nimport Utils from './utils';\nimport Base from './base';\n\nimport Parsley from './main';\n\n$.extend(true, Parsley, {\n  asyncValidators: {\n    'default': {\n      fn: function (xhr) {\n        // By default, only status 2xx are deemed successful.\n        // Note: we use status instead of state() because responses with status 200\n        // but invalid messages (e.g. an empty body for content type set to JSON) will\n        // result in state() === 'rejected'.\n        return xhr.status >= 200 && xhr.status < 300;\n      },\n      url: false\n    },\n    reverse: {\n      fn: function (xhr) {\n        // If reverse option is set, a failing ajax request is considered successful\n        return xhr.status < 200 || xhr.status >= 300;\n      },\n      url: false\n    }\n  },\n\n  addAsyncValidator: function (name, fn, url, options) {\n    Parsley.asyncValidators[name] = {\n      fn: fn,\n      url: url || false,\n      options: options || {}\n    };\n\n    return this;\n  }\n\n});\n\nParsley.addValidator('remote', {\n  requirementType: {\n    '': 'string',\n    'validator': 'string',\n    'reverse': 'boolean',\n    'options': 'object'\n  },\n\n  validateString: function (value, url, options, instance) {\n    var data = {};\n    var ajaxOptions;\n    var csr;\n    var validator = options.validator || (true === options.reverse ? 'reverse' : 'default');\n\n    if ('undefined' === typeof Parsley.asyncValidators[validator])\n      throw new Error('Calling an undefined async validator: `' + validator + '`');\n\n    url = Parsley.asyncValidators[validator].url || url;\n\n    // Fill current value\n    if (url.indexOf('{value}') > -1) {\n      url = url.replace('{value}', encodeURIComponent(value));\n    } else {\n      data[instance.element.getAttribute('name') || instance.element.getAttribute('id')] = value;\n    }\n\n    // Merge options passed in from the function with the ones in the attribute\n    var remoteOptions = $.extend(true, options.options || {} , Parsley.asyncValidators[validator].options);\n\n    // All `$.ajax(options)` could be overridden or extended directly from DOM in `data-parsley-remote-options`\n    ajaxOptions = $.extend(true, {}, {\n      url: url,\n      data: data,\n      type: 'GET'\n    }, remoteOptions);\n\n    // Generate store key based on ajax options\n    instance.trigger('field:ajaxoptions', instance, ajaxOptions);\n\n    csr = $.param(ajaxOptions);\n\n    // Initialise querry cache\n    if ('undefined' === typeof Parsley._remoteCache)\n      Parsley._remoteCache = {};\n\n    // Try to retrieve stored xhr\n    var xhr = Parsley._remoteCache[csr] = Parsley._remoteCache[csr] || $.ajax(ajaxOptions);\n\n    var handleXhr = function () {\n      var result = Parsley.asyncValidators[validator].fn.call(instance, xhr, url, options);\n      if (!result) // Map falsy results to rejected promise\n        result = $.Deferred().reject();\n      return $.when(result);\n    };\n\n    return xhr.then(handleXhr, handleXhr);\n  },\n\n  priority: -1\n});\n\nParsley.on('form:submit', function () {\n  Parsley._remoteCache = {};\n});\n\nBase.prototype.addAsyncValidator = function () {\n  Utils.warnOnce('Accessing the method `addAsyncValidator` through an instance is deprecated. Simply call `Parsley.addAsyncValidator(...)`');\n  return Parsley.addAsyncValidator(...arguments);\n};\n","// This is included with the Parsley library itself,\n// thus there is no use in adding it to your project.\nimport Parsley from '../parsley/main';\n\nParsley.addMessages('en', {\n  defaultMessage: \"This value seems to be invalid.\",\n  type: {\n    email:        \"This value should be a valid email.\",\n    url:          \"This value should be a valid url.\",\n    number:       \"This value should be a valid number.\",\n    integer:      \"This value should be a valid integer.\",\n    digits:       \"This value should be digits.\",\n    alphanum:     \"This value should be alphanumeric.\"\n  },\n  notblank:       \"This value should not be blank.\",\n  required:       \"This value is required.\",\n  pattern:        \"This value seems to be invalid.\",\n  min:            \"This value should be greater than or equal to %s.\",\n  max:            \"This value should be lower than or equal to %s.\",\n  range:          \"This value should be between %s and %s.\",\n  minlength:      \"This value is too short. It should have %s characters or more.\",\n  maxlength:      \"This value is too long. It should have %s characters or fewer.\",\n  length:         \"This value length is invalid. It should be between %s and %s characters long.\",\n  mincheck:       \"You must select at least %s choices.\",\n  maxcheck:       \"You must select %s choices or fewer.\",\n  check:          \"You must select between %s and %s choices.\",\n  equalto:        \"This value should be the same.\"\n});\n\nParsley.setLocale('en');\n","/**\n * inputevent - Alleviate browser bugs for input events\n * https://github.com/marcandre/inputevent\n * @version v0.0.3 - (built Thu, Apr 14th 2016, 5:58 pm)\n * @author Marc-Andre Lafortune <github@marc-andre.ca>\n * @license MIT\n */\n\nimport $ from 'jquery';\n\nfunction InputEvent() {\n  let globals = window || global;\n\n  // Slightly odd way construct our object. This way methods are force bound.\n  // Used to test for duplicate library.\n  Object.assign(this, {\n\n    // For browsers that do not support isTrusted, assumes event is native.\n    isNativeEvent: evt => {\n      return evt.originalEvent && evt.originalEvent.isTrusted !== false;\n    },\n\n    fakeInputEvent: evt => {\n      if (this.isNativeEvent(evt)) {\n        $(evt.target).trigger('input');\n      }\n    },\n\n    misbehaves: evt => {\n      if (this.isNativeEvent(evt)) {\n        this.behavesOk(evt);\n        $(document)\n          .on('change.inputevent', evt.data.selector, this.fakeInputEvent);\n        this.fakeInputEvent(evt);\n      }\n    },\n\n    behavesOk: evt => {\n      if (this.isNativeEvent(evt)) {\n        $(document) // Simply unbinds the testing handler\n          .off('input.inputevent', evt.data.selector, this.behavesOk)\n          .off('change.inputevent', evt.data.selector, this.misbehaves);\n      }\n    },\n\n    // Bind the testing handlers\n    install: () => {\n      if (globals.inputEventPatched) {\n        return;\n      }\n      globals.inputEventPatched = '0.0.3';\n      for (let selector of ['select', 'input[type=\"checkbox\"]', 'input[type=\"radio\"]', 'input[type=\"file\"]']) {\n        $(document)\n          .on('input.inputevent', selector, {selector}, this.behavesOk)\n          .on('change.inputevent', selector, {selector}, this.misbehaves);\n      }\n    },\n\n    uninstall: () => {\n      delete globals.inputEventPatched;\n      $(document).off('.inputevent');\n    }\n\n  });\n};\n\nexport default new InputEvent();\n","import $ from 'jquery';\nimport Parsley from './parsley/main';\nimport './parsley/pubsub';\nimport './parsley/remote';\nimport './i18n/en';\nimport inputevent from './vendor/inputevent';\n\ninputevent.install();\n\nexport default Parsley;\n"]}